inputs:
  - tests-examples/55-tests/tables/16-1.txt
  - tests-examples/55-tests/tables/16-2.txt
  - tests-examples/55-tests/tables/16-3.txt
output: tests-examples/55-tests/tables/16.out
constants:
  - AWS
functions:
  - n
columns:
  - S_name
bools:
  - ==
loc: 4
solution:
  - natural_join
  - summarise
  - filter
  - anti_join
comment: |
  5.2.4 optimal solution

  df1 = inner_join(parts,catalog) %>% inner_join(suppliers) %>%
    group_by(P_name,S_name) %>% summarise(n = n()) %>%
    filter(S_name == "AWS")
  df2 = inner_join(parts,catalog) %>% inner_join(suppliers) %>%
    group_by(P_name) %>% summarise(n = n())
  out = inner_join(df1,df2) %>% select(P_name)

  catalog <- read.table("tests-examples/55-tests/tables/16-1.txt", sep =",", header=T)
  catalog
  parts <- read.table("tests-examples/55-tests/tables/16-2.txt", sep =",", header=T)
  parts
  suppliers <- read.table("tests-examples/55-tests/tables/16-3.txt", sep =",", header=T)
  suppliers
  datout <- read.table("tests-examples/55-tests/tables/16.out", sep =",", header=T)
  datout


  ALTERNATIVE SOLUTION?

  df4 <- inner_join(input1, input3)
  df5 <- df4 %>% group_by(P_id, S_name) %>% summarise(n = n()) %>% ungroup()
  df6 <- df5 %>% filter(S_name != 'AWS')
  df7 <- anti_join(input2, df6, by=c('P_id'))
  out <- df7 %>% select(P_name) %>% arrange(P_name)
