db: tests-examples/db2csv/car_1/tables/car_1.sqlite
inputs:
 - tests-examples/db2csv/car_1/tables/cars_data.csv
output: tests-examples/db2csv/car_1/tables/0078_dev.csv
raw_question: What is the number of carsw ith over 6 cylinders? 
question_index: 164 
has_limit: False 
has_order_by: False 
order_by_direction: []
constants:
 - 6
join_columns: []
groupby_columns: []
orderby_columns: []
functions:
 - count
columns:
 - cylinders
filters:
 - '>'
ieu: []
comment: |-
  SELECT COUNT(*)
  FROM CARS_DATA
  WHERE Cylinders > 6;

sql: |-
  SELECT COUNT(*)
  FROM CARS_DATA
  WHERE Cylinders > 6;
smbop_beam_join_columns:
- []
- []
- []
- []
- []
- []
- []
smbop_beam_groupby_columns:
- []
- []
- []
- []
- []
- []
- []
smbop_beam_orderby_columns:
- []
- []
- []
- []
- []
- []
- []
smbop_beam_tables:
- - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/car_names.csv
  - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/car_names.csv
  - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/car_names.csv
  - tests-examples/db2csv/car_1/tables/cars_data.csv
smbop_beam_constants:
- - 6
- - 6
- - 6
- - 6
- - 6
- - 6
- - 6
smbop_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
- - count
smbop_beam_columns:
- - cylinders
- - cylinders
- - cylinders
- - cylinders
- - cylinders
- - cylinders
- - cylinders
smbop_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
smbop_beam_filters:
- - '>'
- - '='
- - '!='
- - '>='
  - '>'
- - '='
- - '<'
- - '<'
smbop_beam_inferred_code:
  - SELECT COUNT( * ) FROM cars_data WHERE cars_data.cylinders > 6
  - SELECT COUNT( * ) FROM cars_data WHERE cars_data.cylinders = 6
  - SELECT COUNT( * ) FROM cars_data WHERE cars_data.cylinders != 6
  - SELECT COUNT( * ) FROM cars_data WHERE cars_data.cylinders >= 6
  - SELECT COUNT( * ) FROM car_names, cars_data WHERE cars_data.cylinders = 6
  - SELECT COUNT( * ) FROM cars_data, car_names WHERE cars_data.cylinders<6
  - SELECT COUNT( * ) FROM car_names, cars_data WHERE cars_data.cylinders<6
smbop_beam_inferred_code_w_terminals:
  - SELECT COUNT( * ) FROM cars_data WHERE cars_data.cylinders > 6
  - SELECT COUNT( * ) FROM cars_data WHERE cars_data.cylinders = 6
  - SELECT COUNT( * ) FROM cars_data WHERE cars_data.cylinders != 6
  - SELECT COUNT( * ) FROM cars_data WHERE cars_data.cylinders >= 6
  - SELECT COUNT( * ) FROM car_names, cars_data WHERE cars_data.cylinders = 6
  - SELECT COUNT( * ) FROM cars_data, car_names WHERE cars_data.cylinders<6
  - SELECT COUNT( * ) FROM car_names, cars_data WHERE cars_data.cylinders<6
smbop_beam_has_limit:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_join_columns:
- []
- []
- []
- []
- - countryid
  - id
  - continent
  - makeid
  - country
  - model
  - contid
  - maker
- - makeid
  - id
- - countryid
  - id
  - makeid
  - country
  - model
  - maker
- - makeid
  - id
  - model
ratsql_beam_groupby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_orderby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_tables:
- - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/car_names.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/car_names.csv
  - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/car_names.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/cars_data.csv
  - tests-examples/db2csv/car_1/tables/car_names.csv
ratsql_beam_constants:
- - 6
- - 6
- - 6
- - 6
- - 6
- - 6
  - '1'
- - 6
- - 6
- - 6
- - 6
ratsql_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
- - count
- - count
ratsql_beam_columns:
- - cylinders
- - cylinders
- - cylinders
- - cylinders
- - cylinders
- - cylinders
- - cylinders
- - cylinders
ratsql_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_filters:
- - '>'
- - '='
- - '>'
- - '>'
- - '>'
- - '>'
- - '>'
- - '>'
ratsql_beam_inferred_code:
  - SELECT Count(*) FROM cars_data WHERE cars_data.Cylinders > 'terminal'
  - SELECT Count(*) FROM cars_data WHERE cars_data.Cylinders = 'terminal'
  - SELECT Count(*) FROM cars_data WHERE DISTINCT cars_data.Cylinders > 'terminal'
  - SELECT Count(DISTINCT *) FROM cars_data WHERE cars_data.Cylinders > 'terminal'
  - SELECT DISTINCT Count(*) FROM cars_data WHERE cars_data.Cylinders > 'terminal'
  - SELECT Count(*) FROM cars_data WHERE cars_data.Cylinders > 'terminal' LIMIT 1
  - SELECT Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders > 'terminal'
  - SELECT Count(*) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders > 'terminal'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders > 'terminal'
  - SELECT Count(*) FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders > 'terminal'
ratsql_beam_inferred_code_w_terminals:
  - SELECT Count(*) FROM cars_data WHERE cars_data.Cylinders > 6
  - SELECT Count(*) FROM cars_data WHERE cars_data.Cylinders = 6
  - SELECT Count(*) FROM cars_data WHERE DISTINCT cars_data.Cylinders > 6
  - SELECT Count(DISTINCT *) FROM cars_data WHERE cars_data.Cylinders > 6
  - SELECT DISTINCT Count(*) FROM cars_data WHERE cars_data.Cylinders > 6
  - SELECT Count(*) FROM cars_data WHERE cars_data.Cylinders > 6 LIMIT 1
  - SELECT Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders > 6
  - SELECT Count(*) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders > 6
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders > 6
  - SELECT Count(*) FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders > 6
ratsql_beam_has_limit:
  - False
  - False
  - False
  - True
  - False
  - False
  - False
  - False
ratsql_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
ratsql_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_score_history:
- - -0.10413360595703125
  - -0.1044759750366211
  - -0.10677266120910645
  - -0.1036231517791748
  - -0.10125398635864258
  - -0.10315608978271484
  - -0.11629390716552734
  - -0.1028432846069336
  - -0.10532903671264648
  - -0.10443305969238281
  - -0.10585355758666992
  - -0.16250893473625183
  - -0.11117124557495117
  - -0.10506844520568848
  - -0.09995889663696289
  - -0.2513084411621094
  - -0.09793996810913086
  - -0.10290336608886719
  - -0.10627460479736328
  - -0.10427188873291016
  - -0.10459089279174805
  - -0.37375161051750183
  - -0.11159896850585938
  - -0.10562372207641602
  - -0.11389636993408203
  - -0.10052680969238281
  - -0.10357093811035156
  - -0.1077580451965332
  - -0.10482549667358398
  - -0.09729242324829102
  - -0.10291671752929688
  - -0.10831165313720703
  - -0.10543060302734375
  - -0.10361909866333008
  - -0.13816022872924805
- - -0.10413360595703125
  - -0.1044759750366211
  - -0.10677266120910645
  - -0.1036231517791748
  - -0.10125398635864258
  - -0.10315608978271484
  - -0.11629390716552734
  - -0.1028432846069336
  - -0.10532903671264648
  - -0.10443305969238281
  - -0.10585355758666992
  - -0.16250893473625183
  - -0.11117124557495117
  - -0.10506844520568848
  - -0.09995889663696289
  - -2.859036445617676
  - -0.12192678451538086
  - -0.1012730598449707
  - -0.10504531860351562
  - -0.10488033294677734
  - -0.10501384735107422
  - -0.11486658453941345
  - -0.11147737503051758
  - -0.10544538497924805
  - -0.1078939437866211
  - -0.0993194580078125
  - -0.10380935668945312
  - -0.10771369934082031
  - -0.10481882095336914
  - -0.0976872444152832
  - -0.10303544998168945
  - -0.10857677459716797
  - -0.10542011260986328
  - -0.10355091094970703
  - -0.13978058099746704
- - -0.10413360595703125
  - -0.1044759750366211
  - -0.10677266120910645
  - -0.1036231517791748
  - -0.10125398635864258
  - -0.10315608978271484
  - -0.11629390716552734
  - -0.1028432846069336
  - -0.10532903671264648
  - -0.10443305969238281
  - -0.10585355758666992
  - -0.16250893473625183
  - -0.11117124557495117
  - -0.10506844520568848
  - -0.09995889663696289
  - -0.2513084411621094
  - -0.09793996810913086
  - -0.10290336608886719
  - -0.10627460479736328
  - -0.10427188873291016
  - -0.10459089279174805
  - -0.37375161051750183
  - -3.4456701278686523
  - -0.10582351684570312
  - -0.11602163314819336
  - -0.10091638565063477
  - -0.10342264175415039
  - -0.10774374008178711
  - -0.10480952262878418
  - -0.09722280502319336
  - -0.1029667854309082
  - -0.10837745666503906
  - -0.10552597045898438
  - -0.10359477996826172
  - -0.13925832509994507
- - -0.10413360595703125
  - -0.1044759750366211
  - -0.10677266120910645
  - -0.1036231517791748
  - -0.10125398635864258
  - -0.10315608978271484
  - -0.11629390716552734
  - -0.1028432846069336
  - -0.10532903671264648
  - -0.10443305969238281
  - -0.10585355758666992
  - -0.16250893473625183
  - -3.4781665802001953
  - -0.10637784004211426
  - -0.0947723388671875
  - -0.2282876968383789
  - -0.09641551971435547
  - -0.10248613357543945
  - -0.10607194900512695
  - -0.10421180725097656
  - -0.10463476181030273
  - -0.37523016333580017
  - -0.1116938591003418
  - -0.1056215763092041
  - -0.11414003372192383
  - -0.10045099258422852
  - -0.10343027114868164
  - -0.10773491859436035
  - -0.10481572151184082
  - -0.09734487533569336
  - -0.10293769836425781
  - -0.10861444473266602
  - -0.10554218292236328
  - -0.10359621047973633
  - -0.1401797980070114
- - -0.10413360595703125
  - -0.1044759750366211
  - -3.547820568084717
  - -0.10370159149169922
  - -0.10098934173583984
  - -0.1031503677368164
  - -0.11350488662719727
  - -0.10250663757324219
  - -0.10526323318481445
  - -0.10441446304321289
  - -0.10583972930908203
  - -0.1636822521686554
  - -0.11117172241210938
  - -0.1050260066986084
  - -0.10008668899536133
  - -0.21312904357910156
  - -0.09792661666870117
  - -0.10286378860473633
  - -0.10622119903564453
  - -0.10425567626953125
  - -0.10458660125732422
  - -0.376535564661026
  - -0.11151504516601562
  - -0.10562896728515625
  - -0.11385631561279297
  - -0.10052347183227539
  - -0.1033778190612793
  - -0.10773801803588867
  - -0.10483622550964355
  - -0.09728193283081055
  - -0.10289955139160156
  - -0.10832643508911133
  - -0.10542488098144531
  - -0.10361909866333008
  - -0.13804446160793304
- - -0.10413360595703125
  - -0.1044759750366211
  - -0.10677266120910645
  - -0.1036231517791748
  - -0.10125398635864258
  - -0.10315608978271484
  - -0.11629390716552734
  - -0.1028432846069336
  - -0.10532903671264648
  - -0.10443305969238281
  - -0.10585355758666992
  - -0.16250893473625183
  - -0.11117124557495117
  - -0.10506844520568848
  - -0.09995889663696289
  - -0.2513084411621094
  - -0.09793996810913086
  - -0.10290336608886719
  - -0.10627460479736328
  - -0.10427188873291016
  - -0.10459089279174805
  - -0.37375161051750183
  - -0.11159896850585938
  - -0.10562372207641602
  - -0.11389636993408203
  - -0.10052680969238281
  - -0.10357093811035156
  - -3.551661968231201
  - -0.10450863838195801
  - -0.09755277633666992
  - -0.10290670394897461
  - -0.1081838607788086
  - -0.1054391860961914
  - -0.10366201400756836
  - -0.13797831535339355
- - -0.10413360595703125
  - -0.1044759750366211
  - -0.10677266120910645
  - -0.1036231517791748
  - -0.10125398635864258
  - -0.10315608978271484
  - -0.11629390716552734
  - -0.1028432846069336
  - -0.10532903671264648
  - -0.10443305969238281
  - -0.10585355758666992
  - -0.16250893473625183
  - -0.11117124557495117
  - -0.10506844520568848
  - -0.09995889663696289
  - -0.2513084411621094
  - -0.09793996810913086
  - -0.10290336608886719
  - -0.10627460479736328
  - -0.10427188873291016
  - -0.10459089279174805
  - -0.37375161051750183
  - -0.11159896850585938
  - -0.10562372207641602
  - -0.11389636993408203
  - -0.10052680969238281
  - -0.10357093811035156
  - -0.1077580451965332
  - -0.10482549667358398
  - -0.09729242324829102
  - -0.10291671752929688
  - -0.10831165313720703
  - -0.10543060302734375
  - -0.10361909866333008
  - -3.6152141094207764
- - -0.10413360595703125
  - -0.1044759750366211
  - -0.10677266120910645
  - -0.1036231517791748
  - -0.10125398635864258
  - -0.10315608978271484
  - -0.11629390716552734
  - -0.1028432846069336
  - -0.10532903671264648
  - -0.10443305969238281
  - -0.10585355758666992
  - -0.16250893473625183
  - -0.11117124557495117
  - -0.10506844520568848
  - -0.09995889663696289
  - -0.2513084411621094
  - -0.09793996810913086
  - -0.10290336608886719
  - -0.10627460479736328
  - -0.10427188873291016
  - -0.10459089279174805
  - -0.37375161051750183
  - -0.11159896850585938
  - -0.10562372207641602
  - -0.11389636993408203
  - -0.10052680969238281
  - -0.10357093811035156
  - -0.1077580451965332
  - -0.10482549667358398
  - -0.09729242324829102
  - -0.10291671752929688
  - -0.10831165313720703
  - -0.10543060302734375
  - -0.10361909866333008
  - -3.6303040981292725
- - -0.10413360595703125
  - -0.1044759750366211
  - -0.10677266120910645
  - -0.1036231517791748
  - -0.10125398635864258
  - -0.10315608978271484
  - -0.11629390716552734
  - -0.1028432846069336
  - -0.10532903671264648
  - -0.10443305969238281
  - -0.10585355758666992
  - -0.16250893473625183
  - -0.11117124557495117
  - -0.10506844520568848
  - -0.09995889663696289
  - -0.2513084411621094
  - -0.09793996810913086
  - -0.10290336608886719
  - -0.10627460479736328
  - -0.10427188873291016
  - -0.10459089279174805
  - -0.37375161051750183
  - -0.11159896850585938
  - -0.10562372207641602
  - -0.11389636993408203
  - -0.10052680969238281
  - -0.10357093811035156
  - -0.1077580451965332
  - -0.10482549667358398
  - -0.09729242324829102
  - -0.10291671752929688
  - -0.10831165313720703
  - -0.10543060302734375
  - -0.10361909866333008
  - -3.6573169231414795
- - -0.10413360595703125
  - -0.1044759750366211
  - -0.10677266120910645
  - -0.1036231517791748
  - -0.10125398635864258
  - -0.10315608978271484
  - -0.11629390716552734
  - -0.1028432846069336
  - -0.10532903671264648
  - -0.10443305969238281
  - -0.10585355758666992
  - -0.16250893473625183
  - -0.11117124557495117
  - -0.10506844520568848
  - -0.09995889663696289
  - -0.2513084411621094
  - -0.09793996810913086
  - -0.10290336608886719
  - -0.10627460479736328
  - -0.10427188873291016
  - -0.10459089279174805
  - -0.37375161051750183
  - -0.11159896850585938
  - -0.10562372207641602
  - -0.11389636993408203
  - -0.10052680969238281
  - -0.10357093811035156
  - -0.1077580451965332
  - -0.10482549667358398
  - -0.09729242324829102
  - -0.10291671752929688
  - -0.10831165313720703
  - -0.10543060302734375
  - -0.10361909866333008
  - -3.670441150665283
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Gt')
  - ('Gt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Cylinders'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'cars_data'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Cylinders'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'cars_data'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Gt')
  - ('Gt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Cylinders'
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'cars_data'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Gt')
  - ('Gt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Cylinders'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'cars_data'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'True'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Gt')
  - ('Gt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Cylinders'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'cars_data'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Gt')
  - ('Gt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Cylinders'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'True'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'cars_data'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Gt')
  - ('Gt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Cylinders'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'continents'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Gt')
  - ('Gt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Cylinders'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_names'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Gt')
  - ('Gt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Cylinders'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Gt')
  - ('Gt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Cylinders'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'model_list'
