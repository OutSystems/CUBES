db: tests-examples/db2csv/car_1/tables/car_1.sqlite
inputs:
 - tests-examples/db2csv/car_1/tables/continents.csv
 - tests-examples/db2csv/car_1/tables/countries.csv
output: tests-examples/db2csv/car_1/tables/0003_dev.csv
raw_question: How many countries does each continent have? List the continent id, continent name and the number of countries. 
question_index: 89 
has_limit: False 
has_order_by: False 
order_by_direction: []
constants: []
join_columns:
 - contid
 - continent
groupby_columns:
 - contid
orderby_columns: []
functions:
 - count
columns: []
filters: []
ieu: []
comment: |-
  SELECT T1.ContId,
         T1.Continent,
         count(*)
  FROM CONTINENTS AS T1
  JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent
  GROUP BY T1.ContId;

sql: |-
  SELECT T1.ContId,
         T1.Continent,
         count(*)
  FROM CONTINENTS AS T1
  JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent
  GROUP BY T1.ContId;
smbop_beam_join_columns:
- - contid
  - continent
- - continent
  - contid
- - contid
  - continent
- - continent
  - contid
- - continent
  - contid
- - contid
  - continent
- - continent
  - contid
- - contid
  - continent
- - contid
  - continent
- - continent
  - contid
smbop_beam_groupby_columns:
- - continent
- - continent
- - continent
- - continent
- - contid
- - contid
- []
- []
- []
- []
smbop_beam_orderby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_tables:
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
smbop_beam_constants:
- []
- []
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
- - count
- - count
- - count
- - count
smbop_beam_columns:
- []
- []
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_filters:
- []
- []
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_inferred_code:
  - SELECT countries.continent , countries.countryname , COUNT( * ) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY countries.continent
  - SELECT countries.continent , countries.countryname , COUNT( * ) FROM countries JOIN continents ON countries.continent = continents.contid GROUP BY countries.continent
  - SELECT continents.contid , countries.countryname , COUNT( * ) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY countries.continent
  - SELECT continents.contid , countries.countryname , COUNT( * ) FROM countries JOIN continents ON countries.continent = continents.contid GROUP BY countries.continent
  - SELECT countries.continent , countries.countryname , COUNT( * ) FROM countries JOIN continents ON countries.continent = continents.contid GROUP BY continents.contid
  - SELECT countries.continent , countries.countryname , COUNT( * ) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid
  - SELECT countries.continent , countries.countryname , COUNT( * ) FROM countries JOIN continents ON countries.continent = continents.contid
  - SELECT countries.continent , countries.countryname , COUNT( * ) FROM continents JOIN countries ON continents.contid = countries.continent
  - SELECT continents.contid , countries.countryname , COUNT( * ) FROM continents JOIN countries ON continents.contid = countries.continent
  - SELECT continents.contid , countries.countryname , COUNT( * ) FROM countries JOIN continents ON countries.continent = continents.contid
smbop_beam_inferred_code_w_terminals:
  - SELECT countries.continent , countries.countryname , COUNT( * ) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY countries.continent
  - SELECT countries.continent , countries.countryname , COUNT( * ) FROM countries JOIN continents ON countries.continent = continents.contid GROUP BY countries.continent
  - SELECT continents.contid , countries.countryname , COUNT( * ) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY countries.continent
  - SELECT continents.contid , countries.countryname , COUNT( * ) FROM countries JOIN continents ON countries.continent = continents.contid GROUP BY countries.continent
  - SELECT countries.continent , countries.countryname , COUNT( * ) FROM countries JOIN continents ON countries.continent = continents.contid GROUP BY continents.contid
  - SELECT countries.continent , countries.countryname , COUNT( * ) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid
  - SELECT countries.continent , countries.countryname , COUNT( * ) FROM countries JOIN continents ON countries.continent = continents.contid
  - SELECT countries.continent , countries.countryname , COUNT( * ) FROM continents JOIN countries ON continents.contid = countries.continent
  - SELECT continents.contid , countries.countryname , COUNT( * ) FROM continents JOIN countries ON continents.contid = countries.continent
  - SELECT continents.contid , countries.countryname , COUNT( * ) FROM countries JOIN continents ON countries.continent = continents.contid
smbop_beam_has_limit:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_join_columns:
- - contid
  - continent
- - contid
  - continent
- - contid
  - continent
- []
- - contid
  - continent
- - countryid
  - id
  - continent
  - makeid
  - country
  - model
  - contid
  - maker
- - contid
  - countryid
  - country
  - continent
ratsql_beam_groupby_columns:
- - contid
- - continent
- - contid
- - contid
- - contid
- - contid
- - contid
ratsql_beam_orderby_columns:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_tables:
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/car_names.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
ratsql_beam_constants:
- []
- []
- []
- []
- []
- []
- []
- - '1'
- []
- []
ratsql_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
- - count
ratsql_beam_columns:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_filters:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_inferred_code:
  - SELECT continents.ContId, continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId
  - SELECT continents.ContId, continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.Continent
  - SELECT continents.ContId, continents.Continent, Count(DISTINCT *) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId
  - SELECT DISTINCT continents.ContId, continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId
  - SELECT continents.ContId, DISTINCT continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId
  - SELECT continents.ContId, continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY DISTINCT continents.ContId
  - SELECT continents.ContId, continents.Continent, Count(*) FROM continents GROUP BY continents.ContId
  - SELECT continents.ContId, continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId LIMIT 1
  - SELECT continents.ContId, continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY continents.ContId
  - SELECT continents.ContId, continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.ContId
ratsql_beam_inferred_code_w_terminals:
  - SELECT continents.ContId, continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId
  - SELECT continents.ContId, continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.Continent
  - SELECT continents.ContId, continents.Continent, Count(DISTINCT *) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId
  - SELECT DISTINCT continents.ContId, continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId
  - SELECT continents.ContId, DISTINCT continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId
  - SELECT continents.ContId, continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY DISTINCT continents.ContId
  - SELECT continents.ContId, continents.Continent, Count(*) FROM continents GROUP BY continents.ContId
  - SELECT continents.ContId, continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId LIMIT 1
  - SELECT continents.ContId, continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY continents.ContId
  - SELECT continents.ContId, continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.ContId
ratsql_beam_has_limit:
  - False
  - False
  - False
  - False
  - True
  - False
  - False
ratsql_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
ratsql_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_score_history:
- - -0.10389423370361328
  - -0.10108041763305664
  - -0.10680770874023438
  - -0.10450625419616699
  - -0.09087181091308594
  - -0.10507726669311523
  - -0.10560464859008789
  - -0.10107135772705078
  - -0.10426473617553711
  - -0.1046142578125
  - -0.10511445999145508
  - -0.067870132625103
  - -0.11330866813659668
  - -0.10502767562866211
  - -0.10172653198242188
  - -0.10512018203735352
  - -0.10144901275634766
  - -0.10478687286376953
  - -0.10758256912231445
  - -0.10539531707763672
  - -0.055392902344465256
  - -0.11251282691955566
  - -0.10515904426574707
  - -0.10306882858276367
  - -0.1339569091796875
  - -0.10149335861206055
  - -0.10451459884643555
  - -0.10582923889160156
  - -0.10488700866699219
  - -0.1014946922659874
  - -0.11268448829650879
  - -0.1062014102935791
  - -0.11246109008789062
  - -0.11259031295776367
  - -0.1017460823059082
  - -0.1044769287109375
  - -0.10402441024780273
  - -0.3025595247745514
  - -0.10978817939758301
  - -0.10578536987304688
  - -0.10525989532470703
  - -0.10722851753234863
  - -0.1050407886505127
  - -0.09811878204345703
  - -0.10414600372314453
  - -0.11345386505126953
  - -0.10487222671508789
  - -0.1054081916809082
  - -0.10459272563457489
  - -0.10442495346069336
  - -0.10462045669555664
  - -0.10260418057441711
- - -0.10389423370361328
  - -0.10108041763305664
  - -0.10680770874023438
  - -0.10450625419616699
  - -0.09087181091308594
  - -0.10507726669311523
  - -0.10560464859008789
  - -0.10107135772705078
  - -0.10426473617553711
  - -0.1046142578125
  - -0.10511445999145508
  - -0.067870132625103
  - -0.11330866813659668
  - -0.10502767562866211
  - -0.10172653198242188
  - -0.10512018203735352
  - -0.10144901275634766
  - -0.10478687286376953
  - -0.10758256912231445
  - -0.10539531707763672
  - -0.055392902344465256
  - -0.11251282691955566
  - -0.10515904426574707
  - -0.10306882858276367
  - -0.1339569091796875
  - -0.10149335861206055
  - -0.10451459884643555
  - -0.10582923889160156
  - -0.10488700866699219
  - -0.1014946922659874
  - -0.11268448829650879
  - -0.1062014102935791
  - -0.11246109008789062
  - -0.11259031295776367
  - -0.1017460823059082
  - -0.1044769287109375
  - -0.10402441024780273
  - -1.9945722818374634
  - -0.11114668846130371
  - -0.10561513900756836
  - -0.10523271560668945
  - -0.10747170448303223
  - -0.10507535934448242
  - -0.09797382354736328
  - -0.10460329055786133
  - -0.11220502853393555
  - -0.1045832633972168
  - -0.1057271957397461
  - -0.1038956493139267
  - -0.1042943000793457
  - -0.10457944869995117
  - -0.10475978255271912
- - -0.10389423370361328
  - -0.10108041763305664
  - -0.10680770874023438
  - -0.10450625419616699
  - -0.09087181091308594
  - -0.10507726669311523
  - -0.10560464859008789
  - -0.10107135772705078
  - -0.10426473617553711
  - -0.1046142578125
  - -0.10511445999145508
  - -0.067870132625103
  - -0.11330866813659668
  - -0.10502767562866211
  - -0.10172653198242188
  - -0.10512018203735352
  - -0.10144901275634766
  - -0.10478687286376953
  - -0.10758256912231445
  - -0.10539531707763672
  - -0.055392902344465256
  - -0.11251282691955566
  - -0.10515904426574707
  - -0.10306882858276367
  - -0.1339569091796875
  - -0.10149335861206055
  - -0.10451459884643555
  - -0.10582923889160156
  - -0.10488700866699219
  - -0.1014946922659874
  - -3.433677911758423
  - -0.10510897636413574
  - -0.11577463150024414
  - -0.11165523529052734
  - -0.10189390182495117
  - -0.10447168350219727
  - -0.10401391983032227
  - -0.30145660042762756
  - -0.10990691184997559
  - -0.10576057434082031
  - -0.1051030158996582
  - -0.1072394847869873
  - -0.10501933097839355
  - -0.09805631637573242
  - -0.1040806770324707
  - -0.11367368698120117
  - -0.10494327545166016
  - -0.10523271560668945
  - -0.10414349287748337
  - -0.10446357727050781
  - -0.10460901260375977
  - -0.1023646667599678
- - -0.10389423370361328
  - -0.10108041763305664
  - -0.10680770874023438
  - -0.10450625419616699
  - -0.09087181091308594
  - -0.10507726669311523
  - -0.10560464859008789
  - -0.10107135772705078
  - -0.10426473617553711
  - -0.1046142578125
  - -0.10511445999145508
  - -0.067870132625103
  - -3.450228214263916
  - -0.10500645637512207
  - -0.10181760787963867
  - -0.10654735565185547
  - -0.10124731063842773
  - -0.10478830337524414
  - -0.10743570327758789
  - -0.10525369644165039
  - -0.059186119586229324
  - -0.112518310546875
  - -0.1051490306854248
  - -0.1027216911315918
  - -0.13454580307006836
  - -0.10152912139892578
  - -0.10451316833496094
  - -0.1058187484741211
  - -0.10498237609863281
  - -0.1002354845404625
  - -0.11269712448120117
  - -0.10620617866516113
  - -0.11231231689453125
  - -0.11266279220581055
  - -0.10176515579223633
  - -0.10448265075683594
  - -0.10402917861938477
  - -0.3041844367980957
  - -0.10979843139648438
  - -0.1057901382446289
  - -0.10527658462524414
  - -0.10723233222961426
  - -0.10504364967346191
  - -0.09810066223144531
  - -0.1041717529296875
  - -0.11344766616821289
  - -0.10486888885498047
  - -0.10542106628417969
  - -0.1045965924859047
  - -0.10442256927490234
  - -0.10462093353271484
  - -0.10259352624416351
- - -0.10389423370361328
  - -0.10108041763305664
  - -0.10680770874023438
  - -0.10450625419616699
  - -0.09087181091308594
  - -0.10507726669311523
  - -0.10560464859008789
  - -0.10107135772705078
  - -0.10426473617553711
  - -0.1046142578125
  - -0.10511445999145508
  - -0.067870132625103
  - -0.11330866813659668
  - -0.10502767562866211
  - -0.10172653198242188
  - -0.10512018203735352
  - -0.10144901275634766
  - -0.10478687286376953
  - -0.10758256912231445
  - -0.10539531707763672
  - -0.055392902344465256
  - -3.459547519683838
  - -0.1048736572265625
  - -0.10299396514892578
  - -0.13494396209716797
  - -0.10196828842163086
  - -0.10449981689453125
  - -0.10587072372436523
  - -0.10492229461669922
  - -0.10301904380321503
  - -0.11267805099487305
  - -0.10618233680725098
  - -0.11258554458618164
  - -0.11265850067138672
  - -0.10175561904907227
  - -0.10439729690551758
  - -0.10405206680297852
  - -0.29842180013656616
  - -0.1098031997680664
  - -0.10578060150146484
  - -0.10527610778808594
  - -0.10723042488098145
  - -0.1050412654876709
  - -0.09812307357788086
  - -0.10413026809692383
  - -0.1134486198425293
  - -0.10487890243530273
  - -0.10539865493774414
  - -0.10455825924873352
  - -0.10442447662353516
  - -0.10462141036987305
  - -0.10255458205938339
- - -0.10389423370361328
  - -0.10108041763305664
  - -0.10680770874023438
  - -0.10450625419616699
  - -0.09087181091308594
  - -0.10507726669311523
  - -0.10560464859008789
  - -0.10107135772705078
  - -0.10426473617553711
  - -0.1046142578125
  - -0.10511445999145508
  - -0.067870132625103
  - -0.11330866813659668
  - -0.10502767562866211
  - -0.10172653198242188
  - -0.10512018203735352
  - -0.10144901275634766
  - -0.10478687286376953
  - -0.10758256912231445
  - -0.10539531707763672
  - -0.055392902344465256
  - -0.11251282691955566
  - -0.10515904426574707
  - -0.10306882858276367
  - -0.1339569091796875
  - -0.10149335861206055
  - -0.10451459884643555
  - -0.10582923889160156
  - -0.10488700866699219
  - -0.1014946922659874
  - -0.11268448829650879
  - -0.1062014102935791
  - -0.11246109008789062
  - -0.11259031295776367
  - -0.1017460823059082
  - -0.1044769287109375
  - -0.10402441024780273
  - -0.3025595247745514
  - -3.480288028717041
  - -0.10523390769958496
  - -0.10819816589355469
  - -0.10719633102416992
  - -0.10505843162536621
  - -0.09833431243896484
  - -0.105194091796875
  - -0.11261367797851562
  - -0.1049647331237793
  - -0.10496997833251953
  - -0.10405594110488892
  - -0.10441780090332031
  - -0.10468912124633789
  - -0.10376863926649094
- - -0.10389423370361328
  - -0.10108041763305664
  - -0.10680770874023438
  - -0.10450625419616699
  - -0.09087181091308594
  - -0.10507726669311523
  - -0.10560464859008789
  - -0.10107135772705078
  - -0.10426473617553711
  - -0.1046142578125
  - -0.10511445999145508
  - -0.067870132625103
  - -0.11330866813659668
  - -0.10502767562866211
  - -0.10172653198242188
  - -0.10512018203735352
  - -0.10144901275634766
  - -0.10478687286376953
  - -0.10758256912231445
  - -0.10539531707763672
  - -0.055392902344465256
  - -0.11251282691955566
  - -0.10515904426574707
  - -0.10306882858276367
  - -0.1339569091796875
  - -0.10149335861206055
  - -0.10451459884643555
  - -0.10582923889160156
  - -0.10488700866699219
  - -0.1014946922659874
  - -0.11268448829650879
  - -0.1062014102935791
  - -0.11246109008789062
  - -0.11259031295776367
  - -0.1017460823059082
  - -0.1044769287109375
  - -0.10402441024780273
  - -0.3025595247745514
  - -0.10978817939758301
  - -0.10578536987304688
  - -0.10525989532470703
  - -0.10722851753234863
  - -0.1050407886505127
  - -0.09811878204345703
  - -0.10414600372314453
  - -0.11345386505126953
  - -0.10487222671508789
  - -0.1054081916809082
  - -0.10459272563457489
  - -0.10442495346069336
  - -0.10462045669555664
  - -3.518460512161255
- - -0.10389423370361328
  - -0.10108041763305664
  - -0.10680770874023438
  - -0.10450625419616699
  - -0.09087181091308594
  - -0.10507726669311523
  - -0.10560464859008789
  - -0.10107135772705078
  - -0.10426473617553711
  - -0.1046142578125
  - -0.10511445999145508
  - -0.067870132625103
  - -0.11330866813659668
  - -0.10502767562866211
  - -0.10172653198242188
  - -0.10512018203735352
  - -0.10144901275634766
  - -0.10478687286376953
  - -0.10758256912231445
  - -0.10539531707763672
  - -0.055392902344465256
  - -0.11251282691955566
  - -0.10515904426574707
  - -0.10306882858276367
  - -0.1339569091796875
  - -0.10149335861206055
  - -0.10451459884643555
  - -0.10582923889160156
  - -0.10488700866699219
  - -0.1014946922659874
  - -0.11268448829650879
  - -0.1062014102935791
  - -0.11246109008789062
  - -0.11259031295776367
  - -0.1017460823059082
  - -0.1044769287109375
  - -0.10402441024780273
  - -0.3025595247745514
  - -0.10978817939758301
  - -0.10578536987304688
  - -0.10525989532470703
  - -3.552051305770874
  - -0.10517048835754395
  - -0.09802913665771484
  - -0.10455513000488281
  - -0.11389780044555664
  - -0.10481548309326172
  - -0.10544395446777344
  - -0.10456877946853638
  - -0.10444831848144531
  - -0.10464334487915039
  - -0.10290956497192383
- - -0.10389423370361328
  - -0.10108041763305664
  - -0.10680770874023438
  - -0.10450625419616699
  - -0.09087181091308594
  - -0.10507726669311523
  - -0.10560464859008789
  - -0.10107135772705078
  - -0.10426473617553711
  - -0.1046142578125
  - -0.10511445999145508
  - -0.067870132625103
  - -0.11330866813659668
  - -0.10502767562866211
  - -0.10172653198242188
  - -0.10512018203735352
  - -0.10144901275634766
  - -0.10478687286376953
  - -0.10758256912231445
  - -0.10539531707763672
  - -0.055392902344465256
  - -0.11251282691955566
  - -0.10515904426574707
  - -0.10306882858276367
  - -0.1339569091796875
  - -0.10149335861206055
  - -0.10451459884643555
  - -0.10582923889160156
  - -0.10488700866699219
  - -0.1014946922659874
  - -0.11268448829650879
  - -0.1062014102935791
  - -0.11246109008789062
  - -0.11259031295776367
  - -0.1017460823059082
  - -0.1044769287109375
  - -0.10402441024780273
  - -0.3025595247745514
  - -0.10978817939758301
  - -0.10578536987304688
  - -0.10525989532470703
  - -0.10722851753234863
  - -0.1050407886505127
  - -0.09811878204345703
  - -0.10414600372314453
  - -0.11345386505126953
  - -0.10487222671508789
  - -0.1054081916809082
  - -0.10459272563457489
  - -0.10442495346069336
  - -0.10462045669555664
  - -4.061492919921875
- - -0.10389423370361328
  - -0.10108041763305664
  - -0.10680770874023438
  - -0.10450625419616699
  - -0.09087181091308594
  - -0.10507726669311523
  - -0.10560464859008789
  - -0.10107135772705078
  - -0.10426473617553711
  - -0.1046142578125
  - -0.10511445999145508
  - -0.067870132625103
  - -0.11330866813659668
  - -0.10502767562866211
  - -0.10172653198242188
  - -0.10512018203735352
  - -0.10144901275634766
  - -0.10478687286376953
  - -0.10758256912231445
  - -0.10539531707763672
  - -0.055392902344465256
  - -0.11251282691955566
  - -0.10515904426574707
  - -0.10306882858276367
  - -0.1339569091796875
  - -0.10149335861206055
  - -0.10451459884643555
  - -0.10582923889160156
  - -0.10488700866699219
  - -0.1014946922659874
  - -0.11268448829650879
  - -0.1062014102935791
  - -0.11246109008789062
  - -0.11259031295776367
  - -0.1017460823059082
  - -0.1044769287109375
  - -0.10402441024780273
  - -0.3025595247745514
  - -0.10978817939758301
  - -0.10578536987304688
  - -0.10525989532470703
  - -0.10722851753234863
  - -0.1050407886505127
  - -0.09811878204345703
  - -0.10414600372314453
  - -0.11345386505126953
  - -0.10487222671508789
  - -0.1054081916809082
  - -0.10459272563457489
  - -0.10442495346069336
  - -0.10462045669555664
  - -4.071579456329346
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'continents'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'continents'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'True'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'continents'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'True'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'continents'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'True'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'continents'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'True'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'continents'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'continents'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'continents'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'True'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'continents'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'continents'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'cars_data'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'ContId'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'continents'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
