db: tests-examples/db2csv/car_1/tables/car_1.sqlite
inputs:
 - tests-examples/db2csv/car_1/tables/car_makers.csv
 - tests-examples/db2csv/car_1/tables/countries.csv
output: tests-examples/db2csv/car_1/tables/0028_dev.csv
raw_question: What is the number of makers of care in France? 
question_index: 114 
has_limit: False 
has_order_by: False 
order_by_direction: []
constants:
 - france
join_columns:
 - countryid
 - country
groupby_columns: []
orderby_columns: []
functions:
 - count
columns:
 - countryname
filters:
 - '='
ieu: []
comment: |-
  SELECT count(*)
  FROM CAR_MAKERS AS T1
  JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId
  WHERE T2.CountryName = 'france';

sql: |-
  SELECT count(*)
  FROM CAR_MAKERS AS T1
  JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId
  WHERE T2.CountryName = 'france';
smbop_beam_join_columns:
- - countryid
  - country
- - countryid
  - country
- - id
  - countryid
  - maker
  - country
- - id
  - countryid
  - maker
  - country
- - countryid
  - country
smbop_beam_groupby_columns:
- []
- []
- []
- []
- []
smbop_beam_orderby_columns:
- []
- []
- []
- []
- []
smbop_beam_tables:
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
smbop_beam_constants:
- - france
- - france
- - france
- - france
- - france
smbop_beam_functions:
- - count
- - count
- - count
- - count
- - count
smbop_beam_columns:
- - maker
  - countryname
- - maker
  - countryname
- - maker
  - countryname
  - model
- - maker
  - countryname
  - model
- - countryname
smbop_beam_ieu:
- []
- []
- []
- []
- []
smbop_beam_filters:
- - '='
- - '='
- - '='
- - '='
- - '='
smbop_beam_inferred_code:
  - SELECT COUNT( DISTINCT car_makers.maker ) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France'
  - SELECT COUNT( DISTINCT car_makers.maker ) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'care'
  - SELECT COUNT( DISTINCT car_makers.maker ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France' AND model_list.model = 'care'
  - SELECT COUNT( DISTINCT car_makers.maker ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE model_list.model = 'care' AND countries.countryname = 'France'
  - SELECT COUNT( * ) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'care'
smbop_beam_inferred_code_w_terminals:
  - SELECT COUNT( DISTINCT car_makers.maker ) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France'
  - SELECT COUNT( DISTINCT car_makers.maker ) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'care'
  - SELECT COUNT( DISTINCT car_makers.maker ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France' AND model_list.model = 'care'
  - SELECT COUNT( DISTINCT car_makers.maker ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE model_list.model = 'care' AND countries.countryname = 'France'
  - SELECT COUNT( * ) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'care'
smbop_beam_has_limit:
  - False
  - False
  - False
  - False
  - False
smbop_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
smbop_beam_order_by_direction:
- []
- []
- []
- []
- []
ratsql_beam_join_columns:
- - countryid
  - country
- - countryid
  - country
- - countryid
  - country
- - countryid
  - country
- - countryid
  - country
- - countryid
  - id
  - makeid
  - country
  - model
  - maker
- - countryid
  - id
  - country
  - model
  - maker
- - contid
  - countryid
  - country
  - continent
- - id
  - countryid
  - maker
  - country
ratsql_beam_groupby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_orderby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_tables:
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/car_names.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_names.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
ratsql_beam_constants:
- - france
- - france
- - france
- - france
- - france
  - '1'
- - france
- - france
- - france
- - france
- - france
ratsql_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
- - count
- - count
- - count
ratsql_beam_columns:
- - maker
  - countryname
- - maker
  - countryname
- - countryname
- - maker
  - countryname
- - maker
  - countryname
- - maker
  - countryname
- - maker
  - countryname
- - maker
  - countryname
- - maker
  - countryname
ratsql_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_filters:
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
ratsql_beam_inferred_code:
  - SELECT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'terminal'
  - SELECT Count(car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'terminal'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'terminal'
  - SELECT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE DISTINCT countries.CountryName = 'terminal'
  - SELECT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'terminal' LIMIT 1
  - SELECT DISTINCT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'terminal'
  - SELECT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE countries.CountryName = 'terminal'
  - SELECT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'terminal'
  - SELECT Count(DISTINCT car_makers.Maker) FROM continents JOIN countries ON continents.ContId = countries.Continent AND continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'terminal'
  - SELECT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker WHERE countries.CountryName = 'terminal'
ratsql_beam_inferred_code_w_terminals:
  - SELECT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'france'
  - SELECT Count(car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'france'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'france'
  - SELECT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE DISTINCT countries.CountryName = 'france'
  - SELECT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'france' LIMIT 1
  - SELECT DISTINCT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'france'
  - SELECT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE countries.CountryName = 'france'
  - SELECT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'france'
  - SELECT Count(DISTINCT car_makers.Maker) FROM continents JOIN countries ON continents.ContId = countries.Continent AND continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'france'
  - SELECT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker WHERE countries.CountryName = 'france'
ratsql_beam_has_limit:
  - False
  - False
  - False
  - True
  - False
  - False
  - False
  - False
  - False
ratsql_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
ratsql_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_score_history:
- - -0.1045536994934082
  - -0.10445308685302734
  - -0.10636138916015625
  - -0.10358476638793945
  - -0.10118532180786133
  - -0.10330724716186523
  - -0.10842132568359375
  - -0.10131359100341797
  - -0.10593032836914062
  - -0.10459327697753906
  - -0.10505962371826172
  - -0.27640652656555176
  - -0.27864956855773926
  - -0.10519003868103027
  - -0.0954890251159668
  - -0.10684061050415039
  - -0.10125970840454102
  - -0.10129022598266602
  - -0.1045994758605957
  - -0.1059122085571289
  - -0.10621881484985352
  - -0.08311966061592102
  - -0.11131048202514648
  - -0.10592269897460938
  - -0.10526037216186523
  - -0.10111713409423828
  - -0.10329771041870117
  - -0.10745811462402344
  - -0.10474944114685059
  - -0.10103702545166016
  - -0.10579109191894531
  - -0.11659765243530273
  - -0.10462427139282227
  - -0.1051182746887207
  - -0.11464912444353104
  - -0.10461854934692383
  - -0.10371160507202148
  - -0.09765100479125977
- - -0.1045536994934082
  - -0.10445308685302734
  - -0.10636138916015625
  - -0.10358476638793945
  - -0.10118532180786133
  - -0.10330724716186523
  - -0.10842132568359375
  - -0.10131359100341797
  - -0.10593032836914062
  - -0.10459327697753906
  - -0.10505962371826172
  - -0.27640652656555176
  - -1.7127512693405151
  - -0.10473132133483887
  - -0.09419965744018555
  - -0.10685873031616211
  - -0.10104608535766602
  - -0.10128355026245117
  - -0.10459375381469727
  - -0.10579919815063477
  - -0.10613489151000977
  - -0.0820159986615181
  - -0.11132240295410156
  - -0.10592389106750488
  - -0.1053614616394043
  - -0.10109710693359375
  - -0.10326862335205078
  - -0.10745882987976074
  - -0.10474801063537598
  - -0.10114240646362305
  - -0.1058645248413086
  - -0.11616706848144531
  - -0.1046285629272461
  - -0.10508966445922852
  - -0.11496657878160477
  - -0.10460758209228516
  - -0.10374689102172852
  - -0.09791143238544464
- - -0.1045536994934082
  - -0.10445308685302734
  - -0.10636138916015625
  - -0.10358476638793945
  - -0.10118532180786133
  - -0.10330724716186523
  - -0.10842132568359375
  - -0.10131359100341797
  - -0.10593032836914062
  - -0.10459327697753906
  - -0.10505962371826172
  - -2.056919574737549
  - -0.11019182205200195
  - -0.10545110702514648
  - -0.09576225280761719
  - -0.10581445693969727
  - -0.10116338729858398
  - -0.10126829147338867
  - -0.10460090637207031
  - -0.1063079833984375
  - -0.10665464401245117
  - -0.0810977965593338
  - -0.11126852035522461
  - -0.10593557357788086
  - -0.10530376434326172
  - -0.10102367401123047
  - -0.1030588150024414
  - -0.1074836254119873
  - -0.10476350784301758
  - -0.10086297988891602
  - -0.10546350479125977
  - -0.1165928840637207
  - -0.10464191436767578
  - -0.10511112213134766
  - -0.1145927831530571
  - -0.10462665557861328
  - -0.10371971130371094
  - -0.09874899685382843
- - -0.1045536994934082
  - -0.10445308685302734
  - -0.10636138916015625
  - -0.10358476638793945
  - -0.10118532180786133
  - -0.10330724716186523
  - -0.10842132568359375
  - -0.10131359100341797
  - -0.10593032836914062
  - -0.10459327697753906
  - -0.10505962371826172
  - -0.27640652656555176
  - -0.27864956855773926
  - -0.10519003868103027
  - -0.0954890251159668
  - -0.10684061050415039
  - -0.10125970840454102
  - -0.10129022598266602
  - -0.1045994758605957
  - -0.1059122085571289
  - -0.10621881484985352
  - -0.08311966061592102
  - -3.4589366912841797
  - -0.10575652122497559
  - -0.10475301742553711
  - -0.1012563705444336
  - -0.10363197326660156
  - -0.10736608505249023
  - -0.1047370433807373
  - -0.10118865966796875
  - -0.10596704483032227
  - -0.11719655990600586
  - -0.1047677993774414
  - -0.10498332977294922
  - -0.11667785793542862
  - -0.10459041595458984
  - -0.1036686897277832
  - -0.09859994798898697
- - -0.1045536994934082
  - -0.10445308685302734
  - -0.10636138916015625
  - -0.10358476638793945
  - -0.10118532180786133
  - -0.10330724716186523
  - -0.10842132568359375
  - -0.10131359100341797
  - -0.10593032836914062
  - -0.10459327697753906
  - -0.10505962371826172
  - -0.27640652656555176
  - -0.27864956855773926
  - -0.10519003868103027
  - -0.0954890251159668
  - -0.10684061050415039
  - -0.10125970840454102
  - -0.10129022598266602
  - -0.1045994758605957
  - -0.1059122085571289
  - -0.10621881484985352
  - -0.08311966061592102
  - -0.11131048202514648
  - -0.10592269897460938
  - -0.10526037216186523
  - -0.10111713409423828
  - -0.10329771041870117
  - -3.555983066558838
  - -0.10478496551513672
  - -0.09995365142822266
  - -0.1059880256652832
  - -0.11725950241088867
  - -0.10456085205078125
  - -0.10503911972045898
  - -0.11601601541042328
  - -0.10461091995239258
  - -0.10370254516601562
  - -0.09820539504289627
- - -0.1045536994934082
  - -0.10445308685302734
  - -3.5606374740600586
  - -0.10344815254211426
  - -0.10112380981445312
  - -0.10334634780883789
  - -0.10869312286376953
  - -0.10143709182739258
  - -0.10581064224243164
  - -0.10459280014038086
  - -0.10505151748657227
  - -0.2735957205295563
  - -0.28937292098999023
  - -0.10518670082092285
  - -0.09547853469848633
  - -0.1069183349609375
  - -0.10138130187988281
  - -0.1012716293334961
  - -0.10467147827148438
  - -0.10618114471435547
  - -0.10624980926513672
  - -0.08360134810209274
  - -0.11124610900878906
  - -0.10593199729919434
  - -0.10527706146240234
  - -0.10112953186035156
  - -0.10316658020019531
  - -0.10742640495300293
  - -0.10475659370422363
  - -0.10105419158935547
  - -0.1058206558227539
  - -0.11657953262329102
  - -0.10462331771850586
  - -0.10511589050292969
  - -0.1146780401468277
  - -0.10461950302124023
  - -0.10371065139770508
  - -0.09765803068876266
- - -0.1045536994934082
  - -0.10445308685302734
  - -0.10636138916015625
  - -0.10358476638793945
  - -0.10118532180786133
  - -0.10330724716186523
  - -0.10842132568359375
  - -0.10131359100341797
  - -0.10593032836914062
  - -0.10459327697753906
  - -0.10505962371826172
  - -0.27640652656555176
  - -0.27864956855773926
  - -0.10519003868103027
  - -0.0954890251159668
  - -0.10684061050415039
  - -0.10125970840454102
  - -0.10129022598266602
  - -0.1045994758605957
  - -0.1059122085571289
  - -0.10621881484985352
  - -0.08311966061592102
  - -0.11131048202514648
  - -0.10592269897460938
  - -0.10526037216186523
  - -0.10111713409423828
  - -0.10329771041870117
  - -0.10745811462402344
  - -0.10474944114685059
  - -0.10103702545166016
  - -0.10579109191894531
  - -0.11659765243530273
  - -0.10462427139282227
  - -0.1051182746887207
  - -0.11464912444353104
  - -0.10461854934692383
  - -0.10371160507202148
  - -3.931999921798706
- - -0.1045536994934082
  - -0.10445308685302734
  - -0.10636138916015625
  - -0.10358476638793945
  - -0.10118532180786133
  - -0.10330724716186523
  - -0.10842132568359375
  - -0.10131359100341797
  - -0.10593032836914062
  - -0.10459327697753906
  - -0.10505962371826172
  - -0.27640652656555176
  - -0.27864956855773926
  - -0.10519003868103027
  - -0.0954890251159668
  - -0.10684061050415039
  - -0.10125970840454102
  - -0.10129022598266602
  - -0.1045994758605957
  - -0.1059122085571289
  - -0.10621881484985352
  - -0.08311966061592102
  - -0.11131048202514648
  - -0.10592269897460938
  - -0.10526037216186523
  - -0.10111713409423828
  - -0.10329771041870117
  - -0.10745811462402344
  - -0.10474944114685059
  - -0.10103702545166016
  - -0.10579109191894531
  - -0.11659765243530273
  - -0.10462427139282227
  - -0.1051182746887207
  - -0.11464912444353104
  - -0.10461854934692383
  - -0.10371160507202148
  - -3.942032814025879
- - -0.1045536994934082
  - -0.10445308685302734
  - -0.10636138916015625
  - -0.10358476638793945
  - -0.10118532180786133
  - -0.10330724716186523
  - -0.10842132568359375
  - -0.10131359100341797
  - -0.10593032836914062
  - -0.10459327697753906
  - -0.10505962371826172
  - -0.27640652656555176
  - -0.27864956855773926
  - -0.10519003868103027
  - -0.0954890251159668
  - -0.10684061050415039
  - -0.10125970840454102
  - -0.10129022598266602
  - -0.1045994758605957
  - -0.1059122085571289
  - -0.10621881484985352
  - -0.08311966061592102
  - -0.11131048202514648
  - -0.10592269897460938
  - -0.10526037216186523
  - -0.10111713409423828
  - -0.10329771041870117
  - -0.10745811462402344
  - -0.10474944114685059
  - -0.10103702545166016
  - -0.10579109191894531
  - -0.11659765243530273
  - -0.10462427139282227
  - -0.1051182746887207
  - -0.11464912444353104
  - -0.10461854934692383
  - -0.10371160507202148
  - -4.07114315032959
- - -0.1045536994934082
  - -0.10445308685302734
  - -0.10636138916015625
  - -0.10358476638793945
  - -0.10118532180786133
  - -0.10330724716186523
  - -0.10842132568359375
  - -0.10131359100341797
  - -0.10593032836914062
  - -0.10459327697753906
  - -0.10505962371826172
  - -0.27640652656555176
  - -0.27864956855773926
  - -0.10519003868103027
  - -0.0954890251159668
  - -0.10684061050415039
  - -0.10125970840454102
  - -0.10129022598266602
  - -0.1045994758605957
  - -0.1059122085571289
  - -0.10621881484985352
  - -0.08311966061592102
  - -0.11131048202514648
  - -0.10592269897460938
  - -0.10526037216186523
  - -0.10111713409423828
  - -0.10329771041870117
  - -0.10745811462402344
  - -0.10474944114685059
  - -0.10103702545166016
  - -0.10579109191894531
  - -0.11659765243530273
  - -0.10462427139282227
  - -0.1051182746887207
  - -0.11464912444353104
  - -0.10461854934692383
  - -0.10371160507202148
  - -4.1816205978393555
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Maker'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Maker'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Maker'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Maker'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'True'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'True'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Maker'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Maker'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'cars_data'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Maker'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_names'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Maker'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'continents'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Maker'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'model_list'
