db: tests-examples/db2csv/car_1/tables/car_1.sqlite
inputs:
 - tests-examples/db2csv/car_1/tables/car_makers.csv
 - tests-examples/db2csv/car_1/tables/countries.csv
output: tests-examples/db2csv/car_1/tables/0037_dev.csv
raw_question: What are the countries having at least one car maker? List name and id. 
question_index: 123 
has_limit: False 
has_order_by: False 
order_by_direction: []
constants:
 - 1
join_columns:
 - countryid
 - country
groupby_columns:
 - countryid
orderby_columns: []
functions:
 - count
columns: []
filters:
 - '>='
ieu: []
comment: |-
  SELECT T1.CountryName,
         T1.CountryId
  FROM COUNTRIES AS T1
  JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country
  GROUP BY T1.CountryId
  HAVING count(*) >= 1;

sql: |-
  SELECT T1.CountryName,
         T1.CountryId
  FROM COUNTRIES AS T1
  JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country
  GROUP BY T1.CountryId
  HAVING count(*) >= 1;
smbop_beam_join_columns:
- - countryid
  - country
- - countryid
  - country
- - countryid
  - country
- - id
  - countryid
smbop_beam_groupby_columns:
- []
- - countryid
- - id
- - id
smbop_beam_orderby_columns:
- []
- []
- []
- []
smbop_beam_tables:
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
smbop_beam_constants:
- - 1
- - 1
- - 1
- - 1
smbop_beam_functions:
- []
- - count
- - count
- - count
smbop_beam_columns:
- []
- []
- []
- []
smbop_beam_ieu:
- []
- []
- []
- []
smbop_beam_filters:
- []
- - '>='
- - '>='
- - '>='
smbop_beam_inferred_code:
  - SELECT DISTINCT countries.countryname , car_makers.id FROM countries JOIN car_makers ON countries.countryid = car_makers.country
  - SELECT DISTINCT countries.countryname , car_makers.id FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT( * ) >= 1
  - SELECT DISTINCT countries.countryname , car_makers.id FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY car_makers.id HAVING COUNT( * ) >= 1
  - SELECT DISTINCT countries.countryname , car_makers.id FROM countries JOIN car_makers ON countries.countryid = car_makers.id GROUP BY car_makers.id HAVING COUNT( * ) >= 1
smbop_beam_inferred_code_w_terminals:
  - SELECT DISTINCT countries.countryname , car_makers.id FROM countries JOIN car_makers ON countries.countryid = car_makers.country
  - SELECT DISTINCT countries.countryname , car_makers.id FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT( * ) >= 1
  - SELECT DISTINCT countries.countryname , car_makers.id FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY car_makers.id HAVING COUNT( * ) >= 1
  - SELECT DISTINCT countries.countryname , car_makers.id FROM countries JOIN car_makers ON countries.countryid = car_makers.id GROUP BY car_makers.id HAVING COUNT( * ) >= 1
smbop_beam_has_limit:
  - False
  - False
  - False
  - False
smbop_beam_has_order_by:
  - False
  - False
  - False
  - False
smbop_beam_order_by_direction:
- []
- []
- []
- []
ratsql_beam_join_columns:
- - countryid
  - country
- - countryid
  - country
- - countryid
  - country
- - countryid
  - country
- - countryid
  - country
- - countryid
  - country
- - countryid
  - id
  - country
  - model
  - maker
ratsql_beam_groupby_columns:
- - country
- []
- - id
- - country
- - country
- - countryid
- - country
ratsql_beam_orderby_columns:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_tables:
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_names.csv
ratsql_beam_constants:
- - 1
- - 1
- - 1
- - 1
- - 1
- - 1
- - 1
- - 1
  - '1'
- - 1
- - 1
ratsql_beam_functions:
- - count
- []
- - count
- - count
- - count
- - count
- - count
ratsql_beam_columns:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_filters:
- - '>='
- []
- - '>='
- - '>='
- - '>='
- - '>='
- - '>='
ratsql_beam_inferred_code:
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 'terminal'
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Id HAVING Count(*) >= 'terminal'
  - SELECT DISTINCT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 'terminal'
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY DISTINCT car_makers.Country HAVING Count(*) >= 'terminal'
  - SELECT countries.CountryName, DISTINCT car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 'terminal'
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(DISTINCT *) >= 'terminal'
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 'terminal' LIMIT 1
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING Count(*) >= 'terminal'
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Country HAVING Count(*) >= 'terminal'
ratsql_beam_inferred_code_w_terminals:
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 1
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Id HAVING Count(*) >= 1
  - SELECT DISTINCT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 1
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY DISTINCT car_makers.Country HAVING Count(*) >= 1
  - SELECT countries.CountryName, DISTINCT car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 1
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(DISTINCT *) >= 1
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 1 LIMIT 1
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING Count(*) >= 1
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Country HAVING Count(*) >= 1
ratsql_beam_has_limit:
  - False
  - False
  - False
  - False
  - True
  - False
  - False
ratsql_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
ratsql_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_score_history:
- - -0.10397100448608398
  - -0.10638713836669922
  - -0.1151125431060791
  - -0.10406017303466797
  - -0.12495994567871094
  - -0.10267066955566406
  - -0.10486316680908203
  - -0.10107040405273438
  - -0.10437583923339844
  - -0.10466146469116211
  - -0.10475921630859375
  - -0.11076933890581131
  - -0.11239862442016602
  - -0.10583996772766113
  - -0.10452795028686523
  - -0.11008930206298828
  - -0.10262012481689453
  - -0.10571670532226562
  - -0.10582113265991211
  - -0.10485601425170898
  - -0.09823067486286163
  - -0.11294770240783691
  - -0.10565495491027832
  - -0.11151885986328125
  - -0.1296072006225586
  - -0.09969425201416016
  - -0.10397768020629883
  - -0.1045675277709961
  - -0.24360257387161255
  - -0.11325693130493164
  - -0.10540175437927246
  - -0.062300682067871094
  - -0.10610771179199219
  - -0.10237360000610352
  - -0.10456609725952148
  - -0.10753917694091797
  - -0.11508941650390625
  - -0.09063386917114258
  - -0.11089611053466797
  - -0.10623431205749512
  - -0.10466337203979492
  - -0.10213613510131836
  - -0.10752606391906738
  - -0.10520362854003906
  - -0.09808206558227539
  - -0.10503721237182617
  - -0.1147623062133789
  - -0.10471248626708984
  - -0.10549736022949219
  - -0.21431958675384521
  - -0.10503339767456055
  - -0.10458755493164062
  - -0.10001104325056076
- - -0.10397100448608398
  - -0.10638713836669922
  - -0.1151125431060791
  - -0.10406017303466797
  - -0.12495994567871094
  - -0.10267066955566406
  - -0.10486316680908203
  - -0.10107040405273438
  - -0.10437583923339844
  - -0.10466146469116211
  - -0.10475921630859375
  - -0.11076933890581131
  - -0.11239862442016602
  - -0.10583996772766113
  - -0.10452795028686523
  - -0.11008930206298828
  - -0.10262012481689453
  - -0.10571670532226562
  - -0.10582113265991211
  - -0.10485601425170898
  - -0.09823067486286163
  - -0.11294770240783691
  - -0.10565495491027832
  - -0.11151885986328125
  - -3.875438690185547
  - -0.10055208206176758
  - -0.10736727714538574
  - -0.1054222583770752
  - -0.09910249710083008
  - -0.10526180267333984
  - -0.11710739135742188
  - -0.10579681396484375
  - -0.1057286262512207
  - -0.2143254578113556
  - -0.10505199432373047
  - -0.1051487922668457
  - -0.11546557396650314
- - -0.10397100448608398
  - -0.10638713836669922
  - -0.1151125431060791
  - -0.10406017303466797
  - -0.12495994567871094
  - -0.10267066955566406
  - -0.10486316680908203
  - -0.10107040405273438
  - -0.10437583923339844
  - -0.10466146469116211
  - -0.10475921630859375
  - -0.11076933890581131
  - -0.11239862442016602
  - -0.10583996772766113
  - -0.10452795028686523
  - -0.11008930206298828
  - -0.10262012481689453
  - -0.10571670532226562
  - -0.10582113265991211
  - -0.10485601425170898
  - -0.09823067486286163
  - -0.11294770240783691
  - -0.10565495491027832
  - -0.11151885986328125
  - -0.1296072006225586
  - -0.09969425201416016
  - -0.10397768020629883
  - -0.1045675277709961
  - -3.395233154296875
  - -0.1112966537475586
  - -0.10542869567871094
  - -0.09264469146728516
  - -0.10228586196899414
  - -0.10359907150268555
  - -0.10447311401367188
  - -0.10711050033569336
  - -0.11445856094360352
  - -0.0888403132557869
  - -0.11083579063415527
  - -0.10619497299194336
  - -0.10506057739257812
  - -0.1027231216430664
  - -0.10747623443603516
  - -0.1051642894744873
  - -0.09861946105957031
  - -0.10494661331176758
  - -0.1147623062133789
  - -0.10472297668457031
  - -0.10545110702514648
  - -0.21307824552059174
  - -0.10504961013793945
  - -0.10459613800048828
  - -0.10004879534244537
- - -0.10397100448608398
  - -0.10638713836669922
  - -3.308771848678589
  - -0.10419631004333496
  - -0.1220402717590332
  - -0.10313844680786133
  - -0.10471820831298828
  - -0.1011652946472168
  - -0.10436630249023438
  - -0.10465574264526367
  - -0.10479068756103516
  - -0.1107063740491867
  - -0.11237955093383789
  - -0.1058049201965332
  - -0.10447883605957031
  - -0.11036252975463867
  - -0.10270547866821289
  - -0.10575723648071289
  - -0.10581541061401367
  - -0.10484647750854492
  - -0.09730248153209686
  - -0.11299538612365723
  - -0.10564517974853516
  - -0.11147069931030273
  - -0.13008832931518555
  - -0.0997471809387207
  - -0.10399770736694336
  - -0.1045832633972168
  - -0.24400389194488525
  - -0.11325979232788086
  - -0.10540175437927246
  - -0.062113285064697266
  - -0.1061091423034668
  - -0.10237693786621094
  - -0.10457229614257812
  - -0.10753297805786133
  - -0.11510181427001953
  - -0.09087163209915161
  - -0.11089944839477539
  - -0.1062309741973877
  - -0.10467386245727539
  - -0.10219717025756836
  - -0.10752439498901367
  - -0.10520386695861816
  - -0.09811830520629883
  - -0.10504484176635742
  - -0.11478519439697266
  - -0.10471200942993164
  - -0.10548925399780273
  - -0.2143765389919281
  - -0.10503578186035156
  - -0.10459041595458984
  - -0.10002107918262482
- - -0.10397100448608398
  - -0.10638713836669922
  - -0.1151125431060791
  - -0.10406017303466797
  - -0.12495994567871094
  - -0.10267066955566406
  - -0.10486316680908203
  - -0.10107040405273438
  - -0.10437583923339844
  - -0.10466146469116211
  - -0.10475921630859375
  - -0.11076933890581131
  - -0.11239862442016602
  - -0.10583996772766113
  - -0.10452795028686523
  - -0.11008930206298828
  - -0.10262012481689453
  - -0.10571670532226562
  - -0.10582113265991211
  - -0.10485601425170898
  - -0.09823067486286163
  - -0.11294770240783691
  - -0.10565495491027832
  - -0.11151885986328125
  - -0.1296072006225586
  - -0.09969425201416016
  - -0.10397768020629883
  - -0.1045675277709961
  - -0.24360257387161255
  - -3.433988332748413
  - -0.10408473014831543
  - -0.06452751159667969
  - -0.10244560241699219
  - -0.10248279571533203
  - -0.10462331771850586
  - -0.10757589340209961
  - -0.11499834060668945
  - -0.09092845022678375
  - -0.11089420318603516
  - -0.1062326431274414
  - -0.10466527938842773
  - -0.10210943222045898
  - -0.10752987861633301
  - -0.10519862174987793
  - -0.09814071655273438
  - -0.1050710678100586
  - -0.11487531661987305
  - -0.10469865798950195
  - -0.10549497604370117
  - -0.21502062678337097
  - -0.10503387451171875
  - -0.10459136962890625
  - -0.10001428425312042
- - -0.10397100448608398
  - -0.10638713836669922
  - -0.1151125431060791
  - -0.10406017303466797
  - -0.12495994567871094
  - -0.10267066955566406
  - -0.10486316680908203
  - -0.10107040405273438
  - -0.10437583923339844
  - -0.10466146469116211
  - -0.10475921630859375
  - -0.11076933890581131
  - -0.11239862442016602
  - -0.10583996772766113
  - -0.10452795028686523
  - -0.11008930206298828
  - -0.10262012481689453
  - -0.10571670532226562
  - -0.10582113265991211
  - -0.10485601425170898
  - -0.09823067486286163
  - -3.4512104988098145
  - -0.10534930229187012
  - -0.10882282257080078
  - -0.13583946228027344
  - -0.09853696823120117
  - -0.10387754440307617
  - -0.10452795028686523
  - -0.24385210871696472
  - -0.11337757110595703
  - -0.10537576675415039
  - -0.0635976791381836
  - -0.10704517364501953
  - -0.10231971740722656
  - -0.1045842170715332
  - -0.10753965377807617
  - -0.11508798599243164
  - -0.09153759479522705
  - -0.11090660095214844
  - -0.10622167587280273
  - -0.10465812683105469
  - -0.10230112075805664
  - -0.10751891136169434
  - -0.10520124435424805
  - -0.09821414947509766
  - -0.10502910614013672
  - -0.11478090286254883
  - -0.10470199584960938
  - -0.10546493530273438
  - -0.21389047801494598
  - -0.10503625869750977
  - -0.10459041595458984
  - -0.09997081011533737
- - -0.10397100448608398
  - -0.10638713836669922
  - -0.1151125431060791
  - -0.10406017303466797
  - -0.12495994567871094
  - -0.10267066955566406
  - -0.10486316680908203
  - -0.10107040405273438
  - -0.10437583923339844
  - -0.10466146469116211
  - -0.10475921630859375
  - -0.11076933890581131
  - -0.11239862442016602
  - -0.10583996772766113
  - -0.10452795028686523
  - -0.11008930206298828
  - -0.10262012481689453
  - -0.10571670532226562
  - -0.10582113265991211
  - -0.10485601425170898
  - -0.09823067486286163
  - -0.11294770240783691
  - -0.10565495491027832
  - -0.11151885986328125
  - -0.1296072006225586
  - -0.09969425201416016
  - -0.10397768020629883
  - -0.1045675277709961
  - -0.24360257387161255
  - -0.11325693130493164
  - -0.10540175437927246
  - -0.062300682067871094
  - -0.10610771179199219
  - -0.10237360000610352
  - -0.10456609725952148
  - -0.10753917694091797
  - -0.11508941650390625
  - -0.09063386917114258
  - -3.4690418243408203
  - -0.10624933242797852
  - -0.10459661483764648
  - -0.10224008560180664
  - -0.10756206512451172
  - -0.10518431663513184
  - -0.09807825088500977
  - -0.1049966812133789
  - -0.11484432220458984
  - -0.1046762466430664
  - -0.1054544448852539
  - -0.2152157872915268
  - -0.1050262451171875
  - -0.10458993911743164
  - -0.10003455728292465
- - -0.10397100448608398
  - -0.10638713836669922
  - -0.1151125431060791
  - -0.10406017303466797
  - -0.12495994567871094
  - -0.10267066955566406
  - -0.10486316680908203
  - -0.10107040405273438
  - -0.10437583923339844
  - -0.10466146469116211
  - -0.10475921630859375
  - -0.11076933890581131
  - -0.11239862442016602
  - -0.10583996772766113
  - -0.10452795028686523
  - -0.11008930206298828
  - -0.10262012481689453
  - -0.10571670532226562
  - -0.10582113265991211
  - -0.10485601425170898
  - -0.09823067486286163
  - -0.11294770240783691
  - -0.10565495491027832
  - -0.11151885986328125
  - -0.1296072006225586
  - -0.09969425201416016
  - -0.10397768020629883
  - -0.1045675277709961
  - -0.24360257387161255
  - -0.11325693130493164
  - -0.10540175437927246
  - -0.062300682067871094
  - -0.10610771179199219
  - -0.10237360000610352
  - -0.10456609725952148
  - -0.10753917694091797
  - -0.11508941650390625
  - -0.09063386917114258
  - -0.11089611053466797
  - -0.10623431205749512
  - -0.10466337203979492
  - -0.10213613510131836
  - -3.5466480255126953
  - -0.10520744323730469
  - -0.09842300415039062
  - -0.10573625564575195
  - -0.11484003067016602
  - -0.10467243194580078
  - -0.10521745681762695
  - -0.21484629809856415
  - -0.10501670837402344
  - -0.10458660125732422
  - -0.0998193547129631
- - -0.10397100448608398
  - -0.10638713836669922
  - -0.1151125431060791
  - -0.10406017303466797
  - -0.12495994567871094
  - -0.10267066955566406
  - -0.10486316680908203
  - -0.10107040405273438
  - -0.10437583923339844
  - -0.10466146469116211
  - -0.10475921630859375
  - -0.11076933890581131
  - -0.11239862442016602
  - -0.10583996772766113
  - -0.10452795028686523
  - -0.11008930206298828
  - -0.10262012481689453
  - -0.10571670532226562
  - -0.10582113265991211
  - -0.10485601425170898
  - -0.09823067486286163
  - -0.11294770240783691
  - -0.10565495491027832
  - -0.11151885986328125
  - -0.1296072006225586
  - -0.09969425201416016
  - -0.10397768020629883
  - -0.1045675277709961
  - -3.880162239074707
  - -0.11122274398803711
  - -0.10553646087646484
  - -0.06294059753417969
  - -0.1129903793334961
  - -0.10263633728027344
  - -0.10455179214477539
  - -0.1074666976928711
  - -0.1140904426574707
  - -0.09102369099855423
  - -0.11090302467346191
  - -0.10615205764770508
  - -0.10503959655761719
  - -0.10269927978515625
  - -0.10746645927429199
  - -0.10518693923950195
  - -0.09855508804321289
  - -0.10476207733154297
  - -0.11456108093261719
  - -0.10473966598510742
  - -0.1052694320678711
  - -0.21099482476711273
  - -0.10507535934448242
  - -0.1046285629272461
  - -0.10005731880664825
- - -0.10397100448608398
  - -0.10638713836669922
  - -0.1151125431060791
  - -0.10406017303466797
  - -0.12495994567871094
  - -0.10267066955566406
  - -0.10486316680908203
  - -0.10107040405273438
  - -0.10437583923339844
  - -0.10466146469116211
  - -0.10475921630859375
  - -0.11076933890581131
  - -0.11239862442016602
  - -0.10583996772766113
  - -0.10452795028686523
  - -0.11008930206298828
  - -0.10262012481689453
  - -0.10571670532226562
  - -0.10582113265991211
  - -0.10485601425170898
  - -0.09823067486286163
  - -0.11294770240783691
  - -0.10565495491027832
  - -0.11151885986328125
  - -0.1296072006225586
  - -0.09969425201416016
  - -0.10397768020629883
  - -0.1045675277709961
  - -0.24360257387161255
  - -0.11325693130493164
  - -0.10540175437927246
  - -0.062300682067871094
  - -0.10610771179199219
  - -0.10237360000610352
  - -0.10456609725952148
  - -0.10753917694091797
  - -0.11508941650390625
  - -0.09063386917114258
  - -0.11089611053466797
  - -0.10623431205749512
  - -0.10466337203979492
  - -0.10213613510131836
  - -0.10752606391906738
  - -0.10520362854003906
  - -0.09808206558227539
  - -0.10503721237182617
  - -0.1147623062133789
  - -0.10471248626708984
  - -0.10549736022949219
  - -0.21431958675384521
  - -0.10503339767456055
  - -0.10458755493164062
  - -3.9269134998321533
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Id'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'True'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'True'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'True'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'True'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryId'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_names'
