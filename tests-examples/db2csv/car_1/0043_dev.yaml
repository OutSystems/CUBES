db: tests-examples/db2csv/car_1/tables/car_1.sqlite
inputs:
 - tests-examples/db2csv/car_1/tables/continents.csv
 - tests-examples/db2csv/car_1/tables/countries.csv
 - tests-examples/db2csv/car_1/tables/car_makers.csv
output: tests-examples/db2csv/car_1/tables/0043_dev.csv
raw_question: Which countries in europe have at least 3 car manufacturers? 
question_index: 129 
has_limit: False 
has_order_by: False 
order_by_direction: []
constants:
 - europe
 - 3
join_columns:
 - continent
 - contid
 - country
 - countryid
groupby_columns:
 - countryname
orderby_columns: []
functions:
 - count
columns:
 - continent
filters:
 - '>='
 - '='
ieu: []
comment: |-
  SELECT T1.CountryName
  FROM COUNTRIES AS T1
  JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId
  JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country
  WHERE T2.Continent = 'europe'
  GROUP BY T1.CountryName
  HAVING count(*) >= 3;

sql: |-
  SELECT T1.CountryName
  FROM COUNTRIES AS T1
  JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId
  JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country
  WHERE T2.Continent = 'europe'
  GROUP BY T1.CountryName
  HAVING count(*) >= 3;
smbop_beam_join_columns:
- - countryid
  - country
- - countryid
  - country
- - countryid
  - country
- []
- []
- []
smbop_beam_groupby_columns:
- - countryid
- - country
- - countryname
- - countryid
- - continent
- - country
smbop_beam_orderby_columns:
- []
- []
- []
- []
- []
- []
smbop_beam_tables:
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
smbop_beam_constants:
- - europe
  - 3
- - europe
  - 3
- - europe
  - 3
- - europe
  - 3
- - europe
  - 3
- - europe
  - 3
smbop_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
smbop_beam_columns:
- - continent
- - continent
- - continent
- - continent
- - continent
- - continent
smbop_beam_ieu:
- []
- []
- []
- []
- []
- []
smbop_beam_filters:
- - '>='
  - '='
- - '>='
  - '='
- - '>='
  - '='
- - '>='
  - '='
- - '>='
  - '='
- - '>='
  - '='
smbop_beam_inferred_code:
  - SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'europe' GROUP BY countries.countryid HAVING COUNT( * ) >= 3
  - SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'europe' GROUP BY car_makers.country HAVING COUNT( * ) >= 3
  - SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'europe' GROUP BY countries.countryname HAVING COUNT( * ) >= 3
  - SELECT countries.countryname FROM countries, car_makers WHERE countries.continent = 'europe' GROUP BY countries.countryid HAVING COUNT( * ) >= 3
  - SELECT countries.countryname FROM countries, car_makers WHERE countries.continent = 'europe' GROUP BY countries.continent HAVING COUNT( * ) >= 3
  - SELECT countries.countryname FROM countries, car_makers WHERE countries.continent = 'europe' GROUP BY car_makers.country HAVING COUNT( * ) >= 3
smbop_beam_inferred_code_w_terminals:
  - SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'europe' GROUP BY countries.countryid HAVING COUNT( * ) >= 3
  - SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'europe' GROUP BY car_makers.country HAVING COUNT( * ) >= 3
  - SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'europe' GROUP BY countries.countryname HAVING COUNT( * ) >= 3
  - SELECT countries.countryname FROM countries, car_makers WHERE countries.continent = 'europe' GROUP BY countries.countryid HAVING COUNT( * ) >= 3
  - SELECT countries.countryname FROM countries, car_makers WHERE countries.continent = 'europe' GROUP BY countries.continent HAVING COUNT( * ) >= 3
  - SELECT countries.countryname FROM countries, car_makers WHERE countries.continent = 'europe' GROUP BY car_makers.country HAVING COUNT( * ) >= 3
smbop_beam_has_limit:
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
ratsql_beam_join_columns:
- []
- - countryid
  - country
- - countryid
  - country
- - countryid
  - country
- - countryid
  - country
- []
- []
- - contid
  - countryid
  - country
  - continent
- - countryid
  - country
ratsql_beam_groupby_columns:
- - country
- - countryname
- - countryid
- - country
- - country
- - fullname
- - id
- - continent
- - continent
ratsql_beam_orderby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_tables:
- - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
ratsql_beam_constants:
- - europe
  - 3
- - europe
  - 3
- - europe
  - 3
- - europe
  - 3
- - europe
  - 3
- - europe
  - 3
- - europe
  - 3
- - europe
  - 3
- - europe
  - 3
- - europe
  - 3
ratsql_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
- - count
- - count
- - count
ratsql_beam_columns:
- []
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_filters:
- - '>='
- - '>='
- - '>='
- - '>='
- - '>='
- - '>='
- - '>='
- - '>='
- - '>='
ratsql_beam_inferred_code:
  - SELECT car_makers.Country FROM car_makers GROUP BY car_makers.Country HAVING Count(*) >= 'terminal'
  - SELECT car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName HAVING Count(*) >= 'terminal'
  - SELECT car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING Count(*) >= 'terminal'
  - SELECT car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 'terminal'
  - SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 'terminal'
  - SELECT car_makers.Country FROM car_makers GROUP BY * HAVING Count(*) >= 'terminal'
  - SELECT car_makers.Country FROM car_makers GROUP BY car_makers.FullName HAVING Count(*) >= 'terminal'
  - SELECT car_makers.Country FROM car_makers GROUP BY car_makers.Id HAVING Count(*) >= 'terminal'
  - SELECT car_makers.Country FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent HAVING Count(*) >= 'terminal'
  - SELECT car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING Count(*) >= 'terminal'
ratsql_beam_inferred_code_w_terminals:
  - SELECT car_makers.Country FROM car_makers GROUP BY car_makers.Country HAVING Count(*) >= 3
  - SELECT car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName HAVING Count(*) >= 3
  - SELECT car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING Count(*) >= 3
  - SELECT car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 3
  - SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 3
  - SELECT car_makers.Country FROM car_makers GROUP BY * HAVING Count(*) >= 3
  - SELECT car_makers.Country FROM car_makers GROUP BY car_makers.FullName HAVING Count(*) >= 3
  - SELECT car_makers.Country FROM car_makers GROUP BY car_makers.Id HAVING Count(*) >= 3
  - SELECT car_makers.Country FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent HAVING Count(*) >= 3
  - SELECT car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING Count(*) >= 3
ratsql_beam_has_limit:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
ratsql_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
ratsql_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_score_history:
- - -0.10445594787597656
  - -0.10567283630371094
  - -0.10667181015014648
  - -0.1042628288269043
  - -0.10321998596191406
  - -0.10296487808227539
  - -0.104156494140625
  - -0.10141944885253906
  - -0.10439300537109375
  - -0.10478639602661133
  - -0.10588550567626953
  - -0.270839124917984
  - -0.11147856712341309
  - -0.1054844856262207
  - -0.13144588470458984
  - -0.1484375
  - -0.10338068008422852
  - -0.1069631576538086
  - -0.10411596298217773
  - -0.854738712310791
  - -0.1122744083404541
  - -0.10551285743713379
  - -0.07697057723999023
  - -0.08789205551147461
  - -0.10353994369506836
  - -0.1045069694519043
  - -0.10983037948608398
  - -0.11036396026611328
  - -0.1300184279680252
  - -0.10918855667114258
  - -0.10613012313842773
  - -0.10476970672607422
  - -0.10572195053100586
  - -0.10715937614440918
  - -0.1049954891204834
  - -0.09814786911010742
  - -0.1041407585144043
  - -0.30242156982421875
  - -0.10544538497924805
  - -0.10458898544311523
  - -0.20606394112110138
- - -0.10445594787597656
  - -0.10567283630371094
  - -0.10667181015014648
  - -0.1042628288269043
  - -0.10321998596191406
  - -0.10296487808227539
  - -0.104156494140625
  - -0.10141944885253906
  - -0.10439300537109375
  - -0.10478639602661133
  - -0.10588550567626953
  - -0.270839124917984
  - -0.11147856712341309
  - -0.1054844856262207
  - -0.13144588470458984
  - -0.1484375
  - -0.10338068008422852
  - -0.1069631576538086
  - -0.10411596298217773
  - -2.2891757488250732
  - -0.11114215850830078
  - -0.10549235343933105
  - -0.08362150192260742
  - -0.09137678146362305
  - -0.1034855842590332
  - -0.10460948944091797
  - -0.11027336120605469
  - -0.11173343658447266
  - -0.12093810737133026
  - -0.1088409423828125
  - -0.10602784156799316
  - -0.10536575317382812
  - -0.10441207885742188
  - -0.10709762573242188
  - -0.10497069358825684
  - -0.09929275512695312
  - -0.10447263717651367
  - -0.12418317794799805
  - -0.10462474822998047
  - -0.10603904724121094
  - -0.0986594632267952
  - -0.10518646240234375
  - -0.10495471954345703
  - -0.07704585045576096
- - -0.10445594787597656
  - -0.10567283630371094
  - -0.10667181015014648
  - -0.1042628288269043
  - -0.10321998596191406
  - -0.10296487808227539
  - -0.104156494140625
  - -0.10141944885253906
  - -0.10439300537109375
  - -0.10478639602661133
  - -0.10588550567626953
  - -0.270839124917984
  - -0.11147856712341309
  - -0.1054844856262207
  - -0.13144588470458984
  - -0.1484375
  - -0.10338068008422852
  - -0.1069631576538086
  - -0.10411596298217773
  - -2.423285484313965
  - -0.11040616035461426
  - -0.10547065734863281
  - -0.07507133483886719
  - -0.09265375137329102
  - -0.10360050201416016
  - -0.10449695587158203
  - -0.11075210571289062
  - -0.11149072647094727
  - -0.12361003458499908
  - -0.10847878456115723
  - -0.10605740547180176
  - -0.10512304306030273
  - -0.10589790344238281
  - -0.10709476470947266
  - -0.10496354103088379
  - -0.09857654571533203
  - -0.1040501594543457
  - -0.3404545783996582
  - -0.10543489456176758
  - -0.10463571548461914
  - -0.21072004735469818
- - -0.10445594787597656
  - -0.10567283630371094
  - -0.10667181015014648
  - -0.1042628288269043
  - -0.10321998596191406
  - -0.10296487808227539
  - -0.104156494140625
  - -0.10141944885253906
  - -0.10439300537109375
  - -0.10478639602661133
  - -0.10588550567626953
  - -0.270839124917984
  - -0.11147856712341309
  - -0.1054844856262207
  - -0.13144588470458984
  - -0.1484375
  - -0.10338068008422852
  - -0.1069631576538086
  - -0.10411596298217773
  - -0.854738712310791
  - -0.1122744083404541
  - -0.10551285743713379
  - -0.07697057723999023
  - -0.08789205551147461
  - -0.10353994369506836
  - -0.1045069694519043
  - -0.10983037948608398
  - -0.11036396026611328
  - -0.1300184279680252
  - -0.10918855667114258
  - -0.10613012313842773
  - -0.10476970672607422
  - -0.10572195053100586
  - -0.10715937614440918
  - -0.1049954891204834
  - -0.09814786911010742
  - -0.1041407585144043
  - -1.7445716857910156
  - -0.10551023483276367
  - -0.10475635528564453
  - -0.12490624189376831
  - -0.10544347763061523
  - -0.10390186309814453
  - -0.07826226204633713
- - -0.10445594787597656
  - -0.10567283630371094
  - -0.10667181015014648
  - -0.1042628288269043
  - -0.10321998596191406
  - -0.10296487808227539
  - -0.104156494140625
  - -0.10141944885253906
  - -0.10439300537109375
  - -0.10478639602661133
  - -0.10588550567626953
  - -2.0336339473724365
  - -0.11246299743652344
  - -0.10535430908203125
  - -0.9009966850280762
  - -0.12311983108520508
  - -0.09914445877075195
  - -0.10559415817260742
  - -0.10437154769897461
  - -0.9545474052429199
  - -0.11185956001281738
  - -0.10550141334533691
  - -0.07704925537109375
  - -0.08990144729614258
  - -0.10347270965576172
  - -0.10466861724853516
  - -0.10853004455566406
  - -0.11003398895263672
  - -0.12012315541505814
  - -0.10902166366577148
  - -0.10606837272644043
  - -0.1052541732788086
  - -0.1021113395690918
  - -0.10703635215759277
  - -0.10497307777404785
  - -0.09747076034545898
  - -0.10466384887695312
  - -0.11686038970947266
  - -0.10450506210327148
  - -0.10576534271240234
  - -0.09369892627000809
  - -0.1051473617553711
  - -0.10519027709960938
  - -0.07721282541751862
- - -0.10445594787597656
  - -0.10567283630371094
  - -0.10667181015014648
  - -0.1042628288269043
  - -0.10321998596191406
  - -0.10296487808227539
  - -0.104156494140625
  - -0.10141944885253906
  - -0.10439300537109375
  - -0.10478639602661133
  - -0.10588550567626953
  - -0.270839124917984
  - -0.11147856712341309
  - -0.1054844856262207
  - -0.13144588470458984
  - -0.1484375
  - -0.10338068008422852
  - -0.1069631576538086
  - -0.10411596298217773
  - -3.6597845554351807
  - -0.10979914665222168
  - -0.10470247268676758
  - -0.08528757095336914
  - -0.08434009552001953
  - -0.1050114631652832
  - -0.10440587997436523
  - -0.11094188690185547
  - -0.11056137084960938
  - -0.12859247624874115
  - -0.10936188697814941
  - -0.10609960556030273
  - -0.10493803024291992
  - -0.10624027252197266
  - -0.10709762573242188
  - -0.10496330261230469
  - -0.09814643859863281
  - -0.10407018661499023
  - -0.33826780319213867
  - -0.10537433624267578
  - -0.10467720031738281
  - -0.21100032329559326
- - -0.10445594787597656
  - -0.10567283630371094
  - -0.10667181015014648
  - -0.1042628288269043
  - -0.10321998596191406
  - -0.10296487808227539
  - -0.104156494140625
  - -0.10141944885253906
  - -0.10439300537109375
  - -0.10478639602661133
  - -0.10588550567626953
  - -0.270839124917984
  - -0.11147856712341309
  - -0.1054844856262207
  - -0.13144588470458984
  - -0.1484375
  - -0.10338068008422852
  - -0.1069631576538086
  - -0.10411596298217773
  - -3.844881534576416
  - -0.11056375503540039
  - -0.10489654541015625
  - -0.09836673736572266
  - -0.08594751358032227
  - -0.10461282730102539
  - -0.10443449020385742
  - -0.11062240600585938
  - -0.11068964004516602
  - -0.14372755587100983
  - -0.1086738109588623
  - -0.10608410835266113
  - -0.1048130989074707
  - -0.10577964782714844
  - -0.1071014404296875
  - -0.10495781898498535
  - -0.09814071655273438
  - -0.10406827926635742
  - -0.3283839225769043
  - -0.10540294647216797
  - -0.10464811325073242
  - -0.21018101274967194
- - -0.10445594787597656
  - -0.10567283630371094
  - -0.10667181015014648
  - -0.1042628288269043
  - -0.10321998596191406
  - -0.10296487808227539
  - -0.104156494140625
  - -0.10141944885253906
  - -0.10439300537109375
  - -0.10478639602661133
  - -0.10588550567626953
  - -0.270839124917984
  - -0.11147856712341309
  - -0.1054844856262207
  - -0.13144588470458984
  - -0.1484375
  - -0.10338068008422852
  - -0.1069631576538086
  - -0.10411596298217773
  - -3.9408984184265137
  - -0.10961437225341797
  - -0.10339188575744629
  - -0.0974130630493164
  - -0.08470630645751953
  - -0.10492134094238281
  - -0.10436582565307617
  - -0.11052131652832031
  - -0.10956478118896484
  - -0.14444983005523682
  - -0.1097102165222168
  - -0.10611128807067871
  - -0.10467290878295898
  - -0.10496139526367188
  - -0.10711264610290527
  - -0.10497188568115234
  - -0.09816503524780273
  - -0.10415315628051758
  - -0.3291139602661133
  - -0.1053009033203125
  - -0.10462808609008789
  - -0.20989258587360382
- - -0.10445594787597656
  - -0.10567283630371094
  - -0.10667181015014648
  - -0.1042628288269043
  - -0.10321998596191406
  - -0.10296487808227539
  - -0.104156494140625
  - -0.10141944885253906
  - -0.10439300537109375
  - -0.10478639602661133
  - -0.10588550567626953
  - -0.270839124917984
  - -0.11147856712341309
  - -0.1054844856262207
  - -0.13144588470458984
  - -0.1484375
  - -0.10338068008422852
  - -0.1069631576538086
  - -0.10411596298217773
  - -3.873119354248047
  - -0.11001849174499512
  - -0.1047813892364502
  - -0.08454561233520508
  - -0.08731508255004883
  - -0.10459280014038086
  - -0.10450410842895508
  - -0.11054515838623047
  - -0.11089372634887695
  - -0.13661877810955048
  - -0.10872483253479004
  - -0.10607075691223145
  - -0.10490846633911133
  - -0.10577392578125
  - -0.10709881782531738
  - -0.1049647331237793
  - -0.09809303283691406
  - -0.10398197174072266
  - -0.4144730567932129
  - -0.10533618927001953
  - -0.10451364517211914
  - -0.2158561646938324
- - -0.10445594787597656
  - -0.10567283630371094
  - -0.10667181015014648
  - -0.1042628288269043
  - -0.10321998596191406
  - -0.10296487808227539
  - -0.104156494140625
  - -0.10141944885253906
  - -0.10439300537109375
  - -0.10478639602661133
  - -0.10588550567626953
  - -0.270839124917984
  - -0.11147856712341309
  - -0.1054844856262207
  - -0.13144588470458984
  - -0.1484375
  - -0.10338068008422852
  - -0.1069631576538086
  - -0.10411596298217773
  - -3.971458911895752
  - -0.1102457046508789
  - -0.10541033744812012
  - -0.0736093521118164
  - -0.08744478225708008
  - -0.10342216491699219
  - -0.10468673706054688
  - -0.11150312423706055
  - -0.1116185188293457
  - -0.13200967013835907
  - -0.1087503433227539
  - -0.10606527328491211
  - -0.10478019714355469
  - -0.10569286346435547
  - -0.10708737373352051
  - -0.10496711730957031
  - -0.09816741943359375
  - -0.1040654182434082
  - -0.3355846405029297
  - -0.1054239273071289
  - -0.10466575622558594
  - -0.21121585369110107
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryId'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'FullName'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Id'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
