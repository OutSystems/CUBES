db: tests-examples/db2csv/car_1/tables/car_1.sqlite
inputs:
 - tests-examples/db2csv/car_1/tables/countries.csv
 - tests-examples/db2csv/car_1/tables/car_makers.csv
 - tests-examples/db2csv/car_1/tables/model_list.csv
output: tests-examples/db2csv/car_1/tables/0029_dev.csv
raw_question: How many car models are produced in the usa? 
question_index: 115 
has_limit: False 
has_order_by: False 
order_by_direction: []
constants:
 - usa
join_columns:
 - countryid
 - country
 - id
 - maker
groupby_columns: []
functions:
 - count
columns:
 - countryname
filters:
 - '='
ieu: []
comment: |-
  SELECT count(*)
  FROM MODEL_LIST AS T1
  JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id
  JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId
  WHERE T3.CountryName = 'usa';

sql: |-
  SELECT count(*)
  FROM MODEL_LIST AS T1
  JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id
  JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId
  WHERE T3.CountryName = 'usa';
smbop_beam_join_columns:
- - id
  - maker
- - id
  - maker
- - id
  - maker
- - id
  - maker
- []
- - id
  - maker
- - id
  - maker
smbop_beam_groupby_columns:
- []
- []
- []
- []
- []
- []
- []
smbop_beam_tables:
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
- - tests-examples/db2csv/car_1/tables/model_list.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
smbop_beam_constants:
- - usa
- - usa
- - usa
- - usa
- - usa
- - usa
- - usa
smbop_beam_functions:
- - count
- []
- - count
- - count
- - count
- - count
- - count
smbop_beam_columns:
- - country
- - country
- - model
  - country
- - model
  - country
- []
- - model
- []
smbop_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
smbop_beam_filters:
- - '='
- - '='
- - '='
- - '='
- []
- []
- []
smbop_beam_inferred_code:
  - SELECT COUNT( * ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'usa'
  - SELECT * FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'usa'
  - SELECT COUNT( DISTINCT model_list.model ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'usa'
  - SELECT COUNT( model_list.model ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'usa'
  - SELECT COUNT( * ) FROM model_list
  - SELECT COUNT( DISTINCT model_list.model ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id
  - SELECT COUNT( * ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id
smbop_beam_inferred_code_w_terminals:
  - SELECT COUNT( * ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'usa'
  - SELECT * FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'usa'
  - SELECT COUNT( DISTINCT model_list.model ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'usa'
  - SELECT COUNT( model_list.model ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'usa'
  - SELECT COUNT( * ) FROM model_list
  - SELECT COUNT( DISTINCT model_list.model ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id
  - SELECT COUNT( * ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id
smbop_beam_has_limit:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_join_columns:
- - country
  - countryid
  - maker
  - model
  - id
- - country
  - maker
  - countryid
  - id
- - country
  - countryid
  - maker
  - model
  - id
- - country
  - countryid
  - maker
  - model
  - id
- - country
  - makeid
  - countryid
  - maker
  - model
  - id
- - country
  - countryid
  - maker
  - contid
  - model
  - id
  - continent
- - country
  - maker
  - countryid
  - id
- - country
  - countryid
  - maker
  - model
  - id
ratsql_beam_groupby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_tables:
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/car_names.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/car_names.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/car_names.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/car_names.csv
  - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/car_names.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/car_names.csv
ratsql_beam_constants:
- - usa
- - usa
- - usa
- - usa
- - usa
- - usa
- - usa
- - usa
- - usa
- - usa
ratsql_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
- - count
- - count
ratsql_beam_columns:
- - countryname
- - countryname
- - countryname
  - model
- - countryname
- - countryname
- - countryname
- - countryname
  - model
- - countryname
ratsql_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_filters:
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
ratsql_beam_inferred_code:
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'terminal'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker WHERE countries.CountryName = 'terminal'
  - SELECT Count(DISTINCT model_list.Model) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'terminal'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'terminal'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model AND model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE countries.CountryName = 'terminal'
  - SELECT Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent AND continents.ContId = countries.Continent AND continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'terminal'
  - SELECT Count(DISTINCT model_list.Model) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker WHERE countries.CountryName = 'terminal'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE DISTINCT countries.CountryName = 'terminal'
  - SELECT Count(DISTINCT *) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'terminal'
  - SELECT DISTINCT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'terminal'
ratsql_beam_inferred_code_w_terminals:
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'usa'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker WHERE countries.CountryName = 'usa'
  - SELECT Count(DISTINCT model_list.Model) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'usa'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'usa'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model AND model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE countries.CountryName = 'usa'
  - SELECT Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent AND continents.ContId = countries.Continent AND continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'usa'
  - SELECT Count(DISTINCT model_list.Model) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker WHERE countries.CountryName = 'usa'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE DISTINCT countries.CountryName = 'usa'
  - SELECT Count(DISTINCT *) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'usa'
  - SELECT DISTINCT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'usa'
ratsql_beam_has_limit:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
ratsql_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
ratsql_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_score_history:
- - -0.10445213317871094
  - -0.1050577163696289
  - -0.10809111595153809
  - -0.10363459587097168
  - -0.10102558135986328
  - -0.10425806045532227
  - -0.11321067810058594
  - -0.1015157699584961
  - -0.10472965240478516
  - -0.10438013076782227
  - -0.10477209091186523
  - -0.28767815232276917
  - -0.11057353019714355
  - -0.10539603233337402
  - -0.09609651565551758
  - -0.10259866714477539
  - -0.10138177871704102
  - -0.10163259506225586
  - -0.10476064682006836
  - -0.10509967803955078
  - -0.10477542877197266
  - -0.06401149183511734
  - -0.11209249496459961
  - -0.10579681396484375
  - -0.10440349578857422
  - -0.10100555419921875
  - -0.10222864151000977
  - -0.1075284481048584
  - -0.10477900505065918
  - -0.09854269027709961
  - -0.1045827865600586
  - -0.19856595993041992
  - -0.10575532913208008
  - -0.10395002365112305
  - -0.18032532930374146
  - -0.10492944717407227
  - -0.10513639450073242
  - -0.29282665252685547
  - -0.10260486602783203
  - -0.10129737854003906
  - -0.4289928674697876
- - -0.10445213317871094
  - -0.1050577163696289
  - -0.10809111595153809
  - -0.10363459587097168
  - -0.10102558135986328
  - -0.10425806045532227
  - -0.11321067810058594
  - -0.1015157699584961
  - -0.10472965240478516
  - -0.10438013076782227
  - -0.10477209091186523
  - -0.28767815232276917
  - -0.11057353019714355
  - -0.10539603233337402
  - -0.09609651565551758
  - -0.10259866714477539
  - -0.10138177871704102
  - -0.10163259506225586
  - -0.10476064682006836
  - -0.10509967803955078
  - -0.10477542877197266
  - -0.06401149183511734
  - -0.11209249496459961
  - -0.10579681396484375
  - -0.10440349578857422
  - -0.10100555419921875
  - -0.10222864151000977
  - -0.1075284481048584
  - -0.10477900505065918
  - -0.09854269027709961
  - -0.1045827865600586
  - -0.19856595993041992
  - -0.10575532913208008
  - -0.10395002365112305
  - -0.18032532930374146
  - -0.10492944717407227
  - -0.10513639450073242
  - -1.8333954811096191
  - -0.10208892822265625
  - -0.1025848388671875
  - -0.40952014923095703
- - -0.10445213317871094
  - -0.1050577163696289
  - -0.10809111595153809
  - -0.10363459587097168
  - -0.10102558135986328
  - -0.10425806045532227
  - -0.11321067810058594
  - -0.1015157699584961
  - -0.10472965240478516
  - -0.10438013076782227
  - -0.10477209091186523
  - -2.0254597663879395
  - -0.11792516708374023
  - -0.10493278503417969
  - -0.09396839141845703
  - -0.10357189178466797
  - -0.10106468200683594
  - -0.10180377960205078
  - -0.10455989837646484
  - -0.1049799919128418
  - -0.10482215881347656
  - -0.06404771655797958
  - -0.11219334602355957
  - -0.1057898998260498
  - -0.10475873947143555
  - -0.10102319717407227
  - -0.10195016860961914
  - -0.10755181312561035
  - -0.10474324226379395
  - -0.09867238998413086
  - -0.10414361953735352
  - -0.17830944061279297
  - -0.10580635070800781
  - -0.10388898849487305
  - -0.17656053602695465
  - -0.1049189567565918
  - -0.1051793098449707
  - -0.29381224513053894
  - -0.1024465560913086
  - -0.10128068923950195
  - -0.43062880635261536
- - -0.10445213317871094
  - -0.1050577163696289
  - -0.10809111595153809
  - -0.10363459587097168
  - -0.10102558135986328
  - -0.10425806045532227
  - -0.11321067810058594
  - -0.1015157699584961
  - -0.10472965240478516
  - -0.10438013076782227
  - -0.10477209091186523
  - -0.28767815232276917
  - -0.11057353019714355
  - -0.10539603233337402
  - -0.09609651565551758
  - -0.10259866714477539
  - -0.10138177871704102
  - -0.10163259506225586
  - -0.10476064682006836
  - -0.10509967803955078
  - -0.10477542877197266
  - -0.06401149183511734
  - -0.11209249496459961
  - -0.10579681396484375
  - -0.10440349578857422
  - -0.10100555419921875
  - -0.10222864151000977
  - -0.1075284481048584
  - -0.10477900505065918
  - -0.09854269027709961
  - -0.1045827865600586
  - -0.19856595993041992
  - -0.10575532913208008
  - -0.10395002365112305
  - -0.18032532930374146
  - -0.10492944717407227
  - -0.10513639450073242
  - -0.29282665252685547
  - -0.10260486602783203
  - -0.10129737854003906
  - -2.328399419784546
- - -0.10445213317871094
  - -0.1050577163696289
  - -0.10809111595153809
  - -0.10363459587097168
  - -0.10102558135986328
  - -0.10425806045532227
  - -0.11321067810058594
  - -0.1015157699584961
  - -0.10472965240478516
  - -0.10438013076782227
  - -0.10477209091186523
  - -0.28767815232276917
  - -0.11057353019714355
  - -0.10539603233337402
  - -0.09609651565551758
  - -0.10259866714477539
  - -0.10138177871704102
  - -0.10163259506225586
  - -0.10476064682006836
  - -0.10509967803955078
  - -0.10477542877197266
  - -0.06401149183511734
  - -0.11209249496459961
  - -0.10579681396484375
  - -0.10440349578857422
  - -0.10100555419921875
  - -0.10222864151000977
  - -0.1075284481048584
  - -0.10477900505065918
  - -0.09854269027709961
  - -0.1045827865600586
  - -0.19856595993041992
  - -0.10575532913208008
  - -0.10395002365112305
  - -0.18032532930374146
  - -0.10492944717407227
  - -0.10513639450073242
  - -0.29282665252685547
  - -0.10260486602783203
  - -0.10129737854003906
  - -3.1383211612701416
- - -0.10445213317871094
  - -0.1050577163696289
  - -0.10809111595153809
  - -0.10363459587097168
  - -0.10102558135986328
  - -0.10425806045532227
  - -0.11321067810058594
  - -0.1015157699584961
  - -0.10472965240478516
  - -0.10438013076782227
  - -0.10477209091186523
  - -0.28767815232276917
  - -0.11057353019714355
  - -0.10539603233337402
  - -0.09609651565551758
  - -0.10259866714477539
  - -0.10138177871704102
  - -0.10163259506225586
  - -0.10476064682006836
  - -0.10509967803955078
  - -0.10477542877197266
  - -0.06401149183511734
  - -0.11209249496459961
  - -0.10579681396484375
  - -0.10440349578857422
  - -0.10100555419921875
  - -0.10222864151000977
  - -0.1075284481048584
  - -0.10477900505065918
  - -0.09854269027709961
  - -0.1045827865600586
  - -0.19856595993041992
  - -0.10575532913208008
  - -0.10395002365112305
  - -0.18032532930374146
  - -0.10492944717407227
  - -0.10513639450073242
  - -0.29282665252685547
  - -0.10260486602783203
  - -0.10129737854003906
  - -3.4311349391937256
- - -0.10445213317871094
  - -0.1050577163696289
  - -0.10809111595153809
  - -0.10363459587097168
  - -0.10102558135986328
  - -0.10425806045532227
  - -0.11321067810058594
  - -0.1015157699584961
  - -0.10472965240478516
  - -0.10438013076782227
  - -0.10477209091186523
  - -2.0254597663879395
  - -0.11792516708374023
  - -0.10493278503417969
  - -0.09396839141845703
  - -0.10357189178466797
  - -0.10106468200683594
  - -0.10180377960205078
  - -0.10455989837646484
  - -0.1049799919128418
  - -0.10482215881347656
  - -0.06404771655797958
  - -0.11219334602355957
  - -0.1057898998260498
  - -0.10475873947143555
  - -0.10102319717407227
  - -0.10195016860961914
  - -0.10755181312561035
  - -0.10474324226379395
  - -0.09867238998413086
  - -0.10414361953735352
  - -0.17830944061279297
  - -0.10580635070800781
  - -0.10388898849487305
  - -0.17656053602695465
  - -0.1049189567565918
  - -0.1051793098449707
  - -1.8317735195159912
  - -0.10196304321289062
  - -0.10303211212158203
  - -0.4096840023994446
- - -0.10445213317871094
  - -0.1050577163696289
  - -0.10809111595153809
  - -0.10363459587097168
  - -0.10102558135986328
  - -0.10425806045532227
  - -0.11321067810058594
  - -0.1015157699584961
  - -0.10472965240478516
  - -0.10438013076782227
  - -0.10477209091186523
  - -0.28767815232276917
  - -0.11057353019714355
  - -0.10539603233337402
  - -0.09609651565551758
  - -0.10259866714477539
  - -0.10138177871704102
  - -0.10163259506225586
  - -0.10476064682006836
  - -0.10509967803955078
  - -0.10477542877197266
  - -0.06401149183511734
  - -3.449354410171509
  - -0.10627484321594238
  - -0.10488033294677734
  - -0.10101652145385742
  - -0.10223770141601562
  - -0.10754227638244629
  - -0.10476875305175781
  - -0.09865474700927734
  - -0.10427427291870117
  - -0.20379638671875
  - -0.10564470291137695
  - -0.10394906997680664
  - -0.17286735773086548
  - -0.10493612289428711
  - -0.10517644882202148
  - -0.29271572828292847
  - -0.10267305374145508
  - -0.10128402709960938
  - -0.4311576783657074
- - -0.10445213317871094
  - -0.1050577163696289
  - -0.10809111595153809
  - -0.10363459587097168
  - -0.10102558135986328
  - -0.10425806045532227
  - -0.11321067810058594
  - -0.1015157699584961
  - -0.10472965240478516
  - -0.10438013076782227
  - -0.10477209091186523
  - -0.28767815232276917
  - -3.4881420135498047
  - -0.10532665252685547
  - -0.09808635711669922
  - -0.10268402099609375
  - -0.10133743286132812
  - -0.10155010223388672
  - -0.10484170913696289
  - -0.10511112213134766
  - -0.10475730895996094
  - -0.06470664590597153
  - -0.11205506324768066
  - -0.10579466819763184
  - -0.1044001579284668
  - -0.10099601745605469
  - -0.10222387313842773
  - -0.10752677917480469
  - -0.10477972030639648
  - -0.09850168228149414
  - -0.10442113876342773
  - -0.18834400177001953
  - -0.10569334030151367
  - -0.10399293899536133
  - -0.17088235914707184
  - -0.10491609573364258
  - -0.1051783561706543
  - -0.29286977648735046
  - -0.10263586044311523
  - -0.1012730598449707
  - -0.43104952573776245
- - -0.10445213317871094
  - -0.1050577163696289
  - -3.5133187770843506
  - -0.10360169410705566
  - -0.1007699966430664
  - -0.10571050643920898
  - -0.10832691192626953
  - -0.1020660400390625
  - -0.10469245910644531
  - -0.10442352294921875
  - -0.10468006134033203
  - -0.28407132625579834
  - -0.11055445671081543
  - -0.10539746284484863
  - -0.09592294692993164
  - -0.10271406173706055
  - -0.10127544403076172
  - -0.10155630111694336
  - -0.10479545593261719
  - -0.10505342483520508
  - -0.10476064682006836
  - -0.06426316499710083
  - -0.11207151412963867
  - -0.10579991340637207
  - -0.10440492630004883
  - -0.10100650787353516
  - -0.1022195816040039
  - -0.1075432300567627
  - -0.1047818660736084
  - -0.0985422134399414
  - -0.10462331771850586
  - -0.20128822326660156
  - -0.10577774047851562
  - -0.10393047332763672
  - -0.1831253468990326
  - -0.10493087768554688
  - -0.10512447357177734
  - -0.2928379476070404
  - -0.10258150100708008
  - -0.10130643844604492
  - -0.42848408222198486
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 3)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'model_list'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_names'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 3)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'model_list'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Model'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 3)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'model_list'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_names'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 3)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'model_list'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_names'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 3)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'model_list'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_names'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'cars_data'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 3)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'model_list'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_names'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'continents'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Model'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 3)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'model_list'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 3)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'model_list'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_names'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 3)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'model_list'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_names'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'True'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 3)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'model_list'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_names'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
