db: tests-examples/db2csv/car_1/tables/car_1.sqlite
inputs:
 - tests-examples/db2csv/car_1/tables/countries.csv
 - tests-examples/db2csv/car_1/tables/car_makers.csv
output: tests-examples/db2csv/car_1/tables/0027_dev.csv
raw_question: How many car makers are there in france? 
question_index: 113 
has_limit: False 
has_order_by: False 
order_by_direction: []
constants:
 - france
join_columns:
 - country
 - countryid
groupby_columns: []
functions:
 - count
columns:
 - countryname
filters:
 - '='
ieu: []
comment: |-
  SELECT count(*)
  FROM CAR_MAKERS AS T1
  JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId
  WHERE T2.CountryName = 'france';

sql: |-
  SELECT count(*)
  FROM CAR_MAKERS AS T1
  JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId
  WHERE T2.CountryName = 'france';
smbop_beam_join_columns:
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_groupby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_tables:
- - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/cars_data.csv
smbop_beam_constants:
- - france
- - france
- - france
- - france
- - france
- - france
- - france
- - france
smbop_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
- []
- - count
smbop_beam_columns:
- - country
- - country
- - country
- - country
- - country
- - country
- - country
- - country
smbop_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_filters:
- - '='
- - '='
- - '='
- - '='
- - '='
- []
- - '='
- - '='
smbop_beam_inferred_code:
  - SELECT COUNT( * ) FROM car_makers WHERE car_makers.country = 'france'
  - SELECT COUNT( car_makers.country ) FROM car_makers WHERE car_makers.country = 'france'
  - SELECT COUNT( DISTINCT car_makers.country ) FROM car_makers WHERE car_makers.country = 'france'
  - SELECT COUNT( * ) FROM car_makers WHERE car_makers.country = 'fr'
  - SELECT COUNT( car_makers.country ) FROM car_makers WHERE car_makers.country = 'fr'
  - SELECT COUNT( car_makers.country ) FROM car_makers
  - SELECT car_makers.country FROM car_makers WHERE car_makers.country = 'france'
  - SELECT COUNT( * ) FROM cars_data, car_makers WHERE car_makers.country = 'fr'
smbop_beam_inferred_code_w_terminals:
  - SELECT COUNT( * ) FROM car_makers WHERE car_makers.country = 'france'
  - SELECT COUNT( car_makers.country ) FROM car_makers WHERE car_makers.country = 'france'
  - SELECT COUNT( DISTINCT car_makers.country ) FROM car_makers WHERE car_makers.country = 'france'
  - SELECT COUNT( * ) FROM car_makers WHERE car_makers.country = 'fr'
  - SELECT COUNT( car_makers.country ) FROM car_makers WHERE car_makers.country = 'fr'
  - SELECT COUNT( car_makers.country ) FROM car_makers
  - SELECT car_makers.country FROM car_makers WHERE car_makers.country = 'france'
  - SELECT COUNT( * ) FROM cars_data, car_makers WHERE car_makers.country = 'fr'
smbop_beam_has_limit:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_join_columns:
- - country
  - countryid
- - country
  - countryid
- - contid
  - country
  - continent
  - countryid
- - country
  - countryid
- - country
  - makeid
  - countryid
  - maker
  - model
  - id
- - country
  - maker
  - countryid
  - id
- - country
  - countryid
  - maker
  - model
  - id
- - country
  - countryid
ratsql_beam_groupby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_tables:
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/continents.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/car_names.csv
  - tests-examples/db2csv/car_1/tables/cars_data.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
  - tests-examples/db2csv/car_1/tables/model_list.csv
  - tests-examples/db2csv/car_1/tables/car_names.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
ratsql_beam_constants:
- - france
- - france
- - france
- - france
- - france
- - france
- - france
- - france
- - france
- - france
  - '1'
ratsql_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
- - count
- - count
ratsql_beam_columns:
- - countryname
- - countryname
  - maker
- - countryname
- - countryname
  - maker
- - countryname
- - countryname
- - countryname
- - countryname
ratsql_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_filters:
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
ratsql_beam_inferred_code:
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'terminal'
  - SELECT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'terminal'
  - SELECT Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent AND continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'terminal'
  - SELECT Count(car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'terminal'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE countries.CountryName = 'terminal'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE DISTINCT countries.CountryName = 'terminal'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker WHERE countries.CountryName = 'terminal'
  - SELECT Count(DISTINCT *) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'terminal'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'terminal'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'terminal' LIMIT 1
ratsql_beam_inferred_code_w_terminals:
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'france'
  - SELECT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'france'
  - SELECT Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent AND continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'france'
  - SELECT Count(car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'france'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE countries.CountryName = 'france'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE DISTINCT countries.CountryName = 'france'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker WHERE countries.CountryName = 'france'
  - SELECT Count(DISTINCT *) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'france'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'france'
  - SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'france' LIMIT 1
ratsql_beam_has_limit:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - True
ratsql_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
ratsql_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_score_history:
- - -0.10561847686767578
  - -0.1047515869140625
  - -0.10694384574890137
  - -0.10358834266662598
  - -0.10106897354125977
  - -0.10517597198486328
  - -0.11101198196411133
  - -0.10069465637207031
  - -0.10524463653564453
  - -0.10450458526611328
  - -0.10562515258789062
  - -0.4966779351234436
  - -0.11070609092712402
  - -0.10540509223937988
  - -0.09935855865478516
  - -0.10467338562011719
  - -0.10099315643310547
  - -0.10122919082641602
  - -0.10421562194824219
  - -0.1049957275390625
  - -0.10540342330932617
  - -0.06533800065517426
  - -0.11126327514648438
  - -0.10582256317138672
  - -0.10497426986694336
  - -0.10102558135986328
  - -0.10223388671875
  - -0.10747814178466797
  - -0.10479617118835449
  - -0.10229730606079102
  - -0.10565185546875
  - -0.11279296875
  - -0.10531234741210938
  - -0.1046915054321289
  - -0.7406100034713745
  - -0.10552310943603516
  - -0.10368680953979492
  - -0.11530444025993347
- - -0.10561847686767578
  - -0.1047515869140625
  - -0.10694384574890137
  - -0.10358834266662598
  - -0.10106897354125977
  - -0.10517597198486328
  - -0.11101198196411133
  - -0.10069465637207031
  - -0.10524463653564453
  - -0.10450458526611328
  - -0.10562515258789062
  - -1.2762166261672974
  - -0.14124584197998047
  - -0.10539770126342773
  - -0.09978628158569336
  - -0.10634469985961914
  - -0.10068368911743164
  - -0.10134315490722656
  - -0.10410881042480469
  - -0.10512542724609375
  - -0.10638666152954102
  - -0.07720134407281876
  - -0.11154747009277344
  - -0.10574054718017578
  - -0.10455751419067383
  - -0.10106849670410156
  - -0.10294437408447266
  - -0.10747694969177246
  - -0.10474324226379395
  - -0.10200929641723633
  - -0.10548686981201172
  - -0.11266899108886719
  - -0.10528087615966797
  - -0.10454511642456055
  - -0.7583280801773071
  - -0.10561037063598633
  - -0.10369062423706055
  - -0.11670936644077301
- - -0.10561847686767578
  - -0.1047515869140625
  - -0.10694384574890137
  - -0.10358834266662598
  - -0.10106897354125977
  - -0.10517597198486328
  - -0.11101198196411133
  - -0.10069465637207031
  - -0.10524463653564453
  - -0.10450458526611328
  - -0.10562515258789062
  - -0.4966779351234436
  - -0.11070609092712402
  - -0.10540509223937988
  - -0.09935855865478516
  - -0.10467338562011719
  - -0.10099315643310547
  - -0.10122919082641602
  - -0.10421562194824219
  - -0.1049957275390625
  - -0.10540342330932617
  - -0.06533800065517426
  - -0.11126327514648438
  - -0.10582256317138672
  - -0.10497426986694336
  - -0.10102558135986328
  - -0.10223388671875
  - -0.10747814178466797
  - -0.10479617118835449
  - -0.10229730606079102
  - -0.10565185546875
  - -0.11279296875
  - -0.10531234741210938
  - -0.1046915054321289
  - -3.3466506004333496
  - -0.10526609420776367
  - -0.10461235046386719
  - -0.3676164746284485
- - -0.10561847686767578
  - -0.1047515869140625
  - -0.10694384574890137
  - -0.10358834266662598
  - -0.10106897354125977
  - -0.10517597198486328
  - -0.11101198196411133
  - -0.10069465637207031
  - -0.10524463653564453
  - -0.10450458526611328
  - -0.10562515258789062
  - -1.2762166261672974
  - -2.5649235248565674
  - -0.1047964096069336
  - -0.09559154510498047
  - -0.10627365112304688
  - -0.10068416595458984
  - -0.10128068923950195
  - -0.10409259796142578
  - -0.10514545440673828
  - -0.10544061660766602
  - -0.06621623039245605
  - -0.11149930953979492
  - -0.10577011108398438
  - -0.10465621948242188
  - -0.1010580062866211
  - -0.10271453857421875
  - -0.10746502876281738
  - -0.10475897789001465
  - -0.10222339630126953
  - -0.10549020767211914
  - -0.11265277862548828
  - -0.10527944564819336
  - -0.10454416275024414
  - -0.7595546245574951
  - -0.10563278198242188
  - -0.10365056991577148
  - -0.11609700322151184
- - -0.10561847686767578
  - -0.1047515869140625
  - -0.10694384574890137
  - -0.10358834266662598
  - -0.10106897354125977
  - -0.10517597198486328
  - -0.11101198196411133
  - -0.10069465637207031
  - -0.10524463653564453
  - -0.10450458526611328
  - -0.10562515258789062
  - -0.4966779351234436
  - -0.11070609092712402
  - -0.10540509223937988
  - -0.09935855865478516
  - -0.10467338562011719
  - -0.10099315643310547
  - -0.10122919082641602
  - -0.10421562194824219
  - -0.1049957275390625
  - -0.10540342330932617
  - -0.06533800065517426
  - -0.11126327514648438
  - -0.10582256317138672
  - -0.10497426986694336
  - -0.10102558135986328
  - -0.10223388671875
  - -0.10747814178466797
  - -0.10479617118835449
  - -0.10229730606079102
  - -0.10565185546875
  - -0.11279296875
  - -0.10531234741210938
  - -0.1046915054321289
  - -3.4631617069244385
  - -0.10524463653564453
  - -0.10702991485595703
  - -0.6659854054450989
- - -0.10561847686767578
  - -0.1047515869140625
  - -0.10694384574890137
  - -0.10358834266662598
  - -0.10106897354125977
  - -0.10517597198486328
  - -0.11101198196411133
  - -0.10069465637207031
  - -0.10524463653564453
  - -0.10450458526611328
  - -0.10562515258789062
  - -0.4966779351234436
  - -0.11070609092712402
  - -0.10540509223937988
  - -0.09935855865478516
  - -0.10467338562011719
  - -0.10099315643310547
  - -0.10122919082641602
  - -0.10421562194824219
  - -0.1049957275390625
  - -0.10540342330932617
  - -0.06533800065517426
  - -3.459186315536499
  - -0.10566425323486328
  - -0.10449361801147461
  - -0.10115337371826172
  - -0.10256099700927734
  - -0.10740137100219727
  - -0.10476994514465332
  - -0.10168743133544922
  - -0.10546207427978516
  - -0.11343050003051758
  - -0.10537290573120117
  - -0.10470056533813477
  - -0.7175449132919312
  - -0.10558271408081055
  - -0.10364007949829102
  - -0.11731096357107162
- - -0.10561847686767578
  - -0.1047515869140625
  - -0.10694384574890137
  - -0.10358834266662598
  - -0.10106897354125977
  - -0.10517597198486328
  - -0.11101198196411133
  - -0.10069465637207031
  - -0.10524463653564453
  - -0.10450458526611328
  - -0.10562515258789062
  - -0.4966779351234436
  - -0.11070609092712402
  - -0.10540509223937988
  - -0.09935855865478516
  - -0.10467338562011719
  - -0.10099315643310547
  - -0.10122919082641602
  - -0.10421562194824219
  - -0.1049957275390625
  - -0.10540342330932617
  - -0.06533800065517426
  - -0.11126327514648438
  - -0.10582256317138672
  - -0.10497426986694336
  - -0.10102558135986328
  - -0.10223388671875
  - -0.10747814178466797
  - -0.10479617118835449
  - -0.10229730606079102
  - -0.10565185546875
  - -0.11279296875
  - -0.10531234741210938
  - -0.1046915054321289
  - -3.5063135623931885
  - -0.10462188720703125
  - -0.10407829284667969
  - -0.6853790283203125
- - -0.10561847686767578
  - -0.1047515869140625
  - -0.10694384574890137
  - -0.10358834266662598
  - -0.10106897354125977
  - -0.10517597198486328
  - -0.11101198196411133
  - -0.10069465637207031
  - -0.10524463653564453
  - -0.10450458526611328
  - -0.10562515258789062
  - -0.4966779351234436
  - -3.475675582885742
  - -0.10609769821166992
  - -0.10396766662597656
  - -0.10443449020385742
  - -0.10213041305541992
  - -0.10115718841552734
  - -0.10424184799194336
  - -0.10506916046142578
  - -0.10538816452026367
  - -0.06548896431922913
  - -0.11124086380004883
  - -0.10582232475280762
  - -0.10491514205932617
  - -0.10102653503417969
  - -0.10215425491333008
  - -0.10747671127319336
  - -0.10479927062988281
  - -0.10239696502685547
  - -0.10562801361083984
  - -0.11285591125488281
  - -0.1053152084350586
  - -0.10470247268676758
  - -0.7393390536308289
  - -0.10552072525024414
  - -0.10368156433105469
  - -0.11535383760929108
- - -0.10561847686767578
  - -0.1047515869140625
  - -0.10694384574890137
  - -0.10358834266662598
  - -0.10106897354125977
  - -0.10517597198486328
  - -0.11101198196411133
  - -0.10069465637207031
  - -0.10524463653564453
  - -0.10450458526611328
  - -0.10562515258789062
  - -0.4966779351234436
  - -0.11070609092712402
  - -0.10540509223937988
  - -0.09935855865478516
  - -0.10467338562011719
  - -0.10099315643310547
  - -0.10122919082641602
  - -0.10421562194824219
  - -0.1049957275390625
  - -0.10540342330932617
  - -0.06533800065517426
  - -0.11126327514648438
  - -0.10582256317138672
  - -0.10497426986694336
  - -0.10102558135986328
  - -0.10223388671875
  - -0.10747814178466797
  - -0.10479617118835449
  - -0.10229730606079102
  - -0.10565185546875
  - -0.11279296875
  - -0.10531234741210938
  - -0.1046915054321289
  - -3.4589505195617676
  - -0.10514640808105469
  - -0.10597467422485352
  - -0.812574028968811
- - -0.10561847686767578
  - -0.1047515869140625
  - -0.10694384574890137
  - -0.10358834266662598
  - -0.10106897354125977
  - -0.10517597198486328
  - -0.11101198196411133
  - -0.10069465637207031
  - -0.10524463653564453
  - -0.10450458526611328
  - -0.10562515258789062
  - -0.4966779351234436
  - -0.11070609092712402
  - -0.10540509223937988
  - -0.09935855865478516
  - -0.10467338562011719
  - -0.10099315643310547
  - -0.10122919082641602
  - -0.10421562194824219
  - -0.1049957275390625
  - -0.10540342330932617
  - -0.06533800065517426
  - -0.11126327514648438
  - -0.10582256317138672
  - -0.10497426986694336
  - -0.10102558135986328
  - -0.10223388671875
  - -3.5557291507720947
  - -0.10486221313476562
  - -0.1007089614868164
  - -0.10583019256591797
  - -0.1124262809753418
  - -0.1052708625793457
  - -0.10469579696655273
  - -0.7211092710494995
  - -0.10559797286987305
  - -0.1036214828491211
  - -0.11522094160318375
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Maker'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'continents'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Maker'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'cars_data'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'model_list'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_names'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'True'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
