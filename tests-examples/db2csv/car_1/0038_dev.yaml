db: tests-examples/db2csv/car_1/tables/car_1.sqlite
inputs:
 - tests-examples/db2csv/car_1/tables/countries.csv
 - tests-examples/db2csv/car_1/tables/car_makers.csv
output: tests-examples/db2csv/car_1/tables/0038_dev.csv
raw_question: What are the names and ids of all countries with at least one car maker? 
question_index: 124 
has_limit: False 
has_order_by: False 
order_by_direction: []
constants:
 - 1
join_columns:
 - country
 - countryid
groupby_columns:
 - countryid
functions:
 - count
columns: []
filters: []
ieu: []
comment: |-
  SELECT T1.CountryName,
         T1.CountryId
  FROM COUNTRIES AS T1
  JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country
  GROUP BY T1.CountryId
  HAVING count(*) >= 1;

sql: |-
  SELECT T1.CountryName,
         T1.CountryId
  FROM COUNTRIES AS T1
  JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country
  GROUP BY T1.CountryId
  HAVING count(*) >= 1;
smbop_beam_join_columns:
- - country
  - countryid
- - country
  - countryid
- - country
  - countryid
- - country
  - countryid
- []
- []
smbop_beam_groupby_columns:
- - countryid
- - countryid
- - countryid
- []
- []
- []
smbop_beam_tables:
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/car_makers.csv
smbop_beam_constants:
- - 1
- - 1
- - 1
- - 1
- - 1
- - 1
smbop_beam_functions:
- - count
- - count
- []
- []
- []
- []
smbop_beam_columns:
- []
- []
- - countryname
- - countryname
- []
- []
smbop_beam_ieu:
- []
- []
- []
- []
- - intersect
- []
smbop_beam_filters:
- []
- []
- - '!='
- - '!='
- []
- []
smbop_beam_inferred_code:
  - SELECT countries.countryname , countries.countryid FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT( * ) >= 1
  - SELECT countries.countryname , car_makers.id FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT( * ) >= 1
  - SELECT countries.countryname , countries.countryid FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.countryname != countries.countryname GROUP BY countries.countryid
  - SELECT countries.countryname , countries.countryid FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.countryname != countries.countryname
  - SELECT car_makers.country FROM car_makers INTERSECT SELECT car_makers.country FROM car_makers
  - SELECT car_makers.country FROM car_makers
smbop_beam_inferred_code_w_terminals:
  - SELECT countries.countryname , countries.countryid FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT( * ) >= 1
  - SELECT countries.countryname , car_makers.id FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT( * ) >= 1
  - SELECT countries.countryname , countries.countryid FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.countryname != countries.countryname GROUP BY countries.countryid
  - SELECT countries.countryname , countries.countryid FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.countryname != countries.countryname
  - SELECT car_makers.country FROM car_makers INTERSECT SELECT car_makers.country FROM car_makers
  - SELECT car_makers.country FROM car_makers
smbop_beam_has_limit:
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
ratsql_beam_join_columns:
- - country
  - countryid
- - country
  - countryid
- - country
  - countryid
- - country
  - countryid
- - country
  - countryid
- - country
  - countryid
- - country
  - countryid
ratsql_beam_groupby_columns:
- - country
- - country
- - id
- - country
- - id
- - country
- - country
ratsql_beam_tables:
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
- - tests-examples/db2csv/car_1/tables/countries.csv
  - tests-examples/db2csv/car_1/tables/car_makers.csv
ratsql_beam_constants:
- - 1
- - 1
- - 1
- - 1
- - 1
- - 1
- - 1
- - 1
- - 1
- - 1
  - '1'
ratsql_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
- - count
ratsql_beam_columns:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_filters:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_inferred_code:
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 'terminal'
  - SELECT countries.CountryName, car_makers.Id FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 'terminal'
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Id HAVING Count(*) >= 'terminal'
  - SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 'terminal'
  - SELECT countries.CountryName, car_makers.Id FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Id HAVING Count(*) >= 'terminal'
  - SELECT DISTINCT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 'terminal'
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY DISTINCT car_makers.Country HAVING Count(*) >= 'terminal'
  - SELECT countries.CountryName, DISTINCT car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 'terminal'
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(DISTINCT *) >= 'terminal'
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 'terminal' LIMIT 1
ratsql_beam_inferred_code_w_terminals:
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 1
  - SELECT countries.CountryName, car_makers.Id FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 1
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Id HAVING Count(*) >= 1
  - SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 1
  - SELECT countries.CountryName, car_makers.Id FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Id HAVING Count(*) >= 1
  - SELECT DISTINCT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 1
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY DISTINCT car_makers.Country HAVING Count(*) >= 1
  - SELECT countries.CountryName, DISTINCT car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 1
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(DISTINCT *) >= 1
  - SELECT countries.CountryName, car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 1 LIMIT 1
ratsql_beam_has_limit:
  - False
  - False
  - False
  - False
  - False
  - False
  - True
ratsql_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
ratsql_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_score_history:
- - -0.10436487197875977
  - -0.10799360275268555
  - -0.11087608337402344
  - -0.10426020622253418
  - -0.12859153747558594
  - -0.10265016555786133
  - -0.10459327697753906
  - -0.10146617889404297
  - -0.10438299179077148
  - -0.10466337203979492
  - -0.10492992401123047
  - -0.08768671751022339
  - -0.11299967765808105
  - -0.1055607795715332
  - -0.10223913192749023
  - -0.10586833953857422
  - -0.10200214385986328
  - -0.10552644729614258
  - -0.1059427261352539
  - -0.10516881942749023
  - -0.5621783137321472
  - -0.11307358741760254
  - -0.10567092895507812
  - -0.11440038681030273
  - -0.1151423454284668
  - -0.09781265258789062
  - -0.10372114181518555
  - -0.10461664199829102
  - -0.24109412729740143
  - -0.11310601234436035
  - -0.10558176040649414
  - -0.06816387176513672
  - -0.1000518798828125
  - -0.10270071029663086
  - -0.1048884391784668
  - -0.10686826705932617
  - -0.11613082885742188
  - -0.09540589153766632
  - -0.11097478866577148
  - -0.10622763633728027
  - -0.10487794876098633
  - -0.1026144027709961
  - -0.1075735092163086
  - -0.10516524314880371
  - -0.09780645370483398
  - -0.10513877868652344
  - -0.11261463165283203
  - -0.10483694076538086
  - -0.10542535781860352
  - -0.09284082055091858
  - -0.1053013801574707
  - -0.10515069961547852
  - -0.10501610487699509
- - -0.10436487197875977
  - -0.10799360275268555
  - -0.11087608337402344
  - -0.10426020622253418
  - -0.12859153747558594
  - -0.10265016555786133
  - -0.10459327697753906
  - -0.10146617889404297
  - -0.10438299179077148
  - -0.10466337203979492
  - -0.10492992401123047
  - -0.08768671751022339
  - -0.11299967765808105
  - -0.1055607795715332
  - -0.10223913192749023
  - -0.10586833953857422
  - -0.10200214385986328
  - -0.10552644729614258
  - -0.1059427261352539
  - -0.10516881942749023
  - -1.1283690929412842
  - -0.11259961128234863
  - -0.10532045364379883
  - -0.11437559127807617
  - -0.118011474609375
  - -0.09900522232055664
  - -0.10387897491455078
  - -0.10466432571411133
  - -0.25572410225868225
  - -0.11295342445373535
  - -0.1054534912109375
  - -0.07288646697998047
  - -0.10072994232177734
  - -0.1029043197631836
  - -0.10494709014892578
  - -0.10700511932373047
  - -0.11554431915283203
  - -0.09484994411468506
  - -0.11081576347351074
  - -0.10619020462036133
  - -0.1049203872680664
  - -0.1029520034790039
  - -0.10749459266662598
  - -0.10513806343078613
  - -0.09820699691772461
  - -0.10545682907104492
  - -0.11287117004394531
  - -0.1048574447631836
  - -0.10543537139892578
  - -0.09293609857559204
  - -0.10530614852905273
  - -0.10516643524169922
  - -0.10493046045303345
- - -0.10436487197875977
  - -0.10799360275268555
  - -0.11087608337402344
  - -0.10426020622253418
  - -0.12859153747558594
  - -0.10265016555786133
  - -0.10459327697753906
  - -0.10146617889404297
  - -0.10438299179077148
  - -0.10466337203979492
  - -0.10492992401123047
  - -0.08768671751022339
  - -0.11299967765808105
  - -0.1055607795715332
  - -0.10223913192749023
  - -0.10586833953857422
  - -0.10200214385986328
  - -0.10552644729614258
  - -0.1059427261352539
  - -0.10516881942749023
  - -0.5621783137321472
  - -0.11307358741760254
  - -0.10567092895507812
  - -0.11440038681030273
  - -0.1151423454284668
  - -0.09781265258789062
  - -0.10372114181518555
  - -0.10461664199829102
  - -2.6847431659698486
  - -0.1111307144165039
  - -0.10545682907104492
  - -0.1035151481628418
  - -0.09944915771484375
  - -0.10489225387573242
  - -0.1047658920288086
  - -0.10707283020019531
  - -0.11571645736694336
  - -0.09272989630699158
  - -0.11087226867675781
  - -0.10621190071105957
  - -0.1050729751586914
  - -0.10292243957519531
  - -0.10748124122619629
  - -0.10511946678161621
  - -0.09859657287597656
  - -0.10568714141845703
  - -0.11251592636108398
  - -0.10485172271728516
  - -0.10543107986450195
  - -0.0923469290137291
  - -0.10530710220336914
  - -0.1051793098449707
  - -0.10492541640996933
- - -0.10436487197875977
  - -0.10799360275268555
  - -0.11087608337402344
  - -0.10426020622253418
  - -0.12859153747558594
  - -0.10265016555786133
  - -0.10459327697753906
  - -0.10146617889404297
  - -0.10438299179077148
  - -0.10466337203979492
  - -0.10492992401123047
  - -0.08768671751022339
  - -0.11299967765808105
  - -0.1055607795715332
  - -0.10223913192749023
  - -0.10586833953857422
  - -0.10200214385986328
  - -0.10552644729614258
  - -0.1059427261352539
  - -0.10516881942749023
  - -2.9792330265045166
  - -0.1118323802947998
  - -0.10544586181640625
  - -0.11557531356811523
  - -0.1297593116760254
  - -0.09882116317749023
  - -0.10403585433959961
  - -0.10459566116333008
  - -0.2776818871498108
  - -0.1127934455871582
  - -0.10536003112792969
  - -0.07827186584472656
  - -0.10579252243041992
  - -0.10298633575439453
  - -0.1048574447631836
  - -0.10690593719482422
  - -0.11515140533447266
  - -0.09391122311353683
  - -0.11103630065917969
  - -0.10618305206298828
  - -0.1047520637512207
  - -0.10282230377197266
  - -0.10745453834533691
  - -0.10515785217285156
  - -0.0982060432434082
  - -0.10501384735107422
  - -0.11165857315063477
  - -0.10485982894897461
  - -0.10539484024047852
  - -0.09161526709794998
  - -0.105316162109375
  - -0.1051783561706543
  - -0.10493088513612747
- - -0.10436487197875977
  - -0.10799360275268555
  - -0.11087608337402344
  - -0.10426020622253418
  - -0.12859153747558594
  - -0.10265016555786133
  - -0.10459327697753906
  - -0.10146617889404297
  - -0.10438299179077148
  - -0.10466337203979492
  - -0.10492992401123047
  - -0.08768671751022339
  - -0.11299967765808105
  - -0.1055607795715332
  - -0.10223913192749023
  - -0.10586833953857422
  - -0.10200214385986328
  - -0.10552644729614258
  - -0.1059427261352539
  - -0.10516881942749023
  - -1.1283690929412842
  - -0.11259961128234863
  - -0.10532045364379883
  - -0.11437559127807617
  - -0.118011474609375
  - -0.09900522232055664
  - -0.10387897491455078
  - -0.10466432571411133
  - -2.5814552307128906
  - -0.11111164093017578
  - -0.10534501075744629
  - -0.10223579406738281
  - -0.10067415237426758
  - -0.10513067245483398
  - -0.10478830337524414
  - -0.10717630386352539
  - -0.11375236511230469
  - -0.09029737114906311
  - -0.1106867790222168
  - -0.10612630844116211
  - -0.10517168045043945
  - -0.10344743728637695
  - -0.10731077194213867
  - -0.10506319999694824
  - -0.09891653060913086
  - -0.10603618621826172
  - -0.11269474029541016
  - -0.1048746109008789
  - -0.10547256469726562
  - -0.09227953851222992
  - -0.10529708862304688
  - -0.1051783561706543
  - -0.10478576272726059
- - -0.10436487197875977
  - -0.10799360275268555
  - -3.429464817047119
  - -0.10413551330566406
  - -0.13208436965942383
  - -0.10219240188598633
  - -0.1046905517578125
  - -0.10161876678466797
  - -0.1044926643371582
  - -0.10468673706054688
  - -0.10487699508666992
  - -0.08701031655073166
  - -0.11298346519470215
  - -0.10554170608520508
  - -0.10231542587280273
  - -0.10572290420532227
  - -0.10200023651123047
  - -0.1055612564086914
  - -0.10595846176147461
  - -0.10516595840454102
  - -0.5622327923774719
  - -0.11307358741760254
  - -0.10567045211791992
  - -0.11439895629882812
  - -0.11514520645141602
  - -0.09776449203491211
  - -0.10372543334960938
  - -0.10458993911743164
  - -0.24017395079135895
  - -0.11315226554870605
  - -0.10558104515075684
  - -0.0679788589477539
  - -0.10033321380615234
  - -0.10271310806274414
  - -0.10493612289428711
  - -0.10685586929321289
  - -0.11618852615356445
  - -0.09518816322088242
  - -0.11097908020019531
  - -0.10622406005859375
  - -0.10487699508666992
  - -0.10262918472290039
  - -0.10757279396057129
  - -0.10516500473022461
  - -0.09782648086547852
  - -0.10517263412475586
  - -0.11262035369873047
  - -0.10483884811401367
  - -0.10541677474975586
  - -0.09285429120063782
  - -0.1053004264831543
  - -0.10515213012695312
  - -0.1050088107585907
- - -0.10436487197875977
  - -0.10799360275268555
  - -0.11087608337402344
  - -0.10426020622253418
  - -0.12859153747558594
  - -0.10265016555786133
  - -0.10459327697753906
  - -0.10146617889404297
  - -0.10438299179077148
  - -0.10466337203979492
  - -0.10492992401123047
  - -0.08768671751022339
  - -0.11299967765808105
  - -0.1055607795715332
  - -0.10223913192749023
  - -0.10586833953857422
  - -0.10200214385986328
  - -0.10552644729614258
  - -0.1059427261352539
  - -0.10516881942749023
  - -0.5621783137321472
  - -0.11307358741760254
  - -0.10567092895507812
  - -0.11440038681030273
  - -0.1151423454284668
  - -0.09781265258789062
  - -0.10372114181518555
  - -0.10461664199829102
  - -0.24109412729740143
  - -3.431788444519043
  - -0.10477542877197266
  - -0.07947158813476562
  - -0.09825801849365234
  - -0.10276031494140625
  - -0.10504579544067383
  - -0.10678958892822266
  - -0.11605072021484375
  - -0.09519651532173157
  - -0.11098599433898926
  - -0.10622429847717285
  - -0.10495901107788086
  - -0.10260963439941406
  - -0.10759258270263672
  - -0.10517263412475586
  - -0.0978856086730957
  - -0.10509252548217773
  - -0.11267900466918945
  - -0.10481786727905273
  - -0.10540390014648438
  - -0.0931396484375
  - -0.10529422760009766
  - -0.1051478385925293
  - -0.10499453544616699
- - -0.10436487197875977
  - -0.10799360275268555
  - -0.11087608337402344
  - -0.10426020622253418
  - -0.12859153747558594
  - -0.10265016555786133
  - -0.10459327697753906
  - -0.10146617889404297
  - -0.10438299179077148
  - -0.10466337203979492
  - -0.10492992401123047
  - -0.08768671751022339
  - -0.11299967765808105
  - -0.1055607795715332
  - -0.10223913192749023
  - -0.10586833953857422
  - -0.10200214385986328
  - -0.10552644729614258
  - -0.1059427261352539
  - -0.10516881942749023
  - -0.5621783137321472
  - -3.4512219429016113
  - -0.10525655746459961
  - -0.11454629898071289
  - -0.11478662490844727
  - -0.09771728515625
  - -0.1036825180053711
  - -0.10467529296875
  - -0.23960459232330322
  - -0.11317658424377441
  - -0.10556197166442871
  - -0.06781435012817383
  - -0.10068607330322266
  - -0.10271835327148438
  - -0.10494422912597656
  - -0.10687637329101562
  - -0.1161203384399414
  - -0.09562183171510696
  - -0.11093258857727051
  - -0.10621428489685059
  - -0.10491704940795898
  - -0.10271787643432617
  - -0.10756802558898926
  - -0.10516595840454102
  - -0.09786844253540039
  - -0.10510063171386719
  - -0.11242389678955078
  - -0.10483789443969727
  - -0.1054072380065918
  - -0.09254147857427597
  - -0.1053152084350586
  - -0.1051645278930664
  - -0.10501449555158615
- - -0.10436487197875977
  - -0.10799360275268555
  - -0.11087608337402344
  - -0.10426020622253418
  - -0.12859153747558594
  - -0.10265016555786133
  - -0.10459327697753906
  - -0.10146617889404297
  - -0.10438299179077148
  - -0.10466337203979492
  - -0.10492992401123047
  - -0.08768671751022339
  - -0.11299967765808105
  - -0.1055607795715332
  - -0.10223913192749023
  - -0.10586833953857422
  - -0.10200214385986328
  - -0.10552644729614258
  - -0.1059427261352539
  - -0.10516881942749023
  - -0.5621783137321472
  - -0.11307358741760254
  - -0.10567092895507812
  - -0.11440038681030273
  - -0.1151423454284668
  - -0.09781265258789062
  - -0.10372114181518555
  - -0.10461664199829102
  - -0.24109412729740143
  - -0.11310601234436035
  - -0.10558176040649414
  - -0.06816387176513672
  - -0.1000518798828125
  - -0.10270071029663086
  - -0.1048884391784668
  - -0.10686826705932617
  - -0.11613082885742188
  - -0.09540589153766632
  - -3.47121524810791
  - -0.10625004768371582
  - -0.10412931442260742
  - -0.10257482528686523
  - -0.10755443572998047
  - -0.10518169403076172
  - -0.0978841781616211
  - -0.10482597351074219
  - -0.11277627944946289
  - -0.10479545593261719
  - -0.10535860061645508
  - -0.09369849413633347
  - -0.10527515411376953
  - -0.1051340103149414
  - -0.10500708967447281
- - -0.10436487197875977
  - -0.10799360275268555
  - -0.11087608337402344
  - -0.10426020622253418
  - -0.12859153747558594
  - -0.10265016555786133
  - -0.10459327697753906
  - -0.10146617889404297
  - -0.10438299179077148
  - -0.10466337203979492
  - -0.10492992401123047
  - -0.08768671751022339
  - -0.11299967765808105
  - -0.1055607795715332
  - -0.10223913192749023
  - -0.10586833953857422
  - -0.10200214385986328
  - -0.10552644729614258
  - -0.1059427261352539
  - -0.10516881942749023
  - -0.5621783137321472
  - -0.11307358741760254
  - -0.10567092895507812
  - -0.11440038681030273
  - -0.1151423454284668
  - -0.09781265258789062
  - -0.10372114181518555
  - -0.10461664199829102
  - -0.24109412729740143
  - -0.11310601234436035
  - -0.10558176040649414
  - -0.06816387176513672
  - -0.1000518798828125
  - -0.10270071029663086
  - -0.1048884391784668
  - -0.10686826705932617
  - -0.11613082885742188
  - -0.09540589153766632
  - -0.11097478866577148
  - -0.10622763633728027
  - -0.10487794876098633
  - -0.1026144027709961
  - -3.547490358352661
  - -0.10515570640563965
  - -0.09865188598632812
  - -0.10576534271240234
  - -0.11302518844604492
  - -0.10482025146484375
  - -0.10537195205688477
  - -0.09306546300649643
  - -0.1052546501159668
  - -0.1051177978515625
  - -0.10475495457649231
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Id'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Id'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryId'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Id'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Id'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'True'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'True'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'True'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryName'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'True'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countries'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'car_makers'
