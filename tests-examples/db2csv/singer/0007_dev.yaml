db: tests-examples/db2csv/singer/tables/singer.sqlite
inputs:
 - tests-examples/db2csv/singer/tables/singer.csv
output: tests-examples/db2csv/singer/tables/0007_dev.csv
raw_question: List the name of singers whose citizenship is not "France". 
question_index: 1006 
constants:
 - France
columns:
 - citizenship
filters:
 - '!='
comment: |-
  SELECT Name
  FROM singer
  WHERE Citizenship != "France"

sql: |-
  SELECT Name
  FROM singer
  WHERE Citizenship != "France"
smbop_beam_join_columns:
- []
- []
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_groupby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_tables:
- - tests-examples/db2csv/singer/tables/singer.csv
- - tests-examples/db2csv/singer/tables/singer.csv
- - tests-examples/db2csv/singer/tables/singer.csv
- - tests-examples/db2csv/singer/tables/singer.csv
- - tests-examples/db2csv/singer/tables/singer.csv
- - tests-examples/db2csv/singer/tables/singer.csv
- - tests-examples/db2csv/singer/tables/singer.csv
- - tests-examples/db2csv/singer/tables/singer.csv
- - tests-examples/db2csv/singer/tables/singer.csv
- - tests-examples/db2csv/singer/tables/singer.csv
smbop_beam_constants:
- - France
- - France
- - France
- - France
- - France
- - France
- - France
- - France
- - France
- - France
smbop_beam_functions:
- []
- - count
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_columns:
- - citizenship
- - citizenship
- - citizenship
- - citizenship
- - citizenship
- - citizenship
- - citizenship
- - citizenship
- - citizenship
- - citizenship
smbop_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_filters:
- - '!='
- - '!='
- - '!='
- - '='
- - '>='
  - '>'
- - 'like'
- - '!='
- - '>'
- - '<'
- - '!='
smbop_beam_inferred_code:
  - SELECT singer.name FROM singer WHERE singer.citizenship != 'France'
  - SELECT COUNT( DISTINCT singer.citizenship ) FROM singer WHERE singer.citizenship != 'France'
  - SELECT DISTINCT singer.citizenship FROM singer WHERE singer.citizenship != 'France'
  - SELECT singer.name FROM singer WHERE singer.citizenship = 'France'
  - SELECT singer.name FROM singer WHERE singer.citizenship >= 'France'
  - SELECT singer.name FROM singer WHERE singer.citizenship LIKE '%France%'
  - SELECT singer.name FROM singer WHERE singer.citizenship != 'France' ORDER BY singer.name DESC
  - SELECT singer.name FROM singer WHERE singer.citizenship > 'France'
  - SELECT singer.name FROM singer WHERE singer.citizenship<'France'
  - SELECT singer.name FROM singer WHERE singer.citizenship != 'France' ORDER BY singer.name ASC
smbop_beam_inferred_code_w_terminals:
  - SELECT singer.name FROM singer WHERE singer.citizenship != 'France'
  - SELECT COUNT( DISTINCT singer.citizenship ) FROM singer WHERE singer.citizenship != 'France'
  - SELECT DISTINCT singer.citizenship FROM singer WHERE singer.citizenship != 'France'
  - SELECT singer.name FROM singer WHERE singer.citizenship = 'France'
  - SELECT singer.name FROM singer WHERE singer.citizenship >= 'France'
  - SELECT singer.name FROM singer WHERE singer.citizenship LIKE '%France%'
  - SELECT singer.name FROM singer WHERE singer.citizenship != 'France' ORDER BY singer.name DESC
  - SELECT singer.name FROM singer WHERE singer.citizenship > 'France'
  - SELECT singer.name FROM singer WHERE singer.citizenship<'France'
  - SELECT singer.name FROM singer WHERE singer.citizenship != 'France' ORDER BY singer.name ASC
ratsql_beam_join_columns:
- []
- - singer_id
- []
- []
- []
- - singer_id
- []
- []
- - singer_id
ratsql_beam_groupby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_tables:
- - tests-examples/db2csv/singer/tables/singer.csv
- - tests-examples/db2csv/singer/tables/singer.csv
  - tests-examples/db2csv/singer/tables/song.csv
- - tests-examples/db2csv/singer/tables/singer.csv
- - tests-examples/db2csv/singer/tables/singer.csv
- - tests-examples/db2csv/singer/tables/singer.csv
- - tests-examples/db2csv/singer/tables/singer.csv
  - tests-examples/db2csv/singer/tables/song.csv
- - tests-examples/db2csv/singer/tables/singer.csv
- - tests-examples/db2csv/singer/tables/singer.csv
- - tests-examples/db2csv/singer/tables/singer.csv
  - tests-examples/db2csv/singer/tables/song.csv
ratsql_beam_constants:
- - France
- - France
- - France
- - France
- - France
- - France
- - France
- - France
- - France
ratsql_beam_functions:
- []
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_columns:
- - citizenship
- - citizenship
- - citizenship
- - citizenship
- - citizenship
- - citizenship
- - citizenship
- - citizenship
- - citizenship
ratsql_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_filters:
- - '!='
- - '!='
- - '!='
- - '!='
- - '!='
- - '!='
- - '!='
- - '!='
- - '!='
ratsql_beam_inferred_code:
  - SELECT singer.Name FROM singer WHERE singer.Citizenship != 'terminal'
  - SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Citizenship != 'terminal'
  - SELECT singer.Name FROM singer WHERE DISTINCT singer.Citizenship != 'terminal'
  - SELECT DISTINCT singer.Name FROM singer WHERE singer.Citizenship != 'terminal'
  - SELECT singer.Name FROM singer WHERE singer.Citizenship != 'terminal' LIMIT 1
  - SELECT singer.Singer_ID FROM singer WHERE singer.Citizenship != 'terminal'
  - SELECT song.Singer_ID FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Citizenship != 'terminal'
  - SELECT * FROM singer WHERE singer.Citizenship != 'terminal'
  - SELECT singer.Birth_Year FROM singer WHERE singer.Citizenship != 'terminal'
  - SELECT song.Song_ID FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Citizenship != 'terminal'
ratsql_beam_inferred_code_w_terminals:
  - SELECT singer.Name FROM singer WHERE singer.Citizenship != 'France'
  - SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Citizenship != 'France'
  - SELECT singer.Name FROM singer WHERE DISTINCT singer.Citizenship != 'France'
  - SELECT DISTINCT singer.Name FROM singer WHERE singer.Citizenship != 'France'
  - SELECT singer.Name FROM singer WHERE singer.Citizenship != 'France' LIMIT 1
  - SELECT singer.Singer_ID FROM singer WHERE singer.Citizenship != 'France'
  - SELECT song.Singer_ID FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Citizenship != 'France'
  - SELECT * FROM singer WHERE singer.Citizenship != 'France'
  - SELECT singer.Birth_Year FROM singer WHERE singer.Citizenship != 'France'
  - SELECT song.Song_ID FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Citizenship != 'France'
ratsql_beam_score_history:
- - -0.10534954071044922
  - -0.105377197265625
  - -0.10898327827453613
  - -0.10405635833740234
  - -0.1029353141784668
  - -0.10234212875366211
  - -0.10712528228759766
  - -0.10154199600219727
  - -0.1045236587524414
  - -0.1053934097290039
  - -0.10465288162231445
  - -0.07785794883966446
  - -0.10949349403381348
  - -0.10532546043395996
  - -0.08392047882080078
  - -0.04817008972167969
  - -0.0863804817199707
  - -0.10136079788208008
  - -0.1049199104309082
  - -0.10455799102783203
  - -0.10442113876342773
  - -0.07649627327919006
  - -0.11105990409851074
  - -0.10549640655517578
  - -0.10569524765014648
  - -0.10141658782958984
  - -0.10295486450195312
  - -0.10837817192077637
  - -0.10484600067138672
  - -0.09679317474365234
  - -0.1065669059753418
  - -0.10742330551147461
  - -0.10699129104614258
  - -0.10350418090820312
  - -0.08979448676109314
- - -0.10534954071044922
  - -0.105377197265625
  - -0.10898327827453613
  - -0.10405635833740234
  - -0.1029353141784668
  - -0.10234212875366211
  - -0.10712528228759766
  - -0.10154199600219727
  - -0.1045236587524414
  - -0.1053934097290039
  - -0.10465288162231445
  - -0.07785794883966446
  - -0.10949349403381348
  - -0.10532546043395996
  - -0.08392047882080078
  - -0.04817008972167969
  - -0.0863804817199707
  - -0.10136079788208008
  - -0.1049199104309082
  - -0.10455799102783203
  - -0.10442113876342773
  - -0.07649627327919006
  - -0.11105990409851074
  - -0.10549640655517578
  - -0.10569524765014648
  - -0.10141658782958984
  - -0.10295486450195312
  - -0.10837817192077637
  - -0.10484600067138672
  - -0.09679317474365234
  - -0.1065669059753418
  - -0.10742330551147461
  - -0.10699129104614258
  - -0.10350418090820312
  - -2.4547932147979736
- - -0.10534954071044922
  - -0.105377197265625
  - -0.10898327827453613
  - -0.10405635833740234
  - -0.1029353141784668
  - -0.10234212875366211
  - -0.10712528228759766
  - -0.10154199600219727
  - -0.1045236587524414
  - -0.1053934097290039
  - -0.10465288162231445
  - -0.07785794883966446
  - -0.10949349403381348
  - -0.10532546043395996
  - -0.08392047882080078
  - -0.04817008972167969
  - -0.0863804817199707
  - -0.10136079788208008
  - -0.1049199104309082
  - -0.10455799102783203
  - -0.10442113876342773
  - -0.07649627327919006
  - -3.449622869491577
  - -0.10562467575073242
  - -0.1038670539855957
  - -0.10179615020751953
  - -0.10310602188110352
  - -0.10828542709350586
  - -0.10486102104187012
  - -0.09705305099487305
  - -0.10614538192749023
  - -0.10637426376342773
  - -0.10754632949829102
  - -0.10345935821533203
  - -0.0858868807554245
- - -0.10534954071044922
  - -0.105377197265625
  - -3.489762306213379
  - -0.10432839393615723
  - -0.10120010375976562
  - -0.10224676132202148
  - -0.1059427261352539
  - -0.1014103889465332
  - -0.10446929931640625
  - -0.10538291931152344
  - -0.10468006134033203
  - -0.07781890779733658
  - -0.10945534706115723
  - -0.10533690452575684
  - -0.08504962921142578
  - -0.049599647521972656
  - -0.08571004867553711
  - -0.10131597518920898
  - -0.10497522354125977
  - -0.10453939437866211
  - -0.10442733764648438
  - -0.07633194327354431
  - -0.11105680465698242
  - -0.10549736022949219
  - -0.10565328598022461
  - -0.1014108657836914
  - -0.1029515266418457
  - -0.10837888717651367
  - -0.10484719276428223
  - -0.09680461883544922
  - -0.10667657852172852
  - -0.10697317123413086
  - -0.1069631576538086
  - -0.10348367691040039
  - -0.08916454017162323
- - -0.10534954071044922
  - -0.105377197265625
  - -0.10898327827453613
  - -0.10405635833740234
  - -0.1029353141784668
  - -0.10234212875366211
  - -0.10712528228759766
  - -0.10154199600219727
  - -0.1045236587524414
  - -0.1053934097290039
  - -0.10465288162231445
  - -0.07785794883966446
  - -0.10949349403381348
  - -0.10532546043395996
  - -0.08392047882080078
  - -0.04817008972167969
  - -0.0863804817199707
  - -0.10136079788208008
  - -0.1049199104309082
  - -0.10455799102783203
  - -0.10442113876342773
  - -0.07649627327919006
  - -0.11105990409851074
  - -0.10549640655517578
  - -0.10569524765014648
  - -0.10141658782958984
  - -0.10295486450195312
  - -3.543736219406128
  - -0.1043550968170166
  - -0.0972285270690918
  - -0.10449361801147461
  - -0.10593223571777344
  - -0.10678386688232422
  - -0.10346174240112305
  - -0.08747145533561707
- - -0.10534954071044922
  - -0.105377197265625
  - -0.10898327827453613
  - -0.10405635833740234
  - -0.1029353141784668
  - -0.10234212875366211
  - -0.10712528228759766
  - -0.10154199600219727
  - -0.1045236587524414
  - -0.1053934097290039
  - -0.10465288162231445
  - -4.627374649047852
  - -0.11119818687438965
  - -0.10485720634460449
  - -0.08470916748046875
  - -0.055298805236816406
  - -0.08176040649414062
  - -0.10148334503173828
  - -0.1045379638671875
  - -0.10426139831542969
  - -0.10442876815795898
  - -0.07508187741041183
  - -0.11102056503295898
  - -0.10550475120544434
  - -0.10536336898803711
  - -0.10190296173095703
  - -0.10266256332397461
  - -0.10847878456115723
  - -0.10486483573913574
  - -0.0966329574584961
  - -0.10633468627929688
  - -0.10950803756713867
  - -0.1075143814086914
  - -0.10350799560546875
  - -0.09072858840227127
- - -0.10534954071044922
  - -0.105377197265625
  - -0.10898327827453613
  - -0.10405635833740234
  - -0.1029353141784668
  - -0.10234212875366211
  - -0.10712528228759766
  - -0.10154199600219727
  - -0.1045236587524414
  - -0.1053934097290039
  - -0.10465288162231445
  - -4.715517520904541
  - -0.10959649085998535
  - -0.10494446754455566
  - -0.08229923248291016
  - -0.055994510650634766
  - -0.08512449264526367
  - -0.10140466690063477
  - -0.10451555252075195
  - -0.10434961318969727
  - -0.10433149337768555
  - -0.07627495378255844
  - -0.11104536056518555
  - -0.10550045967102051
  - -0.10515594482421875
  - -0.10146617889404297
  - -0.10295820236206055
  - -0.1083211898803711
  - -0.10484743118286133
  - -0.09758520126342773
  - -0.10459375381469727
  - -0.10648536682128906
  - -0.10589933395385742
  - -0.10356807708740234
  - -0.08176645636558533
- - -0.10534954071044922
  - -0.105377197265625
  - -0.10898327827453613
  - -0.10405635833740234
  - -0.1029353141784668
  - -0.10234212875366211
  - -0.10712528228759766
  - -0.10154199600219727
  - -0.1045236587524414
  - -0.1053934097290039
  - -0.10465288162231445
  - -4.863138198852539
  - -0.11094832420349121
  - -0.10488724708557129
  - -0.0858607292175293
  - -0.048325538635253906
  - -0.07992029190063477
  - -0.10143184661865234
  - -0.10475635528564453
  - -0.10451269149780273
  - -0.10447025299072266
  - -0.07306075096130371
  - -0.1110830307006836
  - -0.10550260543823242
  - -0.10468912124633789
  - -0.10153436660766602
  - -0.10293054580688477
  - -0.1083824634552002
  - -0.10484981536865234
  - -0.09678220748901367
  - -0.10669469833374023
  - -0.1067652702331543
  - -0.10677385330200195
  - -0.10348367691040039
  - -0.0895833820104599
- - -0.10534954071044922
  - -0.105377197265625
  - -0.10898327827453613
  - -0.10405635833740234
  - -0.1029353141784668
  - -0.10234212875366211
  - -0.10712528228759766
  - -0.10154199600219727
  - -0.1045236587524414
  - -0.1053934097290039
  - -0.10465288162231445
  - -4.879711627960205
  - -0.11089468002319336
  - -0.10513663291931152
  - -0.08367347717285156
  - -0.04636192321777344
  - -0.08355236053466797
  - -0.10147380828857422
  - -0.10465431213378906
  - -0.10441255569458008
  - -0.10453033447265625
  - -0.0744648352265358
  - -0.11097240447998047
  - -0.1055002212524414
  - -0.10511159896850586
  - -0.10141324996948242
  - -0.1029210090637207
  - -0.10839390754699707
  - -0.10485649108886719
  - -0.09663534164428711
  - -0.10616207122802734
  - -0.10887765884399414
  - -0.10717058181762695
  - -0.1034994125366211
  - -0.09335292875766754
- - -0.10534954071044922
  - -0.105377197265625
  - -0.10898327827453613
  - -0.10405635833740234
  - -0.1029353141784668
  - -0.10234212875366211
  - -0.10712528228759766
  - -0.10154199600219727
  - -0.1045236587524414
  - -0.1053934097290039
  - -0.10465288162231445
  - -4.903696537017822
  - -0.10862994194030762
  - -0.10494852066040039
  - -0.08355140686035156
  - -0.05461406707763672
  - -0.08431577682495117
  - -0.10128545761108398
  - -0.10460519790649414
  - -0.1044464111328125
  - -0.1043696403503418
  - -0.07722606509923935
  - -0.11104822158813477
  - -0.10550284385681152
  - -0.10475969314575195
  - -0.10156679153442383
  - -0.10288333892822266
  - -0.1082911491394043
  - -0.10484814643859863
  - -0.09780502319335938
  - -0.10447025299072266
  - -0.10792922973632812
  - -0.10563802719116211
  - -0.1035909652709961
  - -0.08217951655387878
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Ne')
  - ('Ne', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Citizenship'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Ne')
  - ('Ne', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Citizenship'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'song'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Ne')
  - ('Ne', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Citizenship'
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'True'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Ne')
  - ('Ne', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Citizenship'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Ne')
  - ('Ne', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Citizenship'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'True'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Singer_ID'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Ne')
  - ('Ne', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Citizenship'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Singer_ID'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Ne')
  - ('Ne', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Citizenship'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Ne')
  - ('Ne', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Citizenship'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Birth_Year'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Ne')
  - ('Ne', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Citizenship'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Song_ID'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Ne')
  - ('Ne', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Citizenship'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
