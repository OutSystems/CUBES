db: tests-examples/db2csv/world_1/tables/world_1.sqlite
inputs:
 - tests-examples/db2csv/world_1/tables/country.csv
output: tests-examples/db2csv/world_1/tables/0108_dev.csv
raw_question: Give the names of countries that are in Europe and have a population equal to 80000. 
question_index: 809 
has_limit: False 
has_order_by: False 
order_by_direction: []
constants:
 - 80000
 - Europe
join_columns: []
groupby_columns: []
functions: []
columns:
 - population
 - continent
filters:
 - '='
ieu: []
comment: |-
  SELECT Name
  FROM country
  WHERE continent = "Europe"
    AND Population = "80000"

sql: |-
  SELECT Name
  FROM country
  WHERE continent = "Europe"
    AND Population = "80000"
smbop_beam_join_columns:
- - 80000
  - >
- []
- - 80000
  - region
  - 'europe'
  - >
- []
- - 80000
  - >
- - 80000
  - >
- - 80000
  - >
- - 80000
  - >
- []
- []
smbop_beam_groupby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_tables:
- - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/city.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
smbop_beam_constants:
- - 80000
  - Europe
- - 80000
  - Europe
- - 80000
  - Europe
- - 80000
  - Europe
- - 80000
  - Europe
- - 80000
  - Europe
- - 80000
  - Europe
- - 80000
  - Europe
- - 80000
  - Europe
- - 80000
  - Europe
smbop_beam_functions:
- []
- []
- []
- []
- []
- - count
- []
- []
- []
- []
smbop_beam_columns:
- - population
  - continent
- - population
  - continent
- - population
  - region
- - population
  - region
- - population
  - region
- - population
  - 0000
  - continent
- - population
  - region
  - continent
- - population
  - continent
- - population
  - region
- - population
  - region
smbop_beam_ieu:
- []
- []
- []
- []
- []
- []
- - intersect
- []
- []
- []
smbop_beam_filters:
- - '='
  - '>'
  - '>='
- - '='
- - '='
  - '>'
  - '>='
- - '='
- - '='
  - '>'
  - '>='
- - '='
  - '>'
  - '>='
- - '='
  - '>'
  - '>='
- - '='
  - '>'
  - '>='
- - '='
- - '='
smbop_beam_inferred_code:
  - SELECT country.name FROM country WHERE country.continent = 'Europe' AND country.population >= 80000
  - SELECT country.name FROM country WHERE country.continent = 'Europe' AND country.population = 80000
  - SELECT country.name FROM country WHERE country.population >= 80000 AND country.region = 'Europe'
  - SELECT country.name FROM country WHERE country.region = 'Europe' AND country.population = 80000
  - SELECT country.name FROM country WHERE country.region = 'Europe' AND country.population >= 80000
  - SELECT COUNT( DISTINCT 0000 ) FROM country WHERE country.continent = 'Europe' AND country.population >= 80000
  - SELECT country.name FROM country, countrylanguage WHERE country.region = 'Europe' AND country.population = 80000 INTERSECT SELECT country.name FROM country WHERE country.continent = 'Europe' AND country.population >= 80000
  - SELECT country.localname FROM country WHERE country.continent = 'Europe' AND country.population >= 80000
  - SELECT country.name FROM country, city WHERE country.region = 'Europe' AND country.population = 80000
  - SELECT country.name FROM country, countrylanguage WHERE country.region = 'Europe' AND country.population = 80000
smbop_beam_inferred_code_w_terminals:
  - SELECT country.name FROM country WHERE country.continent = 'Europe' AND country.population >= 80000
  - SELECT country.name FROM country WHERE country.continent = 'Europe' AND country.population = 80000
  - SELECT country.name FROM country WHERE country.population >= 80000 AND country.region = 'Europe'
  - SELECT country.name FROM country WHERE country.region = 'Europe' AND country.population = 80000
  - SELECT country.name FROM country WHERE country.region = 'Europe' AND country.population >= 80000
  - SELECT COUNT( DISTINCT 0000 ) FROM country WHERE country.continent = 'Europe' AND country.population >= 80000
  - SELECT country.name FROM country, countrylanguage WHERE country.region = 'Europe' AND country.population = 80000 INTERSECT SELECT country.name FROM country WHERE country.continent = 'Europe' AND country.population >= 80000
  - SELECT country.localname FROM country WHERE country.continent = 'Europe' AND country.population >= 80000
  - SELECT country.name FROM country, city WHERE country.region = 'Europe' AND country.population = 80000
  - SELECT country.name FROM country, countrylanguage WHERE country.region = 'Europe' AND country.population = 80000
smbop_beam_has_limit:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_join_columns:
- []
- []
- []
- []
- []
- - countrycode
  - code
- - countrycode
  - code
ratsql_beam_groupby_columns:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_tables:
- - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/city.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
ratsql_beam_constants:
- - 80000
  - Europe
- - 80000
  - Europe
- - 80000
  - Europe
- - 80000
  - Europe
- - 80000
  - Europe
- - 80000
  - Europe
- - 80000
  - Europe
  - '1'
- - 80000
  - Europe
- - 80000
  - Europe
ratsql_beam_functions:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_columns:
- - population
  - continent
- - population
  - continent
- - population
  - continent
- - population
  - continent
- - population
  - continent
- - population
  - continent
- - population
  - continent
ratsql_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_filters:
- - '='
  - '<'
- - '='
  - '>'
- - '='
  - '<'
- - '='
- - '='
  - '<'
- - '='
  - '<'
- - '='
  - '<'
ratsql_beam_inferred_code:
  - SELECT country.Name FROM country WHERE country.Continent = 'terminal' AND country.Population < 'terminal'
  - SELECT country.Name FROM country WHERE country.Continent = 'terminal' AND country.Population > 'terminal'
  - SELECT DISTINCT country.Name FROM country WHERE country.Continent = 'terminal' AND country.Population < 'terminal'
  - SELECT country.Name FROM country WHERE country.Continent = 'terminal' AND country.Population = 'terminal'
  - SELECT country.Name FROM country WHERE DISTINCT country.Continent = 'terminal' AND country.Population < 'terminal'
  - SELECT country.Name FROM country WHERE country.Continent = 'terminal' AND DISTINCT country.Population < 'terminal'
  - SELECT country.Name FROM country WHERE country.Continent = 'terminal' AND country.Population < 'terminal' LIMIT 1
  - SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'terminal' AND country.Population < 'terminal'
  - SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'terminal' AND country.Population < 'terminal'
ratsql_beam_inferred_code_w_terminals:
  - SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population < 80000
  - SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population > 80000
  - SELECT DISTINCT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population < 80000
  - SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000
  - SELECT country.Name FROM country WHERE DISTINCT country.Continent = 'Europe' AND country.Population < 80000
  - SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND DISTINCT country.Population < 80000
  - SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population < 80000 LIMIT 1
  - SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND country.Population < 80000
  - SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND country.Population < 80000
ratsql_beam_has_limit:
  - False
  - False
  - False
  - False
  - True
  - False
  - False
ratsql_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
ratsql_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_score_history:
- - -0.10327386856079102
  - -0.10615921020507812
  - -0.11882209777832031
  - -0.10461282730102539
  - -0.10051774978637695
  - -0.10235977172851562
  - -0.10455989837646484
  - -0.10165023803710938
  - -0.10488557815551758
  - -0.10535907745361328
  - -0.10675859451293945
  - -0.0829383060336113
  - -0.11228752136230469
  - -0.10567259788513184
  - -0.09238529205322266
  - -0.09540891647338867
  - -0.09662485122680664
  - -0.09999275207519531
  - -0.10007047653198242
  - -0.10103750228881836
  - -0.10488414764404297
  - -0.10423803329467773
  - -0.10556745529174805
  - -0.07692012935876846
  - -0.11275196075439453
  - -0.1060781478881836
  - -0.10237693786621094
  - -0.45421552658081055
  - -0.0967702865600586
  - -0.10243892669677734
  - -0.1056375503540039
  - -0.10480690002441406
  - -0.10603570938110352
  - -0.06971167027950287
  - -0.10970401763916016
  - -0.10589957237243652
  - -0.10131263732910156
  - -0.10169506072998047
  - -0.1027536392211914
  - -0.10796380043029785
  - -0.10471153259277344
  - -0.09725475311279297
  - -0.10515546798706055
  - -0.112274169921875
  - -0.10509300231933594
  - -0.10389947891235352
  - -0.059911806136369705
- - -0.10327386856079102
  - -0.10615921020507812
  - -0.11882209777832031
  - -0.10461282730102539
  - -0.10051774978637695
  - -0.10235977172851562
  - -0.10455989837646484
  - -0.10165023803710938
  - -0.10488557815551758
  - -0.10535907745361328
  - -0.10675859451293945
  - -0.0829383060336113
  - -0.11228752136230469
  - -0.10567259788513184
  - -0.09238529205322266
  - -0.09540891647338867
  - -0.09662485122680664
  - -0.09999275207519531
  - -0.10007047653198242
  - -0.10103750228881836
  - -0.10488414764404297
  - -0.10423803329467773
  - -0.10556745529174805
  - -0.07692012935876846
  - -0.11275196075439453
  - -0.1060781478881836
  - -0.10237693786621094
  - -2.265061378479004
  - -0.09434127807617188
  - -0.10208272933959961
  - -0.1045079231262207
  - -0.10496282577514648
  - -0.10280799865722656
  - -0.07004782557487488
  - -0.1093137264251709
  - -0.10594367980957031
  - -0.11296701431274414
  - -0.10178756713867188
  - -0.10356807708740234
  - -0.1078794002532959
  - -0.10481667518615723
  - -0.09692525863647461
  - -0.10504913330078125
  - -0.11233901977539062
  - -0.1050267219543457
  - -0.1038661003112793
  - -0.05917791649699211
- - -0.10327386856079102
  - -0.10615921020507812
  - -3.217576026916504
  - -0.10419154167175293
  - -0.09992551803588867
  - -0.10262155532836914
  - -0.10451126098632812
  - -0.1016225814819336
  - -0.10493183135986328
  - -0.10525751113891602
  - -0.10650300979614258
  - -0.07755418866872787
  - -0.11224746704101562
  - -0.10562753677368164
  - -0.0923318862915039
  - -0.09643030166625977
  - -0.09663963317871094
  - -0.09981727600097656
  - -0.10007953643798828
  - -0.10103845596313477
  - -0.10488653182983398
  - -0.10423851013183594
  - -0.10556459426879883
  - -0.0771029070019722
  - -0.11273813247680664
  - -0.10608553886413574
  - -0.10236120223999023
  - -0.4481167793273926
  - -0.0966496467590332
  - -0.10243463516235352
  - -0.10563182830810547
  - -0.10480165481567383
  - -0.10599946975708008
  - -0.06935948878526688
  - -0.1096804141998291
  - -0.10590147972106934
  - -0.1011800765991211
  - -0.10171937942504883
  - -0.10275888442993164
  - -0.10795855522155762
  - -0.10471773147583008
  - -0.0972447395324707
  - -0.10514974594116211
  - -0.1122426986694336
  - -0.10509395599365234
  - -0.10389566421508789
  - -0.05998455733060837
- - -0.10327386856079102
  - -0.10615921020507812
  - -0.11882209777832031
  - -0.10461282730102539
  - -0.10051774978637695
  - -0.10235977172851562
  - -0.10455989837646484
  - -0.10165023803710938
  - -0.10488557815551758
  - -0.10535907745361328
  - -0.10675859451293945
  - -0.0829383060336113
  - -0.11228752136230469
  - -0.10567259788513184
  - -0.09238529205322266
  - -0.09540891647338867
  - -0.09662485122680664
  - -0.09999275207519531
  - -0.10007047653198242
  - -0.10103750228881836
  - -0.10488414764404297
  - -0.10423803329467773
  - -0.10556745529174805
  - -0.07692012935876846
  - -0.11275196075439453
  - -0.1060781478881836
  - -0.10237693786621094
  - -3.38228702545166
  - -0.1049966812133789
  - -0.10257244110107422
  - -0.10454893112182617
  - -0.1046748161315918
  - -0.10456609725952148
  - -0.2842964231967926
  - -0.11055231094360352
  - -0.10576653480529785
  - -0.11742544174194336
  - -0.10106706619262695
  - -0.1026458740234375
  - -0.10811591148376465
  - -0.10476040840148926
  - -0.0974421501159668
  - -0.10498571395874023
  - -0.11155223846435547
  - -0.10512876510620117
  - -0.10372734069824219
  - -0.06243518739938736
- - -0.10327386856079102
  - -0.10615921020507812
  - -0.11882209777832031
  - -0.10461282730102539
  - -0.10051774978637695
  - -0.10235977172851562
  - -0.10455989837646484
  - -0.10165023803710938
  - -0.10488557815551758
  - -0.10535907745361328
  - -0.10675859451293945
  - -0.0829383060336113
  - -0.11228752136230469
  - -0.10567259788513184
  - -0.09238529205322266
  - -0.09540891647338867
  - -0.09662485122680664
  - -0.09999275207519531
  - -0.10007047653198242
  - -0.10103750228881836
  - -0.10488414764404297
  - -0.10423803329467773
  - -0.10556745529174805
  - -0.07692012935876846
  - -3.42826509475708
  - -0.10591530799865723
  - -0.10201692581176758
  - -0.49451351165771484
  - -0.09624338150024414
  - -0.10235738754272461
  - -0.10541343688964844
  - -0.10477495193481445
  - -0.1061091423034668
  - -0.06916283071041107
  - -0.10971474647521973
  - -0.10589790344238281
  - -0.10116958618164062
  - -0.10168981552124023
  - -0.102783203125
  - -0.10796260833740234
  - -0.10471844673156738
  - -0.09724712371826172
  - -0.10515975952148438
  - -0.11224031448364258
  - -0.10509157180786133
  - -0.1038961410522461
  - -0.059923816472291946
- - -0.10327386856079102
  - -0.10615921020507812
  - -0.11882209777832031
  - -0.10461282730102539
  - -0.10051774978637695
  - -0.10235977172851562
  - -0.10455989837646484
  - -0.10165023803710938
  - -0.10488557815551758
  - -0.10535907745361328
  - -0.10675859451293945
  - -0.0829383060336113
  - -0.11228752136230469
  - -0.10567259788513184
  - -0.09238529205322266
  - -0.09540891647338867
  - -0.09662485122680664
  - -0.09999275207519531
  - -0.10007047653198242
  - -0.10103750228881836
  - -0.10488414764404297
  - -0.10423803329467773
  - -0.10556745529174805
  - -0.07692012935876846
  - -0.11275196075439453
  - -0.1060781478881836
  - -0.10237693786621094
  - -0.45421552658081055
  - -0.0967702865600586
  - -0.10243892669677734
  - -0.1056375503540039
  - -0.10480690002441406
  - -0.10603570938110352
  - -0.06971167027950287
  - -3.478977918624878
  - -0.10631561279296875
  - -0.10344266891479492
  - -0.10175752639770508
  - -0.10276937484741211
  - -0.10792994499206543
  - -0.10470438003540039
  - -0.09708261489868164
  - -0.10525131225585938
  - -0.11179161071777344
  - -0.10510444641113281
  - -0.10358095169067383
  - -0.05956346169114113
- - -0.10327386856079102
  - -0.10615921020507812
  - -0.11882209777832031
  - -0.10461282730102539
  - -0.10051774978637695
  - -0.10235977172851562
  - -0.10455989837646484
  - -0.10165023803710938
  - -0.10488557815551758
  - -0.10535907745361328
  - -0.10675859451293945
  - -0.0829383060336113
  - -0.11228752136230469
  - -0.10567259788513184
  - -0.09238529205322266
  - -0.09540891647338867
  - -0.09662485122680664
  - -0.09999275207519531
  - -0.10007047653198242
  - -0.10103750228881836
  - -0.10488414764404297
  - -0.10423803329467773
  - -0.10556745529174805
  - -0.07692012935876846
  - -0.11275196075439453
  - -0.1060781478881836
  - -0.10237693786621094
  - -0.45421552658081055
  - -0.0967702865600586
  - -0.10243892669677734
  - -0.1056375503540039
  - -0.10480690002441406
  - -0.10603570938110352
  - -0.06971167027950287
  - -0.10970401763916016
  - -0.10589957237243652
  - -0.10131263732910156
  - -0.10169506072998047
  - -0.1027536392211914
  - -3.5429434776306152
  - -0.10549592971801758
  - -0.09738540649414062
  - -0.10454607009887695
  - -0.11141395568847656
  - -0.10494327545166016
  - -0.10391664505004883
  - -0.057421885430812836
- - -0.10327386856079102
  - -0.10615921020507812
  - -0.11882209777832031
  - -0.10461282730102539
  - -0.10051774978637695
  - -0.10235977172851562
  - -0.10455989837646484
  - -0.10165023803710938
  - -0.10488557815551758
  - -0.10535907745361328
  - -0.10675859451293945
  - -0.0829383060336113
  - -0.11228752136230469
  - -0.10567259788513184
  - -0.09238529205322266
  - -0.09540891647338867
  - -0.09662485122680664
  - -0.09999275207519531
  - -0.10007047653198242
  - -0.10103750228881836
  - -0.10488414764404297
  - -0.10423803329467773
  - -0.10556745529174805
  - -0.07692012935876846
  - -0.11275196075439453
  - -0.1060781478881836
  - -0.10237693786621094
  - -0.45421552658081055
  - -0.0967702865600586
  - -0.10243892669677734
  - -0.1056375503540039
  - -0.10480690002441406
  - -0.10603570938110352
  - -0.06971167027950287
  - -0.10970401763916016
  - -0.10589957237243652
  - -0.10131263732910156
  - -0.10169506072998047
  - -0.1027536392211914
  - -0.10796380043029785
  - -0.10471153259277344
  - -0.09725475311279297
  - -0.10515546798706055
  - -0.112274169921875
  - -0.10509300231933594
  - -0.10389947891235352
  - -3.9380109310150146
- - -0.10327386856079102
  - -0.10615921020507812
  - -0.11882209777832031
  - -0.10461282730102539
  - -0.10051774978637695
  - -0.10235977172851562
  - -0.10455989837646484
  - -0.10165023803710938
  - -0.10488557815551758
  - -0.10535907745361328
  - -0.10675859451293945
  - -0.0829383060336113
  - -0.11228752136230469
  - -0.10567259788513184
  - -0.09238529205322266
  - -0.09540891647338867
  - -0.09662485122680664
  - -0.09999275207519531
  - -0.10007047653198242
  - -0.10103750228881836
  - -0.10488414764404297
  - -0.10423803329467773
  - -0.10556745529174805
  - -0.07692012935876846
  - -0.11275196075439453
  - -0.1060781478881836
  - -0.10237693786621094
  - -0.45421552658081055
  - -0.0967702865600586
  - -0.10243892669677734
  - -0.1056375503540039
  - -0.10480690002441406
  - -0.10603570938110352
  - -0.06971167027950287
  - -0.10970401763916016
  - -0.10589957237243652
  - -0.10131263732910156
  - -0.10169506072998047
  - -0.1027536392211914
  - -0.10796380043029785
  - -0.10471153259277344
  - -0.09725475311279297
  - -0.10515546798706055
  - -0.112274169921875
  - -0.10509300231933594
  - -0.10389947891235352
  - -3.97019100189209
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'And')
  - ('And', (True, True))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('cond', 'Lt')
  - ('Lt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Population'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'And')
  - ('And', (True, True))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('cond', 'Gt')
  - ('Gt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Population'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'True'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'And')
  - ('And', (True, True))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('cond', 'Lt')
  - ('Lt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Population'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'And')
  - ('And', (True, True))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Population'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'And')
  - ('And', (True, True))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('cond', 'Lt')
  - ('Lt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Population'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'And')
  - ('And', (True, True))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('cond', 'Lt')
  - ('Lt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Population'
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'And')
  - ('And', (True, True))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('cond', 'Lt')
  - ('Lt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Population'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'True'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'And')
  - ('And', (True, True))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('cond', 'Lt')
  - ('Lt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Population'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'city'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'And')
  - ('And', (True, True))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Continent'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('cond', 'Lt')
  - ('Lt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Population'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
