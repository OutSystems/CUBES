db: tests-examples/db2csv/world_1/tables/world_1.sqlite
inputs:
 - tests-examples/db2csv/world_1/tables/country.csv
 - tests-examples/db2csv/world_1/tables/countrylanguage.csv
output: tests-examples/db2csv/world_1/tables/0057_dev.csv
raw_question: Which languages are spoken by only one country in republic governments? 
question_index: 758 
has_limit: False 
has_order_by: False 
order_by_direction: []
constants:
 - 1
 - Republic
join_columns:
 - countrycode
 - code
groupby_columns:
 - language
functions:
 - count
columns:
 - governmentform
filters:
 - '='
ieu: []
comment: |-
  SELECT T2.Language
  FROM country AS T1
  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
  WHERE T1.GovernmentForm = "Republic"
  GROUP BY T2.Language
  HAVING COUNT(*) = 1

sql: |-
  SELECT T2.Language
  FROM country AS T1
  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
  WHERE T1.GovernmentForm = "Republic"
  GROUP BY T2.Language
  HAVING COUNT(*) = 1
smbop_beam_join_columns:
- - countrycode
  - code
- []
- - countrycode
  - code
- []
- - countrycode
  - code
- - countrycode
  - code
- - countrycode
  - code
- - countrycode
  - code
smbop_beam_groupby_columns:
- - language
- - language
- - language
- - language
- - 1
- - 1
- []
- - language
smbop_beam_tables:
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
smbop_beam_constants:
- - 1
  - Republic
- - 1
  - Republic
- - 1
  - Republic
- - 1
  - Republic
- - 1
  - Republic
- - 1
  - Republic
- - 1
  - Republic
- - 1
  - Republic
smbop_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
- []
- []
smbop_beam_columns:
- - governmentform
- - governmentform
- - governmentform
- - governmentform
- - governmentform
- - governmentform
- - governmentform
- - governmentform
smbop_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_filters:
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
smbop_beam_inferred_code:
  - SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'republic' GROUP BY countrylanguage.language HAVING COUNT( * ) = 1
  - SELECT countrylanguage.language FROM countrylanguage, country WHERE country.governmentform = 'republic' GROUP BY countrylanguage.language HAVING COUNT( * ) = 1
  - SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'republic' GROUP BY countrylanguage.language HAVING COUNT( * ) >= 1
  - SELECT countrylanguage.language FROM countrylanguage, country WHERE country.governmentform = 'republic' GROUP BY countrylanguage.language HAVING COUNT( * ) = country.code
  - SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'republic' GROUP BY 1 HAVING COUNT( * ) >= 1
  - SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'republic' GROUP BY 1 HAVING COUNT( * ) = 1
  - SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'republic'
  - SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'republic' GROUP BY countrylanguage.language
smbop_beam_inferred_code_w_terminals:
  - SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'republic' GROUP BY countrylanguage.language HAVING COUNT( * ) = 1
  - SELECT countrylanguage.language FROM countrylanguage, country WHERE country.governmentform = 'republic' GROUP BY countrylanguage.language HAVING COUNT( * ) = 1
  - SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'republic' GROUP BY countrylanguage.language HAVING COUNT( * ) >= 1
  - SELECT countrylanguage.language FROM countrylanguage, country WHERE country.governmentform = 'republic' GROUP BY countrylanguage.language HAVING COUNT( * ) = country.code
  - SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'republic' GROUP BY 1 HAVING COUNT( * ) >= 1
  - SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'republic' GROUP BY 1 HAVING COUNT( * ) = 1
  - SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'republic'
  - SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'republic' GROUP BY countrylanguage.language
smbop_beam_has_limit:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_join_columns:
- - countrycode
  - code
- - countrycode
  - code
- - countrycode
  - code
- - countrycode
  - code
- - countrycode
  - code
- - countrycode
  - code
ratsql_beam_groupby_columns:
- - language
- - language
- - language
- - language
- - language
- - countrycode
ratsql_beam_tables:
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/city.csv
  - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
ratsql_beam_constants:
- - 1
  - Republic
- - 1
  - Republic
- - 1
  - Republic
- - 1
  - Republic
- - 1
  - Republic
- - 1
  - Republic
  - '1'
- - 1
  - Republic
- - 1
  - Republic
- - 1
  - Republic
ratsql_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
ratsql_beam_columns:
- - governmentform
- []
- - governmentform
- - governmentform
- - governmentform
- - governmentform
ratsql_beam_ieu:
- []
- []
- []
- []
- []
- []
ratsql_beam_filters:
- - '='
- []
- - '='
- - '='
- - '='
- - '='
ratsql_beam_inferred_code:
  - SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'terminal' GROUP BY countrylanguage.Language HAVING Count(*) = 'terminal'
  - SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.Language HAVING Count(*) = 'terminal'
  - SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE DISTINCT country.GovernmentForm = 'terminal' GROUP BY countrylanguage.Language HAVING Count(*) = 'terminal'
  - SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'terminal' GROUP BY DISTINCT countrylanguage.Language HAVING Count(*) = 'terminal'
  - SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'terminal' GROUP BY countrylanguage.Language HAVING Count(DISTINCT *) = 'terminal'
  - SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'terminal' GROUP BY countrylanguage.Language HAVING Count(*) = 'terminal' LIMIT 1
  - SELECT DISTINCT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'terminal' GROUP BY countrylanguage.Language HAVING Count(*) = 'terminal'
  - SELECT countrylanguage.Language FROM city JOIN country ON city.CountryCode = country.Code AND city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'terminal' GROUP BY countrylanguage.Language HAVING Count(*) = 'terminal'
  - SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'terminal' GROUP BY countrylanguage.CountryCode HAVING Count(*) = 'terminal'
ratsql_beam_inferred_code_w_terminals:
  - SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING Count(*) = 1
  - SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.Language HAVING Count(*) = 1
  - SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE DISTINCT country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING Count(*) = 1
  - SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'Republic' GROUP BY DISTINCT countrylanguage.Language HAVING Count(*) = 1
  - SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING Count(DISTINCT *) = 1
  - SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING Count(*) = 1 LIMIT 1
  - SELECT DISTINCT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING Count(*) = 1
  - SELECT countrylanguage.Language FROM city JOIN country ON city.CountryCode = country.Code AND city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING Count(*) = 1
  - SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.CountryCode HAVING Count(*) = 1
ratsql_beam_has_limit:
  - False
  - False
  - True
  - False
  - False
  - False
ratsql_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
ratsql_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
ratsql_beam_score_history:
- - -0.10499811172485352
  - -0.10396575927734375
  - -0.1064915657043457
  - -0.1041114330291748
  - -0.10211849212646484
  - -0.10268688201904297
  - -0.10461282730102539
  - -0.1018824577331543
  - -0.10428142547607422
  - -0.10525035858154297
  - -0.10582304000854492
  - -0.11609148234128952
  - -0.11005640029907227
  - -0.10573267936706543
  - -0.09375762939453125
  - -0.0967860221862793
  - -0.1008768081665039
  - -0.10129261016845703
  - -0.10412836074829102
  - -0.1041269302368164
  - -0.1050572395324707
  - -0.10970455408096313
  - -0.11074638366699219
  - -0.10564970970153809
  - -0.10355234146118164
  - -0.10283708572387695
  - -0.09902143478393555
  - -0.10387992858886719
  - -0.10473203659057617
  - -0.1428552269935608
  - -0.11118483543395996
  - -0.1052250862121582
  - -0.0966806411743164
  - -0.10477876663208008
  - -0.09941959381103516
  - -0.10456418991088867
  - -0.10470056533813477
  - -0.10873556137084961
  - -0.1553509384393692
  - -0.11060285568237305
  - -0.10593771934509277
  - -0.11670446395874023
  - -0.0888981819152832
  - -0.10701465606689453
  - -0.1054074764251709
  - -0.09640359878540039
  - -0.10239553451538086
  - -0.11378145217895508
  - -0.10533428192138672
  - -0.10446357727050781
  - -0.08272168785333633
  - -0.10551977157592773
  - -0.10456132888793945
  - -0.10377272218465805
- - -0.10499811172485352
  - -0.10396575927734375
  - -0.1064915657043457
  - -0.1041114330291748
  - -0.10211849212646484
  - -0.10268688201904297
  - -0.10461282730102539
  - -0.1018824577331543
  - -0.10428142547607422
  - -0.10525035858154297
  - -0.10582304000854492
  - -0.11609148234128952
  - -3.701598882675171
  - -0.8489270210266113
  - -0.11757659912109375
  - -0.1010580062866211
  - -0.10492229461669922
  - -0.10541248321533203
  - -0.1714700162410736
  - -0.11042499542236328
  - -0.10532498359680176
  - -0.07070541381835938
  - -0.10453939437866211
  - -0.09965229034423828
  - -0.10441446304321289
  - -0.10416650772094727
  - -0.1087045669555664
  - -0.15483756363391876
  - -0.1105649471282959
  - -0.1059260368347168
  - -0.13521051406860352
  - -0.087677001953125
  - -0.1071171760559082
  - -0.10520744323730469
  - -0.09789085388183594
  - -0.10259628295898438
  - -0.11397504806518555
  - -0.10500860214233398
  - -0.1047511100769043
  - -0.0849483534693718
  - -0.10552692413330078
  - -0.10455751419067383
  - -0.1043672263622284
- - -0.10499811172485352
  - -0.10396575927734375
  - -0.1064915657043457
  - -0.1041114330291748
  - -0.10211849212646484
  - -0.10268688201904297
  - -0.10461282730102539
  - -0.1018824577331543
  - -0.10428142547607422
  - -0.10525035858154297
  - -0.10582304000854492
  - -0.11609148234128952
  - -0.11005640029907227
  - -0.10573267936706543
  - -0.09375762939453125
  - -0.0967860221862793
  - -0.1008768081665039
  - -0.10129261016845703
  - -0.10412836074829102
  - -0.1041269302368164
  - -0.1050572395324707
  - -0.10970455408096313
  - -3.4564647674560547
  - -0.10559844970703125
  - -0.10414314270019531
  - -0.11130952835083008
  - -0.0983128547668457
  - -0.10393810272216797
  - -0.1046910285949707
  - -0.14664249122142792
  - -0.11109089851379395
  - -0.1051950454711914
  - -0.09512615203857422
  - -0.10503387451171875
  - -0.09988689422607422
  - -0.10455751419067383
  - -0.10474491119384766
  - -0.10915756225585938
  - -0.15426446497440338
  - -0.11060094833374023
  - -0.10594439506530762
  - -0.1171417236328125
  - -0.08843088150024414
  - -0.10701370239257812
  - -0.10540437698364258
  - -0.09634971618652344
  - -0.10234975814819336
  - -0.11385822296142578
  - -0.10533666610717773
  - -0.1044769287109375
  - -0.08306261152029037
  - -0.10550212860107422
  - -0.10457324981689453
  - -0.10373017191886902
- - -0.10499811172485352
  - -0.10396575927734375
  - -0.1064915657043457
  - -0.1041114330291748
  - -0.10211849212646484
  - -0.10268688201904297
  - -0.10461282730102539
  - -0.1018824577331543
  - -0.10428142547607422
  - -0.10525035858154297
  - -0.10582304000854492
  - -0.11609148234128952
  - -0.11005640029907227
  - -0.10573267936706543
  - -0.09375762939453125
  - -0.0967860221862793
  - -0.1008768081665039
  - -0.10129261016845703
  - -0.10412836074829102
  - -0.1041269302368164
  - -0.1050572395324707
  - -0.10970455408096313
  - -0.11074638366699219
  - -0.10564970970153809
  - -0.10355234146118164
  - -0.10283708572387695
  - -0.09902143478393555
  - -0.10387992858886719
  - -0.10473203659057617
  - -0.1428552269935608
  - -3.476424217224121
  - -0.1056060791015625
  - -0.11475753784179688
  - -0.10294771194458008
  - -0.0995640754699707
  - -0.1046137809753418
  - -0.10500192642211914
  - -0.10865259170532227
  - -0.14974252879619598
  - -0.11056208610534668
  - -0.10596036911010742
  - -0.1124577522277832
  - -0.08814382553100586
  - -0.10701918601989746
  - -0.10537576675415039
  - -0.09637212753295898
  - -0.1023564338684082
  - -0.11377811431884766
  - -0.10530233383178711
  - -0.10449838638305664
  - -0.08282791823148727
  - -0.10566997528076172
  - -0.10477542877197266
  - -0.10407130420207977
- - -0.10499811172485352
  - -0.10396575927734375
  - -0.1064915657043457
  - -0.1041114330291748
  - -0.10211849212646484
  - -0.10268688201904297
  - -0.10461282730102539
  - -0.1018824577331543
  - -0.10428142547607422
  - -0.10525035858154297
  - -0.10582304000854492
  - -0.11609148234128952
  - -0.11005640029907227
  - -0.10573267936706543
  - -0.09375762939453125
  - -0.0967860221862793
  - -0.1008768081665039
  - -0.10129261016845703
  - -0.10412836074829102
  - -0.1041269302368164
  - -0.1050572395324707
  - -0.10970455408096313
  - -0.11074638366699219
  - -0.10564970970153809
  - -0.10355234146118164
  - -0.10283708572387695
  - -0.09902143478393555
  - -0.10387992858886719
  - -0.10473203659057617
  - -0.1428552269935608
  - -0.11118483543395996
  - -0.1052250862121582
  - -0.0966806411743164
  - -0.10477876663208008
  - -0.09941959381103516
  - -0.10456418991088867
  - -0.10470056533813477
  - -0.10873556137084961
  - -0.1553509384393692
  - -3.4723455905914307
  - -0.10603737831115723
  - -0.12699365615844727
  - -0.09248065948486328
  - -0.10706543922424316
  - -0.10524678230285645
  - -0.09417581558227539
  - -0.10261011123657227
  - -0.11363887786865234
  - -0.10505104064941406
  - -0.10475826263427734
  - -0.08367645740509033
  - -0.10572290420532227
  - -0.10486078262329102
  - -0.10343965142965317
- - -0.10499811172485352
  - -0.10396575927734375
  - -0.1064915657043457
  - -0.1041114330291748
  - -0.10211849212646484
  - -0.10268688201904297
  - -0.10461282730102539
  - -0.1018824577331543
  - -0.10428142547607422
  - -0.10525035858154297
  - -0.10582304000854492
  - -0.11609148234128952
  - -0.11005640029907227
  - -0.10573267936706543
  - -0.09375762939453125
  - -0.0967860221862793
  - -0.1008768081665039
  - -0.10129261016845703
  - -0.10412836074829102
  - -0.1041269302368164
  - -0.1050572395324707
  - -0.10970455408096313
  - -0.11074638366699219
  - -0.10564970970153809
  - -0.10355234146118164
  - -0.10283708572387695
  - -0.09902143478393555
  - -0.10387992858886719
  - -0.10473203659057617
  - -0.1428552269935608
  - -0.11118483543395996
  - -0.1052250862121582
  - -0.0966806411743164
  - -0.10477876663208008
  - -0.09941959381103516
  - -0.10456418991088867
  - -0.10470056533813477
  - -0.10873556137084961
  - -0.1553509384393692
  - -0.11060285568237305
  - -0.10593771934509277
  - -0.11670446395874023
  - -0.0888981819152832
  - -3.5566861629486084
  - -0.10543179512023926
  - -0.09509658813476562
  - -0.1026005744934082
  - -0.11459064483642578
  - -0.1052713394165039
  - -0.10444259643554688
  - -0.08270182460546494
  - -0.10567235946655273
  - -0.10477447509765625
  - -0.10371705889701843
- - -0.10499811172485352
  - -0.10396575927734375
  - -0.1064915657043457
  - -0.1041114330291748
  - -0.10211849212646484
  - -0.10268688201904297
  - -0.10461282730102539
  - -0.1018824577331543
  - -0.10428142547607422
  - -0.10525035858154297
  - -0.10582304000854492
  - -0.11609148234128952
  - -3.49630069732666
  - -0.10689210891723633
  - -0.1296367645263672
  - -0.11577892303466797
  - -0.10111045837402344
  - -0.10147619247436523
  - -0.10418844223022461
  - -0.10416221618652344
  - -0.10503053665161133
  - -0.11522455513477325
  - -0.11064982414245605
  - -0.10563540458679199
  - -0.10341596603393555
  - -0.10407304763793945
  - -0.09953975677490234
  - -0.10384702682495117
  - -0.10478067398071289
  - -0.14240331947803497
  - -0.11120319366455078
  - -0.1052086353302002
  - -0.09526300430297852
  - -0.10509395599365234
  - -0.09935283660888672
  - -0.1045694351196289
  - -0.10474157333374023
  - -0.10947418212890625
  - -0.15430624783039093
  - -0.11061859130859375
  - -0.10592794418334961
  - -0.1183156967163086
  - -0.08847427368164062
  - -0.10701370239257812
  - -0.10541749000549316
  - -0.09719324111938477
  - -0.1025385856628418
  - -0.1135859489440918
  - -0.10539960861206055
  - -0.10444402694702148
  - -0.08255782723426819
  - -0.1055150032043457
  - -0.10453653335571289
  - -0.1041288822889328
- - -0.10499811172485352
  - -0.10396575927734375
  - -0.1064915657043457
  - -0.1041114330291748
  - -0.10211849212646484
  - -0.10268688201904297
  - -0.10461282730102539
  - -0.1018824577331543
  - -0.10428142547607422
  - -0.10525035858154297
  - -0.10582304000854492
  - -0.11609148234128952
  - -0.11005640029907227
  - -0.10573267936706543
  - -0.09375762939453125
  - -0.0967860221862793
  - -0.1008768081665039
  - -0.10129261016845703
  - -0.10412836074829102
  - -0.1041269302368164
  - -0.1050572395324707
  - -0.10970455408096313
  - -0.11074638366699219
  - -0.10564970970153809
  - -0.10355234146118164
  - -0.10283708572387695
  - -0.09902143478393555
  - -0.10387992858886719
  - -0.10473203659057617
  - -0.1428552269935608
  - -0.11118483543395996
  - -0.1052250862121582
  - -0.0966806411743164
  - -0.10477876663208008
  - -0.09941959381103516
  - -0.10456418991088867
  - -0.10470056533813477
  - -0.10873556137084961
  - -0.1553509384393692
  - -0.11060285568237305
  - -0.10593771934509277
  - -0.11670446395874023
  - -0.0888981819152832
  - -0.10701465606689453
  - -0.1054074764251709
  - -0.09640359878540039
  - -0.10239553451538086
  - -0.11378145217895508
  - -0.10533428192138672
  - -0.10446357727050781
  - -0.08272168785333633
  - -0.10551977157592773
  - -0.10456132888793945
  - -3.8234822750091553
- - -0.10499811172485352
  - -0.10396575927734375
  - -0.1064915657043457
  - -0.1041114330291748
  - -0.10211849212646484
  - -0.10268688201904297
  - -0.10461282730102539
  - -0.1018824577331543
  - -0.10428142547607422
  - -0.10525035858154297
  - -0.10582304000854492
  - -0.11609148234128952
  - -0.11005640029907227
  - -0.10573267936706543
  - -0.09375762939453125
  - -0.0967860221862793
  - -0.1008768081665039
  - -0.10129261016845703
  - -0.10412836074829102
  - -0.1041269302368164
  - -0.1050572395324707
  - -0.10970455408096313
  - -0.11074638366699219
  - -0.10564970970153809
  - -0.10355234146118164
  - -0.10283708572387695
  - -0.09902143478393555
  - -0.10387992858886719
  - -0.10473203659057617
  - -4.077625751495361
  - -0.11153268814086914
  - -0.10567140579223633
  - -0.07651662826538086
  - -0.10324430465698242
  - -0.10140705108642578
  - -0.10457324981689453
  - -0.1049356460571289
  - -0.10593605041503906
  - -0.14765149354934692
  - -0.11047196388244629
  - -0.10601258277893066
  - -0.1072072982788086
  - -0.08854913711547852
  - -0.10704445838928223
  - -0.10535597801208496
  - -0.09682798385620117
  - -0.10251855850219727
  - -0.1136922836303711
  - -0.10522985458374023
  - -0.10446500778198242
  - -0.08183708786964417
  - -0.10541057586669922
  - -0.10425853729248047
  - -0.10425509512424469
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'GovernmentForm'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - ('val', 'ValSql')
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'GovernmentForm'
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'GovernmentForm'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'True'
  - '<EOS>'
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'GovernmentForm'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'GovernmentForm'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'True'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'GovernmentForm'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'GovernmentForm'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'city'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'GovernmentForm'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryCode'
  - 'False'
  - '<EOS>'
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
