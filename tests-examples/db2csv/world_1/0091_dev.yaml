db: tests-examples/db2csv/world_1/tables/world_1.sqlite
inputs:
 - tests-examples/db2csv/world_1/tables/countrylanguage.csv
 - tests-examples/db2csv/world_1/tables/country.csv
output: tests-examples/db2csv/world_1/tables/0091_dev.csv
raw_question: Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages. 
question_index: 792 
constants:
 - 2
join_columns:
 - code
 - countrycode
groupby_columns:
 - name
functions:
 - count
columns:
 - language
comment: |-
  SELECT COUNT(T2.Language),
         T1.Name
  FROM country AS T1
  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
  GROUP BY T1.Name
  HAVING COUNT(*) > 2

sql: |-
  SELECT COUNT(T2.Language),
         T1.Name
  FROM country AS T1
  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
  GROUP BY T1.Name
  HAVING COUNT(*) > 2
smbop_beam_join_columns:
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
smbop_beam_groupby_columns:
- - countrycode
- - countrycode
- - name
- - name
- - countrycode
- - name
- - countrycode
smbop_beam_tables:
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
smbop_beam_constants:
- - 3
- - 3
- - 3
- - 3
- - 3
- - 3
- - 3
smbop_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
- - count
smbop_beam_columns:
- []
- []
- []
- []
- - language
- - language
- - language
smbop_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
smbop_beam_filters:
- []
- []
- []
- []
- []
- []
- []
smbop_beam_inferred_code:
  - SELECT country.name , COUNT( * ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY countrylanguage.countrycode HAVING COUNT( * ) >= 3
  - SELECT country.name , COUNT( * ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY countrylanguage.countrycode HAVING COUNT( * ) >= 3
  - SELECT country.name , COUNT( * ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY country.name HAVING COUNT( * ) >= 3
  - SELECT country.name , COUNT( * ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT( * ) >= 3
  - SELECT country.name , COUNT( DISTINCT countrylanguage.language ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY countrylanguage.countrycode HAVING COUNT( * ) >= 3
  - SELECT country.name , COUNT( DISTINCT countrylanguage.language ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY country.name HAVING COUNT( * ) >= 3
  - SELECT country.name , COUNT( DISTINCT countrylanguage.language ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY countrylanguage.countrycode HAVING COUNT( * ) >= 3
smbop_beam_inferred_code_w_terminals:
  - SELECT country.name , COUNT( * ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY countrylanguage.countrycode HAVING COUNT( * ) >= 3
  - SELECT country.name , COUNT( * ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY countrylanguage.countrycode HAVING COUNT( * ) >= 3
  - SELECT country.name , COUNT( * ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY country.name HAVING COUNT( * ) >= 3
  - SELECT country.name , COUNT( * ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT( * ) >= 3
  - SELECT country.name , COUNT( DISTINCT countrylanguage.language ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY countrylanguage.countrycode HAVING COUNT( * ) >= 3
  - SELECT country.name , COUNT( DISTINCT countrylanguage.language ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY country.name HAVING COUNT( * ) >= 3
  - SELECT country.name , COUNT( DISTINCT countrylanguage.language ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY countrylanguage.countrycode HAVING COUNT( * ) >= 3
ratsql_beam_join_columns:
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
ratsql_beam_groupby_columns:
- - countrycode
- - code
- - name
- - countrycode
- - countrycode
- - countrycode
- - countrycode
ratsql_beam_tables:
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
ratsql_beam_constants:
- - 3
- - 3
- - 3
- - 3
- - 3
- - 3
- - 3
ratsql_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
- - count
ratsql_beam_columns:
- []
- []
- []
- - language
- - language
- []
- []
ratsql_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_filters:
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_inferred_code:
  - SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING Count(*) >= 'terminal'
  - SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING Count(*) >= 'terminal'
  - SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING Count(*) >= 'terminal'
  - SELECT country.Name, Count(countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING Count(*) >= 'terminal'
  - SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING Count(countrylanguage.Language) >= 'terminal'
  - SELECT DISTINCT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING Count(*) >= 'terminal'
  - SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY DISTINCT countrylanguage.CountryCode HAVING Count(*) >= 'terminal'
  - SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING Count(DISTINCT *) >= 'terminal'
  - SELECT country.Name, Count(DISTINCT *) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING Count(*) >= 'terminal'
  - SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING Count(*) >= 'terminal' LIMIT 1
ratsql_beam_inferred_code_w_terminals:
  - SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING Count(*) >= 3
  - SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING Count(*) >= 3
  - SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING Count(*) >= 3
  - SELECT country.Name, Count(countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING Count(*) >= 3
  - SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING Count(countrylanguage.Language) >= 3
  - SELECT DISTINCT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING Count(*) >= 3
  - SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY DISTINCT countrylanguage.CountryCode HAVING Count(*) >= 3
  - SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING Count(DISTINCT *) >= 3
  - SELECT country.Name, Count(DISTINCT *) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING Count(*) >= 3
  - SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING Count(*) >= 3 LIMIT 1
ratsql_beam_score_history:
- - -0.10362863540649414
  - -0.10571527481079102
  - -0.10627102851867676
  - -0.10391545295715332
  - -0.12160968780517578
  - -0.10611248016357422
  - -0.10485553741455078
  - -0.10137081146240234
  - -0.10427236557006836
  - -0.10470867156982422
  - -0.10659456253051758
  - -0.08711116760969162
  - -0.1116950511932373
  - -0.10557222366333008
  - -0.10011529922485352
  - -0.10872936248779297
  - -0.10057353973388672
  - -0.10481786727905273
  - -0.10668087005615234
  - -0.10816478729248047
  - -0.17503507435321808
  - -0.11049270629882812
  - -0.10555624961853027
  - -0.11451959609985352
  - -0.11724615097045898
  - -0.10386514663696289
  - -0.10407114028930664
  - -0.10436487197875977
  - -0.5455687046051025
  - -0.11121129989624023
  - -0.10613012313842773
  - -0.07631444931030273
  - -0.09332847595214844
  - -0.1015176773071289
  - -0.10452890396118164
  - -0.10742568969726562
  - -0.1151881217956543
  - -0.12716028094291687
  - -0.1099698543548584
  - -0.10615062713623047
  - -0.10414695739746094
  - -0.1022500991821289
  - -0.1069791316986084
  - -0.10507845878601074
  - -0.09953927993774414
  - -0.10392284393310547
  - -0.1095890998840332
  - -0.1049032211303711
  - -0.10526132583618164
  - -0.058483295142650604
  - -0.10426139831542969
  - -0.10385560989379883
  - -0.04563199356198311
- - -0.10362863540649414
  - -0.10571527481079102
  - -0.10627102851867676
  - -0.10391545295715332
  - -0.12160968780517578
  - -0.10611248016357422
  - -0.10485553741455078
  - -0.10137081146240234
  - -0.10427236557006836
  - -0.10470867156982422
  - -0.10659456253051758
  - -0.08711116760969162
  - -0.1116950511932373
  - -0.10557222366333008
  - -0.10011529922485352
  - -0.10872936248779297
  - -0.10057353973388672
  - -0.10481786727905273
  - -0.10668087005615234
  - -0.10816478729248047
  - -0.17503507435321808
  - -0.11049270629882812
  - -0.10555624961853027
  - -0.11451959609985352
  - -0.11724615097045898
  - -0.10386514663696289
  - -0.10407114028930664
  - -0.10436487197875977
  - -1.53650963306427
  - -0.1099233627319336
  - -0.10605525970458984
  - -0.0825042724609375
  - -0.09548759460449219
  - -0.10164117813110352
  - -0.10454130172729492
  - -0.1075739860534668
  - -0.11557912826538086
  - -0.12098173052072525
  - -0.11007070541381836
  - -0.10615062713623047
  - -0.10420751571655273
  - -0.1022491455078125
  - -0.10698246955871582
  - -0.10508131980895996
  - -0.09945106506347656
  - -0.10394430160522461
  - -0.10959434509277344
  - -0.10489749908447266
  - -0.10526561737060547
  - -0.05842718854546547
  - -0.10426187515258789
  - -0.10385513305664062
  - -0.045638371258974075
- - -0.10362863540649414
  - -0.10571527481079102
  - -0.10627102851867676
  - -0.10391545295715332
  - -0.12160968780517578
  - -0.10611248016357422
  - -0.10485553741455078
  - -0.10137081146240234
  - -0.10427236557006836
  - -0.10470867156982422
  - -0.10659456253051758
  - -0.08711116760969162
  - -0.1116950511932373
  - -0.10557222366333008
  - -0.10011529922485352
  - -0.10872936248779297
  - -0.10057353973388672
  - -0.10481786727905273
  - -0.10668087005615234
  - -0.10816478729248047
  - -0.17503507435321808
  - -0.11049270629882812
  - -0.10555624961853027
  - -0.11451959609985352
  - -0.11724615097045898
  - -0.10386514663696289
  - -0.10407114028930664
  - -0.10436487197875977
  - -2.7213120460510254
  - -0.1106412410736084
  - -0.10598111152648926
  - -0.10521841049194336
  - -0.1039571762084961
  - -0.1016845703125
  - -0.10474538803100586
  - -0.1075434684753418
  - -0.11526155471801758
  - -0.12404850125312805
  - -0.11019635200500488
  - -0.10612154006958008
  - -0.10411977767944336
  - -0.10212182998657227
  - -0.10697603225708008
  - -0.10509371757507324
  - -0.09820556640625
  - -0.10402488708496094
  - -0.11064338684082031
  - -0.10468339920043945
  - -0.10542917251586914
  - -0.05612585321068764
  - -0.10433149337768555
  - -0.10391092300415039
  - -0.04516732320189476
- - -0.10362863540649414
  - -0.10571527481079102
  - -0.10627102851867676
  - -0.10391545295715332
  - -0.12160968780517578
  - -0.10611248016357422
  - -0.10485553741455078
  - -0.10137081146240234
  - -0.10427236557006836
  - -0.10470867156982422
  - -0.10659456253051758
  - -0.08711116760969162
  - -0.1116950511932373
  - -0.10557222366333008
  - -0.10011529922485352
  - -0.10872936248779297
  - -0.10057353973388672
  - -0.10481786727905273
  - -0.10668087005615234
  - -0.10816478729248047
  - -2.6475985050201416
  - -0.11710786819458008
  - -0.10544848442077637
  - -0.10736465454101562
  - -0.11929178237915039
  - -0.10515594482421875
  - -0.10414743423461914
  - -0.10446786880493164
  - -0.5177253484725952
  - -0.11116313934326172
  - -0.10612869262695312
  - -0.0733799934387207
  - -0.09323692321777344
  - -0.10155820846557617
  - -0.10433387756347656
  - -0.1073760986328125
  - -0.11532258987426758
  - -0.12628357112407684
  - -0.11001133918762207
  - -0.10615396499633789
  - -0.10416793823242188
  - -0.10219621658325195
  - -0.10698056221008301
  - -0.10507845878601074
  - -0.09890937805175781
  - -0.10396671295166016
  - -0.10855770111083984
  - -0.10503244400024414
  - -0.1051187515258789
  - -0.05766621604561806
  - -0.10430288314819336
  - -0.10372352600097656
  - -0.0455760732293129
- - -0.10362863540649414
  - -0.10571527481079102
  - -0.10627102851867676
  - -0.10391545295715332
  - -0.12160968780517578
  - -0.10611248016357422
  - -0.10485553741455078
  - -0.10137081146240234
  - -0.10427236557006836
  - -0.10470867156982422
  - -0.10659456253051758
  - -0.08711116760969162
  - -0.1116950511932373
  - -0.10557222366333008
  - -0.10011529922485352
  - -0.10872936248779297
  - -0.10057353973388672
  - -0.10481786727905273
  - -0.10668087005615234
  - -0.10816478729248047
  - -0.17503507435321808
  - -0.11049270629882812
  - -0.10555624961853027
  - -0.11451959609985352
  - -0.11724615097045898
  - -0.10386514663696289
  - -0.10407114028930664
  - -0.10436487197875977
  - -0.5455687046051025
  - -0.11121129989624023
  - -0.10613012313842773
  - -0.07631444931030273
  - -0.09332847595214844
  - -0.1015176773071289
  - -0.10452890396118164
  - -0.10742568969726562
  - -0.1151881217956543
  - -3.188082218170166
  - -0.10813069343566895
  - -0.1054840087890625
  - -0.10370779037475586
  - -0.0970301628112793
  - -0.10711479187011719
  - -0.10509181022644043
  - -0.10032176971435547
  - -0.10392045974731445
  - -0.11030244827270508
  - -0.10486936569213867
  - -0.10522747039794922
  - -0.05867498368024826
  - -0.10426712036132812
  - -0.103851318359375
  - -0.045781295746564865
- - -0.10362863540649414
  - -0.10571527481079102
  - -0.10627102851867676
  - -0.10391545295715332
  - -0.12160968780517578
  - -0.10611248016357422
  - -0.10485553741455078
  - -0.10137081146240234
  - -0.10427236557006836
  - -0.10470867156982422
  - -0.10659456253051758
  - -0.08711116760969162
  - -3.4620165824890137
  - -0.1043248176574707
  - -0.10113668441772461
  - -0.1121206283569336
  - -0.1002187728881836
  - -0.10485172271728516
  - -0.10662555694580078
  - -0.10773611068725586
  - -0.1748168021440506
  - -0.1106574535369873
  - -0.10562705993652344
  - -0.11414527893066406
  - -0.11722803115844727
  - -0.10410118103027344
  - -0.10405826568603516
  - -0.10434198379516602
  - -0.5407438278198242
  - -0.11120724678039551
  - -0.10613131523132324
  - -0.0761866569519043
  - -0.0930795669555664
  - -0.10149955749511719
  - -0.1045079231262207
  - -0.10742378234863281
  - -0.11521577835083008
  - -0.12719492614269257
  - -0.10995697975158691
  - -0.10615134239196777
  - -0.10417604446411133
  - -0.10231447219848633
  - -0.1069798469543457
  - -0.10507631301879883
  - -0.09978246688842773
  - -0.10417413711547852
  - -0.10961341857910156
  - -0.10490846633911133
  - -0.1052408218383789
  - -0.05941946059465408
  - -0.10426950454711914
  - -0.10383319854736328
  - -0.04573403671383858
- - -0.10362863540649414
  - -0.10571527481079102
  - -0.10627102851867676
  - -0.10391545295715332
  - -0.12160968780517578
  - -0.10611248016357422
  - -0.10485553741455078
  - -0.10137081146240234
  - -0.10427236557006836
  - -0.10470867156982422
  - -0.10659456253051758
  - -0.08711116760969162
  - -0.1116950511932373
  - -0.10557222366333008
  - -0.10011529922485352
  - -0.10872936248779297
  - -0.10057353973388672
  - -0.10481786727905273
  - -0.10668087005615234
  - -0.10816478729248047
  - -0.17503507435321808
  - -0.11049270629882812
  - -0.10555624961853027
  - -0.11451959609985352
  - -0.11724615097045898
  - -0.10386514663696289
  - -0.10407114028930664
  - -0.10436487197875977
  - -0.5455687046051025
  - -3.455146074295044
  - -0.10439395904541016
  - -0.09748077392578125
  - -0.09824991226196289
  - -0.10257482528686523
  - -0.10439348220825195
  - -0.10763359069824219
  - -0.11556816101074219
  - -0.1288272589445114
  - -0.11007499694824219
  - -0.1061553955078125
  - -0.10459089279174805
  - -0.10208892822265625
  - -0.10699987411499023
  - -0.10507631301879883
  - -0.09907817840576172
  - -0.10394954681396484
  - -0.10942697525024414
  - -0.10489320755004883
  - -0.10526752471923828
  - -0.058443717658519745
  - -0.10425949096679688
  - -0.10386371612548828
  - -0.04564133286476135
- - -0.10362863540649414
  - -0.10571527481079102
  - -0.10627102851867676
  - -0.10391545295715332
  - -0.12160968780517578
  - -0.10611248016357422
  - -0.10485553741455078
  - -0.10137081146240234
  - -0.10427236557006836
  - -0.10470867156982422
  - -0.10659456253051758
  - -0.08711116760969162
  - -0.1116950511932373
  - -0.10557222366333008
  - -0.10011529922485352
  - -0.10872936248779297
  - -0.10057353973388672
  - -0.10481786727905273
  - -0.10668087005615234
  - -0.10816478729248047
  - -0.17503507435321808
  - -0.11049270629882812
  - -0.10555624961853027
  - -0.11451959609985352
  - -0.11724615097045898
  - -0.10386514663696289
  - -0.10407114028930664
  - -0.10436487197875977
  - -0.5455687046051025
  - -0.11121129989624023
  - -0.10613012313842773
  - -0.07631444931030273
  - -0.09332847595214844
  - -0.1015176773071289
  - -0.10452890396118164
  - -0.10742568969726562
  - -0.1151881217956543
  - -0.12716028094291687
  - -3.4906094074249268
  - -0.10612678527832031
  - -0.10330390930175781
  - -0.1006932258605957
  - -0.10699272155761719
  - -0.1051180362701416
  - -0.0986475944519043
  - -0.10363388061523438
  - -0.10930395126342773
  - -0.10499000549316406
  - -0.1053004264831543
  - -0.05862664431333542
  - -0.10428237915039062
  - -0.10384225845336914
  - -0.04554782435297966
- - -0.10362863540649414
  - -0.10571527481079102
  - -0.10627102851867676
  - -0.10391545295715332
  - -0.12160968780517578
  - -0.10611248016357422
  - -0.10485553741455078
  - -0.10137081146240234
  - -0.10427236557006836
  - -0.10470867156982422
  - -0.10659456253051758
  - -0.08711116760969162
  - -0.1116950511932373
  - -0.10557222366333008
  - -0.10011529922485352
  - -0.10872936248779297
  - -0.10057353973388672
  - -0.10481786727905273
  - -0.10668087005615234
  - -0.10816478729248047
  - -0.17503507435321808
  - -3.4827117919921875
  - -0.10547876358032227
  - -0.11334037780761719
  - -0.12154340744018555
  - -0.10346269607543945
  - -0.10416507720947266
  - -0.10439300537109375
  - -0.5579911470413208
  - -0.11116218566894531
  - -0.10613346099853516
  - -0.07627010345458984
  - -0.09348392486572266
  - -0.1015009880065918
  - -0.10452127456665039
  - -0.10738563537597656
  - -0.11507797241210938
  - -0.12756487727165222
  - -0.11000919342041016
  - -0.10615730285644531
  - -0.104156494140625
  - -0.10221004486083984
  - -0.10698080062866211
  - -0.10508275032043457
  - -0.09918451309204102
  - -0.10393095016479492
  - -0.10951995849609375
  - -0.1048884391784668
  - -0.10525798797607422
  - -0.05848813056945801
  - -0.10426092147827148
  - -0.10386371612548828
  - -0.04561490938067436
- - -0.10362863540649414
  - -0.10571527481079102
  - -0.10627102851867676
  - -0.10391545295715332
  - -0.12160968780517578
  - -0.10611248016357422
  - -0.10485553741455078
  - -0.10137081146240234
  - -0.10427236557006836
  - -0.10470867156982422
  - -0.10659456253051758
  - -0.08711116760969162
  - -0.1116950511932373
  - -0.10557222366333008
  - -0.10011529922485352
  - -0.10872936248779297
  - -0.10057353973388672
  - -0.10481786727905273
  - -0.10668087005615234
  - -0.10816478729248047
  - -0.17503507435321808
  - -0.11049270629882812
  - -0.10555624961853027
  - -0.11451959609985352
  - -0.11724615097045898
  - -0.10386514663696289
  - -0.10407114028930664
  - -0.10436487197875977
  - -0.5455687046051025
  - -0.11121129989624023
  - -0.10613012313842773
  - -0.07631444931030273
  - -0.09332847595214844
  - -0.1015176773071289
  - -0.10452890396118164
  - -0.10742568969726562
  - -0.1151881217956543
  - -0.12716028094291687
  - -0.1099698543548584
  - -0.10615062713623047
  - -0.10414695739746094
  - -0.1022500991821289
  - -3.5561492443084717
  - -0.1051018238067627
  - -0.10375785827636719
  - -0.10460662841796875
  - -0.10990142822265625
  - -0.10482931137084961
  - -0.10524511337280273
  - -0.05844450369477272
  - -0.10427665710449219
  - -0.10390853881835938
  - -0.045764099806547165
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryCode'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Code'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryCode'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryCode'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('val', 'ValSql')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'True'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryCode'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryCode'
  - 'True'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryCode'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'True'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryCode'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, True))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryCode'
  - 'False'
  - '<EOS>'
  - ('cond', 'Ge')
  - ('Ge', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'Count')
  - ('agg_type', 'Avg')
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_orderby', (False, 'bool'))
  - 'True'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
