db: tests-examples/db2csv/world_1/tables/world_1.sqlite
inputs:
 - tests-examples/db2csv/world_1/tables/countrylanguage.csv
 - tests-examples/db2csv/world_1/tables/country.csv
output: tests-examples/db2csv/world_1/tables/0048_dev.csv
raw_question: Give the names of countries with English and French as official languages. 
question_index: 749 
constants:
 - T
 - French
 - English
join_columns:
 - code
 - countrycode
columns:
 - language
 - isofficial
filters:
 - '='
ieu:
 - intersect
comment: |-
  SELECT T1.Name
  FROM country AS T1
  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
  WHERE T2.Language = "English"
    AND T2.IsOfficial = "T" INTERSECT
    SELECT T1.Name
    FROM country AS T1
    JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "French"
    AND T2.IsOfficial = "T"

sql: |-
  SELECT T1.Name
  FROM country AS T1
  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
  WHERE T2.Language = "English"
    AND T2.IsOfficial = "T" INTERSECT
    SELECT T1.Name
    FROM country AS T1
    JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "French"
    AND T2.IsOfficial = "T"
smbop_beam_join_columns:
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- []
- - code
  - countrycode
smbop_beam_groupby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_tables:
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
smbop_beam_constants:
- - French
  - t
  - English
- - French
  - t
  - English
- - French
  - t
  - English
- - French
  - t
  - English
- - French
  - t
  - English
- - French
  - t
  - English
- - French
  - t
  - English
- - French
  - t
  - English
- - French
  - t
  - English
- - French
  - t
  - English
smbop_beam_functions:
- []
- []
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_columns:
- - language
- - language
  - isofficial
- - language
- - language
- - language
  - isofficial
- - language
- - isofficial
- - isofficial
- []
- - language
smbop_beam_ieu:
- - intersect
- - intersect
- - intersect
- - intersect
- - intersect
- []
- []
- []
- []
- []
smbop_beam_filters:
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- []
- - '='
smbop_beam_inferred_code:
  - SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French'
  - SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'English' INTERSECT SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French'
  - SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'French'
  - SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French'
  - SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'English' INTERSECT SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'French'
  - SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English'
  - SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'French'
  - SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'English'
  - SELECT country.name FROM country
  - SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French'
smbop_beam_inferred_code_w_terminals:
  - SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French'
  - SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'English' INTERSECT SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French'
  - SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'French'
  - SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French'
  - SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'English' INTERSECT SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'French'
  - SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English'
  - SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'French'
  - SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'English'
  - SELECT country.name FROM country
  - SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French'
ratsql_beam_join_columns:
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
ratsql_beam_groupby_columns:
- []
- []
- []
- []
- []
ratsql_beam_tables:
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/city.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
ratsql_beam_constants:
- - French
  - t
  - English
- - French
  - t
  - English
- - French
  - t
  - English
- - French
  - t
  - English
- - French
  - t
  - English
ratsql_beam_functions:
- []
- []
- []
- []
- []
ratsql_beam_columns:
- - language
- - language
- - language
- - language
- - language
ratsql_beam_ieu:
- - intersect
- - intersect
- - intersect
- - intersect
- - intersect
ratsql_beam_filters:
- - '='
- - '='
- - '='
- - '='
- - '='
ratsql_beam_inferred_code:
  - SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'
  - SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code AND city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'
  - SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE DISTINCT countrylanguage.Language = 'terminal'
  - SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE DISTINCT countrylanguage.Language = 'terminal' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'
  - SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT DISTINCT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'
  - SELECT DISTINCT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'
  - SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' LIMIT 1 INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'
  - SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' LIMIT 1
ratsql_beam_inferred_code_w_terminals:
  - SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'French'
  - SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code AND city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'French'
  - SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE DISTINCT countrylanguage.Language = 'French'
  - SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE DISTINCT countrylanguage.Language = 'English' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'French'
  - SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' INTERSECT SELECT DISTINCT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'French'
  - SELECT DISTINCT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'French'
  - SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' LIMIT 1 INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'French'
  - SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'French' LIMIT 1
ratsql_beam_score_history:
- - -0.1040034294128418
  - -0.10467004776000977
  - -0.10548281669616699
  - -0.10435676574707031
  - -0.10236501693725586
  - -0.10240840911865234
  - -0.10501766204833984
  - -0.10154867172241211
  - -0.10489511489868164
  - -0.10471820831298828
  - -0.1046600341796875
  - -0.10031064599752426
  - -0.11006307601928711
  - -0.10558700561523438
  - -0.0866703987121582
  - -0.10242509841918945
  - -0.10183906555175781
  - -0.10115480422973633
  - -0.10411262512207031
  - -0.10524749755859375
  - -0.10545206069946289
  - -0.11489909887313843
  - -0.1110849380493164
  - -0.10605359077453613
  - -0.10326671600341797
  - -0.10094833374023438
  - -0.10073375701904297
  - -0.10715055465698242
  - -0.1047048568725586
  - -0.07285690307617188
  - -0.10051918029785156
  - -0.1059560775756836
  - -0.10947442054748535
  - -0.10427975654602051
  - -0.10198259353637695
  - -0.10286378860473633
  - -0.10457420349121094
  - -0.10228109359741211
  - -0.10421371459960938
  - -0.1048431396484375
  - -0.1040811538696289
  - -0.11108855903148651
  - -0.11183404922485352
  - -0.10582280158996582
  - -0.09120512008666992
  - -0.10702991485595703
  - -0.1009674072265625
  - -0.10182428359985352
  - -0.10428380966186523
  - -0.10554790496826172
  - -0.10391092300415039
  - -0.09377241134643555
  - -0.11212992668151855
  - -0.10634303092956543
  - -0.10521888732910156
  - -0.10140657424926758
  - -0.10574674606323242
  - -0.10746312141418457
  - -0.10497832298278809
  - -0.09840106964111328
  - -0.10558366775512695
  - -0.10806608200073242
  - -0.10534334182739258
  - -0.10361528396606445
  - -0.2340133637189865
  - -0.10532236099243164
  - -0.10400915145874023
  - -0.03717644140124321
  - -0.09679079055786133
  - -0.11484384536743164
  - -0.1058034896850586
  - -0.1035623550415039
  - -0.19911213219165802
  - -0.10930728912353516
  - -0.10387372970581055
  - -0.06896769255399704
- - -0.1040034294128418
  - -0.10467004776000977
  - -0.10548281669616699
  - -0.10435676574707031
  - -0.10236501693725586
  - -0.10240840911865234
  - -0.10501766204833984
  - -0.10154867172241211
  - -0.10489511489868164
  - -0.10471820831298828
  - -0.1046600341796875
  - -0.10031064599752426
  - -0.11006307601928711
  - -0.10558700561523438
  - -0.0866703987121582
  - -0.10242509841918945
  - -0.10183906555175781
  - -0.10115480422973633
  - -0.10411262512207031
  - -0.10524749755859375
  - -0.10545206069946289
  - -0.11489909887313843
  - -0.1110849380493164
  - -0.10605359077453613
  - -0.10326671600341797
  - -0.10094833374023438
  - -0.10073375701904297
  - -0.10715055465698242
  - -0.1047048568725586
  - -0.07285690307617188
  - -0.10051918029785156
  - -0.1059560775756836
  - -0.10947442054748535
  - -0.10427975654602051
  - -0.10198259353637695
  - -0.10286378860473633
  - -0.10457420349121094
  - -0.10228109359741211
  - -0.10421371459960938
  - -0.1048431396484375
  - -0.1040811538696289
  - -0.11108855903148651
  - -0.11183404922485352
  - -0.10582280158996582
  - -0.09120512008666992
  - -0.10702991485595703
  - -0.1009674072265625
  - -0.10182428359985352
  - -0.10428380966186523
  - -0.10554790496826172
  - -0.10391092300415039
  - -0.09377241134643555
  - -0.11212992668151855
  - -0.10634303092956543
  - -0.10521888732910156
  - -0.10140657424926758
  - -0.10574674606323242
  - -0.10746312141418457
  - -0.10497832298278809
  - -0.09840106964111328
  - -0.10558366775512695
  - -0.10806608200073242
  - -0.10534334182739258
  - -0.10361528396606445
  - -0.2340133637189865
  - -0.10532236099243164
  - -0.10400915145874023
  - -0.03717644140124321
  - -0.09679079055786133
  - -0.11484384536743164
  - -0.1058034896850586
  - -0.1035623550415039
  - -2.805546283721924
  - -0.1079263687133789
  - -0.10470342636108398
  - -0.1915135681629181
- - -0.1040034294128418
  - -0.10467004776000977
  - -0.10548281669616699
  - -0.10435676574707031
  - -0.10236501693725586
  - -0.10240840911865234
  - -0.10501766204833984
  - -0.10154867172241211
  - -0.10489511489868164
  - -0.10471820831298828
  - -0.1046600341796875
  - -0.10031064599752426
  - -0.11006307601928711
  - -0.10558700561523438
  - -0.0866703987121582
  - -0.10242509841918945
  - -0.10183906555175781
  - -0.10115480422973633
  - -0.10411262512207031
  - -0.10524749755859375
  - -0.10545206069946289
  - -0.11489909887313843
  - -0.1110849380493164
  - -0.10605359077453613
  - -0.10326671600341797
  - -0.10094833374023438
  - -0.10073375701904297
  - -0.10715055465698242
  - -0.1047048568725586
  - -0.07285690307617188
  - -0.10051918029785156
  - -0.1059560775756836
  - -0.10947442054748535
  - -0.10427975654602051
  - -0.10198259353637695
  - -0.10286378860473633
  - -0.10457420349121094
  - -0.10228109359741211
  - -0.10421371459960938
  - -0.1048431396484375
  - -0.1040811538696289
  - -0.11108855903148651
  - -0.11183404922485352
  - -0.10582280158996582
  - -0.09120512008666992
  - -0.10702991485595703
  - -0.1009674072265625
  - -0.10182428359985352
  - -0.10428380966186523
  - -0.10554790496826172
  - -0.10391092300415039
  - -0.09377241134643555
  - -3.435502767562866
  - -0.10609078407287598
  - -0.10530281066894531
  - -0.10126066207885742
  - -0.10585355758666992
  - -0.10741686820983887
  - -0.10498547554016113
  - -0.09829139709472656
  - -0.10562467575073242
  - -0.10782623291015625
  - -0.10535097122192383
  - -0.103607177734375
  - -0.23403412103652954
  - -0.10531949996948242
  - -0.1040048599243164
  - -0.03720056265592575
  - -0.09677839279174805
  - -0.11489629745483398
  - -0.10580825805664062
  - -0.10356426239013672
  - -0.19922387599945068
  - -0.1093149185180664
  - -0.10387277603149414
  - -0.06897258758544922
- - -0.1040034294128418
  - -0.10467004776000977
  - -0.10548281669616699
  - -0.10435676574707031
  - -0.10236501693725586
  - -0.10240840911865234
  - -0.10501766204833984
  - -0.10154867172241211
  - -0.10489511489868164
  - -0.10471820831298828
  - -0.1046600341796875
  - -0.10031064599752426
  - -0.11006307601928711
  - -0.10558700561523438
  - -0.0866703987121582
  - -0.10242509841918945
  - -0.10183906555175781
  - -0.10115480422973633
  - -0.10411262512207031
  - -0.10524749755859375
  - -0.10545206069946289
  - -0.11489909887313843
  - -3.4544143676757812
  - -0.10619783401489258
  - -0.10078096389770508
  - -0.10135030746459961
  - -0.10021686553955078
  - -0.10711979866027832
  - -0.10478806495666504
  - -0.07259845733642578
  - -0.1006464958190918
  - -0.10560417175292969
  - -0.10943484306335449
  - -0.10427641868591309
  - -0.10186910629272461
  - -0.10320329666137695
  - -0.10451841354370117
  - -0.10231208801269531
  - -0.10422372817993164
  - -0.1048421859741211
  - -0.10406351089477539
  - -0.10775141417980194
  - -0.11180281639099121
  - -0.10582256317138672
  - -0.0908803939819336
  - -0.10698652267456055
  - -0.10100603103637695
  - -0.10182809829711914
  - -0.10428285598754883
  - -0.10554647445678711
  - -0.10390853881835938
  - -0.0938207134604454
  - -0.11212372779846191
  - -0.10634016990661621
  - -0.10521078109741211
  - -0.10138273239135742
  - -0.10566234588623047
  - -0.10745906829833984
  - -0.10498285293579102
  - -0.09829425811767578
  - -0.10547733306884766
  - -0.10877752304077148
  - -0.10530900955200195
  - -0.10361576080322266
  - -0.23369313776493073
  - -0.10532999038696289
  - -0.10405683517456055
  - -0.03719298169016838
  - -0.0968027114868164
  - -0.11478328704833984
  - -0.10580062866210938
  - -0.10355091094970703
  - -0.19863305985927582
  - -0.10921239852905273
  - -0.10386085510253906
  - -0.06916539371013641
- - -0.1040034294128418
  - -0.10467004776000977
  - -0.10548281669616699
  - -0.10435676574707031
  - -0.10236501693725586
  - -0.10240840911865234
  - -0.10501766204833984
  - -0.10154867172241211
  - -0.10489511489868164
  - -0.10471820831298828
  - -0.1046600341796875
  - -0.10031064599752426
  - -0.11006307601928711
  - -0.10558700561523438
  - -0.0866703987121582
  - -0.10242509841918945
  - -0.10183906555175781
  - -0.10115480422973633
  - -0.10411262512207031
  - -0.10524749755859375
  - -0.10545206069946289
  - -0.11489909887313843
  - -0.1110849380493164
  - -0.10605359077453613
  - -0.10326671600341797
  - -0.10094833374023438
  - -0.10073375701904297
  - -0.10715055465698242
  - -0.1047048568725586
  - -0.07285690307617188
  - -0.10051918029785156
  - -0.1059560775756836
  - -0.10947442054748535
  - -0.10427975654602051
  - -0.10198259353637695
  - -0.10286378860473633
  - -0.10457420349121094
  - -0.10228109359741211
  - -0.10421371459960938
  - -0.1048431396484375
  - -0.1040811538696289
  - -0.11108855903148651
  - -3.4552102088928223
  - -0.10613584518432617
  - -0.09191560745239258
  - -0.1071934700012207
  - -0.10123395919799805
  - -0.10186338424682617
  - -0.10441780090332031
  - -0.10535192489624023
  - -0.10385847091674805
  - -0.09925668686628342
  - -0.11214518547058105
  - -0.10636234283447266
  - -0.10531282424926758
  - -0.10148286819458008
  - -0.10569477081298828
  - -0.10744833946228027
  - -0.10497736930847168
  - -0.09846115112304688
  - -0.1056661605834961
  - -0.10767078399658203
  - -0.10534954071044922
  - -0.10360288619995117
  - -0.2338220328092575
  - -0.10533809661865234
  - -0.10399103164672852
  - -0.03722893074154854
  - -0.09682750701904297
  - -0.11490917205810547
  - -0.10580205917358398
  - -0.10357284545898438
  - -0.1990249902009964
  - -0.1093597412109375
  - -0.10387086868286133
  - -0.0689760372042656
- - -0.1040034294128418
  - -0.10467004776000977
  - -0.10548281669616699
  - -0.10435676574707031
  - -0.10236501693725586
  - -0.10240840911865234
  - -0.10501766204833984
  - -0.10154867172241211
  - -0.10489511489868164
  - -0.10471820831298828
  - -0.1046600341796875
  - -0.10031064599752426
  - -3.4846904277801514
  - -0.10461902618408203
  - -0.0876302719116211
  - -0.10450315475463867
  - -0.10175037384033203
  - -0.10109376907348633
  - -0.10407352447509766
  - -0.10516214370727539
  - -0.10559558868408203
  - -0.1151820570230484
  - -0.11107683181762695
  - -0.10605716705322266
  - -0.10328292846679688
  - -0.10093879699707031
  - -0.10075569152832031
  - -0.10715293884277344
  - -0.10469675064086914
  - -0.07274055480957031
  - -0.10048866271972656
  - -0.10597801208496094
  - -0.10947489738464355
  - -0.1042783260345459
  - -0.10198307037353516
  - -0.10286521911621094
  - -0.10457420349121094
  - -0.10228395462036133
  - -0.10421419143676758
  - -0.1048431396484375
  - -0.1040797233581543
  - -0.11088777333498001
  - -0.1118326187133789
  - -0.10582232475280762
  - -0.09117412567138672
  - -0.10702943801879883
  - -0.10096883773803711
  - -0.10182476043701172
  - -0.10428380966186523
  - -0.10554742813110352
  - -0.1039113998413086
  - -0.09378413110971451
  - -0.11212992668151855
  - -0.10634303092956543
  - -0.10521841049194336
  - -0.10140228271484375
  - -0.10574960708618164
  - -0.10746288299560547
  - -0.10497832298278809
  - -0.09842252731323242
  - -0.10560417175292969
  - -0.1078653335571289
  - -0.10534524917602539
  - -0.1036076545715332
  - -0.2337876856327057
  - -0.10532236099243164
  - -0.1040034294128418
  - -0.037186894565820694
  - -0.09679174423217773
  - -0.11490535736083984
  - -0.105804443359375
  - -0.10356569290161133
  - -0.19915609061717987
  - -0.10932636260986328
  - -0.10387277603149414
  - -0.06896024197340012
- - -0.1040034294128418
  - -0.10467004776000977
  - -0.10548281669616699
  - -0.10435676574707031
  - -0.10236501693725586
  - -0.10240840911865234
  - -0.10501766204833984
  - -0.10154867172241211
  - -0.10489511489868164
  - -0.10471820831298828
  - -0.1046600341796875
  - -0.10031064599752426
  - -0.11006307601928711
  - -0.10558700561523438
  - -0.0866703987121582
  - -0.10242509841918945
  - -0.10183906555175781
  - -0.10115480422973633
  - -0.10411262512207031
  - -0.10524749755859375
  - -0.10545206069946289
  - -0.11489909887313843
  - -0.1110849380493164
  - -0.10605359077453613
  - -0.10326671600341797
  - -0.10094833374023438
  - -0.10073375701904297
  - -3.554908514022827
  - -0.10471534729003906
  - -0.06811285018920898
  - -0.09967470169067383
  - -0.10596990585327148
  - -0.1093909740447998
  - -0.10426163673400879
  - -0.10193157196044922
  - -0.10294151306152344
  - -0.1045064926147461
  - -0.10231637954711914
  - -0.10423040390014648
  - -0.10487031936645508
  - -0.10404348373413086
  - -0.10245494544506073
  - -0.11177945137023926
  - -0.10582661628723145
  - -0.09093189239501953
  - -0.10700464248657227
  - -0.10088300704956055
  - -0.10181379318237305
  - -0.10428667068481445
  - -0.10555267333984375
  - -0.10390710830688477
  - -0.0939897894859314
  - -0.1121358871459961
  - -0.10634183883666992
  - -0.1052103042602539
  - -0.10139083862304688
  - -0.10580587387084961
  - -0.1074378490447998
  - -0.10498332977294922
  - -0.09855985641479492
  - -0.10567474365234375
  - -0.10891342163085938
  - -0.10533285140991211
  - -0.10361194610595703
  - -0.23400846123695374
  - -0.10532951354980469
  - -0.10404300689697266
  - -0.03718356415629387
  - -0.09679937362670898
  - -0.11492252349853516
  - -0.10580873489379883
  - -0.10356378555297852
  - -0.1991320550441742
  - -0.1092987060546875
  - -0.10386991500854492
  - -0.06897459179162979
- - -0.1040034294128418
  - -0.10467004776000977
  - -0.10548281669616699
  - -0.10435676574707031
  - -0.10236501693725586
  - -0.10240840911865234
  - -0.10501766204833984
  - -0.10154867172241211
  - -0.10489511489868164
  - -0.10471820831298828
  - -0.1046600341796875
  - -0.10031064599752426
  - -0.11006307601928711
  - -0.10558700561523438
  - -0.0866703987121582
  - -0.10242509841918945
  - -0.10183906555175781
  - -0.10115480422973633
  - -0.10411262512207031
  - -0.10524749755859375
  - -0.10545206069946289
  - -0.11489909887313843
  - -0.1110849380493164
  - -0.10605359077453613
  - -0.10326671600341797
  - -0.10094833374023438
  - -0.10073375701904297
  - -0.10715055465698242
  - -0.1047048568725586
  - -0.07285690307617188
  - -0.10051918029785156
  - -0.1059560775756836
  - -0.10947442054748535
  - -0.10427975654602051
  - -0.10198259353637695
  - -0.10286378860473633
  - -0.10457420349121094
  - -0.10228109359741211
  - -0.10421371459960938
  - -0.1048431396484375
  - -0.1040811538696289
  - -0.11108855903148651
  - -0.11183404922485352
  - -0.10582280158996582
  - -0.09120512008666992
  - -0.10702991485595703
  - -0.1009674072265625
  - -0.10182428359985352
  - -0.10428380966186523
  - -0.10554790496826172
  - -0.10391092300415039
  - -0.09377241134643555
  - -0.11212992668151855
  - -0.10634303092956543
  - -0.10521888732910156
  - -0.10140657424926758
  - -0.10574674606323242
  - -3.551360607147217
  - -0.10498976707458496
  - -0.09906816482543945
  - -0.10658407211303711
  - -0.10596370697021484
  - -0.10543060302734375
  - -0.10367631912231445
  - -0.2324257493019104
  - -0.10542631149291992
  - -0.1039729118347168
  - -0.037255000323057175
  - -0.09682846069335938
  - -0.11507987976074219
  - -0.10582542419433594
  - -0.10360193252563477
  - -0.19951334595680237
  - -0.10950803756713867
  - -0.10390806198120117
  - -0.06867925077676773
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'city'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'True'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'True'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
