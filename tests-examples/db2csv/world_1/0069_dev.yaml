db: tests-examples/db2csv/world_1/tables/world_1.sqlite
inputs:
 - tests-examples/db2csv/world_1/tables/countrylanguage.csv
 - tests-examples/db2csv/world_1/tables/country.csv
output: tests-examples/db2csv/world_1/tables/0069_dev.csv
raw_question: What is the total number of unique official languages spoken in the countries that are founded before 1930? 
question_index: 770 
constants:
 - T
 - 1930
join_columns:
 - code
 - countrycode
functions:
 - count
columns:
 - language
 - indepyear
 - isofficial
filters:
 - '='
 - '<'
comment: |-
  SELECT count(DISTINCT T2.Language)
  FROM country AS T1
  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
  WHERE IndepYear < 1930
    AND T2.IsOfficial = "T"

sql: |-
  SELECT count(DISTINCT T2.Language)
  FROM country AS T1
  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
  WHERE IndepYear < 1930
    AND T2.IsOfficial = "T"
smbop_beam_join_columns:
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- []
- []
smbop_beam_groupby_columns:
- []
- []
- []
- []
- []
- []
smbop_beam_tables:
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
smbop_beam_constants:
- - t
  - 1930
- - t
  - 1930
- - t
  - 1930
- - t
  - 1930
- - t
  - 1930
- - t
  - 1930
smbop_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
smbop_beam_columns:
- - indepyear
  - isofficial
- - language
  - indepyear
- - indepyear
  - isofficial
- - language
  - indepyear
- - language
- - isofficial
smbop_beam_ieu:
- []
- []
- []
- []
- []
- []
smbop_beam_filters:
- - '<'
- - '<'
- - '<'
- - '<'
- []
- []
smbop_beam_inferred_code:
  - SELECT COUNT( DISTINCT countrylanguage.isofficial ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear<1930
  - SELECT COUNT( DISTINCT countrylanguage.language ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear<1930
  - SELECT COUNT( DISTINCT countrylanguage.isofficial ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.indepyear<1930
  - SELECT COUNT( DISTINCT countrylanguage.language ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.indepyear<1930
  - SELECT COUNT( DISTINCT countrylanguage.language ) FROM countrylanguage
  - SELECT COUNT( DISTINCT countrylanguage.isofficial ) FROM countrylanguage
smbop_beam_inferred_code_w_terminals:
  - SELECT COUNT( DISTINCT countrylanguage.isofficial ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear<1930
  - SELECT COUNT( DISTINCT countrylanguage.language ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear<1930
  - SELECT COUNT( DISTINCT countrylanguage.isofficial ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.indepyear<1930
  - SELECT COUNT( DISTINCT countrylanguage.language ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.indepyear<1930
  - SELECT COUNT( DISTINCT countrylanguage.language ) FROM countrylanguage
  - SELECT COUNT( DISTINCT countrylanguage.isofficial ) FROM countrylanguage
ratsql_beam_join_columns:
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
- - code
  - countrycode
ratsql_beam_groupby_columns:
- []
- []
- []
- []
- []
ratsql_beam_tables:
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/city.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
ratsql_beam_constants:
- - t
  - 1930
- - t
  - 1930
- - t
  - 1930
- - t
  - 1930
- - t
  - 1930
ratsql_beam_functions:
- - count
- - count
- - count
- - count
- - count
ratsql_beam_columns:
- - language
  - indepyear
- - language
  - indepyear
- - language
  - indepyear
- - language
  - indepyear
- - language
  - indepyear
ratsql_beam_ieu:
- []
- []
- []
- []
- []
ratsql_beam_filters:
- - '<'
- - '<'
- - '<'
- - '<'
- - '<'
ratsql_beam_inferred_code:
  - SELECT Count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 'terminal'
  - SELECT Count(DISTINCT countrylanguage.Language) FROM city JOIN country ON city.CountryCode = country.Code AND city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 'terminal'
  - SELECT Count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 'terminal' LIMIT 1
  - SELECT Count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE DISTINCT country.IndepYear < 'terminal'
  - SELECT Count(countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 'terminal'
  - SELECT DISTINCT Count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 'terminal'
ratsql_beam_inferred_code_w_terminals:
  - SELECT Count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930
  - SELECT Count(DISTINCT countrylanguage.Language) FROM city JOIN country ON city.CountryCode = country.Code AND city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930
  - SELECT Count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930 LIMIT 1
  - SELECT Count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE DISTINCT country.IndepYear < 1930
  - SELECT Count(countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930
  - SELECT DISTINCT Count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930
ratsql_beam_score_history:
- - -0.10550689697265625
  - -0.10351419448852539
  - -0.1062324047088623
  - -0.10403084754943848
  - -0.10149240493774414
  - -0.10563182830810547
  - -0.11058664321899414
  - -0.10242080688476562
  - -0.1056513786315918
  - -0.10501623153686523
  - -0.10536479949951172
  - -0.1158003956079483
  - -0.0987558364868164
  - -0.10500335693359375
  - -0.09260940551757812
  - -0.10679912567138672
  - -0.09864091873168945
  - -0.10198497772216797
  - -0.10511302947998047
  - -0.1048879623413086
  - -0.10596418380737305
  - -0.15287606418132782
  - -0.11243748664855957
  - -0.10493016242980957
  - -0.10254383087158203
  - -0.10101509094238281
  - -0.10279512405395508
  - -0.10759592056274414
  - -0.10493612289428711
  - -0.0950922966003418
  - -0.1024332046508789
  - -0.8824448585510254
  - -0.10555696487426758
  - -0.1040182113647461
  - -0.4985591471195221
- - -0.10550689697265625
  - -0.10351419448852539
  - -0.1062324047088623
  - -0.10403084754943848
  - -0.10149240493774414
  - -0.10563182830810547
  - -0.11058664321899414
  - -0.10242080688476562
  - -0.1056513786315918
  - -0.10501623153686523
  - -0.10536479949951172
  - -0.1158003956079483
  - -0.0987558364868164
  - -0.10500335693359375
  - -0.09260940551757812
  - -0.10679912567138672
  - -0.09864091873168945
  - -0.10198497772216797
  - -0.10511302947998047
  - -0.1048879623413086
  - -0.10596418380737305
  - -0.15287606418132782
  - -0.11243748664855957
  - -0.10493016242980957
  - -0.10254383087158203
  - -0.10101509094238281
  - -0.10279512405395508
  - -0.10759592056274414
  - -0.10493612289428711
  - -0.0950922966003418
  - -0.1024332046508789
  - -0.8824448585510254
  - -0.10555696487426758
  - -0.1040182113647461
  - -3.4227333068847656
- - -0.10550689697265625
  - -0.10351419448852539
  - -0.1062324047088623
  - -0.10403084754943848
  - -0.10149240493774414
  - -0.10563182830810547
  - -0.11058664321899414
  - -0.10242080688476562
  - -0.1056513786315918
  - -0.10501623153686523
  - -0.10536479949951172
  - -0.1158003956079483
  - -0.0987558364868164
  - -0.10500335693359375
  - -0.09260940551757812
  - -0.10679912567138672
  - -0.09864091873168945
  - -0.10198497772216797
  - -0.10511302947998047
  - -0.1048879623413086
  - -0.10596418380737305
  - -0.15287606418132782
  - -0.11243748664855957
  - -0.10493016242980957
  - -0.10254383087158203
  - -0.10101509094238281
  - -0.10279512405395508
  - -3.551607608795166
  - -0.104827880859375
  - -0.09667015075683594
  - -0.10242033004760742
  - -0.5877594947814941
  - -0.10590887069702148
  - -0.10400867462158203
  - -0.5032127499580383
- - -0.10550689697265625
  - -0.10351419448852539
  - -0.1062324047088623
  - -0.10403084754943848
  - -0.10149240493774414
  - -0.10563182830810547
  - -0.11058664321899414
  - -0.10242080688476562
  - -0.1056513786315918
  - -0.10501623153686523
  - -0.10536479949951172
  - -0.1158003956079483
  - -0.0987558364868164
  - -0.10500335693359375
  - -0.09260940551757812
  - -0.10679912567138672
  - -0.09864091873168945
  - -0.10198497772216797
  - -0.10511302947998047
  - -0.1048879623413086
  - -0.10596418380737305
  - -0.15287606418132782
  - -3.4442555904388428
  - -0.10517740249633789
  - -0.10133504867553711
  - -0.1009206771850586
  - -0.10274600982666016
  - -0.1075594425201416
  - -0.10491466522216797
  - -0.09682369232177734
  - -0.10301065444946289
  - -0.3834528923034668
  - -0.10512256622314453
  - -0.1046595573425293
  - -0.5154930949211121
  - -0.10544967651367188
  - -0.10566854476928711
  - -0.21178752183914185
- - -0.10550689697265625
  - -0.10351419448852539
  - -0.1062324047088623
  - -0.10403084754943848
  - -0.10149240493774414
  - -0.10563182830810547
  - -0.11058664321899414
  - -0.10242080688476562
  - -0.1056513786315918
  - -0.10501623153686523
  - -0.10536479949951172
  - -0.1158003956079483
  - -3.798192024230957
  - -0.09639263153076172
  - -0.09342432022094727
  - -0.10112667083740234
  - -0.10230827331542969
  - -0.10506153106689453
  - -0.10481405258178711
  - -0.1054224967956543
  - -0.16754354536533356
  - -0.11191201210021973
  - -0.10498046875
  - -0.10245609283447266
  - -0.10116338729858398
  - -0.10276985168457031
  - -0.1075904369354248
  - -0.10492873191833496
  - -0.09547662734985352
  - -0.10255575180053711
  - -0.6253814697265625
  - -0.10559749603271484
  - -0.10403203964233398
  - -0.5044907927513123
- - -0.10550689697265625
  - -0.10351419448852539
  - -3.570952892303467
  - -0.10410165786743164
  - -0.10166645050048828
  - -0.10552453994750977
  - -0.10596466064453125
  - -0.10239362716674805
  - -0.10580253601074219
  - -0.10500621795654297
  - -0.10539436340332031
  - -0.11684545129537582
  - -0.09867429733276367
  - -0.10499453544616699
  - -0.09198951721191406
  - -0.10878372192382812
  - -0.09601688385009766
  - -0.10197591781616211
  - -0.10505342483520508
  - -0.1048736572265625
  - -0.10592079162597656
  - -0.15205387771129608
  - -0.11242842674255371
  - -0.10493111610412598
  - -0.102508544921875
  - -0.10103416442871094
  - -0.10278463363647461
  - -0.10759711265563965
  - -0.10493779182434082
  - -0.09512710571289062
  - -0.10243749618530273
  - -0.8749570846557617
  - -0.10554790496826172
  - -0.10403299331665039
  - -0.49943143129348755
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Lt')
  - ('Lt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'IndepYear'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Lt')
  - ('Lt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'IndepYear'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'city'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Lt')
  - ('Lt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'IndepYear'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'True'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Lt')
  - ('Lt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'IndepYear'
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - ('val', 'ValSql')
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Lt')
  - ('Lt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'IndepYear'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'True'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Lt')
  - ('Lt', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'IndepYear'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
