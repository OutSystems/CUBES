db: tests-examples/db2csv/world_1/tables/world_1.sqlite
inputs:
 - tests-examples/db2csv/world_1/tables/countrylanguage.csv
 - tests-examples/db2csv/world_1/tables/country.csv
output: tests-examples/db2csv/world_1/tables/0043_dev.csv
raw_question: How many countries speak both English and Dutch? 
question_index: 744 
has_limit: False 
has_order_by: False 
order_by_direction: []
constants:
 - Dutch
 - English
join_columns:
 - countrycode
 - code
groupby_columns: []
orderby_columns: []
functions:
 - count
columns:
 - language
filters:
 - '='
ieu:
 - intersect
comment: |-
  SELECT COUNT(*)
  FROM
    (SELECT T1.Name
     FROM country AS T1
     JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
     WHERE T2.Language = "English" INTERSECT
       SELECT T1.Name
       FROM country AS T1
       JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "Dutch")

sql: |-
  SELECT COUNT(*)
  FROM
    (SELECT T1.Name
     FROM country AS T1
     JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
     WHERE T2.Language = "English" INTERSECT
       SELECT T1.Name
       FROM country AS T1
       JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "Dutch")
smbop_beam_join_columns:
- - countrycode
  - code
- - countrycode
  - code
- - countrycode
  - code
- []
- []
- []
- []
- []
smbop_beam_groupby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_orderby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_tables:
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
smbop_beam_constants:
- - Dutch
  - English
- - Dutch
  - English
- - Dutch
  - English
- - Dutch
  - English
- - Dutch
  - English
- - Dutch
  - English
- - Dutch
  - English
- - Dutch
  - English
smbop_beam_functions:
- - count
- - count
- - count
- - count
- []
- []
- - count
- []
smbop_beam_columns:
- - language
- - language
- - language
- - language
- - language
- - language
- - language
- - language
smbop_beam_ieu:
- []
- []
- - intersect
  - intersect
- []
- []
- []
- []
- - intersect
smbop_beam_filters:
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
smbop_beam_inferred_code:
  - SELECT COUNT( * ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Dutch'
  - SELECT COUNT( * ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English'
  - SELECT COUNT( * ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English' INTERSECT SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'Dutch'
  - SELECT COUNT( * ) FROM countrylanguage WHERE countrylanguage.language = 'Dutch'
  - SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English'
  - SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'Dutch'
  - SELECT COUNT( * ) FROM countrylanguage WHERE countrylanguage.language = 'English'
  - SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English' INTERSECT SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'Dutch'
smbop_beam_inferred_code_w_terminals:
  - SELECT COUNT( * ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Dutch'
  - SELECT COUNT( * ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English'
  - SELECT COUNT( * ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English' INTERSECT SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'Dutch'
  - SELECT COUNT( * ) FROM countrylanguage WHERE countrylanguage.language = 'Dutch'
  - SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English'
  - SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'Dutch'
  - SELECT COUNT( * ) FROM countrylanguage WHERE countrylanguage.language = 'English'
  - SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English' INTERSECT SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'Dutch'
smbop_beam_has_limit:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_join_columns:
- []
- - countrycode
  - code
- - countrycode
  - code
- []
- - countrycode
  - code
- - countrycode
  - code
- - countrycode
  - code
- - countrycode
  - code
ratsql_beam_groupby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_orderby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_tables:
- - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/country.csv
  - tests-examples/db2csv/world_1/tables/countrylanguage.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
- - tests-examples/db2csv/world_1/tables/countrylanguage.csv
  - tests-examples/db2csv/world_1/tables/country.csv
ratsql_beam_constants:
- - Dutch
  - English
- - Dutch
  - English
- - Dutch
  - English
- - Dutch
  - English
- - Dutch
  - English
- - Dutch
  - English
- - Dutch
  - English
- - Dutch
  - English
- - Dutch
  - English
- - Dutch
  - English
ratsql_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
- - count
- - count
ratsql_beam_columns:
- []
- - language
- - language
- - language
- - language
- - language
- - language
- - language
ratsql_beam_ieu:
- []
- - intersect
- - intersect
- - intersect
- - intersect
- - intersect
- - intersect
- - intersect
ratsql_beam_filters:
- []
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
ratsql_beam_inferred_code:
  - SELECT Count(*) FROM country
  - SELECT Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'terminal'
  - SELECT Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'
  - SELECT Count(*) FROM countrylanguage WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'terminal'
  - SELECT Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT countrylanguage.CountryCode FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'
  - SELECT Count(*) FROM countrylanguage WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT countrylanguage.CountryCode FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'
  - SELECT Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE DISTINCT countrylanguage.Language = 'terminal'
  - SELECT Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE DISTINCT countrylanguage.Language = 'terminal' INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'terminal'
  - SELECT Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT DISTINCT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'terminal'
  - SELECT Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT country.HeadOfState FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'
ratsql_beam_inferred_code_w_terminals:
  - SELECT Count(*) FROM country
  - SELECT Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch' INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'English'
  - SELECT Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English'
  - SELECT Count(*) FROM countrylanguage WHERE countrylanguage.Language = 'Dutch' INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'English'
  - SELECT Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch' INTERSECT SELECT countrylanguage.CountryCode FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English'
  - SELECT Count(*) FROM countrylanguage WHERE countrylanguage.Language = 'Dutch' INTERSECT SELECT countrylanguage.CountryCode FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English'
  - SELECT Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch' INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE DISTINCT countrylanguage.Language = 'English'
  - SELECT Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE DISTINCT countrylanguage.Language = 'Dutch' INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'English'
  - SELECT Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch' INTERSECT SELECT DISTINCT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'English'
  - SELECT Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch' INTERSECT SELECT country.HeadOfState FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English'
ratsql_beam_has_limit:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
ratsql_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
ratsql_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_score_history:
- - -0.10948896408081055
  - -0.10608768463134766
  - -0.10551333427429199
  - -0.10421967506408691
  - -0.10090112686157227
  - -0.11182212829589844
  - -0.1072854995727539
  - -0.10385656356811523
  - -0.10738039016723633
  - -0.10513448715209961
  - -0.10628604888916016
  - -0.12885597348213196
  - -0.1096336841583252
  - -0.10521888732910156
  - -3.5574469566345215
  - -0.1611623764038086
  - -0.10320138931274414
  - -0.1073615550994873
  - -0.1044316291809082
  - -0.3975214958190918
  - -0.10973167419433594
  - -0.11139583587646484
  - -1.0155425071716309
  - -0.1284770965576172
  - -0.21560406684875488
- - -0.10948896408081055
  - -0.10608768463134766
  - -0.10551333427429199
  - -0.10421967506408691
  - -0.10090112686157227
  - -0.11182212829589844
  - -0.1072854995727539
  - -0.10385656356811523
  - -0.10738039016723633
  - -0.10513448715209961
  - -0.10628604888916016
  - -0.12885597348213196
  - -0.1096336841583252
  - -0.10521888732910156
  - -0.11913728713989258
  - -0.11051416397094727
  - -0.10697078704833984
  - -0.10099649429321289
  - -0.10612344741821289
  - -0.10502386093139648
  - -0.10508489608764648
  - -0.1068749725818634
  - -0.11226582527160645
  - -0.10552597045898438
  - -0.10418415069580078
  - -0.09418344497680664
  - -0.1006474494934082
  - -0.10732150077819824
  - -0.10419678688049316
  - -0.09437990188598633
  - -0.09827518463134766
  - -0.10518360137939453
  - -0.10806727409362793
  - -0.10417413711547852
  - -0.10680150985717773
  - -0.1053304672241211
  - -0.11581707000732422
  - -0.10321044921875
  - -0.10520792007446289
  - -0.10439443588256836
  - -0.10499954223632812
  - -1.0111291408538818
  - -0.11109089851379395
  - -0.1054677963256836
  - -0.09321403503417969
  - -0.10427379608154297
  - -0.10199594497680664
  - -0.10695648193359375
  - -0.10960197448730469
  - -0.10478019714355469
  - -0.10386276245117188
  - -0.06585042923688889
  - -0.11152529716491699
  - -0.10607171058654785
  - -0.10856056213378906
  - -0.09892606735229492
  - -0.10379838943481445
  - -0.10745716094970703
  - -0.1049184799194336
  - -0.10364103317260742
  - -0.10520076751708984
  - -0.12067842483520508
  - -0.10612630844116211
  - -0.103668212890625
  - -0.1694909930229187
  - -0.10691070556640625
  - -0.10065841674804688
  - -0.10543632507324219
  - -0.10427713394165039
  - -0.179830402135849
- - -0.10948896408081055
  - -0.10608768463134766
  - -0.10551333427429199
  - -0.10421967506408691
  - -0.10090112686157227
  - -0.11182212829589844
  - -0.1072854995727539
  - -0.10385656356811523
  - -0.10738039016723633
  - -0.10513448715209961
  - -0.10628604888916016
  - -0.12885597348213196
  - -0.1096336841583252
  - -0.10521888732910156
  - -0.11913728713989258
  - -0.11051416397094727
  - -0.10697078704833984
  - -0.10099649429321289
  - -0.10612344741821289
  - -0.10502386093139648
  - -0.10508489608764648
  - -0.1068749725818634
  - -0.11226582527160645
  - -0.10552597045898438
  - -0.10418415069580078
  - -0.09418344497680664
  - -0.1006474494934082
  - -0.10732150077819824
  - -0.10419678688049316
  - -0.09437990188598633
  - -0.09827518463134766
  - -0.10518360137939453
  - -0.10806727409362793
  - -0.10417413711547852
  - -0.10680150985717773
  - -0.1053304672241211
  - -0.11581707000732422
  - -0.10321044921875
  - -0.10520792007446289
  - -0.10439443588256836
  - -0.10499954223632812
  - -0.8554725646972656
  - -0.11117720603942871
  - -0.1057279109954834
  - -0.08941459655761719
  - -0.1021728515625
  - -0.10130739212036133
  - -0.10406351089477539
  - -0.11029338836669922
  - -0.10468435287475586
  - -0.10367107391357422
  - -0.07006049901247025
  - -0.11180830001831055
  - -0.10595273971557617
  - -0.10771417617797852
  - -0.0985860824584961
  - -0.10331916809082031
  - -0.1075294017791748
  - -0.10487508773803711
  - -0.10213947296142578
  - -0.10413026809692383
  - -0.10249614715576172
  - -0.1070704460144043
  - -0.10372781753540039
  - -0.17508921027183533
  - -0.10775232315063477
  - -0.1052098274230957
  - -0.036925215274095535
  - -0.10474538803100586
  - -0.1271834373474121
  - -0.10559225082397461
  - -0.10361862182617188
  - -0.07734666764736176
  - -0.10542058944702148
  - -0.10576725006103516
  - -0.09322869777679443
- - -0.10948896408081055
  - -0.10608768463134766
  - -0.10551333427429199
  - -0.10421967506408691
  - -0.10090112686157227
  - -0.11182212829589844
  - -0.1072854995727539
  - -0.10385656356811523
  - -0.10738039016723633
  - -0.10513448715209961
  - -0.10628604888916016
  - -0.12885597348213196
  - -0.1096336841583252
  - -0.10521888732910156
  - -0.11913728713989258
  - -0.11051416397094727
  - -0.10697078704833984
  - -0.10099649429321289
  - -0.10612344741821289
  - -0.10502386093139648
  - -0.10508489608764648
  - -0.1068749725818634
  - -0.11226582527160645
  - -0.10552597045898438
  - -0.10418415069580078
  - -0.09418344497680664
  - -0.1006474494934082
  - -0.10732150077819824
  - -0.10419678688049316
  - -0.09437990188598633
  - -0.09827518463134766
  - -0.10518360137939453
  - -0.10806727409362793
  - -0.10417413711547852
  - -0.10680150985717773
  - -0.1053304672241211
  - -0.11581707000732422
  - -0.10321044921875
  - -0.10520792007446289
  - -0.10439443588256836
  - -0.10499954223632812
  - -1.0111291408538818
  - -0.11109089851379395
  - -0.1054677963256836
  - -0.09321403503417969
  - -0.10427379608154297
  - -0.10199594497680664
  - -0.10695648193359375
  - -0.10960197448730469
  - -0.10478019714355469
  - -0.10386276245117188
  - -0.06585042923688889
  - -0.11152529716491699
  - -0.10607171058654785
  - -0.10856056213378906
  - -0.09892606735229492
  - -0.10379838943481445
  - -0.10745716094970703
  - -0.1049184799194336
  - -0.10364103317260742
  - -0.10520076751708984
  - -0.12067842483520508
  - -0.10612630844116211
  - -0.103668212890625
  - -0.1694909930229187
  - -0.10691070556640625
  - -0.10065841674804688
  - -0.10543632507324219
  - -0.10427713394165039
  - -2.1518781185150146
- - -0.10948896408081055
  - -0.10608768463134766
  - -0.10551333427429199
  - -0.10421967506408691
  - -0.10090112686157227
  - -0.11182212829589844
  - -0.1072854995727539
  - -0.10385656356811523
  - -0.10738039016723633
  - -0.10513448715209961
  - -0.10628604888916016
  - -0.12885597348213196
  - -0.1096336841583252
  - -0.10521888732910156
  - -0.11913728713989258
  - -0.11051416397094727
  - -0.10697078704833984
  - -0.10099649429321289
  - -0.10612344741821289
  - -0.10502386093139648
  - -0.10508489608764648
  - -0.1068749725818634
  - -0.11226582527160645
  - -0.10552597045898438
  - -0.10418415069580078
  - -0.09418344497680664
  - -0.1006474494934082
  - -0.10732150077819824
  - -0.10419678688049316
  - -0.09437990188598633
  - -0.09827518463134766
  - -0.10518360137939453
  - -0.10806727409362793
  - -0.10417413711547852
  - -0.10680150985717773
  - -0.1053304672241211
  - -0.11581707000732422
  - -0.10321044921875
  - -0.10520792007446289
  - -0.10439443588256836
  - -0.10499954223632812
  - -1.0111291408538818
  - -0.11109089851379395
  - -0.1054677963256836
  - -0.09321403503417969
  - -0.10427379608154297
  - -0.10199594497680664
  - -0.10695648193359375
  - -0.10960197448730469
  - -0.10478019714355469
  - -0.10386276245117188
  - -0.06585042923688889
  - -0.11152529716491699
  - -0.10607171058654785
  - -0.10856056213378906
  - -0.09892606735229492
  - -0.10379838943481445
  - -0.10745716094970703
  - -0.1049184799194336
  - -0.10364103317260742
  - -0.10520076751708984
  - -0.12067842483520508
  - -0.10612630844116211
  - -0.103668212890625
  - -2.3184869289398193
  - -0.09944486618041992
  - -0.16765308380126953
  - -0.1065216064453125
  - -0.10269880294799805
  - -0.6636334657669067
- - -0.10948896408081055
  - -0.10608768463134766
  - -0.10551333427429199
  - -0.10421967506408691
  - -0.10090112686157227
  - -0.11182212829589844
  - -0.1072854995727539
  - -0.10385656356811523
  - -0.10738039016723633
  - -0.10513448715209961
  - -0.10628604888916016
  - -0.12885597348213196
  - -0.1096336841583252
  - -0.10521888732910156
  - -0.11913728713989258
  - -0.11051416397094727
  - -0.10697078704833984
  - -0.10099649429321289
  - -0.10612344741821289
  - -0.10502386093139648
  - -0.10508489608764648
  - -0.1068749725818634
  - -0.11226582527160645
  - -0.10552597045898438
  - -0.10418415069580078
  - -0.09418344497680664
  - -0.1006474494934082
  - -0.10732150077819824
  - -0.10419678688049316
  - -0.09437990188598633
  - -0.09827518463134766
  - -0.10518360137939453
  - -0.10806727409362793
  - -0.10417413711547852
  - -0.10680150985717773
  - -0.1053304672241211
  - -0.11581707000732422
  - -0.10321044921875
  - -0.10520792007446289
  - -0.10439443588256836
  - -0.10499954223632812
  - -1.0111291408538818
  - -0.11109089851379395
  - -0.1054677963256836
  - -0.09321403503417969
  - -0.10427379608154297
  - -0.10199594497680664
  - -0.10695648193359375
  - -0.10960197448730469
  - -0.10478019714355469
  - -0.10386276245117188
  - -0.06585042923688889
  - -0.11152529716491699
  - -0.10607171058654785
  - -0.10856056213378906
  - -0.09892606735229492
  - -0.10379838943481445
  - -0.10745716094970703
  - -0.1049184799194336
  - -0.10364103317260742
  - -0.10520076751708984
  - -0.12067842483520508
  - -0.10612630844116211
  - -0.103668212890625
  - -2.3184869289398193
  - -0.09944486618041992
  - -0.16765308380126953
  - -0.1065216064453125
  - -0.10269880294799805
  - -0.9351568818092346
- - -0.10948896408081055
  - -0.10608768463134766
  - -0.10551333427429199
  - -0.10421967506408691
  - -0.10090112686157227
  - -0.11182212829589844
  - -0.1072854995727539
  - -0.10385656356811523
  - -0.10738039016723633
  - -0.10513448715209961
  - -0.10628604888916016
  - -0.12885597348213196
  - -0.1096336841583252
  - -0.10521888732910156
  - -0.11913728713989258
  - -0.11051416397094727
  - -0.10697078704833984
  - -0.10099649429321289
  - -0.10612344741821289
  - -0.10502386093139648
  - -0.10508489608764648
  - -0.1068749725818634
  - -0.11226582527160645
  - -0.10552597045898438
  - -0.10418415069580078
  - -0.09418344497680664
  - -0.1006474494934082
  - -0.10732150077819824
  - -0.10419678688049316
  - -0.09437990188598633
  - -0.09827518463134766
  - -0.10518360137939453
  - -0.10806727409362793
  - -0.10417413711547852
  - -0.10680150985717773
  - -0.1053304672241211
  - -0.11581707000732422
  - -0.10321044921875
  - -0.10520792007446289
  - -0.10439443588256836
  - -0.10499954223632812
  - -1.0111291408538818
  - -0.11109089851379395
  - -0.1054677963256836
  - -0.09321403503417969
  - -0.10427379608154297
  - -0.10199594497680664
  - -0.10695648193359375
  - -0.10960197448730469
  - -0.10478019714355469
  - -0.10386276245117188
  - -0.06585042923688889
  - -3.443254232406616
  - -0.10619592666625977
  - -0.10557794570922852
  - -0.09809255599975586
  - -0.10377740859985352
  - -0.10745811462402344
  - -0.10493278503417969
  - -0.10314702987670898
  - -0.10542869567871094
  - -0.1191091537475586
  - -0.10608673095703125
  - -0.10370969772338867
  - -0.1670610010623932
  - -0.10644197463989258
  - -0.10069894790649414
  - -0.10542869567871094
  - -0.10429239273071289
  - -0.18015241622924805
- - -0.10948896408081055
  - -0.10608768463134766
  - -0.10551333427429199
  - -0.10421967506408691
  - -0.10090112686157227
  - -0.11182212829589844
  - -0.1072854995727539
  - -0.10385656356811523
  - -0.10738039016723633
  - -0.10513448715209961
  - -0.10628604888916016
  - -0.12885597348213196
  - -0.1096336841583252
  - -0.10521888732910156
  - -0.11913728713989258
  - -0.11051416397094727
  - -0.10697078704833984
  - -0.10099649429321289
  - -0.10612344741821289
  - -0.10502386093139648
  - -0.10508489608764648
  - -0.1068749725818634
  - -3.4402823448181152
  - -0.1048727035522461
  - -0.10361862182617188
  - -0.09355545043945312
  - -0.10050487518310547
  - -0.10725140571594238
  - -0.10430383682250977
  - -0.10281658172607422
  - -0.09877395629882812
  - -0.10502099990844727
  - -0.10805177688598633
  - -0.10418581962585449
  - -0.10635137557983398
  - -0.10550737380981445
  - -0.11722087860107422
  - -0.10326337814331055
  - -0.10518550872802734
  - -0.10439634323120117
  - -0.10500812530517578
  - -1.0190287828445435
  - -0.11108708381652832
  - -0.10545635223388672
  - -0.09337949752807617
  - -0.10429859161376953
  - -0.10195636749267578
  - -0.10684823989868164
  - -0.10961437225341797
  - -0.10476922988891602
  - -0.10387134552001953
  - -0.06592710316181183
  - -0.11152410507202148
  - -0.10606193542480469
  - -0.1085042953491211
  - -0.09887981414794922
  - -0.10374879837036133
  - -0.10745429992675781
  - -0.10491633415222168
  - -0.10363197326660156
  - -0.1051483154296875
  - -0.1217794418334961
  - -0.1061258316040039
  - -0.10357666015625
  - -0.1733970195055008
  - -0.10757207870483398
  - -0.10062551498413086
  - -0.10544252395629883
  - -0.10426521301269531
  - -0.17898772656917572
- - -0.10948896408081055
  - -0.10608768463134766
  - -0.10551333427429199
  - -0.10421967506408691
  - -0.10090112686157227
  - -0.11182212829589844
  - -0.1072854995727539
  - -0.10385656356811523
  - -0.10738039016723633
  - -0.10513448715209961
  - -0.10628604888916016
  - -0.12885597348213196
  - -0.1096336841583252
  - -0.10521888732910156
  - -0.11913728713989258
  - -0.11051416397094727
  - -0.10697078704833984
  - -0.10099649429321289
  - -0.10612344741821289
  - -0.10502386093139648
  - -0.10508489608764648
  - -0.1068749725818634
  - -0.11226582527160645
  - -0.10552597045898438
  - -0.10418415069580078
  - -0.09418344497680664
  - -0.1006474494934082
  - -0.10732150077819824
  - -0.10419678688049316
  - -0.09437990188598633
  - -0.09827518463134766
  - -0.10518360137939453
  - -0.10806727409362793
  - -0.10417413711547852
  - -0.10680150985717773
  - -0.1053304672241211
  - -0.11581707000732422
  - -0.10321044921875
  - -0.10520792007446289
  - -0.10439443588256836
  - -0.10499954223632812
  - -1.0111291408538818
  - -3.4689903259277344
  - -0.10814905166625977
  - -0.09709835052490234
  - -0.10412073135375977
  - -0.10203695297241211
  - -0.10721445083618164
  - -0.11065864562988281
  - -0.10484504699707031
  - -0.10390520095825195
  - -0.06926561892032623
  - -0.11149811744689941
  - -0.10607028007507324
  - -0.1086888313293457
  - -0.09889602661132812
  - -0.10400772094726562
  - -0.10745382308959961
  - -0.10493755340576172
  - -0.1040806770324707
  - -0.10527849197387695
  - -0.11992597579956055
  - -0.10613203048706055
  - -0.10369205474853516
  - -0.16867288947105408
  - -0.10679197311401367
  - -0.10068273544311523
  - -0.10542964935302734
  - -0.10427427291870117
  - -0.17954473197460175
- - -0.10948896408081055
  - -0.10608768463134766
  - -0.10551333427429199
  - -0.10421967506408691
  - -0.10090112686157227
  - -0.11182212829589844
  - -0.1072854995727539
  - -0.10385656356811523
  - -0.10738039016723633
  - -0.10513448715209961
  - -0.10628604888916016
  - -0.12885597348213196
  - -0.1096336841583252
  - -0.10521888732910156
  - -0.11913728713989258
  - -0.11051416397094727
  - -0.10697078704833984
  - -0.10099649429321289
  - -0.10612344741821289
  - -0.10502386093139648
  - -0.10508489608764648
  - -0.1068749725818634
  - -0.11226582527160645
  - -0.10552597045898438
  - -0.10418415069580078
  - -0.09418344497680664
  - -0.1006474494934082
  - -0.10732150077819824
  - -0.10419678688049316
  - -0.09437990188598633
  - -0.09827518463134766
  - -0.10518360137939453
  - -0.10806727409362793
  - -0.10417413711547852
  - -0.10680150985717773
  - -0.1053304672241211
  - -0.11581707000732422
  - -0.10321044921875
  - -0.10520792007446289
  - -0.10439443588256836
  - -0.10499954223632812
  - -4.251535892486572
  - -0.11135101318359375
  - -0.10564732551574707
  - -0.09051370620727539
  - -0.10319852828979492
  - -0.10170221328735352
  - -0.104156494140625
  - -0.11028480529785156
  - -0.10463857650756836
  - -0.10358142852783203
  - -0.07216145098209381
  - -0.11184096336364746
  - -0.10597920417785645
  - -0.10810518264770508
  - -0.09859323501586914
  - -0.1033329963684082
  - -0.10752725601196289
  - -0.1048727035522461
  - -0.10124540328979492
  - -0.10439395904541016
  - -0.22251081466674805
  - -0.10736799240112305
  - -0.10309028625488281
  - -0.24138867855072021
  - -0.11057233810424805
  - -0.09856128692626953
  - -0.10584831237792969
  - -0.10439872741699219
  - -0.15784190595149994
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryCode'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Name'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
  - ('from', (True, False))
  - ('table_unit*', 2)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryCode'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryCode'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryCode'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryCode'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryCode'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'CountryCode'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (True, False, False))
  - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 1)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'HeadOfState'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Language'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'countrylanguage'
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'country'
