db: tests-examples/db2csv/concert_singer/tables/concert_singer.sqlite
inputs:
 - tests-examples/db2csv/concert_singer/tables/singer.csv
output: tests-examples/db2csv/concert_singer/tables/0011_dev.csv
raw_question: Show all countries and the number of singers in each country. 
question_index: 10 
has_limit: False 
has_order_by: False 
order_by_direction: []
constants: []
join_columns: []
groupby_columns:
 - country
functions:
 - count
columns: []
filters: []
ieu: []
comment: |-
  SELECT country,
         count(*)
  FROM singer
  GROUP BY country

sql: |-
  SELECT country,
         count(*)
  FROM singer
  GROUP BY country
smbop_beam_join_columns:
- []
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_groupby_columns:
- - country
- - country
- - country
- []
- []
- - country
- []
- []
- []
smbop_beam_tables:
- - tests-examples/db2csv/concert_singer/tables/singer.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
  - tests-examples/db2csv/concert_singer/tables/singer_in_concert.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
  - tests-examples/db2csv/concert_singer/tables/concert.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
  - tests-examples/db2csv/concert_singer/tables/concert.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
  - tests-examples/db2csv/concert_singer/tables/singer_in_concert.csv
smbop_beam_constants:
- []
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
- - count
- - count
- - count
smbop_beam_columns:
- []
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_filters:
- []
- []
- []
- []
- []
- []
- []
- []
- []
smbop_beam_inferred_code:
  - SELECT singer.country , COUNT( * ) FROM singer GROUP BY singer.country
  - SELECT singer.country , COUNT( * ) FROM singer_in_concert , singer GROUP BY singer.country
  - SELECT singer.country , COUNT( * ) FROM concert , singer GROUP BY singer.country
  - SELECT singer.country , COUNT( * ) FROM singer ORDER BY singer.country DESC
  - SELECT singer.country , COUNT( * ) FROM singer ORDER BY singer.country ASC
  - SELECT singer.country , COUNT( * ) FROM singer GROUP BY singer.country ORDER BY singer.country ASC
  - SELECT singer.country , COUNT( * ) FROM singer
  - SELECT singer.country , COUNT( * ) FROM concert , singer
  - SELECT singer.country , COUNT( * ) FROM singer_in_concert , singer
smbop_beam_inferred_code_w_terminals:
  - SELECT singer.country , COUNT( * ) FROM singer GROUP BY singer.country
  - SELECT singer.country , COUNT( * ) FROM singer_in_concert , singer GROUP BY singer.country
  - SELECT singer.country , COUNT( * ) FROM concert , singer GROUP BY singer.country
  - SELECT singer.country , COUNT( * ) FROM singer ORDER BY singer.country DESC
  - SELECT singer.country , COUNT( * ) FROM singer ORDER BY singer.country ASC
  - SELECT singer.country , COUNT( * ) FROM singer GROUP BY singer.country ORDER BY singer.country ASC
  - SELECT singer.country , COUNT( * ) FROM singer
  - SELECT singer.country , COUNT( * ) FROM concert , singer
  - SELECT singer.country , COUNT( * ) FROM singer_in_concert , singer
smbop_beam_has_limit:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
smbop_beam_has_order_by:
  - False
  - False
  - False
  - True
  - True
  - True
  - False
  - False
  - False
smbop_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_join_columns:
- []
- []
- []
- - singer_id
  - stadium_id
  - concert_id
- - singer_id
  - concert_id
- - singer_id
- []
- - singer_id
  - concert_id
ratsql_beam_groupby_columns:
- - country
- - country
- - country
- - country
- - country
- - country
- - country
- - country
ratsql_beam_tables:
- - tests-examples/db2csv/concert_singer/tables/singer.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
- - tests-examples/db2csv/concert_singer/tables/stadium.csv
  - tests-examples/db2csv/concert_singer/tables/singer_in_concert.csv
  - tests-examples/db2csv/concert_singer/tables/singer.csv
  - tests-examples/db2csv/concert_singer/tables/concert.csv
- - tests-examples/db2csv/concert_singer/tables/singer_in_concert.csv
  - tests-examples/db2csv/concert_singer/tables/singer.csv
  - tests-examples/db2csv/concert_singer/tables/concert.csv
- - tests-examples/db2csv/concert_singer/tables/singer_in_concert.csv
  - tests-examples/db2csv/concert_singer/tables/singer.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
- - tests-examples/db2csv/concert_singer/tables/singer_in_concert.csv
  - tests-examples/db2csv/concert_singer/tables/singer.csv
  - tests-examples/db2csv/concert_singer/tables/concert.csv
ratsql_beam_constants:
- []
- []
- []
- []
- - '1'
- []
- []
- []
- []
- []
ratsql_beam_functions:
- - count
- - count
- - count
- - count
- - count
- - count
- - count
- - count
ratsql_beam_columns:
- []
- []
- []
- []
- []
- []
- - country
- []
ratsql_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_filters:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_inferred_code:
  - SELECT singer.Country, Count(*) FROM singer GROUP BY singer.Country
  - SELECT DISTINCT singer.Country, Count(*) FROM singer GROUP BY singer.Country
  - SELECT singer.Country, Count(*) FROM singer GROUP BY DISTINCT singer.Country
  - SELECT singer.Country, Count(DISTINCT *) FROM singer GROUP BY singer.Country
  - SELECT singer.Country, Count(*) FROM singer GROUP BY singer.Country LIMIT 1
  - SELECT singer.Country, Count(*) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY singer.Country
  - SELECT singer.Country, Count(*) FROM singer JOIN concert JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID AND singer_in_concert.concert_ID = concert.concert_ID GROUP BY singer.Country
  - SELECT singer.Country, Count(*) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Country
  - SELECT singer.Country, Count(DISTINCT singer.Country) FROM singer GROUP BY singer.Country
  - SELECT concert.Stadium_ID, Count(*) FROM singer JOIN concert JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID AND singer_in_concert.concert_ID = concert.concert_ID GROUP BY singer.Country
ratsql_beam_inferred_code_w_terminals:
  - SELECT singer.Country, Count(*) FROM singer GROUP BY singer.Country
  - SELECT DISTINCT singer.Country, Count(*) FROM singer GROUP BY singer.Country
  - SELECT singer.Country, Count(*) FROM singer GROUP BY DISTINCT singer.Country
  - SELECT singer.Country, Count(DISTINCT *) FROM singer GROUP BY singer.Country
  - SELECT singer.Country, Count(*) FROM singer GROUP BY singer.Country LIMIT 1
  - SELECT singer.Country, Count(*) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY singer.Country
  - SELECT singer.Country, Count(*) FROM singer JOIN concert JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID AND singer_in_concert.concert_ID = concert.concert_ID GROUP BY singer.Country
  - SELECT singer.Country, Count(*) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Country
  - SELECT singer.Country, Count(DISTINCT singer.Country) FROM singer GROUP BY singer.Country
  - SELECT concert.Stadium_ID, Count(*) FROM singer JOIN concert JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID AND singer_in_concert.concert_ID = concert.concert_ID GROUP BY singer.Country
ratsql_beam_has_limit:
  - False
  - False
  - True
  - False
  - False
  - False
  - False
  - False
ratsql_beam_has_order_by:
  - False
  - False
  - False
  - False
  - False
  - False
  - False
  - False
ratsql_beam_order_by_direction:
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_score_history:
- - -0.1041421890258789
  - -0.10680913925170898
  - -0.10693693161010742
  - -0.10405755043029785
  - -0.12224483489990234
  - -0.10584354400634766
  - -0.10662508010864258
  - -0.10399436950683594
  - -0.10529327392578125
  - -0.10497856140136719
  - -0.10501766204833984
  - -0.12351648509502411
  - -0.11347222328186035
  - -0.10573697090148926
  - -0.10182380676269531
  - -0.11328744888305664
  - -0.10349082946777344
  - -0.1053781509399414
  - -0.1064901351928711
  - -0.10555839538574219
  - -0.1245150938630104
  - -0.11234736442565918
  - -0.10568976402282715
  - -0.11536788940429688
  - -0.11224222183227539
  - -0.10255289077758789
  - -0.10463237762451172
  - -0.10485124588012695
  - -0.10394077748060226
  - -0.11139130592346191
  - -0.10590434074401855
  - -0.10294342041015625
  - -0.1073458194732666
  - -0.1049947738647461
  - -0.09839773178100586
  - -0.10607576370239258
  - -0.11037683486938477
  - -0.10477113723754883
  - -0.1038656234741211
  - -0.08721528947353363
- - -0.1041421890258789
  - -0.10680913925170898
  - -0.10693693161010742
  - -0.10405755043029785
  - -0.12224483489990234
  - -0.10584354400634766
  - -0.10662508010864258
  - -0.10399436950683594
  - -0.10529327392578125
  - -0.10497856140136719
  - -0.10501766204833984
  - -0.12351648509502411
  - -3.4365503787994385
  - -0.10552120208740234
  - -0.10173177719116211
  - -0.11295747756958008
  - -0.10283327102661133
  - -0.10541868209838867
  - -0.10667896270751953
  - -0.10543060302734375
  - -0.127035453915596
  - -0.11223125457763672
  - -0.1057119369506836
  - -0.11632490158081055
  - -0.1123666763305664
  - -0.10204172134399414
  - -0.10473108291625977
  - -0.10488319396972656
  - -0.10239329189062119
  - -0.11139225959777832
  - -0.10589909553527832
  - -0.10297679901123047
  - -0.10734272003173828
  - -0.1049954891204834
  - -0.0984354019165039
  - -0.10611486434936523
  - -0.11050176620483398
  - -0.1047964096069336
  - -0.1038656234741211
  - -0.08747309446334839
- - -0.1041421890258789
  - -0.10680913925170898
  - -0.10693693161010742
  - -0.10405755043029785
  - -0.12224483489990234
  - -0.10584354400634766
  - -0.10662508010864258
  - -0.10399436950683594
  - -0.10529327392578125
  - -0.10497856140136719
  - -0.10501766204833984
  - -0.12351648509502411
  - -0.11347222328186035
  - -0.10573697090148926
  - -0.10182380676269531
  - -0.11328744888305664
  - -0.10349082946777344
  - -0.1053781509399414
  - -0.1064901351928711
  - -0.10555839538574219
  - -0.1245150938630104
  - -0.11234736442565918
  - -0.10568976402282715
  - -0.11536788940429688
  - -0.11224222183227539
  - -0.10255289077758789
  - -0.10463237762451172
  - -0.10485124588012695
  - -0.10394077748060226
  - -3.4435815811157227
  - -0.10560798645019531
  - -0.10385656356811523
  - -0.10726547241210938
  - -0.10503554344177246
  - -0.098358154296875
  - -0.10599851608276367
  - -0.1104888916015625
  - -0.10481595993041992
  - -0.10383749008178711
  - -0.08788479119539261
- - -0.1041421890258789
  - -0.10680913925170898
  - -0.10693693161010742
  - -0.10405755043029785
  - -0.12224483489990234
  - -0.10584354400634766
  - -0.10662508010864258
  - -0.10399436950683594
  - -0.10529327392578125
  - -0.10497856140136719
  - -0.10501766204833984
  - -0.12351648509502411
  - -0.11347222328186035
  - -0.10573697090148926
  - -0.10182380676269531
  - -0.11328744888305664
  - -0.10349082946777344
  - -0.1053781509399414
  - -0.1064901351928711
  - -0.10555839538574219
  - -0.1245150938630104
  - -3.449326992034912
  - -0.1048281192779541
  - -0.1208491325378418
  - -0.1111912727355957
  - -0.10214424133300781
  - -0.10468387603759766
  - -0.10486125946044922
  - -0.10519575327634811
  - -0.11145496368408203
  - -0.10589241981506348
  - -0.10299062728881836
  - -0.10735940933227539
  - -0.10499048233032227
  - -0.09844303131103516
  - -0.10585832595825195
  - -0.11032390594482422
  - -0.10477495193481445
  - -0.10387277603149414
  - -0.08688726276159286
- - -0.1041421890258789
  - -0.10680913925170898
  - -0.10693693161010742
  - -0.10405755043029785
  - -0.12224483489990234
  - -0.10584354400634766
  - -0.10662508010864258
  - -0.10399436950683594
  - -0.10529327392578125
  - -0.10497856140136719
  - -0.10501766204833984
  - -0.12351648509502411
  - -0.11347222328186035
  - -0.10573697090148926
  - -0.10182380676269531
  - -0.11328744888305664
  - -0.10349082946777344
  - -0.1053781509399414
  - -0.1064901351928711
  - -0.10555839538574219
  - -0.1245150938630104
  - -0.11234736442565918
  - -0.10568976402282715
  - -0.11536788940429688
  - -0.11224222183227539
  - -0.10255289077758789
  - -0.10463237762451172
  - -0.10485124588012695
  - -0.10394077748060226
  - -0.11139130592346191
  - -0.10590434074401855
  - -0.10294342041015625
  - -3.5490500926971436
  - -0.1051476001739502
  - -0.09837675094604492
  - -0.1063237190246582
  - -0.11021280288696289
  - -0.10481548309326172
  - -0.10384130477905273
  - -0.08714165538549423
- - -0.1041421890258789
  - -0.10680913925170898
  - -0.10693693161010742
  - -0.10405755043029785
  - -0.12224483489990234
  - -0.10584354400634766
  - -0.10662508010864258
  - -0.10399436950683594
  - -0.10529327392578125
  - -0.10497856140136719
  - -0.10501766204833984
  - -0.12351648509502411
  - -0.11347222328186035
  - -0.10573697090148926
  - -0.10182380676269531
  - -0.11328744888305664
  - -0.10349082946777344
  - -0.1053781509399414
  - -0.1064901351928711
  - -0.10555839538574219
  - -0.1245150938630104
  - -0.11234736442565918
  - -0.10568976402282715
  - -0.11536788940429688
  - -0.11224222183227539
  - -0.10255289077758789
  - -0.10463237762451172
  - -0.10485124588012695
  - -0.10394077748060226
  - -0.11139130592346191
  - -0.10590434074401855
  - -0.10294342041015625
  - -0.1073458194732666
  - -0.1049947738647461
  - -0.09839773178100586
  - -0.10607576370239258
  - -0.11037683486938477
  - -0.10477113723754883
  - -0.1038656234741211
  - -3.550353765487671
- - -0.1041421890258789
  - -0.10680913925170898
  - -0.10693693161010742
  - -0.10405755043029785
  - -0.12224483489990234
  - -0.10584354400634766
  - -0.10662508010864258
  - -0.10399436950683594
  - -0.10529327392578125
  - -0.10497856140136719
  - -0.10501766204833984
  - -0.12351648509502411
  - -0.11347222328186035
  - -0.10573697090148926
  - -0.10182380676269531
  - -0.11328744888305664
  - -0.10349082946777344
  - -0.1053781509399414
  - -0.1064901351928711
  - -0.10555839538574219
  - -0.1245150938630104
  - -0.11234736442565918
  - -0.10568976402282715
  - -0.11536788940429688
  - -0.11224222183227539
  - -0.10255289077758789
  - -0.10463237762451172
  - -0.10485124588012695
  - -0.10394077748060226
  - -0.11139130592346191
  - -0.10590434074401855
  - -0.10294342041015625
  - -0.1073458194732666
  - -0.1049947738647461
  - -0.09839773178100586
  - -0.10607576370239258
  - -0.11037683486938477
  - -0.10477113723754883
  - -0.1038656234741211
  - -3.5741937160491943
- - -0.1041421890258789
  - -0.10680913925170898
  - -0.10693693161010742
  - -0.10405755043029785
  - -0.12224483489990234
  - -0.10584354400634766
  - -0.10662508010864258
  - -0.10399436950683594
  - -0.10529327392578125
  - -0.10497856140136719
  - -0.10501766204833984
  - -0.12351648509502411
  - -0.11347222328186035
  - -0.10573697090148926
  - -0.10182380676269531
  - -0.11328744888305664
  - -0.10349082946777344
  - -0.1053781509399414
  - -0.1064901351928711
  - -0.10555839538574219
  - -0.1245150938630104
  - -0.11234736442565918
  - -0.10568976402282715
  - -0.11536788940429688
  - -0.11224222183227539
  - -0.10255289077758789
  - -0.10463237762451172
  - -0.10485124588012695
  - -0.10394077748060226
  - -0.11139130592346191
  - -0.10590434074401855
  - -0.10294342041015625
  - -0.1073458194732666
  - -0.1049947738647461
  - -0.09839773178100586
  - -0.10607576370239258
  - -0.11037683486938477
  - -0.10477113723754883
  - -0.1038656234741211
  - -3.620558023452759
- - -0.1041421890258789
  - -0.10680913925170898
  - -0.10693693161010742
  - -0.10405755043029785
  - -0.12224483489990234
  - -0.10584354400634766
  - -0.10662508010864258
  - -0.10399436950683594
  - -0.10529327392578125
  - -0.10497856140136719
  - -0.10501766204833984
  - -0.12351648509502411
  - -0.11347222328186035
  - -0.10573697090148926
  - -0.10182380676269531
  - -0.11328744888305664
  - -0.10349082946777344
  - -0.1053781509399414
  - -0.1064901351928711
  - -0.10555839538574219
  - -4.569472789764404
  - -0.09873509407043457
  - -0.10484027862548828
  - -0.11343097686767578
  - -0.10517644882202148
  - -0.10228967666625977
  - -0.10502958297729492
  - -0.10460472106933594
  - -0.10511644929647446
  - -0.11205482482910156
  - -0.10583305358886719
  - -0.10245752334594727
  - -0.10741162300109863
  - -0.10495257377624512
  - -0.0982060432434082
  - -0.10468482971191406
  - -0.10987377166748047
  - -0.10469770431518555
  - -0.10409879684448242
  - -0.08484990149736404
- - -0.1041421890258789
  - -0.10680913925170898
  - -0.10693693161010742
  - -0.10405755043029785
  - -0.12224483489990234
  - -0.10584354400634766
  - -0.10662508010864258
  - -0.10399436950683594
  - -0.10529327392578125
  - -0.10497856140136719
  - -0.10501766204833984
  - -5.081822872161865
  - -0.11207699775695801
  - -0.10578274726867676
  - -0.10210227966308594
  - -0.11353349685668945
  - -0.10232067108154297
  - -0.10497713088989258
  - -0.10618209838867188
  - -0.10625505447387695
  - -0.111304871737957
  - -0.1115882396697998
  - -0.10502958297729492
  - -0.11391735076904297
  - -0.1132206916809082
  - -0.10234928131103516
  - -0.10435819625854492
  - -0.10493230819702148
  - -0.10175034403800964
  - -0.11092376708984375
  - -0.1058349609375
  - -0.1030116081237793
  - -0.10712957382202148
  - -0.10501456260681152
  - -0.09815359115600586
  - -0.10735559463500977
  - -0.11001157760620117
  - -0.1044931411743164
  - -0.10393142700195312
  - -0.08513010293245316
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'True'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'True'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'True'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'True'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'stadium'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'concert'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer_in_concert'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'True'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 2)
  - ('agg', (True, True))
  - ('agg_type', 'NoneAggOp')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Stadium_ID'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Count')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - '*'
  - 'False'
  - '<EOS>'
  - ('sql_where', (False,))
  - ('sql_groupby', (True, False))
  - ('col_unit*', 1)
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
