db: tests-examples/db2csv/concert_singer/tables/concert_singer.sqlite
inputs:
 - tests-examples/db2csv/concert_singer/tables/singer.csv
output: tests-examples/db2csv/concert_singer/tables/0005_dev.csv
raw_question: What is the average, minimum, and maximum age of all singers from France? 
question_index: 4 
constants:
 - France
functions:
 - min
 - max
 - avg
columns:
 - age
 - country
filters:
 - '='
comment: |-
  SELECT avg(age),
         min(age),
         max(age)
  FROM singer
  WHERE country = 'France'

sql: |-
  SELECT avg(age),
         min(age),
         max(age)
  FROM singer
  WHERE country = 'France'
smbop_beam_join_columns:
- []
smbop_beam_groupby_columns:
- []
smbop_beam_tables:
- - tests-examples/db2csv/concert_singer/tables/singer.csv
smbop_beam_constants:
- - France
smbop_beam_functions:
- - min
  - max
  - avg
smbop_beam_columns:
- - age
  - country
smbop_beam_ieu:
- []
smbop_beam_filters:
- - '='
smbop_beam_inferred_code:
  - SELECT AVG( singer.age ) , MIN( singer.age ) , MAX( singer.age ) FROM singer WHERE singer.country = 'France'
smbop_beam_inferred_code_w_terminals:
  - SELECT AVG( singer.age ) , MIN( singer.age ) , MAX( singer.age ) FROM singer WHERE singer.country = 'France'
ratsql_beam_join_columns:
- - singer_id
  - stadium_id
  - concert_id
- []
- - singer_id
  - stadium_id
  - concert_id
- - singer_id
  - stadium_id
  - concert_id
- - singer_id
  - stadium_id
  - concert_id
- - singer_id
  - stadium_id
  - concert_id
- - singer_id
  - stadium_id
  - concert_id
- - singer_id
  - stadium_id
  - concert_id
- - singer_id
  - stadium_id
  - concert_id
ratsql_beam_groupby_columns:
- []
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_tables:
- - tests-examples/db2csv/concert_singer/tables/singer.csv
  - tests-examples/db2csv/concert_singer/tables/stadium.csv
  - tests-examples/db2csv/concert_singer/tables/concert.csv
  - tests-examples/db2csv/concert_singer/tables/singer_in_concert.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
  - tests-examples/db2csv/concert_singer/tables/stadium.csv
  - tests-examples/db2csv/concert_singer/tables/concert.csv
  - tests-examples/db2csv/concert_singer/tables/singer_in_concert.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
  - tests-examples/db2csv/concert_singer/tables/stadium.csv
  - tests-examples/db2csv/concert_singer/tables/concert.csv
  - tests-examples/db2csv/concert_singer/tables/singer_in_concert.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
  - tests-examples/db2csv/concert_singer/tables/stadium.csv
  - tests-examples/db2csv/concert_singer/tables/concert.csv
  - tests-examples/db2csv/concert_singer/tables/singer_in_concert.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
  - tests-examples/db2csv/concert_singer/tables/stadium.csv
  - tests-examples/db2csv/concert_singer/tables/concert.csv
  - tests-examples/db2csv/concert_singer/tables/singer_in_concert.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
  - tests-examples/db2csv/concert_singer/tables/stadium.csv
  - tests-examples/db2csv/concert_singer/tables/concert.csv
  - tests-examples/db2csv/concert_singer/tables/singer_in_concert.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
  - tests-examples/db2csv/concert_singer/tables/stadium.csv
  - tests-examples/db2csv/concert_singer/tables/concert.csv
  - tests-examples/db2csv/concert_singer/tables/singer_in_concert.csv
- - tests-examples/db2csv/concert_singer/tables/singer.csv
  - tests-examples/db2csv/concert_singer/tables/stadium.csv
  - tests-examples/db2csv/concert_singer/tables/concert.csv
  - tests-examples/db2csv/concert_singer/tables/singer_in_concert.csv
ratsql_beam_constants:
- - France
- - France
- - France
- - France
- - France
- - France
- - France
- - France
- - France
ratsql_beam_functions:
- - min
  - max
  - avg
- - min
  - max
  - avg
- - min
  - max
  - avg
- - min
  - max
  - avg
- - min
  - max
  - avg
- - min
  - max
  - avg
- - min
  - max
  - avg
- - min
  - max
  - avg
- - min
  - max
  - avg
ratsql_beam_columns:
- - age
  - average
  - country
- - age
  - country
- - age
  - average
  - country
- - age
  - average
  - country
- - age
  - average
  - country
- - age
  - average
  - country
- - age
  - average
  - country
- - age
  - average
  - country
- - age
  - average
  - country
ratsql_beam_ieu:
- []
- []
- []
- []
- []
- []
- []
- []
- []
ratsql_beam_filters:
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
- - '='
ratsql_beam_inferred_code:
  - SELECT Avg(stadium.Average), Min(singer.Age), Max(singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Country = 'terminal'
  - SELECT Avg(singer.Age), Min(singer.Age), Max(singer.Age) FROM singer WHERE singer.Country = 'terminal'
  - SELECT Avg(stadium.Average), Min(stadium.Average), Max(singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Country = 'terminal'
  - SELECT Avg(stadium.Average), Min(singer.Age), Max(DISTINCT singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Country = 'terminal'
  - SELECT Avg(stadium.Average), Min(singer.Age), Max(singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID WHERE DISTINCT singer.Country = 'terminal'
  - SELECT Avg(stadium.Average), Min(DISTINCT singer.Age), Max(singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Country = 'terminal'
  - SELECT Avg(DISTINCT stadium.Average), Min(singer.Age), Max(singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Country = 'terminal'
  - SELECT Avg(stadium.Average), Min(singer.Age), Max(singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID AND stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Country = 'terminal'
  - SELECT Avg(stadium.Average), Min(singer.Age), Max(singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Country = 'terminal' LIMIT 1
  - SELECT Avg(stadium.Average), Min(singer.Age), Max(singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID AND stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID AND concert.concert_ID = singer_in_concert.concert_ID WHERE singer.Country = 'terminal'
ratsql_beam_inferred_code_w_terminals:
  - SELECT Avg(stadium.Average), Min(singer.Age), Max(singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Country = 'France'
  - SELECT Avg(singer.Age), Min(singer.Age), Max(singer.Age) FROM singer WHERE singer.Country = 'France'
  - SELECT Avg(stadium.Average), Min(stadium.Average), Max(singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Country = 'France'
  - SELECT Avg(stadium.Average), Min(singer.Age), Max(DISTINCT singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Country = 'France'
  - SELECT Avg(stadium.Average), Min(singer.Age), Max(singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID WHERE DISTINCT singer.Country = 'France'
  - SELECT Avg(stadium.Average), Min(DISTINCT singer.Age), Max(singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Country = 'France'
  - SELECT Avg(DISTINCT stadium.Average), Min(singer.Age), Max(singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Country = 'France'
  - SELECT Avg(stadium.Average), Min(singer.Age), Max(singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID AND stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Country = 'France'
  - SELECT Avg(stadium.Average), Min(singer.Age), Max(singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Country = 'France' LIMIT 1
  - SELECT Avg(stadium.Average), Min(singer.Age), Max(singer.Age) FROM stadium JOIN singer JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID AND stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID AND singer_in_concert.Singer_ID = singer.Singer_ID AND concert.concert_ID = singer_in_concert.concert_ID WHERE singer.Country = 'France'
ratsql_beam_score_history:
- - -0.10410833358764648
  - -0.10415458679199219
  - -0.10454010963439941
  - -0.10447168350219727
  - -0.1369171142578125
  - -0.09807825088500977
  - -0.1294264793395996
  - -0.1051492691040039
  - -0.10664606094360352
  - -0.1039285659790039
  - -0.10600137710571289
  - -0.17037630081176758
  - -0.11078548431396484
  - -0.10492992401123047
  - -0.11216259002685547
  - -0.10068321228027344
  - -0.09786128997802734
  - -0.10671567916870117
  - -0.10457563400268555
  - -0.10544490814208984
  - -0.1864239126443863
  - -0.11076092720031738
  - -0.10545063018798828
  - -0.11210155487060547
  - -0.1382584571838379
  - -0.10099315643310547
  - -0.10954904556274414
  - -0.1045379638671875
  - -0.10520362854003906
  - -0.051509611308574677
  - -0.1136164665222168
  - -0.1050877571105957
  - -0.09438467025756836
  - -0.10658502578735352
  - -0.10071229934692383
  - -0.10132741928100586
  - -0.10549783706665039
  - -0.10471153259277344
  - -0.10362911224365234
  - -0.07325088232755661
  - -0.11191558837890625
  - -0.10546040534973145
  - -0.10691356658935547
  - -0.1012563705444336
  - -0.10245370864868164
  - -0.10767316818237305
  - -0.10456585884094238
  - -0.0982356071472168
  - -0.10528755187988281
  - -0.20451831817626953
  - -0.10475349426269531
  - -0.10323619842529297
  - -0.09133818000555038
- - -0.10410833358764648
  - -0.10415458679199219
  - -0.10454010963439941
  - -0.10447168350219727
  - -0.1369171142578125
  - -0.09807825088500977
  - -0.1294264793395996
  - -0.1051492691040039
  - -0.10664606094360352
  - -0.1039285659790039
  - -0.10600137710571289
  - -2.531324863433838
  - -0.1153411865234375
  - -0.10462760925292969
  - -0.10206222534179688
  - -0.08589982986450195
  - -0.10101509094238281
  - -0.10639762878417969
  - -0.1055455207824707
  - -0.1049356460571289
  - -0.09776441752910614
  - -0.11238265037536621
  - -0.10508465766906738
  - -0.1124420166015625
  - -0.158172607421875
  - -0.10086870193481445
  - -0.11011838912963867
  - -0.10452079772949219
  - -0.10520362854003906
  - -0.04850931465625763
  - -0.11378622055053711
  - -0.10512208938598633
  - -0.09468936920166016
  - -0.10657644271850586
  - -0.10077285766601562
  - -0.10134649276733398
  - -0.10549449920654297
  - -0.10465860366821289
  - -0.10370445251464844
  - -0.07203500717878342
  - -0.11183333396911621
  - -0.10546207427978516
  - -0.10693073272705078
  - -0.10123968124389648
  - -0.10236549377441406
  - -0.10789704322814941
  - -0.10455060005187988
  - -0.0979609489440918
  - -0.1040945053100586
  - -0.10947799682617188
  - -0.10500812530517578
  - -0.10396242141723633
  - -0.07411090284585953
- - -0.10410833358764648
  - -0.10415458679199219
  - -0.10454010963439941
  - -0.10447168350219727
  - -0.1369171142578125
  - -0.09807825088500977
  - -0.1294264793395996
  - -0.1051492691040039
  - -0.10664606094360352
  - -0.1039285659790039
  - -0.10600137710571289
  - -0.17037630081176758
  - -0.11078548431396484
  - -0.10492992401123047
  - -0.11216259002685547
  - -0.10068321228027344
  - -0.09786128997802734
  - -0.10671567916870117
  - -0.10457563400268555
  - -0.10544490814208984
  - -3.2041335105895996
  - -0.10932326316833496
  - -0.10515260696411133
  - -0.10759878158569336
  - -0.07169866561889648
  - -0.10099935531616211
  - -0.10774755477905273
  - -0.10435247421264648
  - -0.10512399673461914
  - -0.059542231261730194
  - -0.11350345611572266
  - -0.10508394241333008
  - -0.09395122528076172
  - -0.1066889762878418
  - -0.10064840316772461
  - -0.10129547119140625
  - -0.10564088821411133
  - -0.104644775390625
  - -0.1034393310546875
  - -0.07703006267547607
  - -0.11197185516357422
  - -0.1054544448852539
  - -0.10679244995117188
  - -0.10124349594116211
  - -0.10245132446289062
  - -0.10768413543701172
  - -0.10456514358520508
  - -0.09816980361938477
  - -0.10526323318481445
  - -0.21659278869628906
  - -0.10475301742553711
  - -0.10323905944824219
  - -0.09115418046712875
- - -0.10410833358764648
  - -0.10415458679199219
  - -0.10454010963439941
  - -0.10447168350219727
  - -0.1369171142578125
  - -0.09807825088500977
  - -0.1294264793395996
  - -0.1051492691040039
  - -0.10664606094360352
  - -0.1039285659790039
  - -0.10600137710571289
  - -0.17037630081176758
  - -0.11078548431396484
  - -0.10492992401123047
  - -0.11216259002685547
  - -0.10068321228027344
  - -0.09786128997802734
  - -0.10671567916870117
  - -0.10457563400268555
  - -0.10544490814208984
  - -0.1864239126443863
  - -0.11076092720031738
  - -0.10545063018798828
  - -0.11210155487060547
  - -0.1382584571838379
  - -0.10099315643310547
  - -0.10954904556274414
  - -0.1045379638671875
  - -0.10520362854003906
  - -0.051509611308574677
  - -3.435230255126953
  - -0.10509109497070312
  - -0.0952000617980957
  - -0.10704517364501953
  - -0.10058069229125977
  - -0.10124921798706055
  - -0.10567188262939453
  - -0.10477495193481445
  - -0.10348653793334961
  - -0.07220171391963959
  - -0.11190390586853027
  - -0.10544633865356445
  - -0.10692501068115234
  - -0.1012578010559082
  - -0.10241222381591797
  - -0.10780119895935059
  - -0.10455513000488281
  - -0.09811735153198242
  - -0.10509586334228516
  - -0.14791536331176758
  - -0.10477781295776367
  - -0.1031947135925293
  - -0.08912855386734009
- - -0.10410833358764648
  - -0.10415458679199219
  - -0.10454010963439941
  - -0.10447168350219727
  - -0.1369171142578125
  - -0.09807825088500977
  - -0.1294264793395996
  - -0.1051492691040039
  - -0.10664606094360352
  - -0.1039285659790039
  - -0.10600137710571289
  - -0.17037630081176758
  - -0.11078548431396484
  - -0.10492992401123047
  - -0.11216259002685547
  - -0.10068321228027344
  - -0.09786128997802734
  - -0.10671567916870117
  - -0.10457563400268555
  - -0.10544490814208984
  - -0.1864239126443863
  - -0.11076092720031738
  - -0.10545063018798828
  - -0.11210155487060547
  - -0.1382584571838379
  - -0.10099315643310547
  - -0.10954904556274414
  - -0.1045379638671875
  - -0.10520362854003906
  - -0.051509611308574677
  - -0.1136164665222168
  - -0.1050877571105957
  - -0.09438467025756836
  - -0.10658502578735352
  - -0.10071229934692383
  - -0.10132741928100586
  - -0.10549783706665039
  - -0.10471153259277344
  - -0.10362911224365234
  - -0.07325088232755661
  - -3.4385826587677
  - -0.10549235343933105
  - -0.10577726364135742
  - -0.1011509895324707
  - -0.10238361358642578
  - -0.10776424407958984
  - -0.10457754135131836
  - -0.09835052490234375
  - -0.10515308380126953
  - -0.17492914199829102
  - -0.1047663688659668
  - -0.10322332382202148
  - -0.09081676602363586
- - -0.10410833358764648
  - -0.10415458679199219
  - -0.10454010963439941
  - -0.10447168350219727
  - -0.1369171142578125
  - -0.09807825088500977
  - -0.1294264793395996
  - -0.1051492691040039
  - -0.10664606094360352
  - -0.1039285659790039
  - -0.10600137710571289
  - -0.17037630081176758
  - -0.11078548431396484
  - -0.10492992401123047
  - -0.11216259002685547
  - -0.10068321228027344
  - -0.09786128997802734
  - -0.10671567916870117
  - -0.10457563400268555
  - -0.10544490814208984
  - -0.1864239126443863
  - -3.4773733615875244
  - -0.1052389144897461
  - -0.11298513412475586
  - -0.15056371688842773
  - -0.10103225708007812
  - -0.10972881317138672
  - -0.10464811325073242
  - -0.10511493682861328
  - -0.05437404289841652
  - -0.11353564262390137
  - -0.10508990287780762
  - -0.0943441390991211
  - -0.10653400421142578
  - -0.10070466995239258
  - -0.10132741928100586
  - -0.1055002212524414
  - -0.10471057891845703
  - -0.10362958908081055
  - -0.07315625995397568
  - -0.11190915107727051
  - -0.10546040534973145
  - -0.10691118240356445
  - -0.1012563705444336
  - -0.10241174697875977
  - -0.1078040599822998
  - -0.10455632209777832
  - -0.09812402725219727
  - -0.10508871078491211
  - -0.14546680450439453
  - -0.10477542877197266
  - -0.1031947135925293
  - -0.088924840092659
- - -0.10410833358764648
  - -0.10415458679199219
  - -0.10454010963439941
  - -0.10447168350219727
  - -0.1369171142578125
  - -0.09807825088500977
  - -0.1294264793395996
  - -0.1051492691040039
  - -0.10664606094360352
  - -0.1039285659790039
  - -0.10600137710571289
  - -0.17037630081176758
  - -3.5032455921173096
  - -0.10794758796691895
  - -0.11558008193969727
  - -0.1019129753112793
  - -0.09757423400878906
  - -0.10664081573486328
  - -0.10462188720703125
  - -0.1053462028503418
  - -0.1935388296842575
  - -0.11080455780029297
  - -0.1054377555847168
  - -0.11223649978637695
  - -0.1425461769104004
  - -0.1009678840637207
  - -0.10955238342285156
  - -0.10454320907592773
  - -0.10518932342529297
  - -0.052022725343704224
  - -0.11360049247741699
  - -0.10508918762207031
  - -0.09437417984008789
  - -0.1064767837524414
  - -0.1006937026977539
  - -0.10132598876953125
  - -0.10550737380981445
  - -0.104705810546875
  - -0.10361814498901367
  - -0.07345283031463623
  - -0.11191892623901367
  - -0.10545969009399414
  - -0.10692310333251953
  - -0.10125446319580078
  - -0.10240936279296875
  - -0.10780644416809082
  - -0.10455536842346191
  - -0.09812068939208984
  - -0.1050868034362793
  - -0.14548826217651367
  - -0.10477542877197266
  - -0.10319375991821289
  - -0.08893290907144547
- - -0.10410833358764648
  - -0.10415458679199219
  - -0.10454010963439941
  - -0.10447168350219727
  - -0.1369171142578125
  - -0.09807825088500977
  - -0.1294264793395996
  - -0.1051492691040039
  - -0.10664606094360352
  - -0.1039285659790039
  - -0.10600137710571289
  - -0.17037630081176758
  - -0.11078548431396484
  - -0.10492992401123047
  - -0.11216259002685547
  - -0.10068321228027344
  - -0.09786128997802734
  - -0.10671567916870117
  - -0.10457563400268555
  - -0.10544490814208984
  - -0.1864239126443863
  - -0.11076092720031738
  - -0.10545063018798828
  - -0.11210155487060547
  - -0.1382584571838379
  - -0.10099315643310547
  - -0.10954904556274414
  - -0.1045379638671875
  - -0.10520362854003906
  - -0.051509611308574677
  - -0.1136164665222168
  - -0.1050877571105957
  - -0.09438467025756836
  - -0.10658502578735352
  - -0.10071229934692383
  - -0.10132741928100586
  - -0.10549783706665039
  - -0.10471153259277344
  - -0.10362911224365234
  - -0.07325088232755661
  - -0.11191558837890625
  - -0.10546040534973145
  - -0.10691356658935547
  - -0.1012563705444336
  - -0.10245370864868164
  - -0.10767316818237305
  - -0.10456585884094238
  - -0.0982356071472168
  - -0.10528755187988281
  - -0.20451831817626953
  - -0.10475349426269531
  - -0.10323619842529297
  - -3.4913785457611084
- - -0.10410833358764648
  - -0.10415458679199219
  - -0.10454010963439941
  - -0.10447168350219727
  - -0.1369171142578125
  - -0.09807825088500977
  - -0.1294264793395996
  - -0.1051492691040039
  - -0.10664606094360352
  - -0.1039285659790039
  - -0.10600137710571289
  - -0.17037630081176758
  - -0.11078548431396484
  - -0.10492992401123047
  - -0.11216259002685547
  - -0.10068321228027344
  - -0.09786128997802734
  - -0.10671567916870117
  - -0.10457563400268555
  - -0.10544490814208984
  - -0.1864239126443863
  - -0.11076092720031738
  - -0.10545063018798828
  - -0.11210155487060547
  - -0.1382584571838379
  - -0.10099315643310547
  - -0.10954904556274414
  - -0.1045379638671875
  - -0.10520362854003906
  - -0.051509611308574677
  - -0.1136164665222168
  - -0.1050877571105957
  - -0.09438467025756836
  - -0.10658502578735352
  - -0.10071229934692383
  - -0.10132741928100586
  - -0.10549783706665039
  - -0.10471153259277344
  - -0.10362911224365234
  - -0.07325088232755661
  - -0.11191558837890625
  - -0.10546040534973145
  - -0.10691356658935547
  - -0.1012563705444336
  - -0.10245370864868164
  - -3.5512499809265137
  - -0.1045992374420166
  - -0.09868526458740234
  - -0.10510921478271484
  - -0.16323375701904297
  - -0.10474348068237305
  - -0.10338783264160156
  - -0.08959242701530457
- - -0.10410833358764648
  - -0.10415458679199219
  - -0.10454010963439941
  - -0.10447168350219727
  - -0.1369171142578125
  - -0.09807825088500977
  - -0.1294264793395996
  - -0.1051492691040039
  - -0.10664606094360352
  - -0.1039285659790039
  - -0.10600137710571289
  - -0.17037630081176758
  - -0.11078548431396484
  - -0.10492992401123047
  - -0.11216259002685547
  - -0.10068321228027344
  - -0.09786128997802734
  - -0.10671567916870117
  - -0.10457563400268555
  - -0.10544490814208984
  - -0.1864239126443863
  - -0.11076092720031738
  - -0.10545063018798828
  - -0.11210155487060547
  - -0.1382584571838379
  - -0.10099315643310547
  - -0.10954904556274414
  - -0.1045379638671875
  - -0.10520362854003906
  - -0.051509611308574677
  - -0.1136164665222168
  - -0.1050877571105957
  - -0.09438467025756836
  - -0.10658502578735352
  - -0.10071229934692383
  - -0.10132741928100586
  - -0.10549783706665039
  - -0.10471153259277344
  - -0.10362911224365234
  - -0.07325088232755661
  - -0.11191558837890625
  - -0.10546040534973145
  - -0.10691356658935547
  - -0.1012563705444336
  - -0.10245370864868164
  - -0.10767316818237305
  - -0.10456585884094238
  - -0.0982356071472168
  - -0.10528755187988281
  - -0.20451831817626953
  - -0.10475349426269531
  - -0.10323619842529297
  - -3.542254686355591
ratsql_beam_actions:
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'Avg')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Average'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Min')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Max')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'Avg')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Min')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Max')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'Avg')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Average'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Min')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Average'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Max')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'Avg')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Average'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Min')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Max')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'True'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'Avg')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Average'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Min')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Max')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'True'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'Avg')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Average'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Min')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'True'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Max')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'Avg')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Average'
  - 'True'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Min')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Max')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'Avg')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Average'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Min')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Max')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'concert'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'Avg')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Average'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Min')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Max')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'True'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer'
- - ('sql', (True, True, True, True, True, True))
  - ('select', ('bool', True))
  - 'False'
  - '<EOS>'
  - ('agg*', 3)
  - ('agg', (True, True))
  - ('agg_type', 'Avg')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Average'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Min')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('agg', (True, True))
  - ('agg_type', 'Max')
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Age'
  - 'False'
  - '<EOS>'
  - ('sql_where', (True,))
  - ('cond', 'Eq')
  - ('Eq', (True, True))
  - ('val_unit', 'Column')
  - ('Column', (True,))
  - ('col_unit', (True, 'int', 'bool'))
  - ('agg_type', 'NoneAggOp')
  - 'Country'
  - 'False'
  - '<EOS>'
  - ('val', 'Terminal')
  - ('sql_groupby', (False, False))
  - ('sql_orderby', (False, 'bool'))
  - 'False'
  - '<EOS>'
  - ('sql_ieu', (False, False, False))
  - ('from', (True, False))
  - ('table_unit*', 1)
  - ('table_unit_seq_elem', 'Table')
  - ('Table', ('int',))
  - 'singer_in_concert'
