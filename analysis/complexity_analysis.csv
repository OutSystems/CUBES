name,solution,query,cube_length,kw_length,sql_kw_SELECT,sql_kw_DISTINCT,sql_kw_FROM,sql_kw_ON,sql_kw_WHERE,sql_kw_OVER,sql_kw_DESC,sql_kw_LIMIT,sql_kw_OR,sql_kw_NOT,sql_kw_EXISTS,sql_kw_GROUP,sql_kw_AVG,sql_kw_USER,sql_kw_TIME,sql_kw_COUNT,sql_kw_ROWS,sql_kw_UNBOUNDED,sql_kw_PRECEDING,sql_kw_INTERSECT,sql_kw_POSITION,sql_kw_RESULT,sql_kw_YEAR,sql_kw_RANGE,sql_kw_NO,sql_kw_MONTH,sql_kw_START,sql_kw_END,sql_kw_CHARACTER,sql_kw_REF,sql_kw_BY,dsl_op_summarise,dsl_op_natural_join,dsl_op_filter,dsl_op_mutate,dsl_op_inner_join,dsl_op_left_join,dsl_op_natural_join3,dsl_op_cross_join,dsl_op_anti_join,dsl_op_semi_join,dsl_op_natural_join4,dsl_op_intersect,dsl_op_union
scythe/recent_posts/011,"summarise(input0, ""concatvalue = string_agg(value, ', ')"", ""'id'""), natural_join(input0, line0)","SELECT DISTINCT `id`,
                `concatvalue` AS `value`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `LHS`.`value` AS `value`,
          `RHS`.`concatvalue` AS `concatvalue`
   FROM `df_011` AS `LHS`
   INNER JOIN
     (SELECT `id`,
             string_agg(`value`, ', ') AS concatvalue
      FROM df_011
      GROUP BY id) AS RHS ON (LHS.id = RHS.id))
ORDER BY id;",2,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
scythe/recent_posts/022,"summarise(input0, 'c1 = max(c1)', ""'c2'""), summarise(line0, 'n = n()', ""'c1'""), filter(line1, 'n >= 3L & n != c1')","SELECT c1 AS c3
FROM
  (SELECT c1,
          COUNT() AS n
   FROM
     (SELECT c2,
             MAX(c1) AS c1
      FROM df_022_2
      GROUP BY c2)
   GROUP BY c1)
WHERE (n >= 3
       AND n != c1)
ORDER BY c3;",3,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0
scythe/recent_posts/040,"mutate(input0, 'n_distinct = n_distinct(action)'), limit(line0, 'desc(n_distinct)')","SELECT id,
       TIMESTAMP,
       first_name,
       last_name,
       action
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT id,
                TIMESTAMP,
                first_name,
                last_name,
                action,
                COUNT(DISTINCT action) OVER () AS n_distinct
         FROM df_040)
      ORDER BY n_distinct DESC)
   LIMIT 2);",1,12,4,1,4,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
scythe/recent_posts/003,"inner_join(input0, input1, ""'item' = 'f2'"")","SELECT id,
       f1 AS item
FROM
  (SELECT LHS.id AS id,
          LHS.item AS item,
          RHS.f1 AS f1
   FROM df_003_1 AS LHS
   INNER JOIN df_003_2 AS RHS ON (LHS.item = RHS.f2))
ORDER BY id;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
scythe/recent_posts/045,"left_join(input0, input1), summarise(line0, 'sumquantity = sum(quantity)', ""'name'"")","SELECT name AS menuname,
       sumquantity AS quantity
FROM
  (SELECT name,
          SUM(quantity) AS sumquantity
   FROM
     (SELECT LHS.menu_id AS menu_id,
             LHS.name AS name,
             RHS.id AS id,
             RHS.quantity AS quantity
      FROM df_045_1 AS LHS
      LEFT JOIN df_045_2 AS RHS ON (LHS.menu_id = RHS.menu_id))
   GROUP BY name)
ORDER BY menuname;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
scythe/recent_posts/005,"filter(input0, 'event_id <= 17L'), summarise(input0, 'event_id = max(event_id)', ""'prim_cid'""), natural_join3(input0, line0, line1)","SELECT g_event_id,
       prim_cid,
       event_id,
       event_time
FROM
  (SELECT LHS.g_event_id AS g_event_id,
          LHS.prim_cid AS prim_cid,
          LHS.event_id AS event_id,
          LHS.event_time AS event_time
   FROM
     (SELECT LHS.g_event_id AS g_event_id,
             LHS.prim_cid AS prim_cid,
             LHS.event_id AS event_id,
             LHS.event_time AS event_time
      FROM df_005 AS LHS
      INNER JOIN
        (SELECT *
         FROM df_005
         WHERE (event_id <= 17)) AS RHS ON (LHS.g_event_id = RHS.g_event_id
                                            AND LHS.prim_cid = RHS.prim_cid
                                            AND LHS.event_id = RHS.event_id
                                            AND LHS.event_time = RHS.event_time)) AS LHS
   INNER JOIN
     (SELECT prim_cid,
             MAX(event_id) AS event_id
      FROM df_005
      GROUP BY prim_cid) AS RHS ON (LHS.prim_cid = RHS.prim_cid
                                    AND LHS.event_id = RHS.event_id))
ORDER BY g_event_id;",3,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
scythe/recent_posts/028,"filter(input0, 'member > 1L'), cross_join(line0, input0, 'member == member.other & element != element.other'), summarise(line1, 'n = n()', ""'element','member'"")","SELECT DISTINCT member AS c1,
                n AS c2
FROM
  (SELECT element,
          member,
          COUNT() AS n
   FROM
     (SELECT *
      FROM
        (SELECT LHS.member AS member,
                LHS.element AS element,
                RHS.member AS member_other,
                RHS.element AS element_other
         FROM
           (SELECT *
            FROM df_028
            WHERE (member > 1)) AS LHS
         CROSS JOIN df_028 AS RHS)
      WHERE (member = member_other
             AND element != element_other))
   GROUP BY element,
            member)
ORDER BY c1;",3,13,5,1,5,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0
scythe/recent_posts/004,"filter(input0, 'job_num == 0L & job_num != call_ref'), summarise(line0, 'call_ref = max(call_ref)', ""'id'""), cross_join(input0, line1, 'call_ref >= call_ref.other | job_num > call_ref.other')","SELECT DISTINCT call_ref,
                job_num
FROM
  (SELECT LHS.id AS id,
          LHS.call_ref AS call_ref,
          LHS.job_num AS job_num,
          RHS.id AS id_other,
          RHS.call_ref AS call_ref_other
   FROM df_004 AS LHS
   CROSS JOIN
     (SELECT id,
             MAX(call_ref) AS call_ref
      FROM df_004
      WHERE (job_num = 0
             AND job_num != call_ref)
      GROUP BY id) AS RHS)
WHERE (call_ref >= call_ref_other
       OR job_num > call_ref_other)
ORDER BY call_ref;",3,10,3,1,3,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0
scythe/recent_posts/032,"summarise(input0, 'id = max(id)', ""'crit1','crit2'""), natural_join(input0, line0)","SELECT crit1,
       crit2,
       value
FROM
  (SELECT LHS.id AS id,
          LHS.crit1 AS crit1,
          LHS.crit2 AS crit2,
          LHS.value AS value
   FROM df_032 AS LHS
   INNER JOIN
     (SELECT crit1,
             crit2,
             MAX(id) AS id
      FROM df_032
      GROUP BY crit1,
               crit2) AS RHS ON (LHS.id = RHS.id
                                 AND LHS.crit1 = RHS.crit1
                                 AND LHS.crit2 = RHS.crit2))
ORDER BY crit1;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
scythe/recent_posts/043,"cross_join(input0, input0, 'entrytime > entrytime.other & entrytime <= resulttime.other'), anti_join(input0, line0, ""'entrytime','resulttime'"")","SELECT id,
       entrytime,
       resulttime
FROM
  (SELECT *
   FROM df_043 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT LHS.id AS id,
                     LHS.entrytime AS entrytime,
                     LHS.resulttime AS resulttime,
                     RHS.id AS id_other,
                     RHS.entrytime AS entrytime_other,
                     RHS.resulttime AS resulttime_other
              FROM df_043 AS LHS
              CROSS JOIN df_043 AS RHS)
           WHERE (entrytime > entrytime_other
                  AND entrytime <= resulttime_other)) AS RHS
        WHERE (LHS.entrytime = RHS.entrytime
               AND LHS.resulttime = RHS.resulttime) ))
ORDER BY id;",2,15,5,0,5,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
scythe/recent_posts/021,"filter(input0, 'id_product == 22L'), cross_join(input0, line0, 'id_product != id_product.other & id_order == id_order.other'), summarise(line1, 'n = n()', ""'id_product'"")","SELECT id_product AS product_id,
       n AS count_od2
FROM
  (SELECT id_product,
          COUNT() AS n
   FROM
     (SELECT *
      FROM
        (SELECT LHS.id_order AS id_order,
                LHS.id_product AS id_product,
                RHS.id_order AS id_order_other,
                RHS.id_product AS id_product_other
         FROM df_021 AS LHS
         CROSS JOIN
           (SELECT *
            FROM df_021
            WHERE (id_product = 22)) AS RHS)
      WHERE (id_product != id_product_other
             AND id_order = id_order_other))
   GROUP BY id_product)
ORDER BY product_id;",3,12,5,0,5,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0
scythe/recent_posts/031,"left_join(input0, input1), filter(line0, ""type == 'public' & accountid == 'Dave'"")","SELECT `channelid` AS `c1`,
       `accountid` AS `c2`,
       `role` AS `c3`
FROM
  (SELECT `LHS`.`channelid` AS `channelid`,
          `LHS`.`accountid` AS `accountid`,
          `LHS`.`role` AS `role`,
          `RHS`.`channelname` AS `channelname`,
          `RHS`.`type` AS `type`
   FROM `df_031_1` AS `LHS`
   LEFT JOIN `df_031_2` AS `RHS` ON (`LHS`.`channelid` = `RHS`.`channelid`))
WHERE (`type` = 'public'
       AND `accountid` = 'Dave')
ORDER BY c1;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
scythe/recent_posts/007,"mutate(input0, 'mintodate = min(todate)'), mutate(line0, 'maxfromdate = max(fromdate)')","SELECT DISTINCT employee,
                fromdate,
                todate,
                code
FROM
  (SELECT employee,
          fromdate,
          todate,
          code,
          MIN(todate) OVER () AS mintodate
   FROM df_007)
ORDER BY employee;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
scythe/recent_posts/034,"mutate(input0, 'maxdate_update = max(date_update)'), filter(line0, 'maxdate_update <= date_update')","SELECT material AS c1,
       disco_date AS c2,
       date_update AS c3
FROM
  (SELECT material,
          disco_date,
          date_update,
          MAX(date_update) OVER () AS maxdate_update
   FROM df_034)
WHERE (maxdate_update <= date_update)
ORDER BY c1;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
scythe/recent_posts/044,"inner_join(input0, input1, ""'area' = 'part'""), anti_join(line0, input1, ""'originalid','part'"")","SELECT DISTINCT originalid,
                area
FROM
  (SELECT *
   FROM
     (SELECT originalid,
             area,
             originalid_other,
             area AS part
      FROM
        (SELECT LHS.originalid AS originalid,
                LHS.area AS area,
                RHS.originalid AS originalid_other
         FROM df_044_1 AS LHS
         INNER JOIN df_044_2 AS RHS ON (LHS.area = RHS.part))) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_044_2 AS RHS
        WHERE (LHS.originalid = RHS.originalid
               AND LHS.part = RHS.part) ))
ORDER BY originalid;",2,16,5,1,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
scythe/recent_posts/009,"summarise(input0, 'n = n()', ""'c2','c4'"")","SELECT c2 AS c1,
       c4 AS c2,
       n AS c3
FROM
  (SELECT c2,
          c4,
          COUNT() AS n
   FROM df_009
   GROUP BY c2,
            c4)
ORDER BY c1;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
scythe/recent_posts/042,df_042,"SELECT id,
       name
FROM df_042
ORDER BY id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
scythe/recent_posts/036,"natural_join(input0, input1), inner_join(line0, line0, ""'sen2' = 'id'"")","SELECT DISTINCT account_other AS account,
                name_other AS name
FROM
  (SELECT LHS.account AS account,
          LHS.sen1 AS sen1,
          LHS.sen2 AS sen2,
          LHS.id AS id,
          LHS.name AS name,
          RHS.account AS account_other,
          RHS.sen1 AS sen1_other,
          RHS.sen2 AS sen2_other,
          RHS.name AS name_other
   FROM
     (SELECT LHS.account AS account,
             LHS.sen1 AS sen1,
             LHS.sen2 AS sen2,
             RHS.id AS id,
             RHS.name AS name
      FROM df_036_1 AS LHS
      CROSS JOIN df_036_2 AS RHS) AS LHS
   INNER JOIN
     (SELECT LHS.account AS account,
             LHS.sen1 AS sen1,
             LHS.sen2 AS sen2,
             RHS.id AS id,
             RHS.name AS name
      FROM df_036_1 AS LHS
      CROSS JOIN df_036_2 AS RHS) AS RHS ON (LHS.sen2 = RHS.id))
ORDER BY account;",2,10,4,1,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0
scythe/recent_posts/038,"left_join(input1, input0)","SELECT date, tapped,
             sold
FROM
  (SELECT LHS.date AS date,
          LHS.tapped AS tapped,
          RHS.sold AS sold
   FROM df_038_2 AS LHS
   LEFT JOIN df_038_1 AS RHS ON (LHS.date = RHS.date))
ORDER BY date;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
scythe/top_rated_posts/011,"summarise(input1, ""concatcity = string_agg(city, ', ')"", ""'vehicleid'""), natural_join3(input0, input1, line0)","SELECT DISTINCT `vehicleid`,
                `name`,
                `concatcity`
FROM
  (SELECT `LHS`.`vehicleid` AS `vehicleid`,
          `LHS`.`name` AS `name`,
          `LHS`.`locationid` AS `locationid`,
          `LHS`.`city` AS `city`,
          `RHS`.`concatcity` AS `concatcity`
   FROM
     (SELECT `LHS`.`vehicleid` AS `vehicleid`,
             `LHS`.`name` AS `name`,
             `RHS`.`locationid` AS `locationid`,
             `RHS`.`city` AS `city`
      FROM `df_i011_1` AS `LHS`
      INNER JOIN `df_i011_2` AS `RHS` ON (`LHS`.`vehicleid` = `RHS`.`vehicleid`)) AS `LHS`
   INNER JOIN
     (SELECT `vehicleid`,
             string_agg(`city`, ', ') AS concatcity
      FROM df_i011_2
      GROUP BY vehicleid) AS RHS ON (LHS.vehicleid = RHS.vehicleid))
ORDER BY vehicleid;",2,11,4,1,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
scythe/top_rated_posts/022,"summarise(input0, 'medianval = median(val)', '')","SELECT medianval AS median
FROM
  (SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (
                                             ORDER BY val) AS medianval
   FROM df_i022)
ORDER BY median;",1,5,2,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/046,"filter(input0, ""x_field != 'f' & x_field != 'p'""), filter(line0, ""x_field != 'i' & x_field != 'a'""), anti_join(input0, line1, ""'id'"")","SELECT `id`,
       `x_field`
FROM
  (SELECT *
   FROM `df_i046` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT *
              FROM `df_i046`
              WHERE (`x_field` != 'f'
                     AND `x_field` != 'p'))
           WHERE (`x_field` != 'i'
                  AND `x_field` != 'a')) AS RHS
        WHERE (LHS.id = RHS.id) ))
ORDER BY id;",3,16,5,0,5,0,4,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0
scythe/top_rated_posts/051,"mutate(input0, 'maxdate = max(date)'), filter(line0, 'maxdate == date')","SELECT id,
       category, date
FROM
  (SELECT id,
          category, date, MAX(date) OVER () AS maxdate
   FROM df_i051)
WHERE (maxdate = date)
ORDER BY id;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/050,"summarise(input0, 'pmin_ = pmin(col1,col2,col3)', ""'col2','col3'""), natural_join(input0, line0)","SELECT id,
       col1,
       col2,
       col3,
       pmin_ AS themin
FROM
  (SELECT LHS.id AS id,
          LHS.col1 AS col1,
          LHS.col2 AS col2,
          LHS.col3 AS col3,
          RHS.pmin_ AS pmin_
   FROM df_i050 AS LHS
   INNER JOIN
     (SELECT col2,
             col3,
             MIN(col1, col2, col3) AS pmin_
      FROM df_i050
      GROUP BY col2,
               col3) AS RHS ON (LHS.col2 = RHS.col2
                                AND LHS.col3 = RHS.col3))
ORDER BY id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/039,"summarise(input0, 'n = n()', ""'c'""), mutate(line0, 'maxn = max(n)'), filter(line1, 'maxn == n')","SELECT c
FROM
  (SELECT c,
          n,
          MAX(n) OVER () AS maxn
   FROM
     (SELECT c,
             COUNT() AS n
      FROM df_i039
      GROUP BY c))
WHERE (maxn = n)
ORDER BY c;",3,8,3,0,3,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/040,"summarise(input0, 'n = n()', ""'group','subgroup'"")","SELECT GROUP,
       subgroup,
       n
FROM
  (SELECT GROUP,
          subgroup,
          COUNT() AS n
   FROM df_i040
   GROUP BY GROUP,
            subgroup)
ORDER BY GROUP;",1,8,2,0,2,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/057,"summarise(input0, 'birthyear = min(birthyear)', ""'city'""), semi_join(input0, line0), natural_join3(input0, line0, line1)","SELECT name,
       city,
       birthyear AS minbirthyear
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.city AS city,
          LHS.birthyear AS birthyear
   FROM
     (SELECT LHS.id AS id,
             LHS.name AS name,
             LHS.city AS city,
             LHS.birthyear AS birthyear
      FROM df_i057 AS LHS
      INNER JOIN
        (SELECT city,
                MIN(birthyear) AS birthyear
         FROM df_i057
         GROUP BY city) AS RHS ON (LHS.city = RHS.city
                                   AND LHS.birthyear = RHS.birthyear)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_i057 AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT city,
                     MIN(birthyear) AS birthyear
              FROM df_i057
              GROUP BY city) AS RHS
           WHERE (LHS.city = RHS.city
                  AND LHS.birthyear = RHS.birthyear) )) AS RHS ON (LHS.id = RHS.id
                                                                   AND LHS.name = RHS.name
                                                                   AND LHS.city = RHS.city
                                                                   AND LHS.birthyear = RHS.birthyear))
ORDER BY name;",3,19,7,0,7,2,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0
scythe/top_rated_posts/003,"summarise(input0, ""concatc = string_agg(c, ', ')"", '')","SELECT `concatc`
FROM
  (SELECT string_agg(`c`, ', ') AS concatc
   FROM df_i003)
ORDER BY concatc;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/002,"summarise(input0, 'n = n()', ""'email','name'""), limit(line0, 'desc(name)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT email,
                name,
                COUNT() AS n
         FROM df_i002
         GROUP BY email,
                  name)
      ORDER BY name DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/016,"summarise(input0, ""concatemployee = string_agg(employee, ', ')"", ""'company_id'"")","SELECT `company_id`,
       `concatemployee`
FROM
  (SELECT `company_id`,
          string_agg(`employee`, ', ') AS concatemployee
   FROM df_i016
   GROUP BY company_id)
ORDER BY company_id;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/045,"summarise(input0, 'n = n()', ""'user_id','zip'""), limit(line0, 'zip')","SELECT user_id,
       n
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT user_id,
                zip,
                COUNT() AS n
         FROM df_i045
         GROUP BY user_id,
                  zip)
      ORDER BY zip)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/005,"summarise(input0, 'minid = min(id)', ""'customer','total'""), summarise(input0, 'total = max(total)', ""'customer'""), semi_join(line0, line1)","SELECT minid,
       customer,
       total AS maxtotal
FROM
  (SELECT *
   FROM
     (SELECT customer,
             total,
             MIN(id) AS minid
      FROM df_i005
      GROUP BY customer,
               total) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT customer,
                  MAX(total) AS total
           FROM df_i005
           GROUP BY customer) AS RHS
        WHERE (LHS.customer = RHS.customer
               AND LHS.total = RHS.total) ))
ORDER BY minid;",3,13,5,0,5,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0
scythe/top_rated_posts/028,"left_join(input1, input0), summarise(line0, ""concatdesc = string_agg(desc, ' ')"", ""'pid'"")","SELECT `pid`,
       `concatdesc`
FROM
  (SELECT `pid`,
          string_agg(`desc`, ' ') AS concatdesc
   FROM
     (SELECT LHS.pid AS pid,
             LHS.seq AS seq,
             LHS.desc AS DESC
      FROM df_i028_2 AS LHS
      LEFT JOIN df_i028_1 AS RHS ON (LHS.pid = RHS.pid))
   GROUP BY pid)
ORDER BY pid;",2,8,3,0,3,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
scythe/top_rated_posts/004,"summarise(input0, 'rev = max(rev)', ""'id'""), semi_join(input0, line0)","SELECT id,
       rev,
       content
FROM
  (SELECT *
   FROM df_i004 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT id,
                  MAX(rev) AS rev
           FROM df_i004
           GROUP BY id) AS RHS
        WHERE (LHS.id = RHS.id
               AND LHS.rev = RHS.rev) ))
ORDER BY id;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
scythe/top_rated_posts/032,"filter(input0, ""status != 'Active' | status == 'Inactive'""), filter(input0, ""status == 'Active' | status != 'Inactive'""), inner_join(line0, line1, ""'section'"")","SELECT `section`,
       `count_other` AS `count`,
       `count` AS `count_other`
FROM
  (SELECT `LHS`.`section` AS `section`,
          `LHS`.`status` AS `status`,
          `LHS`.`count` AS `count`,
          `RHS`.`status` AS `status_other`,
          `RHS`.`count` AS `count_other`
   FROM
     (SELECT *
      FROM `df_i032`
      WHERE (`status` != 'Active'
             OR `status` = 'Inactive')) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_i032`
      WHERE (`status` = 'Active'
             OR `status` != 'Inactive')) AS RHS ON (LHS.section = RHS.section))
ORDER BY SECTION;",3,13,4,0,4,1,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0
scythe/top_rated_posts/027,"summarise(input0, 'avg = max(avg)', ""'cname'""), semi_join(input0, line0)","SELECT cname,
       wmname,
       AVG AS maxavg
FROM
  (SELECT *
   FROM df_i027 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT cname,
                  MAX(AVG) AS AVG
           FROM df_i027
           GROUP BY cname) AS RHS
        WHERE (LHS.cname = RHS.cname
               AND LHS.avg = RHS.avg) ))
ORDER BY cname;",2,14,4,0,4,0,2,0,0,0,0,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
scythe/top_rated_posts/037,"summarise(input0, 'c1 = min(c1)', ""'c2'""), semi_join(input0, line0)","SELECT c1,
       c2,
       c3
FROM
  (SELECT *
   FROM df_i037 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT c2,
                  MIN(c1) AS c1
           FROM df_i037
           GROUP BY c2) AS RHS
        WHERE (LHS.c1 = RHS.c1
               AND LHS.c2 = RHS.c2) ))
ORDER BY c1;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
scythe/top_rated_posts/014,"summarise(input0, ""concatstring = string_agg(string, ', ')"", ""'id'"")","SELECT `id`,
       `concatstring`
FROM
  (SELECT `id`,
          string_agg(`string`, ', ') AS concatstring
   FROM df_i014
   GROUP BY id)
ORDER BY id;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/019,"summarise(input0, 'n = n()', ""'age'""), left_join(input0, line0)","SELECT id,
       age,
       n
FROM
  (SELECT LHS.id AS id,
          LHS.age AS age,
          RHS.n AS n
   FROM df_i019 AS LHS
   LEFT JOIN
     (SELECT age,
             COUNT() AS n
      FROM df_i019
      GROUP BY age) AS RHS ON (LHS.age = RHS.age))
ORDER BY id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
scythe/top_rated_posts/043,"summarise(input0, 'n = n()', ""'emailaddress'""), filter(line0, 'n > 1L'), natural_join3(input0, line0, line1)","SELECT customername,
       emailaddress
FROM
  (SELECT LHS.customername AS customername,
          LHS.emailaddress AS emailaddress,
          LHS.n AS n
   FROM
     (SELECT LHS.customername AS customername,
             LHS.emailaddress AS emailaddress,
             RHS.n AS n
      FROM df_i043 AS LHS
      INNER JOIN
        (SELECT emailaddress,
                COUNT() AS n
         FROM df_i043
         GROUP BY emailaddress) AS RHS ON (LHS.emailaddress = RHS.emailaddress)) AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT emailaddress,
                COUNT() AS n
         FROM df_i043
         GROUP BY emailaddress)
      WHERE (n > 1)) AS RHS ON (LHS.emailaddress = RHS.emailaddress
                                AND LHS.n = RHS.n))
ORDER BY customername;",3,15,6,0,6,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
scythe/top_rated_posts/013,"summarise(input0, 'n = n()', ""'orgname'""), inner_join(line0, input0, ""'orgname'""), filter(line1, 'n > 1L')","SELECT orgname,
       n,
       id
FROM
  (SELECT LHS.orgname AS orgname,
          LHS.n AS n,
          RHS.id AS id
   FROM
     (SELECT orgname,
             COUNT() AS n
      FROM df_i013
      GROUP BY orgname) AS LHS
   INNER JOIN df_i013 AS RHS ON (LHS.orgname = RHS.orgname))
WHERE (n > 1)
ORDER BY orgname;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
scythe/top_rated_posts/049,"summarise(input0, ""concatalias = string_agg(alias, ', ')"", ""'userid'"")","SELECT `userid`,
       `concatalias`
FROM
  (SELECT `userid`,
          string_agg(`alias`, ', ') AS concatalias
   FROM df_i049
   GROUP BY userid)
ORDER BY userid;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/021,"summarise(input0, 'maxservicemonth = max(servicemonth)', ""'chargeid','chargetype'"")","SELECT chargeid,
       chargetype,
       maxservicemonth
FROM
  (SELECT chargeid,
          chargetype,
          MAX(servicemonth) AS maxservicemonth
   FROM df_i021
   GROUP BY chargeid,
            chargetype)
ORDER BY chargeid;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/023,"mutate(input0, 'row_number_ = row_number()')","SELECT ROW_NUMBER() OVER () AS rank,
                         itemid,
                         ordercount
FROM df_i023
ORDER BY rank;",1,3,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/006,"summarise(input0, 'id = max(id)', ""'name'""), semi_join(input0, line0)","SELECT id,
       name,
       other_columns
FROM
  (SELECT *
   FROM df_i006 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT name,
                  MAX(id) AS id
           FROM df_i006
           GROUP BY name) AS RHS
        WHERE (LHS.id = RHS.id
               AND LHS.name = RHS.name) ))
ORDER BY id;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
scythe/top_rated_posts/047,"summarise(input0, 'time = max(time)', ""'user'""), semi_join(input0, line0)","SELECT id,
       USER,
       TIME,
       io
FROM
  (SELECT *
   FROM df_i047 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT USER,
                  MAX(TIME) AS TIME
           FROM df_i047
           GROUP BY USER) AS RHS
        WHERE (LHS.user = RHS.user
               AND LHS.time = RHS.time) ))
ORDER BY id;",2,17,4,0,4,0,2,0,0,0,0,0,1,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
scythe/top_rated_posts/010,"left_join(input1, input0)","SELECT DISTINCT id, date, phone_number
FROM
  (SELECT LHS.id AS id,
          LHS.date AS date,
          LHS.phone_number AS phone_number,
          RHS.name AS name
   FROM df_i010_2 AS LHS
   LEFT JOIN df_i010_1 AS RHS ON (LHS.id = RHS.id
                                  AND LHS.phone_number = RHS.phone_number))
ORDER BY id;",1,6,2,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
scythe/top_rated_posts/025,"mutate(input0, 'row_number_ = row_number()'), filter(line0, 'row_number_ >= 3L & row_number_ < 5L')","SELECT id,
       value
FROM
  (SELECT id,
          value,
          ROW_NUMBER() OVER () AS row_number_
   FROM df_i025)
WHERE (row_number_ >= 3
       AND row_number_ < 5)
ORDER BY id;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/001,"summarise(input0, ""concatstudentname = string_agg(studentname, ', ')"", ""'subjectid'"")","SELECT `subjectid`,
       `concatstudentname`
FROM
  (SELECT `subjectid`,
          string_agg(`studentname`, ', ') AS concatstudentname
   FROM df_i001
   GROUP BY subjectid)
ORDER BY subjectid;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/048,"summarise(input0, 'addressid = min(addressid)', ""'cname'""), natural_join(input0, line0)","SELECT cname,
       addressid AS minaddressid,
       addressline
FROM
  (SELECT LHS.cname AS cname,
          LHS.addressid AS addressid,
          LHS.addressline AS addressline
   FROM df_i048 AS LHS
   INNER JOIN
     (SELECT cname,
             MIN(addressid) AS addressid
      FROM df_i048
      GROUP BY cname) AS RHS ON (LHS.cname = RHS.cname
                                 AND LHS.addressid = RHS.addressid))
ORDER BY cname;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/029,"summarise(input0, ""concatperson = string_agg(person, ' ')"", ""'ticketid'"")","SELECT `ticketid`,
       `concatperson`
FROM
  (SELECT `ticketid`,
          string_agg(`person`, ' ') AS concatperson
   FROM df_i029
   GROUP BY ticketid)
ORDER BY ticketid;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/044,"mutate(input0, 'cumsumcount = cumsum(count)')","SELECT id,
       COUNT,
       SUM(COUNT) OVER (ROWS UNBOUNDED PRECEDING) AS sumcount
FROM df_i044
ORDER BY id;",1,8,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
scythe/top_rated_posts/009,"summarise(input0, 'time_stamp = max(time_stamp)', ""'username'""), semi_join(input0, line0)","SELECT username,
       ip,
       time_stamp
FROM
  (SELECT *
   FROM df_i009 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT username,
                  MAX(time_stamp) AS time_stamp
           FROM df_i009
           GROUP BY username) AS RHS
        WHERE (LHS.username = RHS.username
               AND LHS.time_stamp = RHS.time_stamp) ))
ORDER BY username;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
scythe/top_rated_posts/036,"summarise(input0, 'maxdate = max(date)', ""'username'""), inner_join(line0, input0, ""'username' = 'username','maxdate' = 'date'"")","SELECT username,
       maxdate AS date,
       value
FROM
  (SELECT LHS.username AS username,
          LHS.maxdate AS maxdate,
          RHS.value AS value
   FROM
     (SELECT username,
             MAX(date) AS maxdate
      FROM df_i036
      GROUP BY username) AS LHS
   INNER JOIN df_i036 AS RHS ON (LHS.username = RHS.username
                                 AND LHS.maxdate = RHS.date))
ORDER BY username;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
scythe/top_rated_posts/038,"summarise(input0, 'n = n()', ""'name'""), filter(line0, 'n > 1L'), semi_join(input0, line1)","SELECT id,
       name,
       city
FROM
  (SELECT *
   FROM df_i038 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT name,
                     COUNT() AS n
              FROM df_i038
              GROUP BY name)
           WHERE (n > 1)) AS RHS
        WHERE (LHS.name = RHS.name) ))
ORDER BY id;",3,14,5,0,5,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0
spider/club_1/0033,"filter(input1, ""clubname == 'Bootup Baltimore'""), natural_join4(input0, input1, input2, line0), summarise(line1, 'meanage = mean(age, na.rm = T)', ""'clubname','major'"")","SELECT `meanage` AS `avg_t3_age_`
FROM
  (SELECT `clubname`,
          `major`,
          AVG(`age`) AS `meanage`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `LHS`.`clubid` AS `clubid`,
             `LHS`.`clubname` AS `clubname`,
             `LHS`.`clubdesc` AS `clubdesc`,
             `LHS`.`clublocation` AS `clublocation`,
             `LHS`.`position` AS `position`
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `LHS`.`clubid` AS `clubid`,
                `LHS`.`clubname` AS `clubname`,
                `LHS`.`clubdesc` AS `clubdesc`,
                `LHS`.`clublocation` AS `clublocation`,
                `RHS`.`position` AS `position`
         FROM
           (SELECT `LHS`.`stuid` AS `stuid`,
                   `LHS`.`lname` AS `lname`,
                   `LHS`.`fname` AS `fname`,
                   `LHS`.`age` AS `age`,
                   `LHS`.`sex` AS `sex`,
                   `LHS`.`major` AS `major`,
                   `LHS`.`advisor` AS `advisor`,
                   `LHS`.`city_code` AS `city_code`,
                   `RHS`.`clubid` AS `clubid`,
                   `RHS`.`clubname` AS `clubname`,
                   `RHS`.`clubdesc` AS `clubdesc`,
                   `RHS`.`clublocation` AS `clublocation`
            FROM `df_student` AS `LHS`
            CROSS JOIN `df_club` AS `RHS`) AS `LHS`
         INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`
                                                     AND `LHS`.`clubid` = `RHS`.`clubid`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_club`
         WHERE (`clubname` = 'Bootup Baltimore')) AS RHS ON (LHS.clubid = RHS.clubid
                                                             AND LHS.clubname = RHS.clubname
                                                             AND LHS.clubdesc = RHS.clubdesc
                                                             AND LHS.clublocation = RHS.clublocation))
   GROUP BY clubname,
            major)
ORDER BY avg_t3_age_;",3,15,6,0,6,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
spider/club_1/0002,"intersect(input0, input0, 'clubname')","SELECT clubname
FROM
  (SELECT clubname
   FROM df_club INTERSECT SELECT clubname
   FROM df_club)
ORDER BY clubname;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/club_1/0017,"filter(input0, ""clubname == 'Pen and Paper Gaming'"")","SELECT `clubdesc`
FROM `df_club`
WHERE (`clubname` = 'Pen and Paper Gaming')
ORDER BY clubdesc;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/club_1/0008,"filter(input1, ""clubname == 'Pen and Paper Gaming'""), natural_join3(input0, input2, line0), summarise(line1, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `LHS`.`clubid` AS `clubid`,
             `LHS`.`position` AS `position`,
             `RHS`.`clubname` AS `clubname`,
             `RHS`.`clubdesc` AS `clubdesc`,
             `RHS`.`clublocation` AS `clublocation`
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `RHS`.`clubid` AS `clubid`,
                `RHS`.`position` AS `position`
         FROM `df_student` AS `LHS`
         INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_club`
         WHERE (`clubname` = 'Pen and Paper Gaming')) AS RHS ON (LHS.clubid = RHS.clubid)))
ORDER BY count___;",3,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/club_1/0003,"summarise(input0, 'n = n()', ""'age','stuid'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT age,
          stuid,
          COUNT() AS n
   FROM df_student
   GROUP BY age,
            stuid)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/club_1/0027,"natural_join3(input0, input1, input2), filter(line0, ""clubname == 'Bootup Baltimore' & age == 18L""), summarise(line1, 'n_distinct = n_distinct(age)', ""'clublocation'"")","SELECT `n_distinct` AS `count___`
FROM
  (SELECT `clublocation`,
          COUNT(DISTINCT `age`) AS `n_distinct`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `LHS`.`clubid` AS `clubid`,
                `LHS`.`clubname` AS `clubname`,
                `LHS`.`clubdesc` AS `clubdesc`,
                `LHS`.`clublocation` AS `clublocation`,
                `RHS`.`position` AS `position`
         FROM
           (SELECT `LHS`.`stuid` AS `stuid`,
                   `LHS`.`lname` AS `lname`,
                   `LHS`.`fname` AS `fname`,
                   `LHS`.`age` AS `age`,
                   `LHS`.`sex` AS `sex`,
                   `LHS`.`major` AS `major`,
                   `LHS`.`advisor` AS `advisor`,
                   `LHS`.`city_code` AS `city_code`,
                   `RHS`.`clubid` AS `clubid`,
                   `RHS`.`clubname` AS `clubname`,
                   `RHS`.`clubdesc` AS `clubdesc`,
                   `RHS`.`clublocation` AS `clublocation`
            FROM `df_student` AS `LHS`
            CROSS JOIN `df_club` AS `RHS`) AS `LHS`
         INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`
                                                     AND `LHS`.`clubid` = `RHS`.`clubid`))
      WHERE (`clubname` = 'Bootup Baltimore'
             AND age = 18))
   GROUP BY clublocation)
ORDER BY count___;",3,13,5,1,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/club_1/0022,"filter(input0, ""clublocation == 'HHH'""), summarise(line0, 'n = n()', ""'clubid','clublocation'"")","SELECT `n` AS `count___`
FROM
  (SELECT `clubid`,
          `clublocation`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_club`
      WHERE (`clublocation` = 'HHH'))
   GROUP BY clubid,
            clublocation)
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/club_1/0030,"filter(input0, ""fname != 'Eric' & lname == 'Tai'""), summarise(line0, 'n = n()', ''), natural_join3(input1, input2, line1)","SELECT DISTINCT `n` AS `count_distinct_t1_clubname_`
FROM
  (SELECT `LHS`.`clubid` AS `clubid`,
          `LHS`.`clubname` AS `clubname`,
          `LHS`.`clubdesc` AS `clubdesc`,
          `LHS`.`clublocation` AS `clublocation`,
          `LHS`.`stuid` AS `stuid`,
          `LHS`.`position` AS `position`,
          `RHS`.`n` AS `n`
   FROM
     (SELECT `LHS`.`clubid` AS `clubid`,
             `LHS`.`clubname` AS `clubname`,
             `LHS`.`clubdesc` AS `clubdesc`,
             `LHS`.`clublocation` AS `clublocation`,
             `RHS`.`stuid` AS `stuid`,
             `RHS`.`position` AS `position`
      FROM `df_club` AS `LHS`
      INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`clubid` = `RHS`.`clubid`)) AS `LHS`
   CROSS JOIN
     (SELECT COUNT() AS `n`
      FROM `df_student`
      WHERE (`fname` != 'Eric'
             AND `lname` = 'Tai')) AS RHS)
ORDER BY count_distinct_t1_clubname_;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/club_1/0013,"natural_join(input0, input1), filter(line0, ""clubname == 'Bootup Baltimore' | major < 600L""), semi_join(line1, input2)","SELECT `fname`,
       `lname`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `RHS`.`clubid` AS `clubid`,
                `RHS`.`clubname` AS `clubname`,
                `RHS`.`clubdesc` AS `clubdesc`,
                `RHS`.`clublocation` AS `clublocation`
         FROM `df_student` AS `LHS`
         CROSS JOIN `df_club` AS `RHS`)
      WHERE (`clubname` = 'Bootup Baltimore'
             OR major < 600)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_member_of_club AS RHS
        WHERE (LHS.stuid = RHS.stuid
               AND LHS.clubid = RHS.clubid) ))
ORDER BY fname;",3,15,5,0,5,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0
spider/club_1/0006,"filter(input1, ""clubname == 'Hopkins Student Enterprises'""), natural_join3(input0, input2, line0)","SELECT `lname`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `LHS`.`clubid` AS `clubid`,
          `LHS`.`position` AS `position`,
          `RHS`.`clubname` AS `clubname`,
          `RHS`.`clubdesc` AS `clubdesc`,
          `RHS`.`clublocation` AS `clublocation`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `RHS`.`clubid` AS `clubid`,
             `RHS`.`position` AS `position`
      FROM `df_student` AS `LHS`
      INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_club`
      WHERE (`clubname` = 'Hopkins Student Enterprises')) AS RHS ON (LHS.clubid = RHS.clubid))
ORDER BY lname;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/club_1/0004,df_student,"SELECT DISTINCT fname
FROM df_student
ORDER BY fname;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/club_1/0026,"natural_join3(input0, input1, input2), filter(line0, ""clubname == 'Bootup Baltimore' & age > 18L""), summarise(line1, 'n_distinct = n_distinct(age)', '')","SELECT `n_distinct` AS `count___`
FROM
  (SELECT COUNT(DISTINCT `age`) AS `n_distinct`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `LHS`.`clubid` AS `clubid`,
                `LHS`.`clubname` AS `clubname`,
                `LHS`.`clubdesc` AS `clubdesc`,
                `LHS`.`clublocation` AS `clublocation`,
                `RHS`.`position` AS `position`
         FROM
           (SELECT `LHS`.`stuid` AS `stuid`,
                   `LHS`.`lname` AS `lname`,
                   `LHS`.`fname` AS `fname`,
                   `LHS`.`age` AS `age`,
                   `LHS`.`sex` AS `sex`,
                   `LHS`.`major` AS `major`,
                   `LHS`.`advisor` AS `advisor`,
                   `LHS`.`city_code` AS `city_code`,
                   `RHS`.`clubid` AS `clubid`,
                   `RHS`.`clubname` AS `clubname`,
                   `RHS`.`clubdesc` AS `clubdesc`,
                   `RHS`.`clublocation` AS `clublocation`
            FROM `df_student` AS `LHS`
            CROSS JOIN `df_club` AS `RHS`) AS `LHS`
         INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`
                                                     AND `LHS`.`clubid` = `RHS`.`clubid`))
      WHERE (`clubname` = 'Bootup Baltimore'
             AND age > 18)))
ORDER BY count___;",3,13,5,1,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/club_1/0015,"summarise(input0, 'n = n()', ""'city_code','sex'""), natural_join4(input0, input1, input2, line0), filter(line1, ""sex == 'F' & n == 1L"")","SELECT `clubname`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `LHS`.`clubid` AS `clubid`,
          `LHS`.`clubname` AS `clubname`,
          `LHS`.`clubdesc` AS `clubdesc`,
          `LHS`.`clublocation` AS `clublocation`,
          `LHS`.`position` AS `position`,
          `RHS`.`n` AS `n`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `LHS`.`clubid` AS `clubid`,
             `LHS`.`clubname` AS `clubname`,
             `LHS`.`clubdesc` AS `clubdesc`,
             `LHS`.`clublocation` AS `clublocation`,
             `RHS`.`position` AS `position`
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `RHS`.`clubid` AS `clubid`,
                `RHS`.`clubname` AS `clubname`,
                `RHS`.`clubdesc` AS `clubdesc`,
                `RHS`.`clublocation` AS `clublocation`
         FROM `df_student` AS `LHS`
         CROSS JOIN `df_club` AS `RHS`) AS `LHS`
      INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`
                                                  AND `LHS`.`clubid` = `RHS`.`clubid`)) AS `LHS`
   INNER JOIN
     (SELECT `city_code`,
             `sex`,
             COUNT() AS `n`
      FROM `df_student`
      GROUP BY `city_code`,
               `sex`) AS `RHS` ON (`LHS`.`sex` = `RHS`.`sex`
                                   AND `LHS`.`city_code` = `RHS`.`city_code`))
WHERE (`sex` = 'F'
       AND n = 1)
ORDER BY clubname;",3,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
spider/club_1/0005,"natural_join3(input0, input1, input2), filter(line0, ""clubname == 'Bootup Baltimore'"")","SELECT `lname`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `LHS`.`clubid` AS `clubid`,
          `LHS`.`clubname` AS `clubname`,
          `LHS`.`clubdesc` AS `clubdesc`,
          `LHS`.`clublocation` AS `clublocation`,
          `RHS`.`position` AS `position`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `RHS`.`clubid` AS `clubid`,
             `RHS`.`clubname` AS `clubname`,
             `RHS`.`clubdesc` AS `clubdesc`,
             `RHS`.`clublocation` AS `clublocation`
      FROM `df_student` AS `LHS`
      CROSS JOIN `df_club` AS `RHS`) AS `LHS`
   INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`
                                               AND `LHS`.`clubid` = `RHS`.`clubid`))
WHERE (`clubname` = 'Bootup Baltimore')
ORDER BY lname;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/club_1/0016,"filter(input0, ""clubname == 'Tennis Club'"")","SELECT `clubdesc`
FROM `df_club`
WHERE (`clubname` = 'Tennis Club')
ORDER BY clubdesc;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/club_1/0032,"filter(input0, 'advisor <= 1121L'), natural_join3(input1, input2, line0)","SELECT clubname
FROM
  (SELECT LHS.clubid AS clubid,
          LHS.clubname AS clubname,
          LHS.clubdesc AS clubdesc,
          LHS.clublocation AS clublocation,
          LHS.stuid AS stuid,
          LHS.position AS POSITION,
          RHS.lname AS lname,
          RHS.fname AS fname,
          RHS.age AS age,
          RHS.sex AS sex,
          RHS.major AS major,
          RHS.advisor AS advisor,
          RHS.city_code AS city_code
   FROM
     (SELECT LHS.clubid AS clubid,
             LHS.clubname AS clubname,
             LHS.clubdesc AS clubdesc,
             LHS.clublocation AS clublocation,
             RHS.stuid AS stuid,
             RHS.position AS POSITION
      FROM df_club AS LHS
      INNER JOIN df_member_of_club AS RHS ON (LHS.clubid = RHS.clubid)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_student
      WHERE (advisor <= 1121)) AS RHS ON (LHS.stuid = RHS.stuid))
ORDER BY clubname;",2,13,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/club_1/0018,"filter(input0, ""clubname == 'Tennis Club'""), intersect(line0, line0, 'clublocation')","SELECT `clublocation`
FROM
  (SELECT `clublocation`
   FROM `df_club`
   WHERE (`clubname` = 'Tennis Club') INTERSECT
     SELECT `clublocation`
     FROM `df_club` WHERE (`clubname` = 'Tennis Club'))
ORDER BY clublocation;",2,9,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/club_1/0035,"filter(input1, ""clubname == 'Tennis Club'""), natural_join4(input0, input1, input2, line0), mutate(line1, 'meanage = mean(age, na.rm = T)')","SELECT `age` AS `avg_t3_age_`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `LHS`.`clubid` AS `clubid`,
          `LHS`.`clubname` AS `clubname`,
          `LHS`.`clubdesc` AS `clubdesc`,
          `LHS`.`clublocation` AS `clublocation`,
          `LHS`.`position` AS `position`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `LHS`.`clubid` AS `clubid`,
             `LHS`.`clubname` AS `clubname`,
             `LHS`.`clubdesc` AS `clubdesc`,
             `LHS`.`clublocation` AS `clublocation`,
             `RHS`.`position` AS `position`
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `RHS`.`clubid` AS `clubid`,
                `RHS`.`clubname` AS `clubname`,
                `RHS`.`clubdesc` AS `clubdesc`,
                `RHS`.`clublocation` AS `clublocation`
         FROM `df_student` AS `LHS`
         CROSS JOIN `df_club` AS `RHS`) AS `LHS`
      INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`
                                                  AND `LHS`.`clubid` = `RHS`.`clubid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_club`
      WHERE (`clubname` = 'Tennis Club')) AS RHS ON (LHS.clubid = RHS.clubid
                                                     AND LHS.clubname = RHS.clubname
                                                     AND LHS.clubdesc = RHS.clubdesc
                                                     AND LHS.clublocation = RHS.clublocation))
ORDER BY avg_t3_age_;",3,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0
spider/club_1/0020,"filter(input0, ""clubname == 'Hopkins Student Enterprises'""), intersect(line0, line0, 'clublocation')","SELECT `clublocation`
FROM
  (SELECT `clublocation`
   FROM `df_club`
   WHERE (`clubname` = 'Hopkins Student Enterprises') INTERSECT
     SELECT `clublocation`
     FROM `df_club` WHERE (`clubname` = 'Hopkins Student Enterprises'))
ORDER BY clublocation;",2,9,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/club_1/0019,"filter(input0, ""clubname == 'Pen and Paper Gaming'""), intersect(line0, line0, 'clublocation')","SELECT `clublocation`
FROM
  (SELECT `clublocation`
   FROM `df_club`
   WHERE (`clubname` = 'Pen and Paper Gaming') INTERSECT
     SELECT `clublocation`
     FROM `df_club` WHERE (`clubname` = 'Pen and Paper Gaming'))
ORDER BY clublocation;",2,9,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/club_1/0007,"filter(input1, ""clubname == 'Tennis Club'""), natural_join4(input0, input1, input2, line0), summarise(line1, 'n_distinct = n_distinct(clubname)', ""'position'"")","SELECT `n_distinct` AS `count___`
FROM
  (SELECT `position`,
          COUNT(DISTINCT `clubname`) AS `n_distinct`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `LHS`.`clubid` AS `clubid`,
             `LHS`.`clubname` AS `clubname`,
             `LHS`.`clubdesc` AS `clubdesc`,
             `LHS`.`clublocation` AS `clublocation`,
             `LHS`.`position` AS `position`
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `LHS`.`clubid` AS `clubid`,
                `LHS`.`clubname` AS `clubname`,
                `LHS`.`clubdesc` AS `clubdesc`,
                `LHS`.`clublocation` AS `clublocation`,
                `RHS`.`position` AS `position`
         FROM
           (SELECT `LHS`.`stuid` AS `stuid`,
                   `LHS`.`lname` AS `lname`,
                   `LHS`.`fname` AS `fname`,
                   `LHS`.`age` AS `age`,
                   `LHS`.`sex` AS `sex`,
                   `LHS`.`major` AS `major`,
                   `LHS`.`advisor` AS `advisor`,
                   `LHS`.`city_code` AS `city_code`,
                   `RHS`.`clubid` AS `clubid`,
                   `RHS`.`clubname` AS `clubname`,
                   `RHS`.`clubdesc` AS `clubdesc`,
                   `RHS`.`clublocation` AS `clublocation`
            FROM `df_student` AS `LHS`
            CROSS JOIN `df_club` AS `RHS`) AS `LHS`
         INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`
                                                     AND `LHS`.`clubid` = `RHS`.`clubid`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_club`
         WHERE (`clubname` = 'Tennis Club')) AS RHS ON (LHS.clubid = RHS.clubid
                                                        AND LHS.clubname = RHS.clubname
                                                        AND LHS.clubdesc = RHS.clubdesc
                                                        AND LHS.clublocation = RHS.clublocation))
   GROUP BY POSITION)
ORDER BY count___;",3,17,6,1,6,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
spider/club_1/0034,"filter(input1, ""clubname == 'Hopkins Student Enterprises'""), natural_join4(input0, input1, input2, line0), mutate(line1, 'meanage = mean(age, na.rm = T)')","SELECT `age` AS `avg_t3_age_`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `LHS`.`clubid` AS `clubid`,
          `LHS`.`clubname` AS `clubname`,
          `LHS`.`clubdesc` AS `clubdesc`,
          `LHS`.`clublocation` AS `clublocation`,
          `LHS`.`position` AS `position`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `LHS`.`clubid` AS `clubid`,
             `LHS`.`clubname` AS `clubname`,
             `LHS`.`clubdesc` AS `clubdesc`,
             `LHS`.`clublocation` AS `clublocation`,
             `RHS`.`position` AS `position`
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `RHS`.`clubid` AS `clubid`,
                `RHS`.`clubname` AS `clubname`,
                `RHS`.`clubdesc` AS `clubdesc`,
                `RHS`.`clublocation` AS `clublocation`
         FROM `df_student` AS `LHS`
         CROSS JOIN `df_club` AS `RHS`) AS `LHS`
      INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`
                                                  AND `LHS`.`clubid` = `RHS`.`clubid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_club`
      WHERE (`clubname` = 'Hopkins Student Enterprises')) AS RHS ON (LHS.clubid = RHS.clubid
                                                                     AND LHS.clubname = RHS.clubname
                                                                     AND LHS.clubdesc = RHS.clubdesc
                                                                     AND LHS.clublocation = RHS.clublocation))
ORDER BY avg_t3_age_;",3,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0
spider/club_1/0024,"natural_join3(input0, input1, input2), filter(line0, ""clubname == 'Hopkins Student Enterprises' & position == 'CTO'"")","SELECT `fname`,
       `lname`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `LHS`.`clubid` AS `clubid`,
          `LHS`.`clubname` AS `clubname`,
          `LHS`.`clubdesc` AS `clubdesc`,
          `LHS`.`clublocation` AS `clublocation`,
          `RHS`.`position` AS `position`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `RHS`.`clubid` AS `clubid`,
             `RHS`.`clubname` AS `clubname`,
             `RHS`.`clubdesc` AS `clubdesc`,
             `RHS`.`clublocation` AS `clublocation`
      FROM `df_student` AS `LHS`
      CROSS JOIN `df_club` AS `RHS`) AS `LHS`
   INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`
                                               AND `LHS`.`clubid` = `RHS`.`clubid`))
WHERE (`clubname` = 'Hopkins Student Enterprises'
       AND `position` = 'CTO')
ORDER BY fname;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/club_1/0021,"filter(input0, ""clublocation == 'AKW'"")","SELECT `clubname`
FROM `df_club`
WHERE (`clublocation` = 'AKW')
ORDER BY clubname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/club_1/0023,"natural_join3(input0, input1, input2), filter(line0, ""clubname == 'Bootup Baltimore' & position == 'President'"")","SELECT `fname`,
       `lname`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `LHS`.`clubid` AS `clubid`,
          `LHS`.`clubname` AS `clubname`,
          `LHS`.`clubdesc` AS `clubdesc`,
          `LHS`.`clublocation` AS `clublocation`,
          `RHS`.`position` AS `position`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `RHS`.`clubid` AS `clubid`,
             `RHS`.`clubname` AS `clubname`,
             `RHS`.`clubdesc` AS `clubdesc`,
             `RHS`.`clublocation` AS `clublocation`
      FROM `df_student` AS `LHS`
      CROSS JOIN `df_club` AS `RHS`) AS `LHS`
   INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`
                                               AND `LHS`.`clubid` = `RHS`.`clubid`))
WHERE (`clubname` = 'Bootup Baltimore'
       AND `position` = 'President')
ORDER BY fname;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/club_1/0001,"summarise(input0, 'n = n()', ""'clubdesc','clubname'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT clubdesc,
          clubname,
          COUNT() AS n
   FROM df_club
   GROUP BY clubdesc,
            clubname)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/club_1/0014,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'clublocation','clubname'""), filter(line1, 'n < 600L & n > 1L')","SELECT clubname
FROM
  (SELECT clublocation,
          clubname,
          COUNT() AS n
   FROM
     (SELECT LHS.stuid AS stuid,
             LHS.lname AS lname,
             LHS.fname AS fname,
             LHS.age AS age,
             LHS.sex AS sex,
             LHS.major AS major,
             LHS.advisor AS advisor,
             LHS.city_code AS city_code,
             LHS.clubid AS clubid,
             LHS.clubname AS clubname,
             LHS.clubdesc AS clubdesc,
             LHS.clublocation AS clublocation,
             RHS.position AS POSITION
      FROM
        (SELECT LHS.stuid AS stuid,
                LHS.lname AS lname,
                LHS.fname AS fname,
                LHS.age AS age,
                LHS.sex AS sex,
                LHS.major AS major,
                LHS.advisor AS advisor,
                LHS.city_code AS city_code,
                RHS.clubid AS clubid,
                RHS.clubname AS clubname,
                RHS.clubdesc AS clubdesc,
                RHS.clublocation AS clublocation
         FROM df_student AS LHS
         CROSS JOIN df_club AS RHS) AS LHS
      INNER JOIN df_member_of_club AS RHS ON (LHS.stuid = RHS.stuid
                                              AND LHS.clubid = RHS.clubid))
   GROUP BY clublocation,
            clubname)
WHERE (n < 600
       AND n > 1)
ORDER BY clubname;",3,11,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/club_1/0009,"natural_join3(input0, input1, input2), filter(line0, ""fname == 'Linda' & lname == 'Smith'""), summarise(line1, 'n = n()', ""'position'"")","SELECT `n` AS `count___`
FROM
  (SELECT `position`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `LHS`.`clubid` AS `clubid`,
                `LHS`.`clubname` AS `clubname`,
                `LHS`.`clubdesc` AS `clubdesc`,
                `LHS`.`clublocation` AS `clublocation`,
                `RHS`.`position` AS `position`
         FROM
           (SELECT `LHS`.`stuid` AS `stuid`,
                   `LHS`.`lname` AS `lname`,
                   `LHS`.`fname` AS `fname`,
                   `LHS`.`age` AS `age`,
                   `LHS`.`sex` AS `sex`,
                   `LHS`.`major` AS `major`,
                   `LHS`.`advisor` AS `advisor`,
                   `LHS`.`city_code` AS `city_code`,
                   `RHS`.`clubid` AS `clubid`,
                   `RHS`.`clubname` AS `clubname`,
                   `RHS`.`clubdesc` AS `clubdesc`,
                   `RHS`.`clublocation` AS `clublocation`
            FROM `df_student` AS `LHS`
            CROSS JOIN `df_club` AS `RHS`) AS `LHS`
         INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`
                                                     AND `LHS`.`clubid` = `RHS`.`clubid`))
      WHERE (`fname` = 'Linda'
             AND `lname` = 'Smith'))
   GROUP BY POSITION)
ORDER BY count___;",3,13,5,0,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/club_1/0025,"filter(input0, ""clubname != 'Bootup Baltimore'""), anti_join(input1, line0, ''), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count_distinct_t2_position_`
FROM
  (SELECT *
   FROM `df_member_of_club` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_club`
           WHERE (`clubname` != 'Bootup Baltimore')) AS RHS
        WHERE (LHS.clubid = RHS.clubid) ))
ORDER BY count_distinct_t2_position_;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/club_1/0011,"natural_join(input0, input1), filter(line0, ""clubname == 'Bootup Baltimore' & sex == 'F'""), semi_join(line1, input2)","SELECT `fname`,
       `lname`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `RHS`.`clubid` AS `clubid`,
                `RHS`.`clubname` AS `clubname`,
                `RHS`.`clubdesc` AS `clubdesc`,
                `RHS`.`clublocation` AS `clublocation`
         FROM `df_student` AS `LHS`
         CROSS JOIN `df_club` AS `RHS`)
      WHERE (`clubname` = 'Bootup Baltimore'
             AND `sex` = 'F')) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_member_of_club AS RHS
        WHERE (LHS.stuid = RHS.stuid
               AND LHS.clubid = RHS.clubid) ))
ORDER BY fname;",3,14,5,0,5,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0
spider/club_1/0029,"filter(input0, ""city_code == 'HOU'""), natural_join3(input1, input2, line0)","SELECT `clubname`
FROM
  (SELECT `LHS`.`clubid` AS `clubid`,
          `LHS`.`clubname` AS `clubname`,
          `LHS`.`clubdesc` AS `clubdesc`,
          `LHS`.`clublocation` AS `clublocation`,
          `LHS`.`stuid` AS `stuid`,
          `LHS`.`position` AS `position`,
          `RHS`.`lname` AS `lname`,
          `RHS`.`fname` AS `fname`,
          `RHS`.`age` AS `age`,
          `RHS`.`sex` AS `sex`,
          `RHS`.`major` AS `major`,
          `RHS`.`advisor` AS `advisor`,
          `RHS`.`city_code` AS `city_code`
   FROM
     (SELECT `LHS`.`clubid` AS `clubid`,
             `LHS`.`clubname` AS `clubname`,
             `LHS`.`clubdesc` AS `clubdesc`,
             `LHS`.`clublocation` AS `clublocation`,
             `RHS`.`stuid` AS `stuid`,
             `RHS`.`position` AS `position`
      FROM `df_club` AS `LHS`
      INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`clubid` = `RHS`.`clubid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_student`
      WHERE (`city_code` = 'HOU')) AS RHS ON (LHS.stuid = RHS.stuid))
ORDER BY clubname;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/club_1/0010,"filter(input0, ""fname != 'Tracy' & lname == 'Kim'""), summarise(line0, 'n = n()', ''), natural_join3(input1, input2, line1)","SELECT DISTINCT `n` AS `count___`
FROM
  (SELECT `LHS`.`clubid` AS `clubid`,
          `LHS`.`clubname` AS `clubname`,
          `LHS`.`clubdesc` AS `clubdesc`,
          `LHS`.`clublocation` AS `clublocation`,
          `LHS`.`stuid` AS `stuid`,
          `LHS`.`position` AS `position`,
          `RHS`.`n` AS `n`
   FROM
     (SELECT `LHS`.`clubid` AS `clubid`,
             `LHS`.`clubname` AS `clubname`,
             `LHS`.`clubdesc` AS `clubdesc`,
             `LHS`.`clublocation` AS `clublocation`,
             `RHS`.`stuid` AS `stuid`,
             `RHS`.`position` AS `position`
      FROM `df_club` AS `LHS`
      INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`clubid` = `RHS`.`clubid`)) AS `LHS`
   CROSS JOIN
     (SELECT COUNT() AS `n`
      FROM `df_student`
      WHERE (`fname` != 'Tracy'
             AND `lname` = 'Kim')) AS RHS)
ORDER BY count___;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/club_1/0028,"filter(input0, ""city_code == 'BAL'""), natural_join3(input1, input2, line0)","SELECT `clubname`
FROM
  (SELECT `LHS`.`clubid` AS `clubid`,
          `LHS`.`clubname` AS `clubname`,
          `LHS`.`clubdesc` AS `clubdesc`,
          `LHS`.`clublocation` AS `clublocation`,
          `LHS`.`stuid` AS `stuid`,
          `LHS`.`position` AS `position`,
          `RHS`.`lname` AS `lname`,
          `RHS`.`fname` AS `fname`,
          `RHS`.`age` AS `age`,
          `RHS`.`sex` AS `sex`,
          `RHS`.`major` AS `major`,
          `RHS`.`advisor` AS `advisor`,
          `RHS`.`city_code` AS `city_code`
   FROM
     (SELECT `LHS`.`clubid` AS `clubid`,
             `LHS`.`clubname` AS `clubname`,
             `LHS`.`clubdesc` AS `clubdesc`,
             `LHS`.`clublocation` AS `clublocation`,
             `RHS`.`stuid` AS `stuid`,
             `RHS`.`position` AS `position`
      FROM `df_club` AS `LHS`
      INNER JOIN `df_member_of_club` AS `RHS` ON (`LHS`.`clubid` = `RHS`.`clubid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_student`
      WHERE (`city_code` = 'BAL')) AS RHS ON (LHS.stuid = RHS.stuid))
ORDER BY clubname;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/decoration_competition/0002,df_member,"SELECT name
FROM df_member
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/decoration_competition/0008,df_college,"SELECT leader_name,
       college_location
FROM df_college
ORDER BY leader_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/decoration_competition/0003,df_member,"SELECT name,
       country
FROM df_member
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/decoration_competition/0013,"filter(input1, 'rank_in_round > 3L'), natural_join3(input0, input1, line0)","SELECT name
FROM
  (SELECT LHS.member_id AS member_id,
          LHS.name AS name,
          LHS.country AS country,
          LHS.college_id AS college_id,
          LHS.round_id AS round_id,
          LHS.decoration_theme AS decoration_theme,
          LHS.rank_in_round AS rank_in_round
   FROM
     (SELECT LHS.member_id AS member_id,
             LHS.name AS name,
             LHS.country AS country,
             LHS.college_id AS college_id,
             RHS.round_id AS round_id,
             RHS.decoration_theme AS decoration_theme,
             RHS.rank_in_round AS rank_in_round
      FROM df_member AS LHS
      INNER JOIN df_round AS RHS ON (LHS.member_id = RHS.member_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_round
      WHERE (rank_in_round > 3)) AS RHS ON (LHS.member_id = RHS.member_id
                                            AND LHS.round_id = RHS.round_id
                                            AND LHS.decoration_theme = RHS.decoration_theme
                                            AND LHS.rank_in_round = RHS.rank_in_round))
ORDER BY name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/decoration_competition/0006,"summarise(input0, 'n = n()', ""'college_id','country'""), limit(line0, 'desc(country)')","SELECT country
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT college_id,
                country,
                COUNT() AS n
         FROM df_member
         GROUP BY college_id,
                  country)
      ORDER BY country DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/decoration_competition/0004,"filter(input0, ""country == 'United States' | country == 'Canada'"")","SELECT `name`
FROM `df_member`
WHERE (`country` = 'United States'
       OR `country` = 'Canada')
ORDER BY name;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/decoration_competition/0012,"natural_join(input0, input1)","SELECT name,
       decoration_theme
FROM
  (SELECT LHS.member_id AS member_id,
          LHS.name AS name,
          LHS.country AS country,
          LHS.college_id AS college_id,
          RHS.round_id AS round_id,
          RHS.decoration_theme AS decoration_theme,
          RHS.rank_in_round AS rank_in_round
   FROM df_member AS LHS
   INNER JOIN df_round AS RHS ON (LHS.member_id = RHS.member_id))
ORDER BY name;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/decoration_competition/0015,"anti_join(input0, input1, '')","SELECT name
FROM
  (SELECT *
   FROM df_member AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_round AS RHS
        WHERE (LHS.member_id = RHS.member_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/decoration_competition/0005,"summarise(input0, 'n = n()', ""'country'"")","SELECT country,
       n AS count___
FROM
  (SELECT country,
          COUNT() AS n
   FROM df_member
   GROUP BY country)
ORDER BY country;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/decoration_competition/0007,"summarise(input0, 'n = n()', ""'country'""), limit(line0, 'country')","SELECT country
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT country,
                COUNT() AS n
         FROM df_member
         GROUP BY country)
      ORDER BY country)
   LIMIT 2);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/decoration_competition/0001,"summarise(input0, 'n = n()', ""'college_id','name'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT college_id,
          name,
          COUNT() AS n
   FROM df_member
   GROUP BY college_id,
            name)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/decoration_competition/0014,"natural_join(input0, input1), semi_join(line0, input0)","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT LHS.member_id AS member_id,
             LHS.name AS name,
             LHS.country AS country,
             LHS.college_id AS college_id,
             RHS.round_id AS round_id,
             RHS.decoration_theme AS decoration_theme,
             RHS.rank_in_round AS rank_in_round
      FROM df_member AS LHS
      INNER JOIN df_round AS RHS ON (LHS.member_id = RHS.member_id)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_member AS RHS
        WHERE (LHS.member_id = RHS.member_id
               AND LHS.name = RHS.name
               AND LHS.country = RHS.country
               AND LHS.college_id = RHS.college_id) ))
ORDER BY name;",2,12,4,0,4,1,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0
spider/decoration_competition/0009,"inner_join(input1, input0, ""'college_id'"")","SELECT name AS name___1,
       name_other AS name___2
FROM
  (SELECT LHS.member_id AS member_id,
          LHS.name AS name,
          LHS.country AS country,
          LHS.college_id AS college_id,
          RHS.name AS name_other,
          RHS.leader_name AS leader_name,
          RHS.college_location AS college_location
   FROM df_member AS LHS
   INNER JOIN df_college AS RHS ON (LHS.college_id = RHS.college_id))
ORDER BY name___1;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/decoration_competition/0011,"inner_join(input1, input0, ""'college_id'""), filter(line0, ""country == 'Canada'"")","SELECT DISTINCT `leader_name`
FROM
  (SELECT `LHS`.`member_id` AS `member_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`country` AS `country`,
          `LHS`.`college_id` AS `college_id`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`leader_name` AS `leader_name`,
          `RHS`.`college_location` AS `college_location`
   FROM `df_member` AS `LHS`
   INNER JOIN `df_college` AS `RHS` ON (`LHS`.`college_id` = `RHS`.`college_id`))
WHERE (`country` = 'Canada')
ORDER BY leader_name;",2,7,2,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/decoration_competition/0010,"inner_join(input1, input0, ""'college_id'"")","SELECT name,
       college_location
FROM
  (SELECT LHS.member_id AS member_id,
          LHS.name AS name,
          LHS.country AS country,
          LHS.college_id AS college_id,
          RHS.name AS name_other,
          RHS.leader_name AS leader_name,
          RHS.college_location AS college_location
   FROM df_member AS LHS
   INNER JOIN df_college AS RHS ON (LHS.college_id = RHS.college_id))
ORDER BY name;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/swimming/0002,"intersect(input0, input0, 'name')","SELECT name
FROM
  (SELECT name
   FROM df_event INTERSECT SELECT name
   FROM df_event)
ORDER BY name;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/swimming/0017,"filter(input0, ""nationality == 'Australia'""), natural_join(input0, line0)","SELECT `meter_200`,
       `meter_300`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `LHS`.`nationality` AS `nationality`,
          `LHS`.`meter_100` AS `meter_100`,
          `LHS`.`meter_200` AS `meter_200`,
          `LHS`.`meter_300` AS `meter_300`,
          `LHS`.`meter_400` AS `meter_400`,
          `LHS`.`meter_500` AS `meter_500`,
          `LHS`.`meter_600` AS `meter_600`,
          `LHS`.`meter_700` AS `meter_700`,
          `LHS`.`time` AS `time`
   FROM `df_swimmer` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_swimmer`
      WHERE (`nationality` = 'Australia')) AS RHS ON (LHS.id = RHS.id
                                                      AND LHS.name = RHS.name
                                                      AND LHS.nationality = RHS.nationality
                                                      AND LHS.meter_100 = RHS.meter_100
                                                      AND LHS.meter_200 = RHS.meter_200
                                                      AND LHS.meter_300 = RHS.meter_300
                                                      AND LHS.meter_400 = RHS.meter_400
                                                      AND LHS.meter_500 = RHS.meter_500
                                                      AND LHS.meter_600 = RHS.meter_600
                                                      AND LHS.meter_700 = RHS.meter_700
                                                      AND LHS.time = RHS.time))
ORDER BY meter_200;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/swimming/0008,"summarise(input0, 'n = n()', ""'country'""), filter(line0, 'n <= 3L'), mutate(line1, 'n = n()')","SELECT country
FROM
  (SELECT country,
          COUNT() AS n
   FROM df_stadium
   GROUP BY country)
WHERE (n <= 3)
ORDER BY country;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/swimming/0003,"limit(input0, 'name')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_event
      ORDER BY name)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/swimming/0022,"mutate(input1, 'n = n()'), natural_join3(input0, input1, line0), limit(line1, 'name')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.id AS id,
                LHS.name AS name,
                LHS.nationality AS nationality,
                LHS.meter_100 AS meter_100,
                LHS.meter_200 AS meter_200,
                LHS.meter_300 AS meter_300,
                LHS.meter_400 AS meter_400,
                LHS.meter_500 AS meter_500,
                LHS.meter_600 AS meter_600,
                LHS.meter_700 AS meter_700,
                LHS.time AS TIME,
                LHS.result AS RESULT,
                LHS.swimmer_id AS swimmer_id,
                LHS.event_id AS event_id,
                RHS.n AS n
         FROM
           (SELECT LHS.id AS id,
                   LHS.name AS name,
                   LHS.nationality AS nationality,
                   LHS.meter_100 AS meter_100,
                   LHS.meter_200 AS meter_200,
                   LHS.meter_300 AS meter_300,
                   LHS.meter_400 AS meter_400,
                   LHS.meter_500 AS meter_500,
                   LHS.meter_600 AS meter_600,
                   LHS.meter_700 AS meter_700,
                   LHS.time AS TIME,
                   RHS.result AS RESULT,
                   RHS.swimmer_id AS swimmer_id,
                   RHS.event_id AS event_id
            FROM df_swimmer AS LHS
            INNER JOIN df_record AS RHS ON (LHS.id = RHS.id)) AS LHS
         INNER JOIN
           (SELECT id,
                   RESULT,
                   swimmer_id,
                   event_id,
                   COUNT(*) OVER () AS n
            FROM df_record) AS RHS ON (LHS.id = RHS.id
                                       AND LHS.result = RHS.result
                                       AND LHS.swimmer_id = RHS.swimmer_id
                                       AND LHS.event_id = RHS.event_id))
      ORDER BY name)
   LIMIT 1);",2,21,6,0,6,2,0,1,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
spider/swimming/0030,"filter(input0, 'opening_year == 2005L | opening_year > capacity'), mutate(line0, 'meancapacity = mean(capacity, na.rm = T)')","SELECT DISTINCT AVG(capacity) OVER () AS avg_capacity_
FROM df_stadium
WHERE (opening_year = 2005
       OR opening_year > capacity)
ORDER BY avg_capacity_;",2,6,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/swimming/0013,"mutate(input0, 'n_distinct = n_distinct(country)'), filter(line0, ""country == 'Russia'"")","SELECT DISTINCT `n_distinct` AS `count___`
FROM
  (SELECT `id`,
          `name`,
          `capacity`,
          `city`,
          `country`,
          `opening_year`,
          COUNT(DISTINCT `country`) OVER () AS `n_distinct`
   FROM `df_stadium`)
WHERE (`country` = 'Russia')
ORDER BY count___;",2,8,2,2,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/swimming/0006,"mutate(input0, 'meancapacity = mean(capacity, na.rm = T)'), filter(line0, 'meancapacity >= capacity')","SELECT name
FROM
  (SELECT id,
          name,
          capacity,
          city,
          country,
          opening_year,
          AVG(capacity) OVER () AS meancapacity
   FROM df_stadium)
WHERE (meancapacity >= capacity)
ORDER BY name;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/swimming/0004,"summarise(input0, 'n = n()', ""'city'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT city,
          COUNT() AS n
   FROM df_stadium
   GROUP BY city)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/swimming/0012,"filter(input0, 'opening_year > 2006L'), intersect(line0, line0, 'country'), anti_join(input0, line1, '')","SELECT DISTINCT country
FROM
  (SELECT *
   FROM df_stadium AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT country
           FROM df_stadium
           WHERE (opening_year > 2006) INTERSECT
             SELECT country
             FROM df_stadium WHERE (opening_year > 2006)) AS RHS
        WHERE (LHS.country = RHS.country) ))
ORDER BY country;",3,18,5,1,5,0,4,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0
spider/swimming/0026,"filter(input1, ""result != 'Win' | result == 'Loss'""), inner_join(input0, line0, ""'id' = 'event_id'"")","SELECT DISTINCT `name`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `LHS`.`nationality` AS `nationality`,
          `LHS`.`meter_100` AS `meter_100`,
          `LHS`.`meter_200` AS `meter_200`,
          `LHS`.`meter_300` AS `meter_300`,
          `LHS`.`meter_400` AS `meter_400`,
          `LHS`.`meter_500` AS `meter_500`,
          `LHS`.`meter_600` AS `meter_600`,
          `LHS`.`meter_700` AS `meter_700`,
          `LHS`.`time` AS `time`,
          `RHS`.`id` AS `id_other`,
          `RHS`.`result` AS `result`,
          `RHS`.`swimmer_id` AS `swimmer_id`
   FROM `df_swimmer` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_record`
      WHERE (`result` != 'Win'
             OR `result` = 'Loss')) AS RHS ON (LHS.id = RHS.event_id))
ORDER BY name;",2,10,3,1,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/swimming/0015,"mutate(input0, 'n_distinct = n_distinct(nationality)')","SELECT DISTINCT COUNT(DISTINCT nationality) OVER () AS count_distinct_nationality_
FROM df_swimmer
ORDER BY count_distinct_nationality_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/swimming/0005,"limit(input0, 'opening_year')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_stadium
      ORDER BY opening_year)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/swimming/0016,"summarise(input0, 'n = n()', ""'nationality'""), filter(line0, 'n != 1L')","SELECT nationality,
       n AS count___
FROM
  (SELECT nationality,
          COUNT() AS n
   FROM df_swimmer
   GROUP BY nationality)
WHERE (n != 1)
ORDER BY nationality;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/swimming/0018,"filter(input1, ""result == 'Win'""), inner_join(input0, line0, ""'id' = 'swimmer_id'"")","SELECT `name`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `LHS`.`nationality` AS `nationality`,
          `LHS`.`meter_100` AS `meter_100`,
          `LHS`.`meter_200` AS `meter_200`,
          `LHS`.`meter_300` AS `meter_300`,
          `LHS`.`meter_400` AS `meter_400`,
          `LHS`.`meter_500` AS `meter_500`,
          `LHS`.`meter_600` AS `meter_600`,
          `LHS`.`meter_700` AS `meter_700`,
          `LHS`.`time` AS `time`,
          `RHS`.`id` AS `id_other`,
          `RHS`.`result` AS `result`,
          `RHS`.`event_id` AS `event_id`
   FROM `df_swimmer` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_record`
      WHERE (`result` = 'Win')) AS RHS ON (LHS.id = RHS.swimmer_id))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/swimming/0020,"filter(input1, ""name == 'World Junior'""), inner_join(input0, line0, ""'id' = 'stadium_id'"")","SELECT `name`,
       `capacity`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `LHS`.`capacity` AS `capacity`,
          `LHS`.`city` AS `city`,
          `LHS`.`country` AS `country`,
          `LHS`.`opening_year` AS `opening_year`,
          `RHS`.`id` AS `id_other`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`year` AS `year`
   FROM `df_stadium` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_event`
      WHERE (`name` = 'World Junior')) AS RHS ON (LHS.id = RHS.stadium_id))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/swimming/0019,"anti_join(input0, input1, ""'id','name'""), summarise(line0, 'n = n()', ''), inner_join(input0, line1, ""'id' = 'n'"")","SELECT name
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.capacity AS capacity,
          LHS.city AS city,
          LHS.country AS country,
          LHS.opening_year AS opening_year
   FROM df_stadium AS LHS
   INNER JOIN
     (SELECT COUNT() AS n
      FROM
        (SELECT *
         FROM df_stadium AS LHS
         WHERE NOT EXISTS
             (SELECT 1
              FROM df_event AS RHS
              WHERE (LHS.id = RHS.id
                     AND LHS.name = RHS.name) ))) AS RHS ON (LHS.id = RHS.n))
ORDER BY name;",3,15,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0
spider/swimming/0007,"summarise(input0, 'n = n()', ""'country','id'""), limit(line0, 'desc(id)')","SELECT country
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT country,
                id,
                COUNT() AS n
         FROM df_stadium
         GROUP BY country,
                  id)
      ORDER BY id DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/swimming/0024,"summarise(input1, 'n = n()', ""'result','swimmer_id'""), filter(line0, ""result == 'Win' & n != 1L""), inner_join(input0, line1, ""'id' = 'swimmer_id'"")","SELECT `name`,
       `nationality`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `LHS`.`nationality` AS `nationality`,
          `LHS`.`meter_100` AS `meter_100`,
          `LHS`.`meter_200` AS `meter_200`,
          `LHS`.`meter_300` AS `meter_300`,
          `LHS`.`meter_400` AS `meter_400`,
          `LHS`.`meter_500` AS `meter_500`,
          `LHS`.`meter_600` AS `meter_600`,
          `LHS`.`meter_700` AS `meter_700`,
          `LHS`.`time` AS `time`,
          `RHS`.`result` AS `result`,
          `RHS`.`n` AS `n`
   FROM `df_swimmer` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM
        (SELECT `result`,
                `swimmer_id`,
                COUNT() AS `n`
         FROM `df_record`
         GROUP BY `result`,
                  `swimmer_id`)
      WHERE (`result` = 'Win'
             AND n != 1)) AS RHS ON (LHS.id = RHS.swimmer_id))
ORDER BY name;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/swimming/0021,"inner_join(input0, input1, ""'id' = 'stadium_id'""), anti_join(input0, line0, ""'capacity','id'"")","SELECT name
FROM
  (SELECT *
   FROM df_stadium AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT id,
                  name,
                  capacity,
                  city,
                  country,
                  opening_year,
                  id_other,
                  name_other,
                  YEAR,
                  id AS stadium_id
           FROM
             (SELECT LHS.id AS id,
                     LHS.name AS name,
                     LHS.capacity AS capacity,
                     LHS.city AS city,
                     LHS.country AS country,
                     LHS.opening_year AS opening_year,
                     RHS.id AS id_other,
                     RHS.name AS name_other,
                     RHS.year AS YEAR
              FROM df_stadium AS LHS
              INNER JOIN df_event AS RHS ON (LHS.id = RHS.stadium_id))) AS RHS
        WHERE (LHS.capacity = RHS.capacity
               AND LHS.id = RHS.id) ))
ORDER BY name;",2,17,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
spider/swimming/0023,"summarise(input1, 'n = n()', ""'swimmer_id'""), filter(line0, 'n != 2L'), inner_join(input0, line1, ""'id' = 'n'"")","SELECT DISTINCT name
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.nationality AS nationality,
          LHS.meter_100 AS meter_100,
          LHS.meter_200 AS meter_200,
          LHS.meter_300 AS meter_300,
          LHS.meter_400 AS meter_400,
          LHS.meter_500 AS meter_500,
          LHS.meter_600 AS meter_600,
          LHS.meter_700 AS meter_700,
          LHS.time AS TIME,
          RHS.swimmer_id AS swimmer_id
   FROM df_swimmer AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT swimmer_id,
                COUNT() AS n
         FROM df_record
         GROUP BY swimmer_id)
      WHERE (n != 2)) AS RHS ON (LHS.id = RHS.n))
ORDER BY name;",3,12,4,1,4,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/swimming/0001,"summarise(input0, 'n = n()', ""'id','year'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT id,
          YEAR,
          COUNT() AS n
   FROM df_event
   GROUP BY id,
            YEAR)
ORDER BY count___;",2,8,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/swimming/0014,df_swimmer,"SELECT name
FROM df_swimmer
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/swimming/0009,"filter(input0, 'capacity < 60000L & capacity < 50000L'), natural_join(input0, line0)","SELECT DISTINCT country
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.capacity AS capacity,
          LHS.city AS city,
          LHS.country AS country,
          LHS.opening_year AS opening_year
   FROM df_stadium AS LHS
   INNER JOIN
     (SELECT *
      FROM df_stadium
      WHERE (capacity < 60000
             AND capacity < 50000)) AS RHS ON (LHS.id = RHS.id
                                               AND LHS.name = RHS.name
                                               AND LHS.capacity = RHS.capacity
                                               AND LHS.city = RHS.city
                                               AND LHS.country = RHS.country
                                               AND LHS.opening_year = RHS.opening_year))
ORDER BY country;",2,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/swimming/0011,"summarise(input0, 'n = n()', ""'country'"")","SELECT country,
       n AS count___
FROM
  (SELECT country,
          COUNT() AS n
   FROM df_stadium
   GROUP BY country)
ORDER BY country;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/swimming/0029,df_swimmer,"SELECT id,
       name,
       nationality,
       meter_100,
       meter_200,
       meter_300,
       meter_400,
       meter_500,
       meter_600,
       meter_700,
       TIME
FROM df_swimmer
ORDER BY id;",0,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/swimming/0010,"filter(input0, 'opening_year < 2006L'), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count_distinct_city_
FROM df_stadium
WHERE (opening_year < 2006)
ORDER BY count_distinct_city_;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/swimming/0028,"summarise(input1, 'n = n()', ''), natural_join3(input0, input2, line0), limit(line1, 'desc(result)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.id AS id,
                LHS.name AS name,
                LHS.capacity AS capacity,
                LHS.city AS city,
                LHS.country AS country,
                LHS.opening_year AS opening_year,
                LHS.result AS RESULT,
                LHS.swimmer_id AS swimmer_id,
                LHS.event_id AS event_id,
                RHS.n AS n
         FROM
           (SELECT LHS.id AS id,
                   LHS.name AS name,
                   LHS.capacity AS capacity,
                   LHS.city AS city,
                   LHS.country AS country,
                   LHS.opening_year AS opening_year,
                   RHS.result AS RESULT,
                   RHS.swimmer_id AS swimmer_id,
                   RHS.event_id AS event_id
            FROM df_stadium AS LHS
            INNER JOIN df_record AS RHS ON (LHS.id = RHS.id)) AS LHS
         CROSS JOIN
           (SELECT COUNT() AS n
            FROM df_event) AS RHS)
      ORDER BY RESULT DESC)
   LIMIT 1);",2,18,6,0,6,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
spider/perpetrator/0002,df_perpetrator,"SELECT date
FROM df_perpetrator
ORDER BY date;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/perpetrator/0017,"anti_join(input1, input0, '')","SELECT name
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_perpetrator AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/perpetrator/0008,"filter(input0, ""country != 'China'""), semi_join(input1, line0)","SELECT `name`
FROM
  (SELECT *
   FROM `df_people` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_perpetrator`
           WHERE (`country` != 'China')) AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/perpetrator/0003,"intersect(input0, input0, 'injured')","SELECT injured
FROM
  (SELECT injured
   FROM df_perpetrator INTERSECT SELECT injured
   FROM df_perpetrator)
ORDER BY injured;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/perpetrator/0013,"summarise(input0, 'n = n()', ""'country'"")","SELECT country,
       n AS count___
FROM
  (SELECT country,
          COUNT() AS n
   FROM df_perpetrator
   GROUP BY country)
ORDER BY country;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/perpetrator/0006,df_people,"SELECT name
FROM df_people
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/perpetrator/0004,"summarise(input0, 'meaninjured = mean(injured, na.rm = T)', '')","SELECT meaninjured AS avg_injured_
FROM
  (SELECT AVG(injured) AS meaninjured
   FROM df_perpetrator)
ORDER BY avg_injured_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/perpetrator/0012,"semi_join(input1, input0)","SELECT height
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_perpetrator AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY height;",1,9,3,0,3,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
spider/perpetrator/0015,"summarise(input0, 'n = n()', ""'country'""), filter(line0, 'n >= 2L')","SELECT country,
       n AS count___
FROM
  (SELECT country,
          COUNT() AS n
   FROM df_perpetrator
   GROUP BY country)
WHERE (n >= 2)
ORDER BY country;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/perpetrator/0005,"limit(input0, 'perpetrator_id')","SELECT LOCATION
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_perpetrator
      ORDER BY perpetrator_id)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/perpetrator/0016,"semi_join(input1, input0)","SELECT name
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_perpetrator AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY name;",1,9,3,0,3,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
spider/perpetrator/0018,"filter(input0, 'injured > 50L | injured == 20L'), cross_join(line0, input0, 'injured != injured.other')","SELECT DISTINCT country
FROM
  (SELECT LHS.perpetrator_id AS perpetrator_id,
          LHS.people_id AS people_id,
          LHS.date AS date,
          LHS.year AS YEAR,
          LHS.location AS LOCATION,
          LHS.country AS country,
          LHS.killed AS killed,
          LHS.injured AS injured,
          RHS.perpetrator_id AS perpetrator_id_other,
          RHS.people_id AS people_id_other,
          RHS.date AS date_other,
          RHS.year AS year_other,
          RHS.location AS location_other,
          RHS.country AS country_other,
          RHS.killed AS killed_other,
          RHS.injured AS injured_other
   FROM
     (SELECT *
      FROM df_perpetrator
      WHERE (injured > 50
             OR injured = 20)) AS LHS
   CROSS JOIN df_perpetrator AS RHS)
WHERE (injured != injured_other)
ORDER BY country;",2,11,3,1,3,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
spider/perpetrator/0020,"natural_join(input0, input1), limit(line0, 'desc(home_town)')","SELECT date
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.perpetrator_id AS perpetrator_id,
                LHS.people_id AS people_id,
                LHS.date AS date,
                LHS.year AS YEAR,
                LHS.location AS LOCATION,
                LHS.country AS country,
                LHS.killed AS killed,
                LHS.injured AS injured,
                RHS.name AS name,
                RHS.height AS height,
                RHS.weight AS weight,
                RHS.home_town AS home_town
         FROM df_perpetrator AS LHS
         INNER JOIN df_people AS RHS ON (LHS.people_id = RHS.people_id))
      ORDER BY home_town DESC)
   LIMIT 1);",1,12,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/perpetrator/0007,"semi_join(input1, input0)","SELECT name
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_perpetrator AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY name;",1,9,3,0,3,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
spider/perpetrator/0021,"summarise(input0, 'year = max(year)', ""'location','perpetrator_id'""), summarise(line0, 'maxyear = max(year)', '')","SELECT maxyear AS max_year_
FROM
  (SELECT MAX(YEAR) AS maxyear
   FROM
     (SELECT LOCATION,
             perpetrator_id,
             MAX(YEAR) AS YEAR
      FROM df_perpetrator
      GROUP BY LOCATION,
               perpetrator_id))
ORDER BY max_year_;",2,9,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/perpetrator/0001,"summarise(input0, 'n = n()', ""'date','year'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT date, YEAR,
                COUNT() AS n
   FROM df_perpetrator
   GROUP BY date, YEAR)
ORDER BY count___;",2,8,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/perpetrator/0014,"summarise(input0, 'n = n()', ""'country','perpetrator_id'""), limit(line0, 'desc(n)')","SELECT country,
       perpetrator_id AS count___
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT country,
                perpetrator_id,
                COUNT() AS n
         FROM df_perpetrator
         GROUP BY country,
                  perpetrator_id)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/perpetrator/0009,"natural_join(input0, input1), limit(line0, 'country')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.perpetrator_id AS perpetrator_id,
                LHS.people_id AS people_id,
                LHS.date AS date,
                LHS.year AS YEAR,
                LHS.location AS LOCATION,
                LHS.country AS country,
                LHS.killed AS killed,
                LHS.injured AS injured,
                RHS.name AS name,
                RHS.height AS height,
                RHS.weight AS weight,
                RHS.home_town AS home_town
         FROM df_perpetrator AS LHS
         INNER JOIN df_people AS RHS ON (LHS.people_id = RHS.people_id))
      ORDER BY country)
   LIMIT 1);",1,11,4,0,4,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/perpetrator/0011,"filter(input0, ""country == 'China' | country == 'Japan'""), semi_join(input1, line0)","SELECT `name`
FROM
  (SELECT *
   FROM `df_people` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_perpetrator`
           WHERE (`country` = 'China'
                  OR `country` = 'Japan')) AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY name;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/perpetrator/0010,"filter(input0, ""killed != '1.84'""), natural_join(input1, line0), mutate(line1, 'sumkilled = sum(killed)')","SELECT DISTINCT SUM(`killed`) OVER () AS `sum_t2_killed_`
FROM
  (SELECT `LHS`.`people_id` AS `people_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`height` AS `height`,
          `LHS`.`weight` AS `weight`,
          `LHS`.`home_town` AS `home_town`,
          `RHS`.`perpetrator_id` AS `perpetrator_id`,
          `RHS`.`date` AS `date`,
          `RHS`.`year` AS `year`,
          `RHS`.`location` AS `location`,
          `RHS`.`country` AS `country`,
          `RHS`.`killed` AS `killed`,
          `RHS`.`injured` AS `injured`
   FROM `df_people` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_perpetrator`
      WHERE (`killed` != '1.84')) AS RHS ON (LHS.people_id = RHS.people_id))
ORDER BY sum_t2_killed_;",3,10,3,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0033,"summarise(input0, 'n_distinct = n_distinct(employee_id)', ""'copy_number','document_id'"")","SELECT document_id,
       n_distinct AS count_distinct_employee_id_
FROM
  (SELECT copy_number,
          document_id,
          COUNT(DISTINCT employee_id) AS n_distinct
   FROM df_circulation_history
   GROUP BY copy_number,
            document_id)
ORDER BY document_id;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0002,"filter(input0, ""document_status_code == 'working'""), intersect(line0, input0, 'document_status_description')","SELECT `document_status_description`
FROM
  (SELECT `document_status_description`
   FROM `df_ref_document_status`
   WHERE (`document_status_code` = 'working') INTERSECT
     SELECT document_status_description
     FROM df_ref_document_status)
ORDER BY document_status_description;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/cre_Doc_Control_Systems/0017,"filter(input0, ""document_status_code == 'done' & document_type_code == 'Paper'"")","SELECT `document_id`
FROM `df_documents`
WHERE (`document_status_code` = 'done'
       AND `document_type_code` = 'Paper')
ORDER BY document_id;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0008,"filter(input0, ""role_code == 'ED'""), intersect(line0, input0, 'role_description')","SELECT `role_description`
FROM
  (SELECT `role_description`
   FROM `df_roles`
   WHERE (`role_code` = 'ED') INTERSECT
     SELECT role_description
     FROM df_roles)
ORDER BY role_description;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/cre_Doc_Control_Systems/0003,df_ref_document_types,"SELECT document_type_code
FROM df_ref_document_types
ORDER BY document_type_code;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0027,"summarise(input0, 'n = n()', ""'document_id'""), filter(line0, 'n == 2L & n <= document_id')","SELECT document_id AS count___
FROM
  (SELECT document_id,
          COUNT() AS n
   FROM df_draft_copies
   GROUP BY document_id)
WHERE (n = 2
       AND n <= document_id)
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0022,"filter(input1, 'document_id == 4L'), inner_join(input0, line0, ""'address_id' = 'mailed_to_address_id'"")","SELECT address_details
FROM
  (SELECT LHS.address_id AS address_id,
          LHS.address_details AS address_details,
          RHS.document_id AS document_id,
          RHS.mailing_date AS mailing_date
   FROM df_addresses AS LHS
   INNER JOIN
     (SELECT *
      FROM df_documents_mailed
      WHERE (document_id = 4)) AS RHS ON (LHS.address_id = RHS.mailed_to_address_id))
ORDER BY address_details;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0030,"filter(input1, 'document_id == 1L'), left_join(line0, input0)","SELECT employee_name
FROM
  (SELECT LHS.document_id AS document_id,
          LHS.draft_number AS draft_number,
          LHS.copy_number AS copy_number,
          LHS.employee_id AS employee_id,
          RHS.role_code AS role_code,
          RHS.employee_name AS employee_name,
          RHS.other_details AS other_details
   FROM
     (SELECT *
      FROM df_circulation_history
      WHERE (document_id = 1)) AS LHS
   LEFT JOIN df_employees AS RHS ON (LHS.employee_id = RHS.employee_id))
ORDER BY employee_name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0013,"summarise(input1, 'n_distinct = n_distinct(employee_id)', ""'role_code'""), filter(line0, 'n_distinct > 1L'), left_join(line1, input0)","SELECT role_description,
       n_distinct AS count_employees_employee_id_
FROM
  (SELECT LHS.role_code AS role_code,
          LHS.n_distinct AS n_distinct,
          RHS.role_description AS role_description
   FROM
     (SELECT *
      FROM
        (SELECT role_code,
                COUNT(DISTINCT employee_id) AS n_distinct
         FROM df_employees
         GROUP BY role_code)
      WHERE (n_distinct > 1)) AS LHS
   LEFT JOIN df_roles AS RHS ON (LHS.role_code = RHS.role_code))
ORDER BY role_description;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0006,"filter(input0, ""shipping_agent_name == 'UPS'"")","SELECT `shipping_agent_code`
FROM `df_ref_shipping_agents`
WHERE (`shipping_agent_name` = 'UPS')
ORDER BY shipping_agent_code;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0004,"filter(input0, ""document_type_code == 'Paper'""), intersect(line0, input0, 'document_type_description')","SELECT `document_type_description`
FROM
  (SELECT `document_type_description`
   FROM `df_ref_document_types`
   WHERE (`document_type_code` = 'Paper') INTERSECT
     SELECT document_type_description
     FROM df_ref_document_types)
ORDER BY document_type_description;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/cre_Doc_Control_Systems/0012,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'role_code','role_description'"")","SELECT role_description,
       role_code,
       n AS count___
FROM
  (SELECT role_code,
          role_description,
          COUNT() AS n
   FROM
     (SELECT LHS.role_code AS role_code,
             LHS.role_description AS role_description,
             RHS.employee_id AS employee_id,
             RHS.employee_name AS employee_name,
             RHS.other_details AS other_details
      FROM df_roles AS LHS
      INNER JOIN df_employees AS RHS ON (LHS.role_code = RHS.role_code))
   GROUP BY role_code,
            role_description)
ORDER BY role_description;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0026,"filter(input0, 'document_id == 7L'), semi_join(input0, line0)","SELECT draft_details
FROM
  (SELECT *
   FROM df_document_drafts AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_document_drafts
           WHERE (document_id = 7)) AS RHS
        WHERE (LHS.document_id = RHS.document_id
               AND LHS.draft_number = RHS.draft_number
               AND LHS.draft_details = RHS.draft_details) ))
ORDER BY draft_details;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/cre_Doc_Control_Systems/0015,"summarise(input0, 'n = n()', ""'document_status_code','document_type_code'""), filter(line0, ""document_status_code == 'done'"")","SELECT `n` AS `count___`
FROM
  (SELECT `document_status_code`,
          `document_type_code`,
          COUNT() AS `n`
   FROM `df_documents`
   GROUP BY `document_status_code`,
            `document_type_code`)
WHERE (`document_status_code` = 'done')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0005,df_ref_shipping_agents,"SELECT shipping_agent_name
FROM df_ref_shipping_agents
ORDER BY shipping_agent_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0016,"filter(input0, 'document_id == 2L')","SELECT document_type_code
FROM df_documents
WHERE (document_id = 2)
ORDER BY document_type_code;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0032,"summarise(input1, 'n = n()', ""'copy_number'""), filter(line0, 'n == 1L'), inner_join(input0, line1, ""'employee_id' = 'n'"")","SELECT DISTINCT employee_name,
                employee_id AS count___
FROM
  (SELECT LHS.employee_id AS employee_id,
          LHS.role_code AS role_code,
          LHS.employee_name AS employee_name,
          LHS.other_details AS other_details,
          RHS.copy_number AS copy_number
   FROM df_employees AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT copy_number,
                COUNT() AS n
         FROM df_circulation_history
         GROUP BY copy_number)
      WHERE (n = 1)) AS RHS ON (LHS.employee_id = RHS.n))
ORDER BY employee_name;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0018,"filter(input1, 'document_id == 2L'), natural_join3(input0, input1, line0)","SELECT shipping_agent_name
FROM
  (SELECT LHS.shipping_agent_code AS shipping_agent_code,
          LHS.shipping_agent_name AS shipping_agent_name,
          LHS.shipping_agent_description AS shipping_agent_description,
          LHS.document_id AS document_id,
          LHS.document_status_code AS document_status_code,
          LHS.document_type_code AS document_type_code,
          LHS.receipt_date AS receipt_date,
          LHS.receipt_number AS receipt_number,
          LHS.other_details AS other_details
   FROM
     (SELECT LHS.shipping_agent_code AS shipping_agent_code,
             LHS.shipping_agent_name AS shipping_agent_name,
             LHS.shipping_agent_description AS shipping_agent_description,
             RHS.document_id AS document_id,
             RHS.document_status_code AS document_status_code,
             RHS.document_type_code AS document_type_code,
             RHS.receipt_date AS receipt_date,
             RHS.receipt_number AS receipt_number,
             RHS.other_details AS other_details
      FROM df_ref_shipping_agents AS LHS
      INNER JOIN df_documents AS RHS ON (LHS.shipping_agent_code = RHS.shipping_agent_code)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_documents
      WHERE (document_id = 2)) AS RHS ON (LHS.shipping_agent_code = RHS.shipping_agent_code
                                          AND LHS.document_id = RHS.document_id
                                          AND LHS.document_status_code = RHS.document_status_code
                                          AND LHS.document_type_code = RHS.document_type_code
                                          AND LHS.receipt_date = RHS.receipt_date
                                          AND LHS.receipt_number = RHS.receipt_number
                                          AND LHS.other_details = RHS.other_details))
ORDER BY shipping_agent_name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0020,"filter(input1, 'document_id <= 1L'), summarise(input1, 'n = n()', ""'shipping_agent_code'""), natural_join3(input0, line0, line1)","SELECT shipping_agent_name,
       n AS count_documents_document_id_
FROM
  (SELECT LHS.shipping_agent_code AS shipping_agent_code,
          LHS.shipping_agent_name AS shipping_agent_name,
          LHS.shipping_agent_description AS shipping_agent_description,
          LHS.document_id AS document_id,
          LHS.document_status_code AS document_status_code,
          LHS.document_type_code AS document_type_code,
          LHS.receipt_date AS receipt_date,
          LHS.receipt_number AS receipt_number,
          LHS.other_details AS other_details,
          RHS.n AS n
   FROM
     (SELECT LHS.shipping_agent_code AS shipping_agent_code,
             LHS.shipping_agent_name AS shipping_agent_name,
             LHS.shipping_agent_description AS shipping_agent_description,
             RHS.document_id AS document_id,
             RHS.document_status_code AS document_status_code,
             RHS.document_type_code AS document_type_code,
             RHS.receipt_date AS receipt_date,
             RHS.receipt_number AS receipt_number,
             RHS.other_details AS other_details
      FROM df_ref_shipping_agents AS LHS
      INNER JOIN
        (SELECT *
         FROM df_documents
         WHERE (document_id <= 1)) AS RHS ON (LHS.shipping_agent_code = RHS.shipping_agent_code)) AS LHS
   INNER JOIN
     (SELECT shipping_agent_code,
             COUNT() AS n
      FROM df_documents
      GROUP BY shipping_agent_code) AS RHS ON (LHS.shipping_agent_code = RHS.shipping_agent_code))
ORDER BY shipping_agent_name;",3,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0019,"filter(input0, ""shipping_agent_name != 'USPS'""), anti_join(input1, line0, ''), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM
  (SELECT *
   FROM `df_documents` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_ref_shipping_agents`
           WHERE (`shipping_agent_name` != 'USPS')) AS RHS
        WHERE (LHS.shipping_agent_code = RHS.shipping_agent_code) ))
ORDER BY count___;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/cre_Doc_Control_Systems/0007,df_roles,"SELECT role_code
FROM df_roles
ORDER BY role_code;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0024,"filter(input1, ""document_status_code == 'done' | document_type_code != 'Paper'""), natural_join3(input0, input1, line0), filter(line1, ""document_status_code == 'done' & shipping_agent_name != 'USPS'"")","SELECT `document_id`
FROM
  (SELECT `LHS`.`shipping_agent_code` AS `shipping_agent_code`,
          `LHS`.`shipping_agent_name` AS `shipping_agent_name`,
          `LHS`.`shipping_agent_description` AS `shipping_agent_description`,
          `LHS`.`document_id` AS `document_id`,
          `LHS`.`document_status_code` AS `document_status_code`,
          `LHS`.`document_type_code` AS `document_type_code`,
          `LHS`.`receipt_date` AS `receipt_date`,
          `LHS`.`receipt_number` AS `receipt_number`,
          `LHS`.`other_details` AS `other_details`
   FROM
     (SELECT `LHS`.`shipping_agent_code` AS `shipping_agent_code`,
             `LHS`.`shipping_agent_name` AS `shipping_agent_name`,
             `LHS`.`shipping_agent_description` AS `shipping_agent_description`,
             `RHS`.`document_id` AS `document_id`,
             `RHS`.`document_status_code` AS `document_status_code`,
             `RHS`.`document_type_code` AS `document_type_code`,
             `RHS`.`receipt_date` AS `receipt_date`,
             `RHS`.`receipt_number` AS `receipt_number`,
             `RHS`.`other_details` AS `other_details`
      FROM `df_ref_shipping_agents` AS `LHS`
      INNER JOIN `df_documents` AS `RHS` ON (`LHS`.`shipping_agent_code` = `RHS`.`shipping_agent_code`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_documents`
      WHERE (`document_status_code` = 'done'
             OR `document_type_code` != 'Paper')) AS `RHS` ON (`LHS`.`shipping_agent_code` = `RHS`.`shipping_agent_code`
                                                               AND `LHS`.`document_id` = `RHS`.`document_id`
                                                               AND `LHS`.`document_status_code` = `RHS`.`document_status_code`
                                                               AND `LHS`.`document_type_code` = `RHS`.`document_type_code`
                                                               AND `LHS`.`receipt_date` = `RHS`.`receipt_date`
                                                               AND `LHS`.`receipt_number` = `RHS`.`receipt_number`
                                                               AND `LHS`.`other_details` = `RHS`.`other_details`))
WHERE (`document_status_code` = 'done'
       AND `shipping_agent_name` != 'USPS')
ORDER BY document_id;",3,13,4,0,4,2,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0021,"filter(input0, 'document_id == 3L'), semi_join(input0, line0)","SELECT receipt_date
FROM
  (SELECT *
   FROM df_documents AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_documents
           WHERE (document_id = 3)) AS RHS
        WHERE (LHS.document_id = RHS.document_id
               AND LHS.document_status_code = RHS.document_status_code
               AND LHS.document_type_code = RHS.document_type_code
               AND LHS.shipping_agent_code = RHS.shipping_agent_code
               AND LHS.receipt_date = RHS.receipt_date
               AND LHS.receipt_number = RHS.receipt_number
               AND LHS.other_details = RHS.other_details) ))
ORDER BY receipt_date;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/cre_Doc_Control_Systems/0023,"filter(input0, 'document_id == 7L'), semi_join(input0, line0)","SELECT mailing_date
FROM
  (SELECT *
   FROM df_documents_mailed AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_documents_mailed
           WHERE (document_id = 7)) AS RHS
        WHERE (LHS.document_id = RHS.document_id
               AND LHS.mailed_to_address_id = RHS.mailed_to_address_id
               AND LHS.mailing_date = RHS.mailing_date) ))
ORDER BY mailing_date;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/cre_Doc_Control_Systems/0001,df_ref_document_status,"SELECT document_status_code
FROM df_ref_document_status
ORDER BY document_status_code;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0014,"natural_join(input0, input1), limit(line0, 'desc(document_type_code)')","SELECT document_status_description
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.document_status_code AS document_status_code,
                LHS.document_status_description AS document_status_description,
                RHS.document_id AS document_id,
                RHS.document_type_code AS document_type_code,
                RHS.shipping_agent_code AS shipping_agent_code,
                RHS.receipt_date AS receipt_date,
                RHS.receipt_number AS receipt_number,
                RHS.other_details AS other_details
         FROM df_ref_document_status AS LHS
         INNER JOIN df_documents AS RHS ON (LHS.document_status_code = RHS.document_status_code))
      ORDER BY document_type_code DESC)
   LIMIT 1);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0009,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_employees)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0025,"filter(input0, ""shipping_agent_name == 'USPS'""), filter(input1, ""document_status_code == 'done' | document_type_code == 'Paper'""), natural_join4(input0, input1, line0, line1)","SELECT `document_id`
FROM
  (SELECT `LHS`.`shipping_agent_code` AS `shipping_agent_code`,
          `LHS`.`shipping_agent_name` AS `shipping_agent_name`,
          `LHS`.`shipping_agent_description` AS `shipping_agent_description`,
          `LHS`.`document_id` AS `document_id`,
          `LHS`.`document_status_code` AS `document_status_code`,
          `LHS`.`document_type_code` AS `document_type_code`,
          `LHS`.`receipt_date` AS `receipt_date`,
          `LHS`.`receipt_number` AS `receipt_number`,
          `LHS`.`other_details` AS `other_details`
   FROM
     (SELECT `LHS`.`shipping_agent_code` AS `shipping_agent_code`,
             `LHS`.`shipping_agent_name` AS `shipping_agent_name`,
             `LHS`.`shipping_agent_description` AS `shipping_agent_description`,
             `LHS`.`document_id` AS `document_id`,
             `LHS`.`document_status_code` AS `document_status_code`,
             `LHS`.`document_type_code` AS `document_type_code`,
             `LHS`.`receipt_date` AS `receipt_date`,
             `LHS`.`receipt_number` AS `receipt_number`,
             `LHS`.`other_details` AS `other_details`
      FROM
        (SELECT `LHS`.`shipping_agent_code` AS `shipping_agent_code`,
                `LHS`.`shipping_agent_name` AS `shipping_agent_name`,
                `LHS`.`shipping_agent_description` AS `shipping_agent_description`,
                `RHS`.`document_id` AS `document_id`,
                `RHS`.`document_status_code` AS `document_status_code`,
                `RHS`.`document_type_code` AS `document_type_code`,
                `RHS`.`receipt_date` AS `receipt_date`,
                `RHS`.`receipt_number` AS `receipt_number`,
                `RHS`.`other_details` AS `other_details`
         FROM `df_ref_shipping_agents` AS `LHS`
         INNER JOIN `df_documents` AS `RHS` ON (`LHS`.`shipping_agent_code` = `RHS`.`shipping_agent_code`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_ref_shipping_agents`
         WHERE (`shipping_agent_name` = 'USPS')) AS `RHS` ON (`LHS`.`shipping_agent_code` = `RHS`.`shipping_agent_code`
                                                              AND `LHS`.`shipping_agent_name` = `RHS`.`shipping_agent_name`
                                                              AND `LHS`.`shipping_agent_description` = `RHS`.`shipping_agent_description`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_documents`
      WHERE (`document_status_code` = 'done'
             OR `document_type_code` = 'Paper')) AS RHS ON (LHS.shipping_agent_code = RHS.shipping_agent_code
                                                            AND LHS.document_id = RHS.document_id
                                                            AND LHS.document_status_code = RHS.document_status_code
                                                            AND LHS.document_type_code = RHS.document_type_code
                                                            AND LHS.receipt_date = RHS.receipt_date
                                                            AND LHS.receipt_number = RHS.receipt_number
                                                            AND LHS.other_details = RHS.other_details))
ORDER BY document_id;",3,18,6,0,6,3,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0
spider/cre_Doc_Control_Systems/0011,df_documents,"SELECT document_id,
       receipt_date
FROM df_documents
ORDER BY document_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0029,"summarise(input0, 'n = n()', ""'copy_number','document_id'""), inner_join(input0, line0, ""'draft_number' = 'n','copy_number' = 'copy_number'"")","SELECT document_id,
       document_id_other AS count___
FROM
  (SELECT LHS.document_id AS document_id,
          LHS.draft_number AS draft_number,
          LHS.copy_number AS copy_number,
          RHS.document_id AS document_id_other
   FROM df_draft_copies AS LHS
   INNER JOIN
     (SELECT copy_number,
             document_id,
             COUNT() AS n
      FROM df_draft_copies
      GROUP BY copy_number,
               document_id) AS RHS ON (LHS.draft_number = RHS.n
                                       AND LHS.copy_number = RHS.copy_number))
ORDER BY document_id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0010,"filter(input1, ""employee_name == 'Koby'""), natural_join(input0, line0)","SELECT `role_description`
FROM
  (SELECT `LHS`.`role_code` AS `role_code`,
          `LHS`.`role_description` AS `role_description`,
          `RHS`.`employee_id` AS `employee_id`,
          `RHS`.`employee_name` AS `employee_name`,
          `RHS`.`other_details` AS `other_details`
   FROM `df_roles` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_employees`
      WHERE (`employee_name` = 'Koby')) AS RHS ON (LHS.role_code = RHS.role_code))
ORDER BY role_description;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0028,"summarise(input0, 'n_distinct = n_distinct(copy_number)', ""'document_id'""), limit(line0, 'desc(n_distinct)')","SELECT document_id,
       n_distinct AS count_copy_number_
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT document_id,
                COUNT(DISTINCT copy_number) AS n_distinct
         FROM df_draft_copies
         GROUP BY document_id)
      ORDER BY n_distinct DESC)
   LIMIT 1);",1,11,4,1,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Control_Systems/0031,"anti_join(input0, input1, ""'employee_id'"")","SELECT employee_name
FROM
  (SELECT *
   FROM df_employees AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_circulation_history AS RHS
        WHERE (LHS.employee_id = RHS.employee_id) ))
ORDER BY employee_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/pilot_record/0002,df_pilot,"SELECT pilot_name
FROM df_pilot
ORDER BY pilot_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/pilot_record/0008,"summarise(input0, 'n = n()', ""'nationality','pilot_id'""), limit(line0, 'pilot_id')","SELECT nationality
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT nationality,
                pilot_id,
                COUNT() AS n
         FROM df_pilot
         GROUP BY nationality,
                  pilot_id)
      ORDER BY pilot_id)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/pilot_record/0013,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'nationality','pilot_name'"")","SELECT pilot_name,
       n AS count___
FROM
  (SELECT nationality,
          pilot_name,
          COUNT() AS n
   FROM
     (SELECT LHS.pilot_id AS pilot_id,
             LHS.pilot_name AS pilot_name,
             LHS.rank AS rank,
             LHS.age AS age,
             LHS.nationality AS nationality,
             LHS.position AS POSITION,
             LHS.join_year AS join_year,
             LHS.team AS team,
             RHS.record_id AS record_id,
             RHS.aircraft_id AS aircraft_id,
             RHS.date AS date
      FROM df_pilot AS LHS
      INNER JOIN df_pilot_record AS RHS ON (LHS.pilot_id = RHS.pilot_id))
   GROUP BY nationality,
            pilot_name)
ORDER BY pilot_name;",2,8,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/pilot_record/0006,"limit(input0, 'rank')","SELECT join_year
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_pilot
      ORDER BY rank)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/pilot_record/0004,"filter(input0, 'age > 30L'), natural_join(input0, line0)","SELECT DISTINCT POSITION
FROM
  (SELECT LHS.pilot_id AS pilot_id,
          LHS.pilot_name AS pilot_name,
          LHS.rank AS rank,
          LHS.age AS age,
          LHS.nationality AS nationality,
          LHS.position AS POSITION,
          LHS.join_year AS join_year,
          LHS.team AS team
   FROM df_pilot AS LHS
   INNER JOIN
     (SELECT *
      FROM df_pilot
      WHERE (age > 30)) AS RHS ON (LHS.pilot_id = RHS.pilot_id
                                   AND LHS.pilot_name = RHS.pilot_name
                                   AND LHS.rank = RHS.rank
                                   AND LHS.age = RHS.age
                                   AND LHS.nationality = RHS.nationality
                                   AND LHS.position = RHS.position
                                   AND LHS.join_year = RHS.join_year
                                   AND LHS.team = RHS.team))
ORDER BY POSITION;",2,12,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/pilot_record/0012,"filter(input1, 'age <= 34L'), natural_join3(input0, input2, line0)","SELECT fleet_series
FROM
  (SELECT LHS.aircraft_id AS aircraft_id,
          LHS.order_year AS order_year,
          LHS.manufacturer AS manufacturer,
          LHS.model AS model,
          LHS.fleet_series AS fleet_series,
          LHS.powertrain AS powertrain,
          LHS.fuel_propulsion AS fuel_propulsion,
          LHS.record_id AS record_id,
          LHS.pilot_id AS pilot_id,
          LHS.date AS date,
          RHS.pilot_name AS pilot_name,
          RHS.rank AS rank,
          RHS.age AS age,
          RHS.nationality AS nationality,
          RHS.position AS POSITION,
          RHS.join_year AS join_year,
          RHS.team AS team
   FROM
     (SELECT LHS.aircraft_id AS aircraft_id,
             LHS.order_year AS order_year,
             LHS.manufacturer AS manufacturer,
             LHS.model AS model,
             LHS.fleet_series AS fleet_series,
             LHS.powertrain AS powertrain,
             LHS.fuel_propulsion AS fuel_propulsion,
             RHS.record_id AS record_id,
             RHS.pilot_id AS pilot_id,
             RHS.date AS date
      FROM df_aircraft AS LHS
      INNER JOIN df_pilot_record AS RHS ON (LHS.aircraft_id = RHS.aircraft_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_pilot
      WHERE (age <= 34)) AS RHS ON (LHS.pilot_id = RHS.pilot_id))
ORDER BY fleet_series;",2,12,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/pilot_record/0015,"anti_join(input0, input1, ""'pilot_id'"")","SELECT pilot_name
FROM
  (SELECT *
   FROM df_pilot AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_pilot_record AS RHS
        WHERE (LHS.pilot_id = RHS.pilot_id) ))
ORDER BY pilot_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/pilot_record/0005,"filter(input0, ""team == 'Bradley' | team == 'Fordham'""), intersect(line0, input0, 'pilot_name')","SELECT `pilot_name`
FROM
  (SELECT `pilot_name`
   FROM `df_pilot`
   WHERE (`team` = 'Bradley'
          OR `team` = 'Fordham') INTERSECT
     SELECT pilot_name
     FROM df_pilot)
ORDER BY pilot_name;",2,9,3,0,3,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/pilot_record/0007,"summarise(input0, 'n = n()', ""'nationality'"")","SELECT nationality,
       n AS count___
FROM
  (SELECT nationality,
          COUNT() AS n
   FROM df_pilot
   GROUP BY nationality)
ORDER BY nationality;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/pilot_record/0001,"summarise(input0, 'n = n()', ""'join_year','team'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT join_year,
          team,
          COUNT() AS n
   FROM df_pilot
   GROUP BY join_year,
            team)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/pilot_record/0014,"left_join(input1, input0), inner_join(line0, line0, ""'pilot_id' = 'aircraft_id','rank' = 'rank'""), mutate(line1, 'n = n()')","SELECT DISTINCT pilot_name,
                COUNT(*) OVER () AS count___
FROM
  (SELECT record_id,
          pilot_id,
          pilot_id AS aircraft_id, date, pilot_name,
                                         rank,
                                         age,
                                         nationality,
                                         POSITION,
                                         join_year,
                                         team,
                                         record_id_other,
                                         pilot_id_other,
                                         date_other,
                                         pilot_name_other,
                                         age_other,
                                         nationality_other,
                                         position_other,
                                         join_year_other,
                                         team_other
   FROM
     (SELECT LHS.record_id AS record_id,
             LHS.pilot_id AS pilot_id,
             LHS.aircraft_id AS aircraft_id,
             LHS.date AS date,
             LHS.pilot_name AS pilot_name,
             LHS.rank AS rank,
             LHS.age AS age,
             LHS.nationality AS nationality,
             LHS.position AS POSITION,
             LHS.join_year AS join_year,
             LHS.team AS team,
             RHS.record_id AS record_id_other,
             RHS.pilot_id AS pilot_id_other,
             RHS.date AS date_other,
             RHS.pilot_name AS pilot_name_other,
             RHS.age AS age_other,
             RHS.nationality AS nationality_other,
             RHS.position AS position_other,
             RHS.join_year AS join_year_other,
             RHS.team AS team_other
      FROM
        (SELECT LHS.record_id AS record_id,
                LHS.pilot_id AS pilot_id,
                LHS.aircraft_id AS aircraft_id,
                LHS.date AS date,
                RHS.pilot_name AS pilot_name,
                RHS.rank AS rank,
                RHS.age AS age,
                RHS.nationality AS nationality,
                RHS.position AS POSITION,
                RHS.join_year AS join_year,
                RHS.team AS team
         FROM df_pilot_record AS LHS
         LEFT JOIN df_pilot AS RHS ON (LHS.pilot_id = RHS.pilot_id)) AS LHS
      INNER JOIN
        (SELECT LHS.record_id AS record_id,
                LHS.pilot_id AS pilot_id,
                LHS.aircraft_id AS aircraft_id,
                LHS.date AS date,
                RHS.pilot_name AS pilot_name,
                RHS.rank AS rank,
                RHS.age AS age,
                RHS.nationality AS nationality,
                RHS.position AS POSITION,
                RHS.join_year AS join_year,
                RHS.team AS team
         FROM df_pilot_record AS LHS
         LEFT JOIN df_pilot AS RHS ON (LHS.pilot_id = RHS.pilot_id)) AS RHS ON (LHS.pilot_id = RHS.aircraft_id
                                                                                AND LHS.rank = RHS.rank)))
ORDER BY pilot_name;",3,19,5,1,5,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0
spider/pilot_record/0009,"filter(input0, 'join_year <= 2000L & join_year != 2005L'), semi_join(line0, input0)","SELECT POSITION
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_pilot
      WHERE (join_year <= 2000
             AND join_year != 2005)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_pilot AS RHS
        WHERE (LHS.pilot_id = RHS.pilot_id
               AND LHS.pilot_name = RHS.pilot_name
               AND LHS.rank = RHS.rank
               AND LHS.age = RHS.age
               AND LHS.nationality = RHS.nationality
               AND LHS.position = RHS.position
               AND LHS.join_year = RHS.join_year
               AND LHS.team = RHS.team) ))
ORDER BY POSITION;",2,14,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/pilot_record/0011,"natural_join3(input0, input1, input2), natural_join3(input1, input2, line0)","SELECT pilot_name,
       fleet_series
FROM
  (SELECT LHS.pilot_id AS pilot_id,
          LHS.pilot_name AS pilot_name,
          LHS.rank AS rank,
          LHS.age AS age,
          LHS.nationality AS nationality,
          LHS.position AS POSITION,
          LHS.join_year AS join_year,
          LHS.team AS team,
          LHS.record_id AS record_id,
          LHS.aircraft_id AS aircraft_id,
          LHS.date AS date,
          RHS.order_year AS order_year,
          RHS.manufacturer AS manufacturer,
          RHS.model AS model,
          RHS.fleet_series AS fleet_series,
          RHS.powertrain AS powertrain,
          RHS.fuel_propulsion AS fuel_propulsion
   FROM
     (SELECT LHS.pilot_id AS pilot_id,
             LHS.pilot_name AS pilot_name,
             LHS.rank AS rank,
             LHS.age AS age,
             LHS.nationality AS nationality,
             LHS.position AS POSITION,
             LHS.join_year AS join_year,
             LHS.team AS team,
             RHS.record_id AS record_id,
             RHS.aircraft_id AS aircraft_id,
             RHS.date AS date
      FROM df_pilot AS LHS
      INNER JOIN df_pilot_record AS RHS ON (LHS.pilot_id = RHS.pilot_id)) AS LHS
   INNER JOIN
     (SELECT LHS.aircraft_id AS aircraft_id,
             LHS.order_year AS order_year,
             LHS.manufacturer AS manufacturer,
             LHS.model AS model,
             LHS.fleet_series AS fleet_series,
             LHS.powertrain AS powertrain,
             LHS.fuel_propulsion AS fuel_propulsion,
             LHS.pilot_id AS pilot_id,
             LHS.pilot_name AS pilot_name,
             LHS.rank AS rank,
             LHS.age AS age,
             LHS.nationality AS nationality,
             LHS.position AS POSITION,
             LHS.join_year AS join_year,
             LHS.team AS team,
             RHS.record_id AS record_id,
             RHS.date AS date
      FROM
        (SELECT LHS.aircraft_id AS aircraft_id,
                LHS.order_year AS order_year,
                LHS.manufacturer AS manufacturer,
                LHS.model AS model,
                LHS.fleet_series AS fleet_series,
                LHS.powertrain AS powertrain,
                LHS.fuel_propulsion AS fuel_propulsion,
                RHS.pilot_id AS pilot_id,
                RHS.pilot_name AS pilot_name,
                RHS.rank AS rank,
                RHS.age AS age,
                RHS.nationality AS nationality,
                RHS.position AS POSITION,
                RHS.join_year AS join_year,
                RHS.team AS team
         FROM df_aircraft AS LHS
         CROSS JOIN df_pilot AS RHS) AS LHS
      INNER JOIN df_pilot_record AS RHS ON (LHS.aircraft_id = RHS.aircraft_id
                                            AND LHS.pilot_id = RHS.pilot_id)) AS RHS ON (LHS.pilot_id = RHS.pilot_id
                                                                                         AND LHS.pilot_name = RHS.pilot_name
                                                                                         AND LHS.rank = RHS.rank
                                                                                         AND LHS.age = RHS.age
                                                                                         AND LHS.nationality = RHS.nationality
                                                                                         AND LHS.position = RHS.position
                                                                                         AND LHS.join_year = RHS.join_year
                                                                                         AND LHS.team = RHS.team
                                                                                         AND LHS.record_id = RHS.record_id
                                                                                         AND LHS.aircraft_id = RHS.aircraft_id
                                                                                         AND LHS.date = RHS.date))
ORDER BY pilot_name;",2,17,5,0,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0
spider/pilot_record/0010,"natural_join3(input0, input1, input2), natural_join3(input1, input2, line0)","SELECT pilot_name,
       model
FROM
  (SELECT LHS.pilot_id AS pilot_id,
          LHS.pilot_name AS pilot_name,
          LHS.rank AS rank,
          LHS.age AS age,
          LHS.nationality AS nationality,
          LHS.position AS POSITION,
          LHS.join_year AS join_year,
          LHS.team AS team,
          LHS.record_id AS record_id,
          LHS.aircraft_id AS aircraft_id,
          LHS.date AS date,
          RHS.order_year AS order_year,
          RHS.manufacturer AS manufacturer,
          RHS.model AS model,
          RHS.fleet_series AS fleet_series,
          RHS.powertrain AS powertrain,
          RHS.fuel_propulsion AS fuel_propulsion
   FROM
     (SELECT LHS.pilot_id AS pilot_id,
             LHS.pilot_name AS pilot_name,
             LHS.rank AS rank,
             LHS.age AS age,
             LHS.nationality AS nationality,
             LHS.position AS POSITION,
             LHS.join_year AS join_year,
             LHS.team AS team,
             RHS.record_id AS record_id,
             RHS.aircraft_id AS aircraft_id,
             RHS.date AS date
      FROM df_pilot AS LHS
      INNER JOIN df_pilot_record AS RHS ON (LHS.pilot_id = RHS.pilot_id)) AS LHS
   INNER JOIN
     (SELECT LHS.aircraft_id AS aircraft_id,
             LHS.order_year AS order_year,
             LHS.manufacturer AS manufacturer,
             LHS.model AS model,
             LHS.fleet_series AS fleet_series,
             LHS.powertrain AS powertrain,
             LHS.fuel_propulsion AS fuel_propulsion,
             LHS.pilot_id AS pilot_id,
             LHS.pilot_name AS pilot_name,
             LHS.rank AS rank,
             LHS.age AS age,
             LHS.nationality AS nationality,
             LHS.position AS POSITION,
             LHS.join_year AS join_year,
             LHS.team AS team,
             RHS.record_id AS record_id,
             RHS.date AS date
      FROM
        (SELECT LHS.aircraft_id AS aircraft_id,
                LHS.order_year AS order_year,
                LHS.manufacturer AS manufacturer,
                LHS.model AS model,
                LHS.fleet_series AS fleet_series,
                LHS.powertrain AS powertrain,
                LHS.fuel_propulsion AS fuel_propulsion,
                RHS.pilot_id AS pilot_id,
                RHS.pilot_name AS pilot_name,
                RHS.rank AS rank,
                RHS.age AS age,
                RHS.nationality AS nationality,
                RHS.position AS POSITION,
                RHS.join_year AS join_year,
                RHS.team AS team
         FROM df_aircraft AS LHS
         CROSS JOIN df_pilot AS RHS) AS LHS
      INNER JOIN df_pilot_record AS RHS ON (LHS.aircraft_id = RHS.aircraft_id
                                            AND LHS.pilot_id = RHS.pilot_id)) AS RHS ON (LHS.pilot_id = RHS.pilot_id
                                                                                         AND LHS.pilot_name = RHS.pilot_name
                                                                                         AND LHS.rank = RHS.rank
                                                                                         AND LHS.age = RHS.age
                                                                                         AND LHS.nationality = RHS.nationality
                                                                                         AND LHS.position = RHS.position
                                                                                         AND LHS.join_year = RHS.join_year
                                                                                         AND LHS.team = RHS.team
                                                                                         AND LHS.record_id = RHS.record_id
                                                                                         AND LHS.aircraft_id = RHS.aircraft_id
                                                                                         AND LHS.date = RHS.date))
ORDER BY pilot_name;",2,17,5,0,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0
spider/local_govt_in_alabama/0002,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'event_details','event_id'""), filter(line1, 'n > 1L')","SELECT event_id,
       event_details
FROM
  (SELECT event_details,
          event_id,
          COUNT() AS n
   FROM
     (SELECT LHS.event_id AS event_id,
             LHS.service_id AS service_id,
             LHS.event_details AS event_details,
             RHS.participant_id AS participant_id
      FROM df_events AS LHS
      INNER JOIN df_participants_in_events AS RHS ON (LHS.event_id = RHS.event_id))
   GROUP BY event_details,
            event_id)
WHERE (n > 1)
ORDER BY event_id;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/local_govt_in_alabama/0003,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'participant_id','participant_type_code'"")","SELECT participant_id,
       participant_type_code,
       n AS count___
FROM
  (SELECT participant_id,
          participant_type_code,
          COUNT() AS n
   FROM
     (SELECT LHS.participant_id AS participant_id,
             LHS.participant_type_code AS participant_type_code,
             LHS.participant_details AS participant_details,
             RHS.event_id AS event_id
      FROM df_participants AS LHS
      INNER JOIN df_participants_in_events AS RHS ON (LHS.participant_id = RHS.participant_id))
   GROUP BY participant_id,
            participant_type_code)
ORDER BY participant_id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/local_govt_in_alabama/0013,"filter(input1, ""event_details == 'Success' & event_details != 'Fail'""), natural_join3(input0, input1, line0)","SELECT DISTINCT `service_type_code`
FROM
  (SELECT `LHS`.`service_id` AS `service_id`,
          `LHS`.`service_type_code` AS `service_type_code`,
          `LHS`.`event_id` AS `event_id`,
          `LHS`.`event_details` AS `event_details`
   FROM
     (SELECT `LHS`.`service_id` AS `service_id`,
             `LHS`.`service_type_code` AS `service_type_code`,
             `RHS`.`event_id` AS `event_id`,
             `RHS`.`event_details` AS `event_details`
      FROM `df_services` AS `LHS`
      INNER JOIN `df_events` AS `RHS` ON (`LHS`.`service_id` = `RHS`.`service_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_events`
      WHERE (`event_details` = 'Success'
             AND `event_details` != 'Fail')) AS RHS ON (LHS.service_id = RHS.service_id
                                                        AND LHS.event_id = RHS.event_id
                                                        AND LHS.event_details = RHS.event_details))
ORDER BY service_type_code;",2,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/local_govt_in_alabama/0006,"intersect(input0, input0, 'service_type_code')","SELECT service_type_code
FROM
  (SELECT service_type_code
   FROM df_services INTERSECT SELECT service_type_code
   FROM df_services)
ORDER BY service_type_code;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/local_govt_in_alabama/0004,df_participants,"SELECT participant_id,
       participant_type_code,
       participant_details
FROM df_participants
ORDER BY participant_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/local_govt_in_alabama/0012,"filter(input0, ""participant_details == 'Kenyatta Kuhn'""), semi_join(input2, line0), anti_join(input1, line1, '')","SELECT `event_id`
FROM
  (SELECT *
   FROM `df_events` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_participants_in_events` AS `LHS`
           WHERE EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM `df_participants`
                   WHERE (`participant_details` = 'Kenyatta Kuhn')) AS RHS
                WHERE (LHS.participant_id = RHS.participant_id) )) AS RHS
        WHERE (LHS.event_id = RHS.event_id) ))
ORDER BY event_id;",3,20,6,0,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/local_govt_in_alabama/0015,"summarise(input0, 'n_distinct = n_distinct(participant_id)', '')","SELECT n_distinct AS count_distinct_participant_id_
FROM
  (SELECT COUNT(DISTINCT participant_id) AS n_distinct
   FROM df_participants_in_events)
ORDER BY count_distinct_participant_id_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/local_govt_in_alabama/0005,"filter(input0, ""participant_type_code == 'Organizer'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM `df_participants`
WHERE (`participant_type_code` = 'Organizer')
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/local_govt_in_alabama/0007,df_events,"SELECT service_id,
       event_details
FROM df_events
ORDER BY service_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/local_govt_in_alabama/0001,"filter(input0, ""service_type_code == 'Marriage'""), natural_join3(input0, input1, line0)","SELECT `event_details`
FROM
  (SELECT `LHS`.`service_id` AS `service_id`,
          `LHS`.`service_type_code` AS `service_type_code`,
          `LHS`.`event_id` AS `event_id`,
          `LHS`.`event_details` AS `event_details`
   FROM
     (SELECT `LHS`.`service_id` AS `service_id`,
             `LHS`.`service_type_code` AS `service_type_code`,
             `RHS`.`event_id` AS `event_id`,
             `RHS`.`event_details` AS `event_details`
      FROM `df_services` AS `LHS`
      INNER JOIN `df_events` AS `RHS` ON (`LHS`.`service_id` = `RHS`.`service_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_services`
      WHERE (`service_type_code` = 'Marriage')) AS RHS ON (LHS.service_id = RHS.service_id
                                                           AND LHS.service_type_code = RHS.service_type_code))
ORDER BY event_details;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/local_govt_in_alabama/0014,"anti_join(input0, input1, ''), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT *
   FROM df_events AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_participants_in_events AS RHS
        WHERE (LHS.event_id = RHS.event_id) ))
ORDER BY count___;",2,12,3,1,3,0,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
spider/local_govt_in_alabama/0009,"summarise(input0, 'n = n()', ""'participant_details','participant_type_code'""), limit(line0, 'desc(n)')","SELECT participant_type_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT participant_details,
                participant_type_code,
                COUNT() AS n
         FROM df_participants
         GROUP BY participant_details,
                  participant_type_code)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/local_govt_in_alabama/0011,"summarise(input0, 'n = n()', ""'event_id','participant_id'""), limit(line0, 'desc(participant_id)')","SELECT event_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT event_id,
                participant_id,
                COUNT() AS n
         FROM df_participants_in_events
         GROUP BY event_id,
                  participant_id)
      ORDER BY participant_id DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/local_govt_in_alabama/0010,"natural_join4(input0, input1, input2, input3), summarise(line0, 'n = n()', ""'service_id','service_type_code'""), limit(line1, 'service_type_code')","SELECT service_id,
       service_type_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT service_id,
                service_type_code,
                COUNT() AS n
         FROM
           (SELECT LHS.service_id AS service_id,
                   LHS.service_type_code AS service_type_code,
                   LHS.participant_id AS participant_id,
                   LHS.participant_type_code AS participant_type_code,
                   LHS.participant_details AS participant_details,
                   LHS.event_id AS event_id,
                   LHS.event_details AS event_details
            FROM
              (SELECT LHS.service_id AS service_id,
                      LHS.service_type_code AS service_type_code,
                      LHS.participant_id AS participant_id,
                      LHS.participant_type_code AS participant_type_code,
                      LHS.participant_details AS participant_details,
                      RHS.event_id AS event_id,
                      RHS.event_details AS event_details
               FROM
                 (SELECT LHS.service_id AS service_id,
                         LHS.service_type_code AS service_type_code,
                         RHS.participant_id AS participant_id,
                         RHS.participant_type_code AS participant_type_code,
                         RHS.participant_details AS participant_details
                  FROM df_services AS LHS
                  CROSS JOIN df_participants AS RHS) AS LHS
               INNER JOIN df_events AS RHS ON (LHS.service_id = RHS.service_id)) AS LHS
            INNER JOIN df_participants_in_events AS RHS ON (LHS.participant_id = RHS.participant_id
                                                            AND LHS.event_id = RHS.event_id))
         GROUP BY service_id,
                  service_type_code)
      ORDER BY service_type_code)
   LIMIT 1);",2,17,7,0,7,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
spider/architecture/0002,"filter(input0, ""gender == 'male'"")","SELECT `name`,
       `nationality`,
       `id`
FROM `df_architect`
WHERE (`gender` = 'male')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/architecture/0008,"filter(input0, ""nationality != 'American' & nationality != 'Canadian'""), anti_join(input1, line0, ""'name'""), inner_join(line1, line1, ""'id' = 'architect_id','location' = 'location'"")","SELECT `type`
FROM
  (SELECT `LHS`.`architect_id` AS `architect_id`,
          `LHS`.`id` AS `id`,
          `LHS`.`location` AS `location`,
          `LHS`.`name` AS `name`,
          `LHS`.`type` AS `type`,
          `LHS`.`built_year` AS `built_year`,
          `LHS`.`notes` AS `notes`,
          `RHS`.`id` AS `id_other`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`type` AS `type_other`,
          `RHS`.`built_year` AS `built_year_other`,
          `RHS`.`notes` AS `notes_other`
   FROM
     (SELECT *
      FROM `df_mill` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_architect`
              WHERE (`nationality` != 'American'
                     AND `nationality` != 'Canadian')) AS `RHS`
           WHERE (`LHS`.`name` = `RHS`.`name`) )) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_mill` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_architect`
              WHERE (`nationality` != 'American'
                     AND `nationality` != 'Canadian')) AS RHS
           WHERE (LHS.name = RHS.name) )) AS RHS ON (LHS.id = RHS.architect_id
                                                     AND LHS.location = RHS.location))
ORDER BY TYPE;",3,27,8,0,8,1,6,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0
spider/architecture/0004,"summarise(input0, 'meanlength_feet = mean(length_feet, na.rm = T)', ""'length_feet','location'""), summarise(line0, 'meanlength_feet = mean(length_feet, na.rm = T)', '')","SELECT meanlength_feet AS avg_length_feet_
FROM
  (SELECT AVG(length_feet) AS meanlength_feet
   FROM
     (SELECT length_feet,
             LOCATION,
             AVG(length_feet) AS meanlength_feet
      FROM df_bridge
      GROUP BY length_feet,
               LOCATION))
ORDER BY avg_length_feet_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/architecture/0012,"filter(input0, ""name == 'Kolob Arch' | name == 'Rainbow Bridge'""), natural_join(input0, line0)","SELECT `location`
FROM
  (SELECT `LHS`.`architect_id` AS `architect_id`,
          `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `LHS`.`location` AS `location`,
          `LHS`.`length_meters` AS `length_meters`,
          `LHS`.`length_feet` AS `length_feet`
   FROM `df_bridge` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_bridge`
      WHERE (`name` = 'Kolob Arch'
             OR `name` = 'Rainbow Bridge')) AS RHS ON (LHS.architect_id = RHS.architect_id
                                                       AND LHS.id = RHS.id
                                                       AND LHS.name = RHS.name
                                                       AND LHS.location = RHS.location
                                                       AND LHS.length_meters = RHS.length_meters
                                                       AND LHS.length_feet = RHS.length_feet))
ORDER BY LOCATION;",2,9,3,0,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/architecture/0015,"summarise(input0, 'n = n()', ""'notes','type'""), limit(line0, 'desc(n)')","SELECT TYPE,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT notes,
                TYPE,
                COUNT() AS n
         FROM df_mill
         GROUP BY notes,
                  TYPE)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/architecture/0005,"filter(input0, ""type == 'Grondzeiler'"")","SELECT `name`,
       `built_year`
FROM `df_mill`
WHERE (`type` = 'Grondzeiler')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/architecture/0016,"filter(input1, 'built_year > 1850L & built_year != id'), summarise(line0, 'n_distinct = n_distinct(id)', ''), natural_join(input0, line1)","SELECT DISTINCT n_distinct AS count___
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.nationality AS nationality,
          LHS.gender AS gender,
          RHS.n_distinct AS n_distinct
   FROM df_architect AS LHS
   CROSS JOIN
     (SELECT COUNT(DISTINCT id) AS n_distinct
      FROM df_mill
      WHERE (built_year > 1850
             AND built_year != id)) AS RHS)
ORDER BY count___;",3,9,3,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/architecture/0007,"filter(input0, ""location != 'Donceel'""), intersect(input0, line0, 'name')","SELECT `name`
FROM
  (SELECT `name`
   FROM `df_mill` INTERSECT SELECT `name`
   FROM `df_mill`
   WHERE (`location` != 'Donceel'))
ORDER BY name;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/architecture/0001,"filter(input0, ""gender == 'female'""), mutate(line0, 'n = n()')","SELECT COUNT(*) OVER () AS `count___`
FROM `df_architect`
WHERE (`gender` = 'female')
ORDER BY count___;",2,4,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/architecture/0014,"filter(input1, 'length_meters > 80'), anti_join(line0, input0, ""'name'""), inner_join(line1, input2, ""'architect_id'"")","SELECT name_other AS name
FROM
  (SELECT LHS.architect_id AS architect_id,
          LHS.id AS id,
          LHS.name AS name,
          LHS.location AS LOCATION,
          LHS.length_meters AS length_meters,
          LHS.length_feet AS length_feet,
          RHS.id AS id_other,
          RHS.location AS location_other,
          RHS.name AS name_other,
          RHS.type AS TYPE,
          RHS.built_year AS built_year,
          RHS.notes AS notes
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM df_bridge
         WHERE (length_meters > 80.0)) AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM df_architect AS RHS
           WHERE (LHS.name = RHS.name) )) AS LHS
   INNER JOIN df_mill AS RHS ON (LHS.architect_id = RHS.architect_id))
ORDER BY name;",3,16,5,0,5,1,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0
spider/architecture/0009,"summarise(input1, 'n = n()', ''), natural_join(input0, line0), limit(line1, 'name')","SELECT id,
       name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.id AS id,
                LHS.name AS name,
                LHS.nationality AS nationality,
                LHS.gender AS gender,
                RHS.n AS n
         FROM df_architect AS LHS
         CROSS JOIN
           (SELECT COUNT() AS n
            FROM df_bridge) AS RHS)
      ORDER BY name)
   LIMIT 3);",2,11,5,0,5,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/architecture/0010,"summarise(input1, 'n = n()', ""'name'""), anti_join(input0, line0, ''), limit(line1, 'nationality')","SELECT id,
       name,
       nationality
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM df_architect AS LHS
         WHERE NOT EXISTS
             (SELECT 1
              FROM
                (SELECT name,
                        COUNT() AS n
                 FROM df_mill
                 GROUP BY name) AS RHS
              WHERE (LHS.name = RHS.name) ))
      ORDER BY nationality)
   LIMIT 1);",2,17,6,0,6,0,2,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
spider/election_representative/0002,df_election,"SELECT votes
FROM df_election
ORDER BY votes;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/election_representative/0017,"summarise(input0, 'n = n()', ""'representative_id','state'""), limit(line0, 'desc(representative_id)')","SELECT state
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT representative_id,
                state,
                COUNT() AS n
         FROM df_representative
         GROUP BY representative_id,
                  state)
      ORDER BY representative_id DESC)
   LIMIT 2);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/election_representative/0008,"natural_join(input0, input1), left_join(line0, input1)","SELECT name, date
FROM
  (SELECT LHS.election_id AS election_id,
          LHS.representative_id AS representative_id,
          LHS.date AS date,
          LHS.votes AS votes,
          LHS.vote_percent AS vote_percent,
          LHS.seats AS seats,
          LHS.place AS place,
          LHS.name AS name,
          LHS.state AS state,
          LHS.party AS party,
          LHS.lifespan AS lifespan
   FROM
     (SELECT LHS.election_id AS election_id,
             LHS.representative_id AS representative_id,
             LHS.date AS date,
             LHS.votes AS votes,
             LHS.vote_percent AS vote_percent,
             LHS.seats AS seats,
             LHS.place AS place,
             RHS.name AS name,
             RHS.state AS state,
             RHS.party AS party,
             RHS.lifespan AS lifespan
      FROM df_election AS LHS
      INNER JOIN df_representative AS RHS ON (LHS.representative_id = RHS.representative_id)) AS LHS
   LEFT JOIN df_representative AS RHS ON (LHS.representative_id = RHS.representative_id
                                          AND LHS.name = RHS.name
                                          AND LHS.state = RHS.state
                                          AND LHS.party = RHS.party
                                          AND LHS.lifespan = RHS.lifespan))
ORDER BY name;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
spider/election_representative/0003,df_election,"SELECT date, vote_percent
FROM df_election
ORDER BY date;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/election_representative/0013,"filter(input1, ""party != 'Republican'""), anti_join(input0, line0, ''), mutate(line1, 'meanvotes = mean(votes, na.rm = T)')","SELECT DISTINCT AVG(`votes`) OVER () AS `avg_t1_votes_`
FROM
  (SELECT *
   FROM `df_election` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_representative`
           WHERE (`party` != 'Republican')) AS RHS
        WHERE (LHS.representative_id = RHS.representative_id) ))
ORDER BY avg_t1_votes_;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/election_representative/0006,"filter(input0, ""party != 'Republican'"")","SELECT `name`
FROM `df_representative`
WHERE (`party` != 'Republican')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/election_representative/0004,"mutate(input0, 'maxvote_percent = max(vote_percent)'), mutate(line0, 'vote_percent = min(vote_percent)')","SELECT DISTINCT MIN(vote_percent) OVER () AS min_vote_percent_,
                                       maxvote_percent AS max_vote_percent_
FROM
  (SELECT election_id,
          representative_id, date, votes,
                                   vote_percent,
                                   seats,
                                   place,
                                   MAX(vote_percent) OVER () AS maxvote_percent
   FROM df_election)
ORDER BY min_vote_percent_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/election_representative/0012,"semi_join(input1, input0)","SELECT lifespan
FROM
  (SELECT *
   FROM df_representative AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_election AS RHS
        WHERE (LHS.representative_id = RHS.representative_id) ))
ORDER BY lifespan;",1,9,3,0,3,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
spider/election_representative/0015,"summarise(input0, 'n = n()', ""'party'""), cross_join(line0, line0, 'n > n.other')","SELECT party,
       n AS count___
FROM
  (SELECT LHS.party AS party,
          LHS.n AS n,
          RHS.party AS party_other,
          RHS.n AS n_other
   FROM
     (SELECT party,
             COUNT() AS n
      FROM df_representative
      GROUP BY party) AS LHS
   CROSS JOIN
     (SELECT party,
             COUNT() AS n
      FROM df_representative
      GROUP BY party) AS RHS)
WHERE (n > n_other)
ORDER BY party;",2,9,4,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
spider/election_representative/0005,df_representative,"SELECT name,
       party
FROM df_representative
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/election_representative/0016,"mutate(input0, 'n = n()'), filter(line0, 'n >= 3L')","SELECT DISTINCT party
FROM
  (SELECT representative_id,
          name,
          state,
          party,
          lifespan,
          COUNT(*) OVER () AS n
   FROM df_representative)
WHERE (n >= 3)
ORDER BY party;",2,7,2,1,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/election_representative/0018,"anti_join(input1, input0, '')","SELECT name
FROM
  (SELECT *
   FROM df_representative AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_election AS RHS
        WHERE (LHS.representative_id = RHS.representative_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/election_representative/0020,"summarise(input0, 'n = n()', ""'party','state'""), summarise(line0, 'n_distinct = n_distinct(party)', '')","SELECT n_distinct AS count_distinct_party_
FROM
  (SELECT COUNT(DISTINCT party) AS n_distinct
   FROM
     (SELECT party,
             state,
             COUNT() AS n
      FROM df_representative
      GROUP BY party,
               state))
ORDER BY count_distinct_party_;",2,7,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/election_representative/0019,"filter(input0, ""state != 'New York' & state == 'Pennsylvania'""), intersect(input0, line0, 'party')","SELECT `party`
FROM
  (SELECT `party`
   FROM `df_representative` INTERSECT SELECT `party`
   FROM `df_representative`
   WHERE (`state` != 'New York'
          AND `state` = 'Pennsylvania'))
ORDER BY party;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/election_representative/0007,"filter(input0, ""state == 'New York' | state == 'Indiana'""), natural_join(input0, line0)","SELECT `lifespan`
FROM
  (SELECT `LHS`.`representative_id` AS `representative_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`state` AS `state`,
          `LHS`.`party` AS `party`,
          `LHS`.`lifespan` AS `lifespan`
   FROM `df_representative` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_representative`
      WHERE (`state` = 'New York'
             OR `state` = 'Indiana')) AS RHS ON (LHS.representative_id = RHS.representative_id
                                                 AND LHS.name = RHS.name
                                                 AND LHS.state = RHS.state
                                                 AND LHS.party = RHS.party
                                                 AND LHS.lifespan = RHS.lifespan))
ORDER BY lifespan;",2,9,3,0,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/election_representative/0001,"summarise(input0, 'n = n()', ""'representative_id','vote_percent'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT representative_id,
          vote_percent,
          COUNT() AS n
   FROM df_election
   GROUP BY representative_id,
            vote_percent)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/election_representative/0014,"summarise(input0, 'n = n()', ""'party'"")","SELECT party,
       n AS count___
FROM
  (SELECT party,
          COUNT() AS n
   FROM df_representative
   GROUP BY party)
ORDER BY party;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/election_representative/0009,"filter(input0, 'votes > 10000'), natural_join3(input0, input1, line0)","SELECT name
FROM
  (SELECT LHS.election_id AS election_id,
          LHS.representative_id AS representative_id,
          LHS.date AS date,
          LHS.votes AS votes,
          LHS.vote_percent AS vote_percent,
          LHS.seats AS seats,
          LHS.place AS place,
          LHS.name AS name,
          LHS.state AS state,
          LHS.party AS party,
          LHS.lifespan AS lifespan
   FROM
     (SELECT LHS.election_id AS election_id,
             LHS.representative_id AS representative_id,
             LHS.date AS date,
             LHS.votes AS votes,
             LHS.vote_percent AS vote_percent,
             LHS.seats AS seats,
             LHS.place AS place,
             RHS.name AS name,
             RHS.state AS state,
             RHS.party AS party,
             RHS.lifespan AS lifespan
      FROM df_election AS LHS
      INNER JOIN df_representative AS RHS ON (LHS.representative_id = RHS.representative_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_election
      WHERE (votes > 10000.0)) AS RHS ON (LHS.election_id = RHS.election_id
                                          AND LHS.representative_id = RHS.representative_id
                                          AND LHS.date = RHS.date
                                          AND LHS.votes = RHS.votes
                                          AND LHS.vote_percent = RHS.vote_percent
                                          AND LHS.seats = RHS.seats
                                          AND LHS.place = RHS.place))
ORDER BY name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/election_representative/0011,"anti_join(input1, input0, ""'representative_id'"")","SELECT DISTINCT party
FROM
  (SELECT *
   FROM df_representative AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_election AS RHS
        WHERE (LHS.representative_id = RHS.representative_id) ))
ORDER BY party;",1,11,3,1,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/election_representative/0010,"semi_join(input1, input0)","SELECT name
FROM
  (SELECT *
   FROM df_representative AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_election AS RHS
        WHERE (LHS.representative_id = RHS.representative_id) ))
ORDER BY name;",1,9,3,0,3,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
spider/student_assessment/0002,"summarise(input0, 'n = n()', ""'course_id','student_id'""), limit(line0, 'desc(n)')","SELECT student_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT course_id,
                student_id,
                COUNT() AS n
         FROM df_student_course_registrations
         GROUP BY course_id,
                  student_id)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/student_assessment/0017,"filter(input0, 'course_id <= 301L')","SELECT student_id
FROM df_student_course_attendance
WHERE (course_id <= 301)
ORDER BY student_id;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/student_assessment/0008,"summarise(input0, 'n = n()', ""'course_name','other_details'""), filter(line0, ""course_name != 'English'""), summarise(input1, 'n = n()', ""'student_id'""), anti_join(line2, line1, '')","SELECT DISTINCT `n` AS `count___`
FROM
  (SELECT *
   FROM
     (SELECT `student_id`,
             COUNT() AS `n`
      FROM `df_student_course_attendance`
      GROUP BY `student_id`) AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT `course_name`,
                     `other_details`,
                     COUNT() AS `n`
              FROM `df_courses`
              GROUP BY `course_name`,
                       `other_details`)
           WHERE (`course_name` != 'English')) AS RHS
        WHERE (LHS.n = RHS.n) ))
ORDER BY count___;",4,18,6,1,6,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,1,0,0,0,0
spider/student_assessment/0003,df_people,"SELECT first_name,
       last_name
FROM df_people
ORDER BY first_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/student_assessment/0022,df_people,"SELECT first_name
FROM df_people
ORDER BY first_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/student_assessment/0013,"summarise(input1, 'n = n()', ""'student_id'""), semi_join(line0, input0)","SELECT student_id,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT student_id,
             COUNT() AS n
      FROM df_student_course_registrations
      GROUP BY student_id) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_students AS RHS
        WHERE (LHS.student_id = RHS.student_id) ))
ORDER BY student_id;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/student_assessment/0004,"anti_join(input0, input1, '')","SELECT student_id
FROM
  (SELECT *
   FROM df_students AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_student_course_attendance AS RHS
        WHERE (LHS.student_id = RHS.student_id) ))
ORDER BY student_id;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/student_assessment/0012,"summarise(input0, 'n = n()', ""'student_details','student_id'""), natural_join(input1, line0), limit(line1, 'registration_date')","SELECT student_details
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.student_id AS student_id,
                LHS.course_id AS course_id,
                LHS.registration_date AS registration_date,
                RHS.student_details AS student_details,
                RHS.n AS n
         FROM df_student_course_registrations AS LHS
         INNER JOIN
           (SELECT student_details,
                   student_id,
                   COUNT() AS n
            FROM df_students
            GROUP BY student_details,
                     student_id) AS RHS ON (LHS.student_id = RHS.student_id))
      ORDER BY registration_date)
   LIMIT 1);",2,12,5,0,5,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/student_assessment/0015,"filter(input0, ""asessment_outcome_code == 'Pass'"")","SELECT `candidate_id`
FROM `df_candidate_assessments`
WHERE (`asessment_outcome_code` = 'Pass')
ORDER BY candidate_id;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/student_assessment/0005,df_student_course_attendance,"SELECT student_id
FROM df_student_course_attendance
ORDER BY student_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/student_assessment/0016,"filter(input2, ""asessment_outcome_code == 'Fail'""), natural_join4(input0, input1, input2, line0), inner_join(line1, line1, ""'candidate_id' = 'person_id','last_name' = 'last_name'"")","SELECT `cell_mobile_number`
FROM
  (SELECT `LHS`.`person_id` AS `person_id`,
          `LHS`.`first_name` AS `first_name`,
          `LHS`.`middle_name` AS `middle_name`,
          `LHS`.`last_name` AS `last_name`,
          `LHS`.`cell_mobile_number` AS `cell_mobile_number`,
          `LHS`.`email_address` AS `email_address`,
          `LHS`.`login_name` AS `login_name`,
          `LHS`.`password` AS `password`,
          `LHS`.`candidate_id` AS `candidate_id`,
          `LHS`.`candidate_details` AS `candidate_details`,
          `LHS`.`qualification` AS `qualification`,
          `LHS`.`assessment_date` AS `assessment_date`,
          `LHS`.`asessment_outcome_code` AS `asessment_outcome_code`,
          `RHS`.`first_name` AS `first_name_other`,
          `RHS`.`middle_name` AS `middle_name_other`,
          `RHS`.`cell_mobile_number` AS `cell_mobile_number_other`,
          `RHS`.`email_address` AS `email_address_other`,
          `RHS`.`login_name` AS `login_name_other`,
          `RHS`.`password` AS `password_other`,
          `RHS`.`candidate_id` AS `candidate_id_other`,
          `RHS`.`candidate_details` AS `candidate_details_other`,
          `RHS`.`qualification` AS `qualification_other`,
          `RHS`.`assessment_date` AS `assessment_date_other`,
          `RHS`.`asessment_outcome_code` AS `asessment_outcome_code_other`
   FROM
     (SELECT `LHS`.`person_id` AS `person_id`,
             `LHS`.`first_name` AS `first_name`,
             `LHS`.`middle_name` AS `middle_name`,
             `LHS`.`last_name` AS `last_name`,
             `LHS`.`cell_mobile_number` AS `cell_mobile_number`,
             `LHS`.`email_address` AS `email_address`,
             `LHS`.`login_name` AS `login_name`,
             `LHS`.`password` AS `password`,
             `LHS`.`candidate_id` AS `candidate_id`,
             `LHS`.`candidate_details` AS `candidate_details`,
             `LHS`.`qualification` AS `qualification`,
             `LHS`.`assessment_date` AS `assessment_date`,
             `LHS`.`asessment_outcome_code` AS `asessment_outcome_code`
      FROM
        (SELECT `LHS`.`person_id` AS `person_id`,
                `LHS`.`first_name` AS `first_name`,
                `LHS`.`middle_name` AS `middle_name`,
                `LHS`.`last_name` AS `last_name`,
                `LHS`.`cell_mobile_number` AS `cell_mobile_number`,
                `LHS`.`email_address` AS `email_address`,
                `LHS`.`login_name` AS `login_name`,
                `LHS`.`password` AS `password`,
                `LHS`.`candidate_id` AS `candidate_id`,
                `LHS`.`candidate_details` AS `candidate_details`,
                `RHS`.`qualification` AS `qualification`,
                `RHS`.`assessment_date` AS `assessment_date`,
                `RHS`.`asessment_outcome_code` AS `asessment_outcome_code`
         FROM
           (SELECT `LHS`.`person_id` AS `person_id`,
                   `LHS`.`first_name` AS `first_name`,
                   `LHS`.`middle_name` AS `middle_name`,
                   `LHS`.`last_name` AS `last_name`,
                   `LHS`.`cell_mobile_number` AS `cell_mobile_number`,
                   `LHS`.`email_address` AS `email_address`,
                   `LHS`.`login_name` AS `login_name`,
                   `LHS`.`password` AS `password`,
                   `RHS`.`candidate_id` AS `candidate_id`,
                   `RHS`.`candidate_details` AS `candidate_details`
            FROM `df_people` AS `LHS`
            CROSS JOIN `df_candidates` AS `RHS`) AS `LHS`
         INNER JOIN `df_candidate_assessments` AS `RHS` ON (`LHS`.`candidate_id` = `RHS`.`candidate_id`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_candidate_assessments`
         WHERE (`asessment_outcome_code` = 'Fail')) AS `RHS` ON (`LHS`.`candidate_id` = `RHS`.`candidate_id`
                                                                 AND `LHS`.`qualification` = `RHS`.`qualification`
                                                                 AND `LHS`.`assessment_date` = `RHS`.`assessment_date`
                                                                 AND `LHS`.`asessment_outcome_code` = `RHS`.`asessment_outcome_code`)) AS `LHS`
   INNER JOIN
     (SELECT `LHS`.`person_id` AS `person_id`,
             `LHS`.`first_name` AS `first_name`,
             `LHS`.`middle_name` AS `middle_name`,
             `LHS`.`last_name` AS `last_name`,
             `LHS`.`cell_mobile_number` AS `cell_mobile_number`,
             `LHS`.`email_address` AS `email_address`,
             `LHS`.`login_name` AS `login_name`,
             `LHS`.`password` AS `password`,
             `LHS`.`candidate_id` AS `candidate_id`,
             `LHS`.`candidate_details` AS `candidate_details`,
             `LHS`.`qualification` AS `qualification`,
             `LHS`.`assessment_date` AS `assessment_date`,
             `LHS`.`asessment_outcome_code` AS `asessment_outcome_code`
      FROM
        (SELECT `LHS`.`person_id` AS `person_id`,
                `LHS`.`first_name` AS `first_name`,
                `LHS`.`middle_name` AS `middle_name`,
                `LHS`.`last_name` AS `last_name`,
                `LHS`.`cell_mobile_number` AS `cell_mobile_number`,
                `LHS`.`email_address` AS `email_address`,
                `LHS`.`login_name` AS `login_name`,
                `LHS`.`password` AS `password`,
                `LHS`.`candidate_id` AS `candidate_id`,
                `LHS`.`candidate_details` AS `candidate_details`,
                `RHS`.`qualification` AS `qualification`,
                `RHS`.`assessment_date` AS `assessment_date`,
                `RHS`.`asessment_outcome_code` AS `asessment_outcome_code`
         FROM
           (SELECT `LHS`.`person_id` AS `person_id`,
                   `LHS`.`first_name` AS `first_name`,
                   `LHS`.`middle_name` AS `middle_name`,
                   `LHS`.`last_name` AS `last_name`,
                   `LHS`.`cell_mobile_number` AS `cell_mobile_number`,
                   `LHS`.`email_address` AS `email_address`,
                   `LHS`.`login_name` AS `login_name`,
                   `LHS`.`password` AS `password`,
                   `RHS`.`candidate_id` AS `candidate_id`,
                   `RHS`.`candidate_details` AS `candidate_details`
            FROM `df_people` AS `LHS`
            CROSS JOIN `df_candidates` AS `RHS`) AS `LHS`
         INNER JOIN `df_candidate_assessments` AS `RHS` ON (`LHS`.`candidate_id` = `RHS`.`candidate_id`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_candidate_assessments`
         WHERE (`asessment_outcome_code` = 'Fail')) AS RHS ON (LHS.candidate_id = RHS.candidate_id
                                                               AND LHS.qualification = RHS.qualification
                                                               AND LHS.assessment_date = RHS.assessment_date
                                                               AND LHS.asessment_outcome_code = RHS.asessment_outcome_code)) AS RHS ON (LHS.candidate_id = RHS.person_id
                                                                                                                                        AND LHS.last_name = RHS.last_name))
ORDER BY cell_mobile_number;",3,27,10,0,10,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0
spider/student_assessment/0018,"filter(input0, 'course_id <= 301L & course_id >= 1L'), limit(line0, 'desc(student_id)')","SELECT student_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM df_student_course_attendance
         WHERE (course_id <= 301
                AND course_id >= 1))
      ORDER BY student_id DESC)
   LIMIT 1);",1,11,4,0,4,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/student_assessment/0020,"natural_join3(input0, input1, input2)","SELECT DISTINCT city
FROM
  (SELECT LHS.address_id AS address_id,
          LHS.line_1 AS line_1,
          LHS.line_2 AS line_2,
          LHS.city AS city,
          LHS.zip_postcode AS zip_postcode,
          LHS.state_province_county AS state_province_county,
          LHS.country AS country,
          LHS.student_id AS student_id,
          LHS.student_details AS student_details,
          RHS.person_address_id AS person_address_id,
          RHS.person_id AS person_id,
          RHS.date_from AS date_from,
          RHS.date_to AS date_to
   FROM
     (SELECT LHS.address_id AS address_id,
             LHS.line_1 AS line_1,
             LHS.line_2 AS line_2,
             LHS.city AS city,
             LHS.zip_postcode AS zip_postcode,
             LHS.state_province_county AS state_province_county,
             LHS.country AS country,
             RHS.student_id AS student_id,
             RHS.student_details AS student_details
      FROM df_addresses AS LHS
      CROSS JOIN df_students AS RHS) AS LHS
   INNER JOIN df_people_addresses AS RHS ON (LHS.address_id = RHS.address_id))
ORDER BY city;",1,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
spider/student_assessment/0019,"natural_join(input0, input1)","SELECT city
FROM
  (SELECT LHS.address_id AS address_id,
          LHS.line_1 AS line_1,
          LHS.line_2 AS line_2,
          LHS.city AS city,
          LHS.zip_postcode AS zip_postcode,
          LHS.state_province_county AS state_province_county,
          LHS.country AS country,
          RHS.person_address_id AS person_address_id,
          RHS.person_id AS person_id,
          RHS.date_from AS date_from,
          RHS.date_to AS date_to
   FROM df_addresses AS LHS
   INNER JOIN df_people_addresses AS RHS ON (LHS.address_id = RHS.address_id))
ORDER BY city;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/student_assessment/0007,"natural_join(input0, input1), limit(line0, 'desc(registration_date)')","SELECT student_details
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.student_id AS student_id,
                LHS.student_details AS student_details,
                RHS.course_id AS course_id,
                RHS.registration_date AS registration_date
         FROM df_students AS LHS
         INNER JOIN df_student_course_registrations AS RHS ON (LHS.student_id = RHS.student_id))
      ORDER BY registration_date DESC)
   LIMIT 1);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/student_assessment/0024,"filter(input1, 'student_id == 121L'), natural_join(input0, line0)","SELECT course_id
FROM
  (SELECT LHS.student_id AS student_id,
          LHS.course_id AS course_id,
          LHS.registration_date AS registration_date,
          RHS.date_of_attendance AS date_of_attendance
   FROM df_student_course_registrations AS LHS
   INNER JOIN
     (SELECT *
      FROM df_student_course_attendance
      WHERE (student_id = 121)) AS RHS ON (LHS.student_id = RHS.student_id
                                           AND LHS.course_id = RHS.course_id))
ORDER BY course_id;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/student_assessment/0021,df_courses,"SELECT course_name
FROM df_courses
ORDER BY course_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/student_assessment/0023,df_student_course_registrations,"SELECT DISTINCT student_id
FROM df_student_course_registrations
ORDER BY student_id;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/student_assessment/0009,"filter(input1, 'student_id >= 171L'), summarise(input0, 'n = n()', ""'course_description','course_name'""), natural_join(line0, line1)","SELECT DISTINCT n AS count___
FROM
  (SELECT LHS.student_id AS student_id,
          LHS.course_id AS course_id,
          LHS.date_of_attendance AS date_of_attendance,
          RHS.course_description AS course_description,
          RHS.course_name AS course_name,
          RHS.n AS n
   FROM
     (SELECT *
      FROM df_student_course_attendance
      WHERE (student_id >= 171)) AS LHS
   CROSS JOIN
     (SELECT course_description,
             course_name,
             COUNT() AS n
      FROM df_courses
      GROUP BY course_description,
               course_name) AS RHS)
ORDER BY count___;",3,10,4,1,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/student_assessment/0025,"anti_join(input0, input1, '')","SELECT student_id,
       course_id,
       registration_date
FROM
  (SELECT *
   FROM df_student_course_registrations AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_student_course_attendance AS RHS
        WHERE (LHS.student_id = RHS.student_id
               AND LHS.course_id = RHS.course_id) ))
ORDER BY student_id;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/student_assessment/0011,"limit(input0, 'desc(assessment_date)')","SELECT candidate_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_candidate_assessments
      ORDER BY assessment_date DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/student_assessment/0010,"filter(input0, ""email_address == 'stanley.monahan@example.org'""), natural_join(input1, line0)","SELECT DISTINCT `person_id` AS `candidate_id`
FROM
  (SELECT `LHS`.`candidate_id` AS `candidate_id`,
          `LHS`.`candidate_details` AS `candidate_details`,
          `RHS`.`person_id` AS `person_id`,
          `RHS`.`first_name` AS `first_name`,
          `RHS`.`middle_name` AS `middle_name`,
          `RHS`.`last_name` AS `last_name`,
          `RHS`.`cell_mobile_number` AS `cell_mobile_number`,
          `RHS`.`email_address` AS `email_address`,
          `RHS`.`login_name` AS `login_name`,
          `RHS`.`password` AS `password`
   FROM `df_candidates` AS `LHS`
   CROSS JOIN
     (SELECT *
      FROM `df_people`
      WHERE (`email_address` = 'stanley.monahan@example.org')) AS RHS)
ORDER BY candidate_id;",2,8,3,1,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/customers_campaigns_ecommerce/0002,df_premises,"SELECT DISTINCT premises_type
FROM df_premises
ORDER BY premises_type;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_campaigns_ecommerce/0008,"summarise(input0, 'n = n()', ""'outcome_code'"")","SELECT outcome_code,
       n AS count___
FROM
  (SELECT outcome_code,
          COUNT() AS n
   FROM df_mailshot_customers
   GROUP BY outcome_code)
ORDER BY outcome_code;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_campaigns_ecommerce/0003,df_premises,"SELECT premises_type,
       premise_details
FROM df_premises
ORDER BY premises_type;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_campaigns_ecommerce/0013,df_customer_addresses,"SELECT DISTINCT address_type_code
FROM df_customer_addresses
ORDER BY address_type_code;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_campaigns_ecommerce/0006,"anti_join(input0, input1, ""'customer_id'"")","SELECT customer_name,
       customer_phone
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_mailshot_customers AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/customers_campaigns_ecommerce/0004,"summarise(input0, 'n = n()', ""'premise_id','premises_type'""), summarise(line0, 'n = n()', ""'premises_type'"")","SELECT premises_type,
       n AS count___
FROM
  (SELECT premises_type,
          COUNT() AS n
   FROM
     (SELECT premise_id,
             premises_type,
             COUNT() AS n
      FROM df_premises
      GROUP BY premise_id,
               premises_type)
   GROUP BY premises_type)
ORDER BY premises_type;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_campaigns_ecommerce/0012,"inner_join(input0, input1, ""'premise_id'"")","SELECT premises_type,
       address_type_code
FROM
  (SELECT LHS.premise_id AS premise_id,
          LHS.premises_type AS premises_type,
          LHS.premise_details AS premise_details,
          RHS.customer_id AS customer_id,
          RHS.date_address_from AS date_address_from,
          RHS.address_type_code AS address_type_code,
          RHS.date_address_to AS date_address_to
   FROM df_premises AS LHS
   INNER JOIN df_customer_addresses AS RHS ON (LHS.premise_id = RHS.premise_id))
ORDER BY premises_type;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/customers_campaigns_ecommerce/0015,"filter(input1, ""shipping_method_code == 'FedEx' & order_status_code == 'Paid'""), semi_join(input0, line0)","SELECT `customer_name`
FROM
  (SELECT *
   FROM `df_customers` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customer_orders`
           WHERE (`shipping_method_code` = 'FedEx'
                  AND `order_status_code` = 'Paid')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/customers_campaigns_ecommerce/0005,"summarise(input0, 'n = n()', ""'product_category'"")","SELECT product_category,
       n AS count___
FROM
  (SELECT product_category,
          COUNT() AS n
   FROM df_mailshot_campaigns
   GROUP BY product_category)
ORDER BY product_category;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_campaigns_ecommerce/0007,"filter(input1, ""outcome_code == 'No Response'""), natural_join(input0, line0)","SELECT `customer_name`,
       `customer_phone`
FROM
  (SELECT `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`payment_method` AS `payment_method`,
          `LHS`.`customer_name` AS `customer_name`,
          `LHS`.`customer_phone` AS `customer_phone`,
          `LHS`.`customer_email` AS `customer_email`,
          `LHS`.`customer_address` AS `customer_address`,
          `LHS`.`customer_login` AS `customer_login`,
          `LHS`.`customer_password` AS `customer_password`,
          `RHS`.`mailshot_id` AS `mailshot_id`,
          `RHS`.`outcome_code` AS `outcome_code`,
          `RHS`.`mailshot_customer_date` AS `mailshot_customer_date`
   FROM `df_customers` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_mailshot_customers`
      WHERE (`outcome_code` = 'No Response')) AS RHS ON (LHS.customer_id = RHS.customer_id))
ORDER BY customer_name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/customers_campaigns_ecommerce/0001,"summarise(input0, 'n = n()', ""'premise_details','premises_type'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT premise_details,
          premises_type,
          COUNT() AS n
   FROM df_premises
   GROUP BY premise_details,
            premises_type)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/customers_campaigns_ecommerce/0014,"filter(input0, ""order_status_code == 'Cancelled' | order_status_code == 'Paid'"")","SELECT `order_shipping_charges`,
       `customer_id`
FROM `df_customer_orders`
WHERE (`order_status_code` = 'Cancelled'
       OR `order_status_code` = 'Paid')
ORDER BY order_shipping_charges;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/customers_campaigns_ecommerce/0009,"summarise(input1, 'n = n()', ""'customer_id','outcome_code'""), natural_join(input0, line0), filter(line1, ""outcome_code == 'Order' & n == 2L"")","SELECT `customer_name`
FROM
  (SELECT `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`payment_method` AS `payment_method`,
          `LHS`.`customer_name` AS `customer_name`,
          `LHS`.`customer_phone` AS `customer_phone`,
          `LHS`.`customer_email` AS `customer_email`,
          `LHS`.`customer_address` AS `customer_address`,
          `LHS`.`customer_login` AS `customer_login`,
          `LHS`.`customer_password` AS `customer_password`,
          `RHS`.`outcome_code` AS `outcome_code`,
          `RHS`.`n` AS `n`
   FROM `df_customers` AS `LHS`
   INNER JOIN
     (SELECT `customer_id`,
             `outcome_code`,
             COUNT() AS `n`
      FROM `df_mailshot_customers`
      GROUP BY `customer_id`,
               `outcome_code`) AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`))
WHERE (`outcome_code` = 'Order'
       AND n = 2)
ORDER BY customer_name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/customers_campaigns_ecommerce/0010,"mutate(input0, 'n = n()'), natural_join(input1, line0), limit(line1, 'customer_email')","SELECT customer_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.mailshot_id AS mailshot_id,
                LHS.customer_id AS customer_id,
                LHS.outcome_code AS outcome_code,
                LHS.mailshot_customer_date AS mailshot_customer_date,
                RHS.payment_method AS payment_method,
                RHS.customer_name AS customer_name,
                RHS.customer_phone AS customer_phone,
                RHS.customer_email AS customer_email,
                RHS.customer_address AS customer_address,
                RHS.customer_login AS customer_login,
                RHS.customer_password AS customer_password,
                RHS.n AS n
         FROM df_mailshot_customers AS LHS
         INNER JOIN
           (SELECT customer_id,
                   payment_method,
                   customer_name,
                   customer_phone,
                   customer_email,
                   customer_address,
                   customer_login,
                   customer_password,
                   COUNT(*) OVER () AS n
            FROM df_customers) AS RHS ON (LHS.customer_id = RHS.customer_id))
      ORDER BY customer_email)
   LIMIT 1);",2,13,5,0,5,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0
spider/csu_1/0033,"mutate(input0, 'n = n()'), inner_join(line0, input0, ""'n' = 'id','county' = 'county'"")","SELECT n AS count___
FROM
  (SELECT LHS.id AS id,
          LHS.campus AS campus,
          LHS.location AS LOCATION,
          LHS.county AS county,
          LHS.year AS YEAR,
          LHS.n AS n,
          RHS.campus AS campus_other,
          RHS.location AS location_other,
          RHS.year AS year_other
   FROM
     (SELECT id,
             campus,
             LOCATION,
             county,
             YEAR,
             COUNT(*) OVER () AS n
      FROM df_campuses) AS LHS
   INNER JOIN df_campuses AS RHS ON (LHS.n = RHS.id
                                     AND LHS.county = RHS.county))
ORDER BY count___;",2,10,3,0,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/csu_1/0002,"filter(input0, ""location == 'Chico'"")","SELECT `campus`
FROM `df_campuses`
WHERE (`location` = 'Chico')
ORDER BY campus;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/csu_1/0008,"filter(input0, ""campus == 'San Francisco State University' & year < 1996L""), inner_join(line0, input1, ""'id' = 'campus'"")","SELECT `campusfee`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`campus` AS `campus`,
          `LHS`.`location` AS `location`,
          `LHS`.`county` AS `county`,
          `LHS`.`year` AS `year`,
          `RHS`.`year` AS `year_other`,
          `RHS`.`campusfee` AS `campusfee`
   FROM
     (SELECT *
      FROM `df_campuses`
      WHERE (`campus` = 'San Francisco State University'
             AND YEAR < 1996)) AS LHS
   INNER JOIN df_csu_fees AS RHS ON (LHS.id = RHS.campus))
ORDER BY campusfee;",2,9,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/csu_1/0003,"filter(input0, 'year == 1958L'), intersect(line0, input0, 'campus')","SELECT campus
FROM
  (SELECT campus
   FROM df_campuses
   WHERE (YEAR = 1958) INTERSECT
     SELECT campus
     FROM df_campuses)
ORDER BY campus;",2,9,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/csu_1/0006,"filter(input0, ""location == 'Northridge' | location == 'San Francisco'""), filter(line0, ""county != 'Los Angeles' | county != 'San Francisco'"")","SELECT `campus`
FROM
  (SELECT *
   FROM `df_campuses`
   WHERE (`location` = 'Northridge'
          OR `location` = 'San Francisco'))
WHERE (`county` != 'Los Angeles'
       OR `county` != 'San Francisco')
ORDER BY campus;",2,8,2,0,2,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/csu_1/0012,"summarise(input0, 'sumdegrees = sum(degrees)', ""'campus','year'""), limit(line0, 'desc(sumdegrees)')","SELECT campus
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT campus,
                YEAR,
                SUM(degrees) AS sumdegrees
         FROM df_degrees
         GROUP BY campus,
                  YEAR)
      ORDER BY sumdegrees DESC)
   LIMIT 1);",1,12,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/csu_1/0015,"filter(input0, 'year > 2005L & campusfee != 2005L'), summarise(input0, 'meancampusfee = mean(campusfee, na.rm = T)', ""'campus'""), left_join(line1, line0)","SELECT DISTINCT YEAR AS avg_campusfee_
FROM
  (SELECT LHS.campus AS campus,
          LHS.meancampusfee AS meancampusfee,
          RHS.year AS YEAR,
          RHS.campusfee AS campusfee
   FROM
     (SELECT campus,
             AVG(campusfee) AS meancampusfee
      FROM df_csu_fees
      GROUP BY campus) AS LHS
   LEFT JOIN
     (SELECT *
      FROM df_csu_fees
      WHERE (YEAR > 2005
             AND campusfee != 2005)) AS RHS ON (LHS.campus = RHS.campus))
ORDER BY avg_campusfee_;",3,14,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/csu_1/0005,"filter(input0, 'year >= 1935L & year < 1939L'), intersect(line0, input0, 'campus')","SELECT campus
FROM
  (SELECT campus
   FROM df_campuses
   WHERE (YEAR >= 1935
          AND YEAR < 1939) INTERSECT
     SELECT campus
     FROM df_campuses)
ORDER BY campus;",2,10,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/csu_1/0020,"filter(input0, ""county == 'Los Angeles'""), summarise(line0, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_campuses`
      WHERE (`county` = 'Los Angeles')))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/csu_1/0007,"filter(input0, ""campus == 'San Jose State University' & year < 1996L""), inner_join(line0, input1, ""'id' = 'campus'"")","SELECT `campusfee`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`campus` AS `campus`,
          `LHS`.`location` AS `location`,
          `LHS`.`county` AS `county`,
          `LHS`.`year` AS `year`,
          `RHS`.`year` AS `year_other`,
          `RHS`.`campusfee` AS `campusfee`
   FROM
     (SELECT *
      FROM `df_campuses`
      WHERE (`campus` = 'San Jose State University'
             AND YEAR < 1996)) AS LHS
   INNER JOIN df_csu_fees AS RHS ON (LHS.id = RHS.campus))
ORDER BY campusfee;",2,9,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/csu_1/0023,"filter(input0, 'year <= 2002L & faculty != year'), summarise(line0, 'sumfaculty = sum(faculty)', ""'year'"")","SELECT sumfaculty AS sum_faculty_
FROM
  (SELECT YEAR,
          SUM(faculty) AS sumfaculty
   FROM
     (SELECT *
      FROM df_faculty
      WHERE (YEAR <= 2002
             AND faculty != YEAR))
   GROUP BY YEAR)
ORDER BY sum_faculty_;",2,11,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/csu_1/0001,"filter(input0, ""county == 'Los Angeles'"")","SELECT `campus`
FROM `df_campuses`
WHERE (`county` = 'Los Angeles')
ORDER BY campus;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/csu_1/0014,"filter(input0, 'year <= 1996L & campusfee != year'), mutate(line0, 'meancampusfee = mean(campusfee, na.rm = T)')","SELECT DISTINCT AVG(campusfee) OVER () AS avg_campusfee_
FROM df_csu_fees
WHERE (YEAR <= 1996
       AND campusfee != YEAR)
ORDER BY avg_campusfee_;",2,7,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/csu_1/0009,"mutate(input0, 'meancampusfee = mean(campusfee, na.rm = T)'), filter(line0, 'meancampusfee < campusfee'), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT campus,
          YEAR,
          campusfee,
          AVG(campusfee) OVER () AS meancampusfee
   FROM df_csu_fees)
WHERE (meancampusfee < campusfee)
ORDER BY count___;",3,9,2,1,2,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0
spider/csu_1/0011,"summarise(input0, 'sumdegrees = sum(degrees)', ""'campus','year'""), limit(line0, 'desc(year)')","SELECT YEAR
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT campus,
                YEAR,
                SUM(degrees) AS sumdegrees
         FROM df_degrees
         GROUP BY campus,
                  YEAR)
      ORDER BY YEAR DESC)
   LIMIT 1);",1,14,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/csu_1/0010,"filter(input0, ""county != 'Los Angeles' | year > 1950L""), filter(line0, ""county == 'Los Angeles' & year > 1950L"")","SELECT `campus`
FROM
  (SELECT *
   FROM `df_campuses`
   WHERE (`county` != 'Los Angeles'
          OR `year` > 1950))
WHERE (`county` = 'Los Angeles'
       AND YEAR > 1950)
ORDER BY campus;",2,8,2,0,2,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/farm/0002,df_farm,"SELECT total_horses
FROM df_farm
ORDER BY total_horses;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/farm/0008,df_city,"SELECT official_name
FROM df_city
ORDER BY official_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/farm/0003,"filter(input0, ""theme != 'Aliens'""), intersect(line0, input0, 'hosts')","SELECT `hosts`
FROM
  (SELECT `hosts`
   FROM `df_farm_competition`
   WHERE (`theme` != 'Aliens') INTERSECT
     SELECT hosts
     FROM df_farm_competition)
ORDER BY hosts;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/farm/0013,"filter(input0, 'population >= 1000'), inner_join(line0, input1, ""'city_id' = 'host_city_id'"")","SELECT theme
FROM
  (SELECT LHS.city_id AS city_id,
          LHS.official_name AS official_name,
          LHS.status AS status,
          LHS.area_km_2 AS area_km_2,
          LHS.population AS population,
          LHS.census_ranking AS census_ranking,
          RHS.competition_id AS competition_id,
          RHS.year AS YEAR,
          RHS.theme AS theme,
          RHS.hosts AS hosts
   FROM
     (SELECT *
      FROM df_city
      WHERE (population >= 1000.0)) AS LHS
   INNER JOIN df_farm_competition AS RHS ON (LHS.city_id = RHS.host_city_id))
ORDER BY theme;",2,9,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/farm/0006,"mutate(input0, 'mincows = min(cows)'), mutate(line0, 'cows = max(cows)')","SELECT DISTINCT MAX(cows) OVER () AS max_cows_,
                               mincows AS min_cows_
FROM
  (SELECT farm_id,
          YEAR,
          total_horses,
          working_horses,
          total_cattle,
          oxen,
          bulls,
          cows,
          pigs,
          sheep_and_goats,
          MIN(cows) OVER () AS mincows
   FROM df_farm)
ORDER BY max_cows_;",2,8,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/farm/0004,"intersect(input0, input0, 'theme')","SELECT theme
FROM
  (SELECT theme
   FROM df_farm_competition INTERSECT SELECT theme
   FROM df_farm_competition)
ORDER BY theme;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/farm/0012,"mutate(input1, 'n = n()'), natural_join3(input0, input1, line0), limit(line1, 'population')","SELECT status
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.city_id AS city_id,
                LHS.official_name AS official_name,
                LHS.status AS status,
                LHS.area_km_2 AS area_km_2,
                LHS.population AS population,
                LHS.census_ranking AS census_ranking,
                LHS.competition_id AS competition_id,
                LHS.year AS YEAR,
                LHS.theme AS theme,
                LHS.host_city_id AS host_city_id,
                LHS.hosts AS hosts,
                RHS.n AS n
         FROM
           (SELECT LHS.city_id AS city_id,
                   LHS.official_name AS official_name,
                   LHS.status AS status,
                   LHS.area_km_2 AS area_km_2,
                   LHS.population AS population,
                   LHS.census_ranking AS census_ranking,
                   RHS.competition_id AS competition_id,
                   RHS.year AS YEAR,
                   RHS.theme AS theme,
                   RHS.host_city_id AS host_city_id,
                   RHS.hosts AS hosts
            FROM df_city AS LHS
            CROSS JOIN df_farm_competition AS RHS) AS LHS
         INNER JOIN
           (SELECT competition_id,
                   YEAR,
                   theme,
                   host_city_id,
                   hosts,
                   COUNT(*) OVER () AS n
            FROM df_farm_competition) AS RHS ON (LHS.competition_id = RHS.competition_id
                                                 AND LHS.year = RHS.year
                                                 AND LHS.theme = RHS.theme
                                                 AND LHS.host_city_id = RHS.host_city_id
                                                 AND LHS.hosts = RHS.hosts))
      ORDER BY population)
   LIMIT 1);",2,18,6,0,6,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
spider/farm/0015,"summarise(input0, 'n = n()', ""'status'""), mutate(line0, 'n = n()')","SELECT status
FROM
  (SELECT status,
          COUNT() AS n
   FROM df_city
   GROUP BY status)
ORDER BY status;",2,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/farm/0005,"filter(input0, 'total_horses > 5000 | working_horses >= 5000'), mutate(line0, 'meanworking_horses = mean(working_horses, na.rm = T)')","SELECT DISTINCT AVG(working_horses) OVER () AS avg_working_horses_
FROM df_farm
WHERE (total_horses > 5000.0
       OR working_horses >= 5000.0)
ORDER BY avg_working_horses_;",2,6,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/farm/0016,"summarise(input0, 'n = n()', ""'area_km_2','status'""), limit(line0, 'desc(status)')","SELECT status
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT area_km_2,
                status,
                COUNT() AS n
         FROM df_city
         GROUP BY area_km_2,
                  status)
      ORDER BY status DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/farm/0018,"filter(input0, 'population < 1500 | population <= 500')","SELECT DISTINCT status
FROM df_city
WHERE (population < 1500.0
       OR population <= 500.0)
ORDER BY status;",1,5,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/farm/0020,"filter(input0, ""status != 'Village'"")","SELECT `census_ranking`
FROM `df_city`
WHERE (`status` != 'Village')
ORDER BY census_ranking;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/farm/0019,"filter(input0, 'population > 1500 | population < 500'), semi_join(input0, line0)","SELECT official_name
FROM
  (SELECT *
   FROM df_city AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_city
           WHERE (population > 1500.0
                  OR population < 500.0)) AS RHS
        WHERE (LHS.city_id = RHS.city_id
               AND LHS.official_name = RHS.official_name
               AND LHS.status = RHS.status
               AND LHS.area_km_2 = RHS.area_km_2
               AND LHS.population = RHS.population
               AND LHS.census_ranking = RHS.census_ranking) ))
ORDER BY official_name;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/farm/0007,"summarise(input0, 'n_distinct = n_distinct(status)', ""'status'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count_distinct_status_
FROM
  (SELECT status,
          COUNT(DISTINCT status) AS n_distinct
   FROM df_city
   GROUP BY status)
ORDER BY count_distinct_status_;",2,7,2,2,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/farm/0001,"summarise(input0, 'n = n()', ""'total_cattle','year'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT total_cattle,
          YEAR,
          COUNT() AS n
   FROM df_farm
   GROUP BY total_cattle,
            YEAR)
ORDER BY count___;",2,8,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/farm/0014,"summarise(input0, 'meanpopulation = mean(population, na.rm = T)', ""'status'"")","SELECT status,
       meanpopulation AS avg_population_
FROM
  (SELECT status,
          AVG(population) AS meanpopulation
   FROM df_city
   GROUP BY status)
ORDER BY status;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/farm/0009,"limit(input0, 'city_id')","SELECT official_name,
       status
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_city
      ORDER BY city_id)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/farm/0011,"mutate(input1, 'n = n()'), natural_join3(input0, input1, line0), limit(line1, 'population')","SELECT official_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.city_id AS city_id,
                LHS.official_name AS official_name,
                LHS.status AS status,
                LHS.area_km_2 AS area_km_2,
                LHS.population AS population,
                LHS.census_ranking AS census_ranking,
                LHS.competition_id AS competition_id,
                LHS.year AS YEAR,
                LHS.theme AS theme,
                LHS.host_city_id AS host_city_id,
                LHS.hosts AS hosts,
                RHS.n AS n
         FROM
           (SELECT LHS.city_id AS city_id,
                   LHS.official_name AS official_name,
                   LHS.status AS status,
                   LHS.area_km_2 AS area_km_2,
                   LHS.population AS population,
                   LHS.census_ranking AS census_ranking,
                   RHS.competition_id AS competition_id,
                   RHS.year AS YEAR,
                   RHS.theme AS theme,
                   RHS.host_city_id AS host_city_id,
                   RHS.hosts AS hosts
            FROM df_city AS LHS
            CROSS JOIN df_farm_competition AS RHS) AS LHS
         INNER JOIN
           (SELECT competition_id,
                   YEAR,
                   theme,
                   host_city_id,
                   hosts,
                   COUNT(*) OVER () AS n
            FROM df_farm_competition) AS RHS ON (LHS.competition_id = RHS.competition_id
                                                 AND LHS.year = RHS.year
                                                 AND LHS.theme = RHS.theme
                                                 AND LHS.host_city_id = RHS.host_city_id
                                                 AND LHS.hosts = RHS.hosts))
      ORDER BY population)
   LIMIT 1);",2,18,6,0,6,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
spider/farm/0010,"inner_join(input0, input1, ""'city_id' = 'host_city_id'"")","SELECT YEAR,
       official_name
FROM
  (SELECT LHS.city_id AS city_id,
          LHS.official_name AS official_name,
          LHS.status AS status,
          LHS.area_km_2 AS area_km_2,
          LHS.population AS population,
          LHS.census_ranking AS census_ranking,
          RHS.competition_id AS competition_id,
          RHS.year AS YEAR,
          RHS.theme AS theme,
          RHS.hosts AS hosts
   FROM df_city AS LHS
   INNER JOIN df_farm_competition AS RHS ON (LHS.city_id = RHS.host_city_id))
ORDER BY YEAR;",1,8,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/train_station/0017,"summarise(input0, 'n = n()', ""'name','station_id'""), summarise(input1, 'n = n()', ""'train_id'""), inner_join(line0, line1, ""'station_id' = 'n','n' = 'train_id'"")","SELECT name
FROM
  (SELECT name,
          station_id,
          station_id AS n
   FROM
     (SELECT LHS.name AS name,
             LHS.station_id AS station_id,
             LHS.n AS n
      FROM
        (SELECT name,
                station_id,
                COUNT() AS n
         FROM df_station
         GROUP BY name,
                  station_id) AS LHS
      INNER JOIN
        (SELECT train_id,
                COUNT() AS n
         FROM df_train_station
         GROUP BY train_id) AS RHS ON (LHS.station_id = RHS.n
                                       AND LHS.n = RHS.train_id)))
ORDER BY name;",3,11,5,0,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0
spider/train_station/0008,"filter(input0, 'number_of_platforms > 15L | total_passengers < 25'), natural_join(input0, line0)","SELECT DISTINCT LOCATION
FROM
  (SELECT LHS.station_id AS station_id,
          LHS.name AS name,
          LHS.annual_entry_exit AS annual_entry_exit,
          LHS.annual_interchanges AS annual_interchanges,
          LHS.total_passengers AS total_passengers,
          LHS.location AS LOCATION,
          LHS.main_services AS main_services,
          LHS.number_of_platforms AS number_of_platforms
   FROM df_station AS LHS
   INNER JOIN
     (SELECT *
      FROM df_station
      WHERE (number_of_platforms > 15
             OR total_passengers < 25.0)) AS RHS ON (LHS.station_id = RHS.station_id
                                                     AND LHS.name = RHS.name
                                                     AND LHS.annual_entry_exit = RHS.annual_entry_exit
                                                     AND LHS.annual_interchanges = RHS.annual_interchanges
                                                     AND LHS.total_passengers = RHS.total_passengers
                                                     AND LHS.location = RHS.location
                                                     AND LHS.main_services = RHS.main_services
                                                     AND LHS.number_of_platforms = RHS.number_of_platforms))
ORDER BY LOCATION;",2,10,3,1,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/train_station/0003,"intersect(input0, input0, 'location')","SELECT LOCATION
FROM
  (SELECT LOCATION
   FROM df_station INTERSECT SELECT LOCATION
   FROM df_station)
ORDER BY LOCATION;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/train_station/0022,"filter(input0, ""location == 'London'""), semi_join(input2, line0), anti_join(input1, line1, '')","SELECT `name`
FROM
  (SELECT *
   FROM `df_train` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_train_station` AS `LHS`
           WHERE EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM `df_station`
                   WHERE (`location` = 'London')) AS RHS
                WHERE (LHS.station_id = RHS.station_id) )) AS RHS
        WHERE (LHS.train_id = RHS.train_id) ))
ORDER BY name;",3,20,6,0,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/train_station/0013,df_train,"SELECT name,
       service
FROM df_train
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/train_station/0006,"filter(input0, ""location == 'London' | location == 'Glasgow'""), mutate(line0, 'meantotal_passengers = mean(total_passengers, na.rm = T)'), mutate(line1, 'maxtotal_passengers = max(total_passengers)')","SELECT DISTINCT `meantotal_passengers` AS `avg_total_passengers_`,
                MAX(`total_passengers`) OVER () AS `max_total_passengers_`
FROM
  (SELECT `station_id`,
          `name`,
          `annual_entry_exit`,
          `annual_interchanges`,
          `total_passengers`,
          `location`,
          `main_services`,
          `number_of_platforms`,
          AVG(`total_passengers`) OVER () AS `meantotal_passengers`
   FROM
     (SELECT *
      FROM `df_station`
      WHERE (`location` = 'London'
             OR `location` = 'Glasgow')))
ORDER BY avg_total_passengers_;",3,11,3,1,3,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0
spider/train_station/0004,"filter(input0, ""location != 'London'""), semi_join(input0, line0)","SELECT `name`,
       `total_passengers`
FROM
  (SELECT *
   FROM `df_station` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_station`
           WHERE (`location` != 'London')) AS RHS
        WHERE (LHS.station_id = RHS.station_id
               AND LHS.name = RHS.name
               AND LHS.annual_entry_exit = RHS.annual_entry_exit
               AND LHS.annual_interchanges = RHS.annual_interchanges
               AND LHS.total_passengers = RHS.total_passengers
               AND LHS.location = RHS.location
               AND LHS.main_services = RHS.main_services
               AND LHS.number_of_platforms = RHS.number_of_platforms) ))
ORDER BY name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/train_station/0012,"summarise(input0, 'n = n()', ""'service'"")","SELECT n AS count___
FROM
  (SELECT service,
          COUNT() AS n
   FROM df_train
   GROUP BY service)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/train_station/0015,"natural_join(input1, input2), inner_join(line0, input0, ""'station_id'"")","SELECT name_other AS name___1,
       name AS name___2
FROM
  (SELECT LHS.train_id AS train_id,
          LHS.name AS name,
          LHS.time AS TIME,
          LHS.service AS service,
          LHS.station_id AS station_id,
          RHS.name AS name_other,
          RHS.annual_entry_exit AS annual_entry_exit,
          RHS.annual_interchanges AS annual_interchanges,
          RHS.total_passengers AS total_passengers,
          RHS.location AS LOCATION,
          RHS.main_services AS main_services,
          RHS.number_of_platforms AS number_of_platforms
   FROM
     (SELECT LHS.train_id AS train_id,
             LHS.name AS name,
             LHS.time AS TIME,
             LHS.service AS service,
             RHS.station_id AS station_id
      FROM df_train AS LHS
      INNER JOIN df_train_station AS RHS ON (LHS.train_id = RHS.train_id)) AS LHS
   INNER JOIN df_station AS RHS ON (LHS.station_id = RHS.station_id))
ORDER BY name___1;",2,10,3,0,3,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0
spider/train_station/0005,"limit(input0, 'station_id')","SELECT name,
       main_services
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_station
      ORDER BY station_id)
   LIMIT 3);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/train_station/0016,"filter(input0, ""location != 'London'""), semi_join(input2, line0), anti_join(input1, line1, '')","SELECT `name`,
       `time`
FROM
  (SELECT *
   FROM `df_train` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_train_station` AS `LHS`
           WHERE EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM `df_station`
                   WHERE (`location` != 'London')) AS RHS
                WHERE (LHS.station_id = RHS.station_id) )) AS RHS
        WHERE (LHS.train_id = RHS.train_id) ))
ORDER BY name;",3,20,6,0,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/train_station/0018,"summarise(input1, 'n = n()', ""'station_id'""), left_join(input0, line0), filter(line1, 'n >= 2L')","SELECT name
FROM
  (SELECT LHS.station_id AS station_id,
          LHS.name AS name,
          LHS.annual_entry_exit AS annual_entry_exit,
          LHS.annual_interchanges AS annual_interchanges,
          LHS.total_passengers AS total_passengers,
          LHS.location AS LOCATION,
          LHS.main_services AS main_services,
          LHS.number_of_platforms AS number_of_platforms,
          RHS.n AS n
   FROM df_station AS LHS
   LEFT JOIN
     (SELECT station_id,
             COUNT() AS n
      FROM df_train_station
      GROUP BY station_id) AS RHS ON (LHS.station_id = RHS.station_id))
WHERE (n >= 2)
ORDER BY name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/train_station/0020,"anti_join(input0, input1, ""'station_id'"")","SELECT name
FROM
  (SELECT *
   FROM df_station AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_train_station AS RHS
        WHERE (LHS.station_id = RHS.station_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/train_station/0019,"summarise(input0, 'n = n()', ""'location','number_of_platforms'""), filter(line0, 'n <= 1L')","SELECT LOCATION
FROM
  (SELECT LOCATION,
          number_of_platforms,
          COUNT() AS n
   FROM df_station
   GROUP BY LOCATION,
            number_of_platforms)
WHERE (n <= 1)
ORDER BY LOCATION;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/train_station/0021,"filter(input1, ""name != 'Ananthapuri Express' & name == 'Guruvayur Express'""), semi_join(input2, line0), semi_join(input0, line1)","SELECT `name`
FROM
  (SELECT *
   FROM `df_station` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_train_station` AS `LHS`
           WHERE EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM `df_train`
                   WHERE (`name` != 'Ananthapuri Express'
                          AND `name` = 'Guruvayur Express')) AS RHS
                WHERE (LHS.train_id = RHS.train_id) )) AS RHS
        WHERE (LHS.station_id = RHS.station_id) ))
ORDER BY name;",3,19,6,0,6,0,5,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,0,0,0
spider/train_station/0023,df_station,"SELECT name,
       LOCATION
FROM df_station
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/train_station/0001,"mutate(input0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_station
ORDER BY count___;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/train_station/0014,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'name','total_passengers'"")","SELECT name,
       n AS count___
FROM
  (SELECT name,
          total_passengers,
          COUNT() AS n
   FROM
     (SELECT LHS.station_id AS station_id,
             LHS.name AS name,
             LHS.annual_entry_exit AS annual_entry_exit,
             LHS.annual_interchanges AS annual_interchanges,
             LHS.total_passengers AS total_passengers,
             LHS.location AS LOCATION,
             LHS.main_services AS main_services,
             LHS.number_of_platforms AS number_of_platforms,
             RHS.train_id AS train_id
      FROM df_station AS LHS
      INNER JOIN df_train_station AS RHS ON (LHS.station_id = RHS.station_id))
   GROUP BY name,
            total_passengers)
ORDER BY name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/train_station/0009,"filter(input0, 'number_of_platforms > 15L'), anti_join(input0, line0, ""'location'"")","SELECT LOCATION
FROM
  (SELECT *
   FROM df_station AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_station
           WHERE (number_of_platforms > 15)) AS RHS
        WHERE (LHS.location = RHS.location) ))
ORDER BY LOCATION;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/train_station/0011,df_train,"SELECT name,
       TIME,
       service
FROM df_train
ORDER BY name;",0,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/train_station/0010,"summarise(input0, 'n = n()', ""'location','name'""), limit(line0, 'desc(name)')","SELECT LOCATION
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LOCATION,
                name,
                COUNT() AS n
         FROM df_station
         GROUP BY LOCATION,
                  name)
      ORDER BY name DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/manufacturer/0002,"limit(input0, 'desc(num_of_component)')","SELECT name,
       furniture_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_furniture
      ORDER BY num_of_component DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/manufacturer/0008,"filter(input0, 'num_of_factories != 20L & num_of_shops > 20L'), mutate(line0, 'meannum_of_factories = mean(num_of_factories, na.rm = T)')","SELECT DISTINCT AVG(num_of_factories) OVER () AS avg_num_of_factories_
FROM df_manufacturer
WHERE (num_of_factories != 20
       AND num_of_shops > 20)
ORDER BY avg_num_of_factories_;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/manufacturer/0003,"mutate(input0, 'summarket_rate = sum(market_rate)'), filter(line0, 'market_rate < 2 | summarket_rate >= 2')","SELECT DISTINCT summarket_rate AS sum_market_rate_
FROM
  (SELECT furniture_id,
          name,
          num_of_component,
          market_rate,
          SUM(market_rate) OVER () AS summarket_rate
   FROM df_furniture)
WHERE (market_rate < 2.0
       OR summarket_rate >= 2.0)
ORDER BY sum_market_rate_;",2,8,2,1,2,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/manufacturer/0013,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'name'"")","SELECT n AS count___,
       name
FROM
  (SELECT name,
          COUNT() AS n
   FROM
     (SELECT LHS.manufacturer_id AS manufacturer_id,
             LHS.open_year AS open_year,
             LHS.name AS name,
             LHS.num_of_factories AS num_of_factories,
             LHS.num_of_shops AS num_of_shops,
             RHS.furniture_id AS furniture_id,
             RHS.price_in_dollar AS price_in_dollar
      FROM df_manufacturer AS LHS
      INNER JOIN df_furniture_manufacte AS RHS ON (LHS.manufacturer_id = RHS.manufacturer_id))
   GROUP BY name)
ORDER BY count___;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/manufacturer/0006,"left_join(input1, input0), summarise(input1, 'price_in_dollar = max(price_in_dollar)', ''), anti_join(line0, line1, '')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT LHS.manufacturer_id AS manufacturer_id,
             LHS.furniture_id AS furniture_id,
             LHS.price_in_dollar AS price_in_dollar,
             RHS.name AS name,
             RHS.num_of_component AS num_of_component,
             RHS.market_rate AS market_rate
      FROM df_furniture_manufacte AS LHS
      LEFT JOIN df_furniture AS RHS ON (LHS.furniture_id = RHS.furniture_id)) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT MAX(price_in_dollar) AS price_in_dollar
           FROM df_furniture_manufacte) AS RHS
        WHERE (LHS.price_in_dollar = RHS.price_in_dollar) ))
ORDER BY name;",3,15,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0
spider/manufacturer/0004,"filter(input0, 'num_of_component >= 10L')","SELECT num_of_component,
       name
FROM df_furniture
WHERE (num_of_component >= 10)
ORDER BY num_of_component;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/manufacturer/0012,"natural_join(input0, input1), limit(line0, 'desc(furniture_id)')","SELECT manufacturer_id,
       num_of_shops
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.manufacturer_id AS manufacturer_id,
                LHS.open_year AS open_year,
                LHS.name AS name,
                LHS.num_of_factories AS num_of_factories,
                LHS.num_of_shops AS num_of_shops,
                RHS.furniture_id AS furniture_id,
                RHS.price_in_dollar AS price_in_dollar
         FROM df_manufacturer AS LHS
         INNER JOIN df_furniture_manufacte AS RHS ON (LHS.manufacturer_id = RHS.manufacturer_id))
      ORDER BY furniture_id DESC)
   LIMIT 1);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/manufacturer/0015,"anti_join(input0, input1, '')","SELECT market_rate,
       name
FROM
  (SELECT *
   FROM df_furniture AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_furniture_manufacte AS RHS
        WHERE (LHS.furniture_id = RHS.furniture_id) ))
ORDER BY market_rate;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/manufacturer/0005,"limit(input0, 'market_rate')","SELECT name,
       num_of_component
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_furniture
      ORDER BY market_rate)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/manufacturer/0016,"natural_join(input0, input2), filter(input1, 'num_of_component != 6L | num_of_component < 10L'), inner_join(line0, line1, ""'num_of_factories' = 'num_of_component'"")","SELECT DISTINCT name
FROM
  (SELECT LHS.manufacturer_id AS manufacturer_id,
          LHS.open_year AS open_year,
          LHS.name AS name,
          LHS.num_of_factories AS num_of_factories,
          LHS.num_of_shops AS num_of_shops,
          LHS.furniture_id AS furniture_id,
          LHS.price_in_dollar AS price_in_dollar,
          RHS.furniture_id AS furniture_id_other,
          RHS.name AS name_other,
          RHS.market_rate AS market_rate
   FROM
     (SELECT LHS.manufacturer_id AS manufacturer_id,
             LHS.open_year AS open_year,
             LHS.name AS name,
             LHS.num_of_factories AS num_of_factories,
             LHS.num_of_shops AS num_of_shops,
             RHS.furniture_id AS furniture_id,
             RHS.price_in_dollar AS price_in_dollar
      FROM df_manufacturer AS LHS
      INNER JOIN df_furniture_manufacte AS RHS ON (LHS.manufacturer_id = RHS.manufacturer_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_furniture
      WHERE (num_of_component != 6
             OR num_of_component < 10)) AS RHS ON (LHS.num_of_factories = RHS.num_of_component))
ORDER BY name;",3,13,4,1,4,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0
spider/manufacturer/0007,"limit(input0, 'num_of_factories')","SELECT open_year,
       name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_manufacturer
      ORDER BY num_of_factories)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/manufacturer/0001,"summarise(input0, 'sumnum_of_component = sum(num_of_component)', ""'market_rate','num_of_component'""), summarise(line0, 'sumnum_of_component = sum(num_of_component)', '')","SELECT sumnum_of_component AS sum_num_of_component_
FROM
  (SELECT SUM(num_of_component) AS sumnum_of_component
   FROM
     (SELECT market_rate,
             num_of_component,
             SUM(num_of_component) AS sumnum_of_component
      FROM df_furniture
      GROUP BY market_rate,
               num_of_component))
ORDER BY sum_num_of_component_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/manufacturer/0014,"natural_join(input0, input1)","SELECT name,
       price_in_dollar
FROM
  (SELECT LHS.furniture_id AS furniture_id,
          LHS.name AS name,
          LHS.num_of_component AS num_of_component,
          LHS.market_rate AS market_rate,
          RHS.manufacturer_id AS manufacturer_id,
          RHS.price_in_dollar AS price_in_dollar
   FROM df_furniture AS LHS
   INNER JOIN df_furniture_manufacte AS RHS ON (LHS.furniture_id = RHS.furniture_id))
ORDER BY name;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/manufacturer/0009,df_manufacturer,"SELECT name,
       manufacturer_id
FROM df_manufacturer
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/manufacturer/0010,"filter(input0, 'num_of_factories <= 10L | num_of_shops >= 10L'), semi_join(input0, line0)","SELECT name,
       open_year
FROM
  (SELECT *
   FROM df_manufacturer AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_manufacturer
           WHERE (num_of_factories <= 10
                  OR num_of_shops >= 10)) AS RHS
        WHERE (LHS.manufacturer_id = RHS.manufacturer_id
               AND LHS.open_year = RHS.open_year
               AND LHS.name = RHS.name
               AND LHS.num_of_factories = RHS.num_of_factories
               AND LHS.num_of_shops = RHS.num_of_shops) ))
ORDER BY name;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/twitter_1/0002,"filter(input0, ""name == 'Iron Man'"")","SELECT `uid` AS `partitionid`
FROM `df_user_profiles`
WHERE (`name` = 'Iron Man')
ORDER BY partitionid;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/twitter_1/0017,"limit(input0, 'desc(followers)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_user_profiles
      ORDER BY followers DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/twitter_1/0003,"summarise(input0, 'n = n()', ""'email'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT email,
             COUNT() AS n
      FROM df_user_profiles
      GROUP BY email))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/twitter_1/0027,"mutate(input0, 'maxfollowers = max(followers)'), mutate(line0, 'sumfollowers = sum(followers)')","SELECT DISTINCT maxfollowers AS max_followers_,
                SUM(followers) OVER () AS sum_followers_
FROM
  (SELECT UID,
          name,
          email,
          partitionid,
          followers,
          MAX(followers) OVER () AS maxfollowers
   FROM df_user_profiles)
ORDER BY max_followers_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/twitter_1/0022,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'name','uid'"")","SELECT name,
       n AS count___
FROM
  (SELECT name,
          UID,
          COUNT() AS n
   FROM
     (SELECT LHS.id AS id,
             LHS.uid AS UID,
             LHS.text AS text,
             LHS.createdate AS createdate,
             RHS.name AS name,
             RHS.email AS email,
             RHS.partitionid AS partitionid,
             RHS.followers AS followers
      FROM df_tweets AS LHS
      INNER JOIN df_user_profiles AS RHS ON (LHS.uid = RHS.uid))
   GROUP BY name,
            UID)
ORDER BY name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/twitter_1/0013,"inner_join(input0, input1, ""'f1' = 'uid'""), summarise(line0, 'n = n()', ""'email','name'""), filter(line1, 'n > 1L')","SELECT name,
       email
FROM
  (SELECT email,
          name,
          COUNT() AS n
   FROM
     (SELECT f1,
             f2,
             name,
             email,
             partitionid,
             followers,
             f1 AS UID
      FROM
        (SELECT LHS.f1 AS f1,
                LHS.f2 AS f2,
                RHS.name AS name,
                RHS.email AS email,
                RHS.partitionid AS partitionid,
                RHS.followers AS followers
         FROM df_follows AS LHS
         INNER JOIN df_user_profiles AS RHS ON (LHS.f1 = RHS.uid)))
   GROUP BY email,
            name)
WHERE (n > 1)
ORDER BY name;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/twitter_1/0006,"summarise(input0, 'n = n()', ""'createdate','text'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT createdate, text, COUNT() AS n
   FROM df_tweets
   GROUP BY createdate, text)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/twitter_1/0004,"summarise(input0, 'n = n()', ""'f1','f2'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT f1,
          f2,
          COUNT() AS n
   FROM df_follows
   GROUP BY f1,
            f2)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/twitter_1/0012,"filter(input1, ""name != 'Tyler Swift'""), summarise(input0, 'n = n()', ""'f1','f2'""), inner_join(line1, line0, ""'f1' = 'uid','n' = 'partitionid'"")","SELECT DISTINCT `name`
FROM
  (SELECT `f1`,
          `f2`,
          `n`,
          `name`,
          `email`,
          `followers`,
          `f1` AS `uid`
   FROM
     (SELECT `LHS`.`f1` AS `f1`,
             `LHS`.`f2` AS `f2`,
             `LHS`.`n` AS `n`,
             `RHS`.`name` AS `name`,
             `RHS`.`email` AS `email`,
             `RHS`.`followers` AS `followers`
      FROM
        (SELECT `f1`,
                `f2`,
                COUNT() AS `n`
         FROM `df_follows`
         GROUP BY `f1`,
                  `f2`) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_user_profiles`
         WHERE (`name` != 'Tyler Swift')) AS RHS ON (LHS.f1 = RHS.uid
                                                     AND LHS.n = RHS.partitionid)))
ORDER BY name;",3,13,5,1,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/twitter_1/0026,"semi_join(input1, input0), summarise(line0, 'meanfollowers = mean(followers, na.rm = T)', '')","SELECT meanfollowers AS avg_followers_
FROM
  (SELECT AVG(followers) AS meanfollowers
   FROM
     (SELECT *
      FROM df_user_profiles AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM df_tweets AS RHS
           WHERE (LHS.uid = RHS.uid) )))
ORDER BY avg_followers_;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/twitter_1/0005,"summarise(input0, 'n = n()', ""'f1'"")","SELECT n AS count___
FROM
  (SELECT f1,
          COUNT() AS n
   FROM df_follows
   GROUP BY f1)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/twitter_1/0016,"filter(input1, ""name == 'Mary' | name == 'Susan'""), inner_join(input0, line0, ""'f2' = 'uid'"")","SELECT `f1`
FROM
  (SELECT `LHS`.`f1` AS `f1`,
          `LHS`.`f2` AS `f2`,
          `RHS`.`name` AS `name`,
          `RHS`.`email` AS `email`,
          `RHS`.`partitionid` AS `partitionid`,
          `RHS`.`followers` AS `followers`
   FROM `df_follows` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_user_profiles`
      WHERE (`name` = 'Mary'
             OR `name` = 'Susan')) AS RHS ON (LHS.f2 = RHS.uid))
ORDER BY f1;",2,9,3,0,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/twitter_1/0018,"limit(input0, 'followers')","SELECT name,
       email
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_user_profiles
      ORDER BY followers)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/twitter_1/0020,"limit(input0, 'desc(followers)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_user_profiles
      ORDER BY followers DESC)
   LIMIT 5);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/twitter_1/0019,df_user_profiles,"SELECT name,
       followers
FROM df_user_profiles
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/twitter_1/0007,"mutate(input0, 'n_distinct = n_distinct(uid)')","SELECT DISTINCT COUNT(DISTINCT UID) OVER () AS count_distinct_uid_
FROM df_tweets
ORDER BY count_distinct_uid_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/twitter_1/0024,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'email','name'""), filter(line1, 'n > 1L')","SELECT name,
       n AS count___
FROM
  (SELECT email,
          name,
          COUNT() AS n
   FROM
     (SELECT LHS.id AS id,
             LHS.uid AS UID,
             LHS.text AS text,
             LHS.createdate AS createdate,
             RHS.name AS name,
             RHS.email AS email,
             RHS.partitionid AS partitionid,
             RHS.followers AS followers
      FROM df_tweets AS LHS
      INNER JOIN df_user_profiles AS RHS ON (LHS.uid = RHS.uid))
   GROUP BY email,
            name)
WHERE (n > 1)
ORDER BY name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/twitter_1/0021,df_tweets,"SELECT text
FROM df_tweets
ORDER BY text;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/twitter_1/0023,"summarise(input0, 'n = n()', ""'uid'""), cross_join(line0, line0, 'n < n.other'), natural_join3(input1, line0, line1)","SELECT DISTINCT name,
                partitionid
FROM
  (SELECT LHS.uid AS UID,
          LHS.name AS name,
          LHS.email AS email,
          LHS.partitionid AS partitionid,
          LHS.followers AS followers,
          LHS.n AS n,
          RHS.uid_other AS uid_other,
          RHS.n_other AS n_other
   FROM
     (SELECT LHS.uid AS UID,
             LHS.name AS name,
             LHS.email AS email,
             LHS.partitionid AS partitionid,
             LHS.followers AS followers,
             RHS.n AS n
      FROM df_user_profiles AS LHS
      INNER JOIN
        (SELECT UID,
                COUNT() AS n
         FROM df_tweets
         GROUP BY UID) AS RHS ON (LHS.uid = RHS.uid)) AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT LHS.uid AS UID,
                LHS.n AS n,
                RHS.uid AS uid_other,
                RHS.n AS n_other
         FROM
           (SELECT UID,
                   COUNT() AS n
            FROM df_tweets
            GROUP BY UID) AS LHS
         CROSS JOIN
           (SELECT UID,
                   COUNT() AS n
            FROM df_tweets
            GROUP BY UID) AS RHS)
      WHERE (n < n_other)) AS RHS ON (LHS.uid = RHS.uid
                                      AND LHS.n = RHS.n))
ORDER BY name;",3,20,8,1,8,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0
spider/twitter_1/0001,"filter(input0, ""name == 'Mary'"")","SELECT `email`
FROM `df_user_profiles`
WHERE (`name` = 'Mary')
ORDER BY email;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/twitter_1/0014,"summarise(input0, 'n = n()', ""'uid'""), filter(line0, 'n != 1L'), semi_join(input1, line1)","SELECT name
FROM
  (SELECT *
   FROM df_user_profiles AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT UID,
                     COUNT() AS n
              FROM df_tweets
              GROUP BY UID)
           WHERE (n != 1)) AS RHS
        WHERE (LHS.uid = RHS.uid) ))
ORDER BY name;",3,14,5,0,5,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0
spider/twitter_1/0025,"anti_join(input1, input0, ''), mutate(line0, 'meanfollowers = mean(followers, na.rm = T)')","SELECT DISTINCT AVG(followers) OVER () AS avg_followers_
FROM
  (SELECT *
   FROM df_user_profiles AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_tweets AS RHS
        WHERE (LHS.uid = RHS.uid) ))
ORDER BY avg_followers_;",2,12,3,1,3,0,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
spider/twitter_1/0011,"filter(input0, 'followers > 1000L')","SELECT name,
       email
FROM df_user_profiles
WHERE (followers > 1000)
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/party_host/0002,df_party,"SELECT party_theme
FROM df_party
ORDER BY party_theme;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/party_host/0008,"summarise(input0, 'n = n()', ""'host_id','nationality'""), limit(line0, 'host_id')","SELECT nationality
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT host_id,
                nationality,
                COUNT() AS n
         FROM df_host
         GROUP BY host_id,
                  nationality)
      ORDER BY host_id)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/party_host/0003,df_party,"SELECT party_theme,
       LOCATION
FROM df_party
ORDER BY party_theme;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/party_host/0013,"filter(input0, 'number_of_hosts >= 20L'), natural_join3(input1, input2, line0)","SELECT name
FROM
  (SELECT LHS.host_id AS host_id,
          LHS.name AS name,
          LHS.nationality AS nationality,
          LHS.age AS age,
          LHS.party_id AS party_id,
          LHS.is_main_in_charge AS is_main_in_charge,
          RHS.party_theme AS party_theme,
          RHS.location AS LOCATION,
          RHS.first_year AS first_year,
          RHS.last_year AS last_year,
          RHS.number_of_hosts AS number_of_hosts
   FROM
     (SELECT LHS.host_id AS host_id,
             LHS.name AS name,
             LHS.nationality AS nationality,
             LHS.age AS age,
             RHS.party_id AS party_id,
             RHS.is_main_in_charge AS is_main_in_charge
      FROM df_host AS LHS
      INNER JOIN df_party_host AS RHS ON (LHS.host_id = RHS.host_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_party
      WHERE (number_of_hosts >= 20)) AS RHS ON (LHS.party_id = RHS.party_id))
ORDER BY name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/party_host/0006,"limit(input0, 'desc(number_of_hosts)')","SELECT LOCATION
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_party
      ORDER BY number_of_hosts DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/party_host/0004,"filter(input0, ""party_theme != 'Spring' & party_theme != 'Teqnology'""), anti_join(input0, line0, ""'party_id'"")","SELECT `first_year`,
       `last_year`
FROM
  (SELECT *
   FROM `df_party` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_party`
           WHERE (`party_theme` != 'Spring'
                  AND `party_theme` != 'Teqnology')) AS RHS
        WHERE (LHS.party_id = RHS.party_id) ))
ORDER BY first_year;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/party_host/0012,"natural_join3(input0, input1, input2), inner_join(input0, line0, ""'number_of_hosts' = 'party_id','last_year' = 'first_year'"")","SELECT DISTINCT LOCATION
FROM
  (SELECT number_of_hosts AS party_id,
          party_theme,
          LOCATION,
          first_year,
          last_year,
          number_of_hosts,
          party_theme_other,
          location_other,
          last_year_other,
          number_of_hosts_other,
          host_id,
          name,
          nationality,
          age,
          is_main_in_charge
   FROM
     (SELECT LHS.party_id AS party_id,
             LHS.party_theme AS party_theme,
             LHS.location AS LOCATION,
             LHS.first_year AS first_year,
             LHS.last_year AS last_year,
             LHS.number_of_hosts AS number_of_hosts,
             RHS.party_theme AS party_theme_other,
             RHS.location AS location_other,
             RHS.last_year AS last_year_other,
             RHS.number_of_hosts AS number_of_hosts_other,
             RHS.host_id AS host_id,
             RHS.name AS name,
             RHS.nationality AS nationality,
             RHS.age AS age,
             RHS.is_main_in_charge AS is_main_in_charge
      FROM df_party AS LHS
      INNER JOIN
        (SELECT LHS.party_id AS party_id,
                LHS.party_theme AS party_theme,
                LHS.location AS LOCATION,
                LHS.first_year AS first_year,
                LHS.last_year AS last_year,
                LHS.number_of_hosts AS number_of_hosts,
                LHS.host_id AS host_id,
                LHS.name AS name,
                LHS.nationality AS nationality,
                LHS.age AS age,
                RHS.is_main_in_charge AS is_main_in_charge
         FROM
           (SELECT LHS.party_id AS party_id,
                   LHS.party_theme AS party_theme,
                   LHS.location AS LOCATION,
                   LHS.first_year AS first_year,
                   LHS.last_year AS last_year,
                   LHS.number_of_hosts AS number_of_hosts,
                   RHS.host_id AS host_id,
                   RHS.name AS name,
                   RHS.nationality AS nationality,
                   RHS.age AS age
            FROM df_party AS LHS
            CROSS JOIN df_host AS RHS) AS LHS
         INNER JOIN df_party_host AS RHS ON (LHS.party_id = RHS.party_id
                                             AND LHS.host_id = RHS.host_id)) AS RHS ON (LHS.number_of_hosts = RHS.party_id
                                                                                        AND LHS.last_year = RHS.first_year)))
ORDER BY LOCATION;",2,13,5,1,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0
spider/party_host/0015,"anti_join(input0, input1, '')","SELECT name
FROM
  (SELECT *
   FROM df_host AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_party_host AS RHS
        WHERE (LHS.host_id = RHS.host_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/party_host/0005,"summarise(input0, 'meannumber_of_hosts = mean(number_of_hosts, na.rm = T)', '')","SELECT meannumber_of_hosts AS avg_number_of_hosts_
FROM
  (SELECT AVG(number_of_hosts) AS meannumber_of_hosts
   FROM df_party)
ORDER BY avg_number_of_hosts_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/party_host/0007,"summarise(input0, 'n = n()', ""'host_id','nationality'""), summarise(line0, 'n = n()', ""'nationality'"")","SELECT nationality,
       n AS count___
FROM
  (SELECT nationality,
          COUNT() AS n
   FROM
     (SELECT host_id,
             nationality,
             COUNT() AS n
      FROM df_host
      GROUP BY host_id,
               nationality)
   GROUP BY nationality)
ORDER BY nationality;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/party_host/0001,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_party)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/party_host/0014,"limit(input0, 'desc(host_id)')","SELECT name,
       nationality
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_host
      ORDER BY host_id DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/party_host/0009,"filter(input0, 'age == 45L'), intersect(line0, line0, 'nationality')","SELECT nationality
FROM
  (SELECT nationality
   FROM df_host
   WHERE (age = 45) INTERSECT
     SELECT nationality
     FROM df_host WHERE (age = 45))
ORDER BY nationality;",2,9,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/party_host/0011,"natural_join(input0, input1), semi_join(line0, input2)","SELECT LOCATION,
       name
FROM
  (SELECT *
   FROM
     (SELECT LHS.party_id AS party_id,
             LHS.party_theme AS party_theme,
             LHS.location AS LOCATION,
             LHS.first_year AS first_year,
             LHS.last_year AS last_year,
             LHS.number_of_hosts AS number_of_hosts,
             RHS.host_id AS host_id,
             RHS.name AS name,
             RHS.nationality AS nationality,
             RHS.age AS age
      FROM df_party AS LHS
      CROSS JOIN df_host AS RHS) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_party_host AS RHS
        WHERE (LHS.party_id = RHS.party_id
               AND LHS.host_id = RHS.host_id) ))
ORDER BY LOCATION;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0
spider/party_host/0010,"natural_join(input0, input1), semi_join(line0, input2)","SELECT party_theme,
       name
FROM
  (SELECT *
   FROM
     (SELECT LHS.party_id AS party_id,
             LHS.party_theme AS party_theme,
             LHS.location AS LOCATION,
             LHS.first_year AS first_year,
             LHS.last_year AS last_year,
             LHS.number_of_hosts AS number_of_hosts,
             RHS.host_id AS host_id,
             RHS.name AS name,
             RHS.nationality AS nationality,
             RHS.age AS age
      FROM df_party AS LHS
      CROSS JOIN df_host AS RHS) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_party_host AS RHS
        WHERE (LHS.party_id = RHS.party_id
               AND LHS.host_id = RHS.host_id) ))
ORDER BY party_theme;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0
spider/school_player/0002,df_school,"SELECT LOCATION
FROM df_school
ORDER BY LOCATION;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_player/0008,"limit(input0, 'desc(age)')","SELECT team
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_player
      ORDER BY age DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_player/0003,df_school,"SELECT LOCATION
FROM df_school
ORDER BY LOCATION;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_player/0013,"natural_join(input0, input1)","SELECT LOCATION,
       nickname
FROM
  (SELECT LHS.school_id AS school_id,
          LHS.school AS school,
          LHS.location AS LOCATION,
          LHS.enrollment AS enrollment,
          LHS.founded AS founded,
          LHS.denomination AS denomination,
          LHS.boys_or_girls AS boys_or_girls,
          LHS.day_or_boarding AS day_or_boarding,
          LHS.year_entered_competition AS year_entered_competition,
          LHS.school_colors AS school_colors,
          RHS.nickname AS nickname,
          RHS.colors AS colors,
          RHS.league AS league,
          RHS.class AS CLASS,
          RHS.division AS division
   FROM df_school AS LHS
   INNER JOIN df_school_details AS RHS ON (LHS.school_id = RHS.school_id))
ORDER BY LOCATION;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/school_player/0006,df_player,"SELECT team
FROM df_player
ORDER BY team;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_player/0004,"filter(input0, ""denomination != 'Catholic'"")","SELECT `enrollment`
FROM `df_school`
WHERE (`denomination` != 'Catholic')
ORDER BY enrollment;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/school_player/0012,"summarise(input1, 'n = n()', ""'age','team'""), inner_join(input0, line0, ""'school_id' = 'n'"")","SELECT DISTINCT denomination
FROM
  (SELECT LHS.school_id AS school_id,
          LHS.school AS school,
          LHS.location AS LOCATION,
          LHS.enrollment AS enrollment,
          LHS.founded AS founded,
          LHS.denomination AS denomination,
          LHS.boys_or_girls AS boys_or_girls,
          LHS.day_or_boarding AS day_or_boarding,
          LHS.year_entered_competition AS year_entered_competition,
          LHS.school_colors AS school_colors,
          RHS.age AS age,
          RHS.team AS team
   FROM df_school AS LHS
   INNER JOIN
     (SELECT age,
             team,
             COUNT() AS n
      FROM df_player
      GROUP BY age,
               team) AS RHS ON (LHS.school_id = RHS.n))
ORDER BY denomination;",2,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/school_player/0015,"summarise(input0, 'n = n()', ""'denomination'"")","SELECT denomination,
       n AS count___
FROM
  (SELECT denomination,
          COUNT() AS n
   FROM df_school
   GROUP BY denomination)
ORDER BY denomination;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_player/0005,"summarise(input0, 'meanenrollment = mean(enrollment, na.rm = T)', '')","SELECT meanenrollment AS avg_enrollment_
FROM
  (SELECT AVG(enrollment) AS meanenrollment
   FROM df_school)
ORDER BY avg_enrollment_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_player/0016,"limit(input0, 'school')","SELECT school_colors
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_school
      ORDER BY school)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_player/0018,"filter(input0, 'founded < 1890 & founded <= 1900'), semi_join(line0, input0)","SELECT denomination
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_school
      WHERE (founded < 1890.0
             AND founded <= 1900.0)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_school AS RHS
        WHERE (LHS.school_id = RHS.school_id
               AND LHS.school = RHS.school
               AND LHS.location = RHS.location
               AND LHS.enrollment = RHS.enrollment
               AND LHS.founded = RHS.founded
               AND LHS.denomination = RHS.denomination
               AND LHS.boys_or_girls = RHS.boys_or_girls
               AND LHS.day_or_boarding = RHS.day_or_boarding
               AND LHS.year_entered_competition = RHS.year_entered_competition
               AND LHS.school_colors = RHS.school_colors) ))
ORDER BY denomination;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/school_player/0020,"summarise(input0, 'n = n()', ""'boys_or_girls','denomination'""), filter(line0, 'n != 1L'), mutate(line1, 'n = n()')","SELECT denomination
FROM
  (SELECT boys_or_girls,
          denomination,
          COUNT() AS n
   FROM df_school
   GROUP BY boys_or_girls,
            denomination)
WHERE (n != 1)
ORDER BY denomination;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/school_player/0019,"filter(input0, ""division != 'Division 1'"")","SELECT `nickname`
FROM `df_school_details`
WHERE (`division` != 'Division 1')
ORDER BY nickname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/school_player/0007,"summarise(input0, 'n_distinct = n_distinct(position)', '')","SELECT n_distinct AS count_distinct_position_
FROM
  (SELECT COUNT(DISTINCT POSITION) AS n_distinct
   FROM df_player)
ORDER BY count_distinct_position_;",1,6,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_player/0001,"summarise(input0, 'n = n()', ""'school','year_entered_competition'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT school,
          year_entered_competition,
          COUNT() AS n
   FROM df_school
   GROUP BY school,
            year_entered_competition)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/school_player/0014,"summarise(input0, 'n = n()', ""'denomination'"")","SELECT denomination,
       n AS count___
FROM
  (SELECT denomination,
          COUNT() AS n
   FROM df_school
   GROUP BY denomination)
ORDER BY denomination;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_player/0009,"limit(input0, 'desc(age)')","SELECT team
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_player
      ORDER BY age DESC)
   LIMIT 5);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_player/0011,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'location','school_colors'""), filter(line1, 'n != 1L')","SELECT LOCATION
FROM
  (SELECT LOCATION,
          school_colors,
          COUNT() AS n
   FROM
     (SELECT LHS.school_id AS school_id,
             LHS.school AS school,
             LHS.location AS LOCATION,
             LHS.enrollment AS enrollment,
             LHS.founded AS founded,
             LHS.denomination AS denomination,
             LHS.boys_or_girls AS boys_or_girls,
             LHS.day_or_boarding AS day_or_boarding,
             LHS.year_entered_competition AS year_entered_competition,
             LHS.school_colors AS school_colors,
             RHS.player_id AS player_id,
             RHS.player AS player,
             RHS.team AS team,
             RHS.age AS age,
             RHS.position AS POSITION
      FROM df_school AS LHS
      INNER JOIN df_player AS RHS ON (LHS.school_id = RHS.school_id))
   GROUP BY LOCATION,
            school_colors)
WHERE (n != 1)
ORDER BY LOCATION;",3,9,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/school_player/0010,"left_join(input1, input0)","SELECT team,
       LOCATION
FROM
  (SELECT LHS.player_id AS player_id,
          LHS.player AS player,
          LHS.team AS team,
          LHS.age AS age,
          LHS.position AS POSITION,
          LHS.school_id AS school_id,
          RHS.school AS school,
          RHS.location AS LOCATION,
          RHS.enrollment AS enrollment,
          RHS.founded AS founded,
          RHS.denomination AS denomination,
          RHS.boys_or_girls AS boys_or_girls,
          RHS.day_or_boarding AS day_or_boarding,
          RHS.year_entered_competition AS year_entered_competition,
          RHS.school_colors AS school_colors
   FROM df_player AS LHS
   LEFT JOIN df_school AS RHS ON (LHS.school_id = RHS.school_id))
ORDER BY team;",1,6,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
spider/customers_and_invoices/0037,"summarise(input0, 'n_distinct = n_distinct(order_id)', ""'other_order_item_details','product_id'"")","SELECT product_id,
       n_distinct AS count_distinct_order_id_
FROM
  (SELECT other_order_item_details,
          product_id,
          COUNT(DISTINCT order_id) AS n_distinct
   FROM df_order_items
   GROUP BY other_order_item_details,
            product_id)
ORDER BY product_id;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0002,"summarise(input0, 'n_distinct = n_distinct(customer_id)', ""'customer_id','other_account_details'""), summarise(line0, 'n_distinct = n_distinct(customer_id)', '')","SELECT n_distinct AS count_distinct_customer_id_
FROM
  (SELECT COUNT(DISTINCT customer_id) AS n_distinct
   FROM
     (SELECT customer_id,
             other_account_details,
             COUNT(DISTINCT customer_id) AS n_distinct
      FROM df_accounts
      GROUP BY customer_id,
               other_account_details))
ORDER BY count_distinct_customer_id_;",2,8,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0036,"summarise(input0, 'n = n()', ""'order_id'""), semi_join(line0, input0)","SELECT order_id,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT order_id,
             COUNT() AS n
      FROM df_order_items
      GROUP BY order_id) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_order_items AS RHS
        WHERE (LHS.order_id = RHS.order_id) ))
ORDER BY order_id;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/customers_and_invoices/0017,"summarise(input0, 'n = n()', ""'transaction_comment','transaction_date'""), inner_join(input0, line0, ""'transaction_id' = 'n'""), summarise(line1, 'n = n()', ""'account_id','transaction_comment'"")","SELECT n AS count___,
       account_id
FROM
  (SELECT account_id,
          transaction_comment,
          COUNT() AS n
   FROM
     (SELECT transaction_id,
             account_id,
             invoice_number,
             transaction_type,
             transaction_date,
             transaction_amount,
             transaction_comment,
             other_transaction_details,
             transaction_comment_other,
             transaction_date_other,
             transaction_id AS n
      FROM
        (SELECT LHS.transaction_id AS transaction_id,
                LHS.account_id AS account_id,
                LHS.invoice_number AS invoice_number,
                LHS.transaction_type AS transaction_type,
                LHS.transaction_date AS transaction_date,
                LHS.transaction_amount AS transaction_amount,
                LHS.transaction_comment AS transaction_comment,
                LHS.other_transaction_details AS other_transaction_details,
                RHS.transaction_comment AS transaction_comment_other,
                RHS.transaction_date AS transaction_date_other
         FROM df_financial_transactions AS LHS
         INNER JOIN
           (SELECT transaction_comment,
                   transaction_date,
                   COUNT() AS n
            FROM df_financial_transactions
            GROUP BY transaction_comment,
                     transaction_date) AS RHS ON (LHS.transaction_id = RHS.n)))
   GROUP BY account_id,
            transaction_comment)
ORDER BY count___;",3,11,5,0,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0008,"semi_join(input0, input1)","SELECT customer_first_name,
       customer_last_name,
       phone_number
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_accounts AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_first_name;",1,9,3,0,3,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
spider/customers_and_invoices/0039,"summarise(input0, 'n_distinct = n_distinct(product_id)', ""'order_id','other_order_item_details'""), anti_join(line0, input0, ""'order_id','other_order_item_details'"")","SELECT order_id,
       n_distinct AS count_distinct_product_id_
FROM
  (SELECT *
   FROM
     (SELECT order_id,
             other_order_item_details,
             COUNT(DISTINCT product_id) AS n_distinct
      FROM df_order_items
      GROUP BY order_id,
               other_order_item_details) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_order_items AS RHS
        WHERE (LHS.order_id = RHS.order_id
               AND LHS.other_order_item_details = RHS.other_order_item_details) ))
ORDER BY order_id;",2,13,4,1,4,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
spider/customers_and_invoices/0038,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'product_id','product_name'"")","SELECT product_name,
       n AS count___
FROM
  (SELECT product_id,
          product_name,
          COUNT() AS n
   FROM
     (SELECT LHS.order_id AS order_id,
             LHS.customer_id AS customer_id,
             LHS.date_order_placed AS date_order_placed,
             LHS.order_details AS order_details,
             LHS.product_id AS product_id,
             LHS.parent_product_id AS parent_product_id,
             LHS.production_type_code AS production_type_code,
             LHS.unit_price AS unit_price,
             LHS.product_name AS product_name,
             LHS.product_color AS product_color,
             LHS.product_size AS product_size,
             RHS.order_item_id AS order_item_id,
             RHS.product_quantity AS product_quantity,
             RHS.other_order_item_details AS other_order_item_details
      FROM
        (SELECT LHS.order_id AS order_id,
                LHS.customer_id AS customer_id,
                LHS.date_order_placed AS date_order_placed,
                LHS.order_details AS order_details,
                RHS.product_id AS product_id,
                RHS.parent_product_id AS parent_product_id,
                RHS.production_type_code AS production_type_code,
                RHS.unit_price AS unit_price,
                RHS.product_name AS product_name,
                RHS.product_color AS product_color,
                RHS.product_size AS product_size
         FROM df_orders AS LHS
         CROSS JOIN df_products AS RHS) AS LHS
      INNER JOIN df_order_items AS RHS ON (LHS.order_id = RHS.order_id
                                           AND LHS.product_id = RHS.product_id))
   GROUP BY product_id,
            product_name)
ORDER BY product_name;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
spider/customers_and_invoices/0027,"summarise(input0, 'n = n()', ""'invoice_number','transaction_date'""), summarise(line0, 'n = n()', ""'invoice_number'"")","SELECT invoice_number,
       n AS count___
FROM
  (SELECT invoice_number,
          COUNT() AS n
   FROM
     (SELECT invoice_number,
             transaction_date,
             COUNT() AS n
      FROM df_financial_transactions
      GROUP BY invoice_number,
               transaction_date)
   GROUP BY invoice_number)
ORDER BY invoice_number;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0022,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'account_id','account_name'"")","SELECT account_name,
       account_id,
       n AS count___
FROM
  (SELECT account_id,
          account_name,
          COUNT() AS n
   FROM
     (SELECT LHS.account_id AS account_id,
             LHS.customer_id AS customer_id,
             LHS.date_account_opened AS date_account_opened,
             LHS.account_name AS account_name,
             LHS.other_account_details AS other_account_details,
             RHS.transaction_id AS transaction_id,
             RHS.invoice_number AS invoice_number,
             RHS.transaction_type AS transaction_type,
             RHS.transaction_date AS transaction_date,
             RHS.transaction_amount AS transaction_amount,
             RHS.transaction_comment AS transaction_comment,
             RHS.other_transaction_details AS other_transaction_details
      FROM df_accounts AS LHS
      INNER JOIN df_financial_transactions AS RHS ON (LHS.account_id = RHS.account_id))
   GROUP BY account_id,
            account_name)
ORDER BY account_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0030,"natural_join(input0, input1), left_join(input1, line0)","SELECT invoice_date,
       order_id,
       order_details
FROM
  (SELECT LHS.invoice_number AS invoice_number,
          LHS.order_id AS order_id,
          LHS.invoice_date AS invoice_date,
          RHS.customer_id AS customer_id,
          RHS.date_order_placed AS date_order_placed,
          RHS.order_details AS order_details
   FROM df_invoices AS LHS
   LEFT JOIN
     (SELECT LHS.order_id AS order_id,
             LHS.customer_id AS customer_id,
             LHS.date_order_placed AS date_order_placed,
             LHS.order_details AS order_details,
             RHS.invoice_number AS invoice_number,
             RHS.invoice_date AS invoice_date
      FROM df_orders AS LHS
      INNER JOIN df_invoices AS RHS ON (LHS.order_id = RHS.order_id)) AS RHS ON (LHS.invoice_number = RHS.invoice_number
                                                                                 AND LHS.order_id = RHS.order_id
                                                                                 AND LHS.invoice_date = RHS.invoice_date))
ORDER BY invoice_date;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
spider/customers_and_invoices/0013,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'customer_first_name','customer_id'""), filter(line1, 'n >= 2L')","SELECT customer_first_name,
       customer_id
FROM
  (SELECT customer_first_name,
          customer_id,
          COUNT() AS n
   FROM
     (SELECT LHS.customer_id AS customer_id,
             LHS.customer_first_name AS customer_first_name,
             LHS.customer_middle_initial AS customer_middle_initial,
             LHS.customer_last_name AS customer_last_name,
             LHS.gender AS gender,
             LHS.email_address AS email_address,
             LHS.login_name AS login_name,
             LHS.login_password AS login_password,
             LHS.phone_number AS phone_number,
             LHS.town_city AS town_city,
             LHS.state_county_province AS state_county_province,
             LHS.country AS country,
             RHS.account_id AS account_id,
             RHS.date_account_opened AS date_account_opened,
             RHS.account_name AS account_name,
             RHS.other_account_details AS other_account_details
      FROM df_customers AS LHS
      INNER JOIN df_accounts AS RHS ON (LHS.customer_id = RHS.customer_id))
   GROUP BY customer_first_name,
            customer_id)
WHERE (n >= 2)
ORDER BY customer_first_name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0006,"filter(input1, 'account_name == 900L'), natural_join(input0, line0)","SELECT customer_first_name,
       customer_last_name
FROM
  (SELECT LHS.customer_id AS customer_id,
          LHS.customer_first_name AS customer_first_name,
          LHS.customer_middle_initial AS customer_middle_initial,
          LHS.customer_last_name AS customer_last_name,
          LHS.gender AS gender,
          LHS.email_address AS email_address,
          LHS.login_name AS login_name,
          LHS.login_password AS login_password,
          LHS.phone_number AS phone_number,
          LHS.town_city AS town_city,
          LHS.state_county_province AS state_county_province,
          LHS.country AS country,
          RHS.account_id AS account_id,
          RHS.date_account_opened AS date_account_opened,
          RHS.account_name AS account_name,
          RHS.other_account_details AS other_account_details
   FROM df_customers AS LHS
   INNER JOIN
     (SELECT *
      FROM df_accounts
      WHERE (account_name = 900)) AS RHS ON (LHS.customer_id = RHS.customer_id))
ORDER BY customer_first_name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0004,"filter(input0, ""customer_first_name == 'Meaghan'""), semi_join(input1, line0)","SELECT `account_id`,
       `date_account_opened`,
       `account_name`,
       `other_account_details`
FROM
  (SELECT *
   FROM `df_accounts` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customers`
           WHERE (`customer_first_name` = 'Meaghan')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY account_id;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/customers_and_invoices/0026,"intersect(input0, input0, 'product_color')","SELECT product_color
FROM
  (SELECT product_color
   FROM df_products INTERSECT SELECT product_color
   FROM df_products)
ORDER BY product_color;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/customers_and_invoices/0015,"summarise(input0, 'n = n()', ""'customer_last_name','gender'""), summarise(line0, 'n = n()', ""'gender'"")","SELECT gender,
       n AS count___
FROM
  (SELECT gender,
          COUNT() AS n
   FROM
     (SELECT customer_last_name,
             gender,
             COUNT() AS n
      FROM df_customers
      GROUP BY customer_last_name,
               gender)
   GROUP BY gender)
ORDER BY gender;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0005,"filter(input0, ""customer_first_name == 'Meaghan' | customer_last_name == 'Keeling'""), semi_join(input1, line0)","SELECT `account_name`,
       `other_account_details`
FROM
  (SELECT *
   FROM `df_accounts` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customers`
           WHERE (`customer_first_name` = 'Meaghan'
                  OR `customer_last_name` = 'Keeling')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY account_name;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/customers_and_invoices/0016,"summarise(input0, 'n = n()', ""'transaction_comment'"")","SELECT n AS count___
FROM
  (SELECT transaction_comment,
          COUNT() AS n
   FROM df_financial_transactions
   GROUP BY transaction_comment)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0032,"summarise(input1, 'n = n()', ""'order_id'""), filter(line0, 'n > 2L'), inner_join(input0, line1, ""'order_id' = 'n'"")","SELECT order_id_other AS order_id,
       order_details
FROM
  (SELECT LHS.order_id AS order_id,
          LHS.customer_id AS customer_id,
          LHS.date_order_placed AS date_order_placed,
          LHS.order_details AS order_details,
          RHS.order_id AS order_id_other
   FROM df_orders AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT order_id,
                COUNT() AS n
         FROM df_invoices
         GROUP BY order_id)
      WHERE (n > 2)) AS RHS ON (LHS.order_id = RHS.n))
ORDER BY order_id;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0018,"filter(input0, 'account_name != 337L'), anti_join(input1, line0, ''), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT *
   FROM df_financial_transactions AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_accounts
           WHERE (account_name != 337)) AS RHS
        WHERE (LHS.account_id = RHS.account_id) ))
ORDER BY count___;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/customers_and_invoices/0041,"anti_join(input0, input1, ""'product_id'""), mutate(line0, 'n_distinct = n_distinct(product_id)')","SELECT DISTINCT COUNT(DISTINCT product_id) OVER () AS count___
FROM
  (SELECT *
   FROM df_products AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_order_items AS RHS
        WHERE (LHS.product_id = RHS.product_id) ))
ORDER BY count___;",2,13,3,2,3,0,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
spider/customers_and_invoices/0020,"mutate(input0, 'meantransaction_amount = mean(transaction_amount, na.rm = T)'), filter(line0, 'meantransaction_amount <= transaction_amount')","SELECT transaction_id
FROM
  (SELECT transaction_id,
          account_id,
          invoice_number,
          transaction_type,
          transaction_date,
          transaction_amount,
          transaction_comment,
          other_transaction_details,
          AVG(transaction_amount) OVER () AS meantransaction_amount
   FROM df_financial_transactions)
WHERE (meantransaction_amount <= transaction_amount)
ORDER BY transaction_id;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0007,"anti_join(input0, input1, ""'customer_id'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT *
      FROM df_customers AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM df_accounts AS RHS
           WHERE (LHS.customer_id = RHS.customer_id) )))
ORDER BY count___;",2,12,4,0,4,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
spider/customers_and_invoices/0034,"anti_join(input0, input1, '')","SELECT product_name
FROM
  (SELECT *
   FROM df_products AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_order_items AS RHS
        WHERE (LHS.product_id = RHS.product_id) ))
ORDER BY product_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/customers_and_invoices/0024,"summarise(input1, 'n = n()', ""'account_id'""), filter(line0, 'n >= 4L'), natural_join(input0, line1)","SELECT account_id,
       account_name
FROM
  (SELECT LHS.account_id AS account_id,
          LHS.customer_id AS customer_id,
          LHS.date_account_opened AS date_account_opened,
          LHS.account_name AS account_name,
          LHS.other_account_details AS other_account_details,
          RHS.n AS n
   FROM df_accounts AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT account_id,
                COUNT() AS n
         FROM df_financial_transactions
         GROUP BY account_id)
      WHERE (n >= 4)) AS RHS ON (LHS.account_id = RHS.account_id))
ORDER BY account_id;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0021,"summarise(input0, 'sumtransaction_amount = sum(transaction_amount)', ""'transaction_amount','transaction_type'""), summarise(line0, 'sumtransaction_amount = sum(transaction_amount)', ""'transaction_type'"")","SELECT transaction_type,
       sumtransaction_amount AS sum_transaction_amount_
FROM
  (SELECT transaction_type,
          SUM(transaction_amount) AS sumtransaction_amount
   FROM
     (SELECT transaction_amount,
             transaction_type,
             SUM(transaction_amount) AS sumtransaction_amount
      FROM df_financial_transactions
      GROUP BY transaction_amount,
               transaction_type)
   GROUP BY transaction_type)
ORDER BY transaction_type;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0023,"summarise(input0, 'n = n()', ""'invoice_number','other_transaction_details'""), summarise(line0, 'n = n()', ""'other_transaction_details'"")","SELECT n AS account_id
FROM
  (SELECT other_transaction_details,
          COUNT() AS n
   FROM
     (SELECT invoice_number,
             other_transaction_details,
             COUNT() AS n
      FROM df_financial_transactions
      GROUP BY invoice_number,
               other_transaction_details)
   GROUP BY other_transaction_details)
ORDER BY account_id;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0001,"summarise(input0, 'n = n()', ""'account_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT account_id,
          COUNT() AS n
   FROM df_accounts
   GROUP BY account_id)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0014,"summarise(input0, 'n = n()', ""'customer_first_name','customer_last_name'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT customer_first_name,
             customer_last_name,
             COUNT() AS n
      FROM df_customers
      GROUP BY customer_first_name,
               customer_last_name))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0009,"anti_join(input0, input1, '')","SELECT customer_id
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_accounts AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_id;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/customers_and_invoices/0025,"intersect(input0, input0, 'product_size')","SELECT product_size
FROM
  (SELECT product_size
   FROM df_products INTERSECT SELECT product_size
   FROM df_products)
ORDER BY product_size;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/customers_and_invoices/0011,"mutate(input0, 'n = n()'), natural_join3(input0, input1, line0), limit(line1, 'phone_number')","SELECT customer_id,
       customer_first_name,
       customer_last_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.customer_first_name AS customer_first_name,
                LHS.customer_middle_initial AS customer_middle_initial,
                LHS.customer_last_name AS customer_last_name,
                LHS.gender AS gender,
                LHS.email_address AS email_address,
                LHS.login_name AS login_name,
                LHS.login_password AS login_password,
                LHS.phone_number AS phone_number,
                LHS.town_city AS town_city,
                LHS.state_county_province AS state_county_province,
                LHS.country AS country,
                LHS.account_id AS account_id,
                LHS.date_account_opened AS date_account_opened,
                LHS.account_name AS account_name,
                LHS.other_account_details AS other_account_details,
                RHS.n AS n
         FROM
           (SELECT LHS.customer_id AS customer_id,
                   LHS.customer_first_name AS customer_first_name,
                   LHS.customer_middle_initial AS customer_middle_initial,
                   LHS.customer_last_name AS customer_last_name,
                   LHS.gender AS gender,
                   LHS.email_address AS email_address,
                   LHS.login_name AS login_name,
                   LHS.login_password AS login_password,
                   LHS.phone_number AS phone_number,
                   LHS.town_city AS town_city,
                   LHS.state_county_province AS state_county_province,
                   LHS.country AS country,
                   RHS.account_id AS account_id,
                   RHS.date_account_opened AS date_account_opened,
                   RHS.account_name AS account_name,
                   RHS.other_account_details AS other_account_details
            FROM df_customers AS LHS
            INNER JOIN df_accounts AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
         INNER JOIN
           (SELECT customer_id,
                   customer_first_name,
                   customer_middle_initial,
                   customer_last_name,
                   gender,
                   email_address,
                   login_name,
                   login_password,
                   phone_number,
                   town_city,
                   state_county_province,
                   country,
                   COUNT(*) OVER () AS n
            FROM df_customers) AS RHS ON (LHS.customer_id = RHS.customer_id
                                          AND LHS.customer_first_name = RHS.customer_first_name
                                          AND LHS.customer_middle_initial = RHS.customer_middle_initial
                                          AND LHS.customer_last_name = RHS.customer_last_name
                                          AND LHS.gender = RHS.gender
                                          AND LHS.email_address = RHS.email_address
                                          AND LHS.login_name = RHS.login_name
                                          AND LHS.login_password = RHS.login_password
                                          AND LHS.phone_number = RHS.phone_number
                                          AND LHS.town_city = RHS.town_city
                                          AND LHS.state_county_province = RHS.state_county_province
                                          AND LHS.country = RHS.country))
      ORDER BY phone_number)
   LIMIT 1);",2,16,6,0,6,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
spider/customers_and_invoices/0029,"summarise(input0, 'n = n()', ""'invoice_date','order_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT invoice_date,
          order_id,
          COUNT() AS n
   FROM df_invoices
   GROUP BY invoice_date,
            order_id)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0010,"summarise(input0, 'n = n()', ""'customer_id'""), semi_join(line0, input0)","SELECT n AS count___,
       customer_id
FROM
  (SELECT *
   FROM
     (SELECT customer_id,
             COUNT() AS n
      FROM df_accounts
      GROUP BY customer_id) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_accounts AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY count___;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/customers_and_invoices/0028,"summarise(input1, 'n = n()', ""'invoice_number','transaction_type'""), inner_join(line0, input0, ""'invoice_number' = 'invoice_number','n' = 'order_id'"")","SELECT invoice_number,
       invoice_date
FROM
  (SELECT LHS.invoice_number AS invoice_number,
          LHS.transaction_type AS transaction_type,
          LHS.n AS n,
          RHS.invoice_date AS invoice_date
   FROM
     (SELECT invoice_number,
             transaction_type,
             COUNT() AS n
      FROM df_financial_transactions
      GROUP BY invoice_number,
               transaction_type) AS LHS
   INNER JOIN df_invoices AS RHS ON (LHS.invoice_number = RHS.invoice_number
                                     AND LHS.n = RHS.order_id))
ORDER BY invoice_number;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/customers_and_invoices/0031,"summarise(input0, 'n = n()', ""'invoice_number','order_id'""), summarise(line0, 'n = n()', ""'order_id'"")","SELECT order_id,
       n AS count___
FROM
  (SELECT order_id,
          COUNT() AS n
   FROM
     (SELECT invoice_number,
             order_id,
             COUNT() AS n
      FROM df_invoices
      GROUP BY invoice_number,
               order_id)
   GROUP BY order_id)
ORDER BY order_id;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/ship_1/0002,"summarise(input0, 'n = n()', ""'rank'"")","SELECT n AS count___,
       rank
FROM
  (SELECT rank,
          COUNT() AS n
   FROM df_captain
   GROUP BY rank)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/ship_1/0017,df_ship,"SELECT name
FROM df_ship
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/ship_1/0008,"filter(input0, ""rank == 'Midshipman' | rank == 'Lieutenant'"")","SELECT `name`
FROM `df_captain`
WHERE (`rank` = 'Midshipman'
       OR `rank` = 'Lieutenant')
ORDER BY name;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/ship_1/0022,"inner_join(input0, input1, ""'captain_id' = 'ship_id'""), limit(line0, 'age')","SELECT name_other AS name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT captain_id,
                name,
                captain_id AS ship_id,
                age,
                CLASS,
                rank,
                name_other,
                TYPE,
                built_year,
                class_other,
                flag
         FROM
           (SELECT LHS.captain_id AS captain_id,
                   LHS.name AS name,
                   LHS.ship_id AS ship_id,
                   LHS.age AS age,
                   LHS.class AS CLASS,
                   LHS.rank AS rank,
                   RHS.name AS name_other,
                   RHS.type AS TYPE,
                   RHS.built_year AS built_year,
                   RHS.class AS class_other,
                   RHS.flag AS flag
            FROM df_captain AS LHS
            INNER JOIN df_ship AS RHS ON (LHS.captain_id = RHS.ship_id)))
      ORDER BY age)
   LIMIT 1);",1,12,5,0,5,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/ship_1/0013,"summarise(input0, 'n = n()', ""'name'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT name,
          COUNT() AS n
   FROM df_ship
   GROUP BY name)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/ship_1/0006,"summarise(input0, 'n = n()', ""'name','rank'""), limit(line0, 'n')","SELECT rank
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT name,
                rank,
                COUNT() AS n
         FROM df_captain
         GROUP BY name,
                  rank)
      ORDER BY n)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/ship_1/0004,"intersect(input0, input0, 'name')","SELECT name
FROM
  (SELECT name
   FROM df_captain INTERSECT SELECT name
   FROM df_captain)
ORDER BY name;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/ship_1/0012,"limit(input0, 'desc(ship_id)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_captain
      ORDER BY ship_id DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/ship_1/0015,"summarise(input0, 'n = n()', ""'flag'"")","SELECT n AS count___,
       flag
FROM
  (SELECT flag,
          COUNT() AS n
   FROM df_ship
   GROUP BY flag)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/ship_1/0005,df_captain,"SELECT name,
       CLASS,
       rank
FROM df_captain
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/ship_1/0016,"summarise(input0, 'n = n()', ""'flag','ship_id'""), limit(line0, 'desc(flag)')","SELECT flag
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT flag,
                ship_id,
                COUNT() AS n
         FROM df_ship
         GROUP BY flag,
                  ship_id)
      ORDER BY flag DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/ship_1/0018,"filter(input0, ""flag != 'Panama' & flag == 'Malta'""), semi_join(line0, input0)","SELECT `type`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_ship`
      WHERE (`flag` != 'Panama'
             AND `flag` = 'Malta')) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_ship AS RHS
        WHERE (LHS.ship_id = RHS.ship_id
               AND LHS.name = RHS.name
               AND LHS.type = RHS.type
               AND LHS.built_year = RHS.built_year
               AND LHS.class = RHS.class
               AND LHS.flag = RHS.flag) ))
ORDER BY TYPE;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/ship_1/0020,"summarise(input0, 'n = n()', ""'ship_id'""), filter(line0, 'n != 1L'), natural_join3(input1, line0, line1)","SELECT name
FROM
  (SELECT LHS.ship_id AS ship_id,
          LHS.name AS name,
          LHS.type AS TYPE,
          LHS.built_year AS built_year,
          LHS.class AS CLASS,
          LHS.flag AS flag,
          LHS.n AS n
   FROM
     (SELECT LHS.ship_id AS ship_id,
             LHS.name AS name,
             LHS.type AS TYPE,
             LHS.built_year AS built_year,
             LHS.class AS CLASS,
             LHS.flag AS flag,
             RHS.n AS n
      FROM df_ship AS LHS
      INNER JOIN
        (SELECT ship_id,
                COUNT() AS n
         FROM df_captain
         GROUP BY ship_id) AS RHS ON (LHS.ship_id = RHS.ship_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT ship_id,
                COUNT() AS n
         FROM df_captain
         GROUP BY ship_id)
      WHERE (n != 1)) AS RHS ON (LHS.ship_id = RHS.ship_id
                                 AND LHS.n = RHS.n))
ORDER BY name;",3,15,6,0,6,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/ship_1/0019,"summarise(input0, 'n = n()', ""'built_year','type'""), limit(line0, 'desc(type)')","SELECT built_year
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT built_year,
                TYPE,
                COUNT() AS n
         FROM df_ship
         GROUP BY built_year,
                  TYPE)
      ORDER BY TYPE DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/ship_1/0007,"summarise(input0, 'n = n()', ""'class'""), filter(line0, 'n >= 2L'), mutate(line1, 'n = n()')","SELECT CLASS
FROM
  (SELECT CLASS,
          COUNT() AS n
   FROM df_captain
   GROUP BY CLASS)
WHERE (n >= 2)
ORDER BY CLASS;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/ship_1/0021,"anti_join(input1, input0, ""'ship_id'"")","SELECT name,
       CLASS
FROM
  (SELECT *
   FROM df_ship AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_captain AS RHS
        WHERE (LHS.ship_id = RHS.ship_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/ship_1/0023,"filter(input0, ""rank == 'Midshipman'""), anti_join(input1, line0, ""'ship_id'"")","SELECT `name`,
       `flag`
FROM
  (SELECT *
   FROM `df_ship` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_captain`
           WHERE (`rank` = 'Midshipman')) AS RHS
        WHERE (LHS.ship_id = RHS.ship_id) ))
ORDER BY name;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/ship_1/0001,"summarise(input0, 'n_distinct = n_distinct(rank)', '')","SELECT n_distinct AS count_distinct_rank_
FROM
  (SELECT COUNT(DISTINCT rank) AS n_distinct
   FROM df_captain)
ORDER BY count_distinct_rank_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/ship_1/0014,"limit(input0, 'desc(built_year)')","SELECT name,
       TYPE,
       flag
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_ship
      ORDER BY built_year DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/ship_1/0011,"filter(input0, ""class == 'Third-rate ship of the line'""), anti_join(input0, line0, ""'rank'""), filter(line1, ""class != 'Third-rate ship of the line'"")","SELECT `rank`
FROM
  (SELECT *
   FROM `df_captain` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_captain`
           WHERE (`class` = 'Third-rate ship of the line')) AS `RHS`
        WHERE (`LHS`.`rank` = `RHS`.`rank`) ))
WHERE (`class` != 'Third-rate ship of the line')
ORDER BY rank;",3,14,4,0,4,0,4,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0
spider/ship_1/0010,"filter(input0, ""class == 'Cutter' | class == 'Armed schooner'""), intersect(line0, line0, 'rank')","SELECT `rank`
FROM
  (SELECT `rank`
   FROM `df_captain`
   WHERE (`class` = 'Cutter'
          OR `class` = 'Armed schooner') INTERSECT
     SELECT `rank`
     FROM `df_captain` WHERE (`class` = 'Cutter'
                              OR `class` = 'Armed schooner'))
ORDER BY rank;",2,11,3,0,3,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/baseball_1/0017,"filter(input0, 'year <= 1960L & year >= 1961L'), anti_join(input1, line0, '')","SELECT DISTINCT name_first,
                name_last
FROM
  (SELECT *
   FROM df_player AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_player_award
           WHERE (YEAR <= 1960
                  AND YEAR >= 1961)) AS RHS
        WHERE (LHS.player_id = RHS.player_id) ))
ORDER BY name_first;",2,16,4,1,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/baseball_1/0039,"summarise(input0, 'n = n()', ""'active'""), filter(line0, ""active == 'Y'"")","SELECT `n` AS `count___`
FROM
  (SELECT `active`,
          COUNT() AS `n`
   FROM `df_team_franchise`
   GROUP BY `active`)
WHERE (`active` = 'Y')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/baseball_1/0038,"summarise(input0, 'n = n()', ""'country','state'""), filter(line0, 'n > 2L'), mutate(line1, 'n = n()')","SELECT state
FROM
  (SELECT country,
          state,
          COUNT() AS n
   FROM df_park
   GROUP BY country,
            state)
WHERE (n > 2)
ORDER BY state;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/baseball_1/0003,"filter(input0, 'year <= 1998L'), filter(line0, 'year == 1998L'), semi_join(input1, line1)","SELECT name_first,
       name_last
FROM
  (SELECT *
   FROM df_player AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT *
              FROM df_all_star
              WHERE (YEAR <= 1998))
           WHERE (YEAR = 1998)) AS RHS
        WHERE (LHS.player_id = RHS.player_id) ))
ORDER BY name_first;",3,17,5,0,5,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,0,0,0
spider/baseball_1/0027,"filter(input0, 'year == 2001L & year > 3L'), limit(line0, 'desc(salary)')","SELECT salary
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM df_salary
         WHERE (YEAR = 2001
                AND YEAR > 3))
      ORDER BY salary DESC)
   LIMIT 3);",1,13,4,0,4,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/baseball_1/0030,"filter(input0, ""city == 'Atlanta'""), summarise(line0, 'n = n()', ""'park_alias','state'"")","SELECT `n` AS `count___`
FROM
  (SELECT `park_alias`,
          `state`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_park`
      WHERE (`city` = 'Atlanta'))
   GROUP BY park_alias,
            state)
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/baseball_1/0013,"summarise(input0, 'n = n()', ""'bats','birth_country'""), filter(line0, ""birth_country == 'USA' & bats == 'R'"")","SELECT `n` AS `count___`
FROM
  (SELECT `bats`,
          `birth_country`,
          COUNT() AS `n`
   FROM `df_player`
   GROUP BY `bats`,
            `birth_country`)
WHERE (`birth_country` = 'USA'
       AND `bats` = 'R')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/baseball_1/0006,"summarise(input0, 'meanattendance = mean(attendance, na.rm = T)', ""'year'""), semi_join(line0, input0)","SELECT YEAR,
       meanattendance AS avg_attendance_
FROM
  (SELECT *
   FROM
     (SELECT YEAR,
             AVG(attendance) AS meanattendance
      FROM df_home_game
      GROUP BY YEAR) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_home_game AS RHS
        WHERE (LHS.year = RHS.year) ))
ORDER BY YEAR;",2,15,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/baseball_1/0005,"summarise(input0, 'n = n()', ""'yearid'"")","SELECT yearid,
       n AS count___
FROM
  (SELECT yearid,
          COUNT() AS n
   FROM df_hall_of_fame
   GROUP BY yearid)
ORDER BY yearid;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/baseball_1/0032,"natural_join(input0, input1), filter(line0, ""city == 'Atlanta' | year == 2000L""), summarise(line1, 'n_distinct = n_distinct(city)', ""'park_name','span_last'"")","SELECT DISTINCT `n_distinct` AS `count___`
FROM
  (SELECT `park_name`,
          `span_last`,
          COUNT(DISTINCT `city`) AS `n_distinct`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`year` AS `year`,
                `LHS`.`league_id` AS `league_id`,
                `LHS`.`team_id` AS `team_id`,
                `LHS`.`park_id` AS `park_id`,
                `LHS`.`span_first` AS `span_first`,
                `LHS`.`span_last` AS `span_last`,
                `LHS`.`games` AS `games`,
                `LHS`.`openings` AS `openings`,
                `LHS`.`attendance` AS `attendance`,
                `RHS`.`park_name` AS `park_name`,
                `RHS`.`park_alias` AS `park_alias`,
                `RHS`.`city` AS `city`,
                `RHS`.`state` AS `state`,
                `RHS`.`country` AS `country`
         FROM `df_home_game` AS `LHS`
         INNER JOIN `df_park` AS `RHS` ON (`LHS`.`park_id` = `RHS`.`park_id`))
      WHERE (`city` = 'Atlanta'
             OR YEAR = 2000))
   GROUP BY park_name,
            span_last)
ORDER BY count___;",3,14,4,2,4,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/baseball_1/0020,"anti_join(input1, input0, ''), filter(line0, ""name == 'Boston Red Stockings' & year < 2009L""), summarise(line1, 'n_distinct = n_distinct(year)', ""'ghome','team_id_retro'"")","SELECT `n_distinct` AS `count___`
FROM
  (SELECT `ghome`,
          `team_id_retro`,
          COUNT(DISTINCT `year`) AS `n_distinct`
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM `df_team` AS `LHS`
         WHERE NOT EXISTS
             (SELECT 1
              FROM `df_postseason` AS `RHS`
              WHERE (`LHS`.`year` = `RHS`.`year`) ))
      WHERE (`name` = 'Boston Red Stockings'
             AND YEAR < 2009))
   GROUP BY ghome,
            team_id_retro)
ORDER BY count___;",3,17,5,1,5,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0
spider/baseball_1/0019,"natural_join(input0, input1), mutate(line0, 'maxwins = max(wins)'), filter(line1, ""name != 'Boston Red Stockings' & maxwins == wins"")","SELECT DISTINCT `losses` AS `max_t1_wins_`
FROM
  (SELECT `year`,
          `round`,
          `team_id_winner`,
          `league_id_winner`,
          `team_id_loser`,
          `league_id_loser`,
          `wins`,
          `losses`,
          `ties`,
          `league_id`,
          `team_id`,
          `franchise_id`,
          `div_id`,
          `rank`,
          `g`,
          `ghome`,
          `w`,
          `l`,
          `div_win`,
          `wc_win`,
          `lg_win`,
          `ws_win`,
          `r`,
          `ab`,
          `h`,
          `double`,
          `triple`,
          `hr`,
          `bb`,
          `so`,
          `sb`,
          `cs`,
          `hbp`,
          `sf`,
          `ra`,
          `er`,
          `era`,
          `cg`,
          `sho`,
          `sv`,
          `ipouts`,
          `ha`,
          `hra`,
          `bba`,
          `soa`,
          `e`,
          `dp`,
          `fp`,
          `name`,
          `park`,
          `attendance`,
          `bpf`,
          `ppf`,
          `team_id_br`,
          `team_id_lahman45`,
          `team_id_retro`,
          MAX(`wins`) OVER () AS `maxwins`
   FROM
     (SELECT `LHS`.`year` AS `year`,
             `LHS`.`round` AS `round`,
             `LHS`.`team_id_winner` AS `team_id_winner`,
             `LHS`.`league_id_winner` AS `league_id_winner`,
             `LHS`.`team_id_loser` AS `team_id_loser`,
             `LHS`.`league_id_loser` AS `league_id_loser`,
             `LHS`.`wins` AS `wins`,
             `LHS`.`losses` AS `losses`,
             `LHS`.`ties` AS `ties`,
             `RHS`.`league_id` AS `league_id`,
             `RHS`.`team_id` AS `team_id`,
             `RHS`.`franchise_id` AS `franchise_id`,
             `RHS`.`div_id` AS `div_id`,
             `RHS`.`rank` AS `rank`,
             `RHS`.`g` AS `g`,
             `RHS`.`ghome` AS `ghome`,
             `RHS`.`w` AS `w`,
             `RHS`.`l` AS `l`,
             `RHS`.`div_win` AS `div_win`,
             `RHS`.`wc_win` AS `wc_win`,
             `RHS`.`lg_win` AS `lg_win`,
             `RHS`.`ws_win` AS `ws_win`,
             `RHS`.`r` AS `r`,
             `RHS`.`ab` AS `ab`,
             `RHS`.`h` AS `h`,
             `RHS`.`double` AS `double`,
             `RHS`.`triple` AS `triple`,
             `RHS`.`hr` AS `hr`,
             `RHS`.`bb` AS `bb`,
             `RHS`.`so` AS `so`,
             `RHS`.`sb` AS `sb`,
             `RHS`.`cs` AS `cs`,
             `RHS`.`hbp` AS `hbp`,
             `RHS`.`sf` AS `sf`,
             `RHS`.`ra` AS `ra`,
             `RHS`.`er` AS `er`,
             `RHS`.`era` AS `era`,
             `RHS`.`cg` AS `cg`,
             `RHS`.`sho` AS `sho`,
             `RHS`.`sv` AS `sv`,
             `RHS`.`ipouts` AS `ipouts`,
             `RHS`.`ha` AS `ha`,
             `RHS`.`hra` AS `hra`,
             `RHS`.`bba` AS `bba`,
             `RHS`.`soa` AS `soa`,
             `RHS`.`e` AS `e`,
             `RHS`.`dp` AS `dp`,
             `RHS`.`fp` AS `fp`,
             `RHS`.`name` AS `name`,
             `RHS`.`park` AS `park`,
             `RHS`.`attendance` AS `attendance`,
             `RHS`.`bpf` AS `bpf`,
             `RHS`.`ppf` AS `ppf`,
             `RHS`.`team_id_br` AS `team_id_br`,
             `RHS`.`team_id_lahman45` AS `team_id_lahman45`,
             `RHS`.`team_id_retro` AS `team_id_retro`
      FROM `df_postseason` AS `LHS`
      INNER JOIN `df_team` AS `RHS` ON (`LHS`.`year` = `RHS`.`year`)))
WHERE (`name` != 'Boston Red Stockings'
       AND maxwins = wins)
ORDER BY max_t1_wins_;",3,10,3,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/baseball_1/0024,"filter(input0, 'ties != 1885L | ties != 1L'), summarise(line0, 'n_distinct = n_distinct(ties)', ""'league_id_winner','year'"")","SELECT DISTINCT n_distinct AS count___
FROM
  (SELECT league_id_winner,
          YEAR,
          COUNT(DISTINCT ties) AS n_distinct
   FROM
     (SELECT *
      FROM df_postseason
      WHERE (ties != 1885
             OR ties != 1))
   GROUP BY league_id_winner,
            YEAR)
ORDER BY count___;",2,12,3,2,3,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/baseball_1/0009,"summarise(input0, 'n = n()', ""'state'""), filter(line0, ""state == 'NY'"")","SELECT `n` AS `count___`
FROM
  (SELECT `state`,
          COUNT() AS `n`
   FROM `df_park`
   GROUP BY `state`)
WHERE (`state` = 'NY')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/baseball_1/0029,"summarise(input0, 'n = n()', ""'needed','yearid'""), limit(line0, 'n')","SELECT yearid
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT needed,
                yearid,
                COUNT() AS n
         FROM df_hall_of_fame
         GROUP BY needed,
                  yearid)
      ORDER BY n)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/baseball_1/0040,"summarise(input0, 'n = n()', ""'city'""), filter(line0, 'n >= 2L & n <= 4L')","SELECT city
FROM
  (SELECT city,
          COUNT() AS n
   FROM df_park
   GROUP BY city)
WHERE (n >= 2
       AND n <= 4)
ORDER BY city;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/baseball_1/0028,"filter(input0, 'year == 2010L | year == 2001L'), semi_join(input0, line0)","SELECT DISTINCT salary
FROM
  (SELECT *
   FROM df_salary AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_salary
           WHERE (YEAR = 2010
                  OR YEAR = 2001)) AS RHS
        WHERE (LHS.year = RHS.year
               AND LHS.team_id = RHS.team_id
               AND LHS.league_id = RHS.league_id
               AND LHS.player_id = RHS.player_id
               AND LHS.salary = RHS.salary) ))
ORDER BY salary;",2,16,4,1,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/baseball_1/0031,"natural_join(input0, input1), filter(line0, ""park_name == 'Columbia Park' & year == 1907L""), mutate(line1, 'n = n()')","SELECT COUNT(*) OVER () AS `count___`
FROM
  (SELECT `LHS`.`year` AS `year`,
          `LHS`.`league_id` AS `league_id`,
          `LHS`.`team_id` AS `team_id`,
          `LHS`.`park_id` AS `park_id`,
          `LHS`.`span_first` AS `span_first`,
          `LHS`.`span_last` AS `span_last`,
          `LHS`.`games` AS `games`,
          `LHS`.`openings` AS `openings`,
          `LHS`.`attendance` AS `attendance`,
          `RHS`.`park_name` AS `park_name`,
          `RHS`.`park_alias` AS `park_alias`,
          `RHS`.`city` AS `city`,
          `RHS`.`state` AS `state`,
          `RHS`.`country` AS `country`
   FROM `df_home_game` AS `LHS`
   INNER JOIN `df_park` AS `RHS` ON (`LHS`.`park_id` = `RHS`.`park_id`))
WHERE (`park_name` = 'Columbia Park'
       AND YEAR = 1907)
ORDER BY count___;",3,8,2,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/entertainment_awards/0002,df_artwork,"SELECT name
FROM df_artwork
ORDER BY name;",2,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0
spider/entertainment_awards/0017,"summarise(input0, 'n = n()', ""'artwork_id','type'""), limit(line0, 'desc(n)')","SELECT TYPE
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT artwork_id,
                TYPE,
                COUNT() AS n
         FROM df_artwork
         GROUP BY artwork_id,
                  TYPE)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/entertainment_awards/0008,"summarise(input0, 'meannum_of_audience = mean(num_of_audience, na.rm = T)', '')","SELECT meannum_of_audience AS avg_num_of_audience_
FROM
  (SELECT AVG(num_of_audience) AS meannum_of_audience
   FROM df_festival_detail)
ORDER BY avg_num_of_audience_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/entertainment_awards/0003,"filter(input0, ""type != 'Program Talent Show'"")","SELECT `name`
FROM `df_artwork`
WHERE (`type` != 'Program Talent Show')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/entertainment_awards/0013,"filter(input1, ""type == 'Program Talent Show'""), natural_join3(input0, input2, line0)","SELECT `festival_name`
FROM
  (SELECT `LHS`.`festival_id` AS `festival_id`,
          `LHS`.`festival_name` AS `festival_name`,
          `LHS`.`chair_name` AS `chair_name`,
          `LHS`.`location` AS `location`,
          `LHS`.`year` AS `year`,
          `LHS`.`num_of_audience` AS `num_of_audience`,
          `LHS`.`artwork_id` AS `artwork_id`,
          `LHS`.`result` AS `result`,
          `RHS`.`type` AS `type`,
          `RHS`.`name` AS `name`
   FROM
     (SELECT `LHS`.`festival_id` AS `festival_id`,
             `LHS`.`festival_name` AS `festival_name`,
             `LHS`.`chair_name` AS `chair_name`,
             `LHS`.`location` AS `location`,
             `LHS`.`year` AS `year`,
             `LHS`.`num_of_audience` AS `num_of_audience`,
             `RHS`.`artwork_id` AS `artwork_id`,
             `RHS`.`result` AS `result`
      FROM `df_festival_detail` AS `LHS`
      INNER JOIN `df_nomination` AS `RHS` ON (`LHS`.`festival_id` = `RHS`.`festival_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_artwork`
      WHERE (`type` = 'Program Talent Show')) AS RHS ON (LHS.artwork_id = RHS.artwork_id))
ORDER BY festival_name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/entertainment_awards/0006,"intersect(input0, input0, 'location')","SELECT LOCATION
FROM
  (SELECT LOCATION
   FROM df_festival_detail INTERSECT SELECT LOCATION
   FROM df_festival_detail)
ORDER BY LOCATION;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/entertainment_awards/0004,df_festival_detail,"SELECT festival_name,
       LOCATION
FROM df_festival_detail
ORDER BY festival_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/entertainment_awards/0012,"natural_join3(input0, input1, input2)","SELECT name
FROM
  (SELECT LHS.festival_id AS festival_id,
          LHS.festival_name AS festival_name,
          LHS.chair_name AS chair_name,
          LHS.location AS LOCATION,
          LHS.year AS YEAR,
          LHS.num_of_audience AS num_of_audience,
          LHS.artwork_id AS artwork_id,
          LHS.type AS TYPE,
          LHS.name AS name,
          RHS.result AS RESULT
   FROM
     (SELECT LHS.festival_id AS festival_id,
             LHS.festival_name AS festival_name,
             LHS.chair_name AS chair_name,
             LHS.location AS LOCATION,
             LHS.year AS YEAR,
             LHS.num_of_audience AS num_of_audience,
             RHS.artwork_id AS artwork_id,
             RHS.type AS TYPE,
             RHS.name AS name
      FROM df_festival_detail AS LHS
      CROSS JOIN df_artwork AS RHS) AS LHS
   INNER JOIN df_nomination AS RHS ON (LHS.festival_id = RHS.festival_id
                                       AND LHS.artwork_id = RHS.artwork_id))
ORDER BY name;",1,10,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
spider/entertainment_awards/0015,"summarise(input2, 'n = n()', ""'festival_id'""), natural_join4(input0, input1, input2, line0)","SELECT DISTINCT festival_id,
                festival_name,
                n AS count___
FROM
  (SELECT LHS.festival_id AS festival_id,
          LHS.festival_name AS festival_name,
          LHS.chair_name AS chair_name,
          LHS.location AS LOCATION,
          LHS.year AS YEAR,
          LHS.num_of_audience AS num_of_audience,
          LHS.artwork_id AS artwork_id,
          LHS.type AS TYPE,
          LHS.name AS name,
          LHS.result AS RESULT,
          RHS.n AS n
   FROM
     (SELECT LHS.festival_id AS festival_id,
             LHS.festival_name AS festival_name,
             LHS.chair_name AS chair_name,
             LHS.location AS LOCATION,
             LHS.year AS YEAR,
             LHS.num_of_audience AS num_of_audience,
             LHS.artwork_id AS artwork_id,
             LHS.type AS TYPE,
             LHS.name AS name,
             RHS.result AS RESULT
      FROM
        (SELECT LHS.festival_id AS festival_id,
                LHS.festival_name AS festival_name,
                LHS.chair_name AS chair_name,
                LHS.location AS LOCATION,
                LHS.year AS YEAR,
                LHS.num_of_audience AS num_of_audience,
                RHS.artwork_id AS artwork_id,
                RHS.type AS TYPE,
                RHS.name AS name
         FROM df_festival_detail AS LHS
         CROSS JOIN df_artwork AS RHS) AS LHS
      INNER JOIN df_nomination AS RHS ON (LHS.festival_id = RHS.festival_id
                                          AND LHS.artwork_id = RHS.artwork_id)) AS LHS
   INNER JOIN
     (SELECT festival_id,
             COUNT() AS n
      FROM df_nomination
      GROUP BY festival_id) AS RHS ON (LHS.festival_id = RHS.festival_id))
ORDER BY festival_id;",2,18,5,1,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
spider/entertainment_awards/0005,df_festival_detail,"SELECT chair_name
FROM df_festival_detail
ORDER BY chair_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/entertainment_awards/0016,"summarise(input0, 'n = n()', ""'type'"")","SELECT TYPE,
       n AS count___
FROM
  (SELECT TYPE,
          COUNT() AS n
   FROM df_artwork
   GROUP BY TYPE)
ORDER BY TYPE;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/entertainment_awards/0018,"summarise(input0, 'n = n()', ""'festival_name','year'""), limit(line0, 'festival_name')","SELECT YEAR
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT festival_name,
                YEAR,
                COUNT() AS n
         FROM df_festival_detail
         GROUP BY festival_name,
                  YEAR)
      ORDER BY festival_name)
   LIMIT 1);",1,12,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/entertainment_awards/0020,"filter(input0, 'year >= 2008L | year >= 2010L')","SELECT num_of_audience
FROM df_festival_detail
WHERE (YEAR >= 2008
       OR YEAR >= 2010)
ORDER BY num_of_audience;",1,6,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/entertainment_awards/0019,"anti_join(input0, input1, '')","SELECT name
FROM
  (SELECT *
   FROM df_artwork AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_nomination AS RHS
        WHERE (LHS.artwork_id = RHS.artwork_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/entertainment_awards/0007,"filter(input0, 'year == 2007L'), filter(line0, 'year == 2007L')","SELECT festival_name
FROM
  (SELECT *
   FROM df_festival_detail
   WHERE (YEAR = 2007))
WHERE (YEAR = 2007)
ORDER BY festival_name;",2,8,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/entertainment_awards/0021,"summarise(input0, 'sumnum_of_audience = sum(num_of_audience)', '')","SELECT sumnum_of_audience AS sum_num_of_audience_
FROM
  (SELECT SUM(num_of_audience) AS sumnum_of_audience
   FROM df_festival_detail)
ORDER BY sum_num_of_audience_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/entertainment_awards/0001,"summarise(input0, 'n = n()', ""'artwork_id','type'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT artwork_id,
          TYPE,
          COUNT() AS n
   FROM df_artwork
   GROUP BY artwork_id,
            TYPE)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/entertainment_awards/0014,"natural_join3(input0, input1, input2), mutate(line0, 'n = n()'), filter(line1, 'n > 2L')","SELECT DISTINCT festival_id,
                festival_name
FROM
  (SELECT festival_id,
          festival_name,
          chair_name,
          LOCATION,
          YEAR,
          num_of_audience,
          artwork_id,
          TYPE,
          name,
          RESULT,
          COUNT(*) OVER () AS n
   FROM
     (SELECT LHS.festival_id AS festival_id,
             LHS.festival_name AS festival_name,
             LHS.chair_name AS chair_name,
             LHS.location AS LOCATION,
             LHS.year AS YEAR,
             LHS.num_of_audience AS num_of_audience,
             LHS.artwork_id AS artwork_id,
             LHS.type AS TYPE,
             LHS.name AS name,
             RHS.result AS RESULT
      FROM
        (SELECT LHS.festival_id AS festival_id,
                LHS.festival_name AS festival_name,
                LHS.chair_name AS chair_name,
                LHS.location AS LOCATION,
                LHS.year AS YEAR,
                LHS.num_of_audience AS num_of_audience,
                RHS.artwork_id AS artwork_id,
                RHS.type AS TYPE,
                RHS.name AS name
         FROM df_festival_detail AS LHS
         CROSS JOIN df_artwork AS RHS) AS LHS
      INNER JOIN df_nomination AS RHS ON (LHS.festival_id = RHS.festival_id
                                          AND LHS.artwork_id = RHS.artwork_id)))
WHERE (n > 2)
ORDER BY festival_id;",3,17,4,1,4,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0
spider/entertainment_awards/0009,"limit(input0, 'desc(year)')","SELECT festival_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_festival_detail
      ORDER BY YEAR DESC)
   LIMIT 3);",0,9,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/entertainment_awards/0011,"natural_join3(input0, input1, input2), filter(line0, 'year == 2007L')","SELECT DISTINCT TYPE
FROM
  (SELECT LHS.festival_id AS festival_id,
          LHS.festival_name AS festival_name,
          LHS.chair_name AS chair_name,
          LHS.location AS LOCATION,
          LHS.year AS YEAR,
          LHS.num_of_audience AS num_of_audience,
          LHS.artwork_id AS artwork_id,
          LHS.type AS TYPE,
          LHS.name AS name,
          RHS.result AS RESULT
   FROM
     (SELECT LHS.festival_id AS festival_id,
             LHS.festival_name AS festival_name,
             LHS.chair_name AS chair_name,
             LHS.location AS LOCATION,
             LHS.year AS YEAR,
             LHS.num_of_audience AS num_of_audience,
             RHS.artwork_id AS artwork_id,
             RHS.type AS TYPE,
             RHS.name AS name
      FROM df_festival_detail AS LHS
      CROSS JOIN df_artwork AS RHS) AS LHS
   INNER JOIN df_nomination AS RHS ON (LHS.festival_id = RHS.festival_id
                                       AND LHS.artwork_id = RHS.artwork_id))
WHERE (YEAR = 2007)
ORDER BY TYPE;",2,13,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/entertainment_awards/0010,"natural_join3(input0, input1, input2), natural_join3(input1, input2, line0)","SELECT name,
       festival_name
FROM
  (SELECT LHS.artwork_id AS artwork_id,
          LHS.type AS TYPE,
          LHS.name AS name,
          LHS.festival_id AS festival_id,
          LHS.result AS RESULT,
          RHS.festival_name AS festival_name,
          RHS.chair_name AS chair_name,
          RHS.location AS LOCATION,
          RHS.year AS YEAR,
          RHS.num_of_audience AS num_of_audience
   FROM
     (SELECT LHS.artwork_id AS artwork_id,
             LHS.type AS TYPE,
             LHS.name AS name,
             RHS.festival_id AS festival_id,
             RHS.result AS RESULT
      FROM df_artwork AS LHS
      INNER JOIN df_nomination AS RHS ON (LHS.artwork_id = RHS.artwork_id)) AS LHS
   INNER JOIN
     (SELECT LHS.festival_id AS festival_id,
             LHS.festival_name AS festival_name,
             LHS.chair_name AS chair_name,
             LHS.location AS LOCATION,
             LHS.year AS YEAR,
             LHS.num_of_audience AS num_of_audience,
             LHS.artwork_id AS artwork_id,
             LHS.type AS TYPE,
             LHS.name AS name,
             RHS.result AS RESULT
      FROM
        (SELECT LHS.festival_id AS festival_id,
                LHS.festival_name AS festival_name,
                LHS.chair_name AS chair_name,
                LHS.location AS LOCATION,
                LHS.year AS YEAR,
                LHS.num_of_audience AS num_of_audience,
                RHS.artwork_id AS artwork_id,
                RHS.type AS TYPE,
                RHS.name AS name
         FROM df_festival_detail AS LHS
         CROSS JOIN df_artwork AS RHS) AS LHS
      INNER JOIN df_nomination AS RHS ON (LHS.festival_id = RHS.festival_id
                                          AND LHS.artwork_id = RHS.artwork_id)) AS RHS ON (LHS.artwork_id = RHS.artwork_id
                                                                                           AND LHS.type = RHS.type
                                                                                           AND LHS.name = RHS.name
                                                                                           AND LHS.festival_id = RHS.festival_id
                                                                                           AND LHS.result = RHS.result))
ORDER BY name;",2,19,5,0,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0
spider/store_product/0002,"summarise(input0, 'n = n()', ""'max_page_size'""), filter(line0, 'n >= 3L'), mutate(line1, 'n = n()')","SELECT max_page_size
FROM
  (SELECT max_page_size,
          COUNT() AS n
   FROM df_product
   GROUP BY max_page_size)
WHERE (n >= 3)
ORDER BY max_page_size;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/store_product/0017,"filter(input0, ""max_page_size == 'A4' & pages_per_minute_color != 5""), semi_join(input0, line0)","SELECT `product`
FROM
  (SELECT *
   FROM `df_product` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_product`
           WHERE (`max_page_size` = 'A4'
                  AND pages_per_minute_color != 5.0)) AS RHS
        WHERE (LHS.product_id = RHS.product_id
               AND LHS.product = RHS.product
               AND LHS.dimensions = RHS.dimensions
               AND LHS.dpi = RHS.dpi
               AND LHS.pages_per_minute_color = RHS.pages_per_minute_color
               AND LHS.max_page_size = RHS.max_page_size
               AND LHS.interface = RHS.interface) ))
ORDER BY product;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/store_product/0008,"summarise(input0, 'n = n()', ""'number_of_product_category','type'""), summarise(line0, 'n = n()', ""'type'"")","SELECT TYPE,
       n AS count___
FROM
  (SELECT TYPE,
          COUNT() AS n
   FROM
     (SELECT number_of_product_category,
             TYPE,
             COUNT() AS n
      FROM df_store
      GROUP BY number_of_product_category,
               TYPE)
   GROUP BY TYPE)
ORDER BY TYPE;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/store_product/0003,"inner_join(input0, input0, ""'city_area','district_id'""), filter(line0, 'city_population > 200000 & city_population <= 2000000')","SELECT district_name,
       city_population
FROM
  (SELECT LHS.district_id AS district_id,
          LHS.district_name AS district_name,
          LHS.headquartered_city AS headquartered_city,
          LHS.city_population AS city_population,
          LHS.city_area AS city_area,
          RHS.district_name AS district_name_other,
          RHS.headquartered_city AS headquartered_city_other,
          RHS.city_population AS city_population_other
   FROM df_district AS LHS
   INNER JOIN df_district AS RHS ON (LHS.city_area = RHS.city_area
                                     AND LHS.district_id = RHS.district_id))
WHERE (city_population > 200000.0
       AND city_population <= 2000000.0)
ORDER BY district_name;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/store_product/0022,"filter(input0, ""type != 'City Mall' & type == 'Village Store'""), natural_join4(input0, input1, input2, line0), inner_join(line1, line1, ""'store_id' = 'ranking','type' = 'type'"")","SELECT `district_name_other` AS `district_name`
FROM
  (SELECT `LHS`.`store_id` AS `store_id`,
          `LHS`.`store_name` AS `store_name`,
          `LHS`.`type` AS `type`,
          `LHS`.`area_size` AS `area_size`,
          `LHS`.`number_of_product_category` AS `number_of_product_category`,
          `LHS`.`ranking` AS `ranking`,
          `LHS`.`district_id` AS `district_id`,
          `LHS`.`district_name` AS `district_name`,
          `LHS`.`headquartered_city` AS `headquartered_city`,
          `LHS`.`city_population` AS `city_population`,
          `LHS`.`city_area` AS `city_area`,
          `RHS`.`store_id` AS `store_id_other`,
          `RHS`.`store_name` AS `store_name_other`,
          `RHS`.`area_size` AS `area_size_other`,
          `RHS`.`number_of_product_category` AS `number_of_product_category_other`,
          `RHS`.`district_id` AS `district_id_other`,
          `RHS`.`district_name` AS `district_name_other`,
          `RHS`.`headquartered_city` AS `headquartered_city_other`,
          `RHS`.`city_population` AS `city_population_other`,
          `RHS`.`city_area` AS `city_area_other`
   FROM
     (SELECT `LHS`.`store_id` AS `store_id`,
             `LHS`.`store_name` AS `store_name`,
             `LHS`.`type` AS `type`,
             `LHS`.`area_size` AS `area_size`,
             `LHS`.`number_of_product_category` AS `number_of_product_category`,
             `LHS`.`ranking` AS `ranking`,
             `LHS`.`district_id` AS `district_id`,
             `LHS`.`district_name` AS `district_name`,
             `LHS`.`headquartered_city` AS `headquartered_city`,
             `LHS`.`city_population` AS `city_population`,
             `LHS`.`city_area` AS `city_area`
      FROM
        (SELECT `LHS`.`store_id` AS `store_id`,
                `LHS`.`store_name` AS `store_name`,
                `LHS`.`type` AS `type`,
                `LHS`.`area_size` AS `area_size`,
                `LHS`.`number_of_product_category` AS `number_of_product_category`,
                `LHS`.`ranking` AS `ranking`,
                `LHS`.`district_id` AS `district_id`,
                `LHS`.`district_name` AS `district_name`,
                `LHS`.`headquartered_city` AS `headquartered_city`,
                `LHS`.`city_population` AS `city_population`,
                `LHS`.`city_area` AS `city_area`
         FROM
           (SELECT `LHS`.`store_id` AS `store_id`,
                   `LHS`.`store_name` AS `store_name`,
                   `LHS`.`type` AS `type`,
                   `LHS`.`area_size` AS `area_size`,
                   `LHS`.`number_of_product_category` AS `number_of_product_category`,
                   `LHS`.`ranking` AS `ranking`,
                   `RHS`.`district_id` AS `district_id`,
                   `RHS`.`district_name` AS `district_name`,
                   `RHS`.`headquartered_city` AS `headquartered_city`,
                   `RHS`.`city_population` AS `city_population`,
                   `RHS`.`city_area` AS `city_area`
            FROM `df_store` AS `LHS`
            CROSS JOIN `df_district` AS `RHS`) AS `LHS`
         INNER JOIN `df_store_district` AS `RHS` ON (`LHS`.`store_id` = `RHS`.`store_id`
                                                     AND `LHS`.`district_id` = `RHS`.`district_id`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_store`
         WHERE (`type` != 'City Mall'
                AND `type` = 'Village Store')) AS `RHS` ON (`LHS`.`store_id` = `RHS`.`store_id`
                                                            AND `LHS`.`store_name` = `RHS`.`store_name`
                                                            AND `LHS`.`type` = `RHS`.`type`
                                                            AND `LHS`.`area_size` = `RHS`.`area_size`
                                                            AND `LHS`.`number_of_product_category` = `RHS`.`number_of_product_category`
                                                            AND `LHS`.`ranking` = `RHS`.`ranking`)) AS `LHS`
   INNER JOIN
     (SELECT `LHS`.`store_id` AS `store_id`,
             `LHS`.`store_name` AS `store_name`,
             `LHS`.`type` AS `type`,
             `LHS`.`area_size` AS `area_size`,
             `LHS`.`number_of_product_category` AS `number_of_product_category`,
             `LHS`.`ranking` AS `ranking`,
             `LHS`.`district_id` AS `district_id`,
             `LHS`.`district_name` AS `district_name`,
             `LHS`.`headquartered_city` AS `headquartered_city`,
             `LHS`.`city_population` AS `city_population`,
             `LHS`.`city_area` AS `city_area`
      FROM
        (SELECT `LHS`.`store_id` AS `store_id`,
                `LHS`.`store_name` AS `store_name`,
                `LHS`.`type` AS `type`,
                `LHS`.`area_size` AS `area_size`,
                `LHS`.`number_of_product_category` AS `number_of_product_category`,
                `LHS`.`ranking` AS `ranking`,
                `LHS`.`district_id` AS `district_id`,
                `LHS`.`district_name` AS `district_name`,
                `LHS`.`headquartered_city` AS `headquartered_city`,
                `LHS`.`city_population` AS `city_population`,
                `LHS`.`city_area` AS `city_area`
         FROM
           (SELECT `LHS`.`store_id` AS `store_id`,
                   `LHS`.`store_name` AS `store_name`,
                   `LHS`.`type` AS `type`,
                   `LHS`.`area_size` AS `area_size`,
                   `LHS`.`number_of_product_category` AS `number_of_product_category`,
                   `LHS`.`ranking` AS `ranking`,
                   `RHS`.`district_id` AS `district_id`,
                   `RHS`.`district_name` AS `district_name`,
                   `RHS`.`headquartered_city` AS `headquartered_city`,
                   `RHS`.`city_population` AS `city_population`,
                   `RHS`.`city_area` AS `city_area`
            FROM `df_store` AS `LHS`
            CROSS JOIN `df_district` AS `RHS`) AS `LHS`
         INNER JOIN `df_store_district` AS `RHS` ON (`LHS`.`store_id` = `RHS`.`store_id`
                                                     AND `LHS`.`district_id` = `RHS`.`district_id`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_store`
         WHERE (`type` != 'City Mall'
                AND `type` = 'Village Store')) AS RHS ON (LHS.store_id = RHS.store_id
                                                          AND LHS.store_name = RHS.store_name
                                                          AND LHS.type = RHS.type
                                                          AND LHS.area_size = RHS.area_size
                                                          AND LHS.number_of_product_category = RHS.number_of_product_category
                                                          AND LHS.ranking = RHS.ranking)) AS RHS ON (LHS.store_id = RHS.ranking
                                                                                                     AND LHS.type = RHS.type))
ORDER BY district_name;",3,27,10,0,10,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0
spider/store_product/0013,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'headquartered_city','store_id'""), inner_join(line0, line1, ""'store_id' = 'n','ranking' = 'store_id'"")","SELECT headquartered_city
FROM
  (SELECT store_id,
          store_name,
          TYPE,
          area_size,
          number_of_product_category,
          ranking,
          district_id,
          district_name,
          headquartered_city,
          city_population,
          city_area,
          headquartered_city_other,
          store_id AS n
   FROM
     (SELECT LHS.store_id AS store_id,
             LHS.store_name AS store_name,
             LHS.type AS TYPE,
             LHS.area_size AS area_size,
             LHS.number_of_product_category AS number_of_product_category,
             LHS.ranking AS ranking,
             LHS.district_id AS district_id,
             LHS.district_name AS district_name,
             LHS.headquartered_city AS headquartered_city,
             LHS.city_population AS city_population,
             LHS.city_area AS city_area,
             RHS.headquartered_city AS headquartered_city_other
      FROM
        (SELECT LHS.store_id AS store_id,
                LHS.store_name AS store_name,
                LHS.type AS TYPE,
                LHS.area_size AS area_size,
                LHS.number_of_product_category AS number_of_product_category,
                LHS.ranking AS ranking,
                LHS.district_id AS district_id,
                LHS.district_name AS district_name,
                LHS.headquartered_city AS headquartered_city,
                LHS.city_population AS city_population,
                LHS.city_area AS city_area
         FROM
           (SELECT LHS.store_id AS store_id,
                   LHS.store_name AS store_name,
                   LHS.type AS TYPE,
                   LHS.area_size AS area_size,
                   LHS.number_of_product_category AS number_of_product_category,
                   LHS.ranking AS ranking,
                   RHS.district_id AS district_id,
                   RHS.district_name AS district_name,
                   RHS.headquartered_city AS headquartered_city,
                   RHS.city_population AS city_population,
                   RHS.city_area AS city_area
            FROM df_store AS LHS
            CROSS JOIN df_district AS RHS) AS LHS
         INNER JOIN df_store_district AS RHS ON (LHS.store_id = RHS.store_id
                                                 AND LHS.district_id = RHS.district_id)) AS LHS
      INNER JOIN
        (SELECT headquartered_city,
                store_id,
                COUNT() AS n
         FROM
           (SELECT LHS.store_id AS store_id,
                   LHS.store_name AS store_name,
                   LHS.type AS TYPE,
                   LHS.area_size AS area_size,
                   LHS.number_of_product_category AS number_of_product_category,
                   LHS.ranking AS ranking,
                   LHS.district_id AS district_id,
                   LHS.district_name AS district_name,
                   LHS.headquartered_city AS headquartered_city,
                   LHS.city_population AS city_population,
                   LHS.city_area AS city_area
            FROM
              (SELECT LHS.store_id AS store_id,
                      LHS.store_name AS store_name,
                      LHS.type AS TYPE,
                      LHS.area_size AS area_size,
                      LHS.number_of_product_category AS number_of_product_category,
                      LHS.ranking AS ranking,
                      RHS.district_id AS district_id,
                      RHS.district_name AS district_name,
                      RHS.headquartered_city AS headquartered_city,
                      RHS.city_population AS city_population,
                      RHS.city_area AS city_area
               FROM df_store AS LHS
               CROSS JOIN df_district AS RHS) AS LHS
            INNER JOIN df_store_district AS RHS ON (LHS.store_id = RHS.store_id
                                                    AND LHS.district_id = RHS.district_id))
         GROUP BY headquartered_city,
                  store_id) AS RHS ON (LHS.store_id = RHS.n
                                       AND LHS.ranking = RHS.store_id)))
ORDER BY headquartered_city;",3,19,8,0,8,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0
spider/store_product/0006,"limit(input0, 'city_area')","SELECT district_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_district
      ORDER BY city_area)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/store_product/0004,"filter(input0, 'city_population > 10 | city_area == 100000')","SELECT district_name
FROM df_district
WHERE (city_population > 10.0
       OR city_area = 100000.0)
ORDER BY district_name;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/store_product/0012,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'city_population','headquartered_city'"")","SELECT headquartered_city,
       n AS count___
FROM
  (SELECT city_population,
          headquartered_city,
          COUNT() AS n
   FROM
     (SELECT LHS.store_id AS store_id,
             LHS.store_name AS store_name,
             LHS.type AS TYPE,
             LHS.area_size AS area_size,
             LHS.number_of_product_category AS number_of_product_category,
             LHS.ranking AS ranking,
             LHS.district_id AS district_id,
             LHS.district_name AS district_name,
             LHS.headquartered_city AS headquartered_city,
             LHS.city_population AS city_population,
             LHS.city_area AS city_area
      FROM
        (SELECT LHS.store_id AS store_id,
                LHS.store_name AS store_name,
                LHS.type AS TYPE,
                LHS.area_size AS area_size,
                LHS.number_of_product_category AS number_of_product_category,
                LHS.ranking AS ranking,
                RHS.district_id AS district_id,
                RHS.district_name AS district_name,
                RHS.headquartered_city AS headquartered_city,
                RHS.city_population AS city_population,
                RHS.city_area AS city_area
         FROM df_store AS LHS
         CROSS JOIN df_district AS RHS) AS LHS
      INNER JOIN df_store_district AS RHS ON (LHS.store_id = RHS.store_id
                                              AND LHS.district_id = RHS.district_id))
   GROUP BY city_population,
            headquartered_city)
ORDER BY headquartered_city;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
spider/store_product/0015,"filter(input1, ""store_name == 'Miramichi'""), natural_join3(input0, input2, line0)","SELECT `product`
FROM
  (SELECT `LHS`.`product_id` AS `product_id`,
          `LHS`.`product` AS `product`,
          `LHS`.`dimensions` AS `dimensions`,
          `LHS`.`dpi` AS `dpi`,
          `LHS`.`pages_per_minute_color` AS `pages_per_minute_color`,
          `LHS`.`max_page_size` AS `max_page_size`,
          `LHS`.`interface` AS `interface`,
          `LHS`.`store_id` AS `store_id`,
          `RHS`.`store_name` AS `store_name`,
          `RHS`.`type` AS `type`,
          `RHS`.`area_size` AS `area_size`,
          `RHS`.`number_of_product_category` AS `number_of_product_category`,
          `RHS`.`ranking` AS `ranking`
   FROM
     (SELECT `LHS`.`product_id` AS `product_id`,
             `LHS`.`product` AS `product`,
             `LHS`.`dimensions` AS `dimensions`,
             `LHS`.`dpi` AS `dpi`,
             `LHS`.`pages_per_minute_color` AS `pages_per_minute_color`,
             `LHS`.`max_page_size` AS `max_page_size`,
             `LHS`.`interface` AS `interface`,
             `RHS`.`store_id` AS `store_id`
      FROM `df_product` AS `LHS`
      INNER JOIN `df_store_product` AS `RHS` ON (`LHS`.`product_id` = `RHS`.`product_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_store`
      WHERE (`store_name` = 'Miramichi')) AS RHS ON (LHS.store_id = RHS.store_id))
ORDER BY product;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/store_product/0005,"limit(input0, 'desc(city_population)')","SELECT district_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_district
      ORDER BY city_population DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/store_product/0016,"filter(input0, ""max_page_size == 'A4' & pages_per_minute_color <= 5""), natural_join(input0, line0)","SELECT `product`
FROM
  (SELECT `LHS`.`product_id` AS `product_id`,
          `LHS`.`product` AS `product`,
          `LHS`.`dimensions` AS `dimensions`,
          `LHS`.`dpi` AS `dpi`,
          `LHS`.`pages_per_minute_color` AS `pages_per_minute_color`,
          `LHS`.`max_page_size` AS `max_page_size`,
          `LHS`.`interface` AS `interface`
   FROM `df_product` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_product`
      WHERE (`max_page_size` = 'A4'
             AND pages_per_minute_color <= 5.0)) AS RHS ON (LHS.product_id = RHS.product_id
                                                            AND LHS.product = RHS.product
                                                            AND LHS.dimensions = RHS.dimensions
                                                            AND LHS.dpi = RHS.dpi
                                                            AND LHS.pages_per_minute_color = RHS.pages_per_minute_color
                                                            AND LHS.max_page_size = RHS.max_page_size
                                                            AND LHS.interface = RHS.interface))
ORDER BY product;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/store_product/0020,"mutate(input0, 'n = n()'), filter(line0, 'n >= 1L')","SELECT product
FROM
  (SELECT product_id,
          product,
          dimensions,
          dpi,
          pages_per_minute_color,
          max_page_size,
          interface,
          COUNT(*) OVER () AS n
   FROM df_product)
WHERE (n >= 1)
ORDER BY product;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/store_product/0019,"summarise(input0, 'n = n()', ""'dimensions','max_page_size'""), limit(line0, 'desc(max_page_size)')","SELECT max_page_size
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT dimensions,
                max_page_size,
                COUNT() AS n
         FROM df_product
         GROUP BY dimensions,
                  max_page_size)
      ORDER BY max_page_size DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/store_product/0007,"filter(input0, 'city_population > 3'), mutate(line0, 'sumcity_population = sum(city_population)')","SELECT DISTINCT SUM(city_population) OVER () AS sum_city_population_
FROM df_district
WHERE (city_population > 3.0)
ORDER BY sum_city_population_;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/store_product/0021,"mutate(input0, 'meancity_population = mean(city_population, na.rm = T)'), filter(line0, 'meancity_population < city_population | meancity_population <= city_area'), summarise(line1, 'sumcity_population = sum(city_population)', '')","SELECT sumcity_population AS sum_city_population_
FROM
  (SELECT SUM(city_population) AS sumcity_population
   FROM
     (SELECT *
      FROM
        (SELECT district_id,
                district_name,
                headquartered_city,
                city_population,
                city_area,
                AVG(city_population) OVER () AS meancity_population
         FROM df_district)
      WHERE (meancity_population < city_population
             OR meancity_population <= city_area)))
ORDER BY sum_city_population_;",3,11,4,0,4,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/store_product/0001,df_district,"SELECT district_name
FROM df_district
ORDER BY district_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/store_product/0014,"summarise(input0, 'meanpages_per_minute_color = mean(pages_per_minute_color, na.rm = T)', ""'interface'"")","SELECT meanpages_per_minute_color AS avg_pages_per_minute_color_
FROM
  (SELECT interface,
          AVG(pages_per_minute_color) AS meanpages_per_minute_color
   FROM df_product
   GROUP BY interface)
ORDER BY avg_pages_per_minute_color_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/store_product/0009,"filter(input1, ""district_name == 'Khanewal District'""), natural_join3(input0, input2, line0)","SELECT `store_name`
FROM
  (SELECT `LHS`.`store_id` AS `store_id`,
          `LHS`.`store_name` AS `store_name`,
          `LHS`.`type` AS `type`,
          `LHS`.`area_size` AS `area_size`,
          `LHS`.`number_of_product_category` AS `number_of_product_category`,
          `LHS`.`ranking` AS `ranking`,
          `LHS`.`district_id` AS `district_id`,
          `RHS`.`district_name` AS `district_name`,
          `RHS`.`headquartered_city` AS `headquartered_city`,
          `RHS`.`city_population` AS `city_population`,
          `RHS`.`city_area` AS `city_area`
   FROM
     (SELECT `LHS`.`store_id` AS `store_id`,
             `LHS`.`store_name` AS `store_name`,
             `LHS`.`type` AS `type`,
             `LHS`.`area_size` AS `area_size`,
             `LHS`.`number_of_product_category` AS `number_of_product_category`,
             `LHS`.`ranking` AS `ranking`,
             `RHS`.`district_id` AS `district_id`
      FROM `df_store` AS `LHS`
      INNER JOIN `df_store_district` AS `RHS` ON (`LHS`.`store_id` = `RHS`.`store_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_district`
      WHERE (`district_name` = 'Khanewal District')) AS RHS ON (LHS.district_id = RHS.district_id))
ORDER BY store_name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/store_product/0011,"filter(input0, ""store_name == 'Blackville'""), natural_join3(input1, input2, line0)","SELECT `headquartered_city`
FROM
  (SELECT `LHS`.`district_id` AS `district_id`,
          `LHS`.`district_name` AS `district_name`,
          `LHS`.`headquartered_city` AS `headquartered_city`,
          `LHS`.`city_population` AS `city_population`,
          `LHS`.`city_area` AS `city_area`,
          `LHS`.`store_id` AS `store_id`,
          `RHS`.`store_name` AS `store_name`,
          `RHS`.`type` AS `type`,
          `RHS`.`area_size` AS `area_size`,
          `RHS`.`number_of_product_category` AS `number_of_product_category`,
          `RHS`.`ranking` AS `ranking`
   FROM
     (SELECT `LHS`.`district_id` AS `district_id`,
             `LHS`.`district_name` AS `district_name`,
             `LHS`.`headquartered_city` AS `headquartered_city`,
             `LHS`.`city_population` AS `city_population`,
             `LHS`.`city_area` AS `city_area`,
             `RHS`.`store_id` AS `store_id`
      FROM `df_district` AS `LHS`
      INNER JOIN `df_store_district` AS `RHS` ON (`LHS`.`district_id` = `RHS`.`district_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_store`
      WHERE (`store_name` = 'Blackville')) AS RHS ON (LHS.store_id = RHS.store_id))
ORDER BY headquartered_city;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/department_management/0002,df_head,"SELECT name,
       born_state,
       age
FROM df_head
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/department_management/0008,"summarise(input0, 'n = n()', ""'born_state'""), filter(line0, 'n > 3L'), intersect(line0, line1, 'born_state')","SELECT born_state
FROM
  (SELECT born_state
   FROM
     (SELECT born_state,
             COUNT() AS n
      FROM df_head
      GROUP BY born_state) INTERSECT SELECT born_state
   FROM
     (SELECT born_state,
             COUNT() AS n
      FROM df_head
      GROUP BY born_state)
   WHERE (n > 3))
ORDER BY born_state;",3,12,5,0,5,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0
spider/department_management/0003,"intersect(input0, input0, 'creation'), left_join(line0, input0)","SELECT creation,
       name,
       budget_in_billions
FROM
  (SELECT LHS.creation AS creation,
          RHS.department_id AS department_id,
          RHS.name AS name,
          RHS.ranking AS ranking,
          RHS.budget_in_billions AS budget_in_billions,
          RHS.num_employees AS num_employees
   FROM
     (SELECT creation
      FROM df_department INTERSECT SELECT creation
      FROM df_department) AS LHS
   LEFT JOIN df_department AS RHS ON (LHS.creation = RHS.creation))
ORDER BY creation;",2,10,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0
spider/department_management/0013,"filter(input1, ""temporary_acting == 'Yes'""), natural_join(input0, line0)","SELECT `age`
FROM
  (SELECT `LHS`.`head_id` AS `head_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`born_state` AS `born_state`,
          `LHS`.`age` AS `age`,
          `RHS`.`department_id` AS `department_id`,
          `RHS`.`temporary_acting` AS `temporary_acting`
   FROM `df_head` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_management`
      WHERE (`temporary_acting` = 'Yes')) AS RHS ON (LHS.head_id = RHS.head_id))
ORDER BY age;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/department_management/0006,"filter(input0, ""born_state != 'California'"")","SELECT `name`
FROM `df_head`
WHERE (`born_state` != 'California')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/department_management/0004,"mutate(input0, 'maxbudget_in_billions = max(budget_in_billions)'), mutate(line0, 'minbudget_in_billions = min(budget_in_billions)')","SELECT DISTINCT maxbudget_in_billions AS max_budget_in_billions_,
                MIN(budget_in_billions) OVER () AS min_budget_in_billions_
FROM
  (SELECT department_id,
          name,
          creation,
          ranking,
          budget_in_billions,
          num_employees,
          MAX(budget_in_billions) OVER () AS maxbudget_in_billions
   FROM df_department)
ORDER BY max_budget_in_billions_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/department_management/0012,"anti_join(input0, input1, ''), mutate(line0, 'n_distinct = n_distinct(department_id)')","SELECT DISTINCT COUNT(DISTINCT department_id) OVER () AS count___
FROM
  (SELECT *
   FROM df_department AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_management AS RHS
        WHERE (LHS.department_id = RHS.department_id) ))
ORDER BY count___;",2,13,3,2,3,0,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
spider/department_management/0015,"summarise(input1, 'n = n()', ""'department_id'""), inner_join(input0, line0, ""'department_id' = 'department_id','ranking' = 'n'"")","SELECT department_id,
       name,
       ranking AS count___
FROM
  (SELECT LHS.department_id AS department_id,
          LHS.name AS name,
          LHS.creation AS creation,
          LHS.ranking AS ranking,
          LHS.budget_in_billions AS budget_in_billions,
          LHS.num_employees AS num_employees
   FROM df_department AS LHS
   INNER JOIN
     (SELECT department_id,
             COUNT() AS n
      FROM df_management
      GROUP BY department_id) AS RHS ON (LHS.department_id = RHS.department_id
                                         AND LHS.ranking = RHS.n))
ORDER BY department_id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/department_management/0005,"filter(input0, 'ranking >= 10L | num_employees == 15'), mutate(line0, 'meannum_employees = mean(num_employees, na.rm = T)')","SELECT DISTINCT AVG(num_employees) OVER () AS avg_num_employees_
FROM df_department
WHERE (ranking >= 10
       OR num_employees = 15.0)
ORDER BY avg_num_employees_;",2,6,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/department_management/0007,"filter(input1, ""born_state == 'Alabama'""), semi_join(input2, line0), natural_join(input0, line1)","SELECT `creation`
FROM
  (SELECT `LHS`.`department_id` AS `department_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`creation` AS `creation`,
          `LHS`.`ranking` AS `ranking`,
          `LHS`.`budget_in_billions` AS `budget_in_billions`,
          `LHS`.`num_employees` AS `num_employees`,
          `RHS`.`head_id` AS `head_id`,
          `RHS`.`temporary_acting` AS `temporary_acting`
   FROM `df_department` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_management` AS `LHS`
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_head`
              WHERE (`born_state` = 'Alabama')) AS RHS
           WHERE (LHS.head_id = RHS.head_id) )) AS RHS ON (LHS.department_id = RHS.department_id))
ORDER BY creation;",3,15,5,0,5,1,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0
spider/department_management/0001,"filter(input0, 'age <= 56'), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT *
      FROM df_head
      WHERE (age <= 56.0)))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/department_management/0014,"filter(input0, ""name == 'Treasury' | name == 'Homeland Security'""), semi_join(line0, input2), inner_join(line1, input1, ""'ranking' = 'head_id'"")","SELECT `born_state`
FROM
  (SELECT `LHS`.`department_id` AS `department_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`creation` AS `creation`,
          `LHS`.`ranking` AS `ranking`,
          `LHS`.`budget_in_billions` AS `budget_in_billions`,
          `LHS`.`num_employees` AS `num_employees`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`born_state` AS `born_state`,
          `RHS`.`age` AS `age`
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM `df_department`
         WHERE (`name` = 'Treasury'
                OR `name` = 'Homeland Security')) AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM df_management AS RHS
           WHERE (LHS.department_id = RHS.department_id) )) AS LHS
   INNER JOIN df_head AS RHS ON (LHS.ranking = RHS.head_id))
ORDER BY born_state;",3,16,5,0,5,1,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0
spider/department_management/0009,"summarise(input0, 'n = n()', ""'creation','department_id'""), limit(line0, 'desc(n)')","SELECT creation
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT creation,
                department_id,
                COUNT() AS n
         FROM df_department
         GROUP BY creation,
                  department_id)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/department_management/0011,"mutate(input0, 'n_distinct = n_distinct(temporary_acting)')","SELECT DISTINCT COUNT(DISTINCT temporary_acting) OVER () AS count_distinct_temporary_acting_
FROM df_management
ORDER BY count_distinct_temporary_acting_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/department_management/0010,"filter(input1, ""temporary_acting == 'Yes'""), natural_join(input0, line0)","SELECT `name`,
       `num_employees`
FROM
  (SELECT `LHS`.`department_id` AS `department_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`creation` AS `creation`,
          `LHS`.`ranking` AS `ranking`,
          `LHS`.`budget_in_billions` AS `budget_in_billions`,
          `LHS`.`num_employees` AS `num_employees`,
          `RHS`.`head_id` AS `head_id`,
          `RHS`.`temporary_acting` AS `temporary_acting`
   FROM `df_department` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_management`
      WHERE (`temporary_acting` = 'Yes')) AS RHS ON (LHS.department_id = RHS.department_id))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/small_bank_1/0002,"summarise(input0, 'n = n()', ""'custid','name'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT custid,
             name,
             COUNT() AS n
      FROM df_accounts
      GROUP BY custid,
               name))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/small_bank_1/0017,"summarise(input1, 'meanbalance = mean(balance, na.rm = T)', ''), natural_join3(input0, input1, line0), filter(line1, 'meanbalance >= balance')","SELECT name
FROM
  (SELECT LHS.custid AS custid,
          LHS.name AS name,
          LHS.balance AS balance,
          RHS.meanbalance AS meanbalance
   FROM
     (SELECT LHS.custid AS custid,
             LHS.name AS name,
             RHS.balance AS balance
      FROM df_accounts AS LHS
      INNER JOIN df_checking AS RHS ON (LHS.custid = RHS.custid)) AS LHS
   CROSS JOIN
     (SELECT AVG(balance) AS meanbalance
      FROM df_checking) AS RHS)
WHERE (meanbalance >= balance)
ORDER BY name;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/small_bank_1/0008,"filter(input0, ""name == 'Brown'""), natural_join3(input0, input2, line0), inner_join(line1, input1, ""'custid'"")","SELECT `balance` AS `balance___1`,
       `balance_other` AS `balance___2`
FROM
  (SELECT `LHS`.`custid` AS `custid`,
          `LHS`.`name` AS `name`,
          `LHS`.`balance` AS `balance`,
          `RHS`.`balance` AS `balance_other`
   FROM
     (SELECT `LHS`.`custid` AS `custid`,
             `LHS`.`name` AS `name`,
             `LHS`.`balance` AS `balance`
      FROM
        (SELECT `LHS`.`custid` AS `custid`,
                `LHS`.`name` AS `name`,
                `RHS`.`balance` AS `balance`
         FROM `df_accounts` AS `LHS`
         INNER JOIN `df_checking` AS `RHS` ON (`LHS`.`custid` = `RHS`.`custid`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_accounts`
         WHERE (`name` = 'Brown')) AS RHS ON (LHS.custid = RHS.custid
                                              AND LHS.name = RHS.name)) AS LHS
   INNER JOIN df_savings AS RHS ON (LHS.custid = RHS.custid))
ORDER BY balance___1;",3,14,5,0,5,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0
spider/small_bank_1/0003,"summarise(input0, 'sumbalance = sum(balance)', ""'balance','custid'""), summarise(line0, 'sumbalance = sum(balance)', '')","SELECT sumbalance AS sum_balance_
FROM
  (SELECT SUM(balance) AS sumbalance
   FROM
     (SELECT balance,
             custid,
             SUM(balance) AS sumbalance
      FROM df_checking
      GROUP BY balance,
               custid))
ORDER BY sum_balance_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/small_bank_1/0022,"natural_join(input0, input2), inner_join(line0, input1, ""'custid'"")","SELECT balance AS balance___1,
       balance_other AS balance___2,
       name
FROM
  (SELECT LHS.custid AS custid,
          LHS.name AS name,
          LHS.balance AS balance,
          RHS.balance AS balance_other
   FROM
     (SELECT LHS.custid AS custid,
             LHS.name AS name,
             RHS.balance AS balance
      FROM df_accounts AS LHS
      INNER JOIN df_checking AS RHS ON (LHS.custid = RHS.custid)) AS LHS
   INNER JOIN df_savings AS RHS ON (LHS.custid = RHS.custid))
ORDER BY balance___1;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0
spider/small_bank_1/0006,"mutate(input1, 'maxbalance = max(balance)'), filter(line0, 'maxbalance != balance'), left_join(line1, input0)","SELECT custid,
       name
FROM
  (SELECT LHS.custid AS custid,
          LHS.balance AS balance,
          LHS.maxbalance AS maxbalance,
          RHS.name AS name
   FROM
     (SELECT *
      FROM
        (SELECT custid,
                balance,
                MAX(balance) OVER () AS maxbalance
         FROM df_checking)
      WHERE (maxbalance != balance)) AS LHS
   LEFT JOIN df_accounts AS RHS ON (LHS.custid = RHS.custid))
ORDER BY custid;",3,11,4,0,4,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0
spider/small_bank_1/0004,"summarise(input0, 'meanbalance = mean(balance, na.rm = T)', ""'balance','custid'""), summarise(line0, 'meanbalance = mean(balance, na.rm = T)', '')","SELECT meanbalance AS avg_balance_
FROM
  (SELECT AVG(balance) AS meanbalance
   FROM
     (SELECT balance,
             custid,
             AVG(balance) AS meanbalance
      FROM df_checking
      GROUP BY balance,
               custid))
ORDER BY avg_balance_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/small_bank_1/0012,"anti_join(input1, input2, ""'balance','custid'""), left_join(line0, input0), limit(line1, 'desc(custid)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.custid AS custid,
                LHS.balance AS balance,
                RHS.name AS name
         FROM
           (SELECT *
            FROM df_savings AS LHS
            WHERE NOT EXISTS
                (SELECT 1
                 FROM df_checking AS RHS
                 WHERE (LHS.balance = RHS.balance
                        AND LHS.custid = RHS.custid) )) AS LHS
         LEFT JOIN df_accounts AS RHS ON (LHS.custid = RHS.custid))
      ORDER BY custid DESC)
   LIMIT 1);",2,19,6,0,6,1,2,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
spider/small_bank_1/0015,"summarise(input1, 'n = n()', ""'custid'""), inner_join(line0, input0, ""'custid'"")","SELECT n AS count___,
       name
FROM
  (SELECT LHS.custid AS custid,
          LHS.n AS n,
          RHS.name AS name
   FROM
     (SELECT custid,
             COUNT() AS n
      FROM df_checking
      GROUP BY custid) AS LHS
   INNER JOIN df_accounts AS RHS ON (LHS.custid = RHS.custid))
ORDER BY count___;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/small_bank_1/0005,"summarise(input0, 'n_distinct = n_distinct(balance)', ""'balance','custid'""), mutate(line0, 'meanbalance = mean(balance, na.rm = T)')","SELECT DISTINCT n_distinct AS count___
FROM
  (SELECT balance,
          custid,
          COUNT(DISTINCT balance) AS n_distinct
   FROM df_savings
   GROUP BY balance,
            custid)
ORDER BY count___;",2,6,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/small_bank_1/0016,"summarise(input1, 'sumbalance = sum(balance)', ""'balance','custid'""), left_join(line0, input0)","SELECT balance AS sum_t2_balance_,
       name
FROM
  (SELECT LHS.balance AS balance,
          LHS.custid AS custid,
          LHS.sumbalance AS sumbalance,
          RHS.name AS name
   FROM
     (SELECT balance,
             custid,
             SUM(balance) AS sumbalance
      FROM df_savings
      GROUP BY balance,
               custid) AS LHS
   LEFT JOIN df_accounts AS RHS ON (LHS.custid = RHS.custid))
ORDER BY sum_t2_balance_;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/small_bank_1/0020,"semi_join(input0, input1), left_join(line0, input2), limit(line1, 'desc(name)')","SELECT balance,
       name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.custid AS custid,
                LHS.name AS name,
                RHS.balance AS balance
         FROM
           (SELECT *
            FROM df_accounts AS LHS
            WHERE EXISTS
                (SELECT 1
                 FROM df_savings AS RHS
                 WHERE (LHS.custid = RHS.custid) )) AS LHS
         LEFT JOIN df_checking AS RHS ON (LHS.custid = RHS.custid))
      ORDER BY name DESC)
   LIMIT 1);",2,18,6,0,6,1,2,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0
spider/small_bank_1/0021,"natural_join(input0, input1), inner_join(line0, input2, ""'custid'"")","SELECT balance_other AS balance___1,
       balance AS balance___2,
       name
FROM
  (SELECT LHS.custid AS custid,
          LHS.name AS name,
          LHS.balance AS balance,
          RHS.balance AS balance_other
   FROM
     (SELECT LHS.custid AS custid,
             LHS.name AS name,
             RHS.balance AS balance
      FROM df_accounts AS LHS
      INNER JOIN df_savings AS RHS ON (LHS.custid = RHS.custid)) AS LHS
   INNER JOIN df_checking AS RHS ON (LHS.custid = RHS.custid))
ORDER BY balance___1;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0
spider/small_bank_1/0023,"left_join(input2, input0), cross_join(input1, line0, 'balance <= balance.other'), semi_join(input0, line1)","SELECT name
FROM
  (SELECT *
   FROM df_accounts AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT LHS.custid AS custid,
                     LHS.balance AS balance,
                     RHS.custid AS custid_other,
                     RHS.balance AS balance_other,
                     RHS.name AS name
              FROM df_savings AS LHS
              CROSS JOIN
                (SELECT LHS.custid AS custid,
                        LHS.balance AS balance,
                        RHS.name AS name
                 FROM df_checking AS LHS
                 LEFT JOIN df_accounts AS RHS ON (LHS.custid = RHS.custid)) AS RHS)
           WHERE (balance <= balance_other)) AS RHS
        WHERE (LHS.custid = RHS.custid
               AND LHS.name = RHS.name) ))
ORDER BY name;",3,17,6,0,6,1,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0
spider/small_bank_1/0001,"filter(input0, ""name == 'Brown'""), anti_join(input1, line0, ''), mutate(line1, 'sumbalance = sum(balance)')","SELECT DISTINCT SUM(`balance`) OVER () AS `sum_t2_balance_`
FROM
  (SELECT *
   FROM `df_savings` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_accounts`
           WHERE (`name` = 'Brown')) AS RHS
        WHERE (LHS.custid = RHS.custid) ))
ORDER BY sum_t2_balance_;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/small_bank_1/0014,"intersect(input0, input1, 'custid'), natural_join3(input0, input2, line0), limit(line1, 'desc(name)')","SELECT name,
       balance
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.custid AS custid,
                LHS.name AS name,
                LHS.balance AS balance
         FROM
           (SELECT LHS.custid AS custid,
                   LHS.name AS name,
                   RHS.balance AS balance
            FROM df_accounts AS LHS
            INNER JOIN df_checking AS RHS ON (LHS.custid = RHS.custid)) AS LHS
         INNER JOIN
           (SELECT custid
            FROM df_accounts INTERSECT SELECT custid
            FROM df_savings) AS RHS ON (LHS.custid = RHS.custid))
      ORDER BY name DESC)
   LIMIT 1);",2,19,7,0,7,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0
spider/small_bank_1/0009,"natural_join(input0, input2), mutate(line0, 'meanbalance = mean(balance, na.rm = T)'), cross_join(line1, input1, 'balance >= meanbalance & meanbalance >= balance.other')","SELECT DISTINCT name
FROM
  (SELECT LHS.custid AS custid,
          LHS.name AS name,
          LHS.balance AS balance,
          LHS.meanbalance AS meanbalance,
          RHS.custid AS custid_other,
          RHS.balance AS balance_other
   FROM
     (SELECT custid,
             name,
             balance,
             AVG(balance) OVER () AS meanbalance
      FROM
        (SELECT LHS.custid AS custid,
                LHS.name AS name,
                RHS.balance AS balance
         FROM df_accounts AS LHS
         INNER JOIN df_checking AS RHS ON (LHS.custid = RHS.custid))) AS LHS
   CROSS JOIN df_savings AS RHS)
WHERE (balance >= meanbalance
       AND meanbalance >= balance_other)
ORDER BY name;",3,12,4,1,4,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0
spider/small_bank_1/0025,"natural_join(input0, input1), limit(line0, 'desc(balance)')","SELECT name,
       balance
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.custid AS custid,
                LHS.name AS name,
                RHS.balance AS balance
         FROM df_accounts AS LHS
         INNER JOIN df_savings AS RHS ON (LHS.custid = RHS.custid))
      ORDER BY balance DESC)
   LIMIT 3);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/small_bank_1/0011,df_accounts,"SELECT name
FROM df_accounts
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/browser_web/0002,df_browser,"SELECT name
FROM df_browser
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/browser_web/0017,"summarise(input0, 'n = n()', ""'operating_system'"")","SELECT operating_system,
       n AS count___
FROM
  (SELECT operating_system,
          COUNT() AS n
   FROM df_web_client_accelerator
   GROUP BY operating_system)
ORDER BY operating_system;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/browser_web/0008,"inner_join(input0, input1, ""'id' = 'accelerator_id'""), summarise(line0, 'n = n()', ""'accelerator_id','name'""), filter(line1, 'n >= 2L')","SELECT accelerator_id AS id,
       name
FROM
  (SELECT accelerator_id,
          name,
          COUNT() AS n
   FROM
     (SELECT id,
             name,
             operating_system,
             client,
             CONNECTION,
             browser_id,
             compatible_since_year,
             id AS accelerator_id
      FROM
        (SELECT LHS.id AS id,
                LHS.name AS name,
                LHS.operating_system AS operating_system,
                LHS.client AS client,
                LHS.connection AS CONNECTION,
                RHS.browser_id AS browser_id,
                RHS.compatible_since_year AS compatible_since_year
         FROM df_web_client_accelerator AS LHS
         INNER JOIN df_accelerator_compatible_browser AS RHS ON (LHS.id = RHS.accelerator_id)))
   GROUP BY accelerator_id,
            name)
WHERE (n >= 2)
ORDER BY id;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/browser_web/0003,df_browser,"SELECT id,
       name,
       market_share
FROM df_browser
ORDER BY id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/browser_web/0013,"filter(input1, 'market_share > 15'), inner_join(input0, input2, ""'id' = 'accelerator_id'""), inner_join(line0, line1, ""'id' = 'browser_id'"")","SELECT DISTINCT name_other AS name
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.market_share AS market_share,
          RHS.id AS id_other,
          RHS.name AS name_other,
          RHS.operating_system AS operating_system,
          RHS.client AS client,
          RHS.connection AS CONNECTION,
          RHS.compatible_since_year AS compatible_since_year,
          RHS.accelerator_id AS accelerator_id
   FROM
     (SELECT *
      FROM df_browser
      WHERE (market_share > 15.0)) AS LHS
   INNER JOIN
     (SELECT id,
             name,
             operating_system,
             client,
             CONNECTION,
             browser_id,
             compatible_since_year,
             id AS accelerator_id
      FROM
        (SELECT LHS.id AS id,
                LHS.name AS name,
                LHS.operating_system AS operating_system,
                LHS.client AS client,
                LHS.connection AS CONNECTION,
                RHS.browser_id AS browser_id,
                RHS.compatible_since_year AS compatible_since_year
         FROM df_web_client_accelerator AS LHS
         INNER JOIN df_accelerator_compatible_browser AS RHS ON (LHS.id = RHS.accelerator_id))) AS RHS ON (LHS.id = RHS.browser_id))
ORDER BY name;",3,14,5,1,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0
spider/browser_web/0006,"filter(input0, ""connection != 'Broadband'""), semi_join(input0, line0)","SELECT `name`,
       `operating_system`
FROM
  (SELECT *
   FROM `df_web_client_accelerator` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_web_client_accelerator`
           WHERE (`connection` != 'Broadband')) AS RHS
        WHERE (LHS.id = RHS.id
               AND LHS.name = RHS.name
               AND LHS.operating_system = RHS.operating_system
               AND LHS.client = RHS.client
               AND LHS.connection = RHS.connection) ))
ORDER BY name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/browser_web/0004,"mutate(input0, 'meanmarket_share = mean(market_share, na.rm = T)'), mutate(line0, 'maxmarket_share = max(market_share)'), mutate(line1, 'market_share = min(market_share)')","SELECT DISTINCT maxmarket_share AS max_market_share_,
                MIN(market_share) OVER () AS min_market_share_,
                                       meanmarket_share AS avg_market_share_
FROM
  (SELECT id,
          name,
          market_share,
          meanmarket_share,
          MAX(market_share) OVER () AS maxmarket_share
   FROM
     (SELECT id,
             name,
             market_share,
             AVG(market_share) OVER () AS meanmarket_share
      FROM df_browser))
ORDER BY max_market_share_;",3,10,3,1,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0
spider/browser_web/0012,"natural_join(input0, input1), intersect(line0, line0, 'operating_system'), summarise(line1, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT operating_system
      FROM
        (SELECT LHS.id AS id,
                LHS.name AS name,
                LHS.operating_system AS operating_system,
                LHS.client AS client,
                LHS.connection AS CONNECTION,
                RHS.accelerator_id AS accelerator_id,
                RHS.browser_id AS browser_id,
                RHS.compatible_since_year AS compatible_since_year
         FROM df_web_client_accelerator AS LHS
         CROSS JOIN df_accelerator_compatible_browser AS RHS) INTERSECT SELECT operating_system
      FROM
        (SELECT LHS.id AS id,
                LHS.name AS name,
                LHS.operating_system AS operating_system,
                LHS.client AS client,
                LHS.connection AS CONNECTION,
                RHS.accelerator_id AS accelerator_id,
                RHS.browser_id AS browser_id,
                RHS.compatible_since_year AS compatible_since_year
         FROM df_web_client_accelerator AS LHS
         CROSS JOIN df_accelerator_compatible_browser AS RHS)))
ORDER BY count___;",3,13,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0
spider/browser_web/0005,"filter(input0, ""name == 'Safari'"")","SELECT `id`,
       `market_share`
FROM `df_browser`
WHERE (`name` = 'Safari')
ORDER BY id;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/browser_web/0018,"inner_join(input1, input2, ""'id' = 'browser_id'""), inner_join(input0, line0, ""'id' = 'accelerator_id'"")","SELECT name_other AS name___1,
       name AS name___2
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.operating_system AS operating_system,
          LHS.client AS client,
          LHS.connection AS CONNECTION,
          RHS.id AS id_other,
          RHS.name AS name_other,
          RHS.market_share AS market_share,
          RHS.compatible_since_year AS compatible_since_year,
          RHS.browser_id AS browser_id
   FROM df_web_client_accelerator AS LHS
   INNER JOIN
     (SELECT id,
             name,
             market_share,
             accelerator_id,
             compatible_since_year,
             id AS browser_id
      FROM
        (SELECT LHS.id AS id,
                LHS.name AS name,
                LHS.market_share AS market_share,
                RHS.accelerator_id AS accelerator_id,
                RHS.compatible_since_year AS compatible_since_year
         FROM df_browser AS LHS
         INNER JOIN df_accelerator_compatible_browser AS RHS ON (LHS.id = RHS.browser_id))) AS RHS ON (LHS.id = RHS.accelerator_id))
ORDER BY name___1;",2,10,4,0,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0
spider/browser_web/0007,"inner_join(input0, input2, ""'id' = 'browser_id'""), filter(line0, ""name == 'CProxy' | compatible_since_year <= 1998L""), anti_join(input1, line1, ""'id'"")","SELECT `name`
FROM
  (SELECT *
   FROM `df_browser` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT `id`,
                     `name`,
                     `operating_system`,
                     `client`,
                     `connection`,
                     `accelerator_id`,
                     `compatible_since_year`,
                     `id` AS `browser_id`
              FROM
                (SELECT `LHS`.`id` AS `id`,
                        `LHS`.`name` AS `name`,
                        `LHS`.`operating_system` AS `operating_system`,
                        `LHS`.`client` AS `client`,
                        `LHS`.`connection` AS `connection`,
                        `RHS`.`accelerator_id` AS `accelerator_id`,
                        `RHS`.`compatible_since_year` AS `compatible_since_year`
                 FROM `df_web_client_accelerator` AS `LHS`
                 INNER JOIN `df_accelerator_compatible_browser` AS `RHS` ON (`LHS`.`id` = `RHS`.`browser_id`)))
           WHERE (`name` = 'CProxy'
                  OR compatible_since_year <= 1998)) AS RHS
        WHERE (LHS.id = RHS.id) ))
ORDER BY name;",3,19,6,0,6,1,3,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0
spider/browser_web/0001,"filter(input0, 'market_share > 5'), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_browser
WHERE (market_share > 5.0)
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/browser_web/0014,"filter(input0, ""name == 'CACHEbox' & name != 'Fasterfox'""), inner_join(line0, input2, ""'id' = 'accelerator_id'""), inner_join(input1, line1, ""'id' = 'browser_id'"")","SELECT `name`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `LHS`.`market_share` AS `market_share`,
          `RHS`.`id` AS `id_other`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`operating_system` AS `operating_system`,
          `RHS`.`client` AS `client`,
          `RHS`.`connection` AS `connection`,
          `RHS`.`compatible_since_year` AS `compatible_since_year`,
          `RHS`.`accelerator_id` AS `accelerator_id`
   FROM `df_browser` AS `LHS`
   INNER JOIN
     (SELECT `id`,
             `name`,
             `operating_system`,
             `client`,
             `connection`,
             `browser_id`,
             `compatible_since_year`,
             `id` AS `accelerator_id`
      FROM
        (SELECT `LHS`.`id` AS `id`,
                `LHS`.`name` AS `name`,
                `LHS`.`operating_system` AS `operating_system`,
                `LHS`.`client` AS `client`,
                `LHS`.`connection` AS `connection`,
                `RHS`.`browser_id` AS `browser_id`,
                `RHS`.`compatible_since_year` AS `compatible_since_year`
         FROM
           (SELECT *
            FROM `df_web_client_accelerator`
            WHERE (`name` = 'CACHEbox'
                   AND `name` != 'Fasterfox')) AS LHS
         INNER JOIN df_accelerator_compatible_browser AS RHS ON (LHS.id = RHS.accelerator_id))) AS RHS ON (LHS.id = RHS.browser_id))
ORDER BY name;",3,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0
spider/browser_web/0009,"summarise(input1, 'n = n()', ""'browser_id','compatible_since_year'""), mutate(input0, 'n = n()'), inner_join(line1, line0, ""'id' = 'n','n' = 'browser_id'"")","SELECT DISTINCT id,
                name
FROM
  (SELECT id,
          name,
          market_share,
          id AS n,
          compatible_since_year
   FROM
     (SELECT LHS.id AS id,
             LHS.name AS name,
             LHS.market_share AS market_share,
             LHS.n AS n,
             RHS.compatible_since_year AS compatible_since_year
      FROM
        (SELECT id,
                name,
                market_share,
                COUNT(*) OVER () AS n
         FROM df_browser) AS LHS
      INNER JOIN
        (SELECT browser_id,
                compatible_since_year,
                COUNT() AS n
         FROM df_accelerator_compatible_browser
         GROUP BY browser_id,
                  compatible_since_year) AS RHS ON (LHS.id = RHS.n
                                                    AND LHS.n = RHS.browser_id)))
ORDER BY id;",3,13,5,1,5,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0
spider/browser_web/0011,"summarise(input0, 'n = n()', ""'client','connection'""), mutate(line0, 'n_distinct = n_distinct(client)')","SELECT DISTINCT COUNT(DISTINCT client) OVER () AS count_distinct_client_
FROM
  (SELECT client,
          CONNECTION,
          COUNT() AS n
   FROM df_web_client_accelerator
   GROUP BY client,
            CONNECTION)
ORDER BY count_distinct_client_;",2,7,2,2,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/customer_deliveries/0002,"inner_join(input1, input0, ""'product_id'""), summarise(line0, 'n = n()', ""'product_name','product_price'""), limit(line1, 'product_name')","SELECT product_name,
       product_price
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT product_name,
                product_price,
                COUNT() AS n
         FROM
           (SELECT LHS.regular_order_id AS regular_order_id,
                   LHS.product_id AS product_id,
                   RHS.product_name AS product_name,
                   RHS.product_price AS product_price,
                   RHS.product_description AS product_description
            FROM df_regular_order_products AS LHS
            INNER JOIN df_products AS RHS ON (LHS.product_id = RHS.product_id))
         GROUP BY product_name,
                  product_price)
      ORDER BY product_name)
   LIMIT 1);",2,12,5,0,5,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/customer_deliveries/0008,"filter(input0, ""payment_method == 'Visa'""), semi_join(input0, line0)","SELECT `customer_email`,
       `customer_name`
FROM
  (SELECT *
   FROM `df_customers` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customers`
           WHERE (`payment_method` = 'Visa')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id
               AND LHS.payment_method = RHS.payment_method
               AND LHS.customer_name = RHS.customer_name
               AND LHS.customer_phone = RHS.customer_phone
               AND LHS.customer_email = RHS.customer_email
               AND LHS.date_became_customer = RHS.date_became_customer) ))
ORDER BY customer_email;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/customer_deliveries/0003,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_customers)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customer_deliveries/0013,"summarise(input0, 'n = n()', ""'customer_email','payment_method'""), limit(line0, 'desc(payment_method)')","SELECT payment_method
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT customer_email,
                payment_method,
                COUNT() AS n
         FROM df_customers
         GROUP BY customer_email,
                  payment_method)
      ORDER BY payment_method DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customer_deliveries/0006,"limit(input0, 'desc(product_price)')","SELECT product_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_products
      ORDER BY product_price DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customer_deliveries/0004,"summarise(input0, 'n_distinct = n_distinct(payment_method)', ""'payment_method'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count_distinct_payment_method_
FROM
  (SELECT payment_method,
          COUNT(DISTINCT payment_method) AS n_distinct
   FROM df_customers
   GROUP BY payment_method)
ORDER BY count_distinct_payment_method_;",2,7,2,2,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/customer_deliveries/0012,"limit(input0, 'date_became_customer')","SELECT customer_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_customers
      ORDER BY date_became_customer)
   LIMIT 5);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customer_deliveries/0015,"summarise(input0, 'n = n()', ""'route_id','route_name'""), natural_join(input1, line0), limit(line1, 'desc(n)')","SELECT route_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.location_code AS location_code,
                LHS.route_id AS route_id,
                LHS.location_address_id AS location_address_id,
                LHS.location_name AS location_name,
                RHS.route_name AS route_name,
                RHS.n AS n
         FROM df_delivery_route_locations AS LHS
         INNER JOIN
           (SELECT route_id,
                   route_name,
                   COUNT() AS n
            FROM df_delivery_routes
            GROUP BY route_id,
                     route_name) AS RHS ON (LHS.route_id = RHS.route_id))
      ORDER BY n DESC)
   LIMIT 1);",2,13,5,0,5,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/customer_deliveries/0005,"intersect(input0, input0, 'truck_details')","SELECT truck_details
FROM
  (SELECT truck_details
   FROM df_trucks INTERSECT SELECT truck_details
   FROM df_trucks)
ORDER BY truck_details;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/customer_deliveries/0016,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'state_province_county','zip_postcode'"")","SELECT state_province_county,
       n AS count___
FROM
  (SELECT state_province_county,
          zip_postcode,
          COUNT() AS n
   FROM
     (SELECT LHS.address_id AS address_id,
             LHS.address_details AS address_details,
             LHS.city AS city,
             LHS.zip_postcode AS zip_postcode,
             LHS.state_province_county AS state_province_county,
             LHS.country AS country,
             RHS.customer_id AS customer_id,
             RHS.date_from AS date_from,
             RHS.address_type AS address_type,
             RHS.date_to AS date_to
      FROM df_addresses AS LHS
      INNER JOIN df_customer_addresses AS RHS ON (LHS.address_id = RHS.address_id))
   GROUP BY state_province_county,
            zip_postcode)
ORDER BY state_province_county;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/customer_deliveries/0007,"filter(input0, ""state_province_county == 'California'""), semi_join(input2, line0), anti_join(input1, line1, '')","SELECT `customer_name`
FROM
  (SELECT *
   FROM `df_customers` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customer_addresses` AS `LHS`
           WHERE EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM `df_addresses`
                   WHERE (`state_province_county` = 'California')) AS RHS
                WHERE (LHS.address_id = RHS.address_id) )) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_name;",3,20,6,0,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/customer_deliveries/0001,"filter(input0, ""order_status_code == 'Success'"")","SELECT `actual_order_id`
FROM `df_actual_orders`
WHERE (`order_status_code` = 'Success')
ORDER BY actual_order_id;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/customer_deliveries/0014,df_delivery_routes,"SELECT route_name
FROM df_delivery_routes
ORDER BY route_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customer_deliveries/0009,"filter(input0, ""state_province_county == 'California'""), natural_join4(input0, input1, input2, line0)","SELECT `customer_name`,
       `customer_phone`
FROM
  (SELECT `LHS`.`address_id` AS `address_id`,
          `LHS`.`address_details` AS `address_details`,
          `LHS`.`city` AS `city`,
          `LHS`.`zip_postcode` AS `zip_postcode`,
          `LHS`.`state_province_county` AS `state_province_county`,
          `LHS`.`country` AS `country`,
          `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`payment_method` AS `payment_method`,
          `LHS`.`customer_name` AS `customer_name`,
          `LHS`.`customer_phone` AS `customer_phone`,
          `LHS`.`customer_email` AS `customer_email`,
          `LHS`.`date_became_customer` AS `date_became_customer`,
          `LHS`.`date_from` AS `date_from`,
          `LHS`.`address_type` AS `address_type`,
          `LHS`.`date_to` AS `date_to`
   FROM
     (SELECT `LHS`.`address_id` AS `address_id`,
             `LHS`.`address_details` AS `address_details`,
             `LHS`.`city` AS `city`,
             `LHS`.`zip_postcode` AS `zip_postcode`,
             `LHS`.`state_province_county` AS `state_province_county`,
             `LHS`.`country` AS `country`,
             `LHS`.`customer_id` AS `customer_id`,
             `LHS`.`payment_method` AS `payment_method`,
             `LHS`.`customer_name` AS `customer_name`,
             `LHS`.`customer_phone` AS `customer_phone`,
             `LHS`.`customer_email` AS `customer_email`,
             `LHS`.`date_became_customer` AS `date_became_customer`,
             `RHS`.`date_from` AS `date_from`,
             `RHS`.`address_type` AS `address_type`,
             `RHS`.`date_to` AS `date_to`
      FROM
        (SELECT `LHS`.`address_id` AS `address_id`,
                `LHS`.`address_details` AS `address_details`,
                `LHS`.`city` AS `city`,
                `LHS`.`zip_postcode` AS `zip_postcode`,
                `LHS`.`state_province_county` AS `state_province_county`,
                `LHS`.`country` AS `country`,
                `RHS`.`customer_id` AS `customer_id`,
                `RHS`.`payment_method` AS `payment_method`,
                `RHS`.`customer_name` AS `customer_name`,
                `RHS`.`customer_phone` AS `customer_phone`,
                `RHS`.`customer_email` AS `customer_email`,
                `RHS`.`date_became_customer` AS `date_became_customer`
         FROM `df_addresses` AS `LHS`
         CROSS JOIN `df_customers` AS `RHS`) AS `LHS`
      INNER JOIN `df_customer_addresses` AS `RHS` ON (`LHS`.`address_id` = `RHS`.`address_id`
                                                      AND `LHS`.`customer_id` = `RHS`.`customer_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_addresses`
      WHERE (`state_province_county` = 'California')) AS RHS ON (LHS.address_id = RHS.address_id
                                                                 AND LHS.address_details = RHS.address_details
                                                                 AND LHS.city = RHS.city
                                                                 AND LHS.zip_postcode = RHS.zip_postcode
                                                                 AND LHS.state_province_county = RHS.state_province_county
                                                                 AND LHS.country = RHS.country))
ORDER BY customer_name;",2,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
spider/customer_deliveries/0011,df_customers,"SELECT customer_name,
       customer_phone,
       customer_email
FROM df_customers
ORDER BY customer_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customer_deliveries/0010,"inner_join(input0, input1, ""'address_id' = 'employee_address_id'""), anti_join(input0, line0, ""'address_id','state_province_county'"")","SELECT state_province_county
FROM
  (SELECT *
   FROM df_addresses AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT address_id,
                  address_details,
                  city,
                  zip_postcode,
                  state_province_county,
                  country,
                  employee_id,
                  employee_name,
                  employee_phone,
                  address_id AS employee_address_id
           FROM
             (SELECT LHS.address_id AS address_id,
                     LHS.address_details AS address_details,
                     LHS.city AS city,
                     LHS.zip_postcode AS zip_postcode,
                     LHS.state_province_county AS state_province_county,
                     LHS.country AS country,
                     RHS.employee_id AS employee_id,
                     RHS.employee_name AS employee_name,
                     RHS.employee_phone AS employee_phone
              FROM df_addresses AS LHS
              INNER JOIN df_employees AS RHS ON (LHS.address_id = RHS.employee_address_id))) AS RHS
        WHERE (LHS.address_id = RHS.address_id
               AND LHS.state_province_county = RHS.state_province_county) ))
ORDER BY state_province_county;",2,15,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
spider/journal_committee/0002,"intersect(input0, input0, 'name')","SELECT name
FROM
  (SELECT name
   FROM df_editor INTERSECT SELECT name
   FROM df_editor)
ORDER BY name;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/journal_committee/0017,"natural_join(input0, input1), filter(line0, ""work_type == 'Photo'""), summarise(line1, 'meansales = mean(sales, na.rm = T)', ""'work_type'"")","SELECT `meansales` AS `avg_t1_sales_`
FROM
  (SELECT `work_type`,
          AVG(`sales`) AS `meansales`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`journal_id` AS `journal_id`,
                `LHS`.`date` AS `date`,
                `LHS`.`theme` AS `theme`,
                `LHS`.`sales` AS `sales`,
                `RHS`.`editor_id` AS `editor_id`,
                `RHS`.`work_type` AS `work_type`
         FROM `df_journal` AS `LHS`
         INNER JOIN `df_journal_committee` AS `RHS` ON (`LHS`.`journal_id` = `RHS`.`journal_id`))
      WHERE (`work_type` = 'Photo'))
   GROUP BY work_type)
ORDER BY avg_t1_sales_;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/journal_committee/0008,"summarise(input0, 'n = n()', ""'age','editor_id'""), limit(line0, 'desc(age)')","SELECT age
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT age,
                editor_id,
                COUNT() AS n
         FROM df_editor
         GROUP BY age,
                  editor_id)
      ORDER BY age DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/journal_committee/0003,df_editor,"SELECT name,
       age
FROM df_editor
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/journal_committee/0013,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'editor_id','name'"")","SELECT editor_id,
       name,
       n AS count___
FROM
  (SELECT editor_id,
          name,
          COUNT() AS n
   FROM
     (SELECT LHS.editor_id AS editor_id,
             LHS.name AS name,
             LHS.age AS age,
             RHS.journal_id AS journal_id,
             RHS.work_type AS work_type
      FROM df_editor AS LHS
      INNER JOIN df_journal_committee AS RHS ON (LHS.editor_id = RHS.editor_id))
   GROUP BY editor_id,
            name)
ORDER BY editor_id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/journal_committee/0006,"limit(input0, 'age')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_editor
      ORDER BY age)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/journal_committee/0004,"filter(input0, 'age > 25'), inner_join(input0, line0, ""'editor_id','name'"")","SELECT name
FROM
  (SELECT LHS.editor_id AS editor_id,
          LHS.name AS name,
          LHS.age AS age,
          RHS.age AS age_other
   FROM df_editor AS LHS
   INNER JOIN
     (SELECT *
      FROM df_editor
      WHERE (age > 25.0)) AS RHS ON (LHS.editor_id = RHS.editor_id
                                     AND LHS.name = RHS.name))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/journal_committee/0012,"filter(input0, 'sales > 3000L'), natural_join3(input1, input2, line0)","SELECT name
FROM
  (SELECT LHS.editor_id AS editor_id,
          LHS.name AS name,
          LHS.age AS age,
          LHS.journal_id AS journal_id,
          LHS.work_type AS work_type,
          RHS.date AS date,
          RHS.theme AS theme,
          RHS.sales AS sales
   FROM
     (SELECT LHS.editor_id AS editor_id,
             LHS.name AS name,
             LHS.age AS age,
             RHS.journal_id AS journal_id,
             RHS.work_type AS work_type
      FROM df_editor AS LHS
      INNER JOIN df_journal_committee AS RHS ON (LHS.editor_id = RHS.editor_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_journal
      WHERE (sales > 3000)) AS RHS ON (LHS.journal_id = RHS.journal_id))
ORDER BY name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/journal_committee/0015,"anti_join(input0, input1, '')","SELECT name
FROM
  (SELECT *
   FROM df_editor AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_journal_committee AS RHS
        WHERE (LHS.editor_id = RHS.editor_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/journal_committee/0005,"inner_join(input0, input0, ""'name'""), filter(line0, 'age == 24 | age == 25')","SELECT name
FROM
  (SELECT LHS.editor_id AS editor_id,
          LHS.name AS name,
          LHS.age AS age,
          RHS.editor_id AS editor_id_other,
          RHS.age AS age_other
   FROM df_editor AS LHS
   INNER JOIN df_editor AS RHS ON (LHS.name = RHS.name))
WHERE (age = 24.0
       OR age = 25.0)
ORDER BY name;",2,7,2,0,2,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/journal_committee/0016,"anti_join(input0, input1, ""'journal_id'"")","SELECT date, theme,
             sales
FROM
  (SELECT *
   FROM df_journal AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_journal_committee AS RHS
        WHERE (LHS.journal_id = RHS.journal_id) ))
ORDER BY date;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/journal_committee/0007,"summarise(input0, 'n = n()', ""'age','name'"")","SELECT age,
       n AS count___
FROM
  (SELECT age,
          name,
          COUNT() AS n
   FROM df_editor
   GROUP BY age,
            name)
ORDER BY age;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/journal_committee/0001,"mutate(input0, 'n = n()'), inner_join(input0, line0, ""'editor_id' = 'n','age' = 'age'"")","SELECT editor_id AS count___
FROM
  (SELECT LHS.editor_id AS editor_id,
          LHS.name AS name,
          LHS.age AS age,
          RHS.editor_id AS editor_id_other,
          RHS.name AS name_other
   FROM df_editor AS LHS
   INNER JOIN
     (SELECT editor_id,
             name,
             age,
             COUNT(*) OVER () AS n
      FROM df_editor) AS RHS ON (LHS.editor_id = RHS.n
                                 AND LHS.age = RHS.age))
ORDER BY count___;",2,8,3,0,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/journal_committee/0014,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'age','name'""), filter(line1, 'n >= 2L')","SELECT name
FROM
  (SELECT age,
          name,
          COUNT() AS n
   FROM
     (SELECT LHS.editor_id AS editor_id,
             LHS.name AS name,
             LHS.age AS age,
             RHS.journal_id AS journal_id,
             RHS.work_type AS work_type
      FROM df_editor AS LHS
      INNER JOIN df_journal_committee AS RHS ON (LHS.editor_id = RHS.editor_id))
   GROUP BY age,
            name)
WHERE (n >= 2)
ORDER BY name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/journal_committee/0009,df_journal,"SELECT theme
FROM df_journal
ORDER BY theme;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/journal_committee/0011,"natural_join(input1, input2), left_join(line0, input0)","SELECT name,
       age,
       theme
FROM
  (SELECT LHS.editor_id AS editor_id,
          LHS.name AS name,
          LHS.age AS age,
          LHS.journal_id AS journal_id,
          LHS.work_type AS work_type,
          RHS.date AS date,
          RHS.theme AS theme,
          RHS.sales AS sales
   FROM
     (SELECT LHS.editor_id AS editor_id,
             LHS.name AS name,
             LHS.age AS age,
             RHS.journal_id AS journal_id,
             RHS.work_type AS work_type
      FROM df_editor AS LHS
      INNER JOIN df_journal_committee AS RHS ON (LHS.editor_id = RHS.editor_id)) AS LHS
   LEFT JOIN df_journal AS RHS ON (LHS.journal_id = RHS.journal_id))
ORDER BY name;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
spider/journal_committee/0010,"natural_join(input1, input2), left_join(line0, input0)","SELECT name,
       theme
FROM
  (SELECT LHS.editor_id AS editor_id,
          LHS.name AS name,
          LHS.age AS age,
          LHS.journal_id AS journal_id,
          LHS.work_type AS work_type,
          RHS.date AS date,
          RHS.theme AS theme,
          RHS.sales AS sales
   FROM
     (SELECT LHS.editor_id AS editor_id,
             LHS.name AS name,
             LHS.age AS age,
             RHS.journal_id AS journal_id,
             RHS.work_type AS work_type
      FROM df_editor AS LHS
      INNER JOIN df_journal_committee AS RHS ON (LHS.editor_id = RHS.editor_id)) AS LHS
   LEFT JOIN df_journal AS RHS ON (LHS.journal_id = RHS.journal_id))
ORDER BY name;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0033,"mutate(input0, 'n_distinct = n_distinct(organisation_id)'), filter(line0, 'n_distinct >= 1L | n_distinct == organisation_id'), inner_join(line1, line0, ""'project_id' = 'n_distinct','organisation_id' = 'organisation_id'"")","SELECT project_details_other AS project_details
FROM
  (SELECT LHS.project_id AS project_id,
          LHS.organisation_id AS organisation_id,
          LHS.project_details AS project_details,
          LHS.n_distinct AS n_distinct,
          RHS.project_id AS project_id_other,
          RHS.project_details AS project_details_other
   FROM
     (SELECT *
      FROM
        (SELECT project_id,
                organisation_id,
                project_details,
                COUNT(DISTINCT organisation_id) OVER () AS n_distinct
         FROM df_projects)
      WHERE (n_distinct >= 1
             OR n_distinct = organisation_id)) AS LHS
   INNER JOIN
     (SELECT project_id,
             organisation_id,
             project_details,
             COUNT(DISTINCT organisation_id) OVER () AS n_distinct
      FROM df_projects) AS RHS ON (LHS.project_id = RHS.n_distinct
                                   AND LHS.organisation_id = RHS.organisation_id))
ORDER BY project_details;",3,17,5,2,5,1,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0037,"filter(input0, ""date_from != parse_datetime('2003-04-19 15:06:20') | date_from != parse_datetime('2016-03-15 00:33:18')"")","SELECT DISTINCT `role_code`
FROM `df_project_staff`
WHERE (`date_from` != parse_datetime('2003-04-19 15:06:20')
       OR `date_from` != parse_datetime('2016-03-15 00:33:18'))
ORDER BY role_code;",1,5,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0036,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'project_details','task_id'"")","SELECT n AS count___,
       project_details
FROM
  (SELECT project_details,
          task_id,
          COUNT() AS n
   FROM
     (SELECT LHS.project_id AS project_id,
             LHS.organisation_id AS organisation_id,
             LHS.project_details AS project_details,
             RHS.task_id AS task_id,
             RHS.task_details AS task_details,
             RHS.eg_agree_objectives AS eg_agree_objectives
      FROM df_projects AS LHS
      INNER JOIN df_tasks AS RHS ON (LHS.project_id = RHS.project_id))
   GROUP BY project_details,
            task_id)
ORDER BY count___;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0017,"filter(input0, ""role_code == 'researcher'"")","SELECT `role_description`
FROM `df_staff_roles`
WHERE (`role_code` = 'researcher')
ORDER BY role_description;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0008,"natural_join3(input1, input2, input3), filter(line0, ""organisation_type_description != 'Research' | grant_amount < 5000""), anti_join(input0, line1, ""'grant_id'"")","SELECT `sent_date`
FROM
  (SELECT *
   FROM `df_documents` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT `LHS`.`grant_id` AS `grant_id`,
                     `LHS`.`organisation_id` AS `organisation_id`,
                     `LHS`.`grant_amount` AS `grant_amount`,
                     `LHS`.`grant_start_date` AS `grant_start_date`,
                     `LHS`.`grant_end_date` AS `grant_end_date`,
                     `LHS`.`other_details` AS `other_details`,
                     `LHS`.`organisation_type` AS `organisation_type`,
                     `LHS`.`organisation_type_description` AS `organisation_type_description`,
                     `RHS`.`organisation_details` AS `organisation_details`
              FROM
                (SELECT `LHS`.`grant_id` AS `grant_id`,
                        `LHS`.`organisation_id` AS `organisation_id`,
                        `LHS`.`grant_amount` AS `grant_amount`,
                        `LHS`.`grant_start_date` AS `grant_start_date`,
                        `LHS`.`grant_end_date` AS `grant_end_date`,
                        `LHS`.`other_details` AS `other_details`,
                        `RHS`.`organisation_type` AS `organisation_type`,
                        `RHS`.`organisation_type_description` AS `organisation_type_description`
                 FROM `df_grants` AS `LHS`
                 CROSS JOIN `df_organisation_types` AS `RHS`) AS `LHS`
              INNER JOIN `df_organisations` AS `RHS` ON (`LHS`.`organisation_id` = `RHS`.`organisation_id`
                                                         AND `LHS`.`organisation_type` = `RHS`.`organisation_type`))
           WHERE (`organisation_type_description` != 'Research'
                  OR grant_amount < 5000.0)) AS RHS
        WHERE (LHS.grant_id = RHS.grant_id) ))
ORDER BY sent_date;",3,19,6,0,6,1,3,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0
spider/tracking_grants_for_research/0039,"summarise(input0, 'n = n()', ""'role_code'""), limit(line0, 'desc(role_code)')","SELECT role_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT role_code,
                COUNT() AS n
         FROM df_project_staff
         GROUP BY role_code)
      ORDER BY role_code DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0038,"inner_join(input1, input0, ""'outcome_code'"")","SELECT outcome_description
FROM
  (SELECT LHS.outcome_code AS outcome_code,
          LHS.outcome_description AS outcome_description,
          RHS.project_id AS project_id,
          RHS.outcome_details AS outcome_details
   FROM df_research_outcomes AS LHS
   INNER JOIN df_project_outcomes AS RHS ON (LHS.outcome_code = RHS.outcome_code))
ORDER BY outcome_description;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0003,"filter(input1, ""organisation_type_description == 'Research'""), natural_join4(input0, input1, input2, line0), summarise(line1, 'sumgrant_amount = sum(grant_amount)', '')","SELECT `sumgrant_amount` AS `sum_grant_amount_`
FROM
  (SELECT SUM(`grant_amount`) AS `sumgrant_amount`
   FROM
     (SELECT `LHS`.`grant_id` AS `grant_id`,
             `LHS`.`organisation_id` AS `organisation_id`,
             `LHS`.`grant_amount` AS `grant_amount`,
             `LHS`.`grant_start_date` AS `grant_start_date`,
             `LHS`.`grant_end_date` AS `grant_end_date`,
             `LHS`.`other_details` AS `other_details`,
             `LHS`.`organisation_type` AS `organisation_type`,
             `LHS`.`organisation_type_description` AS `organisation_type_description`,
             `LHS`.`organisation_details` AS `organisation_details`
      FROM
        (SELECT `LHS`.`grant_id` AS `grant_id`,
                `LHS`.`organisation_id` AS `organisation_id`,
                `LHS`.`grant_amount` AS `grant_amount`,
                `LHS`.`grant_start_date` AS `grant_start_date`,
                `LHS`.`grant_end_date` AS `grant_end_date`,
                `LHS`.`other_details` AS `other_details`,
                `LHS`.`organisation_type` AS `organisation_type`,
                `LHS`.`organisation_type_description` AS `organisation_type_description`,
                `RHS`.`organisation_details` AS `organisation_details`
         FROM
           (SELECT `LHS`.`grant_id` AS `grant_id`,
                   `LHS`.`organisation_id` AS `organisation_id`,
                   `LHS`.`grant_amount` AS `grant_amount`,
                   `LHS`.`grant_start_date` AS `grant_start_date`,
                   `LHS`.`grant_end_date` AS `grant_end_date`,
                   `LHS`.`other_details` AS `other_details`,
                   `RHS`.`organisation_type` AS `organisation_type`,
                   `RHS`.`organisation_type_description` AS `organisation_type_description`
            FROM `df_grants` AS `LHS`
            CROSS JOIN `df_organisation_types` AS `RHS`) AS `LHS`
         INNER JOIN `df_organisations` AS `RHS` ON (`LHS`.`organisation_id` = `RHS`.`organisation_id`
                                                    AND `LHS`.`organisation_type` = `RHS`.`organisation_type`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_organisation_types`
         WHERE (`organisation_type_description` = 'Research')) AS RHS ON (LHS.organisation_type = RHS.organisation_type
                                                                          AND LHS.organisation_type_description = RHS.organisation_type_description)))
ORDER BY sum_grant_amount_;",3,15,6,0,6,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
spider/tracking_grants_for_research/0027,"filter(input0, ""organisation_type_description == 'Sponsor'""), natural_join3(input0, input1, line0)","SELECT `organisation_details`
FROM
  (SELECT `LHS`.`organisation_type` AS `organisation_type`,
          `LHS`.`organisation_type_description` AS `organisation_type_description`,
          `LHS`.`organisation_id` AS `organisation_id`,
          `LHS`.`organisation_details` AS `organisation_details`
   FROM
     (SELECT `LHS`.`organisation_type` AS `organisation_type`,
             `LHS`.`organisation_type_description` AS `organisation_type_description`,
             `RHS`.`organisation_id` AS `organisation_id`,
             `RHS`.`organisation_details` AS `organisation_details`
      FROM `df_organisation_types` AS `LHS`
      INNER JOIN `df_organisations` AS `RHS` ON (`LHS`.`organisation_type` = `RHS`.`organisation_type`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_organisation_types`
      WHERE (`organisation_type_description` = 'Sponsor')) AS RHS ON (LHS.organisation_type = RHS.organisation_type
                                                                      AND LHS.organisation_type_description = RHS.organisation_type_description))
ORDER BY organisation_details;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/tracking_grants_for_research/0022,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'outcome_code','role_description'""), inner_join(line1, line0, ""'n' = 'project_id','outcome_code' = 'outcome_code'"")","SELECT DISTINCT role_description,
                staff_id
FROM
  (SELECT LHS.outcome_code AS outcome_code,
          LHS.role_description AS role_description,
          LHS.n AS n,
          RHS.outcome_details AS outcome_details,
          RHS.staff_id AS staff_id,
          RHS.role_code AS role_code,
          RHS.date_from AS date_from,
          RHS.date_to AS date_to,
          RHS.other_details AS other_details,
          RHS.role_description AS role_description_other
   FROM
     (SELECT outcome_code,
             role_description,
             COUNT() AS n
      FROM
        (SELECT LHS.project_id AS project_id,
                LHS.outcome_code AS outcome_code,
                LHS.outcome_details AS outcome_details,
                LHS.staff_id AS staff_id,
                LHS.role_code AS role_code,
                LHS.date_from AS date_from,
                LHS.date_to AS date_to,
                LHS.other_details AS other_details,
                RHS.role_description AS role_description
         FROM
           (SELECT LHS.project_id AS project_id,
                   LHS.outcome_code AS outcome_code,
                   LHS.outcome_details AS outcome_details,
                   RHS.staff_id AS staff_id,
                   RHS.role_code AS role_code,
                   RHS.date_from AS date_from,
                   RHS.date_to AS date_to,
                   RHS.other_details AS other_details
            FROM df_project_outcomes AS LHS
            INNER JOIN df_project_staff AS RHS ON (LHS.project_id = RHS.project_id)) AS LHS
         INNER JOIN df_staff_roles AS RHS ON (LHS.role_code = RHS.role_code))
      GROUP BY outcome_code,
               role_description) AS LHS
   INNER JOIN
     (SELECT LHS.project_id AS project_id,
             LHS.outcome_code AS outcome_code,
             LHS.outcome_details AS outcome_details,
             LHS.staff_id AS staff_id,
             LHS.role_code AS role_code,
             LHS.date_from AS date_from,
             LHS.date_to AS date_to,
             LHS.other_details AS other_details,
             RHS.role_description AS role_description
      FROM
        (SELECT LHS.project_id AS project_id,
                LHS.outcome_code AS outcome_code,
                LHS.outcome_details AS outcome_details,
                RHS.staff_id AS staff_id,
                RHS.role_code AS role_code,
                RHS.date_from AS date_from,
                RHS.date_to AS date_to,
                RHS.other_details AS other_details
         FROM df_project_outcomes AS LHS
         INNER JOIN df_project_staff AS RHS ON (LHS.project_id = RHS.project_id)) AS LHS
      INNER JOIN df_staff_roles AS RHS ON (LHS.role_code = RHS.role_code)) AS RHS ON (LHS.n = RHS.project_id
                                                                                      AND LHS.outcome_code = RHS.outcome_code))
ORDER BY role_description;",3,20,7,1,7,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0
spider/tracking_grants_for_research/0030,"limit(input0, 'desc(date_to)')","SELECT date_to
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_project_staff
      ORDER BY date_to DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0013,"summarise(input0, 'n_distinct = n_distinct(role_code)', '')","SELECT n_distinct AS count_distinct_role_code_
FROM
  (SELECT COUNT(DISTINCT role_code) AS n_distinct
   FROM df_project_staff)
ORDER BY count_distinct_role_code_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0006,"summarise(input1, 'n = n()', ""'employer_organisation_id','staff_id'""), inner_join(input0, line0, ""'organisation_id' = 'employer_organisation_id'""), limit(line1, 'desc(organisation_details)')","SELECT organisation_type,
       organisation_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT organisation_id,
                organisation_type,
                organisation_details,
                staff_id,
                n,
                organisation_id AS employer_organisation_id
         FROM
           (SELECT LHS.organisation_id AS organisation_id,
                   LHS.organisation_type AS organisation_type,
                   LHS.organisation_details AS organisation_details,
                   RHS.staff_id AS staff_id,
                   RHS.n AS n
            FROM df_organisations AS LHS
            INNER JOIN
              (SELECT employer_organisation_id,
                      staff_id,
                      COUNT() AS n
               FROM df_research_staff
               GROUP BY employer_organisation_id,
                        staff_id) AS RHS ON (LHS.organisation_id = RHS.employer_organisation_id)))
      ORDER BY organisation_details DESC)
   LIMIT 1);",2,15,6,0,6,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0012,"filter(input0, ""role_code == 'researcher'"")","SELECT `date_from`,
       `date_to`
FROM `df_project_staff`
WHERE (`role_code` = 'researcher')
ORDER BY date_from;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0026,"filter(input1, ""organisation_details == 'quo'""), natural_join(input0, line0)","SELECT `organisation_type_description`
FROM
  (SELECT `LHS`.`organisation_type` AS `organisation_type`,
          `LHS`.`organisation_type_description` AS `organisation_type_description`,
          `RHS`.`organisation_id` AS `organisation_id`,
          `RHS`.`organisation_details` AS `organisation_details`
   FROM `df_organisation_types` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_organisations`
      WHERE (`organisation_details` = 'quo')) AS RHS ON (LHS.organisation_type = RHS.organisation_type))
ORDER BY organisation_type_description;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0005,"filter(input0, 'grant_amount >= 6000'), mutate(line0, 'sumgrant_amount = sum(grant_amount)'), semi_join(input1, line1)","SELECT organisation_id,
       organisation_details
FROM
  (SELECT *
   FROM df_organisations AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT grant_id,
                  organisation_id,
                  grant_amount,
                  grant_start_date,
                  grant_end_date,
                  other_details,
                  SUM(grant_amount) OVER () AS sumgrant_amount
           FROM df_grants
           WHERE (grant_amount >= 6000.0)) AS RHS
        WHERE (LHS.organisation_id = RHS.organisation_id) ))
ORDER BY organisation_id;",3,13,4,0,4,0,3,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0
spider/tracking_grants_for_research/0016,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'project_id'"")","SELECT project_id,
       n AS count___
FROM
  (SELECT project_id,
          COUNT() AS n
   FROM
     (SELECT LHS.staff_id AS staff_id,
             LHS.project_id AS project_id,
             LHS.role_code AS role_code,
             LHS.date_from AS date_from,
             LHS.date_to AS date_to,
             LHS.other_details AS other_details,
             RHS.organisation_id AS organisation_id,
             RHS.project_details AS project_details
      FROM df_project_staff AS LHS
      INNER JOIN df_projects AS RHS ON (LHS.project_id = RHS.project_id))
   GROUP BY project_id)
ORDER BY project_id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0018,"limit(input0, 'date_from')","SELECT date_from
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_project_staff
      ORDER BY date_from)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0035,"summarise(input0, 'n = n()', ""'eg_agree_objectives','task_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT eg_agree_objectives,
          task_id,
          COUNT() AS n
   FROM df_tasks
   GROUP BY eg_agree_objectives,
            task_id)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0020,"anti_join(input1, input0, ""'project_id'"")","SELECT project_details
FROM
  (SELECT *
   FROM df_projects AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_project_outcomes AS RHS
        WHERE (LHS.project_id = RHS.project_id) ))
ORDER BY project_details;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/tracking_grants_for_research/0019,"summarise(input0, 'n = n()', ""'project_id'""), inner_join(line0, input1, ""'project_id' = 'project_id','n' = 'organisation_id'"")","SELECT project_details,
       project_id
FROM
  (SELECT LHS.project_id AS project_id,
          LHS.n AS n,
          RHS.project_details AS project_details
   FROM
     (SELECT project_id,
             COUNT() AS n
      FROM df_project_outcomes
      GROUP BY project_id) AS LHS
   INNER JOIN df_projects AS RHS ON (LHS.project_id = RHS.project_id
                                     AND LHS.n = RHS.organisation_id))
ORDER BY project_details;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0007,"summarise(input0, 'n = n()', ""'organisation_details','organisation_type'""), inner_join(line0, input1, ""'n' = 'staff_id','organisation_details' = 'staff_details'"")","SELECT organisation_type
FROM
  (SELECT organisation_details,
          organisation_type,
          n,
          employer_organisation_id,
          n AS staff_id
   FROM
     (SELECT LHS.organisation_details AS organisation_details,
             LHS.organisation_type AS organisation_type,
             LHS.n AS n,
             RHS.employer_organisation_id AS employer_organisation_id
      FROM
        (SELECT organisation_details,
                organisation_type,
                COUNT() AS n
         FROM df_organisations
         GROUP BY organisation_details,
                  organisation_type) AS LHS
      INNER JOIN df_research_staff AS RHS ON (LHS.n = RHS.staff_id
                                              AND LHS.organisation_details = RHS.staff_details)))
ORDER BY organisation_type;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0034,df_research_staff,"SELECT staff_details
FROM df_research_staff
ORDER BY staff_details;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0001,"inner_join(input0, input1, ""'grant_id'""), filter(line0, ""sent_date < parse_datetime('1986-08-26 20:49:27') & grant_end_date > parse_datetime('1989-03-16 18:27:16')"")","SELECT DISTINCT `grant_amount`
FROM
  (SELECT `LHS`.`document_id` AS `document_id`,
          `LHS`.`document_type_code` AS `document_type_code`,
          `LHS`.`grant_id` AS `grant_id`,
          `LHS`.`sent_date` AS `sent_date`,
          `LHS`.`response_received_date` AS `response_received_date`,
          `LHS`.`other_details` AS `other_details`,
          `RHS`.`organisation_id` AS `organisation_id`,
          `RHS`.`grant_amount` AS `grant_amount`,
          `RHS`.`grant_start_date` AS `grant_start_date`,
          `RHS`.`grant_end_date` AS `grant_end_date`,
          `RHS`.`other_details` AS `other_details_other`
   FROM `df_documents` AS `LHS`
   INNER JOIN `df_grants` AS `RHS` ON (`LHS`.`grant_id` = `RHS`.`grant_id`))
WHERE (`sent_date` < parse_datetime('1986-08-26 20:49:27')
       AND `grant_end_date` > parse_datetime('1989-03-16 18:27:16'))
ORDER BY grant_amount;",2,7,2,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0014,"summarise(input0, 'sumgrant_amount = sum(grant_amount)', ""'organisation_id'"")","SELECT sumgrant_amount AS sum_grant_amount_,
       organisation_id
FROM
  (SELECT organisation_id,
          SUM(grant_amount) AS sumgrant_amount
   FROM df_grants
   GROUP BY organisation_id)
ORDER BY sum_grant_amount_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0009,"natural_join(input0, input2), filter(line0, ""document_description == 'Regular' | grant_amount >= 100""), inner_join(line1, input1, ""'document_type_code','grant_id'"")","SELECT `response_received_date`
FROM
  (SELECT `LHS`.`document_type_code` AS `document_type_code`,
          `LHS`.`document_description` AS `document_description`,
          `LHS`.`grant_id` AS `grant_id`,
          `LHS`.`organisation_id` AS `organisation_id`,
          `LHS`.`grant_amount` AS `grant_amount`,
          `LHS`.`grant_start_date` AS `grant_start_date`,
          `LHS`.`grant_end_date` AS `grant_end_date`,
          `LHS`.`other_details` AS `other_details`,
          `RHS`.`document_id` AS `document_id`,
          `RHS`.`sent_date` AS `sent_date`,
          `RHS`.`response_received_date` AS `response_received_date`,
          `RHS`.`other_details` AS `other_details_other`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`document_type_code` AS `document_type_code`,
                `LHS`.`document_description` AS `document_description`,
                `RHS`.`grant_id` AS `grant_id`,
                `RHS`.`organisation_id` AS `organisation_id`,
                `RHS`.`grant_amount` AS `grant_amount`,
                `RHS`.`grant_start_date` AS `grant_start_date`,
                `RHS`.`grant_end_date` AS `grant_end_date`,
                `RHS`.`other_details` AS `other_details`
         FROM `df_document_types` AS `LHS`
         CROSS JOIN `df_grants` AS `RHS`)
      WHERE (`document_description` = 'Regular'
             OR grant_amount >= 100.0)) AS LHS
   INNER JOIN df_documents AS RHS ON (LHS.document_type_code = RHS.document_type_code
                                      AND LHS.grant_id = RHS.grant_id))
ORDER BY response_received_date;",3,11,4,0,4,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0025,"summarise(input0, 'n = n()', ""'grant_id','other_details'""), limit(line0, 'desc(n)')","SELECT grant_id,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT grant_id,
                other_details,
                COUNT() AS n
         FROM df_documents
         GROUP BY grant_id,
                  other_details)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0029,"filter(input0, ""role_code == 'leader' | date_from < parse_datetime('1989-04-24 23:51:54')""), mutate(line0, 'n_distinct = n_distinct(date_from)')","SELECT DISTINCT COUNT(DISTINCT `date_from`) OVER () AS `count___`
FROM `df_project_staff`
WHERE (`role_code` = 'leader'
       OR `date_from` < parse_datetime('1989-04-24 23:51:54'))
ORDER BY count___;",2,7,1,2,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0010,"filter(input0, ""role_code == 'researcher'""), anti_join(input1, line0, '')","SELECT `project_details`
FROM
  (SELECT *
   FROM `df_projects` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_project_staff`
           WHERE (`role_code` = 'researcher')) AS RHS
        WHERE (LHS.project_id = RHS.project_id) ))
ORDER BY project_details;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/tracking_grants_for_research/0028,"filter(input0, ""outcome_code == 'Patent'""), summarise(line0, 'n = n()', ""'outcome_details'"")","SELECT `n` AS `count___`
FROM
  (SELECT `outcome_details`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_project_outcomes`
      WHERE (`outcome_code` = 'Patent'))
   GROUP BY outcome_details)
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_grants_for_research/0031,"filter(input1, ""project_details == 'sint'""), natural_join3(input0, input2, line0)","SELECT `outcome_description`
FROM
  (SELECT `LHS`.`project_id` AS `project_id`,
          `LHS`.`outcome_code` AS `outcome_code`,
          `LHS`.`outcome_details` AS `outcome_details`,
          `LHS`.`outcome_description` AS `outcome_description`,
          `RHS`.`organisation_id` AS `organisation_id`,
          `RHS`.`project_details` AS `project_details`
   FROM
     (SELECT `LHS`.`project_id` AS `project_id`,
             `LHS`.`outcome_code` AS `outcome_code`,
             `LHS`.`outcome_details` AS `outcome_details`,
             `RHS`.`outcome_description` AS `outcome_description`
      FROM `df_project_outcomes` AS `LHS`
      INNER JOIN `df_research_outcomes` AS `RHS` ON (`LHS`.`outcome_code` = `RHS`.`outcome_code`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_projects`
      WHERE (`project_details` = 'sint')) AS RHS ON (LHS.project_id = RHS.project_id))
ORDER BY outcome_description;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/epinions_1/0002,df_item,"SELECT i_id,
       title
FROM df_item
ORDER BY i_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/epinions_1/0017,df_item,"SELECT title
FROM df_item
ORDER BY title;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/epinions_1/0008,"mutate(input0, 'n_distinct = n_distinct(i_id)')","SELECT DISTINCT COUNT(DISTINCT i_id) OVER () AS count_distinct_i_id_
FROM df_review
ORDER BY count_distinct_i_id_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/epinions_1/0003,"summarise(input0, 'n = n()', ""'a_id'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT a_id,
             COUNT() AS n
      FROM df_review
      GROUP BY a_id))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/epinions_1/0027,"anti_join(input0, input1, ""'i_id'"")","SELECT title
FROM
  (SELECT *
   FROM df_item AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_review AS RHS
        WHERE (LHS.i_id = RHS.i_id) ))
ORDER BY title;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/epinions_1/0022,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'name','u_id'"")","SELECT name,
       n AS count___
FROM
  (SELECT name,
          u_id,
          COUNT() AS n
   FROM
     (SELECT LHS.a_id AS a_id,
             LHS.u_id AS u_id,
             LHS.i_id AS i_id,
             LHS.rating AS rating,
             LHS.rank AS rank,
             RHS.name AS name
      FROM df_review AS LHS
      INNER JOIN df_useracct AS RHS ON (LHS.u_id = RHS.u_id))
   GROUP BY name,
            u_id)
ORDER BY name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/epinions_1/0006,"summarise(input0, 'minrank = min(rank)', ""'rank'""), summarise(line0, 'rank = min(rank)', '')","SELECT rank AS min_rank_
FROM
  (SELECT MIN(rank) AS rank
   FROM
     (SELECT rank,
             MIN(rank) AS minrank
      FROM df_review
      GROUP BY rank))
ORDER BY min_rank_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/epinions_1/0004,"mutate(input0, 'n = n()'), inner_join(line0, line0, ""'u_id' = 'n'"")","SELECT DISTINCT u_id AS count___
FROM
  (SELECT LHS.u_id AS u_id,
          LHS.name AS name,
          LHS.n AS n,
          RHS.u_id AS u_id_other,
          RHS.name AS name_other
   FROM
     (SELECT u_id,
             name,
             COUNT(*) OVER () AS n
      FROM df_useracct) AS LHS
   INNER JOIN
     (SELECT u_id,
             name,
             COUNT(*) OVER () AS n
      FROM df_useracct) AS RHS ON (LHS.u_id = RHS.n))
ORDER BY count___;",2,12,4,1,4,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/epinions_1/0012,"summarise(input1, 'meanrating = mean(rating, na.rm = T)', ""'i_id','rank'""), left_join(input0, line0), inner_join(line1, line1, ""'rank' = 'i_id','title' = 'title'"")","SELECT DISTINCT title
FROM
  (SELECT LHS.i_id AS i_id,
          LHS.title AS title,
          LHS.rank AS rank,
          LHS.meanrating AS meanrating,
          RHS.rank AS rank_other,
          RHS.meanrating AS meanrating_other
   FROM
     (SELECT LHS.i_id AS i_id,
             LHS.title AS title,
             RHS.rank AS rank,
             RHS.meanrating AS meanrating
      FROM df_item AS LHS
      LEFT JOIN
        (SELECT i_id,
                rank,
                AVG(rating) AS meanrating
         FROM df_review
         GROUP BY i_id,
                  rank) AS RHS ON (LHS.i_id = RHS.i_id)) AS LHS
   INNER JOIN
     (SELECT LHS.i_id AS i_id,
             LHS.title AS title,
             RHS.rank AS rank,
             RHS.meanrating AS meanrating
      FROM df_item AS LHS
      LEFT JOIN
        (SELECT i_id,
                rank,
                AVG(rating) AS meanrating
         FROM df_review
         GROUP BY i_id,
                  rank) AS RHS ON (LHS.i_id = RHS.i_id)) AS RHS ON (LHS.rank = RHS.i_id
                                                                    AND LHS.title = RHS.title))
ORDER BY title;",3,16,6,1,6,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0
spider/epinions_1/0026,"inner_join(input0, input1, ""'u_id' = 'target_u_id'""), limit(line0, 'u_id')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT u_id,
                name,
                source_u_id,
                trust,
                u_id AS target_u_id
         FROM
           (SELECT LHS.u_id AS u_id,
                   LHS.name AS name,
                   RHS.source_u_id AS source_u_id,
                   RHS.trust AS trust
            FROM df_useracct AS LHS
            INNER JOIN df_trust AS RHS ON (LHS.u_id = RHS.target_u_id)))
      ORDER BY u_id)
   LIMIT 1);",1,12,5,0,5,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/epinions_1/0015,"filter(input1, 'rank > 3L & rank != 5L'), summarise(line0, 'meanrank = mean(rank, na.rm = T)', ""'i_id'""), semi_join(input0, line1)","SELECT title
FROM
  (SELECT *
   FROM df_item AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT i_id,
                  AVG(rank) AS meanrank
           FROM df_review
           WHERE (rank > 3
                  AND rank != 5)
           GROUP BY i_id) AS RHS
        WHERE (LHS.i_id = RHS.i_id) ))
ORDER BY title;",3,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0
spider/epinions_1/0005,"mutate(input0, 'meanrating = mean(rating, na.rm = T)'), mutate(line0, 'maxrating = max(rating)')","SELECT DISTINCT meanrating AS avg_rating_,
                MAX(rating) OVER () AS max_rating_
FROM
  (SELECT a_id,
          u_id,
          i_id,
          rating,
          rank,
          AVG(rating) OVER () AS meanrating
   FROM df_review)
ORDER BY avg_rating_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/epinions_1/0018,"mutate(input1, 'n = n()'), inner_join(line0, input0, ""'u_id' = 'u_id','n' = 'a_id'"")","SELECT name
FROM
  (SELECT LHS.u_id AS u_id,
          LHS.name AS name,
          LHS.n AS n,
          RHS.i_id AS i_id,
          RHS.rating AS rating,
          RHS.rank AS rank
   FROM
     (SELECT u_id,
             name,
             COUNT(*) OVER () AS n
      FROM df_useracct) AS LHS
   INNER JOIN df_review AS RHS ON (LHS.u_id = RHS.u_id
                                   AND LHS.n = RHS.a_id))
ORDER BY name;",2,8,3,0,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/epinions_1/0019,"left_join(input0, input1), summarise(line0, 'meanrating = mean(rating, na.rm = T)', ""'rank','rating'""), inner_join(line0, line1, ""'a_id' = 'rank','rank' = 'rating'"")","SELECT title,
       i_id
FROM
  (SELECT i_id,
          title,
          a_id,
          u_id,
          rating,
          a_id AS rank,
          meanrating
   FROM
     (SELECT LHS.i_id AS i_id,
             LHS.title AS title,
             LHS.a_id AS a_id,
             LHS.u_id AS u_id,
             LHS.rating AS rating,
             LHS.rank AS rank,
             RHS.meanrating AS meanrating
      FROM
        (SELECT LHS.i_id AS i_id,
                LHS.title AS title,
                RHS.a_id AS a_id,
                RHS.u_id AS u_id,
                RHS.rating AS rating,
                RHS.rank AS rank
         FROM df_item AS LHS
         LEFT JOIN df_review AS RHS ON (LHS.i_id = RHS.i_id)) AS LHS
      INNER JOIN
        (SELECT rank,
                rating,
                AVG(rating) AS meanrating
         FROM
           (SELECT LHS.i_id AS i_id,
                   LHS.title AS title,
                   RHS.a_id AS a_id,
                   RHS.u_id AS u_id,
                   RHS.rating AS rating,
                   RHS.rank AS rank
            FROM df_item AS LHS
            LEFT JOIN df_review AS RHS ON (LHS.i_id = RHS.i_id))
         GROUP BY rank,
                  rating) AS RHS ON (LHS.a_id = RHS.rank
                                     AND LHS.rank = RHS.rating)))
ORDER BY title;",3,15,6,0,6,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0
spider/epinions_1/0007,"summarise(input0, 'n = n()', ""'a_id','u_id'""), filter(line0, 'n < u_id')","SELECT DISTINCT u_id AS count_distinct_u_id_
FROM
  (SELECT a_id,
          u_id,
          COUNT() AS n
   FROM df_review
   GROUP BY a_id,
            u_id)
WHERE (n < u_id)
ORDER BY count_distinct_u_id_;",2,6,2,1,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/epinions_1/0024,"mutate(input1, 'meantrust = mean(trust, na.rm = T)'), natural_join(input0, line0), limit(line1, 'desc(name)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.u_id AS u_id,
                LHS.name AS name,
                RHS.source_u_id AS source_u_id,
                RHS.target_u_id AS target_u_id,
                RHS.trust AS trust,
                RHS.meantrust AS meantrust
         FROM df_useracct AS LHS
         CROSS JOIN
           (SELECT source_u_id,
                   target_u_id,
                   trust,
                   AVG(trust) OVER () AS meantrust
            FROM df_trust) AS RHS)
      ORDER BY name DESC)
   LIMIT 1);",2,13,5,0,5,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0
spider/epinions_1/0021,"summarise(input0, 'meanrating = mean(rating, na.rm = T)', ""'u_id'""), left_join(line0, input1)","SELECT name,
       meanrating AS avg_t2_rating_
FROM
  (SELECT LHS.u_id AS u_id,
          LHS.meanrating AS meanrating,
          RHS.name AS name
   FROM
     (SELECT u_id,
             AVG(rating) AS meanrating
      FROM df_review
      GROUP BY u_id) AS LHS
   LEFT JOIN df_useracct AS RHS ON (LHS.u_id = RHS.u_id))
ORDER BY name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/epinions_1/0023,"natural_join(input0, input1), limit(line0, 'i_id')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.a_id AS a_id,
                LHS.u_id AS u_id,
                LHS.i_id AS i_id,
                LHS.rating AS rating,
                LHS.rank AS rank,
                RHS.name AS name
         FROM df_review AS LHS
         INNER JOIN df_useracct AS RHS ON (LHS.u_id = RHS.u_id))
      ORDER BY i_id)
   LIMIT 1);",1,10,4,0,4,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/epinions_1/0001,"filter(input0, ""title == 'orange'"")","SELECT `i_id`
FROM `df_item`
WHERE (`title` = 'orange')
ORDER BY i_id;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/epinions_1/0009,"natural_join(input0, input1), summarise(line0, 'n_distinct = n_distinct(i_id)', ""'u_id'"")","SELECT DISTINCT n_distinct AS count___
FROM
  (SELECT u_id,
          COUNT(DISTINCT i_id) AS n_distinct
   FROM
     (SELECT LHS.i_id AS i_id,
             LHS.title AS title,
             RHS.a_id AS a_id,
             RHS.u_id AS u_id,
             RHS.rating AS rating,
             RHS.rank AS rank
      FROM df_item AS LHS
      INNER JOIN df_review AS RHS ON (LHS.i_id = RHS.i_id))
   GROUP BY u_id)
ORDER BY count___;",2,9,3,2,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/epinions_1/0025,"inner_join(input0, input1, ""'u_id' = 'target_u_id'""), summarise(line0, 'meantrust = mean(trust, na.rm = T)', ""'name','target_u_id'"")","SELECT name,
       meantrust AS avg_trust_
FROM
  (SELECT name,
          target_u_id,
          AVG(trust) AS meantrust
   FROM
     (SELECT u_id,
             name,
             source_u_id,
             trust,
             u_id AS target_u_id
      FROM
        (SELECT LHS.u_id AS u_id,
                LHS.name AS name,
                RHS.source_u_id AS source_u_id,
                RHS.trust AS trust
         FROM df_useracct AS LHS
         INNER JOIN df_trust AS RHS ON (LHS.u_id = RHS.target_u_id)))
   GROUP BY name,
            target_u_id)
ORDER BY name;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/epinions_1/0011,"filter(input1, 'rating >= 10L'), semi_join(input0, line0)","SELECT title
FROM
  (SELECT *
   FROM df_item AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_review
           WHERE (rating >= 10)) AS RHS
        WHERE (LHS.i_id = RHS.i_id) ))
ORDER BY title;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/epinions_1/0010,"anti_join(input1, input0, ""'u_id'"")","SELECT name
FROM
  (SELECT *
   FROM df_useracct AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_review AS RHS
        WHERE (LHS.u_id = RHS.u_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/epinions_1/0028,"anti_join(input1, input0, ""'u_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT *
   FROM df_useracct AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_review AS RHS
        WHERE (LHS.u_id = RHS.u_id) ))
ORDER BY count___;",2,12,3,1,3,0,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
spider/store_1/0056,"inner_join(input0, input1, ""'id' = 'genre_id'""), summarise(line0, 'n = n()', ""'name','unit_price'"")","SELECT n AS count___,
       name
FROM
  (SELECT name,
          unit_price,
          COUNT() AS n
   FROM
     (SELECT id,
             name,
             id_other,
             name_other,
             album_id,
             media_type_id,
             composer,
             milliseconds,
             bytes,
             unit_price,
             id AS genre_id
      FROM
        (SELECT LHS.id AS id,
                LHS.name AS name,
                RHS.id AS id_other,
                RHS.name AS name_other,
                RHS.album_id AS album_id,
                RHS.media_type_id AS media_type_id,
                RHS.composer AS composer,
                RHS.milliseconds AS milliseconds,
                RHS.bytes AS bytes,
                RHS.unit_price AS unit_price
         FROM df_genres AS LHS
         INNER JOIN df_tracks AS RHS ON (LHS.id = RHS.genre_id)))
   GROUP BY name,
            unit_price)
ORDER BY count___;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/store_1/0042,"filter(input0, ""name == 'Fast As a Shark'"")","SELECT `milliseconds`
FROM `df_tracks`
WHERE (`name` = 'Fast As a Shark')
ORDER BY milliseconds;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/store_1/0037,"filter(input0, ""first_name == 'Lucas' | last_name == 'Mancini'""), summarise(input1, 'sumtotal = sum(total)', ""'billing_postal_code'""), inner_join(line0, line1, ""'postal_code' = 'billing_postal_code'"")","SELECT `sumtotal` AS `sum_t2_total_`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`first_name` AS `first_name`,
          `LHS`.`last_name` AS `last_name`,
          `LHS`.`company` AS `company`,
          `LHS`.`address` AS `address`,
          `LHS`.`city` AS `city`,
          `LHS`.`state` AS `state`,
          `LHS`.`country` AS `country`,
          `LHS`.`postal_code` AS `postal_code`,
          `LHS`.`phone` AS `phone`,
          `LHS`.`fax` AS `fax`,
          `LHS`.`email` AS `email`,
          `LHS`.`support_rep_id` AS `support_rep_id`,
          `RHS`.`sumtotal` AS `sumtotal`
   FROM
     (SELECT *
      FROM `df_customers`
      WHERE (`first_name` = 'Lucas'
             OR `last_name` = 'Mancini')) AS LHS
   INNER JOIN
     (SELECT billing_postal_code,
             SUM(total) AS sumtotal
      FROM df_invoices
      GROUP BY billing_postal_code) AS RHS ON (LHS.postal_code = RHS.billing_postal_code))
ORDER BY sum_t2_total_;",3,11,4,0,4,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/store_1/0002,"summarise(input0, 'sumtotal = sum(total)', ""'billing_country'""), limit(line0, 'desc(sumtotal)')","SELECT billing_country,
       sumtotal AS sum_total_
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT billing_country,
                SUM(total) AS sumtotal
         FROM df_invoices
         GROUP BY billing_country)
      ORDER BY sumtotal DESC)
   LIMIT 8);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/store_1/0036,"filter(input0, ""first_name != 'Lucas' & last_name != 'Mancini'""), summarise(input1, 'n = n()', ""'customer_id'""), natural_join4(input0, input1, line0, line1)","SELECT DISTINCT `n` AS `count___`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`first_name` AS `first_name`,
          `LHS`.`last_name` AS `last_name`,
          `LHS`.`company` AS `company`,
          `LHS`.`address` AS `address`,
          `LHS`.`city` AS `city`,
          `LHS`.`state` AS `state`,
          `LHS`.`country` AS `country`,
          `LHS`.`postal_code` AS `postal_code`,
          `LHS`.`phone` AS `phone`,
          `LHS`.`fax` AS `fax`,
          `LHS`.`email` AS `email`,
          `LHS`.`support_rep_id` AS `support_rep_id`,
          `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`invoice_date` AS `invoice_date`,
          `LHS`.`billing_address` AS `billing_address`,
          `LHS`.`billing_city` AS `billing_city`,
          `LHS`.`billing_state` AS `billing_state`,
          `LHS`.`billing_country` AS `billing_country`,
          `LHS`.`billing_postal_code` AS `billing_postal_code`,
          `LHS`.`total` AS `total`,
          `RHS`.`n` AS `n`
   FROM
     (SELECT `LHS`.`id` AS `id`,
             `LHS`.`first_name` AS `first_name`,
             `LHS`.`last_name` AS `last_name`,
             `LHS`.`company` AS `company`,
             `LHS`.`address` AS `address`,
             `LHS`.`city` AS `city`,
             `LHS`.`state` AS `state`,
             `LHS`.`country` AS `country`,
             `LHS`.`postal_code` AS `postal_code`,
             `LHS`.`phone` AS `phone`,
             `LHS`.`fax` AS `fax`,
             `LHS`.`email` AS `email`,
             `LHS`.`support_rep_id` AS `support_rep_id`,
             `LHS`.`customer_id` AS `customer_id`,
             `LHS`.`invoice_date` AS `invoice_date`,
             `LHS`.`billing_address` AS `billing_address`,
             `LHS`.`billing_city` AS `billing_city`,
             `LHS`.`billing_state` AS `billing_state`,
             `LHS`.`billing_country` AS `billing_country`,
             `LHS`.`billing_postal_code` AS `billing_postal_code`,
             `LHS`.`total` AS `total`
      FROM
        (SELECT `LHS`.`id` AS `id`,
                `LHS`.`first_name` AS `first_name`,
                `LHS`.`last_name` AS `last_name`,
                `LHS`.`company` AS `company`,
                `LHS`.`address` AS `address`,
                `LHS`.`city` AS `city`,
                `LHS`.`state` AS `state`,
                `LHS`.`country` AS `country`,
                `LHS`.`postal_code` AS `postal_code`,
                `LHS`.`phone` AS `phone`,
                `LHS`.`fax` AS `fax`,
                `LHS`.`email` AS `email`,
                `LHS`.`support_rep_id` AS `support_rep_id`,
                `RHS`.`customer_id` AS `customer_id`,
                `RHS`.`invoice_date` AS `invoice_date`,
                `RHS`.`billing_address` AS `billing_address`,
                `RHS`.`billing_city` AS `billing_city`,
                `RHS`.`billing_state` AS `billing_state`,
                `RHS`.`billing_country` AS `billing_country`,
                `RHS`.`billing_postal_code` AS `billing_postal_code`,
                `RHS`.`total` AS `total`
         FROM `df_customers` AS `LHS`
         INNER JOIN `df_invoices` AS `RHS` ON (`LHS`.`id` = `RHS`.`id`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_customers`
         WHERE (`first_name` != 'Lucas'
                AND `last_name` != 'Mancini')) AS RHS ON (LHS.id = RHS.id
                                                          AND LHS.first_name = RHS.first_name
                                                          AND LHS.last_name = RHS.last_name
                                                          AND LHS.company = RHS.company
                                                          AND LHS.address = RHS.address
                                                          AND LHS.city = RHS.city
                                                          AND LHS.state = RHS.state
                                                          AND LHS.country = RHS.country
                                                          AND LHS.postal_code = RHS.postal_code
                                                          AND LHS.phone = RHS.phone
                                                          AND LHS.fax = RHS.fax
                                                          AND LHS.email = RHS.email
                                                          AND LHS.support_rep_id = RHS.support_rep_id)) AS LHS
   INNER JOIN
     (SELECT customer_id,
             COUNT() AS n
      FROM df_invoices
      GROUP BY customer_id) AS RHS ON (LHS.customer_id = RHS.customer_id))
ORDER BY count___;",3,17,6,1,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
spider/store_1/0017,"filter(input0, ""name == 'Aerosmith'""), inner_join(line0, input1, ""'id' = 'artist_id'"")","SELECT `title`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `RHS`.`id` AS `id_other`,
          `RHS`.`title` AS `title`
   FROM
     (SELECT *
      FROM `df_artists`
      WHERE (`name` = 'Aerosmith')) AS LHS
   INNER JOIN df_albums AS RHS ON (LHS.id = RHS.artist_id))
ORDER BY title;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/store_1/0008,"intersect(input0, input0, 'title')","SELECT title
FROM
  (SELECT title
   FROM df_albums INTERSECT SELECT title
   FROM df_albums)
ORDER BY title;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/store_1/0039,df_genres,"SELECT name
FROM df_genres
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/store_1/0038,df_media_types,"SELECT name
FROM df_media_types
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/store_1/0003,"summarise(input0, 'meantotal = mean(total, na.rm = T)', ""'billing_country'""), limit(line0, 'desc(meantotal)')","SELECT billing_country,
       meantotal AS avg_total_
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT billing_country,
                AVG(total) AS meantotal
         FROM df_invoices
         GROUP BY billing_country)
      ORDER BY meantotal DESC)
   LIMIT 10);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/store_1/0027,"inner_join(input0, input0, ""'reports_to' = 'id','city' = 'city'""), filter(line0, ""first_name == 'Nancy' | last_name != 'Edwards'"")","SELECT `first_name`,
       `last_name`
FROM
  (SELECT `reports_to` AS `id`,
          `last_name`,
          `first_name`,
          `title`,
          `reports_to`,
          `birth_date`,
          `hire_date`,
          `address`,
          `city`,
          `state`,
          `country`,
          `postal_code`,
          `phone`,
          `fax`,
          `email`,
          `last_name_other`,
          `first_name_other`,
          `title_other`,
          `reports_to_other`,
          `birth_date_other`,
          `hire_date_other`,
          `address_other`,
          `state_other`,
          `country_other`,
          `postal_code_other`,
          `phone_other`,
          `fax_other`,
          `email_other`
   FROM
     (SELECT `LHS`.`id` AS `id`,
             `LHS`.`last_name` AS `last_name`,
             `LHS`.`first_name` AS `first_name`,
             `LHS`.`title` AS `title`,
             `LHS`.`reports_to` AS `reports_to`,
             `LHS`.`birth_date` AS `birth_date`,
             `LHS`.`hire_date` AS `hire_date`,
             `LHS`.`address` AS `address`,
             `LHS`.`city` AS `city`,
             `LHS`.`state` AS `state`,
             `LHS`.`country` AS `country`,
             `LHS`.`postal_code` AS `postal_code`,
             `LHS`.`phone` AS `phone`,
             `LHS`.`fax` AS `fax`,
             `LHS`.`email` AS `email`,
             `RHS`.`last_name` AS `last_name_other`,
             `RHS`.`first_name` AS `first_name_other`,
             `RHS`.`title` AS `title_other`,
             `RHS`.`reports_to` AS `reports_to_other`,
             `RHS`.`birth_date` AS `birth_date_other`,
             `RHS`.`hire_date` AS `hire_date_other`,
             `RHS`.`address` AS `address_other`,
             `RHS`.`state` AS `state_other`,
             `RHS`.`country` AS `country_other`,
             `RHS`.`postal_code` AS `postal_code_other`,
             `RHS`.`phone` AS `phone_other`,
             `RHS`.`fax` AS `fax_other`,
             `RHS`.`email` AS `email_other`
      FROM `df_employees` AS `LHS`
      INNER JOIN `df_employees` AS `RHS` ON (`LHS`.`reports_to` = `RHS`.`id`
                                             AND `LHS`.`city` = `RHS`.`city`)))
WHERE (`first_name` = 'Nancy'
       OR `last_name` != 'Edwards')
ORDER BY first_name;",2,9,3,0,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/store_1/0022,"summarise(input0, 'n = n()', ""'state'""), filter(line0, ""state == 'CA'"")","SELECT `n` AS `count___`
FROM
  (SELECT `state`,
          COUNT() AS `n`
   FROM `df_customers`
   GROUP BY `state`)
WHERE (`state` = 'CA')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/store_1/0053,"filter(input0, ""name == 'Fast As a Shark'"")","SELECT `unit_price`
FROM `df_tracks`
WHERE (`name` = 'Fast As a Shark')
ORDER BY unit_price;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/store_1/0030,"summarise(input0, 'n = n()', ""'country','state'""), filter(line0, ""country == 'Canada'"")","SELECT `n` AS `count___`
FROM
  (SELECT `country`,
          `state`,
          COUNT() AS `n`
   FROM `df_employees`
   GROUP BY `country`,
            `state`)
WHERE (`country` = 'Canada')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/store_1/0013,"summarise(input0, 'n = n()', ""'billing_city','billing_state'""), filter(line0, ""billing_city == 'Chicago' & billing_state == 'IL'"")","SELECT `n` AS `count___`
FROM
  (SELECT `billing_city`,
          `billing_state`,
          COUNT() AS `n`
   FROM `df_invoices`
   GROUP BY `billing_city`,
            `billing_state`)
WHERE (`billing_city` = 'Chicago'
       AND `billing_state` = 'IL')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/store_1/0012,"filter(input0, ""billing_city == 'Chicago' | billing_state == 'IL'""), mutate(line0, 'sumtotal = sum(total)')","SELECT DISTINCT SUM(`total`) OVER () AS `sum_total_`
FROM `df_invoices`
WHERE (`billing_city` = 'Chicago'
       OR `billing_state` = 'IL')
ORDER BY sum_total_;",2,6,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/store_1/0026,"filter(input0, ""first_name == 'Nancy' & last_name == 'Edwards'""), semi_join(input0, line0)","SELECT `title`,
       `phone`,
       `hire_date`
FROM
  (SELECT *
   FROM `df_employees` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_employees`
           WHERE (`first_name` = 'Nancy'
                  AND `last_name` = 'Edwards')) AS RHS
        WHERE (LHS.id = RHS.id
               AND LHS.last_name = RHS.last_name
               AND LHS.first_name = RHS.first_name
               AND LHS.title = RHS.title
               AND LHS.reports_to = RHS.reports_to
               AND LHS.birth_date = RHS.birth_date
               AND LHS.hire_date = RHS.hire_date
               AND LHS.address = RHS.address
               AND LHS.city = RHS.city
               AND LHS.state = RHS.state
               AND LHS.country = RHS.country
               AND LHS.postal_code = RHS.postal_code
               AND LHS.phone = RHS.phone
               AND LHS.fax = RHS.fax
               AND LHS.email = RHS.email) ))
ORDER BY title;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/store_1/0015,"filter(input0, ""billing_country == 'USA'""), summarise(line0, 'n = n()', ""'billing_state'""), limit(line1, 'desc(n)')","SELECT `billing_state`,
       `n` AS `count___`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT `billing_state`,
                COUNT() AS `n`
         FROM
           (SELECT *
            FROM `df_invoices`
            WHERE (`billing_country` = 'USA'))
         GROUP BY billing_state)
      ORDER BY n DESC)
   LIMIT 1);",2,13,5,0,5,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/store_1/0016,"filter(input0, ""billing_state == 'CA'""), mutate(line0, 'sumtotal = sum(total)'), mutate(line1, 'n = n()')","SELECT DISTINCT `billing_state`,
                COUNT(*) OVER () AS `count___`,
                              `sumtotal` AS `sum_total_`
FROM
  (SELECT `id`,
          `customer_id`,
          `invoice_date`,
          `billing_address`,
          `billing_city`,
          `billing_state`,
          `billing_country`,
          `billing_postal_code`,
          `total`,
          SUM(`total`) OVER () AS `sumtotal`
   FROM
     (SELECT *
      FROM `df_invoices`
      WHERE (`billing_state` = 'CA')))
ORDER BY billing_state;",3,10,3,1,3,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0
spider/store_1/0032,"limit(input0, 'desc(title)')","SELECT first_name,
       last_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_employees
      ORDER BY title DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/store_1/0045,"filter(input0, ""title == 'Balls to the Wall'""), inner_join(line0, input1, ""'artist_id' = 'genre_id'"")","SELECT `name`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`title` AS `title`,
          `LHS`.`artist_id` AS `artist_id`,
          `RHS`.`id` AS `id_other`,
          `RHS`.`name` AS `name`,
          `RHS`.`album_id` AS `album_id`,
          `RHS`.`media_type_id` AS `media_type_id`,
          `RHS`.`composer` AS `composer`,
          `RHS`.`milliseconds` AS `milliseconds`,
          `RHS`.`bytes` AS `bytes`,
          `RHS`.`unit_price` AS `unit_price`
   FROM
     (SELECT *
      FROM `df_albums`
      WHERE (`title` = 'Balls to the Wall')) AS LHS
   INNER JOIN df_tracks AS RHS ON (LHS.artist_id = RHS.genre_id))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/store_1/0018,"filter(input0, ""name == 'Billy Cobham'""), intersect(input1, line0, 'id'), summarise(line1, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT `id`
      FROM `df_albums` INTERSECT SELECT `id`
      FROM `df_artists`
      WHERE (`name` = 'Billy Cobham')))
ORDER BY count___;",3,10,4,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0
spider/store_1/0041,"filter(input0, ""name == 'Fast As a Shark'"")","SELECT `composer`
FROM `df_tracks`
WHERE (`name` = 'Fast As a Shark')
ORDER BY composer;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/store_1/0051,"summarise(input1, 'n = n()', ""'playlist_id'""), filter(line0, 'n >= 100L'), inner_join(input0, line1, ""'id' = 'playlist_id'"")","SELECT name
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          RHS.n AS n
   FROM df_playlists AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT playlist_id,
                COUNT() AS n
         FROM df_playlist_tracks
         GROUP BY playlist_id)
      WHERE (n >= 100)) AS RHS ON (LHS.id = RHS.playlist_id))
ORDER BY name;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/store_1/0020,"filter(input0, ""first_name != 'Astrid' | last_name == 'Gruber'""), filter(line0, ""first_name == 'Astrid' | last_name == 'Gruber'"")","SELECT `email`,
       `phone`
FROM
  (SELECT *
   FROM `df_customers`
   WHERE (`first_name` != 'Astrid'
          OR `last_name` = 'Gruber'))
WHERE (`first_name` = 'Astrid'
       OR `last_name` = 'Gruber')
ORDER BY email;",2,8,2,0,2,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/store_1/0019,"filter(input0, ""first_name != 'Eduardo' | last_name == 'Martins'""), filter(line0, ""first_name == 'Eduardo' | last_name == 'Martins'"")","SELECT `company`
FROM
  (SELECT *
   FROM `df_customers`
   WHERE (`first_name` != 'Eduardo'
          OR `last_name` = 'Martins'))
WHERE (`first_name` = 'Eduardo'
       OR `last_name` = 'Martins')
ORDER BY company;",2,8,2,0,2,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/store_1/0034,"summarise(input0, 'n = n()', ""'city','title'""), filter(line0, ""title == 'IT Staff'"")","SELECT `n` AS `count___`,
       `city`
FROM
  (SELECT `city`,
          `title`,
          COUNT() AS `n`
   FROM `df_employees`
   GROUP BY `city`,
            `title`)
WHERE (`title` = 'IT Staff')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/store_1/0021,"summarise(input0, 'n = n()', ""'city','state'""), filter(line0, ""city == 'Prague'"")","SELECT `n` AS `count___`
FROM
  (SELECT `city`,
          `state`,
          COUNT() AS `n`
   FROM `df_customers`
   GROUP BY `city`,
            `state`)
WHERE (`city` = 'Prague')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/store_1/0023,"filter(input0, ""first_name == 'Roberto' | last_name == 'Almeida'"")","SELECT `country`
FROM `df_customers`
WHERE (`first_name` = 'Roberto'
       OR `last_name` = 'Almeida')
ORDER BY country;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/store_1/0001,"summarise(input0, 'n = n()', ""'billing_country'""), limit(line0, 'desc(n)')","SELECT billing_country,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT billing_country,
                COUNT() AS n
         FROM df_invoices
         GROUP BY billing_country)
      ORDER BY n DESC)
   LIMIT 5);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/store_1/0043,"filter(input0, ""name == 'Rock'""), inner_join(line0, input1, ""'id' = 'genre_id'"")","SELECT `name_other` AS `name`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `RHS`.`id` AS `id_other`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`album_id` AS `album_id`,
          `RHS`.`media_type_id` AS `media_type_id`,
          `RHS`.`composer` AS `composer`,
          `RHS`.`milliseconds` AS `milliseconds`,
          `RHS`.`bytes` AS `bytes`,
          `RHS`.`unit_price` AS `unit_price`
   FROM
     (SELECT *
      FROM `df_genres`
      WHERE (`name` = 'Rock')) AS LHS
   INNER JOIN df_tracks AS RHS ON (LHS.id = RHS.genre_id))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/store_1/0014,"filter(input0, ""billing_country == 'USA'""), mutate(line0, 'n_distinct = n_distinct(billing_country)'), summarise(line1, 'n = n()', ""'billing_state'"")","SELECT `billing_state`,
       `n` AS `count___`
FROM
  (SELECT `billing_state`,
          COUNT() AS `n`
   FROM
     (SELECT `id`,
             `customer_id`,
             `invoice_date`,
             `billing_address`,
             `billing_city`,
             `billing_state`,
             `billing_country`,
             `billing_postal_code`,
             `total`,
             COUNT(DISTINCT `billing_country`) OVER () AS `n_distinct`
      FROM
        (SELECT *
         FROM `df_invoices`
         WHERE (`billing_country` = 'USA')))
   GROUP BY billing_state)
ORDER BY billing_state;",3,11,4,1,4,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/store_1/0009,df_albums,"SELECT title
FROM df_albums
ORDER BY title;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/store_1/0029,"summarise(input1, 'n = n()', ""'country','id'""), natural_join(input0, line0)","SELECT first_name,
       last_name
FROM
  (SELECT LHS.id AS id,
          LHS.last_name AS last_name,
          LHS.first_name AS first_name,
          LHS.title AS title,
          LHS.reports_to AS reports_to,
          LHS.birth_date AS birth_date,
          LHS.hire_date AS hire_date,
          LHS.address AS address,
          LHS.city AS city,
          LHS.state AS state,
          LHS.country AS country,
          LHS.postal_code AS postal_code,
          LHS.phone AS phone,
          LHS.fax AS fax,
          LHS.email AS email,
          RHS.n AS n
   FROM df_employees AS LHS
   INNER JOIN
     (SELECT country,
             id,
             COUNT() AS n
      FROM df_customers
      GROUP BY country,
               id) AS RHS ON (LHS.id = RHS.id
                              AND LHS.country = RHS.country))
ORDER BY first_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/store_1/0044,"filter(input1, ""name != 'Balls to the Wall'""), inner_join(input0, line0, ""'id' = 'genre_id','artist_id' = 'id'"")","SELECT `title`
FROM
  (SELECT `id`,
          `title`,
          `artist_id`,
          `name`,
          `album_id`,
          `media_type_id`,
          `composer`,
          `milliseconds`,
          `bytes`,
          `unit_price`,
          `id` AS `genre_id`
   FROM
     (SELECT `LHS`.`id` AS `id`,
             `LHS`.`title` AS `title`,
             `LHS`.`artist_id` AS `artist_id`,
             `RHS`.`name` AS `name`,
             `RHS`.`album_id` AS `album_id`,
             `RHS`.`media_type_id` AS `media_type_id`,
             `RHS`.`composer` AS `composer`,
             `RHS`.`milliseconds` AS `milliseconds`,
             `RHS`.`bytes` AS `bytes`,
             `RHS`.`unit_price` AS `unit_price`
      FROM `df_albums` AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_tracks`
         WHERE (`name` != 'Balls to the Wall')) AS RHS ON (LHS.id = RHS.genre_id
                                                           AND LHS.artist_id = RHS.id)))
ORDER BY title;",2,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/store_1/0040,df_playlists,"SELECT name
FROM df_playlists
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/store_1/0028,"filter(input0, ""first_name == 'Nancy' & last_name == 'Edwards'"")","SELECT `address`
FROM `df_employees`
WHERE (`first_name` = 'Nancy'
       AND `last_name` = 'Edwards')
ORDER BY address;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/store_1/0049,"filter(input0, ""name == 'Rock' | name == 'Jazz'""), inner_join(line0, input1, ""'id' = 'genre_id'"")","SELECT `name_other` AS `name`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `RHS`.`id` AS `id_other`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`album_id` AS `album_id`,
          `RHS`.`media_type_id` AS `media_type_id`,
          `RHS`.`composer` AS `composer`,
          `RHS`.`milliseconds` AS `milliseconds`,
          `RHS`.`bytes` AS `bytes`,
          `RHS`.`unit_price` AS `unit_price`
   FROM
     (SELECT *
      FROM `df_genres`
      WHERE (`name` = 'Rock'
             OR `name` = 'Jazz')) AS LHS
   INNER JOIN df_tracks AS RHS ON (LHS.id = RHS.genre_id))
ORDER BY name;",2,9,3,0,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/store_1/0031,"filter(input0, ""first_name == 'Nancy' & last_name == 'Edwards'"")","SELECT `phone`
FROM `df_employees`
WHERE (`first_name` = 'Nancy'
       AND `last_name` = 'Edwards')
ORDER BY phone;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/shop_membership/0002,"intersect(input0, input0, 'name'), left_join(line0, input0)","SELECT name,
       address_road,
       city
FROM
  (SELECT LHS.name AS name,
          RHS.branch_id AS branch_id,
          RHS.open_year AS open_year,
          RHS.address_road AS address_road,
          RHS.city AS city,
          RHS.membership_amount AS membership_amount
   FROM
     (SELECT name
      FROM df_branch INTERSECT SELECT name
      FROM df_branch) AS LHS
   LEFT JOIN df_branch AS RHS ON (LHS.name = RHS.name))
ORDER BY name;",2,10,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0
spider/shop_membership/0017,"filter(input0, 'open_year == 2001L'), intersect(line0, input0, 'city')","SELECT city
FROM
  (SELECT city
   FROM df_branch
   WHERE (open_year = 2001) INTERSECT
     SELECT city
     FROM df_branch)
ORDER BY city;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/shop_membership/0008,"summarise(input0, 'n = n()', ""'level'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count_distinct_level_
FROM
  (SELECT LEVEL,
          COUNT() AS n
   FROM df_member
   GROUP BY LEVEL)
ORDER BY count_distinct_level_;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/shop_membership/0003,"limit(input0, 'desc(membership_amount)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_branch
      ORDER BY membership_amount DESC)
   LIMIT 3);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/shop_membership/0013,"anti_join(input0, input1, '')","SELECT name
FROM
  (SELECT *
   FROM df_member AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_membership_register_branch AS RHS
        WHERE (LHS.member_id = RHS.member_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/shop_membership/0006,"filter(input0, ""city == 'London'""), mutate(line0, 'maxmembership_amount = max(membership_amount)'), mutate(line1, 'membership_amount = min(membership_amount)')","SELECT DISTINCT MIN(`membership_amount`) OVER () AS `min_membership_amount_`,
                                              `maxmembership_amount` AS `max_membership_amount_`
FROM
  (SELECT `branch_id`,
          `name`,
          `open_year`,
          `address_road`,
          `city`,
          `membership_amount`,
          MAX(`membership_amount`) OVER () AS `maxmembership_amount`
   FROM
     (SELECT *
      FROM `df_branch`
      WHERE (`city` = 'London')))
ORDER BY min_membership_amount_;",3,10,3,1,3,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0
spider/shop_membership/0004,"intersect(input0, input0, 'city')","SELECT city
FROM
  (SELECT city
   FROM df_branch INTERSECT SELECT city
   FROM df_branch)
ORDER BY city;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/shop_membership/0015,"filter(input1, 'register_year == 2016L'), summarise(line0, 'n_distinct = n_distinct(register_year)', ""'branch_id','register_year'""), inner_join(input0, line1, ""'branch_id' = 'n_distinct'"")","SELECT DISTINCT name,
                open_year
FROM
  (SELECT LHS.branch_id AS branch_id,
          LHS.name AS name,
          LHS.open_year AS open_year,
          LHS.address_road AS address_road,
          LHS.city AS city,
          LHS.membership_amount AS membership_amount,
          RHS.branch_id AS branch_id_other,
          RHS.register_year AS register_year
   FROM df_branch AS LHS
   INNER JOIN
     (SELECT branch_id,
             register_year,
             COUNT(DISTINCT register_year) AS n_distinct
      FROM df_membership_register_branch
      WHERE (register_year = 2016)
      GROUP BY branch_id,
               register_year) AS RHS ON (LHS.branch_id = RHS.n_distinct))
ORDER BY name;",3,10,3,2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/shop_membership/0005,"summarise(input0, 'n = n()', ""'city','open_year'""), filter(line0, 'n == 2L')","SELECT open_year
FROM
  (SELECT city,
          open_year,
          COUNT() AS n
   FROM df_branch
   GROUP BY city,
            open_year)
WHERE (n = 2)
ORDER BY open_year;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/shop_membership/0016,"filter(input1, 'register_year == 2016L'), semi_join(input0, line0)","SELECT name,
       hometown
FROM
  (SELECT *
   FROM df_member AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_membership_register_branch
           WHERE (register_year = 2016)) AS RHS
        WHERE (LHS.member_id = RHS.member_id) ))
ORDER BY name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/shop_membership/0020,"filter(input0, 'level == 6L'), natural_join(input1, line0), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT LHS.member_id AS member_id,
          LHS.branch_id AS branch_id,
          LHS.year AS YEAR,
          LHS.total_pounds AS total_pounds,
          RHS.card_number AS card_number,
          RHS.name AS name,
          RHS.hometown AS hometown,
          RHS.level AS LEVEL
   FROM df_purchase AS LHS
   INNER JOIN
     (SELECT *
      FROM df_member
      WHERE (LEVEL = 6)) AS RHS ON (LHS.member_id = RHS.member_id))
ORDER BY count___;",3,11,3,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/shop_membership/0007,"summarise(input0, 'n = n()', ""'city'""), filter(line0, 'n != 2010L'), mutate(line1, 'n = n()')","SELECT city,
       COUNT(*) OVER () AS count___
FROM
  (SELECT city,
          COUNT() AS n
   FROM df_branch
   GROUP BY city)
WHERE (n != 2010)
ORDER BY city;",3,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/shop_membership/0001,"summarise(input0, 'n = n()', ""'city'""), inner_join(line0, input0, ""'n' = 'branch_id','city' = 'city'""), summarise(line1, 'n_distinct = n_distinct(membership_amount)', ""'branch_id','open_year'"")","SELECT branch_id AS count___
FROM
  (SELECT branch_id,
          open_year,
          COUNT(DISTINCT membership_amount) AS n_distinct
   FROM
     (SELECT city,
             n,
             name,
             open_year,
             address_road,
             membership_amount,
             n AS branch_id
      FROM
        (SELECT LHS.city AS city,
                LHS.n AS n,
                RHS.name AS name,
                RHS.open_year AS open_year,
                RHS.address_road AS address_road,
                RHS.membership_amount AS membership_amount
         FROM
           (SELECT city,
                   COUNT() AS n
            FROM df_branch
            GROUP BY city) AS LHS
         INNER JOIN df_branch AS RHS ON (LHS.n = RHS.branch_id
                                         AND LHS.city = RHS.city)))
   GROUP BY branch_id,
            open_year)
ORDER BY count___;",3,12,5,1,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0
spider/shop_membership/0014,"cross_join(input0, input1, 'branch_id == branch_id.other | branch_id == branch_id.other'), anti_join(input0, line0, ""'branch_id','membership_amount'"")","SELECT name,
       city
FROM
  (SELECT *
   FROM df_branch AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT LHS.branch_id AS branch_id,
                     LHS.name AS name,
                     LHS.open_year AS open_year,
                     LHS.address_road AS address_road,
                     LHS.city AS city,
                     LHS.membership_amount AS membership_amount,
                     RHS.member_id AS member_id,
                     RHS.branch_id AS branch_id_other,
                     RHS.register_year AS register_year
              FROM df_branch AS LHS
              CROSS JOIN df_membership_register_branch AS RHS)
           WHERE (branch_id = branch_id_other
                  OR branch_id = branch_id_other)) AS RHS
        WHERE (LHS.branch_id = RHS.branch_id
               AND LHS.membership_amount = RHS.membership_amount) ))
ORDER BY name;",2,16,5,0,5,0,3,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
spider/shop_membership/0009,df_member,"SELECT card_number,
       name,
       hometown
FROM df_member
ORDER BY card_number;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/shop_membership/0010,"summarise(input0, 'n = n()', ""'level','name'""), limit(line0, 'name')","SELECT LEVEL
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LEVEL,
                name,
                COUNT() AS n
         FROM df_member
         GROUP BY LEVEL,
                  name)
      ORDER BY name)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/movie_1/0042,"filter(input0, ""name == 'Brittany Harris'""), semi_join(input1, line0), anti_join(input1, line1, ""'mid'"")","SELECT DISTINCT `mid`
FROM
  (SELECT *
   FROM `df_rating` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_rating` AS `LHS`
           WHERE EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM `df_reviewer`
                   WHERE (`name` = 'Brittany Harris')) AS RHS
                WHERE (LHS.rid = RHS.rid) )) AS RHS
        WHERE (LHS.mid = RHS.mid) ))
ORDER BY mid;",3,21,6,1,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/movie_1/0033,"summarise(input1, 'meanstars = mean(stars, na.rm = T)', ""'mid'""), left_join(line0, input0), limit(line1, 'meanstars')","SELECT title,
       meanstars AS avg_t1_stars_
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.mid AS mid,
                LHS.meanstars AS meanstars,
                RHS.title AS title,
                RHS.year AS YEAR,
                RHS.director AS director
         FROM
           (SELECT mid,
                   AVG(stars) AS meanstars
            FROM df_rating
            GROUP BY mid) AS LHS
         LEFT JOIN df_movie AS RHS ON (LHS.mid = RHS.mid))
      ORDER BY meanstars)
   LIMIT 1);",2,13,5,0,5,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/movie_1/0002,"filter(input0, ""director == 'James Cameron' & year > 2000L""), semi_join(line0, input0)","SELECT `title`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_movie`
      WHERE (`director` = 'James Cameron'
             AND YEAR > 2000)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_movie AS RHS
        WHERE (LHS.mid = RHS.mid
               AND LHS.title = RHS.title
               AND LHS.year = RHS.year
               AND LHS.director = RHS.director) ))
ORDER BY title;",2,13,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/movie_1/0017,"summarise(input1, 'stars = max(stars)', ''), natural_join(input0, line0), mutate(line1, 'year = max(year)')","SELECT DISTINCT stars AS max_t1_stars_,
                MAX(YEAR) OVER () AS YEAR
FROM
  (SELECT LHS.mid AS mid,
          LHS.title AS title,
          LHS.year AS YEAR,
          LHS.director AS director,
          RHS.stars AS stars
   FROM df_movie AS LHS
   CROSS JOIN
     (SELECT MAX(stars) AS stars
      FROM df_rating) AS RHS)
ORDER BY max_t1_stars_;",3,11,3,1,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0
spider/movie_1/0008,"filter(input0, 'stars > 3L'), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT *
      FROM df_rating
      WHERE (stars > 3)))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/movie_1/0039,"natural_join(input0, input1), filter(line0, 'stars >= 3L | stars >= 5L')","SELECT title
FROM
  (SELECT LHS.mid AS mid,
          LHS.title AS title,
          LHS.year AS YEAR,
          LHS.director AS director,
          RHS.rid AS rid,
          RHS.stars AS stars,
          RHS.ratingdate AS ratingdate
   FROM df_movie AS LHS
   INNER JOIN df_rating AS RHS ON (LHS.mid = RHS.mid))
WHERE (stars >= 3
       OR stars >= 5)
ORDER BY title;",2,8,2,0,2,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/movie_1/0038,"summarise(input1, 'n = n()', ""'mid','stars'""), left_join(input0, line0), filter(line1, 'n != 1L')","SELECT title,
       mid
FROM
  (SELECT LHS.mid AS mid,
          LHS.title AS title,
          LHS.year AS YEAR,
          LHS.director AS director,
          RHS.stars AS stars,
          RHS.n AS n
   FROM df_movie AS LHS
   LEFT JOIN
     (SELECT mid,
             stars,
             COUNT() AS n
      FROM df_rating
      GROUP BY mid,
               stars) AS RHS ON (LHS.mid = RHS.mid))
WHERE (n != 1)
ORDER BY title;",3,9,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/movie_1/0003,"filter(input0, 'year <= 2000L'), summarise(line0, 'n_distinct = n_distinct(year)', '')","SELECT n_distinct AS count___
FROM
  (SELECT COUNT(DISTINCT YEAR) AS n_distinct
   FROM
     (SELECT *
      FROM df_movie
      WHERE (YEAR <= 2000)))
ORDER BY count___;",2,10,3,1,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/movie_1/0027,"inner_join(input0, input0, ""'director'""), cross_join(line0, input0, 'title != title.other')","SELECT DISTINCT title,
                director
FROM
  (SELECT LHS.mid AS mid,
          LHS.title AS title,
          LHS.year AS YEAR,
          LHS.director AS director,
          LHS.mid_other AS mid_other,
          LHS.title_other AS title_other,
          LHS.year_other AS year_other,
          RHS.mid AS mid_other_other,
          RHS.title AS title_other_other,
          RHS.year AS year_other_other,
          RHS.director AS director_other
   FROM
     (SELECT LHS.mid AS mid,
             LHS.title AS title,
             LHS.year AS YEAR,
             LHS.director AS director,
             RHS.mid AS mid_other,
             RHS.title AS title_other,
             RHS.year AS year_other
      FROM df_movie AS LHS
      INNER JOIN df_movie AS RHS ON (LHS.director = RHS.director)) AS LHS
   CROSS JOIN df_movie AS RHS)
WHERE (title != title_other)
ORDER BY title;",2,11,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
spider/movie_1/0022,"filter(input0, ""title == 'Gone with the Wind'""), natural_join3(input1, input2, line0)","SELECT DISTINCT `name`
FROM
  (SELECT `LHS`.`rid` AS `rid`,
          `LHS`.`name` AS `name`,
          `LHS`.`mid` AS `mid`,
          `LHS`.`stars` AS `stars`,
          `LHS`.`ratingdate` AS `ratingdate`,
          `RHS`.`title` AS `title`,
          `RHS`.`year` AS `year`,
          `RHS`.`director` AS `director`
   FROM
     (SELECT `LHS`.`rid` AS `rid`,
             `LHS`.`name` AS `name`,
             `RHS`.`mid` AS `mid`,
             `RHS`.`stars` AS `stars`,
             `RHS`.`ratingdate` AS `ratingdate`
      FROM `df_reviewer` AS `LHS`
      INNER JOIN `df_rating` AS `RHS` ON (`LHS`.`rid` = `RHS`.`rid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_movie`
      WHERE (`title` = 'Gone with the Wind')) AS RHS ON (LHS.mid = RHS.mid))
ORDER BY name;",2,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/movie_1/0030,"summarise(input0, 'n = n()', ""'director'""), filter(line0, 'n == 1L'), semi_join(line1, line0)","SELECT director
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT director,
                COUNT() AS n
         FROM df_movie
         GROUP BY director)
      WHERE (n = 1)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT director,
                  COUNT() AS n
           FROM df_movie
           GROUP BY director) AS RHS
        WHERE (LHS.director = RHS.director
               AND LHS.n = RHS.n) ))
ORDER BY director;",3,16,6,0,6,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0
spider/movie_1/0013,"anti_join(input0, input1, ""'mid'"")","SELECT title
FROM
  (SELECT *
   FROM df_movie AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_rating AS RHS
        WHERE (LHS.mid = RHS.mid) ))
ORDER BY title;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/movie_1/0004,"filter(input0, ""title == 'Avatar'""), intersect(line0, input0, 'director')","SELECT `director`
FROM
  (SELECT `director`
   FROM `df_movie`
   WHERE (`title` = 'Avatar') INTERSECT
     SELECT director
     FROM df_movie)
ORDER BY director;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/movie_1/0012,"natural_join(input0, input1), summarise(line0, 'meanstars = mean(stars, na.rm = T)', ""'name','rid'"")","SELECT name,
       meanstars AS avg_t1_stars_
FROM
  (SELECT name,
          rid,
          AVG(stars) AS meanstars
   FROM
     (SELECT LHS.rid AS rid,
             LHS.name AS name,
             RHS.mid AS mid,
             RHS.stars AS stars,
             RHS.ratingdate AS ratingdate
      FROM df_reviewer AS LHS
      INNER JOIN df_rating AS RHS ON (LHS.rid = RHS.rid))
   GROUP BY name,
            rid)
ORDER BY name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/movie_1/0026,"filter(input1, ""name == 'Chris Jackson'""), semi_join(input2, line0), anti_join(input0, line1, '')","SELECT `title`
FROM
  (SELECT *
   FROM `df_movie` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_rating` AS `LHS`
           WHERE EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM `df_reviewer`
                   WHERE (`name` = 'Chris Jackson')) AS RHS
                WHERE (LHS.rid = RHS.rid) )) AS RHS
        WHERE (LHS.mid = RHS.mid) ))
ORDER BY title;",3,20,6,0,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/movie_1/0015,"summarise(input0, 'year = min(year)', ''), natural_join3(input0, input1, line0), mutate(line1, 'meanstars = mean(stars, na.rm = T)')","SELECT DISTINCT AVG(stars) OVER () AS avg_t1_stars_,
                                title
FROM
  (SELECT LHS.mid AS mid,
          LHS.title AS title,
          LHS.year AS YEAR,
          LHS.director AS director,
          LHS.rid AS rid,
          LHS.stars AS stars,
          LHS.ratingdate AS ratingdate
   FROM
     (SELECT LHS.mid AS mid,
             LHS.title AS title,
             LHS.year AS YEAR,
             LHS.director AS director,
             RHS.rid AS rid,
             RHS.stars AS stars,
             RHS.ratingdate AS ratingdate
      FROM df_movie AS LHS
      INNER JOIN df_rating AS RHS ON (LHS.mid = RHS.mid)) AS LHS
   INNER JOIN
     (SELECT MIN(YEAR) AS YEAR
      FROM df_movie) AS RHS ON (LHS.year = RHS.year))
ORDER BY avg_t1_stars_;",3,16,4,1,4,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0
spider/movie_1/0005,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_reviewer)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/movie_1/0016,"summarise(input0, 'year = max(year)', ''), natural_join(input0, line0)","SELECT title
FROM
  (SELECT LHS.mid AS mid,
          LHS.title AS title,
          LHS.year AS YEAR,
          LHS.director AS director
   FROM df_movie AS LHS
   INNER JOIN
     (SELECT MAX(YEAR) AS YEAR
      FROM df_movie) AS RHS ON (LHS.year = RHS.year))
ORDER BY title;",2,10,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/movie_1/0032,"natural_join(input0, input1), summarise(line0, 'meanstars = mean(stars, na.rm = T)', ""'director','title'""), anti_join(line1, input0, ""'director'"")","SELECT title,
       meanstars AS avg_t1_stars_
FROM
  (SELECT *
   FROM
     (SELECT director,
             title,
             AVG(stars) AS meanstars
      FROM
        (SELECT LHS.mid AS mid,
                LHS.title AS title,
                LHS.year AS YEAR,
                LHS.director AS director,
                RHS.rid AS rid,
                RHS.stars AS stars,
                RHS.ratingdate AS ratingdate
         FROM df_movie AS LHS
         INNER JOIN df_rating AS RHS ON (LHS.mid = RHS.mid))
      GROUP BY director,
               title) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_movie AS RHS
        WHERE (LHS.director = RHS.director) ))
ORDER BY title;",3,16,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0
spider/movie_1/0045,"filter(input0, 'stars != 4L')","SELECT rid
FROM df_rating
WHERE (stars != 4)
ORDER BY rid;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/movie_1/0018,"filter(input0, ""director != 'Steven Spielberg'""), mutate(input0, 'maxyear = max(year)'), inner_join(line0, line1, ""'year' = 'maxyear','director' = 'director'"")","SELECT `title_other` AS `title`
FROM
  (SELECT `LHS`.`mid` AS `mid`,
          `LHS`.`title` AS `title`,
          `LHS`.`year` AS `year`,
          `LHS`.`director` AS `director`,
          `RHS`.`mid` AS `mid_other`,
          `RHS`.`title` AS `title_other`,
          `RHS`.`year` AS `year_other`
   FROM
     (SELECT *
      FROM `df_movie`
      WHERE (`director` != 'Steven Spielberg')) AS LHS
   INNER JOIN
     (SELECT mid,
             title,
             YEAR,
             director,
             MAX(YEAR) OVER () AS maxyear
      FROM df_movie) AS RHS ON (LHS.year = RHS.maxyear
                                AND LHS.director = RHS.director))
ORDER BY title;",3,13,4,0,4,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0
spider/movie_1/0041,"summarise(input1, 'meanstars = mean(stars, na.rm = T)', ""'mid'""), natural_join3(input0, input1, line0), filter(line1, ""name != 'Brittany Harris' & meanstars > stars"")","SELECT `mid`,
       `meanstars` AS `avg_stars_`
FROM
  (SELECT `LHS`.`rid` AS `rid`,
          `LHS`.`name` AS `name`,
          `LHS`.`mid` AS `mid`,
          `LHS`.`stars` AS `stars`,
          `LHS`.`ratingdate` AS `ratingdate`,
          `RHS`.`meanstars` AS `meanstars`
   FROM
     (SELECT `LHS`.`rid` AS `rid`,
             `LHS`.`name` AS `name`,
             `RHS`.`mid` AS `mid`,
             `RHS`.`stars` AS `stars`,
             `RHS`.`ratingdate` AS `ratingdate`
      FROM `df_reviewer` AS `LHS`
      INNER JOIN `df_rating` AS `RHS` ON (`LHS`.`rid` = `RHS`.`rid`)) AS `LHS`
   INNER JOIN
     (SELECT `mid`,
             AVG(`stars`) AS `meanstars`
      FROM `df_rating`
      GROUP BY `mid`) AS `RHS` ON (`LHS`.`mid` = `RHS`.`mid`))
WHERE (`name` != 'Brittany Harris'
       AND meanstars > stars)
ORDER BY mid;",3,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/movie_1/0020,"left_join(input0, input2), left_join(input1, line0)","SELECT name,
       title,
       stars,
       ratingdate
FROM
  (SELECT LHS.rid AS rid,
          LHS.name AS name,
          RHS.mid AS mid,
          RHS.title AS title,
          RHS.year AS YEAR,
          RHS.director AS director,
          RHS.stars AS stars,
          RHS.ratingdate AS ratingdate
   FROM df_reviewer AS LHS
   LEFT JOIN
     (SELECT LHS.mid AS mid,
             LHS.title AS title,
             LHS.year AS YEAR,
             LHS.director AS director,
             RHS.rid AS rid,
             RHS.stars AS stars,
             RHS.ratingdate AS ratingdate
      FROM df_movie AS LHS
      LEFT JOIN df_rating AS RHS ON (LHS.mid = RHS.mid)) AS RHS ON (LHS.rid = RHS.rid))
ORDER BY name;",2,10,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
spider/movie_1/0019,"left_join(input0, input1), summarise(line0, 'meanstars = mean(stars, na.rm = T)', ""'director','rid'""), filter(line1, ""director == 'James Cameron'""), inner_join(line2, line0, ""'rid'"")","SELECT DISTINCT `title`,
                `director_other` AS `director`
FROM
  (SELECT `LHS`.`director` AS `director`,
          `LHS`.`rid` AS `rid`,
          `LHS`.`meanstars` AS `meanstars`,
          `RHS`.`mid` AS `mid`,
          `RHS`.`title` AS `title`,
          `RHS`.`year` AS `year`,
          `RHS`.`director` AS `director_other`,
          `RHS`.`stars` AS `stars`,
          `RHS`.`ratingdate` AS `ratingdate`
   FROM
     (SELECT *
      FROM
        (SELECT `director`,
                `rid`,
                AVG(`stars`) AS `meanstars`
         FROM
           (SELECT `LHS`.`mid` AS `mid`,
                   `LHS`.`title` AS `title`,
                   `LHS`.`year` AS `year`,
                   `LHS`.`director` AS `director`,
                   `RHS`.`rid` AS `rid`,
                   `RHS`.`stars` AS `stars`,
                   `RHS`.`ratingdate` AS `ratingdate`
            FROM `df_movie` AS `LHS`
            LEFT JOIN `df_rating` AS `RHS` ON (`LHS`.`mid` = `RHS`.`mid`))
         GROUP BY `director`,
                  `rid`)
      WHERE (`director` = 'James Cameron')) AS LHS
   INNER JOIN
     (SELECT LHS.mid AS mid,
             LHS.title AS title,
             LHS.year AS YEAR,
             LHS.director AS director,
             RHS.rid AS rid,
             RHS.stars AS stars,
             RHS.ratingdate AS ratingdate
      FROM df_movie AS LHS
      LEFT JOIN df_rating AS RHS ON (LHS.mid = RHS.mid)) AS RHS ON (LHS.rid = RHS.rid))
ORDER BY title;",4,18,6,1,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0
spider/movie_1/0007,"filter(input0, ""name == 'Daniel Lewis'"")","SELECT `rid`
FROM `df_reviewer`
WHERE (`name` = 'Daniel Lewis')
ORDER BY rid;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/movie_1/0034,"natural_join(input0, input1), limit(line0, 'desc(stars)')","SELECT title,
       YEAR
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.mid AS mid,
                LHS.title AS title,
                LHS.year AS YEAR,
                LHS.director AS director,
                RHS.rid AS rid,
                RHS.stars AS stars,
                RHS.ratingdate AS ratingdate
         FROM df_movie AS LHS
         INNER JOIN df_rating AS RHS ON (LHS.mid = RHS.mid))
      ORDER BY stars DESC)
   LIMIT 3);",1,13,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/movie_1/0024,"natural_join(input1, input2), inner_join(line0, input0, ""'mid' = 'mid','name' = 'director'"")","SELECT name,
       title,
       stars
FROM
  (SELECT LHS.rid AS rid,
          LHS.name AS name,
          LHS.mid AS mid,
          LHS.stars AS stars,
          LHS.ratingdate AS ratingdate,
          RHS.title AS title,
          RHS.year AS YEAR
   FROM
     (SELECT LHS.rid AS rid,
             LHS.name AS name,
             RHS.mid AS mid,
             RHS.stars AS stars,
             RHS.ratingdate AS ratingdate
      FROM df_reviewer AS LHS
      INNER JOIN df_rating AS RHS ON (LHS.rid = RHS.rid)) AS LHS
   INNER JOIN df_movie AS RHS ON (LHS.mid = RHS.mid
                                  AND LHS.name = RHS.director))
ORDER BY name;",2,9,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0
spider/movie_1/0021,"summarise(input1, 'n = n()', ""'rid'""), left_join(input0, line0), filter(line1, 'n >= 3L')","SELECT name
FROM
  (SELECT LHS.rid AS rid,
          LHS.name AS name,
          RHS.n AS n
   FROM df_reviewer AS LHS
   LEFT JOIN
     (SELECT rid,
             COUNT() AS n
      FROM df_rating
      GROUP BY rid) AS RHS ON (LHS.rid = RHS.rid))
WHERE (n >= 3)
ORDER BY name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/movie_1/0023,"filter(input1, ""name == 'Sarah Martinez'""), natural_join3(input0, input2, line0)","SELECT DISTINCT `director`
FROM
  (SELECT `LHS`.`mid` AS `mid`,
          `LHS`.`title` AS `title`,
          `LHS`.`year` AS `year`,
          `LHS`.`director` AS `director`,
          `LHS`.`rid` AS `rid`,
          `LHS`.`stars` AS `stars`,
          `LHS`.`ratingdate` AS `ratingdate`,
          `RHS`.`name` AS `name`
   FROM
     (SELECT `LHS`.`mid` AS `mid`,
             `LHS`.`title` AS `title`,
             `LHS`.`year` AS `year`,
             `LHS`.`director` AS `director`,
             `RHS`.`rid` AS `rid`,
             `RHS`.`stars` AS `stars`,
             `RHS`.`ratingdate` AS `ratingdate`
      FROM `df_movie` AS `LHS`
      INNER JOIN `df_rating` AS `RHS` ON (`LHS`.`mid` = `RHS`.`mid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_reviewer`
      WHERE (`name` = 'Sarah Martinez')) AS RHS ON (LHS.rid = RHS.rid))
ORDER BY director;",2,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/movie_1/0001,"filter(input0, ""director == 'Steven Spielberg'"")","SELECT `title`
FROM `df_movie`
WHERE (`director` = 'Steven Spielberg')
ORDER BY title;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/movie_1/0043,"mutate(input0, 'n = n()'), summarise(line0, 'meanstars = mean(stars, na.rm = T)', ""'mid'""), filter(line1, 'meanstars > 2')","SELECT mid,
       meanstars AS avg_stars_
FROM
  (SELECT mid,
          AVG(stars) AS meanstars
   FROM
     (SELECT rid,
             mid,
             stars,
             ratingdate,
             COUNT(*) OVER () AS n
      FROM df_rating)
   GROUP BY mid)
WHERE (meanstars > 2.0)
ORDER BY mid;",3,8,3,0,3,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/movie_1/0046,"natural_join3(input0, input1, input2), filter(line0, ""name == 'Brittany Harris' | year > 2000L"")","SELECT DISTINCT `title`
FROM
  (SELECT `LHS`.`mid` AS `mid`,
          `LHS`.`title` AS `title`,
          `LHS`.`year` AS `year`,
          `LHS`.`director` AS `director`,
          `LHS`.`rid` AS `rid`,
          `LHS`.`name` AS `name`,
          `RHS`.`stars` AS `stars`,
          `RHS`.`ratingdate` AS `ratingdate`
   FROM
     (SELECT `LHS`.`mid` AS `mid`,
             `LHS`.`title` AS `title`,
             `LHS`.`year` AS `year`,
             `LHS`.`director` AS `director`,
             `RHS`.`rid` AS `rid`,
             `RHS`.`name` AS `name`
      FROM `df_movie` AS `LHS`
      CROSS JOIN `df_reviewer` AS `RHS`) AS `LHS`
   INNER JOIN `df_rating` AS `RHS` ON (`LHS`.`mid` = `RHS`.`mid`
                                       AND `LHS`.`rid` = `RHS`.`rid`))
WHERE (`name` = 'Brittany Harris'
       OR YEAR > 2000)
ORDER BY title;",2,11,3,1,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/movie_1/0047,"filter(input0, ""director == 'James Cameron' | year < 1980L""), intersect(line0, line0, 'title')","SELECT `title`
FROM
  (SELECT `title`
   FROM `df_movie`
   WHERE (`director` = 'James Cameron'
          OR `year` < 1980) INTERSECT
     SELECT `title`
     FROM `df_movie` WHERE (`director` = 'James Cameron'
                            OR YEAR < 1980))
ORDER BY title;",2,12,3,0,3,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/movie_1/0009,"mutate(input0, 'maxstars = max(stars)'), mutate(line0, 'minstars = min(stars)')","SELECT DISTINCT maxstars AS max_stars_,
                MIN(stars) OVER () AS min_stars_
FROM
  (SELECT rid,
          mid,
          stars,
          ratingdate,
          MAX(stars) OVER () AS maxstars
   FROM df_rating)
ORDER BY max_stars_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/movie_1/0011,"filter(input1, 'stars >= 5L'), semi_join(input0, line0)","SELECT director,
       title
FROM
  (SELECT *
   FROM df_movie AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_rating
           WHERE (stars >= 5)) AS RHS
        WHERE (LHS.mid = RHS.mid) ))
ORDER BY director;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/movie_1/0029,"summarise(input0, 'n = n()', ""'director'""), filter(line0, 'n <= 1L'), mutate(line1, 'n = n()')","SELECT director
FROM
  (SELECT director,
          COUNT() AS n
   FROM df_movie
   GROUP BY director)
WHERE (n <= 1)
ORDER BY director;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/movie_1/0010,"filter(input1, 'stars >= 4L'), natural_join(input0, line0)","SELECT DISTINCT YEAR
FROM
  (SELECT LHS.mid AS mid,
          LHS.title AS title,
          LHS.year AS YEAR,
          LHS.director AS director,
          RHS.rid AS rid,
          RHS.stars AS stars,
          RHS.ratingdate AS ratingdate
   FROM df_movie AS LHS
   INNER JOIN
     (SELECT *
      FROM df_rating
      WHERE (stars >= 4)) AS RHS ON (LHS.mid = RHS.mid))
ORDER BY YEAR;",2,12,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/movie_1/0044,"filter(input0, 'stars == 4L'), anti_join(input0, line0, ""'rid'"")","SELECT DISTINCT rid
FROM
  (SELECT *
   FROM df_rating AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_rating
           WHERE (stars = 4)) AS RHS
        WHERE (LHS.rid = RHS.rid) ))
ORDER BY rid;",2,14,4,1,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/movie_1/0040,"filter(input1, 'stars != 3L'), semi_join(input0, line0)","SELECT name
FROM
  (SELECT *
   FROM df_reviewer AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_rating
           WHERE (stars != 3)) AS RHS
        WHERE (LHS.rid = RHS.rid) ))
ORDER BY name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/movie_1/0028,"inner_join(input0, input0, ""'director'""), cross_join(line0, input0, 'title != title.other')","SELECT DISTINCT title,
                YEAR
FROM
  (SELECT LHS.mid AS mid,
          LHS.title AS title,
          LHS.year AS YEAR,
          LHS.director AS director,
          LHS.mid_other AS mid_other,
          LHS.title_other AS title_other,
          LHS.year_other AS year_other,
          RHS.mid AS mid_other_other,
          RHS.title AS title_other_other,
          RHS.year AS year_other_other,
          RHS.director AS director_other
   FROM
     (SELECT LHS.mid AS mid,
             LHS.title AS title,
             LHS.year AS YEAR,
             LHS.director AS director,
             RHS.mid AS mid_other,
             RHS.title AS title_other,
             RHS.year AS year_other
      FROM df_movie AS LHS
      INNER JOIN df_movie AS RHS ON (LHS.director = RHS.director)) AS LHS
   CROSS JOIN df_movie AS RHS)
WHERE (title != title_other)
ORDER BY title;",2,12,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
spider/movie_1/0031,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'director'"")","SELECT n AS count___,
       director
FROM
  (SELECT director,
          COUNT() AS n
   FROM
     (SELECT LHS.mid AS mid,
             LHS.title AS title,
             LHS.year AS YEAR,
             LHS.director AS director,
             RHS.rid AS rid,
             RHS.stars AS stars,
             RHS.ratingdate AS ratingdate
      FROM df_movie AS LHS
      INNER JOIN df_rating AS RHS ON (LHS.mid = RHS.mid))
   GROUP BY director)
ORDER BY count___;",2,8,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/book_2/0002,df_book,"SELECT writer
FROM df_book
ORDER BY writer;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/book_2/0017,"anti_join(input1, input0, ""'book_id'"")","SELECT title
FROM
  (SELECT *
   FROM df_book AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_publication AS RHS
        WHERE (LHS.book_id = RHS.book_id) ))
ORDER BY title;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/book_2/0008,"limit(input0, 'desc(price)')","SELECT publisher
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_publication
      ORDER BY price DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/book_2/0003,df_book,"SELECT title
FROM df_book
ORDER BY title;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/book_2/0013,"summarise(input0, 'n = n()', ""'publisher'""), natural_join(input0, line0), filter(line1, 'n != 1L')","SELECT DISTINCT publisher
FROM
  (SELECT LHS.publication_id AS publication_id,
          LHS.book_id AS book_id,
          LHS.publisher AS publisher,
          LHS.publication_date AS publication_date,
          LHS.price AS price,
          RHS.n AS n
   FROM df_publication AS LHS
   INNER JOIN
     (SELECT publisher,
             COUNT() AS n
      FROM df_publication
      GROUP BY publisher) AS RHS ON (LHS.publisher = RHS.publisher))
WHERE (n != 1)
ORDER BY publisher;",3,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/book_2/0006,df_publication,"SELECT publication_date
FROM df_publication
ORDER BY publication_date;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/book_2/0004,"filter(input0, ""writer != 'Elaine Lee'"")","SELECT `title`
FROM `df_book`
WHERE (`writer` != 'Elaine Lee')
ORDER BY title;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/book_2/0012,"semi_join(input1, input0)","SELECT title
FROM
  (SELECT *
   FROM df_book AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_publication AS RHS
        WHERE (LHS.book_id = RHS.book_id) ))
ORDER BY title;",1,9,3,0,3,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
spider/book_2/0015,"inner_join(input0, input0, ""'publication_id' = 'book_id','price' = 'price'""), summarise(line0, 'n = n()', ""'publication_date'"")","SELECT publication_date
FROM
  (SELECT publication_date,
          COUNT() AS n
   FROM
     (SELECT publication_id,
             publication_id AS book_id,
             publisher,
             publication_date,
             price,
             publication_id_other,
             publisher_other,
             publication_date_other
      FROM
        (SELECT LHS.publication_id AS publication_id,
                LHS.book_id AS book_id,
                LHS.publisher AS publisher,
                LHS.publication_date AS publication_date,
                LHS.price AS price,
                RHS.publication_id AS publication_id_other,
                RHS.publisher AS publisher_other,
                RHS.publication_date AS publication_date_other
         FROM df_publication AS LHS
         INNER JOIN df_publication AS RHS ON (LHS.publication_id = RHS.book_id
                                              AND LHS.price = RHS.price)))
   GROUP BY publication_date)
ORDER BY publication_date;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/book_2/0005,df_book,"SELECT title,
       issues
FROM df_book
ORDER BY title;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/book_2/0016,"summarise(input0, 'n = n()', ""'writer'""), filter(line0, 'n != 1L'), cross_join(line1, line1, 'n == n.other')","SELECT DISTINCT writer
FROM
  (SELECT LHS.writer AS writer,
          LHS.n AS n,
          RHS.writer AS writer_other,
          RHS.n AS n_other
   FROM
     (SELECT *
      FROM
        (SELECT writer,
                COUNT() AS n
         FROM df_book
         GROUP BY writer)
      WHERE (n != 1)) AS LHS
   CROSS JOIN
     (SELECT *
      FROM
        (SELECT writer,
                COUNT() AS n
         FROM df_book
         GROUP BY writer)
      WHERE (n != 1)) AS RHS)
WHERE (n = n_other)
ORDER BY writer;",3,16,6,1,6,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0
spider/book_2/0018,"filter(input0, 'price > 10000000 & price > 5000000')","SELECT publisher
FROM df_publication
WHERE (price > 10000000.0
       AND price > 5000000.0)
ORDER BY publisher;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/book_2/0020,"filter(input0, ""publisher == 'Wiley'""), intersect(input0, line0, 'price')","SELECT `price`
FROM
  (SELECT `price`
   FROM `df_publication` INTERSECT SELECT `price`
   FROM `df_publication`
   WHERE (`publisher` = 'Wiley'))
ORDER BY price;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/book_2/0019,"summarise(input0, 'n_distinct = n_distinct(publication_date)', ''), mutate(line0, 'n = n()')","SELECT n_distinct AS count__distinct_publication_date_
FROM
  (SELECT COUNT(DISTINCT publication_date) AS n_distinct
   FROM df_publication)
ORDER BY count__distinct_publication_date_;",2,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/book_2/0007,"filter(input0, 'price > 5000000')","SELECT publisher
FROM df_publication
WHERE (price > 5000000.0)
ORDER BY publisher;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/book_2/0001,"summarise(input0, 'n = n()', ""'book_id','writer'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT book_id,
             writer,
             COUNT() AS n
      FROM df_book
      GROUP BY book_id,
               writer))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/book_2/0009,"limit(input0, 'price')","SELECT publication_date
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_publication
      ORDER BY price)
   LIMIT 3);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/book_2/0011,"filter(input0, 'price >= 4000000'), natural_join(input1, line0)","SELECT writer
FROM
  (SELECT LHS.book_id AS book_id,
          LHS.title AS title,
          LHS.issues AS issues,
          LHS.writer AS writer,
          RHS.publication_id AS publication_id,
          RHS.publisher AS publisher,
          RHS.publication_date AS publication_date,
          RHS.price AS price
   FROM df_book AS LHS
   INNER JOIN
     (SELECT *
      FROM df_publication
      WHERE (price >= 4000000.0)) AS RHS ON (LHS.book_id = RHS.book_id))
ORDER BY writer;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/book_2/0010,"inner_join(input1, input0, ""'book_id'"")","SELECT title,
       publication_date
FROM
  (SELECT LHS.book_id AS book_id,
          LHS.title AS title,
          LHS.issues AS issues,
          LHS.writer AS writer,
          RHS.publication_id AS publication_id,
          RHS.publisher AS publisher,
          RHS.publication_date AS publication_date,
          RHS.price AS price
   FROM df_book AS LHS
   INNER JOIN df_publication AS RHS ON (LHS.book_id = RHS.book_id))
ORDER BY title;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/student_1/0033,"summarise(input0, 'n = n()', ""'classroom','grade'""), natural_join(input1, line0), limit(line1, 'desc(n)')","SELECT firstname,
       lastname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.lastname AS lastname,
                LHS.firstname AS firstname,
                LHS.classroom AS classroom,
                RHS.grade AS grade,
                RHS.n AS n
         FROM df_teachers AS LHS
         INNER JOIN
           (SELECT classroom,
                   grade,
                   COUNT() AS n
            FROM df_list
            GROUP BY classroom,
                     grade) AS RHS ON (LHS.classroom = RHS.classroom))
      ORDER BY n DESC)
   LIMIT 1);",2,13,5,0,5,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/student_1/0002,"filter(input0, 'classroom == 111L'), semi_join(line0, input0)","SELECT lastname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_list
      WHERE (classroom = 111)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_list AS RHS
        WHERE (LHS.lastname = RHS.lastname
               AND LHS.firstname = RHS.firstname
               AND LHS.grade = RHS.grade
               AND LHS.classroom = RHS.classroom) ))
ORDER BY lastname;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/student_1/0003,"filter(input0, 'classroom == 108L'), semi_join(line0, input0)","SELECT firstname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_list
      WHERE (classroom = 108)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_list AS RHS
        WHERE (LHS.lastname = RHS.lastname
               AND LHS.firstname = RHS.firstname
               AND LHS.grade = RHS.grade
               AND LHS.classroom = RHS.classroom) ))
ORDER BY firstname;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/student_1/0027,"summarise(input0, 'n = n()', ""'grade'""), summarise(input0, 'n_distinct = n_distinct(classroom)', ""'grade'""), left_join(line0, line1)","SELECT grade,
       n_distinct AS count_distinct_classroom_,
       n AS count___
FROM
  (SELECT LHS.grade AS grade,
          LHS.n AS n,
          RHS.n_distinct AS n_distinct
   FROM
     (SELECT grade,
             COUNT() AS n
      FROM df_list
      GROUP BY grade) AS LHS
   LEFT JOIN
     (SELECT grade,
             COUNT(DISTINCT classroom) AS n_distinct
      FROM df_list
      GROUP BY grade) AS RHS ON (LHS.grade = RHS.grade))
ORDER BY grade;",3,10,4,1,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0
spider/student_1/0022,"filter(input0, ""lastname == 'TARRING'""), intersect(input1, line0, 'classroom'), summarise(line1, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT `classroom`
      FROM `df_teachers` INTERSECT SELECT `classroom`
      FROM `df_list`
      WHERE (`lastname` = 'TARRING')))
ORDER BY count___;",3,10,4,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0
spider/student_1/0030,"summarise(input0, 'n = n()', ""'classroom','grade'"")","SELECT classroom,
       n AS count___
FROM
  (SELECT classroom,
          grade,
          COUNT() AS n
   FROM df_list
   GROUP BY classroom,
            grade)
ORDER BY classroom;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/student_1/0013,"filter(input0, 'classroom == 109L'), semi_join(input0, line0)","SELECT lastname
FROM
  (SELECT *
   FROM df_teachers AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_teachers
           WHERE (classroom = 109)) AS RHS
        WHERE (LHS.lastname = RHS.lastname
               AND LHS.firstname = RHS.firstname
               AND LHS.classroom = RHS.classroom) ))
ORDER BY lastname;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/student_1/0006,"filter(input0, 'classroom == 103L'), semi_join(line0, input0)","SELECT DISTINCT grade
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_list
      WHERE (classroom = 103)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_list AS RHS
        WHERE (LHS.lastname = RHS.lastname
               AND LHS.firstname = RHS.firstname
               AND LHS.grade = RHS.grade
               AND LHS.classroom = RHS.classroom) ))
ORDER BY grade;",2,13,4,1,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/student_1/0004,"filter(input0, 'classroom == 107L'), natural_join(input0, line0)","SELECT firstname
FROM
  (SELECT LHS.lastname AS lastname,
          LHS.firstname AS firstname,
          LHS.grade AS grade,
          LHS.classroom AS classroom
   FROM df_list AS LHS
   INNER JOIN
     (SELECT *
      FROM df_list
      WHERE (classroom = 107)) AS RHS ON (LHS.lastname = RHS.lastname
                                          AND LHS.firstname = RHS.firstname
                                          AND LHS.grade = RHS.grade
                                          AND LHS.classroom = RHS.classroom))
ORDER BY firstname;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/student_1/0012,"filter(input0, 'classroom == 110L'), semi_join(input0, line0)","SELECT firstname
FROM
  (SELECT *
   FROM df_teachers AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_teachers
           WHERE (classroom = 110)) AS RHS
        WHERE (LHS.lastname = RHS.lastname
               AND LHS.firstname = RHS.firstname
               AND LHS.classroom = RHS.classroom) ))
ORDER BY firstname;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/student_1/0026,"filter(input0, ""lastname != 'COVIN' & grade == 3L""), left_join(line0, input1)","SELECT `lastname`
FROM
  (SELECT `LHS`.`lastname` AS `lastname`,
          `LHS`.`firstname` AS `firstname`,
          `LHS`.`grade` AS `grade`,
          `LHS`.`classroom` AS `classroom`
   FROM
     (SELECT *
      FROM `df_list`
      WHERE (`lastname` != 'COVIN'
             AND grade = 3)) AS LHS
   LEFT JOIN df_teachers AS RHS ON (LHS.lastname = RHS.lastname
                                    AND LHS.firstname = RHS.firstname
                                    AND LHS.classroom = RHS.classroom))
ORDER BY lastname;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
spider/student_1/0015,df_list,"SELECT firstname,
       lastname
FROM df_list
ORDER BY firstname;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/student_1/0005,df_list,"SELECT DISTINCT classroom,
                grade
FROM df_list
ORDER BY classroom;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/student_1/0032,"summarise(input0, 'n = n()', ""'classroom','grade'""), filter(line0, 'grade == 4L | n == grade')","SELECT classroom,
       n AS count___
FROM
  (SELECT classroom,
          grade,
          COUNT() AS n
   FROM df_list
   GROUP BY classroom,
            grade)
WHERE (grade = 4
       OR n = grade)
ORDER BY classroom;",2,6,2,0,2,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/student_1/0020,"natural_join(input0, input1), filter(line0, ""lastname == 'ONDERSMA'""), summarise(line1, 'n_distinct = n_distinct(lastname)', '')","SELECT `n_distinct` AS `count___`
FROM
  (SELECT COUNT(DISTINCT `lastname`) AS `n_distinct`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`lastname` AS `lastname`,
                `LHS`.`firstname` AS `firstname`,
                `LHS`.`grade` AS `grade`,
                `LHS`.`classroom` AS `classroom`
         FROM `df_list` AS `LHS`
         INNER JOIN `df_teachers` AS `RHS` ON (`LHS`.`lastname` = `RHS`.`lastname`
                                               AND `LHS`.`firstname` = `RHS`.`firstname`
                                               AND `LHS`.`classroom` = `RHS`.`classroom`))
      WHERE (`lastname` = 'ONDERSMA')))
ORDER BY count___;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/student_1/0007,"filter(input0, 'classroom == 105L'), semi_join(line0, input0)","SELECT DISTINCT grade
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_list
      WHERE (classroom = 105)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_list AS RHS
        WHERE (LHS.lastname = RHS.lastname
               AND LHS.firstname = RHS.firstname
               AND LHS.grade = RHS.grade
               AND LHS.classroom = RHS.classroom) ))
ORDER BY grade;",2,13,4,1,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/student_1/0034,"summarise(input0, 'n = n()', ""'classroom','grade'"")","SELECT n AS count___,
       classroom
FROM
  (SELECT classroom,
          grade,
          COUNT() AS n
   FROM df_list
   GROUP BY classroom,
            grade)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/student_1/0024,"filter(input1, ""lastname != 'MADLOCK'""), intersect(input0, line0, 'firstname'), summarise(line1, 'n_distinct = n_distinct(firstname)', '')","SELECT `n_distinct` AS `count___`
FROM
  (SELECT COUNT(DISTINCT `firstname`) AS `n_distinct`
   FROM
     (SELECT `firstname`
      FROM `df_list` INTERSECT SELECT `firstname`
      FROM `df_teachers`
      WHERE (`lastname` != 'MADLOCK')))
ORDER BY count___;",3,11,4,1,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0
spider/student_1/0021,"filter(input0, ""lastname == 'KAWA'""), intersect(input1, line0, 'lastname'), summarise(line1, 'n_distinct = n_distinct(lastname)', '')","SELECT `n_distinct` AS `count___`
FROM
  (SELECT COUNT(DISTINCT `lastname`) AS `n_distinct`
   FROM
     (SELECT `lastname`
      FROM `df_teachers` INTERSECT SELECT `lastname`
      FROM `df_list`
      WHERE (`lastname` = 'KAWA')))
ORDER BY count___;",3,11,4,1,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0
spider/student_1/0023,"filter(input1, ""lastname != 'NABOZNY'""), anti_join(line0, input0, ""'classroom'""), summarise(line1, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM `df_teachers`
         WHERE (`lastname` != 'NABOZNY')) AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM df_list AS RHS
           WHERE (LHS.classroom = RHS.classroom) )))
ORDER BY count___;",3,15,5,0,5,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0
spider/student_1/0001,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_list)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/student_1/0014,df_teachers,"SELECT firstname,
       lastname
FROM df_teachers
ORDER BY firstname;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/student_1/0009,"filter(input0, 'grade == 5L'), natural_join(input0, line0)","SELECT DISTINCT classroom
FROM
  (SELECT LHS.lastname AS lastname,
          LHS.firstname AS firstname,
          LHS.grade AS grade,
          LHS.classroom AS classroom
   FROM df_list AS LHS
   INNER JOIN
     (SELECT *
      FROM df_list
      WHERE (grade = 5)) AS RHS ON (LHS.lastname = RHS.lastname
                                    AND LHS.firstname = RHS.firstname
                                    AND LHS.grade = RHS.grade
                                    AND LHS.classroom = RHS.classroom))
ORDER BY classroom;",2,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/student_1/0025,"filter(input0, ""lastname != 'MOYER' & grade == 1L""), left_join(line0, input1)","SELECT `firstname`,
       `lastname`
FROM
  (SELECT `LHS`.`lastname` AS `lastname`,
          `LHS`.`firstname` AS `firstname`,
          `LHS`.`grade` AS `grade`,
          `LHS`.`classroom` AS `classroom`
   FROM
     (SELECT *
      FROM `df_list`
      WHERE (`lastname` != 'MOYER'
             AND grade = 1)) AS LHS
   LEFT JOIN df_teachers AS RHS ON (LHS.lastname = RHS.lastname
                                    AND LHS.firstname = RHS.firstname
                                    AND LHS.classroom = RHS.classroom))
ORDER BY firstname;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
spider/student_1/0011,"filter(input0, 'grade != 1L'), semi_join(input0, line0), anti_join(input1, line1, ""'classroom'"")","SELECT firstname
FROM
  (SELECT *
   FROM df_teachers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_list AS LHS
           WHERE EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM df_list
                   WHERE (grade != 1)) AS RHS
                WHERE (LHS.lastname = RHS.lastname
                       AND LHS.firstname = RHS.firstname
                       AND LHS.grade = RHS.grade
                       AND LHS.classroom = RHS.classroom) )) AS RHS
        WHERE (LHS.classroom = RHS.classroom) ))
ORDER BY firstname;",3,20,6,0,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/student_1/0029,"summarise(input0, 'n = n()', ""'classroom'""), limit(line0, 'desc(n)')","SELECT classroom
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT classroom,
                COUNT() AS n
         FROM df_list
         GROUP BY classroom)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/student_1/0010,"filter(input0, 'grade != 5L'), cross_join(input0, line0, 'grade == grade.other'), anti_join(input1, line1, ""'classroom'"")","SELECT lastname
FROM
  (SELECT *
   FROM df_teachers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT LHS.lastname AS lastname,
                     LHS.firstname AS firstname,
                     LHS.grade AS grade,
                     LHS.classroom AS classroom,
                     RHS.lastname AS lastname_other,
                     RHS.firstname AS firstname_other,
                     RHS.grade AS grade_other,
                     RHS.classroom AS classroom_other
              FROM df_list AS LHS
              CROSS JOIN
                (SELECT *
                 FROM df_list
                 WHERE (grade != 5)) AS RHS)
           WHERE (grade = grade_other)) AS RHS
        WHERE (LHS.classroom = RHS.classroom) ))
ORDER BY lastname;",3,18,6,0,6,0,4,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0
spider/student_1/0028,"summarise(input0, 'n = n()', ""'classroom','lastname'""), summarise(line0, 'n = n()', ""'classroom','lastname'"")","SELECT DISTINCT classroom,
                n AS count_distinct_grade_
FROM
  (SELECT classroom,
          lastname,
          COUNT() AS n
   FROM
     (SELECT classroom,
             lastname,
             COUNT() AS n
      FROM df_list
      GROUP BY classroom,
               lastname)
   GROUP BY classroom,
            lastname)
ORDER BY classroom;",2,7,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/student_1/0031,"filter(input0, 'grade <= 0L'), summarise(line0, 'n = n()', ""'classroom','grade'"")","SELECT classroom,
       n AS count___
FROM
  (SELECT classroom,
          grade,
          COUNT() AS n
   FROM
     (SELECT *
      FROM df_list
      WHERE (grade <= 0))
   GROUP BY classroom,
            grade)
ORDER BY classroom;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0033,"natural_join(input0, input1)","SELECT budget_type_code,
       budget_type_description,
       document_id
FROM
  (SELECT LHS.budget_type_code AS budget_type_code,
          LHS.budget_type_description AS budget_type_description,
          RHS.document_id AS document_id,
          RHS.document_details AS document_details
   FROM df_ref_budget_codes AS LHS
   INNER JOIN df_documents_with_expenses AS RHS ON (LHS.budget_type_code = RHS.budget_type_code))
ORDER BY budget_type_code;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0037,"anti_join(input0, input1, ""'document_id'"")","SELECT document_id
FROM
  (SELECT *
   FROM df_documents AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_documents_with_expenses AS RHS
        WHERE (LHS.document_id = RHS.document_id) ))
ORDER BY document_id;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/cre_Docs_and_Epenses/0002,df_accounts,"SELECT account_id,
       account_details
FROM df_accounts
ORDER BY account_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0036,"summarise(input0, 'n = n()', ""'budget_type_code','document_id'""), limit(line0, 'desc(n)')","SELECT budget_type_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT budget_type_code,
                document_id,
                COUNT() AS n
         FROM df_documents_with_expenses
         GROUP BY budget_type_code,
                  document_id)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0017,"summarise(input0, 'n = n()', ""'document_description','document_type_code'"")","SELECT document_type_code,
       n AS count___
FROM
  (SELECT document_description,
          document_type_code,
          COUNT() AS n
   FROM df_documents
   GROUP BY document_description,
            document_type_code)
ORDER BY document_type_code;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0008,"summarise(input0, 'n = n()', ""'document_description'"")","SELECT n AS count___
FROM
  (SELECT document_description,
          COUNT() AS n
   FROM df_documents
   GROUP BY document_description)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0038,"anti_join(input0, input1, ""'document_id'""), filter(line0, ""document_type_code == 'CV'"")","SELECT `document_id`
FROM
  (SELECT *
   FROM `df_documents` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM `df_documents_with_expenses` AS `RHS`
        WHERE (`LHS`.`document_id` = `RHS`.`document_id`) ))
WHERE (`document_type_code` = 'CV')
ORDER BY document_id;",2,11,3,0,3,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/cre_Docs_and_Epenses/0003,"summarise(input0, 'n = n()', ""'statement_details','statement_id'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT statement_details,
             STATEMENT_ID,
             COUNT() AS n
      FROM df_statements
      GROUP BY statement_details,
               STATEMENT_ID))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0027,"filter(input1, ""document_name == 'King Book'""), semi_join(input0, line0)","SELECT `project_details`
FROM
  (SELECT *
   FROM `df_projects` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_documents`
           WHERE (`document_name` = 'King Book')) AS RHS
        WHERE (LHS.project_id = RHS.project_id) ))
ORDER BY project_details;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/cre_Docs_and_Epenses/0022,"filter(input0, ""document_type_name == 'Film'"")","SELECT `document_type_description`
FROM `df_ref_document_types`
WHERE (`document_type_name` = 'Film')
ORDER BY document_type_description;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0030,"filter(input0, ""budget_type_code == 'ORG'""), inner_join(line0, input0, ""'budget_type_code'"")","SELECT `budget_type_description`
FROM
  (SELECT `LHS`.`budget_type_code` AS `budget_type_code`,
          `LHS`.`budget_type_description` AS `budget_type_description`,
          `RHS`.`budget_type_description` AS `budget_type_description_other`
   FROM
     (SELECT *
      FROM `df_ref_budget_codes`
      WHERE (`budget_type_code` = 'ORG')) AS LHS
   INNER JOIN df_ref_budget_codes AS RHS ON (LHS.budget_type_code = RHS.budget_type_code))
ORDER BY budget_type_description;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0013,"filter(input0, ""project_details == 'Graph Database project'""), semi_join(input1, line0)","SELECT `document_name`,
       `document_date`
FROM
  (SELECT *
   FROM `df_documents` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_projects`
           WHERE (`project_details` = 'Graph Database project')) AS RHS
        WHERE (LHS.project_id = RHS.project_id) ))
ORDER BY document_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/cre_Docs_and_Epenses/0006,"summarise(input0, 'n = n()', ""'statement_id'"")","SELECT STATEMENT_ID,
       n AS count___
FROM
  (SELECT STATEMENT_ID,
          COUNT() AS n
   FROM df_accounts
   GROUP BY STATEMENT_ID)
ORDER BY STATEMENT_ID;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0004,df_statements,"SELECT STATEMENT_ID,
       statement_details
FROM df_statements
ORDER BY STATEMENT_ID;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0012,"summarise(input0, 'n = n()', ""'document_type_code','project_id'""), filter(line0, ""document_type_code == 'BK'"")","SELECT `n` AS `count___`,
       `project_id`
FROM
  (SELECT `document_type_code`,
          `project_id`,
          COUNT() AS `n`
   FROM `df_documents`
   GROUP BY `document_type_code`,
            `project_id`)
WHERE (`document_type_code` = 'BK')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0026,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'project_details','project_id'""), filter(line1, 'n >= 2L')","SELECT project_id,
       project_details
FROM
  (SELECT project_details,
          project_id,
          COUNT() AS n
   FROM
     (SELECT LHS.project_id AS project_id,
             LHS.project_details AS project_details,
             RHS.document_id AS document_id,
             RHS.document_type_code AS document_type_code,
             RHS.document_date AS document_date,
             RHS.document_name AS document_name,
             RHS.document_description AS document_description,
             RHS.other_details AS other_details
      FROM df_projects AS LHS
      INNER JOIN df_documents AS RHS ON (LHS.project_id = RHS.project_id))
   GROUP BY project_details,
            project_id)
WHERE (n >= 2)
ORDER BY project_id;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0015,"summarise(input0, 'n = n()', ""'project_id'""), filter(line0, 'n == 1L')","SELECT project_id
FROM
  (SELECT project_id,
          COUNT() AS n
   FROM df_documents
   GROUP BY project_id)
WHERE (n = 1)
ORDER BY project_id;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0005,"natural_join(input0, input1)","SELECT STATEMENT_ID,
       statement_details,
       account_details
FROM
  (SELECT LHS.statement_id AS STATEMENT_ID,
          LHS.statement_details AS statement_details,
          RHS.account_id AS account_id,
          RHS.account_details AS account_details
   FROM df_statements AS LHS
   INNER JOIN df_accounts AS RHS ON (LHS.statement_id = RHS.statement_id))
ORDER BY STATEMENT_ID;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0016,"summarise(input0, 'n = n()', ""'document_description','project_id'""), filter(line0, 'n > 2L'), summarise(line1, 'n = n()', ""'document_description','project_id'"")","SELECT project_id
FROM
  (SELECT document_description,
          project_id,
          COUNT() AS n
   FROM
     (SELECT *
      FROM
        (SELECT document_description,
                project_id,
                COUNT() AS n
         FROM df_documents
         GROUP BY document_description,
                  project_id)
      WHERE (n > 2))
   GROUP BY document_description,
            project_id)
ORDER BY project_id;",3,9,4,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0032,"filter(input0, ""budget_type_code == 'SF'"")","SELECT `document_id`
FROM `df_documents_with_expenses`
WHERE (`budget_type_code` = 'SF')
ORDER BY document_id;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0018,"summarise(input0, 'n = n()', ""'document_description','document_type_code'""), limit(line0, 'desc(document_description)')","SELECT document_type_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT document_description,
                document_type_code,
                COUNT() AS n
         FROM df_documents
         GROUP BY document_description,
                  document_type_code)
      ORDER BY document_description DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0035,"summarise(input0, 'n = n()', ""'budget_type_code','document_details'"")","SELECT budget_type_code,
       n AS count___
FROM
  (SELECT budget_type_code,
          document_details,
          COUNT() AS n
   FROM df_documents_with_expenses
   GROUP BY budget_type_code,
            document_details)
ORDER BY budget_type_code;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0020,"filter(input1, ""statement_details == 'Private Project'""), inner_join(input0, line0, ""'document_id' = 'statement_id'"")","SELECT `statement_details`,
       `document_name`
FROM
  (SELECT `LHS`.`document_id` AS `document_id`,
          `LHS`.`document_type_code` AS `document_type_code`,
          `LHS`.`project_id` AS `project_id`,
          `LHS`.`document_date` AS `document_date`,
          `LHS`.`document_name` AS `document_name`,
          `LHS`.`document_description` AS `document_description`,
          `LHS`.`other_details` AS `other_details`,
          `RHS`.`statement_details` AS `statement_details`
   FROM `df_documents` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_statements`
      WHERE (`statement_details` = 'Private Project')) AS RHS ON (LHS.document_id = RHS.statement_id))
ORDER BY statement_details;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0019,"summarise(input0, 'n = n()', ""'document_type_code','other_details'""), anti_join(line0, input0, ""'other_details'""), filter(line1, 'n < 3L')","SELECT document_type_code
FROM
  (SELECT *
   FROM
     (SELECT document_type_code,
             other_details,
             COUNT() AS n
      FROM df_documents
      GROUP BY document_type_code,
               other_details) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_documents AS RHS
        WHERE (LHS.other_details = RHS.other_details) ))
WHERE (n < 3)
ORDER BY document_type_code;",3,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0
spider/cre_Docs_and_Epenses/0007,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'statement_details','statement_id'""), limit(line1, 'statement_id')","SELECT STATEMENT_ID,
       statement_details
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT statement_details,
                STATEMENT_ID,
                COUNT() AS n
         FROM
           (SELECT LHS.statement_id AS STATEMENT_ID,
                   LHS.statement_details AS statement_details,
                   RHS.account_id AS account_id,
                   RHS.account_details AS account_details
            FROM df_statements AS LHS
            INNER JOIN df_accounts AS RHS ON (LHS.statement_id = RHS.statement_id))
         GROUP BY statement_details,
                  STATEMENT_ID)
      ORDER BY STATEMENT_ID)
   LIMIT 1);",2,12,5,0,5,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0034,"filter(input0, ""budget_type_description == 'Government'""), natural_join(input1, line0)","SELECT `document_id`
FROM
  (SELECT `LHS`.`document_id` AS `document_id`,
          `LHS`.`budget_type_code` AS `budget_type_code`,
          `LHS`.`document_details` AS `document_details`,
          `RHS`.`budget_type_description` AS `budget_type_description`
   FROM `df_documents_with_expenses` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_ref_budget_codes`
      WHERE (`budget_type_description` = 'Government')) AS RHS ON (LHS.budget_type_code = RHS.budget_type_code))
ORDER BY document_id;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0024,"summarise(input0, 'n = n()', ""'project_details','project_id'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT project_details,
             project_id,
             COUNT() AS n
      FROM df_projects
      GROUP BY project_details,
               project_id))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0021,df_ref_document_types,"SELECT document_type_code,
       document_type_name,
       document_type_description
FROM df_ref_document_types
ORDER BY document_type_code;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0023,"natural_join(input0, input1)","SELECT document_type_name,
       document_type_description,
       document_date
FROM
  (SELECT LHS.document_type_code AS document_type_code,
          LHS.document_type_name AS document_type_name,
          LHS.document_type_description AS document_type_description,
          RHS.document_id AS document_id,
          RHS.project_id AS project_id,
          RHS.document_date AS document_date,
          RHS.document_name AS document_name,
          RHS.document_description AS document_description,
          RHS.other_details AS other_details
   FROM df_ref_document_types AS LHS
   INNER JOIN df_documents AS RHS ON (LHS.document_type_code = RHS.document_type_code))
ORDER BY document_type_name;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0001,"summarise(input0, 'n = n()', ""'account_details','statement_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT account_details,
          STATEMENT_ID,
          COUNT() AS n
   FROM df_accounts
   GROUP BY account_details,
            STATEMENT_ID)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0014,"summarise(input0, 'n = n()', ""'project_id'""), semi_join(line0, input0)","SELECT project_id,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT project_id,
             COUNT() AS n
      FROM df_documents
      GROUP BY project_id) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_documents AS RHS
        WHERE (LHS.project_id = RHS.project_id) ))
ORDER BY project_id;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/cre_Docs_and_Epenses/0009,"filter(input0, ""document_name == 'Noel CV' | document_name == 'King Book'"")","SELECT `document_type_code`,
       `document_name`,
       `document_description`
FROM `df_documents`
WHERE (`document_name` = 'Noel CV'
       OR `document_name` = 'King Book')
ORDER BY document_type_code;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0025,df_projects,"SELECT project_id,
       project_details
FROM df_projects
ORDER BY project_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0011,"filter(input0, ""document_type_code == 'BK'""), anti_join(line0, input0, ""'document_id','other_details'"")","SELECT `document_name`,
       `document_id`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_documents`
      WHERE (`document_type_code` = 'BK')) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_documents AS RHS
        WHERE (LHS.document_id = RHS.document_id
               AND LHS.other_details = RHS.other_details) ))
ORDER BY document_name;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/cre_Docs_and_Epenses/0029,df_ref_budget_codes,"SELECT budget_type_code,
       budget_type_description
FROM df_ref_budget_codes
ORDER BY budget_type_code;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0010,df_documents,"SELECT document_id,
       document_name
FROM df_documents
ORDER BY document_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0040,"anti_join(input0, input1, ""'document_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT *
   FROM df_documents AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_documents_with_expenses AS RHS
        WHERE (LHS.document_id = RHS.document_id) ))
ORDER BY count___;",2,12,3,1,3,0,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
spider/cre_Docs_and_Epenses/0028,"inner_join(input0, input0, ""'budget_type_description'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT LHS.budget_type_code AS budget_type_code,
             LHS.budget_type_description AS budget_type_description,
             RHS.budget_type_code AS budget_type_code_other
      FROM df_ref_budget_codes AS LHS
      INNER JOIN df_ref_budget_codes AS RHS ON (LHS.budget_type_description = RHS.budget_type_description)))
ORDER BY count___;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/cre_Docs_and_Epenses/0031,"summarise(input0, 'n = n()', ""'budget_type_code','document_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT budget_type_code,
          document_id,
          COUNT() AS n
   FROM df_documents_with_expenses
   GROUP BY budget_type_code,
            document_id)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/customers_and_products_contacts/0002,df_addresses,"SELECT city
FROM df_addresses
ORDER BY city;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_and_products_contacts/0003,"summarise(input0, 'n = n()', ""'country','state_province_county'""), semi_join(line0, input0)","SELECT state_province_county,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT country,
             state_province_county,
             COUNT() AS n
      FROM df_addresses
      GROUP BY country,
               state_province_county) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_addresses AS RHS
        WHERE (LHS.country = RHS.country
               AND LHS.state_province_county = RHS.state_province_county) ))
ORDER BY state_province_county;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/customers_and_products_contacts/0013,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'customer_name','payment_method_code'""), filter(line1, ""payment_method_code == 'Credit Card' & n > 2L"")","SELECT `customer_name`
FROM
  (SELECT `customer_name`,
          `payment_method_code`,
          COUNT() AS `n`
   FROM
     (SELECT `LHS`.`customer_id` AS `customer_id`,
             `LHS`.`payment_method_code` AS `payment_method_code`,
             `LHS`.`customer_number` AS `customer_number`,
             `LHS`.`customer_name` AS `customer_name`,
             `LHS`.`customer_address` AS `customer_address`,
             `LHS`.`customer_phone` AS `customer_phone`,
             `LHS`.`customer_email` AS `customer_email`,
             `RHS`.`order_id` AS `order_id`,
             `RHS`.`order_date` AS `order_date`,
             `RHS`.`order_status_code` AS `order_status_code`
      FROM `df_customers` AS `LHS`
      INNER JOIN `df_customer_orders` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`))
   GROUP BY `customer_name`,
            `payment_method_code`)
WHERE (`payment_method_code` = 'Credit Card'
       AND n > 2)
ORDER BY customer_name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/customers_and_products_contacts/0006,"summarise(input0, 'n = n()', ""'product_id','product_price'""), semi_join(input0, line0)","SELECT DISTINCT product_type_code
FROM
  (SELECT *
   FROM df_products AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT product_id,
                  product_price,
                  COUNT() AS n
           FROM df_products
           GROUP BY product_id,
                    product_price) AS RHS
        WHERE (LHS.product_id = RHS.product_id
               AND LHS.product_price = RHS.product_price) ))
ORDER BY product_type_code;",2,12,4,1,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/customers_and_products_contacts/0004,"anti_join(input0, input1, '')","SELECT customer_name,
       customer_phone
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_customer_address_history AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/customers_and_products_contacts/0015,"filter(input0, 'product_price > 1000 | product_price < 500')","SELECT product_type_code,
       product_name
FROM df_products
WHERE (product_price > 1000.0
       OR product_price < 500.0)
ORDER BY product_type_code;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/customers_and_products_contacts/0005,"mutate(input0, 'n = n()'), natural_join3(input0, input1, line0), limit(line1, 'desc(customer_address)')","SELECT customer_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.payment_method_code AS payment_method_code,
                LHS.customer_number AS customer_number,
                LHS.customer_name AS customer_name,
                LHS.customer_address AS customer_address,
                LHS.customer_phone AS customer_phone,
                LHS.customer_email AS customer_email,
                LHS.order_id AS order_id,
                LHS.order_date AS order_date,
                LHS.order_status_code AS order_status_code,
                RHS.n AS n
         FROM
           (SELECT LHS.customer_id AS customer_id,
                   LHS.payment_method_code AS payment_method_code,
                   LHS.customer_number AS customer_number,
                   LHS.customer_name AS customer_name,
                   LHS.customer_address AS customer_address,
                   LHS.customer_phone AS customer_phone,
                   LHS.customer_email AS customer_email,
                   RHS.order_id AS order_id,
                   RHS.order_date AS order_date,
                   RHS.order_status_code AS order_status_code
            FROM df_customers AS LHS
            INNER JOIN df_customer_orders AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
         INNER JOIN
           (SELECT customer_id,
                   payment_method_code,
                   customer_number,
                   customer_name,
                   customer_address,
                   customer_phone,
                   customer_email,
                   COUNT(*) OVER () AS n
            FROM df_customers) AS RHS ON (LHS.customer_id = RHS.customer_id
                                          AND LHS.payment_method_code = RHS.payment_method_code
                                          AND LHS.customer_number = RHS.customer_number
                                          AND LHS.customer_name = RHS.customer_name
                                          AND LHS.customer_address = RHS.customer_address
                                          AND LHS.customer_phone = RHS.customer_phone
                                          AND LHS.customer_email = RHS.customer_email))
      ORDER BY customer_address DESC)
   LIMIT 1);",2,17,6,0,6,2,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
spider/customers_and_products_contacts/0001,"mutate(input0, 'n = n()'), filter(line0, ""country == 'USA'"")","SELECT DISTINCT `n` AS `count___`
FROM
  (SELECT `address_id`,
          `line_1_number_building`,
          `city`,
          `zip_postcode`,
          `state_province_county`,
          `country`,
          COUNT(*) OVER () AS `n`
   FROM `df_addresses`)
WHERE (`country` = 'USA')
ORDER BY count___;",2,7,2,1,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/customers_and_products_contacts/0014,"natural_join3(input0, input1, input2), limit(line0, 'desc(customer_address)')","SELECT customer_name,
       customer_phone
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.payment_method_code AS payment_method_code,
                LHS.customer_number AS customer_number,
                LHS.customer_name AS customer_name,
                LHS.customer_address AS customer_address,
                LHS.customer_phone AS customer_phone,
                LHS.customer_email AS customer_email,
                LHS.order_id AS order_id,
                LHS.order_date AS order_date,
                LHS.order_status_code AS order_status_code,
                RHS.order_item_id AS order_item_id,
                RHS.product_id AS product_id,
                RHS.order_quantity AS order_quantity
         FROM
           (SELECT LHS.customer_id AS customer_id,
                   LHS.payment_method_code AS payment_method_code,
                   LHS.customer_number AS customer_number,
                   LHS.customer_name AS customer_name,
                   LHS.customer_address AS customer_address,
                   LHS.customer_phone AS customer_phone,
                   LHS.customer_email AS customer_email,
                   RHS.order_id AS order_id,
                   RHS.order_date AS order_date,
                   RHS.order_status_code AS order_status_code
            FROM df_customers AS LHS
            INNER JOIN df_customer_orders AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
         INNER JOIN df_order_items AS RHS ON (LHS.order_id = RHS.order_id))
      ORDER BY customer_address DESC)
   LIMIT 1);",1,14,5,0,5,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
spider/customers_and_products_contacts/0011,"summarise(input0, 'meanproduct_price = mean(product_price, na.rm = T)', ""'product_id','product_type_code'""), summarise(input0, 'n_distinct = n_distinct(product_price)', ""'product_name','product_type_code'""), inner_join(line0, line1, ""'product_id' = 'n_distinct','product_type_code' = 'product_type_code'"")","SELECT product_id AS count___
FROM
  (SELECT LHS.product_id AS product_id,
          LHS.product_type_code AS product_type_code,
          LHS.meanproduct_price AS meanproduct_price,
          RHS.product_name AS product_name
   FROM
     (SELECT product_id,
             product_type_code,
             AVG(product_price) AS meanproduct_price
      FROM df_products
      GROUP BY product_id,
               product_type_code) AS LHS
   INNER JOIN
     (SELECT product_name,
             product_type_code,
             COUNT(DISTINCT product_price) AS n_distinct
      FROM df_products
      GROUP BY product_name,
               product_type_code) AS RHS ON (LHS.product_id = RHS.n_distinct
                                             AND LHS.product_type_code = RHS.product_type_code))
ORDER BY count___;",3,10,4,1,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0
spider/customers_and_products_contacts/0010,"mutate(input0, 'maxproduct_price = max(product_price)'), mutate(line0, 'minproduct_price = min(product_price)'), mutate(line1, 'meanproduct_price = mean(product_price, na.rm = T)')","SELECT DISTINCT minproduct_price AS min_product_price_,
                maxproduct_price AS max_product_price_,
                AVG(product_price) OVER () AS avg_product_price_
FROM
  (SELECT product_id,
          product_type_code,
          product_name,
          product_price,
          maxproduct_price,
          MIN(product_price) OVER () AS minproduct_price
   FROM
     (SELECT product_id,
             product_type_code,
             product_name,
             product_price,
             MAX(product_price) OVER () AS maxproduct_price
      FROM df_products))
ORDER BY min_product_price_;",3,10,3,1,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0
spider/bike_1/0042,"summarise(input1, 'minduration = min(duration)', ""'end_station_id'""), inner_join(input0, line0, ""'id' = 'end_station_id'"")","SELECT name,
       lat,
       minduration AS min_t2_duration_
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.lat AS lat,
          LHS.long AS long,
          LHS.dock_count AS dock_count,
          LHS.city AS city,
          LHS.installation_date AS installation_date,
          RHS.minduration AS minduration
   FROM df_station AS LHS
   INNER JOIN
     (SELECT end_station_id,
             MIN(duration) AS minduration
      FROM df_trip
      GROUP BY end_station_id) AS RHS ON (LHS.id = RHS.end_station_id))
ORDER BY name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/bike_1/0033,"limit(input0, 'lat')","SELECT name,
       lat,
       city
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_station
      ORDER BY lat)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/bike_1/0037,"filter(input0, 'mean_visibility_miles >= 10L'), summarise(line0, 'meanmean_visibility_miles = mean(mean_visibility_miles, na.rm = T)', ""'cloud_cover','zip_code'""), filter(line1, 'meanmean_visibility_miles <= 10')","SELECT DISTINCT zip_code
FROM
  (SELECT cloud_cover,
          zip_code,
          AVG(mean_visibility_miles) AS meanmean_visibility_miles
   FROM
     (SELECT *
      FROM df_weather
      WHERE (mean_visibility_miles >= 10))
   GROUP BY cloud_cover,
            zip_code)
WHERE (meanmean_visibility_miles <= 10.0)
ORDER BY zip_code;",3,9,3,1,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0
spider/bike_1/0002,"filter(input0, ""lat < '37.5'"")","SELECT `name`
FROM `df_station`
WHERE (`lat` < '37.5')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/bike_1/0036,"summarise(input0, 'n = n()', ""'start_station_id','start_station_name'""), filter(line0, 'n >= 200L')","SELECT start_station_id,
       start_station_name
FROM
  (SELECT start_station_id,
          start_station_name,
          COUNT() AS n
   FROM df_trip
   GROUP BY start_station_id,
            start_station_name)
WHERE (n >= 200)
ORDER BY start_station_id;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/bike_1/0038,"summarise(input0, 'lat = max(lat)', ""'city','installation_date'"")","SELECT DISTINCT city
FROM
  (SELECT city,
          installation_date,
          MAX(lat) AS lat
   FROM df_station
   GROUP BY city,
            installation_date)
ORDER BY city;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/bike_1/0003,"summarise(input0, 'lat = max(lat)', ""'city','installation_date'""), summarise(line0, 'maxlat = max(lat)', ""'city'"")","SELECT city,
       maxlat AS max_lat_
FROM
  (SELECT city,
          MAX(lat) AS maxlat
   FROM
     (SELECT city,
             installation_date,
             MAX(lat) AS lat
      FROM df_station
      GROUP BY city,
               installation_date)
   GROUP BY city)
ORDER BY city;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/bike_1/0027,"inner_join(input0, input1, ""'id' = 'end_station_id'"")","SELECT id_other AS id,
       installation_date
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.lat AS lat,
          LHS.long AS long,
          LHS.dock_count AS dock_count,
          LHS.city AS city,
          LHS.installation_date AS installation_date,
          RHS.id AS id_other,
          RHS.duration AS duration,
          RHS.start_date AS start_date,
          RHS.start_station_name AS start_station_name,
          RHS.start_station_id AS start_station_id,
          RHS.end_date AS end_date,
          RHS.end_station_name AS end_station_name,
          RHS.bike_id AS bike_id,
          RHS.subscription_type AS subscription_type,
          RHS.zip_code AS zip_code
   FROM df_station AS LHS
   INNER JOIN df_trip AS RHS ON (LHS.id = RHS.end_station_id))
ORDER BY id;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/bike_1/0048,"filter(input1, 'bikes_available > 12L'), inner_join(input0, line0, ""'id' = 'station_id'"")","SELECT DISTINCT id,
                name
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.lat AS lat,
          LHS.long AS long,
          LHS.dock_count AS dock_count,
          LHS.city AS city,
          LHS.installation_date AS installation_date,
          RHS.bikes_available AS bikes_available,
          RHS.docks_available AS docks_available,
          RHS.time AS TIME
   FROM df_station AS LHS
   INNER JOIN
     (SELECT *
      FROM df_status
      WHERE (bikes_available > 12)) AS RHS ON (LHS.id = RHS.station_id))
ORDER BY id;",2,10,3,1,3,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/bike_1/0006,"limit(input0, 'duration')","SELECT id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_trip
      ORDER BY duration)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/bike_1/0004,"limit(input0, 'start_date')","SELECT start_station_name,
       end_station_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_trip
      ORDER BY start_date)
   LIMIT 3);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/bike_1/0012,"inner_join(input0, input1, ""'id' = 'station_id'""), filter(line0, 'bikes_available == 7L')","SELECT DISTINCT name
FROM
  (SELECT id,
          name,
          lat, long, dock_count,
                     city,
                     installation_date,
                     bikes_available,
                     docks_available,
                     TIME,
                     id AS station_id
   FROM
     (SELECT LHS.id AS id,
             LHS.name AS name,
             LHS.lat AS lat,
             LHS.long AS long,
             LHS.dock_count AS dock_count,
             LHS.city AS city,
             LHS.installation_date AS installation_date,
             RHS.bikes_available AS bikes_available,
             RHS.docks_available AS docks_available,
             RHS.time AS TIME
      FROM df_station AS LHS
      INNER JOIN df_status AS RHS ON (LHS.id = RHS.station_id)))
WHERE (bikes_available = 7)
ORDER BY name;",2,11,3,1,3,1,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/bike_1/0005,"filter(input0, ""city == 'San Jose'""), mutate(line0, 'meanlat = mean(lat, na.rm = T)'), mutate(line1, 'meanlong = mean(long, na.rm = T)')","SELECT DISTINCT `meanlat` AS `avg_lat_`,
                AVG(`long`) OVER () AS `avg_long_`
FROM
  (SELECT `id`,
          `name`,
          `lat`,
          `long`,
          `dock_count`,
          `city`,
          `installation_date`,
          AVG(`lat`) OVER () AS `meanlat`
   FROM
     (SELECT *
      FROM `df_station`
      WHERE (`city` = 'San Jose')))
ORDER BY avg_lat_;",3,10,3,1,3,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0
spider/bike_1/0050,"mutate(input0, 'n = n()'), anti_join(line0, input1, ''), filter(line1, ""city == 'Palo Alto' & n < 100L"")","SELECT `name`
FROM
  (SELECT *
   FROM
     (SELECT `id`,
             `name`,
             `lat`,
             `long`,
             `dock_count`,
             `city`,
             `installation_date`,
             COUNT(*) OVER () AS `n`
      FROM `df_station`) AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM `df_trip` AS `RHS`
        WHERE (`LHS`.`id` = `RHS`.`id`) ))
WHERE (`city` = 'Palo Alto'
       AND n < 100)
ORDER BY name;",3,14,4,0,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/bike_1/0051,"filter(input0, ""city == 'Mountain View' & city != 'Palo Alto'""), mutate(line0, 'n = n()'), anti_join(line1, input1, ""'id'"")","SELECT DISTINCT `n` AS `count___`
FROM
  (SELECT *
   FROM
     (SELECT `id`,
             `name`,
             `lat`,
             `long`,
             `dock_count`,
             `city`,
             `installation_date`,
             COUNT(*) OVER () AS `n`
      FROM `df_station`
      WHERE (`city` = 'Mountain View'
             AND `city` != 'Palo Alto')) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_trip AS RHS
        WHERE (LHS.id = RHS.id) ))
ORDER BY count___;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/bike_1/0035,"summarise(input0, 'n = n()', ""'city'""), filter(line0, 'n >= 15L'), filter(line1, 'n >= 15L')","SELECT city,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT city,
             COUNT() AS n
      FROM df_station
      GROUP BY city)
   WHERE (n >= 15))
WHERE (n >= 15)
ORDER BY city;",3,8,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0
spider/bike_1/0020,"summarise(input0, 'meanmean_sea_level_pressure_inches = mean(mean_sea_level_pressure_inches, na.rm = T)', ""'precipitation_inches','zip_code'""), anti_join(line0, input0, ""'precipitation_inches','zip_code'"")","SELECT zip_code
FROM
  (SELECT *
   FROM
     (SELECT precipitation_inches,
             zip_code,
             AVG(mean_sea_level_pressure_inches) AS meanmean_sea_level_pressure_inches
      FROM df_weather
      GROUP BY precipitation_inches,
               zip_code) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_weather AS RHS
        WHERE (LHS.precipitation_inches = RHS.precipitation_inches
               AND LHS.zip_code = RHS.zip_code) ))
ORDER BY zip_code;",2,12,4,0,4,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
spider/bike_1/0019,"summarise(input0, 'n = n()', ""'mean_sea_level_pressure_inches','wind_dir_degrees'""), filter(line0, 'n == 94107L | n > 3L')","SELECT DISTINCT n AS cloud_cover
FROM
  (SELECT mean_sea_level_pressure_inches,
          wind_dir_degrees,
          COUNT() AS n
   FROM df_weather
   GROUP BY mean_sea_level_pressure_inches,
            wind_dir_degrees)
WHERE (n = 94107
       OR n > 3)
ORDER BY cloud_cover;",2,7,2,1,2,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/bike_1/0034,"intersect(input0, input0, 'max_gust_speed_mph'), anti_join(input0, line0, ''), limit(line1, 'max_gust_speed_mph')","SELECT date, mean_temperature_f,
             mean_humidity
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM df_weather AS LHS
         WHERE NOT EXISTS
             (SELECT 1
              FROM
                (SELECT max_gust_speed_mph
                 FROM df_weather INTERSECT SELECT max_gust_speed_mph
                 FROM df_weather) AS RHS
              WHERE (LHS.max_gust_speed_mph = RHS.max_gust_speed_mph) ))
      ORDER BY max_gust_speed_mph)
   LIMIT 3);",2,20,7,0,7,0,2,0,0,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0
spider/bike_1/0021,"filter(input0, ""city != 'Palo Alto'""), inner_join(line0, input1, ""'id' = 'station_id'""), mutate(line1, 'meanbikes_available = mean(bikes_available, na.rm = T)')","SELECT DISTINCT AVG(`bikes_available`) OVER () AS `avg_bikes_available_`
FROM
  (SELECT `id`,
          `name`,
          `lat`,
          `long`,
          `dock_count`,
          `city`,
          `installation_date`,
          `bikes_available`,
          `docks_available`,
          `time`,
          `id` AS `station_id`
   FROM
     (SELECT `LHS`.`id` AS `id`,
             `LHS`.`name` AS `name`,
             `LHS`.`lat` AS `lat`,
             `LHS`.`long` AS `long`,
             `LHS`.`dock_count` AS `dock_count`,
             `LHS`.`city` AS `city`,
             `LHS`.`installation_date` AS `installation_date`,
             `RHS`.`bikes_available` AS `bikes_available`,
             `RHS`.`docks_available` AS `docks_available`,
             `RHS`.`time` AS `time`
      FROM
        (SELECT *
         FROM `df_station`
         WHERE (`city` != 'Palo Alto')) AS LHS
      INNER JOIN df_status AS RHS ON (LHS.id = RHS.station_id)))
ORDER BY avg_bikes_available_;",3,12,4,1,4,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0
spider/bike_1/0001,"filter(input0, 'max_temperature_f <= 85L'), anti_join(input0, line0, ""'max_temperature_f'""), left_join(line1, line0)","SELECT date
FROM
  (SELECT LHS.date AS date,
          LHS.max_temperature_f AS max_temperature_f,
          LHS.mean_temperature_f AS mean_temperature_f,
          LHS.min_temperature_f AS min_temperature_f,
          LHS.max_dew_point_f AS max_dew_point_f,
          LHS.mean_dew_point_f AS mean_dew_point_f,
          LHS.min_dew_point_f AS min_dew_point_f,
          LHS.max_humidity AS max_humidity,
          LHS.mean_humidity AS mean_humidity,
          LHS.min_humidity AS min_humidity,
          LHS.max_sea_level_pressure_inches AS max_sea_level_pressure_inches,
          LHS.mean_sea_level_pressure_inches AS mean_sea_level_pressure_inches,
          LHS.min_sea_level_pressure_inches AS min_sea_level_pressure_inches,
          LHS.max_visibility_miles AS max_visibility_miles,
          LHS.mean_visibility_miles AS mean_visibility_miles,
          LHS.min_visibility_miles AS min_visibility_miles,
          LHS.max_wind_speed_mph AS max_wind_speed_mph,
          LHS.mean_wind_speed_mph AS mean_wind_speed_mph,
          LHS.max_gust_speed_mph AS max_gust_speed_mph,
          LHS.precipitation_inches AS precipitation_inches,
          LHS.cloud_cover AS cloud_cover,
          LHS.events AS EVENTS,
          LHS.wind_dir_degrees AS wind_dir_degrees,
          LHS.zip_code AS zip_code
   FROM
     (SELECT *
      FROM df_weather AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM df_weather
              WHERE (max_temperature_f <= 85)) AS RHS
           WHERE (LHS.max_temperature_f = RHS.max_temperature_f) )) AS LHS
   LEFT JOIN
     (SELECT *
      FROM df_weather
      WHERE (max_temperature_f <= 85)) AS RHS ON (LHS.date = RHS.date
                                                  AND LHS.max_temperature_f = RHS.max_temperature_f
                                                  AND LHS.mean_temperature_f = RHS.mean_temperature_f
                                                  AND LHS.min_temperature_f = RHS.min_temperature_f
                                                  AND LHS.max_dew_point_f = RHS.max_dew_point_f
                                                  AND LHS.mean_dew_point_f = RHS.mean_dew_point_f
                                                  AND LHS.min_dew_point_f = RHS.min_dew_point_f
                                                  AND LHS.max_humidity = RHS.max_humidity
                                                  AND LHS.mean_humidity = RHS.mean_humidity
                                                  AND LHS.min_humidity = RHS.min_humidity
                                                  AND LHS.max_sea_level_pressure_inches = RHS.max_sea_level_pressure_inches
                                                  AND LHS.mean_sea_level_pressure_inches = RHS.mean_sea_level_pressure_inches
                                                  AND LHS.min_sea_level_pressure_inches = RHS.min_sea_level_pressure_inches
                                                  AND LHS.max_visibility_miles = RHS.max_visibility_miles
                                                  AND LHS.mean_visibility_miles = RHS.mean_visibility_miles
                                                  AND LHS.min_visibility_miles = RHS.min_visibility_miles
                                                  AND LHS.max_wind_speed_mph = RHS.max_wind_speed_mph
                                                  AND LHS.mean_wind_speed_mph = RHS.mean_wind_speed_mph
                                                  AND LHS.max_gust_speed_mph = RHS.max_gust_speed_mph
                                                  AND LHS.precipitation_inches = RHS.precipitation_inches
                                                  AND LHS.cloud_cover = RHS.cloud_cover
                                                  AND LHS.events = RHS.events
                                                  AND LHS.wind_dir_degrees = RHS.wind_dir_degrees
                                                  AND LHS.zip_code = RHS.zip_code))
ORDER BY date;",3,19,6,0,6,1,4,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0
spider/bike_1/0043,"filter(input0, 'duration <= 100L'), natural_join(input0, line0)","SELECT DISTINCT start_station_name
FROM
  (SELECT LHS.id AS id,
          LHS.duration AS duration,
          LHS.start_date AS start_date,
          LHS.start_station_name AS start_station_name,
          LHS.start_station_id AS start_station_id,
          LHS.end_date AS end_date,
          LHS.end_station_name AS end_station_name,
          LHS.end_station_id AS end_station_id,
          LHS.bike_id AS bike_id,
          LHS.subscription_type AS subscription_type,
          LHS.zip_code AS zip_code
   FROM df_trip AS LHS
   INNER JOIN
     (SELECT *
      FROM df_trip
      WHERE (duration <= 100)) AS RHS ON (LHS.id = RHS.id
                                          AND LHS.duration = RHS.duration
                                          AND LHS.start_date = RHS.start_date
                                          AND LHS.start_station_name = RHS.start_station_name
                                          AND LHS.start_station_id = RHS.start_station_id
                                          AND LHS.end_date = RHS.end_date
                                          AND LHS.end_station_name = RHS.end_station_name
                                          AND LHS.end_station_id = RHS.end_station_id
                                          AND LHS.bike_id = RHS.bike_id
                                          AND LHS.subscription_type = RHS.subscription_type
                                          AND LHS.zip_code = RHS.zip_code))
ORDER BY start_station_name;",2,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/bike_1/0046,"filter(input0, ""mean_sea_level_pressure_inches == 31 | mean_sea_level_pressure_inches >= '30.3'"")","SELECT `date`
FROM `df_weather`
WHERE (`mean_sea_level_pressure_inches` = 31.0
       OR `mean_sea_level_pressure_inches` >= '30.3')
ORDER BY date;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/bike_1/0047,"limit(input0, 'desc(min_temperature_f)')","SELECT date, cloud_cover AS max_temperature_f___min_temperature_f
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_weather
      ORDER BY min_temperature_f DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/bike_1/0009,"mutate(input0, 'n_distinct = n_distinct(bike_id)')","SELECT DISTINCT COUNT(DISTINCT bike_id) OVER () AS count_distinct_bike_id_
FROM df_trip
ORDER BY count_distinct_bike_id_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/bike_1/0011,"filter(input0, ""city == 'Mountain View'""), summarise(line0, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_station`
      WHERE (`city` = 'Mountain View')))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/bike_1/0029,"filter(input0, ""city != 'San Francisco'""), inner_join(line0, input1, ""'id' = 'end_station_id','name' = 'end_station_name'""), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM
  (SELECT `id`,
          `name`,
          `lat`,
          `long`,
          `dock_count`,
          `city`,
          `installation_date`,
          `id_other`,
          `duration`,
          `start_date`,
          `start_station_name`,
          `start_station_id`,
          `end_date`,
          `bike_id`,
          `subscription_type`,
          `zip_code`,
          `end_station_id`,
          `name` AS `end_station_name`
   FROM
     (SELECT `id`,
             `name`,
             `lat`,
             `long`,
             `dock_count`,
             `city`,
             `installation_date`,
             `id_other`,
             `duration`,
             `start_date`,
             `start_station_name`,
             `start_station_id`,
             `end_date`,
             `bike_id`,
             `subscription_type`,
             `zip_code`,
             `id` AS `end_station_id`
      FROM
        (SELECT `LHS`.`id` AS `id`,
                `LHS`.`name` AS `name`,
                `LHS`.`lat` AS `lat`,
                `LHS`.`long` AS `long`,
                `LHS`.`dock_count` AS `dock_count`,
                `LHS`.`city` AS `city`,
                `LHS`.`installation_date` AS `installation_date`,
                `RHS`.`id` AS `id_other`,
                `RHS`.`duration` AS `duration`,
                `RHS`.`start_date` AS `start_date`,
                `RHS`.`start_station_name` AS `start_station_name`,
                `RHS`.`start_station_id` AS `start_station_id`,
                `RHS`.`end_date` AS `end_date`,
                `RHS`.`bike_id` AS `bike_id`,
                `RHS`.`subscription_type` AS `subscription_type`,
                `RHS`.`zip_code` AS `zip_code`
         FROM
           (SELECT *
            FROM `df_station`
            WHERE (`city` != 'San Francisco')) AS LHS
         INNER JOIN df_trip AS RHS ON (LHS.id = RHS.end_station_id
                                       AND LHS.name = RHS.end_station_name))))
ORDER BY count___;",3,14,5,1,5,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0
spider/bike_1/0010,"summarise(input0, 'n_distinct = n_distinct(city)', ""'city','dock_count'""), summarise(line0, 'n_distinct = n_distinct(city)', '')","SELECT n_distinct AS count_distinct_city_
FROM
  (SELECT COUNT(DISTINCT city) AS n_distinct
   FROM
     (SELECT city,
             dock_count,
             COUNT(DISTINCT city) AS n_distinct
      FROM df_station
      GROUP BY city,
               dock_count))
ORDER BY count_distinct_city_;",2,8,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/bike_1/0044,"filter(input0, 'max_dew_point_f != 70L'), inner_join(line0, line0, ""'mean_dew_point_f' = 'min_dew_point_f','min_dew_point_f' = 'max_visibility_miles'"")","SELECT DISTINCT zip_code
FROM
  (SELECT date, max_temperature_f,
                mean_temperature_f,
                min_temperature_f,
                max_dew_point_f,
                mean_dew_point_f,
                mean_dew_point_f AS min_dew_point_f,
                max_humidity,
                mean_humidity,
                min_humidity,
                max_sea_level_pressure_inches,
                mean_sea_level_pressure_inches,
                min_sea_level_pressure_inches,
                max_visibility_miles,
                mean_visibility_miles,
                min_visibility_miles,
                max_wind_speed_mph,
                mean_wind_speed_mph,
                max_gust_speed_mph,
                precipitation_inches,
                cloud_cover,
                EVENTS,
                wind_dir_degrees,
                zip_code,
                date_other,
                max_temperature_f_other,
                mean_temperature_f_other,
                min_temperature_f_other,
                max_dew_point_f_other,
                mean_dew_point_f_other,
                max_humidity_other,
                mean_humidity_other,
                min_humidity_other,
                max_sea_level_pressure_inches_other,
                mean_sea_level_pressure_inches_other,
                min_sea_level_pressure_inches_other,
                mean_visibility_miles_other,
                min_visibility_miles_other,
                max_wind_speed_mph_other,
                mean_wind_speed_mph_other,
                max_gust_speed_mph_other,
                precipitation_inches_other,
                cloud_cover_other,
                events_other,
                wind_dir_degrees_other,
                zip_code_other
   FROM
     (SELECT LHS.date AS date,
             LHS.max_temperature_f AS max_temperature_f,
             LHS.mean_temperature_f AS mean_temperature_f,
             LHS.min_temperature_f AS min_temperature_f,
             LHS.max_dew_point_f AS max_dew_point_f,
             LHS.mean_dew_point_f AS mean_dew_point_f,
             LHS.min_dew_point_f AS min_dew_point_f,
             LHS.max_humidity AS max_humidity,
             LHS.mean_humidity AS mean_humidity,
             LHS.min_humidity AS min_humidity,
             LHS.max_sea_level_pressure_inches AS max_sea_level_pressure_inches,
             LHS.mean_sea_level_pressure_inches AS mean_sea_level_pressure_inches,
             LHS.min_sea_level_pressure_inches AS min_sea_level_pressure_inches,
             LHS.max_visibility_miles AS max_visibility_miles,
             LHS.mean_visibility_miles AS mean_visibility_miles,
             LHS.min_visibility_miles AS min_visibility_miles,
             LHS.max_wind_speed_mph AS max_wind_speed_mph,
             LHS.mean_wind_speed_mph AS mean_wind_speed_mph,
             LHS.max_gust_speed_mph AS max_gust_speed_mph,
             LHS.precipitation_inches AS precipitation_inches,
             LHS.cloud_cover AS cloud_cover,
             LHS.events AS EVENTS,
             LHS.wind_dir_degrees AS wind_dir_degrees,
             LHS.zip_code AS zip_code,
             RHS.date AS date_other,
             RHS.max_temperature_f AS max_temperature_f_other,
             RHS.mean_temperature_f AS mean_temperature_f_other,
             RHS.min_temperature_f AS min_temperature_f_other,
             RHS.max_dew_point_f AS max_dew_point_f_other,
             RHS.mean_dew_point_f AS mean_dew_point_f_other,
             RHS.max_humidity AS max_humidity_other,
             RHS.mean_humidity AS mean_humidity_other,
             RHS.min_humidity AS min_humidity_other,
             RHS.max_sea_level_pressure_inches AS max_sea_level_pressure_inches_other,
             RHS.mean_sea_level_pressure_inches AS mean_sea_level_pressure_inches_other,
             RHS.min_sea_level_pressure_inches AS min_sea_level_pressure_inches_other,
             RHS.mean_visibility_miles AS mean_visibility_miles_other,
             RHS.min_visibility_miles AS min_visibility_miles_other,
             RHS.max_wind_speed_mph AS max_wind_speed_mph_other,
             RHS.mean_wind_speed_mph AS mean_wind_speed_mph_other,
             RHS.max_gust_speed_mph AS max_gust_speed_mph_other,
             RHS.precipitation_inches AS precipitation_inches_other,
             RHS.cloud_cover AS cloud_cover_other,
             RHS.events AS events_other,
             RHS.wind_dir_degrees AS wind_dir_degrees_other,
             RHS.zip_code AS zip_code_other
      FROM
        (SELECT *
         FROM df_weather
         WHERE (max_dew_point_f != 70)) AS LHS
      INNER JOIN
        (SELECT *
         FROM df_weather
         WHERE (max_dew_point_f != 70)) AS RHS ON (LHS.mean_dew_point_f = RHS.min_dew_point_f
                                                   AND LHS.min_dew_point_f = RHS.max_visibility_miles)))
ORDER BY zip_code;",2,14,5,1,5,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/bike_1/0040,"limit(input0, 'desc(duration)')","SELECT id,
       duration
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_trip
      ORDER BY duration DESC)
   LIMIT 3);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/bike_1/0028,"anti_join(input1, input0, ''), limit(line0, 'end_date')","SELECT id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM df_trip AS LHS
         WHERE NOT EXISTS
             (SELECT 1
              FROM df_station AS RHS
              WHERE (LHS.id = RHS.id) ))
      ORDER BY end_date)
   LIMIT 1);",1,15,5,0,5,0,2,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/flight_company/0017,"summarise(input0, 'n = n()', ""'city','country'""), summarise(line0, 'n = n()', ""'country'"")","SELECT n AS count___,
       country
FROM
  (SELECT country,
          COUNT() AS n
   FROM
     (SELECT city,
             country,
             COUNT() AS n
      FROM df_airport
      GROUP BY city,
               country)
   GROUP BY country)
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_company/0008,"filter(input1, 'velocity != 200'), anti_join(input0, line0, '')","SELECT TYPE
FROM
  (SELECT *
   FROM df_operate_company AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_flight
           WHERE (velocity != 200.0)) AS RHS
        WHERE (LHS.id = RHS.id) ))
ORDER BY TYPE;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/flight_company/0003,df_airport,"SELECT id,
       country,
       city,
       name
FROM df_airport
ORDER BY id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_company/0013,"anti_join(input1, input0, ""'id'""), filter(line0, ""pilot == 'Thompson'""), summarise(line1, 'n = n()', ""'pilot'"")","SELECT `n` AS `count___`
FROM
  (SELECT `pilot`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM `df_flight` AS `LHS`
         WHERE NOT EXISTS
             (SELECT 1
              FROM `df_airport` AS `RHS`
              WHERE (`LHS`.`id` = `RHS`.`id`) ))
      WHERE (`pilot` = 'Thompson'))
   GROUP BY pilot)
ORDER BY count___;",3,15,5,0,5,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0
spider/flight_company/0006,"inner_join(input0, input1, ""'id' = 'company_id'"")","SELECT name,
       TYPE
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.type AS TYPE,
          LHS.principal_activities AS principal_activities,
          LHS.incorporated_in AS incorporated_in,
          LHS.group_equity_shareholding AS group_equity_shareholding,
          RHS.id AS id_other,
          RHS.vehicle_flight_number AS vehicle_flight_number,
          RHS.date AS date,
          RHS.pilot AS pilot,
          RHS.velocity AS velocity,
          RHS.altitude AS altitude,
          RHS.airport_id AS airport_id
   FROM df_operate_company AS LHS
   INNER JOIN df_flight AS RHS ON (LHS.id = RHS.company_id))
ORDER BY name;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/flight_company/0004,"summarise(input0, 'group_equity_shareholding = max(group_equity_shareholding)', ''), intersect(line0, line0, 'group_equity_shareholding')","SELECT group_equity_shareholding AS max_group_equity_shareholding_
FROM
  (SELECT group_equity_shareholding
   FROM
     (SELECT MAX(group_equity_shareholding) AS group_equity_shareholding
      FROM df_operate_company) INTERSECT SELECT group_equity_shareholding
   FROM
     (SELECT MAX(group_equity_shareholding) AS group_equity_shareholding
      FROM df_operate_company))
ORDER BY max_group_equity_shareholding_;",2,11,5,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
spider/flight_company/0012,"summarise(input0, 'n = n()', ""'group_equity_shareholding','type'""), filter(line0, 'n > 1L')","SELECT TYPE,
       n AS count___
FROM
  (SELECT group_equity_shareholding,
          TYPE,
          COUNT() AS n
   FROM df_operate_company
   GROUP BY group_equity_shareholding,
            TYPE)
WHERE (n > 1)
ORDER BY TYPE;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/flight_company/0005,"filter(input0, ""pilot == 'Thompson'""), summarise(line0, 'meanvelocity = mean(velocity, na.rm = T)', '')","SELECT `meanvelocity` AS `avg_velocity_`
FROM
  (SELECT AVG(`velocity`) AS `meanvelocity`
   FROM
     (SELECT *
      FROM `df_flight`
      WHERE (`pilot` = 'Thompson')))
ORDER BY avg_velocity_;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/flight_company/0016,"natural_join3(input0, input1, input2), left_join(input2, line0), summarise(line1, 'n = n()', ""'airport_id','altitude'"")","SELECT airport_id AS id,
       n AS count___
FROM
  (SELECT airport_id,
          altitude,
          COUNT() AS n
   FROM
     (SELECT LHS.id AS id,
             LHS.vehicle_flight_number AS vehicle_flight_number,
             LHS.date AS date,
             LHS.pilot AS pilot,
             LHS.velocity AS velocity,
             LHS.altitude AS altitude,
             LHS.airport_id AS airport_id,
             LHS.company_id AS company_id,
             RHS.city AS city,
             RHS.country AS country,
             RHS.iata AS iata,
             RHS.icao AS icao,
             RHS.name AS name,
             RHS.type AS TYPE,
             RHS.principal_activities AS principal_activities,
             RHS.incorporated_in AS incorporated_in,
             RHS.group_equity_shareholding AS group_equity_shareholding
      FROM df_flight AS LHS
      LEFT JOIN
        (SELECT LHS.id AS id,
                LHS.city AS city,
                LHS.country AS country,
                LHS.iata AS iata,
                LHS.icao AS icao,
                LHS.name AS name,
                LHS.type AS TYPE,
                LHS.principal_activities AS principal_activities,
                LHS.incorporated_in AS incorporated_in,
                LHS.group_equity_shareholding AS group_equity_shareholding,
                RHS.vehicle_flight_number AS vehicle_flight_number,
                RHS.date AS date,
                RHS.pilot AS pilot,
                RHS.velocity AS velocity,
                RHS.altitude AS altitude,
                RHS.airport_id AS airport_id,
                RHS.company_id AS company_id
         FROM
           (SELECT LHS.id AS id,
                   LHS.city AS city,
                   LHS.country AS country,
                   LHS.iata AS iata,
                   LHS.icao AS icao,
                   LHS.name AS name,
                   RHS.type AS TYPE,
                   RHS.principal_activities AS principal_activities,
                   RHS.incorporated_in AS incorporated_in,
                   RHS.group_equity_shareholding AS group_equity_shareholding
            FROM df_airport AS LHS
            INNER JOIN df_operate_company AS RHS ON (LHS.id = RHS.id
                                                     AND LHS.name = RHS.name)) AS LHS
         INNER JOIN df_flight AS RHS ON (LHS.id = RHS.id)) AS RHS ON (LHS.id = RHS.id
                                                                      AND LHS.vehicle_flight_number = RHS.vehicle_flight_number
                                                                      AND LHS.date = RHS.date
                                                                      AND LHS.pilot = RHS.pilot
                                                                      AND LHS.velocity = RHS.velocity
                                                                      AND LHS.altitude = RHS.altitude
                                                                      AND LHS.airport_id = RHS.airport_id
                                                                      AND LHS.company_id = RHS.company_id))
   GROUP BY airport_id,
            altitude)
ORDER BY id;",3,13,5,0,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0
spider/flight_company/0018,"summarise(input0, 'n = n()', ""'country'""), filter(line0, 'n >= 2L'), mutate(line1, 'n = n()')","SELECT country
FROM
  (SELECT country,
          COUNT() AS n
   FROM df_airport
   GROUP BY country)
WHERE (n >= 2)
ORDER BY country;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/flight_company/0019,"summarise(input0, 'n = n()', ""'date','pilot'""), limit(line0, 'desc(date)')","SELECT pilot
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT date, pilot,
                      COUNT() AS n
         FROM df_flight
         GROUP BY date, pilot)
      ORDER BY date DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_company/0007,"filter(input0, ""country != 'Iceland'""), intersect(input0, line0, 'name')","SELECT `name`
FROM
  (SELECT `name`
   FROM `df_airport` INTERSECT SELECT `name`
   FROM `df_airport`
   WHERE (`country` != 'Iceland'))
ORDER BY name;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/flight_company/0001,"filter(input0, 'velocity >= 200'), summarise(line0, 'n = n()', ""'altitude','velocity'"")","SELECT n AS count___
FROM
  (SELECT altitude,
          velocity,
          COUNT() AS n
   FROM
     (SELECT *
      FROM df_flight
      WHERE (velocity >= 200.0))
   GROUP BY altitude,
            velocity)
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/flight_company/0014,"inner_join(input0, input1, ""'id' = 'airport_id'""), filter(line0, ""principal_activities == 'Cargo' | principal_activities == 'Catering services'"")","SELECT DISTINCT `pilot`
FROM
  (SELECT `id`,
          `name`,
          `type`,
          `principal_activities`,
          `incorporated_in`,
          `group_equity_shareholding`,
          `id_other`,
          `vehicle_flight_number`,
          `date`,
          `pilot`,
          `velocity`,
          `altitude`,
          `company_id`,
          `id` AS `airport_id`
   FROM
     (SELECT `LHS`.`id` AS `id`,
             `LHS`.`name` AS `name`,
             `LHS`.`type` AS `type`,
             `LHS`.`principal_activities` AS `principal_activities`,
             `LHS`.`incorporated_in` AS `incorporated_in`,
             `LHS`.`group_equity_shareholding` AS `group_equity_shareholding`,
             `RHS`.`id` AS `id_other`,
             `RHS`.`vehicle_flight_number` AS `vehicle_flight_number`,
             `RHS`.`date` AS `date`,
             `RHS`.`pilot` AS `pilot`,
             `RHS`.`velocity` AS `velocity`,
             `RHS`.`altitude` AS `altitude`,
             `RHS`.`company_id` AS `company_id`
      FROM `df_operate_company` AS `LHS`
      INNER JOIN `df_flight` AS `RHS` ON (`LHS`.`id` = `RHS`.`airport_id`)))
WHERE (`principal_activities` = 'Cargo'
       OR `principal_activities` = 'Catering services')
ORDER BY pilot;",2,10,3,1,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/flight_company/0009,"summarise(input1, 'n = n()', ""'altitude','company_id'""), filter(line0, 'n != 1L'), inner_join(input0, line1, ""'id' = 'company_id'"")","SELECT id,
       name
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.type AS TYPE,
          LHS.principal_activities AS principal_activities,
          LHS.incorporated_in AS incorporated_in,
          LHS.group_equity_shareholding AS group_equity_shareholding,
          RHS.altitude AS altitude,
          RHS.n AS n
   FROM df_operate_company AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT altitude,
                company_id,
                COUNT() AS n
         FROM df_flight
         GROUP BY altitude,
                  company_id)
      WHERE (n != 1)) AS RHS ON (LHS.id = RHS.company_id))
ORDER BY id;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/flight_company/0011,"filter(input0, ""country != 'United States' | name == 'Billund Airport'""), natural_join(input1, line0)","SELECT DISTINCT `pilot`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`vehicle_flight_number` AS `vehicle_flight_number`,
          `LHS`.`date` AS `date`,
          `LHS`.`pilot` AS `pilot`,
          `LHS`.`velocity` AS `velocity`,
          `LHS`.`altitude` AS `altitude`,
          `LHS`.`airport_id` AS `airport_id`,
          `LHS`.`company_id` AS `company_id`,
          `RHS`.`city` AS `city`,
          `RHS`.`country` AS `country`,
          `RHS`.`iata` AS `iata`,
          `RHS`.`icao` AS `icao`,
          `RHS`.`name` AS `name`
   FROM `df_flight` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_airport`
      WHERE (`country` != 'United States'
             OR `name` = 'Billund Airport')) AS RHS ON (LHS.id = RHS.id))
ORDER BY pilot;",2,10,3,1,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/flight_company/0010,"summarise(input1, 'n = n()', ""'altitude'""), inner_join(input0, line0, ""'id' = 'n'"")","SELECT id,
       name,
       iata
FROM
  (SELECT LHS.id AS id,
          LHS.city AS city,
          LHS.country AS country,
          LHS.iata AS iata,
          LHS.icao AS icao,
          LHS.name AS name,
          RHS.altitude AS altitude
   FROM df_airport AS LHS
   INNER JOIN
     (SELECT altitude,
             COUNT() AS n
      FROM df_flight
      GROUP BY altitude) AS RHS ON (LHS.id = RHS.n))
ORDER BY id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/insurance_and_eClaims/0002,"filter(input0, ""customer_details == 'Dayana Robel'""), natural_join(input1, line0)","SELECT `policy_type_code`
FROM
  (SELECT `LHS`.`policy_id` AS `policy_id`,
          `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`policy_type_code` AS `policy_type_code`,
          `LHS`.`start_date` AS `start_date`,
          `LHS`.`end_date` AS `end_date`,
          `RHS`.`customer_details` AS `customer_details`
   FROM `df_policies` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_customers`
      WHERE (`customer_details` = 'Dayana Robel')) AS RHS ON (LHS.customer_id = RHS.customer_id))
ORDER BY policy_type_code;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/insurance_and_eClaims/0017,"mutate(input1, 'n = n()'), natural_join3(input0, input1, line0), limit(line1, 'policy_type_code')","SELECT customer_details
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.customer_details AS customer_details,
                LHS.policy_id AS policy_id,
                LHS.policy_type_code AS policy_type_code,
                LHS.start_date AS start_date,
                LHS.end_date AS end_date,
                RHS.n AS n
         FROM
           (SELECT LHS.customer_id AS customer_id,
                   LHS.customer_details AS customer_details,
                   RHS.policy_id AS policy_id,
                   RHS.policy_type_code AS policy_type_code,
                   RHS.start_date AS start_date,
                   RHS.end_date AS end_date
            FROM df_customers AS LHS
            INNER JOIN df_policies AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
         INNER JOIN
           (SELECT policy_id,
                   customer_id,
                   policy_type_code,
                   start_date,
                   end_date,
                   COUNT(*) OVER () AS n
            FROM df_policies) AS RHS ON (LHS.customer_id = RHS.customer_id
                                         AND LHS.policy_id = RHS.policy_id
                                         AND LHS.policy_type_code = RHS.policy_type_code
                                         AND LHS.start_date = RHS.start_date
                                         AND LHS.end_date = RHS.end_date))
      ORDER BY policy_type_code)
   LIMIT 1);",2,16,6,0,6,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
spider/insurance_and_eClaims/0008,"mutate(input2, 'amount_piad = min(amount_piad)'), natural_join4(input0, input1, input2, line0)","SELECT customer_details
FROM
  (SELECT LHS.customer_id AS customer_id,
          LHS.customer_details AS customer_details,
          LHS.policy_id AS policy_id,
          LHS.policy_type_code AS policy_type_code,
          LHS.start_date AS start_date,
          LHS.end_date AS end_date,
          LHS.claim_header_id AS claim_header_id,
          LHS.claim_status_code AS claim_status_code,
          LHS.claim_type_code AS claim_type_code,
          LHS.date_of_claim AS date_of_claim,
          LHS.date_of_settlement AS date_of_settlement,
          LHS.amount_claimed AS amount_claimed,
          LHS.amount_piad AS amount_piad
   FROM
     (SELECT LHS.customer_id AS customer_id,
             LHS.customer_details AS customer_details,
             LHS.policy_id AS policy_id,
             LHS.policy_type_code AS policy_type_code,
             LHS.start_date AS start_date,
             LHS.end_date AS end_date,
             RHS.claim_header_id AS claim_header_id,
             RHS.claim_status_code AS claim_status_code,
             RHS.claim_type_code AS claim_type_code,
             RHS.date_of_claim AS date_of_claim,
             RHS.date_of_settlement AS date_of_settlement,
             RHS.amount_claimed AS amount_claimed,
             RHS.amount_piad AS amount_piad
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.customer_details AS customer_details,
                RHS.policy_id AS policy_id,
                RHS.policy_type_code AS policy_type_code,
                RHS.start_date AS start_date,
                RHS.end_date AS end_date
         FROM df_customers AS LHS
         INNER JOIN df_policies AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
      INNER JOIN df_claim_headers AS RHS ON (LHS.policy_id = RHS.policy_id)) AS LHS
   INNER JOIN
     (SELECT claim_header_id,
             claim_status_code,
             claim_type_code,
             policy_id,
             date_of_claim,
             date_of_settlement,
             amount_claimed,
             MIN(amount_piad) OVER () AS amount_piad
      FROM df_claim_headers) AS RHS ON (LHS.policy_id = RHS.policy_id
                                        AND LHS.claim_header_id = RHS.claim_header_id
                                        AND LHS.claim_status_code = RHS.claim_status_code
                                        AND LHS.claim_type_code = RHS.claim_type_code
                                        AND LHS.date_of_claim = RHS.date_of_claim
                                        AND LHS.date_of_settlement = RHS.date_of_settlement
                                        AND LHS.amount_claimed = RHS.amount_claimed
                                        AND LHS.amount_piad = RHS.amount_piad))
ORDER BY customer_details;",2,14,5,0,5,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0
spider/insurance_and_eClaims/0003,"summarise(input0, 'n = n()', ""'policy_type_code'""), limit(line0, 'desc(n)')","SELECT policy_type_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT policy_type_code,
                COUNT() AS n
         FROM df_policies
         GROUP BY policy_type_code)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/insurance_and_eClaims/0013,"filter(input1, ""policy_type_code == 'Deputy'""), natural_join3(input0, input1, line0)","SELECT `customer_details`
FROM
  (SELECT `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`customer_details` AS `customer_details`,
          `LHS`.`policy_id` AS `policy_id`,
          `LHS`.`policy_type_code` AS `policy_type_code`,
          `LHS`.`start_date` AS `start_date`,
          `LHS`.`end_date` AS `end_date`
   FROM
     (SELECT `LHS`.`customer_id` AS `customer_id`,
             `LHS`.`customer_details` AS `customer_details`,
             `RHS`.`policy_id` AS `policy_id`,
             `RHS`.`policy_type_code` AS `policy_type_code`,
             `RHS`.`start_date` AS `start_date`,
             `RHS`.`end_date` AS `end_date`
      FROM `df_customers` AS `LHS`
      INNER JOIN `df_policies` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_policies`
      WHERE (`policy_type_code` = 'Deputy')) AS RHS ON (LHS.customer_id = RHS.customer_id
                                                        AND LHS.policy_id = RHS.policy_id
                                                        AND LHS.policy_type_code = RHS.policy_type_code
                                                        AND LHS.start_date = RHS.start_date
                                                        AND LHS.end_date = RHS.end_date))
ORDER BY customer_details;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/insurance_and_eClaims/0006,"filter(input1, 'created_date == 1L'), inner_join(input0, line0, ""'claim_header_id' = 'claim_id'""), mutate(line1, 'sumamount_claimed = sum(amount_claimed)')","SELECT DISTINCT SUM(amount_claimed) OVER () AS sum_t1_amount_claimed_
FROM
  (SELECT claim_header_id,
          claim_status_code,
          claim_type_code,
          policy_id,
          date_of_claim,
          date_of_settlement,
          amount_claimed,
          amount_piad,
          document_type_code,
          created_by_staff_id,
          created_date,
          claim_header_id AS claim_id
   FROM
     (SELECT LHS.claim_header_id AS claim_header_id,
             LHS.claim_status_code AS claim_status_code,
             LHS.claim_type_code AS claim_type_code,
             LHS.policy_id AS policy_id,
             LHS.date_of_claim AS date_of_claim,
             LHS.date_of_settlement AS date_of_settlement,
             LHS.amount_claimed AS amount_claimed,
             LHS.amount_piad AS amount_piad,
             RHS.document_type_code AS document_type_code,
             RHS.created_by_staff_id AS created_by_staff_id,
             RHS.created_date AS created_date
      FROM df_claim_headers AS LHS
      INNER JOIN
        (SELECT *
         FROM df_claims_documents
         WHERE (created_date = 1)) AS RHS ON (LHS.claim_header_id = RHS.claim_id)))
ORDER BY sum_t1_amount_claimed_;",3,12,4,1,4,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0
spider/insurance_and_eClaims/0004,"summarise(input0, 'n = n()', ""'customer_id'""), left_join(line0, input0), filter(line1, 'n > 2L')","SELECT policy_type_code
FROM
  (SELECT LHS.customer_id AS customer_id,
          LHS.n AS n,
          RHS.policy_id AS policy_id,
          RHS.policy_type_code AS policy_type_code,
          RHS.start_date AS start_date,
          RHS.end_date AS end_date
   FROM
     (SELECT customer_id,
             COUNT() AS n
      FROM df_policies
      GROUP BY customer_id) AS LHS
   LEFT JOIN df_policies AS RHS ON (LHS.customer_id = RHS.customer_id))
WHERE (n > 2)
ORDER BY policy_type_code;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/insurance_and_eClaims/0005,"summarise(input0, 'sumamount_piad = sum(amount_piad)', ""'amount_piad','date_of_settlement'""), mutate(line0, 'meanamount_piad = mean(amount_piad, na.rm = T)'), mutate(line1, 'sumamount_piad = sum(amount_piad)')","SELECT DISTINCT SUM(amount_piad) OVER () AS sum_amount_piad_,
                                      meanamount_piad AS avg_amount_piad_
FROM
  (SELECT amount_piad,
          date_of_settlement,
          sumamount_piad,
          AVG(amount_piad) OVER () AS meanamount_piad
   FROM
     (SELECT amount_piad,
             date_of_settlement,
             SUM(amount_piad) AS sumamount_piad
      FROM df_claim_headers
      GROUP BY amount_piad,
               date_of_settlement))
ORDER BY sum_amount_piad_;",3,9,3,1,3,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0
spider/insurance_and_eClaims/0016,"summarise(input0, 'n = n()', ""'policy_type_code'"")","SELECT policy_type_code,
       n AS count___
FROM
  (SELECT policy_type_code,
          COUNT() AS n
   FROM df_policies
   GROUP BY policy_type_code)
ORDER BY policy_type_code;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/insurance_and_eClaims/0018,"filter(input0, ""claim_status_name == 'Open'"")","SELECT `claim_status_description`
FROM `df_claims_processing_stages`
WHERE (`claim_status_name` = 'Open')
ORDER BY claim_status_description;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/insurance_and_eClaims/0020,"summarise(input1, 'maxstart_date = max(start_date)', ''), natural_join3(input0, input1, line0), filter(line1, 'maxstart_date <= start_date')","SELECT customer_details
FROM
  (SELECT LHS.customer_id AS customer_id,
          LHS.customer_details AS customer_details,
          LHS.policy_id AS policy_id,
          LHS.policy_type_code AS policy_type_code,
          LHS.start_date AS start_date,
          LHS.end_date AS end_date,
          RHS.maxstart_date AS maxstart_date
   FROM
     (SELECT LHS.customer_id AS customer_id,
             LHS.customer_details AS customer_details,
             RHS.policy_id AS policy_id,
             RHS.policy_type_code AS policy_type_code,
             RHS.start_date AS start_date,
             RHS.end_date AS end_date
      FROM df_customers AS LHS
      INNER JOIN df_policies AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
   CROSS JOIN
     (SELECT MAX(start_date) AS maxstart_date
      FROM df_policies) AS RHS)
WHERE (maxstart_date <= start_date)
ORDER BY customer_details;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/insurance_and_eClaims/0019,"summarise(input0, 'n_distinct = n_distinct(claim_outcome_code)', ""'claim_outcome_code'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count_distinct_claim_outcome_code_
FROM
  (SELECT claim_outcome_code,
          COUNT(DISTINCT claim_outcome_code) AS n_distinct
   FROM df_claims_processing
   GROUP BY claim_outcome_code)
ORDER BY count_distinct_claim_outcome_code_;",2,7,2,2,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/insurance_and_eClaims/0007,"summarise(input2, 'amount_claimed = max(amount_claimed)', ''), natural_join4(input0, input1, input2, line0)","SELECT customer_details
FROM
  (SELECT LHS.customer_id AS customer_id,
          LHS.customer_details AS customer_details,
          LHS.policy_id AS policy_id,
          LHS.policy_type_code AS policy_type_code,
          LHS.start_date AS start_date,
          LHS.end_date AS end_date,
          LHS.claim_header_id AS claim_header_id,
          LHS.claim_status_code AS claim_status_code,
          LHS.claim_type_code AS claim_type_code,
          LHS.date_of_claim AS date_of_claim,
          LHS.date_of_settlement AS date_of_settlement,
          LHS.amount_claimed AS amount_claimed,
          LHS.amount_piad AS amount_piad
   FROM
     (SELECT LHS.customer_id AS customer_id,
             LHS.customer_details AS customer_details,
             LHS.policy_id AS policy_id,
             LHS.policy_type_code AS policy_type_code,
             LHS.start_date AS start_date,
             LHS.end_date AS end_date,
             RHS.claim_header_id AS claim_header_id,
             RHS.claim_status_code AS claim_status_code,
             RHS.claim_type_code AS claim_type_code,
             RHS.date_of_claim AS date_of_claim,
             RHS.date_of_settlement AS date_of_settlement,
             RHS.amount_claimed AS amount_claimed,
             RHS.amount_piad AS amount_piad
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.customer_details AS customer_details,
                RHS.policy_id AS policy_id,
                RHS.policy_type_code AS policy_type_code,
                RHS.start_date AS start_date,
                RHS.end_date AS end_date
         FROM df_customers AS LHS
         INNER JOIN df_policies AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
      INNER JOIN df_claim_headers AS RHS ON (LHS.policy_id = RHS.policy_id)) AS LHS
   INNER JOIN
     (SELECT MAX(amount_claimed) AS amount_claimed
      FROM df_claim_headers) AS RHS ON (LHS.amount_claimed = RHS.amount_claimed))
ORDER BY customer_details;",2,13,5,0,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
spider/insurance_and_eClaims/0001,"inner_join(input0, input0, ""'customer_details'"")","SELECT customer_details
FROM
  (SELECT LHS.customer_id AS customer_id,
          LHS.customer_details AS customer_details,
          RHS.customer_id AS customer_id_other
   FROM df_customers AS LHS
   INNER JOIN df_customers AS RHS ON (LHS.customer_details = RHS.customer_details))
ORDER BY customer_details;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/insurance_and_eClaims/0014,"filter(input1, ""policy_type_code == 'Deputy'""), natural_join3(input0, input1, line0)","SELECT `customer_details`
FROM
  (SELECT `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`customer_details` AS `customer_details`,
          `LHS`.`policy_id` AS `policy_id`,
          `LHS`.`policy_type_code` AS `policy_type_code`,
          `LHS`.`start_date` AS `start_date`,
          `LHS`.`end_date` AS `end_date`
   FROM
     (SELECT `LHS`.`customer_id` AS `customer_id`,
             `LHS`.`customer_details` AS `customer_details`,
             `RHS`.`policy_id` AS `policy_id`,
             `RHS`.`policy_type_code` AS `policy_type_code`,
             `RHS`.`start_date` AS `start_date`,
             `RHS`.`end_date` AS `end_date`
      FROM `df_customers` AS `LHS`
      INNER JOIN `df_policies` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_policies`
      WHERE (`policy_type_code` = 'Deputy')) AS RHS ON (LHS.customer_id = RHS.customer_id
                                                        AND LHS.policy_id = RHS.policy_id
                                                        AND LHS.policy_type_code = RHS.policy_type_code
                                                        AND LHS.start_date = RHS.start_date
                                                        AND LHS.end_date = RHS.end_date))
ORDER BY customer_details;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/insurance_and_eClaims/0009,"anti_join(input0, input1, ""'customer_id'"")","SELECT customer_details
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_policies AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_details;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/insurance_and_eClaims/0011,"summarise(input1, 'n = n()', ""'claim_id','claim_processing_id'""), inner_join(input0, line0, ""'claim_stage_id' = 'n'"")","SELECT DISTINCT claim_status_name
FROM
  (SELECT LHS.claim_stage_id AS claim_stage_id,
          LHS.next_claim_stage_id AS next_claim_stage_id,
          LHS.claim_status_name AS claim_status_name,
          LHS.claim_status_description AS claim_status_description,
          RHS.claim_id AS claim_id,
          RHS.claim_processing_id AS claim_processing_id
   FROM df_claims_processing_stages AS LHS
   INNER JOIN
     (SELECT claim_id,
             claim_processing_id,
             COUNT() AS n
      FROM df_claims_processing
      GROUP BY claim_id,
               claim_processing_id) AS RHS ON (LHS.claim_stage_id = RHS.n))
ORDER BY claim_status_name;",2,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/insurance_and_eClaims/0010,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_claims_processing_stages)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/formula_1/0033,"left_join(input0, input1), filter(line0, ""nationality == 'Japanese' & points > 5"")","SELECT `name`
FROM
  (SELECT `LHS`.`constructorid` AS `constructorid`,
          `LHS`.`constructorref` AS `constructorref`,
          `LHS`.`name` AS `name`,
          `LHS`.`nationality` AS `nationality`,
          `LHS`.`url` AS `url`,
          `RHS`.`constructorstandingsid` AS `constructorstandingsid`,
          `RHS`.`raceid` AS `raceid`,
          `RHS`.`points` AS `points`,
          `RHS`.`position` AS `position`,
          `RHS`.`positiontext` AS `positiontext`,
          `RHS`.`wins` AS `wins`
   FROM `df_constructors` AS `LHS`
   LEFT JOIN `df_constructorstandings` AS `RHS` ON (`LHS`.`constructorid` = `RHS`.`constructorid`))
WHERE (`nationality` = 'Japanese'
       AND points > 5.0)
ORDER BY name;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
spider/formula_1/0002,"limit(input0, 'desc(date)')","SELECT name, date
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_races
      ORDER BY date DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/formula_1/0003,"filter(input0, 'year == 2017L'), intersect(line0, line0, 'name')","SELECT name
FROM
  (SELECT name
   FROM df_races
   WHERE (YEAR = 2017) INTERSECT
     SELECT name
     FROM df_races WHERE (YEAR = 2017))
ORDER BY name;",2,11,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/formula_1/0013,"filter(input0, ""nationality == 'German'""), filter(line0, ""nationality == 'German'"")","SELECT `forename`,
       `surname`
FROM
  (SELECT *
   FROM `df_drivers`
   WHERE (`nationality` = 'German'))
WHERE (`nationality` = 'German')
ORDER BY forename;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/formula_1/0026,"filter(input0, 'year >= 2009L & year <= 2011L'), natural_join(input0, line0)","SELECT name
FROM
  (SELECT LHS.raceid AS raceid,
          LHS.year AS YEAR,
          LHS.round AS round,
          LHS.circuitid AS circuitid,
          LHS.name AS name,
          LHS.date AS date,
          LHS.time AS TIME,
          LHS.url AS url
   FROM df_races AS LHS
   INNER JOIN
     (SELECT *
      FROM df_races
      WHERE (YEAR >= 2009
             AND YEAR <= 2011)) AS RHS ON (LHS.raceid = RHS.raceid
                                           AND LHS.year = RHS.year
                                           AND LHS.round = RHS.round
                                           AND LHS.circuitid = RHS.circuitid
                                           AND LHS.name = RHS.name
                                           AND LHS.date = RHS.date
                                           AND LHS.time = RHS.time
                                           AND LHS.url = RHS.url))
ORDER BY name;",2,12,3,0,3,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/formula_1/0016,"filter(input1, 'position <= 1L & wins == position'), semi_join(input0, line0)","SELECT forename
FROM
  (SELECT *
   FROM df_drivers AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_driverstandings
           WHERE (POSITION <= 1
                  AND wins = POSITION)) AS RHS
        WHERE (LHS.driverid = RHS.driverid) ))
ORDER BY forename;",2,14,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/formula_1/0032,"filter(input0, ""country == 'France' | country == 'Belgium'"")","SELECT `circuitid`,
       `location`
FROM `df_circuits`
WHERE (`country` = 'France'
       OR `country` = 'Belgium')
ORDER BY circuitid;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/formula_1/0018,"summarise(input0, 'n = n()', ""'constructorref','nationality'""), summarise(line0, 'n = n()', ""'nationality'"")","SELECT n AS count___,
       nationality
FROM
  (SELECT nationality,
          COUNT() AS n
   FROM
     (SELECT constructorref,
             nationality,
             COUNT() AS n
      FROM df_constructors
      GROUP BY constructorref,
               nationality)
   GROUP BY nationality)
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/formula_1/0035,"filter(input0, ""name != 'Monaco Grand Prix' | year != 2008L""), anti_join(input1, line0, ""'raceid'""), mutate(line1, 'fastestlapspeed = max(fastestlapspeed)')","SELECT DISTINCT MAX(`fastestlapspeed`) OVER () AS `max_t2_fastestlapspeed_`
FROM
  (SELECT *
   FROM `df_results` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_races`
           WHERE (`name` != 'Monaco Grand Prix'
                  OR YEAR != 2008)) AS RHS
        WHERE (LHS.raceid = RHS.raceid) ))
ORDER BY max_t2_fastestlapspeed_;",3,17,4,1,4,0,3,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/formula_1/0020,"filter(input1, 'year >= 2017L'), filter(input0, ""country != 'Spain'""), anti_join(line0, line1, ""'circuitid'"")","SELECT DISTINCT `name`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_races`
      WHERE (`year` >= 2017)) AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_circuits`
           WHERE (`country` != 'Spain')) AS RHS
        WHERE (LHS.circuitid = RHS.circuitid) ))
ORDER BY name;",3,17,5,1,5,0,4,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0
spider/formula_1/0019,"summarise(input0, 'n = n()', ""'constructorid'"")","SELECT n AS count___,
       constructorid
FROM
  (SELECT constructorid,
          COUNT() AS n
   FROM df_constructorstandings
   GROUP BY constructorid)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/formula_1/0024,df_drivers,"SELECT DISTINCT forename
FROM df_drivers
ORDER BY forename;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/formula_1/0021,"filter(input0, ""country != 'Spain'""), anti_join(input1, line0, ""'circuitid'""), filter(line1, 'year > 2000L')","SELECT DISTINCT `name`
FROM
  (SELECT *
   FROM `df_races` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_circuits`
           WHERE (`country` != 'Spain')) AS RHS
        WHERE (LHS.circuitid = RHS.circuitid) ))
WHERE (YEAR > 2000)
ORDER BY name;",3,16,4,1,4,0,4,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0
spider/formula_1/0001,"limit(input0, 'desc(date)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_races
      ORDER BY date DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/formula_1/0025,df_races,"SELECT DISTINCT name
FROM df_races
ORDER BY name;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/formula_1/0011,"filter(input0, 'raceid > 2009L | year != 2009L'), anti_join(input1, line0, ""'raceid'""), mutate(line1, 'n_distinct = n_distinct(driverid)')","SELECT DISTINCT COUNT(DISTINCT driverid) OVER () AS count_distinct_driverid_
FROM
  (SELECT *
   FROM df_results AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_races
           WHERE (raceid > 2009
                  OR YEAR != 2009)) AS RHS
        WHERE (LHS.raceid = RHS.raceid) ))
ORDER BY count_distinct_driverid_;",3,18,4,2,4,0,3,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/formula_1/0010,"filter(input0, ""name != 'Australian Grand Prix' & year > 2009L""), anti_join(line0, input1, ""'raceid'""), mutate(line1, 'n_distinct = n_distinct(name)')","SELECT DISTINCT COUNT(DISTINCT `name`) OVER () AS `count___`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_races`
      WHERE (`name` != 'Australian Grand Prix'
             AND YEAR > 2009)) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_results AS RHS
        WHERE (LHS.raceid = RHS.raceid) ))
ORDER BY count___;",3,17,4,2,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/formula_1/0031,"filter(input0, ""country == 'UK' | country == 'Malaysia'"")","SELECT `name`
FROM `df_circuits`
WHERE (`country` = 'UK'
       OR `country` = 'Malaysia')
ORDER BY name;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/e_government/0002,df_forms,"SELECT DISTINCT form_type_code
FROM df_forms
ORDER BY form_type_code;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/e_government/0017,"summarise(input1, 'n = n()', ""'customer_id'""), inner_join(input0, line0, ""'party_id' = 'customer_id'""), limit(line1, 'desc(n)')","SELECT party_email
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT party_id,
                payment_method_code,
                party_phone,
                party_email,
                n,
                party_id AS customer_id
         FROM
           (SELECT LHS.party_id AS party_id,
                   LHS.payment_method_code AS payment_method_code,
                   LHS.party_phone AS party_phone,
                   LHS.party_email AS party_email,
                   RHS.n AS n
            FROM df_parties AS LHS
            INNER JOIN
              (SELECT customer_id,
                      COUNT() AS n
               FROM df_party_services
               GROUP BY customer_id) AS RHS ON (LHS.party_id = RHS.customer_id)))
      ORDER BY n DESC)
   LIMIT 1);",2,15,6,0,6,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/e_government/0008,"filter(input1, ""organization_name != 'Labour Party'""), natural_join4(input0, input1, input2, line0), limit(line1, 'date_contact_from')","SELECT `individual_last_name`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`individual_id` AS `individual_id`,
                `LHS`.`individual_first_name` AS `individual_first_name`,
                `LHS`.`individual_middle_name` AS `individual_middle_name`,
                `LHS`.`inidividual_phone` AS `inidividual_phone`,
                `LHS`.`individual_email` AS `individual_email`,
                `LHS`.`individual_address` AS `individual_address`,
                `LHS`.`individual_last_name` AS `individual_last_name`,
                `LHS`.`organization_id` AS `organization_id`,
                `LHS`.`date_formed` AS `date_formed`,
                `LHS`.`organization_name` AS `organization_name`,
                `LHS`.`uk_vat_number` AS `uk_vat_number`,
                `LHS`.`date_contact_from` AS `date_contact_from`,
                `LHS`.`date_contact_to` AS `date_contact_to`
         FROM
           (SELECT `LHS`.`individual_id` AS `individual_id`,
                   `LHS`.`individual_first_name` AS `individual_first_name`,
                   `LHS`.`individual_middle_name` AS `individual_middle_name`,
                   `LHS`.`inidividual_phone` AS `inidividual_phone`,
                   `LHS`.`individual_email` AS `individual_email`,
                   `LHS`.`individual_address` AS `individual_address`,
                   `LHS`.`individual_last_name` AS `individual_last_name`,
                   `LHS`.`organization_id` AS `organization_id`,
                   `LHS`.`date_formed` AS `date_formed`,
                   `LHS`.`organization_name` AS `organization_name`,
                   `LHS`.`uk_vat_number` AS `uk_vat_number`,
                   `RHS`.`date_contact_from` AS `date_contact_from`,
                   `RHS`.`date_contact_to` AS `date_contact_to`
            FROM
              (SELECT `LHS`.`individual_id` AS `individual_id`,
                      `LHS`.`individual_first_name` AS `individual_first_name`,
                      `LHS`.`individual_middle_name` AS `individual_middle_name`,
                      `LHS`.`inidividual_phone` AS `inidividual_phone`,
                      `LHS`.`individual_email` AS `individual_email`,
                      `LHS`.`individual_address` AS `individual_address`,
                      `LHS`.`individual_last_name` AS `individual_last_name`,
                      `RHS`.`organization_id` AS `organization_id`,
                      `RHS`.`date_formed` AS `date_formed`,
                      `RHS`.`organization_name` AS `organization_name`,
                      `RHS`.`uk_vat_number` AS `uk_vat_number`
               FROM `df_individuals` AS `LHS`
               CROSS JOIN `df_organizations` AS `RHS`) AS `LHS`
            INNER JOIN `df_organization_contact_individuals` AS `RHS` ON (`LHS`.`individual_id` = `RHS`.`individual_id`
                                                                          AND `LHS`.`organization_id` = `RHS`.`organization_id`)) AS `LHS`
         INNER JOIN
           (SELECT *
            FROM `df_organizations`
            WHERE (`organization_name` != 'Labour Party')) AS RHS ON (LHS.organization_id = RHS.organization_id
                                                                      AND LHS.date_formed = RHS.date_formed
                                                                      AND LHS.organization_name = RHS.organization_name
                                                                      AND LHS.uk_vat_number = RHS.uk_vat_number))
      ORDER BY date_contact_from)
   LIMIT 1);",2,18,7,0,7,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
spider/e_government/0003,"mutate(input0, 'n = n()'), inner_join(line0, input1, ""'service_id' = 'party_id','n' = 'form_id'"")","SELECT form_name
FROM
  (SELECT form_id,
          form_type_code,
          service_id,
          form_number,
          form_name,
          form_description,
          n,
          date_completion_started,
          form_status_code,
          date_fully_completed,
          service_id AS party_id
   FROM
     (SELECT LHS.form_id AS form_id,
             LHS.form_type_code AS form_type_code,
             LHS.service_id AS service_id,
             LHS.form_number AS form_number,
             LHS.form_name AS form_name,
             LHS.form_description AS form_description,
             LHS.n AS n,
             RHS.date_completion_started AS date_completion_started,
             RHS.form_status_code AS form_status_code,
             RHS.date_fully_completed AS date_fully_completed
      FROM
        (SELECT form_id,
                form_type_code,
                service_id,
                form_number,
                form_name,
                form_description,
                COUNT(*) OVER () AS n
         FROM df_forms) AS LHS
      INNER JOIN df_party_forms AS RHS ON (LHS.service_id = RHS.party_id
                                           AND LHS.n = RHS.form_id)))
ORDER BY form_name;",2,10,4,0,4,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/e_government/0013,"filter(input0, ""state_province_county == 'Colorado'""), mutate(line0, 'n_distinct = n_distinct(state_province_county)')","SELECT COUNT(DISTINCT `state_province_county`) OVER () AS `count___`
FROM `df_addresses`
WHERE (`state_province_county` = 'Colorado')
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/e_government/0006,df_organizations,"SELECT organization_name
FROM df_organizations
ORDER BY organization_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/e_government/0004,"filter(input0, ""party_email == 'enrico09@example.com'"")","SELECT `payment_method_code`,
       `party_phone`
FROM `df_parties`
WHERE (`party_email` = 'enrico09@example.com')
ORDER BY payment_method_code;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/e_government/0005,"natural_join(input0, input1), mutate(line0, 'n_distinct = n_distinct(form_id)'), filter(line1, 'form_id <= 1L | n_distinct < form_id')","SELECT party_email
FROM
  (SELECT party_id,
          payment_method_code,
          party_phone,
          party_email,
          form_id,
          date_completion_started,
          form_status_code,
          date_fully_completed,
          COUNT(DISTINCT form_id) OVER () AS n_distinct
   FROM
     (SELECT LHS.party_id AS party_id,
             LHS.payment_method_code AS payment_method_code,
             LHS.party_phone AS party_phone,
             LHS.party_email AS party_email,
             RHS.form_id AS form_id,
             RHS.date_completion_started AS date_completion_started,
             RHS.form_status_code AS form_status_code,
             RHS.date_fully_completed AS date_fully_completed
      FROM df_parties AS LHS
      INNER JOIN df_party_forms AS RHS ON (LHS.party_id = RHS.party_id)))
WHERE (form_id <= 1
       OR n_distinct < form_id)
ORDER BY party_email;",3,11,3,1,3,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/e_government/0016,"summarise(input0, 'n_distinct = n_distinct(payment_method_code)', '')","SELECT n_distinct AS count_distinct_payment_method_code_
FROM
  (SELECT COUNT(DISTINCT payment_method_code) AS n_distinct
   FROM df_parties)
ORDER BY count_distinct_payment_method_code_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/e_government/0019,"summarise(input1, 'n = n()', ""'date_contact_to'""), natural_join3(input0, input1, line0), limit(line1, 'date_contact_from')","SELECT organization_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.organization_id AS organization_id,
                LHS.date_formed AS date_formed,
                LHS.organization_name AS organization_name,
                LHS.uk_vat_number AS uk_vat_number,
                LHS.individual_id AS individual_id,
                LHS.date_contact_from AS date_contact_from,
                LHS.date_contact_to AS date_contact_to,
                RHS.n AS n
         FROM
           (SELECT LHS.organization_id AS organization_id,
                   LHS.date_formed AS date_formed,
                   LHS.organization_name AS organization_name,
                   LHS.uk_vat_number AS uk_vat_number,
                   RHS.individual_id AS individual_id,
                   RHS.date_contact_from AS date_contact_from,
                   RHS.date_contact_to AS date_contact_to
            FROM df_organizations AS LHS
            INNER JOIN df_organization_contact_individuals AS RHS ON (LHS.organization_id = RHS.organization_id)) AS LHS
         INNER JOIN
           (SELECT date_contact_to,
                   COUNT() AS n
            FROM df_organization_contact_individuals
            GROUP BY date_contact_to) AS RHS ON (LHS.date_contact_to = RHS.date_contact_to))
      ORDER BY date_contact_from)
   LIMIT 1);",2,15,6,0,6,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
spider/e_government/0007,"limit(input0, 'desc(date_formed)')","SELECT organization_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_organizations
      ORDER BY date_formed DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/e_government/0014,"summarise(input0, 'n = n()', ""'payment_method_code'""), filter(line0, 'n > 3L')","SELECT payment_method_code
FROM
  (SELECT payment_method_code,
          COUNT() AS n
   FROM df_parties
   GROUP BY payment_method_code)
WHERE (n > 3)
ORDER BY payment_method_code;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/e_government/0009,"summarise(input1, 'maxuk_vat_number = max(uk_vat_number)', ""'organization_id','organization_name'""), natural_join3(input0, input2, line0), limit(line1, 'desc(organization_name)')","SELECT individual_last_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.individual_id AS individual_id,
                LHS.individual_first_name AS individual_first_name,
                LHS.individual_middle_name AS individual_middle_name,
                LHS.inidividual_phone AS inidividual_phone,
                LHS.individual_email AS individual_email,
                LHS.individual_address AS individual_address,
                LHS.individual_last_name AS individual_last_name,
                LHS.organization_id AS organization_id,
                LHS.date_contact_from AS date_contact_from,
                LHS.date_contact_to AS date_contact_to,
                RHS.organization_name AS organization_name,
                RHS.maxuk_vat_number AS maxuk_vat_number
         FROM
           (SELECT LHS.individual_id AS individual_id,
                   LHS.individual_first_name AS individual_first_name,
                   LHS.individual_middle_name AS individual_middle_name,
                   LHS.inidividual_phone AS inidividual_phone,
                   LHS.individual_email AS individual_email,
                   LHS.individual_address AS individual_address,
                   LHS.individual_last_name AS individual_last_name,
                   RHS.organization_id AS organization_id,
                   RHS.date_contact_from AS date_contact_from,
                   RHS.date_contact_to AS date_contact_to
            FROM df_individuals AS LHS
            INNER JOIN df_organization_contact_individuals AS RHS ON (LHS.individual_id = RHS.individual_id)) AS LHS
         INNER JOIN
           (SELECT organization_id,
                   organization_name,
                   MAX(uk_vat_number) AS maxuk_vat_number
            FROM df_organizations
            GROUP BY organization_id,
                     organization_name) AS RHS ON (LHS.organization_id = RHS.organization_id))
      ORDER BY organization_name DESC)
   LIMIT 1);",2,16,6,0,6,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
spider/e_government/0011,"left_join(input1, input0), anti_join(input0, line0, ""'service_name'"")","SELECT DISTINCT service_name
FROM
  (SELECT *
   FROM df_services AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT LHS.booking_id AS booking_id,
                  LHS.customer_id AS customer_id,
                  LHS.service_id AS service_id,
                  LHS.service_datetime AS service_datetime,
                  LHS.booking_made_date AS booking_made_date,
                  RHS.service_type_code AS service_type_code,
                  RHS.service_name AS service_name,
                  RHS.service_descriptio AS service_descriptio
           FROM df_party_services AS LHS
           LEFT JOIN df_services AS RHS ON (LHS.service_id = RHS.service_id)) AS RHS
        WHERE (LHS.service_name = RHS.service_name) ))
ORDER BY service_name;",2,14,4,1,4,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
spider/e_government/0010,"summarise(input0, 'n = n()', ""'service_id','service_name'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT service_id,
          service_name,
          COUNT() AS n
   FROM df_services
   GROUP BY service_id,
            service_name)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/machine_repair/0002,df_technician,"SELECT name
FROM df_technician
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/machine_repair/0008,"summarise(input0, 'n = n()', ""'name','team'""), limit(line0, 'desc(name)')","SELECT team
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT name,
                team,
                COUNT() AS n
         FROM df_technician
         GROUP BY name,
                  team)
      ORDER BY name DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/machine_repair/0003,"intersect(input0, input0, 'team'), left_join(line0, input0)","SELECT team,
       starting_year
FROM
  (SELECT LHS.team AS team,
          RHS.technician_id AS technician_id,
          RHS.name AS name,
          RHS.starting_year AS starting_year,
          RHS.age AS age
   FROM
     (SELECT team
      FROM df_technician INTERSECT SELECT team
      FROM df_technician) AS LHS
   LEFT JOIN df_technician AS RHS ON (LHS.team = RHS.team))
ORDER BY team;",2,10,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0
spider/machine_repair/0013,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'name'"")","SELECT name,
       n AS count___
FROM
  (SELECT name,
          COUNT() AS n
   FROM
     (SELECT LHS.technician_id AS technician_id,
             LHS.name AS name,
             LHS.team AS team,
             LHS.starting_year AS starting_year,
             LHS.age AS age,
             RHS.repair_id AS repair_id,
             RHS.machine_id AS machine_id
      FROM df_technician AS LHS
      INNER JOIN df_repair_assignment AS RHS ON (LHS.technician_id = RHS.technician_id))
   GROUP BY name)
ORDER BY name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/machine_repair/0006,"limit(input0, 'desc(age)')","SELECT starting_year
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_technician
      ORDER BY age DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/machine_repair/0004,"filter(input0, ""team != 'NYY'"")","SELECT `name`
FROM `df_technician`
WHERE (`team` != 'NYY')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/machine_repair/0012,"filter(input0, 'value_points < 70'), anti_join(input2, line0, ''), natural_join3(input1, input2, line1)","SELECT name
FROM
  (SELECT LHS.technician_id AS technician_id,
          LHS.name AS name,
          LHS.team AS team,
          LHS.starting_year AS starting_year,
          LHS.age AS age,
          LHS.repair_id AS repair_id,
          LHS.machine_id AS machine_id
   FROM
     (SELECT LHS.technician_id AS technician_id,
             LHS.name AS name,
             LHS.team AS team,
             LHS.starting_year AS starting_year,
             LHS.age AS age,
             RHS.repair_id AS repair_id,
             RHS.machine_id AS machine_id
      FROM df_technician AS LHS
      INNER JOIN df_repair_assignment AS RHS ON (LHS.technician_id = RHS.technician_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_repair_assignment AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM df_machine
              WHERE (value_points < 70.0)) AS RHS
           WHERE (LHS.machine_id = RHS.machine_id) )) AS RHS ON (LHS.technician_id = RHS.technician_id
                                                                 AND LHS.repair_id = RHS.repair_id
                                                                 AND LHS.machine_id = RHS.machine_id))
ORDER BY name;",3,19,6,0,6,2,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0
spider/machine_repair/0015,"filter(input0, ""team == 'CWS'""), filter(input0, ""team == 'CLE' & team != 'CWS'""), intersect(line1, line0, 'starting_year')","SELECT `starting_year`
FROM
  (SELECT `starting_year`
   FROM `df_technician`
   WHERE (`team` = 'CLE'
          AND `team` != 'CWS') INTERSECT
     SELECT `starting_year`
     FROM `df_technician` WHERE (`team` = 'CWS'))
ORDER BY starting_year;",3,9,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0
spider/machine_repair/0005,"filter(input0, 'age >= 36L'), filter(line0, 'age <= 37L')","SELECT name
FROM
  (SELECT *
   FROM df_technician
   WHERE (age >= 36))
WHERE (age <= 37)
ORDER BY name;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/machine_repair/0001,"summarise(input0, 'n = n()', ""'age'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT age,
             COUNT() AS n
      FROM df_technician
      GROUP BY age))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/machine_repair/0014,"anti_join(input0, input1, '')","SELECT name
FROM
  (SELECT *
   FROM df_technician AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_repair_assignment AS RHS
        WHERE (LHS.technician_id = RHS.technician_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/machine_repair/0009,"summarise(input0, 'n = n()', ""'team'""), filter(line0, 'n >= 2L'), mutate(line1, 'n = n()')","SELECT team
FROM
  (SELECT team,
          COUNT() AS n
   FROM df_technician
   GROUP BY team)
WHERE (n >= 2)
ORDER BY team;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/machine_repair/0011,"semi_join(input2, input0), natural_join(input1, line0)","SELECT name
FROM
  (SELECT LHS.technician_id AS technician_id,
          LHS.name AS name,
          LHS.team AS team,
          LHS.starting_year AS starting_year,
          LHS.age AS age,
          RHS.repair_id AS repair_id,
          RHS.machine_id AS machine_id
   FROM df_technician AS LHS
   INNER JOIN
     (SELECT *
      FROM df_repair_assignment AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM df_machine AS RHS
           WHERE (LHS.machine_id = RHS.machine_id) )) AS RHS ON (LHS.technician_id = RHS.technician_id))
ORDER BY name;",2,12,4,0,4,1,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0
spider/machine_repair/0010,"intersect(input0, input0, 'machine_series'), natural_join3(input1, input2, line0)","SELECT name,
       machine_series
FROM
  (SELECT LHS.technician_id AS technician_id,
          LHS.name AS name,
          LHS.team AS team,
          LHS.starting_year AS starting_year,
          LHS.age AS age,
          LHS.repair_id AS repair_id,
          LHS.machine_id AS machine_id,
          RHS.machine_series AS machine_series
   FROM
     (SELECT LHS.technician_id AS technician_id,
             LHS.name AS name,
             LHS.team AS team,
             LHS.starting_year AS starting_year,
             LHS.age AS age,
             RHS.repair_id AS repair_id,
             RHS.machine_id AS machine_id
      FROM df_technician AS LHS
      INNER JOIN df_repair_assignment AS RHS ON (LHS.technician_id = RHS.technician_id)) AS LHS
   CROSS JOIN
     (SELECT machine_series
      FROM df_machine INTERSECT SELECT machine_series
      FROM df_machine) AS RHS)
ORDER BY name;",2,12,5,0,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0
spider/insurance_policies/0017,"summarise(input0, 'sumamount_payment = sum(amount_payment)', ""'amount_payment','date_payment_made'""), summarise(line0, 'sumamount_payment = sum(amount_payment)', '')","SELECT sumamount_payment AS sum_amount_payment_
FROM
  (SELECT SUM(amount_payment) AS sumamount_payment
   FROM
     (SELECT amount_payment,
             date_payment_made,
             SUM(amount_payment) AS sumamount_payment
      FROM df_payments
      GROUP BY amount_payment,
               date_payment_made))
ORDER BY sum_amount_payment_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/insurance_policies/0008,"summarise(input1, 'n = n()', ""'claim_id'""), semi_join(line0, input0)","SELECT claim_id,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT claim_id,
             COUNT() AS n
      FROM df_settlements
      GROUP BY claim_id) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_claims AS RHS
        WHERE (LHS.claim_id = RHS.claim_id) ))
ORDER BY claim_id;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/insurance_policies/0003,"intersect(input0, input0, 'payment_method_code'), inner_join(line0, input0, ""'payment_method_code'"")","SELECT payment_method_code,
       date_payment_made,
       amount_payment
FROM
  (SELECT LHS.payment_method_code AS payment_method_code,
          RHS.payment_id AS payment_id,
          RHS.settlement_id AS settlement_id,
          RHS.date_payment_made AS date_payment_made,
          RHS.amount_payment AS amount_payment
   FROM
     (SELECT payment_method_code
      FROM df_payments INTERSECT SELECT payment_method_code
      FROM df_payments) AS LHS
   INNER JOIN df_payments AS RHS ON (LHS.payment_method_code = RHS.payment_method_code))
ORDER BY payment_method_code;",2,10,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0
spider/insurance_policies/0022,"anti_join(input0, input1, ""'customer_id'"")","SELECT customer_details
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_customer_policies AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_details;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/insurance_policies/0013,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'customer_details','customer_id'""), filter(line1, 'n > 1L')","SELECT customer_details,
       customer_id
FROM
  (SELECT customer_details,
          customer_id,
          COUNT() AS n
   FROM
     (SELECT LHS.customer_id AS customer_id,
             LHS.customer_details AS customer_details,
             RHS.policy_id AS policy_id,
             RHS.policy_type_code AS policy_type_code,
             RHS.start_date AS start_date,
             RHS.end_date AS end_date
      FROM df_customers AS LHS
      INNER JOIN df_customer_policies AS RHS ON (LHS.customer_id = RHS.customer_id))
   GROUP BY customer_details,
            customer_id)
WHERE (n > 1)
ORDER BY customer_details;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/insurance_policies/0006,"mutate(input0, 'meanamount_claimed = mean(amount_claimed, na.rm = T)'), filter(line0, 'meanamount_claimed <= amount_claimed')","SELECT date_claim_made,
       date_claim_settled
FROM
  (SELECT claim_id,
          policy_id,
          date_claim_made,
          date_claim_settled,
          amount_claimed,
          amount_settled,
          AVG(amount_claimed) OVER () AS meanamount_claimed
   FROM df_claims)
WHERE (meanamount_claimed <= amount_claimed)
ORDER BY date_claim_made;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/insurance_policies/0004,"limit(input0, 'desc(policy_id)')","SELECT amount_settled,
       amount_claimed
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_claims
      ORDER BY policy_id DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/insurance_policies/0012,"summarise(input0, 'sumamount_settled = sum(amount_settled)', '')","SELECT sumamount_settled AS sum_amount_settled_
FROM
  (SELECT SUM(amount_settled) AS sumamount_settled
   FROM df_settlements)
ORDER BY sum_amount_settled_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/insurance_policies/0015,"summarise(input0, 'n = n()', ""'payment_id','payment_method_code'""), limit(line0, 'desc(n)')","SELECT payment_method_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT payment_id,
                payment_method_code,
                COUNT() AS n
         FROM df_payments
         GROUP BY payment_id,
                  payment_method_code)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/insurance_policies/0005,"limit(input0, 'amount_settled')","SELECT amount_settled,
       amount_claimed
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_claims
      ORDER BY amount_settled)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/insurance_policies/0016,"summarise(input0, 'n = n()', ""'payment_id','payment_method_code'""), limit(line0, 'desc(payment_id)')","SELECT payment_method_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT payment_id,
                payment_method_code,
                COUNT() AS n
         FROM df_payments
         GROUP BY payment_id,
                  payment_method_code)
      ORDER BY payment_id DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/insurance_policies/0018,df_customers,"SELECT customer_details
FROM df_customers
ORDER BY customer_details;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/insurance_policies/0020,"summarise(input0, 'n = n()', ""'customer_policy_id','date_claim_settled'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT customer_policy_id,
          date_claim_settled,
          COUNT() AS n
   FROM df_settlements
   GROUP BY customer_policy_id,
            date_claim_settled)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/insurance_policies/0019,"summarise(input0, 'n = n()', ""'policy_type_code'""), limit(line0, 'desc(n)')","SELECT policy_type_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT policy_type_code,
                COUNT() AS n
         FROM df_customer_policies
         GROUP BY policy_type_code)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/insurance_policies/0007,"mutate(input0, 'meanamount_settled = mean(amount_settled, na.rm = T)'), filter(line0, 'meanamount_settled >= amount_settled')","SELECT date_claim_made
FROM
  (SELECT claim_id,
          policy_id,
          date_claim_made,
          date_claim_settled,
          amount_claimed,
          amount_settled,
          AVG(amount_settled) OVER () AS meanamount_settled
   FROM df_claims)
WHERE (meanamount_settled >= amount_settled)
ORDER BY date_claim_made;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/insurance_policies/0024,"summarise(input0, 'sumamount_claimed = sum(amount_claimed)', '')","SELECT sumamount_claimed AS sum_amount_claimed_
FROM
  (SELECT SUM(amount_claimed) AS sumamount_claimed
   FROM df_claims)
ORDER BY sum_amount_claimed_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/insurance_policies/0021,"filter(input0, ""payment_method_code == 'Visa'""), natural_join(input0, line0)","SELECT `payment_id`,
       `date_payment_made`,
       `amount_payment`
FROM
  (SELECT `LHS`.`payment_id` AS `payment_id`,
          `LHS`.`settlement_id` AS `settlement_id`,
          `LHS`.`payment_method_code` AS `payment_method_code`,
          `LHS`.`date_payment_made` AS `date_payment_made`,
          `LHS`.`amount_payment` AS `amount_payment`
   FROM `df_payments` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_payments`
      WHERE (`payment_method_code` = 'Visa')) AS RHS ON (LHS.payment_id = RHS.payment_id
                                                         AND LHS.settlement_id = RHS.settlement_id
                                                         AND LHS.payment_method_code = RHS.payment_method_code
                                                         AND LHS.date_payment_made = RHS.date_payment_made
                                                         AND LHS.amount_payment = RHS.amount_payment))
ORDER BY payment_id;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/insurance_policies/0023,"summarise(input1, 'n = n()', ""'claim_id'""), filter(line0, 'n == 1L'), left_join(line1, input0)","SELECT claim_id,
       date_claim_made,
       date_claim_settled
FROM
  (SELECT LHS.claim_id AS claim_id,
          LHS.n AS n,
          RHS.policy_id AS policy_id,
          RHS.date_claim_made AS date_claim_made,
          RHS.date_claim_settled AS date_claim_settled,
          RHS.amount_claimed AS amount_claimed,
          RHS.amount_settled AS amount_settled
   FROM
     (SELECT *
      FROM
        (SELECT claim_id,
                COUNT() AS n
         FROM df_settlements
         GROUP BY claim_id)
      WHERE (n = 1)) AS LHS
   LEFT JOIN df_claims AS RHS ON (LHS.claim_id = RHS.claim_id))
ORDER BY claim_id;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/insurance_policies/0011,"limit(input0, 'date_claim_settled')","SELECT date_claim_made
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_claims
      ORDER BY date_claim_settled)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/insurance_policies/0010,"summarise(input0, 'n = n()', ""'claim_id','date_claim_settled'""), semi_join(line0, input1)","SELECT n AS count___,
       claim_id
FROM
  (SELECT *
   FROM
     (SELECT claim_id,
             date_claim_settled,
             COUNT() AS n
      FROM df_claims
      GROUP BY claim_id,
               date_claim_settled) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_settlements AS RHS
        WHERE (LHS.claim_id = RHS.claim_id
               AND LHS.date_claim_settled = RHS.date_claim_settled) ))
ORDER BY count___;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/cinema/0002,"filter(input0, 'openning_year == 2010L & openning_year <= 2011L'), filter(input0, 'openning_year > 2010L & openning_year >= 2011L'), intersect(line1, line0, 'location')","SELECT LOCATION
FROM
  (SELECT LOCATION
   FROM df_cinema
   WHERE (openning_year > 2010
          AND openning_year >= 2011) INTERSECT
     SELECT LOCATION
     FROM df_cinema WHERE (openning_year = 2010
                           AND openning_year <= 2011))
ORDER BY LOCATION;",3,9,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0
spider/cinema/0017,"natural_join(input0, input1), summarise(line0, 'price = max(price)', ""'number_in_season','title'"")","SELECT title,
       price AS max_t1_price_
FROM
  (SELECT number_in_season,
          title,
          MAX(price) AS price
   FROM
     (SELECT LHS.film_id AS film_id,
             LHS.rank_in_series AS rank_in_series,
             LHS.number_in_season AS number_in_season,
             LHS.title AS title,
             LHS.directed_by AS directed_by,
             LHS.original_air_date AS original_air_date,
             LHS.production_code AS production_code,
             RHS.cinema_id AS cinema_id,
             RHS.date AS date,
             RHS.show_times_per_day AS show_times_per_day,
             RHS.price AS price
      FROM df_film AS LHS
      INNER JOIN df_schedule AS RHS ON (LHS.film_id = RHS.film_id))
   GROUP BY number_in_season,
            title)
ORDER BY title;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/cinema/0008,"limit(input0, 'cinema_id')","SELECT name,
       LOCATION
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_cinema
      ORDER BY cinema_id)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cinema/0003,"summarise(input0, 'n = n()', ""'capacity'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT capacity,
          COUNT() AS n
   FROM df_cinema
   GROUP BY capacity)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/cinema/0013,df_film,"SELECT title,
       directed_by
FROM df_film
ORDER BY title;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cinema/0006,df_cinema,"SELECT DISTINCT LOCATION
FROM df_cinema
ORDER BY LOCATION;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cinema/0004,df_cinema,"SELECT name,
       openning_year,
       capacity
FROM df_cinema
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cinema/0012,"summarise(input0, 'n_distinct = n_distinct(capacity)', ""'location'""), filter(line0, 'n_distinct == 300L | n_distinct > 2L')","SELECT LOCATION
FROM
  (SELECT LOCATION,
          COUNT(DISTINCT capacity) AS n_distinct
   FROM df_cinema
   GROUP BY LOCATION)
WHERE (n_distinct = 300
       OR n_distinct > 2)
ORDER BY LOCATION;",2,7,2,1,2,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/cinema/0015,"summarise(input0, 'n = n()', ""'directed_by'"")","SELECT directed_by,
       n AS count___
FROM
  (SELECT directed_by,
          COUNT() AS n
   FROM df_film
   GROUP BY directed_by)
ORDER BY directed_by;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cinema/0005,"mutate(input0, 'meancapacity = mean(capacity, na.rm = T)'), filter(line0, 'meancapacity <= capacity')","SELECT name,
       LOCATION
FROM
  (SELECT cinema_id,
          name,
          openning_year,
          capacity,
          LOCATION,
          AVG(capacity) OVER () AS meancapacity
   FROM df_cinema)
WHERE (meancapacity <= capacity)
ORDER BY name;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/cinema/0016,"natural_join(input0, input1), summarise(line0, 'sumshow_times_per_day = sum(show_times_per_day)', ""'capacity','name'"")","SELECT name,
       sumshow_times_per_day AS sum_t1_show_times_per_day_
FROM
  (SELECT capacity,
          name,
          SUM(show_times_per_day) AS sumshow_times_per_day
   FROM
     (SELECT LHS.cinema_id AS cinema_id,
             LHS.name AS name,
             LHS.openning_year AS openning_year,
             LHS.capacity AS capacity,
             LHS.location AS LOCATION,
             RHS.film_id AS film_id,
             RHS.date AS date,
             RHS.show_times_per_day AS show_times_per_day,
             RHS.price AS price
      FROM df_cinema AS LHS
      INNER JOIN df_schedule AS RHS ON (LHS.cinema_id = RHS.cinema_id))
   GROUP BY capacity,
            name)
ORDER BY name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/cinema/0018,"natural_join(input1, input2), left_join(line0, input0)","SELECT name,
       title, date, price
FROM
  (SELECT LHS.cinema_id AS cinema_id,
          LHS.name AS name,
          LHS.openning_year AS openning_year,
          LHS.capacity AS capacity,
          LHS.location AS LOCATION,
          LHS.film_id AS film_id,
          LHS.date AS date,
          LHS.show_times_per_day AS show_times_per_day,
          LHS.price AS price,
          RHS.rank_in_series AS rank_in_series,
          RHS.number_in_season AS number_in_season,
          RHS.title AS title,
          RHS.directed_by AS directed_by,
          RHS.original_air_date AS original_air_date,
          RHS.production_code AS production_code
   FROM
     (SELECT LHS.cinema_id AS cinema_id,
             LHS.name AS name,
             LHS.openning_year AS openning_year,
             LHS.capacity AS capacity,
             LHS.location AS LOCATION,
             RHS.film_id AS film_id,
             RHS.date AS date,
             RHS.show_times_per_day AS show_times_per_day,
             RHS.price AS price
      FROM df_cinema AS LHS
      INNER JOIN df_schedule AS RHS ON (LHS.cinema_id = RHS.cinema_id)) AS LHS
   LEFT JOIN df_film AS RHS ON (LHS.film_id = RHS.film_id))
ORDER BY name;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
spider/cinema/0020,"left_join(input0, input1), mutate(line0, 'sumshow_times_per_day = sum(show_times_per_day)'), limit(line1, 'rank_in_series')","SELECT directed_by
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT film_id,
                rank_in_series,
                number_in_season,
                title,
                directed_by,
                original_air_date,
                production_code,
                cinema_id, date, show_times_per_day,
                                 price,
                                 SUM(show_times_per_day) OVER () AS sumshow_times_per_day
         FROM
           (SELECT LHS.film_id AS film_id,
                   LHS.rank_in_series AS rank_in_series,
                   LHS.number_in_season AS number_in_season,
                   LHS.title AS title,
                   LHS.directed_by AS directed_by,
                   LHS.original_air_date AS original_air_date,
                   LHS.production_code AS production_code,
                   RHS.cinema_id AS cinema_id,
                   RHS.date AS date,
                   RHS.show_times_per_day AS show_times_per_day,
                   RHS.price AS price
            FROM df_film AS LHS
            LEFT JOIN df_schedule AS RHS ON (LHS.film_id = RHS.film_id)))
      ORDER BY rank_in_series)
   LIMIT 1);",2,13,5,0,5,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0
spider/cinema/0007,"intersect(input0, input0, 'name'), inner_join(line0, input0, ""'name'"")","SELECT name,
       openning_year
FROM
  (SELECT LHS.name AS name,
          RHS.cinema_id AS cinema_id,
          RHS.openning_year AS openning_year,
          RHS.capacity AS capacity,
          RHS.location AS LOCATION
   FROM
     (SELECT name
      FROM df_cinema INTERSECT SELECT name
      FROM df_cinema) AS LHS
   INNER JOIN df_cinema AS RHS ON (LHS.name = RHS.name))
ORDER BY name;",2,10,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0
spider/cinema/0021,"summarise(input0, 'n = n()', ""'location','openning_year'""), left_join(input0, line0), filter(line1, 'n >= 300L | n > 1L')","SELECT DISTINCT LOCATION
FROM
  (SELECT LHS.cinema_id AS cinema_id,
          LHS.name AS name,
          LHS.openning_year AS openning_year,
          LHS.capacity AS capacity,
          LHS.location AS LOCATION,
          RHS.n AS n
   FROM df_cinema AS LHS
   LEFT JOIN
     (SELECT LOCATION,
             openning_year,
             COUNT() AS n
      FROM df_cinema
      GROUP BY LOCATION,
               openning_year) AS RHS ON (LHS.openning_year = RHS.openning_year
                                         AND LHS.location = RHS.location))
WHERE (n >= 300
       OR n > 1)
ORDER BY LOCATION;",3,10,3,1,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/cinema/0001,"filter(input0, 'capacity > 800L'), anti_join(input0, line0, ""'location'""), semi_join(input0, line1)","SELECT DISTINCT LOCATION
FROM
  (SELECT *
   FROM df_cinema AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_cinema AS LHS
           WHERE NOT EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM df_cinema
                   WHERE (capacity > 800)) AS RHS
                WHERE (LHS.location = RHS.location) )) AS RHS
        WHERE (LHS.cinema_id = RHS.cinema_id
               AND LHS.name = RHS.name
               AND LHS.openning_year = RHS.openning_year
               AND LHS.capacity = RHS.capacity
               AND LHS.location = RHS.location) ))
ORDER BY LOCATION;",3,21,6,1,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/cinema/0014,"intersect(input0, input0, 'directed_by')","SELECT directed_by
FROM
  (SELECT directed_by
   FROM df_film INTERSECT SELECT directed_by
   FROM df_film)
ORDER BY directed_by;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/cinema/0011,"filter(input0, 'openning_year > 2010L'), mutate(line0, 'n = n()'), limit(line1, 'openning_year')","SELECT LOCATION
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT cinema_id,
                name,
                openning_year,
                capacity,
                LOCATION,
                COUNT(*) OVER () AS n
         FROM
           (SELECT *
            FROM df_cinema
            WHERE (openning_year > 2010)))
      ORDER BY openning_year)
   LIMIT 1);",2,13,5,0,5,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/cinema/0010,"summarise(input0, 'n = n()', ""'location'"")","SELECT LOCATION,
       n AS count___
FROM
  (SELECT LOCATION,
          COUNT() AS n
   FROM df_cinema
   GROUP BY LOCATION)
ORDER BY LOCATION;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0042,"filter(input0, ""name != 'Boeing 737-800'""), anti_join(input2, line0, ''), inner_join(line1, input1, ""'eid'"")","SELECT `name`
FROM
  (SELECT `LHS`.`eid` AS `eid`,
          `LHS`.`aid` AS `aid`,
          `RHS`.`name` AS `name`,
          `RHS`.`salary` AS `salary`
   FROM
     (SELECT *
      FROM `df_certificate` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_aircraft`
              WHERE (`name` != 'Boeing 737-800')) AS RHS
           WHERE (LHS.aid = RHS.aid) )) AS LHS
   INNER JOIN df_employee AS RHS ON (LHS.eid = RHS.eid))
ORDER BY name;",3,16,5,0,5,1,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0
spider/flight_1/0033,"summarise(input0, 'n = n()', ""'destination','origin'""), limit(line0, 'destination')","SELECT origin
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT destination,
                origin,
                COUNT() AS n
         FROM df_flight
         GROUP BY destination,
                  origin)
      ORDER BY destination)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0037,"summarise(input0, 'n = n()', ""'aid','arrival_date'""), natural_join(input1, line0)","SELECT name,
       n AS count___
FROM
  (SELECT LHS.aid AS aid,
          LHS.name AS name,
          LHS.distance AS distance,
          RHS.arrival_date AS arrival_date,
          RHS.n AS n
   FROM df_aircraft AS LHS
   INNER JOIN
     (SELECT aid,
             arrival_date,
             COUNT() AS n
      FROM df_flight
      GROUP BY aid,
               arrival_date) AS RHS ON (LHS.aid = RHS.aid))
ORDER BY name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0002,df_aircraft,"SELECT name,
       distance
FROM df_aircraft
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0036,"filter(input1, ""name != 'Airbus A340-300'""), anti_join(input0, line0, ""'aid'"")","SELECT `flno`
FROM
  (SELECT *
   FROM `df_flight` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_aircraft`
           WHERE (`name` != 'Airbus A340-300')) AS RHS
        WHERE (LHS.aid = RHS.aid) ))
ORDER BY flno;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/flight_1/0017,"limit(input0, 'salary')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_employee
      ORDER BY salary)
   LIMIT 3);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0008,"limit(input0, 'distance')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_aircraft
      ORDER BY distance)
   LIMIT 3);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0039,"summarise(input0, 'n_distinct = n_distinct(eid)', '')","SELECT n_distinct AS count_distinct_eid_
FROM
  (SELECT COUNT(DISTINCT eid) AS n_distinct
   FROM df_certificate)
ORDER BY count_distinct_eid_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0038,"summarise(input1, 'n = n()', ""'aid','name'""), left_join(input0, line0), inner_join(line1, line1, ""'flno' = 'aid'"")","SELECT name
FROM
  (SELECT LHS.flno AS flno,
          LHS.origin AS origin,
          LHS.destination AS destination,
          LHS.distance AS distance,
          LHS.departure_date AS departure_date,
          LHS.arrival_date AS arrival_date,
          LHS.price AS price,
          LHS.aid AS aid,
          LHS.name AS name,
          LHS.n AS n,
          RHS.flno AS flno_other,
          RHS.origin AS origin_other,
          RHS.destination AS destination_other,
          RHS.distance AS distance_other,
          RHS.departure_date AS departure_date_other,
          RHS.arrival_date AS arrival_date_other,
          RHS.price AS price_other,
          RHS.name AS name_other,
          RHS.n AS n_other
   FROM
     (SELECT LHS.flno AS flno,
             LHS.origin AS origin,
             LHS.destination AS destination,
             LHS.distance AS distance,
             LHS.departure_date AS departure_date,
             LHS.arrival_date AS arrival_date,
             LHS.price AS price,
             LHS.aid AS aid,
             RHS.name AS name,
             RHS.n AS n
      FROM df_flight AS LHS
      LEFT JOIN
        (SELECT aid,
                name,
                COUNT() AS n
         FROM df_aircraft
         GROUP BY aid,
                  name) AS RHS ON (LHS.aid = RHS.aid)) AS LHS
   INNER JOIN
     (SELECT LHS.flno AS flno,
             LHS.origin AS origin,
             LHS.destination AS destination,
             LHS.distance AS distance,
             LHS.departure_date AS departure_date,
             LHS.arrival_date AS arrival_date,
             LHS.price AS price,
             LHS.aid AS aid,
             RHS.name AS name,
             RHS.n AS n
      FROM df_flight AS LHS
      LEFT JOIN
        (SELECT aid,
                name,
                COUNT() AS n
         FROM df_aircraft
         GROUP BY aid,
                  name) AS RHS ON (LHS.aid = RHS.aid)) AS RHS ON (LHS.flno = RHS.aid))
ORDER BY name;",3,15,6,0,6,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0
spider/flight_1/0003,"filter(input0, 'distance > 1000'), natural_join(input0, line0)","SELECT aid
FROM
  (SELECT LHS.aid AS aid,
          LHS.name AS name,
          LHS.distance AS distance
   FROM df_aircraft AS LHS
   INNER JOIN
     (SELECT *
      FROM df_aircraft
      WHERE (distance > 1000.0)) AS RHS ON (LHS.aid = RHS.aid
                                            AND LHS.name = RHS.name
                                            AND LHS.distance = RHS.distance))
ORDER BY aid;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0027,"filter(input0, 'price > 300'), filter(line0, 'price >= 300')","SELECT origin,
       destination
FROM
  (SELECT *
   FROM df_flight
   WHERE (price > 300.0))
WHERE (price >= 300.0)
ORDER BY origin;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0022,"filter(input0, ""origin == 'Los Angeles'"")","SELECT `flno`
FROM `df_flight`
WHERE (`origin` = 'Los Angeles')
ORDER BY flno;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0030,"filter(input0, ""origin == 'Los Angeles'""), mutate(line0, 'meanprice = mean(price, na.rm = T)'), mutate(line1, 'meandistance = mean(distance, na.rm = T)')","SELECT DISTINCT AVG(`distance`) OVER () AS `avg_distance_`,
                                     `meanprice` AS `avg_price_`
FROM
  (SELECT `flno`,
          `origin`,
          `destination`,
          `distance`,
          `departure_date`,
          `arrival_date`,
          `price`,
          `aid`,
          AVG(`price`) OVER () AS `meanprice`
   FROM
     (SELECT *
      FROM `df_flight`
      WHERE (`origin` = 'Los Angeles')))
ORDER BY avg_distance_;",3,10,3,1,3,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0
spider/flight_1/0013,"filter(input0, 'salary >= 100000 & salary < 200000'), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_employee
WHERE (salary >= 100000.0
       AND salary < 200000.0)
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/flight_1/0006,"mutate(input0, 'maxdistance = max(distance)'), mutate(line0, 'meandistance = mean(distance, na.rm = T)'), mutate(line1, 'distance = min(distance)')","SELECT DISTINCT MIN(distance) OVER () AS min_distance_,
                                   meandistance AS avg_distance_,
                                   maxdistance AS max_distance_
FROM
  (SELECT aid,
          name,
          distance,
          maxdistance,
          AVG(distance) OVER () AS meandistance
   FROM
     (SELECT aid,
             name,
             distance,
             MAX(distance) OVER () AS maxdistance
      FROM df_aircraft))
ORDER BY min_distance_;",3,10,3,1,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0
spider/flight_1/0004,"filter(input0, 'distance > 1000 & distance <= 5000'), mutate(line0, 'n_distinct = n_distinct(distance)')","SELECT DISTINCT COUNT(DISTINCT distance) OVER () AS count___
FROM df_aircraft
WHERE (distance > 1000.0
       AND distance <= 5000.0)
ORDER BY count___;",2,6,1,2,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/flight_1/0012,"filter(input0, 'salary > 100000')","SELECT eid
FROM df_employee
WHERE (salary > 100000.0)
ORDER BY eid;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0026,"filter(input0, ""destination != 'Los Angeles' & destination == 'Honolulu'""), mutate(line0, 'meanprice = mean(price, na.rm = T)')","SELECT DISTINCT AVG(`price`) OVER () AS `avg_price_`
FROM `df_flight`
WHERE (`destination` != 'Los Angeles'
       AND `destination` = 'Honolulu')
ORDER BY avg_price_;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/flight_1/0015,"mutate(input0, 'meansalary = mean(salary, na.rm = T)'), mutate(line0, 'salary = max(salary)')","SELECT DISTINCT meansalary AS avg_salary_,
                MAX(salary) OVER () AS max_salary_
FROM
  (SELECT eid,
          name,
          salary,
          AVG(salary) OVER () AS meansalary
   FROM df_employee)
ORDER BY avg_salary_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/flight_1/0005,"filter(input0, 'aid == 12'), natural_join(input0, line0)","SELECT name,
       distance
FROM
  (SELECT LHS.aid AS aid,
          LHS.name AS name,
          LHS.distance AS distance
   FROM df_aircraft AS LHS
   INNER JOIN
     (SELECT *
      FROM df_aircraft
      WHERE (aid = 12.0)) AS RHS ON (LHS.aid = RHS.aid
                                     AND LHS.name = RHS.name
                                     AND LHS.distance = RHS.distance))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0016,"limit(input0, 'desc(salary)')","SELECT eid,
       name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_employee
      ORDER BY salary DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0032,"summarise(input0, 'n = n()', ""'destination','origin'"")","SELECT destination,
       n AS count___
FROM
  (SELECT destination,
          origin,
          COUNT() AS n
   FROM df_flight
   GROUP BY destination,
            origin)
ORDER BY destination;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0045,"summarise(input1, 'n = n()', ""'aid','eid'""), inner_join(line0, input0, ""'aid'""), limit(line1, 'eid')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.aid AS aid,
                LHS.eid AS eid,
                LHS.n AS n,
                RHS.name AS name,
                RHS.distance AS distance
         FROM
           (SELECT aid,
                   eid,
                   COUNT() AS n
            FROM df_certificate
            GROUP BY aid,
                     eid) AS LHS
         INNER JOIN df_aircraft AS RHS ON (LHS.aid = RHS.aid))
      ORDER BY eid)
   LIMIT 1);",2,12,5,0,5,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/flight_1/0018,"mutate(input0, 'meansalary = mean(salary, na.rm = T)'), filter(line0, 'meansalary <= salary')","SELECT name
FROM
  (SELECT eid,
          name,
          salary,
          AVG(salary) OVER () AS meansalary
   FROM df_employee)
WHERE (meansalary <= salary)
ORDER BY name;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/flight_1/0041,"filter(input1, ""name == 'John Williams'""), natural_join3(input1, input2, line0), inner_join(line1, input0, ""'aid'"")","SELECT `name_other` AS `name`
FROM
  (SELECT `LHS`.`eid` AS `eid`,
          `LHS`.`name` AS `name`,
          `LHS`.`salary` AS `salary`,
          `LHS`.`aid` AS `aid`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`distance` AS `distance`
   FROM
     (SELECT `LHS`.`eid` AS `eid`,
             `LHS`.`name` AS `name`,
             `LHS`.`salary` AS `salary`,
             `LHS`.`aid` AS `aid`
      FROM
        (SELECT `LHS`.`eid` AS `eid`,
                `LHS`.`name` AS `name`,
                `LHS`.`salary` AS `salary`,
                `RHS`.`aid` AS `aid`
         FROM `df_employee` AS `LHS`
         INNER JOIN `df_certificate` AS `RHS` ON (`LHS`.`eid` = `RHS`.`eid`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_employee`
         WHERE (`name` = 'John Williams')) AS RHS ON (LHS.eid = RHS.eid
                                                      AND LHS.name = RHS.name
                                                      AND LHS.salary = RHS.salary)) AS LHS
   INNER JOIN df_aircraft AS RHS ON (LHS.aid = RHS.aid))
ORDER BY name;",3,14,5,0,5,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0
spider/flight_1/0035,"inner_join(input1, input0, ""'aid'""), filter(line0, 'flno == 99')","SELECT name
FROM
  (SELECT LHS.aid AS aid,
          LHS.name AS name,
          LHS.distance AS distance,
          RHS.flno AS flno,
          RHS.origin AS origin,
          RHS.destination AS destination,
          RHS.distance AS distance_other,
          RHS.departure_date AS departure_date,
          RHS.arrival_date AS arrival_date,
          RHS.price AS price
   FROM df_aircraft AS LHS
   INNER JOIN df_flight AS RHS ON (LHS.aid = RHS.aid))
WHERE (flno = 99.0)
ORDER BY name;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/flight_1/0020,"summarise(input0, 'n = n()', ""'flno'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT flno,
          COUNT() AS n
   FROM df_flight
   GROUP BY flno)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/flight_1/0019,"filter(input0, ""name == 'Mark Young'""), semi_join(line0, input0)","SELECT `eid`,
       `salary`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_employee`
      WHERE (`name` = 'Mark Young')) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_employee AS RHS
        WHERE (LHS.eid = RHS.eid
               AND LHS.name = RHS.name
               AND LHS.salary = RHS.salary) ))
ORDER BY eid;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/flight_1/0007,"limit(input0, 'desc(distance)')","SELECT aid,
       name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_aircraft
      ORDER BY distance DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0034,"summarise(input0, 'n = n()', ""'destination','flno'""), limit(line0, 'destination')","SELECT destination
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT destination,
                flno,
                COUNT() AS n
         FROM df_flight
         GROUP BY destination,
                  flno)
      ORDER BY destination)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0024,"filter(input0, ""origin == 'Los Angeles' & destination == 'Honolulu'"")","SELECT `departure_date`,
       `arrival_date`
FROM `df_flight`
WHERE (`origin` = 'Los Angeles'
       AND `destination` = 'Honolulu')
ORDER BY departure_date;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0021,df_flight,"SELECT flno,
       origin,
       destination
FROM df_flight
ORDER BY flno;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0023,"filter(input0, ""destination == 'Honolulu'"")","SELECT `origin`
FROM `df_flight`
WHERE (`destination` = 'Honolulu')
ORDER BY origin;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0001,"inner_join(input0, input0, ""'distance'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT LHS.aid AS aid,
             LHS.name AS name,
             LHS.distance AS distance,
             RHS.aid AS aid_other,
             RHS.name AS name_other
      FROM df_aircraft AS LHS
      INNER JOIN df_aircraft AS RHS ON (LHS.distance = RHS.distance)))
ORDER BY count___;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/flight_1/0046,"filter(input0, 'distance >= 5000'), natural_join(input1, line0), mutate(line1, 'n = n()')","SELECT DISTINCT name
FROM
  (SELECT LHS.eid AS eid,
          LHS.aid AS aid,
          RHS.name AS name,
          RHS.distance AS distance
   FROM df_certificate AS LHS
   INNER JOIN
     (SELECT *
      FROM df_aircraft
      WHERE (distance >= 5000.0)) AS RHS ON (LHS.aid = RHS.aid))
ORDER BY name;",3,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/flight_1/0047,"summarise(input1, 'n = n()', ""'eid'""), natural_join(input0, line0), limit(line1, 'desc(n)')","SELECT name,
       salary
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.eid AS eid,
                LHS.name AS name,
                LHS.salary AS salary,
                RHS.n AS n
         FROM df_employee AS LHS
         INNER JOIN
           (SELECT eid,
                   COUNT() AS n
            FROM df_certificate
            GROUP BY eid) AS RHS ON (LHS.eid = RHS.eid))
      ORDER BY n DESC)
   LIMIT 1);",2,13,5,0,5,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0014,"filter(input0, 'eid == 242518965'), natural_join(input0, line0)","SELECT name,
       salary
FROM
  (SELECT LHS.eid AS eid,
          LHS.name AS name,
          LHS.salary AS salary
   FROM df_employee AS LHS
   INNER JOIN
     (SELECT *
      FROM df_employee
      WHERE (eid = 242518965.0)) AS RHS ON (LHS.eid = RHS.eid
                                            AND LHS.name = RHS.name
                                            AND LHS.salary = RHS.salary))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0009,"mutate(input0, 'meandistance = mean(distance, na.rm = T)'), filter(line0, 'meandistance < distance')","SELECT name
FROM
  (SELECT aid,
          name,
          distance,
          AVG(distance) OVER () AS meandistance
   FROM df_aircraft)
WHERE (meandistance < distance)
ORDER BY name;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/flight_1/0025,"filter(input0, 'distance >= 2000')","SELECT flno
FROM df_flight
WHERE (distance >= 2000.0)
ORDER BY flno;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0011,df_employee,"SELECT name,
       salary
FROM df_employee
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0029,"limit(input0, 'distance')","SELECT flno
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_flight
      ORDER BY distance)
   LIMIT 3);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0010,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_employee)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0044,"filter(input0, ""name == 'Boeing 737-800'""), semi_join(input2, line0), anti_join(input1, line1, ""'eid'"")","SELECT DISTINCT `name`
FROM
  (SELECT *
   FROM `df_employee` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_certificate` AS `LHS`
           WHERE EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM `df_aircraft`
                   WHERE (`name` = 'Boeing 737-800')) AS RHS
                WHERE (LHS.aid = RHS.aid) )) AS RHS
        WHERE (LHS.eid = RHS.eid) ))
ORDER BY name;",3,21,6,1,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/flight_1/0040,"anti_join(input0, input1, ""'eid'"")","SELECT eid
FROM
  (SELECT *
   FROM df_employee AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_certificate AS RHS
        WHERE (LHS.eid = RHS.eid) ))
ORDER BY eid;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/flight_1/0028,"limit(input0, 'flno')","SELECT flno,
       distance
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_flight
      ORDER BY flno)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_1/0031,"summarise(input0, 'n = n()', ""'arrival_date','origin'"")","SELECT origin,
       n AS count___
FROM
  (SELECT arrival_date,
          origin,
          COUNT() AS n
   FROM df_flight
   GROUP BY arrival_date,
            origin)
ORDER BY origin;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/network_2/0042,"semi_join(input0, input1), mutate(line0, 'n_distinct = n_distinct(name)')","SELECT DISTINCT COUNT(DISTINCT name) OVER () AS count_distinct_name_
FROM
  (SELECT *
   FROM df_person AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_personfriend AS RHS
        WHERE (LHS.name = RHS.name) ))
ORDER BY count_distinct_name_;",2,12,3,2,3,0,2,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0
spider/network_2/0033,"inner_join(input0, input1, ""'name' = 'friend'""), filter(line0, ""city == 'new york city'"")","SELECT `name_other` AS `name`
FROM
  (SELECT `name`,
          `age`,
          `city`,
          `gender`,
          `job`,
          `name_other`,
          `year`,
          `name` AS `friend`
   FROM
     (SELECT `LHS`.`name` AS `name`,
             `LHS`.`age` AS `age`,
             `LHS`.`city` AS `city`,
             `LHS`.`gender` AS `gender`,
             `LHS`.`job` AS `job`,
             `RHS`.`name` AS `name_other`,
             `RHS`.`year` AS `year`
      FROM `df_person` AS `LHS`
      INNER JOIN `df_personfriend` AS `RHS` ON (`LHS`.`name` = `RHS`.`friend`)))
WHERE (`city` = 'new york city')
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/network_2/0037,"filter(input0, ""name != 'Zach'""), anti_join(line0, input1, ""'name'""), mutate(line1, 'maxname = max(name)')","SELECT `age`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_person`
      WHERE (`name` != 'Zach')) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_personfriend AS RHS
        WHERE (LHS.name = RHS.name) ))
ORDER BY age;",3,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/network_2/0002,"filter(input0, ""gender == 'female'""), summarise(line0, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_person`
      WHERE (`gender` = 'female')))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/network_2/0036,"mutate(input0, 'year = max(year)'), natural_join(input0, line0), filter(line1, ""name == 'Zach'"")","SELECT `friend`
FROM
  (SELECT `LHS`.`name` AS `name`,
          `LHS`.`friend` AS `friend`,
          `LHS`.`year` AS `year`
   FROM `df_personfriend` AS `LHS`
   INNER JOIN
     (SELECT `name`,
             `friend`,
             MAX(`year`) OVER () AS `year`
      FROM `df_personfriend`) AS `RHS` ON (`LHS`.`name` = `RHS`.`name`
                                           AND `LHS`.`friend` = `RHS`.`friend`
                                           AND `LHS`.`year` = `RHS`.`year`))
WHERE (`name` = 'Zach')
ORDER BY friend;",3,9,3,0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/network_2/0017,"filter(input0, ""job != 'engineer'""), mutate(input0, 'job = min(job)'), natural_join(line0, line1)","SELECT `name`
FROM
  (SELECT `LHS`.`name` AS `name`,
          `LHS`.`age` AS `age`,
          `LHS`.`city` AS `city`,
          `LHS`.`gender` AS `gender`,
          `LHS`.`job` AS `job`
   FROM
     (SELECT *
      FROM `df_person`
      WHERE (`job` != 'engineer')) AS LHS
   INNER JOIN
     (SELECT name,
             age,
             city,
             gender,
             MIN(job) OVER () AS job
      FROM df_person) AS RHS ON (LHS.name = RHS.name
                                 AND LHS.age = RHS.age
                                 AND LHS.city = RHS.city
                                 AND LHS.gender = RHS.gender
                                 AND LHS.job = RHS.job))
ORDER BY name;",3,11,4,0,4,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/network_2/0008,"filter(input0, ""gender == 'male'""), mutate(line0, 'age = min(age)'), inner_join(line1, input0, ""'age','job'"")","SELECT `name`
FROM
  (SELECT `LHS`.`name` AS `name`,
          `LHS`.`age` AS `age`,
          `LHS`.`city` AS `city`,
          `LHS`.`gender` AS `gender`,
          `LHS`.`job` AS `job`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`city` AS `city_other`,
          `RHS`.`gender` AS `gender_other`
   FROM
     (SELECT `name`,
             MIN(`age`) OVER () AS `age`,
                             `city`,
                             `gender`,
                             `job`
      FROM `df_person`
      WHERE (`gender` = 'male')) AS LHS
   INNER JOIN df_person AS RHS ON (LHS.age = RHS.age
                                   AND LHS.job = RHS.job))
ORDER BY name;",3,9,3,0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0
spider/network_2/0039,"mutate(input1, 'year = max(year)'), natural_join(input0, line0), filter(line1, ""friend == 'Alice'"")","SELECT `name`,
       `age`,
       `job`
FROM
  (SELECT `LHS`.`name` AS `name`,
          `LHS`.`age` AS `age`,
          `LHS`.`city` AS `city`,
          `LHS`.`gender` AS `gender`,
          `LHS`.`job` AS `job`,
          `RHS`.`friend` AS `friend`,
          `RHS`.`year` AS `year`
   FROM `df_person` AS `LHS`
   INNER JOIN
     (SELECT `name`,
             `friend`,
             MAX(`year`) OVER () AS `year`
      FROM `df_personfriend`) AS `RHS` ON (`LHS`.`name` = `RHS`.`name`))
WHERE (`friend` = 'Alice')
ORDER BY name;",3,9,3,0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/network_2/0038,"filter(input0, ""friend == 'Alice'""), mutate(line0, 'minyear = min(year)')","SELECT `name`
FROM `df_personfriend`
WHERE (`friend` = 'Alice')
ORDER BY name;",2,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/network_2/0003,"summarise(input0, 'meanage = mean(age, na.rm = T)', ""'age','city'""), summarise(line0, 'meanage = mean(age, na.rm = T)', '')","SELECT meanage AS avg_age_
FROM
  (SELECT AVG(age) AS meanage
   FROM
     (SELECT age,
             city,
             AVG(age) AS meanage
      FROM df_person
      GROUP BY age,
               city))
ORDER BY avg_age_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/network_2/0027,"summarise(input0, 'n = n()', ""'name'""), filter(line0, 'n == 1L')","SELECT name
FROM
  (SELECT name,
          COUNT() AS n
   FROM df_personfriend
   GROUP BY name)
WHERE (n = 1)
ORDER BY name;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/network_2/0022,"left_join(input0, input1), filter(line0, ""friend != 'Dan' & friend == 'Alice'"")","SELECT `name`,
       `age`
FROM
  (SELECT `LHS`.`name` AS `name`,
          `LHS`.`age` AS `age`,
          `LHS`.`city` AS `city`,
          `LHS`.`gender` AS `gender`,
          `LHS`.`job` AS `job`,
          `RHS`.`friend` AS `friend`,
          `RHS`.`year` AS `year`
   FROM `df_person` AS `LHS`
   LEFT JOIN `df_personfriend` AS `RHS` ON (`LHS`.`name` = `RHS`.`name`))
WHERE (`friend` != 'Dan'
       AND `friend` = 'Alice')
ORDER BY name;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
spider/network_2/0013,"summarise(input0, 'meanage = mean(age, na.rm = T)', ""'gender','job'"")","SELECT meanage AS avg_age_,
       job
FROM
  (SELECT gender,
          job,
          AVG(age) AS meanage
   FROM df_person
   GROUP BY gender,
            job)
ORDER BY avg_age_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/network_2/0006,"mutate(input0, 'maxage = max(age)'), inner_join(input0, line0, ""'age' = 'maxage','name' = 'name'"")","SELECT name
FROM
  (SELECT LHS.name AS name,
          LHS.age AS age,
          LHS.city AS city,
          LHS.gender AS gender,
          LHS.job AS job,
          RHS.age AS age_other,
          RHS.city AS city_other,
          RHS.gender AS gender_other,
          RHS.job AS job_other
   FROM df_person AS LHS
   INNER JOIN
     (SELECT name,
             age,
             city,
             gender,
             job,
             MAX(age) OVER () AS maxage
      FROM df_person) AS RHS ON (LHS.age = RHS.maxage
                                 AND LHS.name = RHS.name))
ORDER BY name;",2,8,3,0,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/network_2/0004,"summarise(input0, 'n_distinct = n_distinct(city)', ""'gender','name'""), summarise(line0, 'n = n()', '')","SELECT n AS count_distinct_city_
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT gender,
             name,
             COUNT(DISTINCT city) AS n_distinct
      FROM df_person
      GROUP BY gender,
               name))
ORDER BY count_distinct_city_;",2,7,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/network_2/0012,"summarise(input0, 'meanage = mean(age, na.rm = T)', ""'gender'"")","SELECT meanage AS avg_age_,
       gender
FROM
  (SELECT gender,
          AVG(age) AS meanage
   FROM df_person
   GROUP BY gender)
ORDER BY avg_age_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/network_2/0015,"summarise(input0, 'age = min(age)', ""'gender','job'"")","SELECT age AS min_age_,
       job
FROM
  (SELECT gender,
          job,
          MIN(age) AS age
   FROM df_person
   GROUP BY gender,
            job)
ORDER BY min_age_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/network_2/0005,"summarise(input0, 'n = n()', ""'age','job'""), mutate(line0, 'n_distinct = n_distinct(job)')","SELECT DISTINCT COUNT(DISTINCT job) OVER () AS count_distinct_job_
FROM
  (SELECT age,
          job,
          COUNT() AS n
   FROM df_person
   GROUP BY age,
            job)
ORDER BY count_distinct_job_;",2,7,2,2,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/network_2/0016,"filter(input0, 'age != 40L'), summarise(line0, 'n_distinct = n_distinct(age)', ""'gender','job'"")","SELECT DISTINCT n_distinct AS count___,
                gender
FROM
  (SELECT gender,
          job,
          COUNT(DISTINCT age) AS n_distinct
   FROM
     (SELECT *
      FROM df_person
      WHERE (age != 40))
   GROUP BY gender,
            job)
ORDER BY count___;",2,9,3,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/network_2/0018,"filter(input0, ""job == 'engineer'""), summarise(line0, 'n = n()', ""'job','name'""), mutate(line1, 'maxjob = max(job)')","SELECT `n` AS `count___`
FROM
  (SELECT `job`,
          `name`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_person`
      WHERE (`job` = 'engineer'))
   GROUP BY job,
            name)
ORDER BY count___;",3,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/network_2/0020,df_person,"SELECT name
FROM df_person
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/network_2/0019,df_person,"SELECT name,
       job
FROM df_person
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/network_2/0007,"filter(input0, ""job == 'student'""), mutate(line0, 'age = max(age)'), semi_join(line0, line1)","SELECT `name`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_person`
      WHERE (`job` = 'student')) AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT `name`,
                  MAX(`age`) OVER () AS `age`,
                                  `city`,
                                  `gender`,
                                  `job`
           FROM `df_person`
           WHERE (`job` = 'student')) AS RHS
        WHERE (LHS.name = RHS.name
               AND LHS.age = RHS.age
               AND LHS.city = RHS.city
               AND LHS.gender = RHS.gender
               AND LHS.job = RHS.job) ))
ORDER BY name;",3,16,5,0,5,0,4,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0
spider/network_2/0034,"left_join(input1, input0), summarise(line0, 'meanage = mean(age, na.rm = T)', ""'gender','name'""), inner_join(line1, line0, ""'name' = 'friend','gender' = 'gender'"")","SELECT name
FROM
  (SELECT LHS.gender AS gender,
          LHS.name AS name,
          LHS.meanage AS meanage,
          RHS.name AS name_other,
          RHS.year AS YEAR,
          RHS.age AS age,
          RHS.city AS city,
          RHS.job AS job
   FROM
     (SELECT gender,
             name,
             AVG(age) AS meanage
      FROM
        (SELECT LHS.name AS name,
                LHS.friend AS friend,
                LHS.year AS YEAR,
                RHS.age AS age,
                RHS.city AS city,
                RHS.gender AS gender,
                RHS.job AS job
         FROM df_personfriend AS LHS
         LEFT JOIN df_person AS RHS ON (LHS.name = RHS.name))
      GROUP BY gender,
               name) AS LHS
   INNER JOIN
     (SELECT LHS.name AS name,
             LHS.friend AS friend,
             LHS.year AS YEAR,
             RHS.age AS age,
             RHS.city AS city,
             RHS.gender AS gender,
             RHS.job AS job
      FROM df_personfriend AS LHS
      LEFT JOIN df_person AS RHS ON (LHS.name = RHS.name)) AS RHS ON (LHS.name = RHS.friend
                                                                      AND LHS.gender = RHS.gender))
ORDER BY name;",3,16,5,0,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0
spider/network_2/0021,"filter(input0, ""gender == 'male'"")","SELECT `name`
FROM `df_person`
WHERE (`gender` = 'male')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/network_2/0023,"filter(input1, ""friend != 'Dan' & friend == 'Alice'""), natural_join3(input0, input1, line0)","SELECT `name`,
       `age`
FROM
  (SELECT `LHS`.`name` AS `name`,
          `LHS`.`age` AS `age`,
          `LHS`.`city` AS `city`,
          `LHS`.`gender` AS `gender`,
          `LHS`.`job` AS `job`,
          `LHS`.`friend` AS `friend`,
          `LHS`.`year` AS `year`
   FROM
     (SELECT `LHS`.`name` AS `name`,
             `LHS`.`age` AS `age`,
             `LHS`.`city` AS `city`,
             `LHS`.`gender` AS `gender`,
             `LHS`.`job` AS `job`,
             `RHS`.`friend` AS `friend`,
             `RHS`.`year` AS `year`
      FROM `df_person` AS `LHS`
      INNER JOIN `df_personfriend` AS `RHS` ON (`LHS`.`name` = `RHS`.`name`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_personfriend`
      WHERE (`friend` != 'Dan'
             AND `friend` = 'Alice')) AS RHS ON (LHS.name = RHS.name
                                                 AND LHS.friend = RHS.friend
                                                 AND LHS.year = RHS.year))
ORDER BY name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/network_2/0001,"filter(input1, ""name == 'Dan' & friend != 'Dan'""), semi_join(line0, input0), summarise(line1, 'n_distinct = n_distinct(friend)', '')","SELECT `n_distinct` AS `count_t2_friend_`
FROM
  (SELECT COUNT(DISTINCT `friend`) AS `n_distinct`
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM `df_personfriend`
         WHERE (`name` = 'Dan'
                AND `friend` != 'Dan')) AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM df_person AS RHS
           WHERE (LHS.name = RHS.name) )))
ORDER BY count_t2_friend_;",3,15,5,1,5,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0
spider/network_2/0043,"inner_join(input0, input1, ""'name' = 'friend'""), filter(line0, ""name == 'Alice'"")","SELECT `name_other` AS `name`
FROM
  (SELECT `name`,
          `age`,
          `city`,
          `gender`,
          `job`,
          `name_other`,
          `year`,
          `name` AS `friend`
   FROM
     (SELECT `LHS`.`name` AS `name`,
             `LHS`.`age` AS `age`,
             `LHS`.`city` AS `city`,
             `LHS`.`gender` AS `gender`,
             `LHS`.`job` AS `job`,
             `RHS`.`name` AS `name_other`,
             `RHS`.`year` AS `year`
      FROM `df_person` AS `LHS`
      INNER JOIN `df_personfriend` AS `RHS` ON (`LHS`.`name` = `RHS`.`friend`)))
WHERE (`name` = 'Alice')
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/network_2/0014,"filter(input0, ""gender == 'male'""), summarise(line0, 'meanage = mean(age, na.rm = T)', ""'job','name'"")","SELECT `meanage` AS `avg_age_`,
       `job`
FROM
  (SELECT `job`,
          `name`,
          AVG(`age`) AS `meanage`
   FROM
     (SELECT *
      FROM `df_person`
      WHERE (`gender` = 'male'))
   GROUP BY job,
            name)
ORDER BY avg_age_;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/network_2/0009,"filter(input0, ""job == 'doctor' | name == 'Zach'"")","SELECT `age`
FROM `df_person`
WHERE (`job` = 'doctor'
       OR `name` = 'Zach')
ORDER BY age;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/network_2/0025,"filter(input0, 'age < 40L & age >= 30L'), natural_join3(input0, input1, line0)","SELECT name
FROM
  (SELECT LHS.name AS name,
          LHS.age AS age,
          LHS.city AS city,
          LHS.gender AS gender,
          LHS.job AS job,
          LHS.friend AS friend,
          LHS.year AS YEAR
   FROM
     (SELECT LHS.name AS name,
             LHS.age AS age,
             LHS.city AS city,
             LHS.gender AS gender,
             LHS.job AS job,
             RHS.friend AS friend,
             RHS.year AS YEAR
      FROM df_person AS LHS
      INNER JOIN df_personfriend AS RHS ON (LHS.name = RHS.name)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_person
      WHERE (age < 40
             AND age >= 30)) AS RHS ON (LHS.name = RHS.name
                                        AND LHS.age = RHS.age
                                        AND LHS.city = RHS.city
                                        AND LHS.gender = RHS.gender
                                        AND LHS.job = RHS.job))
ORDER BY name;",2,13,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/network_2/0011,"filter(input0, ""job == 'engineer' | age != 30L""), summarise(line0, 'n = n()', ""'city','job'"")","SELECT DISTINCT `n` AS `count___`
FROM
  (SELECT `city`,
          `job`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_person`
      WHERE (`job` = 'engineer'
             OR age != 30))
   GROUP BY city,
            job)
ORDER BY count___;",2,9,3,1,3,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/network_2/0029,"filter(input1, ""friend == 'Bob'""), natural_join(input0, line0)","SELECT `name`
FROM
  (SELECT `LHS`.`name` AS `name`,
          `LHS`.`age` AS `age`,
          `LHS`.`city` AS `city`,
          `LHS`.`gender` AS `gender`,
          `LHS`.`job` AS `job`,
          `RHS`.`friend` AS `friend`,
          `RHS`.`year` AS `year`
   FROM `df_person` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_personfriend`
      WHERE (`friend` = 'Bob')) AS RHS ON (LHS.name = RHS.name))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/network_2/0010,"filter(input0, 'age < 30L')","SELECT name
FROM df_person
WHERE (age < 30)
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/network_2/0040,"anti_join(input0, input1, '')","SELECT name
FROM
  (SELECT *
   FROM df_person AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_personfriend AS RHS
        WHERE (LHS.name = RHS.name) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/network_2/0028,"filter(input0, ""name == 'Bob'""), natural_join(input1, line0)","SELECT `friend`
FROM
  (SELECT `LHS`.`name` AS `name`,
          `LHS`.`friend` AS `friend`,
          `LHS`.`year` AS `year`,
          `RHS`.`age` AS `age`,
          `RHS`.`city` AS `city`,
          `RHS`.`gender` AS `gender`,
          `RHS`.`job` AS `job`
   FROM `df_personfriend` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_person`
      WHERE (`name` = 'Bob')) AS RHS ON (LHS.name = RHS.name))
ORDER BY friend;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/mountain_photos/0002,df_camera_lens,"SELECT brand,
       name
FROM df_camera_lens
ORDER BY brand;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/mountain_photos/0017,"summarise(input0, 'n = n()', ""'id','name'""), summarise(input1, 'n = n()', ""'camera_lens_id'""), inner_join(line0, line1, ""'id' = 'camera_lens_id'"")","SELECT name,
       n_other AS count___
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.n AS n,
          RHS.n AS n_other
   FROM
     (SELECT id,
             name,
             COUNT() AS n
      FROM df_camera_lens
      GROUP BY id,
               name) AS LHS
   INNER JOIN
     (SELECT camera_lens_id,
             COUNT() AS n
      FROM df_photos
      GROUP BY camera_lens_id) AS RHS ON (LHS.id = RHS.camera_lens_id))
ORDER BY name;",3,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0
spider/mountain_photos/0008,"inner_join(input0, input1, ""'id' = 'mountain_id'""), summarise(line0, 'n = n()', ""'id','name'""), filter(line1, 'n >= 2L')","SELECT id,
       name
FROM
  (SELECT id,
          name,
          COUNT() AS n
   FROM
     (SELECT id,
             name,
             height,
             prominence,
             RANGE,
             country,
             id_other,
             camera_lens_id,
             color,
             name_other,
             id AS mountain_id
      FROM
        (SELECT LHS.id AS id,
                LHS.name AS name,
                LHS.height AS height,
                LHS.prominence AS prominence,
                LHS.range AS RANGE,
                LHS.country AS country,
                RHS.id AS id_other,
                RHS.camera_lens_id AS camera_lens_id,
                RHS.color AS color,
                RHS.name AS name_other
         FROM df_mountain AS LHS
         INNER JOIN df_photos AS RHS ON (LHS.id = RHS.mountain_id)))
   GROUP BY id,
            name)
WHERE (n >= 2)
ORDER BY id;",3,12,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/mountain_photos/0003,df_photos,"SELECT id,
       color,
       name
FROM df_photos
ORDER BY id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/mountain_photos/0013,"filter(input0, ""country == 'Ethiopia'""), summarise(line0, 'n = n()', ""'id','prominence'""), left_join(line1, input1)","SELECT DISTINCT `n` AS `count_distinct_t2_camera_lens_id_`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`prominence` AS `prominence`,
          `LHS`.`n` AS `n`,
          `RHS`.`camera_lens_id` AS `camera_lens_id`,
          `RHS`.`mountain_id` AS `mountain_id`,
          `RHS`.`color` AS `color`,
          `RHS`.`name` AS `name`
   FROM
     (SELECT `id`,
             `prominence`,
             COUNT() AS `n`
      FROM `df_mountain`
      WHERE (`country` = 'Ethiopia')
      GROUP BY id,
               prominence) AS LHS
   LEFT JOIN df_photos AS RHS ON (LHS.id = RHS.id))
ORDER BY count_distinct_t2_camera_lens_id_;",3,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/mountain_photos/0004,"mutate(input0, 'maxheight = max(height)'), mutate(line0, 'meanheight = mean(height, na.rm = T)')","SELECT DISTINCT maxheight AS max_height_,
                AVG(height) OVER () AS avg_height_
FROM
  (SELECT id,
          name,
          height,
          prominence,
          RANGE,
          country,
          MAX(height) OVER () AS maxheight
   FROM df_mountain)
ORDER BY max_height_;",2,8,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/mountain_photos/0012,"left_join(input0, input1), intersect(line0, input0, 'max_aperture'), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT max_aperture
   FROM
     (SELECT LHS.id AS id,
             LHS.brand AS brand,
             LHS.name AS name,
             LHS.focal_length_mm AS focal_length_mm,
             LHS.max_aperture AS max_aperture,
             RHS.camera_lens_id AS camera_lens_id,
             RHS.mountain_id AS mountain_id,
             RHS.color AS color
      FROM df_camera_lens AS LHS
      LEFT JOIN df_photos AS RHS ON (LHS.id = RHS.id
                                     AND LHS.name = RHS.name)) INTERSECT SELECT max_aperture
   FROM df_camera_lens)
ORDER BY count___;",3,12,4,1,4,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0
spider/mountain_photos/0005,"filter(input0, ""country == 'Morocco'""), summarise(line0, 'meanprominence = mean(prominence, na.rm = T)', '')","SELECT `meanprominence` AS `avg_prominence_`
FROM
  (SELECT AVG(`prominence`) AS `meanprominence`
   FROM
     (SELECT *
      FROM `df_mountain`
      WHERE (`country` = 'Morocco')))
ORDER BY avg_prominence_;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/mountain_photos/0007,"inner_join(input0, input1, ""'id' = 'mountain_id'""), filter(line0, 'height > 4000')","SELECT id,
       name
FROM
  (SELECT id,
          name,
          height,
          prominence,
          RANGE,
          country,
          id_other,
          camera_lens_id,
          color,
          name_other,
          id AS mountain_id
   FROM
     (SELECT LHS.id AS id,
             LHS.name AS name,
             LHS.height AS height,
             LHS.prominence AS prominence,
             LHS.range AS RANGE,
             LHS.country AS country,
             RHS.id AS id_other,
             RHS.camera_lens_id AS camera_lens_id,
             RHS.color AS color,
             RHS.name AS name_other
      FROM df_mountain AS LHS
      INNER JOIN df_photos AS RHS ON (LHS.id = RHS.mountain_id)))
WHERE (height > 4000.0)
ORDER BY id;",2,10,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/mountain_photos/0001,"filter(input0, 'focal_length_mm > 15'), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT *
      FROM df_camera_lens
      WHERE (focal_length_mm > 15.0)))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/mountain_photos/0014,"filter(input0, ""range == 'Toubkal Atlas' & range == 'Lasta Massif'""), anti_join(input1, input2, ""'id'""), left_join(line1, line0)","SELECT `brand`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`brand` AS `brand`,
          `LHS`.`name` AS `name`,
          `LHS`.`focal_length_mm` AS `focal_length_mm`,
          `LHS`.`max_aperture` AS `max_aperture`,
          `RHS`.`height` AS `height`,
          `RHS`.`prominence` AS `prominence`,
          `RHS`.`range` AS `range`,
          `RHS`.`country` AS `country`
   FROM
     (SELECT *
      FROM `df_camera_lens` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM `df_photos` AS `RHS`
           WHERE (`LHS`.`id` = `RHS`.`id`) )) AS `LHS`
   LEFT JOIN
     (SELECT *
      FROM `df_mountain`
      WHERE (`range` = 'Toubkal Atlas'
             AND `range` = 'Lasta Massif')) AS RHS ON (LHS.id = RHS.id
                                                       AND LHS.name = RHS.name))
ORDER BY brand;",3,16,5,0,5,1,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0
spider/mountain_photos/0009,"summarise(input1, 'n = n()', ''), inner_join(input0, line0, ""'id' = 'n'"")","SELECT name
FROM
  (SELECT LHS.id AS id,
          LHS.brand AS brand,
          LHS.name AS name,
          LHS.focal_length_mm AS focal_length_mm,
          LHS.max_aperture AS max_aperture
   FROM df_camera_lens AS LHS
   INNER JOIN
     (SELECT COUNT() AS n
      FROM df_photos) AS RHS ON (LHS.id = RHS.n))
ORDER BY name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/mountain_photos/0011,"summarise(input0, 'n_distinct = n_distinct(brand)', ""'brand'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count_distinct_brand_
FROM
  (SELECT brand,
          COUNT(DISTINCT brand) AS n_distinct
   FROM df_camera_lens
   GROUP BY brand)
ORDER BY count_distinct_brand_;",2,7,2,2,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/mountain_photos/0010,"inner_join(input0, input1, ""'id' = 'camera_lens_id'""), filter(line0, ""brand == 'Sigma' | brand == 'Olympus'"")","SELECT `name`
FROM
  (SELECT `id`,
          `brand`,
          `name`,
          `focal_length_mm`,
          `max_aperture`,
          `id_other`,
          `mountain_id`,
          `color`,
          `name_other`,
          `id` AS `camera_lens_id`
   FROM
     (SELECT `LHS`.`id` AS `id`,
             `LHS`.`brand` AS `brand`,
             `LHS`.`name` AS `name`,
             `LHS`.`focal_length_mm` AS `focal_length_mm`,
             `LHS`.`max_aperture` AS `max_aperture`,
             `RHS`.`id` AS `id_other`,
             `RHS`.`mountain_id` AS `mountain_id`,
             `RHS`.`color` AS `color`,
             `RHS`.`name` AS `name_other`
      FROM `df_camera_lens` AS `LHS`
      INNER JOIN `df_photos` AS `RHS` ON (`LHS`.`id` = `RHS`.`camera_lens_id`)))
WHERE (`brand` = 'Sigma'
       OR `brand` = 'Olympus')
ORDER BY name;",2,9,3,0,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/company_employee/0002,df_company,"SELECT name
FROM df_company
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/company_employee/0008,"summarise(input0, 'n = n()', ""'headquarters','industry'""), limit(line0, 'desc(industry)')","SELECT headquarters
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT headquarters,
                industry,
                COUNT() AS n
         FROM df_company
         GROUP BY headquarters,
                  industry)
      ORDER BY industry DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/company_employee/0003,df_company,"SELECT headquarters,
       industry
FROM df_company
ORDER BY headquarters;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/company_employee/0013,"filter(input1, 'sales_in_billion >= 200'), semi_join(input2, line0), semi_join(input0, line1)","SELECT name
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_employment AS LHS
           WHERE EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM df_company
                   WHERE (sales_in_billion >= 200.0)) AS RHS
                WHERE (LHS.company_id = RHS.company_id) )) AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY name;",3,19,6,0,6,0,5,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,0,0,0
spider/company_employee/0006,"limit(input0, 'desc(sales_in_billion)')","SELECT headquarters
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_company
      ORDER BY sales_in_billion DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/company_employee/0004,"filter(input0, ""industry == 'Banking' | industry == 'Retailing'"")","SELECT `name`
FROM `df_company`
WHERE (`industry` = 'Banking'
       OR `industry` = 'Retailing')
ORDER BY name;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/company_employee/0012,"left_join(input1, input2), inner_join(line0, input0, ""'people_id'"")","SELECT name AS name___1,
       name_other AS name___2
FROM
  (SELECT LHS.company_id AS company_id,
          LHS.name AS name,
          LHS.headquarters AS headquarters,
          LHS.industry AS industry,
          LHS.sales_in_billion AS sales_in_billion,
          LHS.profits_in_billion AS profits_in_billion,
          LHS.assets_in_billion AS assets_in_billion,
          LHS.market_value_in_billion AS market_value_in_billion,
          LHS.people_id AS people_id,
          LHS.year_working AS year_working,
          RHS.age AS age,
          RHS.name AS name_other,
          RHS.nationality AS nationality,
          RHS.graduation_college AS graduation_college
   FROM
     (SELECT LHS.company_id AS company_id,
             LHS.name AS name,
             LHS.headquarters AS headquarters,
             LHS.industry AS industry,
             LHS.sales_in_billion AS sales_in_billion,
             LHS.profits_in_billion AS profits_in_billion,
             LHS.assets_in_billion AS assets_in_billion,
             LHS.market_value_in_billion AS market_value_in_billion,
             RHS.people_id AS people_id,
             RHS.year_working AS year_working
      FROM df_company AS LHS
      LEFT JOIN df_employment AS RHS ON (LHS.company_id = RHS.company_id)) AS LHS
   INNER JOIN df_people AS RHS ON (LHS.people_id = RHS.people_id))
ORDER BY name___1;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
spider/company_employee/0015,"anti_join(input0, input1, '')","SELECT name
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_employment AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/company_employee/0005,"mutate(input0, 'maxmarket_value_in_billion = max(market_value_in_billion)'), mutate(line0, 'minmarket_value_in_billion = min(market_value_in_billion)')","SELECT DISTINCT maxmarket_value_in_billion AS max_market_value_in_billion_,
                MIN(market_value_in_billion) OVER () AS min_market_value_in_billion_
FROM
  (SELECT company_id,
          name,
          headquarters,
          industry,
          sales_in_billion,
          profits_in_billion,
          assets_in_billion,
          market_value_in_billion,
          MAX(market_value_in_billion) OVER () AS maxmarket_value_in_billion
   FROM df_company)
ORDER BY max_market_value_in_billion_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/company_employee/0016,"filter(input0, 'sales_in_billion > 200'), natural_join(input0, line0)","SELECT name
FROM
  (SELECT LHS.company_id AS company_id,
          LHS.name AS name,
          LHS.headquarters AS headquarters,
          LHS.industry AS industry,
          LHS.sales_in_billion AS sales_in_billion,
          LHS.profits_in_billion AS profits_in_billion,
          LHS.assets_in_billion AS assets_in_billion,
          LHS.market_value_in_billion AS market_value_in_billion
   FROM df_company AS LHS
   INNER JOIN
     (SELECT *
      FROM df_company
      WHERE (sales_in_billion > 200.0)) AS RHS ON (LHS.company_id = RHS.company_id
                                                   AND LHS.name = RHS.name
                                                   AND LHS.headquarters = RHS.headquarters
                                                   AND LHS.industry = RHS.industry
                                                   AND LHS.sales_in_billion = RHS.sales_in_billion
                                                   AND LHS.profits_in_billion = RHS.profits_in_billion
                                                   AND LHS.assets_in_billion = RHS.assets_in_billion
                                                   AND LHS.market_value_in_billion = RHS.market_value_in_billion))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/company_employee/0007,"summarise(input0, 'n = n()', ""'headquarters'"")","SELECT headquarters,
       n AS count___
FROM
  (SELECT headquarters,
          COUNT() AS n
   FROM df_company
   GROUP BY headquarters)
ORDER BY headquarters;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/company_employee/0001,"mutate(input0, 'n_distinct = n_distinct(headquarters)'), filter(line0, ""headquarters != 'USA'"")","SELECT DISTINCT `n_distinct` AS `count___`
FROM
  (SELECT `company_id`,
          `name`,
          `headquarters`,
          `industry`,
          `sales_in_billion`,
          `profits_in_billion`,
          `assets_in_billion`,
          `market_value_in_billion`,
          COUNT(DISTINCT `headquarters`) OVER () AS `n_distinct`
   FROM `df_company`)
WHERE (`headquarters` != 'USA')
ORDER BY count___;",2,8,2,2,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/company_employee/0014,"summarise(input0, 'n = n()', ""'age','people_id'""), natural_join3(input1, input2, line0)","SELECT name,
       n AS count___
FROM
  (SELECT LHS.company_id AS company_id,
          LHS.name AS name,
          LHS.headquarters AS headquarters,
          LHS.industry AS industry,
          LHS.sales_in_billion AS sales_in_billion,
          LHS.profits_in_billion AS profits_in_billion,
          LHS.assets_in_billion AS assets_in_billion,
          LHS.market_value_in_billion AS market_value_in_billion,
          LHS.people_id AS people_id,
          LHS.year_working AS year_working,
          RHS.age AS age,
          RHS.n AS n
   FROM
     (SELECT LHS.company_id AS company_id,
             LHS.name AS name,
             LHS.headquarters AS headquarters,
             LHS.industry AS industry,
             LHS.sales_in_billion AS sales_in_billion,
             LHS.profits_in_billion AS profits_in_billion,
             LHS.assets_in_billion AS assets_in_billion,
             LHS.market_value_in_billion AS market_value_in_billion,
             RHS.people_id AS people_id,
             RHS.year_working AS year_working
      FROM df_company AS LHS
      INNER JOIN df_employment AS RHS ON (LHS.company_id = RHS.company_id)) AS LHS
   INNER JOIN
     (SELECT age,
             people_id,
             COUNT() AS n
      FROM df_people
      GROUP BY age,
               people_id) AS RHS ON (LHS.people_id = RHS.people_id))
ORDER BY name;",2,10,4,0,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
spider/company_employee/0009,"summarise(input0, 'n = n()', ""'headquarters'""), filter(line0, 'n < 2L'), cross_join(line0, line1, 'n != n.other')","SELECT DISTINCT headquarters
FROM
  (SELECT LHS.headquarters AS headquarters,
          LHS.n AS n,
          RHS.headquarters AS headquarters_other,
          RHS.n AS n_other
   FROM
     (SELECT headquarters,
             COUNT() AS n
      FROM df_company
      GROUP BY headquarters) AS LHS
   CROSS JOIN
     (SELECT *
      FROM
        (SELECT headquarters,
                COUNT() AS n
         FROM df_company
         GROUP BY headquarters)
      WHERE (n < 2)) AS RHS)
WHERE (n != n_other)
ORDER BY headquarters;",3,13,5,1,5,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0
spider/company_employee/0011,"left_join(input1, input2), inner_join(line0, input0, ""'people_id'"")","SELECT name AS name___1,
       name_other AS name___2
FROM
  (SELECT LHS.company_id AS company_id,
          LHS.name AS name,
          LHS.headquarters AS headquarters,
          LHS.industry AS industry,
          LHS.sales_in_billion AS sales_in_billion,
          LHS.profits_in_billion AS profits_in_billion,
          LHS.assets_in_billion AS assets_in_billion,
          LHS.market_value_in_billion AS market_value_in_billion,
          LHS.people_id AS people_id,
          LHS.year_working AS year_working,
          RHS.age AS age,
          RHS.name AS name_other,
          RHS.nationality AS nationality,
          RHS.graduation_college AS graduation_college
   FROM
     (SELECT LHS.company_id AS company_id,
             LHS.name AS name,
             LHS.headquarters AS headquarters,
             LHS.industry AS industry,
             LHS.sales_in_billion AS sales_in_billion,
             LHS.profits_in_billion AS profits_in_billion,
             LHS.assets_in_billion AS assets_in_billion,
             LHS.market_value_in_billion AS market_value_in_billion,
             RHS.people_id AS people_id,
             RHS.year_working AS year_working
      FROM df_company AS LHS
      LEFT JOIN df_employment AS RHS ON (LHS.company_id = RHS.company_id)) AS LHS
   INNER JOIN df_people AS RHS ON (LHS.people_id = RHS.people_id))
ORDER BY name___1;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
spider/company_employee/0010,"filter(input0, ""industry != 'Banking' | industry != 'Oil and gas'""), filter(line0, ""industry == 'Banking'"")","SELECT DISTINCT `headquarters`
FROM
  (SELECT *
   FROM `df_company`
   WHERE (`industry` != 'Banking'
          OR `industry` != 'Oil and gas'))
WHERE (`industry` = 'Banking')
ORDER BY headquarters;",2,8,2,1,2,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/roller_coaster/0002,df_roller_coaster,"SELECT name
FROM df_roller_coaster
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/roller_coaster/0017,"filter(input0, 'speed == 55L'), intersect(line0, line0, 'country_id'), inner_join(input1, line1, ""'country_id'"")","SELECT name,
       area,
       population
FROM
  (SELECT LHS.country_id AS country_id,
          LHS.name AS name,
          LHS.population AS population,
          LHS.area AS area,
          LHS.languages AS languages
   FROM df_country AS LHS
   INNER JOIN
     (SELECT country_id
      FROM df_roller_coaster
      WHERE (speed = 55) INTERSECT
        SELECT country_id
        FROM df_roller_coaster WHERE (speed = 55)) AS RHS ON (LHS.country_id = RHS.country_id))
ORDER BY name;",3,12,4,0,4,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0
spider/roller_coaster/0008,"summarise(input0, 'n = n()', ""'status'"")","SELECT status,
       n AS count___
FROM
  (SELECT status,
          COUNT() AS n
   FROM df_roller_coaster
   GROUP BY status)
ORDER BY status;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/roller_coaster/0003,df_roller_coaster,"SELECT LENGTH,
       height
FROM df_roller_coaster
ORDER BY LENGTH;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/roller_coaster/0013,"summarise(input0, 'n = n()', ""'country_id'""), filter(line0, 'n <= 1L'), anti_join(input1, line1, '')","SELECT name
FROM
  (SELECT *
   FROM df_country AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT country_id,
                     COUNT() AS n
              FROM df_roller_coaster
              GROUP BY country_id)
           WHERE (n <= 1)) AS RHS
        WHERE (LHS.country_id = RHS.country_id) ))
ORDER BY name;",3,15,5,0,5,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0
spider/roller_coaster/0006,"limit(input0, 'desc(length)')","SELECT speed
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_roller_coaster
      ORDER BY LENGTH DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/roller_coaster/0004,"filter(input0, ""languages != 'German'"")","SELECT `name`
FROM `df_country`
WHERE (`languages` != 'German')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/roller_coaster/0012,"inner_join(input1, input0, ""'country_id'"")","SELECT name_other AS name___1,
       name AS name___2
FROM
  (SELECT LHS.country_id AS country_id,
          LHS.name AS name,
          LHS.population AS population,
          LHS.area AS area,
          LHS.languages AS languages,
          RHS.roller_coaster_id AS roller_coaster_id,
          RHS.name AS name_other,
          RHS.park AS park,
          RHS.length AS LENGTH,
          RHS.height AS height,
          RHS.speed AS speed,
          RHS.opened AS opened,
          RHS.status AS status
   FROM df_country AS LHS
   INNER JOIN df_roller_coaster AS RHS ON (LHS.country_id = RHS.country_id))
ORDER BY name___1;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/roller_coaster/0005,"filter(input0, 'height <= 3300 & height > 100')","SELECT status
FROM df_roller_coaster
WHERE (height <= 3300.0
       AND height > 100.0)
ORDER BY status;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/roller_coaster/0016,"filter(input0, 'country_id > 3000L & length > country_id'), summarise(input1, 'n_distinct = n_distinct(country_id)', ""'languages','name'""), left_join(line1, line0)","SELECT DISTINCT n_distinct AS count___
FROM
  (SELECT LHS.languages AS languages,
          LHS.name AS name,
          LHS.n_distinct AS n_distinct,
          RHS.roller_coaster_id AS roller_coaster_id,
          RHS.park AS park,
          RHS.country_id AS country_id,
          RHS.length AS LENGTH,
          RHS.height AS height,
          RHS.speed AS speed,
          RHS.opened AS opened,
          RHS.status AS status
   FROM
     (SELECT languages,
             name,
             COUNT(DISTINCT country_id) AS n_distinct
      FROM df_country
      GROUP BY languages,
               name) AS LHS
   LEFT JOIN
     (SELECT *
      FROM df_roller_coaster
      WHERE (country_id > 3000
             AND LENGTH > country_id)) AS RHS ON (LHS.name = RHS.name))
ORDER BY count___;",3,12,4,2,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/roller_coaster/0001,"summarise(input0, 'n = n()', ""'status'"")","SELECT n AS count___
FROM
  (SELECT status,
          COUNT() AS n
   FROM df_roller_coaster
   GROUP BY status)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/roller_coaster/0014,"anti_join(input1, input0, ""'name'""), limit(line0, 'desc(languages)')","SELECT name,
       population
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM df_country AS LHS
         WHERE NOT EXISTS
             (SELECT 1
              FROM df_roller_coaster AS RHS
              WHERE (LHS.name = RHS.name) ))
      ORDER BY languages DESC)
   LIMIT 1);",1,16,5,0,5,0,2,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/roller_coaster/0009,"summarise(input0, 'n = n()', ""'roller_coaster_id','status'""), limit(line0, 'desc(status)')","SELECT status
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT roller_coaster_id,
                status,
                COUNT() AS n
         FROM df_roller_coaster
         GROUP BY roller_coaster_id,
                  status)
      ORDER BY status DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/roller_coaster/0011,"limit(input0, 'desc(speed)')","SELECT park
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_roller_coaster
      ORDER BY speed DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/roller_coaster/0010,"summarise(input0, 'n = n()', ""'country_id','status'""), filter(line0, 'n <= 2L')","SELECT DISTINCT status
FROM
  (SELECT country_id,
          status,
          COUNT() AS n
   FROM df_roller_coaster
   GROUP BY country_id,
            status)
WHERE (n <= 2)
ORDER BY status;",2,6,2,1,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_software_problems/0002,"limit(input0, 'assigned_to_staff_id')","SELECT problem_log_id,
       problem_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_problem_log
      ORDER BY assigned_to_staff_id)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_software_problems/0017,"inner_join(input0, input1, ""'staff_id' = 'reported_by_staff_id'""), filter(line0, ""staff_first_name == 'Dameon' | staff_last_name == 'Weber'""), filter(line1, ""staff_last_name == 'Frami' | staff_first_name == 'Jolie'"")","SELECT `product_id`
FROM
  (SELECT *
   FROM
     (SELECT `staff_id`,
             `staff_first_name`,
             `staff_last_name`,
             `other_staff_details`,
             `problem_id`,
             `product_id`,
             `closure_authorised_by_staff_id`,
             `date_problem_reported`,
             `date_problem_closed`,
             `problem_description`,
             `other_problem_details`,
             `staff_id` AS `reported_by_staff_id`
      FROM
        (SELECT `LHS`.`staff_id` AS `staff_id`,
                `LHS`.`staff_first_name` AS `staff_first_name`,
                `LHS`.`staff_last_name` AS `staff_last_name`,
                `LHS`.`other_staff_details` AS `other_staff_details`,
                `RHS`.`problem_id` AS `problem_id`,
                `RHS`.`product_id` AS `product_id`,
                `RHS`.`closure_authorised_by_staff_id` AS `closure_authorised_by_staff_id`,
                `RHS`.`date_problem_reported` AS `date_problem_reported`,
                `RHS`.`date_problem_closed` AS `date_problem_closed`,
                `RHS`.`problem_description` AS `problem_description`,
                `RHS`.`other_problem_details` AS `other_problem_details`
         FROM `df_staff` AS `LHS`
         INNER JOIN `df_problems` AS `RHS` ON (`LHS`.`staff_id` = `RHS`.`reported_by_staff_id`)))
   WHERE (`staff_first_name` = 'Dameon'
          OR `staff_last_name` = 'Weber'))
WHERE (`staff_last_name` = 'Frami'
       OR `staff_first_name` = 'Jolie')
ORDER BY product_id;",3,13,4,0,4,1,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0
spider/tracking_software_problems/0008,"left_join(input0, input1), mutate(line0, 'n = n()'), inner_join(line0, line1, ""'problem_id' = 'closure_authorised_by_staff_id','product_name' = 'product_name'"")","SELECT reported_by_staff_id AS count___,
       product_name
FROM
  (SELECT LHS.product_id AS product_id,
          LHS.product_name AS product_name,
          LHS.product_details AS product_details,
          LHS.problem_id AS problem_id,
          LHS.closure_authorised_by_staff_id AS closure_authorised_by_staff_id,
          LHS.reported_by_staff_id AS reported_by_staff_id,
          LHS.date_problem_reported AS date_problem_reported,
          LHS.date_problem_closed AS date_problem_closed,
          LHS.problem_description AS problem_description,
          LHS.other_problem_details AS other_problem_details,
          RHS.product_id AS product_id_other,
          RHS.product_details AS product_details_other,
          RHS.problem_id AS problem_id_other,
          RHS.reported_by_staff_id AS reported_by_staff_id_other,
          RHS.date_problem_reported AS date_problem_reported_other,
          RHS.date_problem_closed AS date_problem_closed_other,
          RHS.problem_description AS problem_description_other,
          RHS.other_problem_details AS other_problem_details_other,
          RHS.n AS n
   FROM
     (SELECT LHS.product_id AS product_id,
             LHS.product_name AS product_name,
             LHS.product_details AS product_details,
             RHS.problem_id AS problem_id,
             RHS.closure_authorised_by_staff_id AS closure_authorised_by_staff_id,
             RHS.reported_by_staff_id AS reported_by_staff_id,
             RHS.date_problem_reported AS date_problem_reported,
             RHS.date_problem_closed AS date_problem_closed,
             RHS.problem_description AS problem_description,
             RHS.other_problem_details AS other_problem_details
      FROM df_product AS LHS
      LEFT JOIN df_problems AS RHS ON (LHS.product_id = RHS.product_id)) AS LHS
   INNER JOIN
     (SELECT product_id,
             product_name,
             product_details,
             problem_id,
             closure_authorised_by_staff_id,
             reported_by_staff_id,
             date_problem_reported,
             date_problem_closed,
             problem_description,
             other_problem_details,
             COUNT(*) OVER () AS n
      FROM
        (SELECT LHS.product_id AS product_id,
                LHS.product_name AS product_name,
                LHS.product_details AS product_details,
                RHS.problem_id AS problem_id,
                RHS.closure_authorised_by_staff_id AS closure_authorised_by_staff_id,
                RHS.reported_by_staff_id AS reported_by_staff_id,
                RHS.date_problem_reported AS date_problem_reported,
                RHS.date_problem_closed AS date_problem_closed,
                RHS.problem_description AS problem_description,
                RHS.other_problem_details AS other_problem_details
         FROM df_product AS LHS
         LEFT JOIN df_problems AS RHS ON (LHS.product_id = RHS.product_id))) AS RHS ON (LHS.problem_id = RHS.closure_authorised_by_staff_id
                                                                                        AND LHS.product_name = RHS.product_name))
ORDER BY count___;",3,14,5,0,5,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0
spider/tracking_software_problems/0003,"filter(input0, 'problem_id <= 10L'), filter(line0, 'problem_id == 10L')","SELECT problem_log_id,
       log_entry_date
FROM
  (SELECT *
   FROM df_problem_log
   WHERE (problem_id <= 10))
WHERE (problem_id = 10)
ORDER BY problem_log_id;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/tracking_software_problems/0013,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'product_details','product_id'"")","SELECT n AS count___,
       product_id
FROM
  (SELECT product_details,
          product_id,
          COUNT() AS n
   FROM
     (SELECT LHS.product_id AS product_id,
             LHS.product_name AS product_name,
             LHS.product_details AS product_details,
             RHS.problem_id AS problem_id,
             RHS.closure_authorised_by_staff_id AS closure_authorised_by_staff_id,
             RHS.reported_by_staff_id AS reported_by_staff_id,
             RHS.date_problem_reported AS date_problem_reported,
             RHS.date_problem_closed AS date_problem_closed,
             RHS.problem_description AS problem_description,
             RHS.other_problem_details AS other_problem_details
      FROM df_product AS LHS
      INNER JOIN df_problems AS RHS ON (LHS.product_id = RHS.product_id))
   GROUP BY product_details,
            product_id)
ORDER BY count___;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_software_problems/0006,"filter(input1, ""staff_first_name == 'Rylan' | staff_last_name == 'Homenick'""), intersect(input1, line0, 'staff_id'), inner_join(input0, line1, ""'assigned_to_staff_id' = 'staff_id'"")","SELECT `problem_id`,
       `problem_log_id`
FROM
  (SELECT `LHS`.`problem_log_id` AS `problem_log_id`,
          `LHS`.`assigned_to_staff_id` AS `assigned_to_staff_id`,
          `LHS`.`problem_id` AS `problem_id`,
          `LHS`.`problem_category_code` AS `problem_category_code`,
          `LHS`.`problem_status_code` AS `problem_status_code`,
          `LHS`.`log_entry_date` AS `log_entry_date`,
          `LHS`.`log_entry_description` AS `log_entry_description`,
          `LHS`.`log_entry_fix` AS `log_entry_fix`,
          `LHS`.`other_log_details` AS `other_log_details`
   FROM `df_problem_log` AS `LHS`
   INNER JOIN
     (SELECT `staff_id`
      FROM `df_staff` INTERSECT SELECT `staff_id`
      FROM `df_staff`
      WHERE (`staff_first_name` = 'Rylan'
             OR `staff_last_name` = 'Homenick')) AS RHS ON (LHS.assigned_to_staff_id = RHS.staff_id))
ORDER BY problem_id;",3,12,4,0,4,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0
spider/tracking_software_problems/0004,df_problem_log,"SELECT problem_log_id,
       log_entry_description
FROM df_problem_log
ORDER BY problem_log_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_software_problems/0012,"filter(input0, ""date_problem_reported <= parse_datetime('1978-06-26')""), semi_join(input0, line0)","SELECT `problem_id`
FROM
  (SELECT *
   FROM `df_problems` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_problems`
           WHERE (`date_problem_reported` <= parse_datetime('1978-06-26'))) AS RHS
        WHERE (LHS.problem_id = RHS.problem_id
               AND LHS.product_id = RHS.product_id
               AND LHS.closure_authorised_by_staff_id = RHS.closure_authorised_by_staff_id
               AND LHS.reported_by_staff_id = RHS.reported_by_staff_id
               AND LHS.date_problem_reported = RHS.date_problem_reported
               AND LHS.date_problem_closed = RHS.date_problem_closed
               AND LHS.problem_description = RHS.problem_description
               AND LHS.other_problem_details = RHS.other_problem_details) ))
ORDER BY problem_id;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/tracking_software_problems/0015,df_product,"SELECT product_name
FROM df_product
ORDER BY product_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_software_problems/0005,"filter(input0, 'problem_id <= 1L'), intersect(input0, line0, 'assigned_to_staff_id'), inner_join(line1, input1, ""'assigned_to_staff_id' = 'staff_id'"")","SELECT staff_first_name,
       staff_last_name
FROM
  (SELECT LHS.assigned_to_staff_id AS assigned_to_staff_id,
          RHS.staff_first_name AS staff_first_name,
          RHS.staff_last_name AS staff_last_name,
          RHS.other_staff_details AS other_staff_details
   FROM
     (SELECT assigned_to_staff_id
      FROM df_problem_log INTERSECT SELECT assigned_to_staff_id
      FROM df_problem_log
      WHERE (problem_id <= 1)) AS LHS
   INNER JOIN df_staff AS RHS ON (LHS.assigned_to_staff_id = RHS.staff_id))
ORDER BY staff_first_name;",3,11,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0
spider/tracking_software_problems/0016,df_product,"SELECT product_name
FROM df_product
ORDER BY product_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_software_problems/0018,"inner_join(input1, input0, ""'closure_authorised_by_staff_id' = 'staff_id','problem_description' = 'other_staff_details'""), filter(line0, ""staff_first_name != 'Christop' & staff_last_name != 'Berge'""), filter(line1, ""staff_first_name == 'Ashley' | staff_last_name == 'Medhurst'"")","SELECT `product_id`
FROM
  (SELECT *
   FROM
     (SELECT `problem_id`,
             `product_id`,
             `closure_authorised_by_staff_id`,
             `reported_by_staff_id`,
             `date_problem_reported`,
             `date_problem_closed`,
             `problem_description`,
             `other_problem_details`,
             `staff_first_name`,
             `staff_last_name`,
             `staff_id`,
             `problem_description` AS `other_staff_details`
      FROM
        (SELECT `problem_id`,
                `product_id`,
                `closure_authorised_by_staff_id`,
                `reported_by_staff_id`,
                `date_problem_reported`,
                `date_problem_closed`,
                `problem_description`,
                `other_problem_details`,
                `staff_first_name`,
                `staff_last_name`,
                `closure_authorised_by_staff_id` AS `staff_id`
         FROM
           (SELECT `LHS`.`problem_id` AS `problem_id`,
                   `LHS`.`product_id` AS `product_id`,
                   `LHS`.`closure_authorised_by_staff_id` AS `closure_authorised_by_staff_id`,
                   `LHS`.`reported_by_staff_id` AS `reported_by_staff_id`,
                   `LHS`.`date_problem_reported` AS `date_problem_reported`,
                   `LHS`.`date_problem_closed` AS `date_problem_closed`,
                   `LHS`.`problem_description` AS `problem_description`,
                   `LHS`.`other_problem_details` AS `other_problem_details`,
                   `RHS`.`staff_first_name` AS `staff_first_name`,
                   `RHS`.`staff_last_name` AS `staff_last_name`
            FROM `df_problems` AS `LHS`
            INNER JOIN `df_staff` AS `RHS` ON (`LHS`.`closure_authorised_by_staff_id` = `RHS`.`staff_id`
                                               AND `LHS`.`problem_description` = `RHS`.`other_staff_details`))))
   WHERE (`staff_first_name` != 'Christop'
          AND `staff_last_name` != 'Berge'))
WHERE (`staff_first_name` = 'Ashley'
       OR `staff_last_name` = 'Medhurst')
ORDER BY product_id;",3,14,5,0,5,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0
spider/tracking_software_problems/0007,"anti_join(input1, input0, ''), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT *
      FROM df_problems AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM df_product AS RHS
           WHERE (LHS.product_id = RHS.product_id) )))
ORDER BY count___;",2,12,4,0,4,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
spider/tracking_software_problems/0024,"filter(input1, ""staff_last_name != 'Bosco' & staff_last_name == 'Champlin'""), natural_join3(input0, input2, line0), filter(line1, ""staff_first_name == 'Lacey' | staff_first_name == 'Kenton'""), inner_join(line1, line2, ""'problem_id' = 'reported_by_staff_id','closure_authorised_by_staff_id' = 'product_id'"")","SELECT `product_name`
FROM
  (SELECT `product_id`,
          `product_name`,
          `product_details`,
          `problem_id`,
          `closure_authorised_by_staff_id`,
          `problem_id` AS `reported_by_staff_id`,
          `date_problem_reported`,
          `date_problem_closed`,
          `problem_description`,
          `other_problem_details`,
          `staff_id`,
          `staff_first_name`,
          `staff_last_name`,
          `other_staff_details`,
          `product_name_other`,
          `product_details_other`,
          `problem_id_other`,
          `closure_authorised_by_staff_id_other`,
          `date_problem_reported_other`,
          `date_problem_closed_other`,
          `problem_description_other`,
          `other_problem_details_other`,
          `staff_id_other`,
          `staff_first_name_other`,
          `staff_last_name_other`,
          `other_staff_details_other`
   FROM
     (SELECT `LHS`.`product_id` AS `product_id`,
             `LHS`.`product_name` AS `product_name`,
             `LHS`.`product_details` AS `product_details`,
             `LHS`.`problem_id` AS `problem_id`,
             `LHS`.`closure_authorised_by_staff_id` AS `closure_authorised_by_staff_id`,
             `LHS`.`reported_by_staff_id` AS `reported_by_staff_id`,
             `LHS`.`date_problem_reported` AS `date_problem_reported`,
             `LHS`.`date_problem_closed` AS `date_problem_closed`,
             `LHS`.`problem_description` AS `problem_description`,
             `LHS`.`other_problem_details` AS `other_problem_details`,
             `LHS`.`staff_id` AS `staff_id`,
             `LHS`.`staff_first_name` AS `staff_first_name`,
             `LHS`.`staff_last_name` AS `staff_last_name`,
             `LHS`.`other_staff_details` AS `other_staff_details`,
             `RHS`.`product_name` AS `product_name_other`,
             `RHS`.`product_details` AS `product_details_other`,
             `RHS`.`problem_id` AS `problem_id_other`,
             `RHS`.`closure_authorised_by_staff_id` AS `closure_authorised_by_staff_id_other`,
             `RHS`.`date_problem_reported` AS `date_problem_reported_other`,
             `RHS`.`date_problem_closed` AS `date_problem_closed_other`,
             `RHS`.`problem_description` AS `problem_description_other`,
             `RHS`.`other_problem_details` AS `other_problem_details_other`,
             `RHS`.`staff_id` AS `staff_id_other`,
             `RHS`.`staff_first_name` AS `staff_first_name_other`,
             `RHS`.`staff_last_name` AS `staff_last_name_other`,
             `RHS`.`other_staff_details` AS `other_staff_details_other`
      FROM
        (SELECT `LHS`.`product_id` AS `product_id`,
                `LHS`.`product_name` AS `product_name`,
                `LHS`.`product_details` AS `product_details`,
                `LHS`.`problem_id` AS `problem_id`,
                `LHS`.`closure_authorised_by_staff_id` AS `closure_authorised_by_staff_id`,
                `LHS`.`reported_by_staff_id` AS `reported_by_staff_id`,
                `LHS`.`date_problem_reported` AS `date_problem_reported`,
                `LHS`.`date_problem_closed` AS `date_problem_closed`,
                `LHS`.`problem_description` AS `problem_description`,
                `LHS`.`other_problem_details` AS `other_problem_details`,
                `RHS`.`staff_id` AS `staff_id`,
                `RHS`.`staff_first_name` AS `staff_first_name`,
                `RHS`.`staff_last_name` AS `staff_last_name`,
                `RHS`.`other_staff_details` AS `other_staff_details`
         FROM
           (SELECT `LHS`.`product_id` AS `product_id`,
                   `LHS`.`product_name` AS `product_name`,
                   `LHS`.`product_details` AS `product_details`,
                   `RHS`.`problem_id` AS `problem_id`,
                   `RHS`.`closure_authorised_by_staff_id` AS `closure_authorised_by_staff_id`,
                   `RHS`.`reported_by_staff_id` AS `reported_by_staff_id`,
                   `RHS`.`date_problem_reported` AS `date_problem_reported`,
                   `RHS`.`date_problem_closed` AS `date_problem_closed`,
                   `RHS`.`problem_description` AS `problem_description`,
                   `RHS`.`other_problem_details` AS `other_problem_details`
            FROM `df_product` AS `LHS`
            INNER JOIN `df_problems` AS `RHS` ON (`LHS`.`product_id` = `RHS`.`product_id`)) AS `LHS`
         CROSS JOIN
           (SELECT *
            FROM `df_staff`
            WHERE (`staff_last_name` != 'Bosco'
                   AND `staff_last_name` = 'Champlin')) AS `RHS`) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM
           (SELECT `LHS`.`product_id` AS `product_id`,
                   `LHS`.`product_name` AS `product_name`,
                   `LHS`.`product_details` AS `product_details`,
                   `LHS`.`problem_id` AS `problem_id`,
                   `LHS`.`closure_authorised_by_staff_id` AS `closure_authorised_by_staff_id`,
                   `LHS`.`reported_by_staff_id` AS `reported_by_staff_id`,
                   `LHS`.`date_problem_reported` AS `date_problem_reported`,
                   `LHS`.`date_problem_closed` AS `date_problem_closed`,
                   `LHS`.`problem_description` AS `problem_description`,
                   `LHS`.`other_problem_details` AS `other_problem_details`,
                   `RHS`.`staff_id` AS `staff_id`,
                   `RHS`.`staff_first_name` AS `staff_first_name`,
                   `RHS`.`staff_last_name` AS `staff_last_name`,
                   `RHS`.`other_staff_details` AS `other_staff_details`
            FROM
              (SELECT `LHS`.`product_id` AS `product_id`,
                      `LHS`.`product_name` AS `product_name`,
                      `LHS`.`product_details` AS `product_details`,
                      `RHS`.`problem_id` AS `problem_id`,
                      `RHS`.`closure_authorised_by_staff_id` AS `closure_authorised_by_staff_id`,
                      `RHS`.`reported_by_staff_id` AS `reported_by_staff_id`,
                      `RHS`.`date_problem_reported` AS `date_problem_reported`,
                      `RHS`.`date_problem_closed` AS `date_problem_closed`,
                      `RHS`.`problem_description` AS `problem_description`,
                      `RHS`.`other_problem_details` AS `other_problem_details`
               FROM `df_product` AS `LHS`
               INNER JOIN `df_problems` AS `RHS` ON (`LHS`.`product_id` = `RHS`.`product_id`)) AS `LHS`
            CROSS JOIN
              (SELECT *
               FROM `df_staff`
               WHERE (`staff_last_name` != 'Bosco'
                      AND `staff_last_name` = 'Champlin')) AS `RHS`)
         WHERE (`staff_first_name` = 'Lacey'
                OR `staff_first_name` = 'Kenton')) AS RHS ON (LHS.problem_id = RHS.reported_by_staff_id
                                                              AND LHS.closure_authorised_by_staff_id = RHS.product_id)))
ORDER BY product_name;",4,27,10,0,10,3,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,1,0,0,0,0,0,0
spider/tracking_software_problems/0021,"summarise(input1, 'n = n()', ""'problem_description','product_id'""), natural_join(input0, line0), limit(line1, 'problem_description')","SELECT product_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.product_id AS product_id,
                LHS.product_name AS product_name,
                LHS.product_details AS product_details,
                RHS.problem_description AS problem_description,
                RHS.n AS n
         FROM df_product AS LHS
         INNER JOIN
           (SELECT problem_description,
                   product_id,
                   COUNT() AS n
            FROM df_problems
            GROUP BY problem_description,
                     product_id) AS RHS ON (LHS.product_id = RHS.product_id))
      ORDER BY problem_description)
   LIMIT 3);",2,12,5,0,5,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_software_problems/0001,"limit(input0, 'desc(log_entry_date)')","SELECT problem_log_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_problem_log
      ORDER BY log_entry_date DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_software_problems/0014,"filter(input1, ""date_problem_reported >= parse_datetime('1986-11-13')""), semi_join(line0, input0), summarise(line1, 'n_distinct = n_distinct(date_problem_reported)', ""'product_id'"")","SELECT `n_distinct` AS `count___`,
       `product_id`
FROM
  (SELECT `product_id`,
          COUNT(DISTINCT `date_problem_reported`) AS `n_distinct`
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM `df_problems`
         WHERE (`date_problem_reported` >= parse_datetime('1986-11-13'))) AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM df_product AS RHS
           WHERE (LHS.product_id = RHS.product_id) ))
   GROUP BY product_id)
ORDER BY count___;",3,15,5,1,5,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0
spider/tracking_software_problems/0009,"inner_join(input0, input1, ""'staff_id' = 'reported_by_staff_id'""), filter(line0, ""staff_first_name == 'Christop'"")","SELECT `problem_description`
FROM
  (SELECT `staff_id`,
          `staff_first_name`,
          `staff_last_name`,
          `other_staff_details`,
          `problem_id`,
          `product_id`,
          `closure_authorised_by_staff_id`,
          `date_problem_reported`,
          `date_problem_closed`,
          `problem_description`,
          `other_problem_details`,
          `staff_id` AS `reported_by_staff_id`
   FROM
     (SELECT `LHS`.`staff_id` AS `staff_id`,
             `LHS`.`staff_first_name` AS `staff_first_name`,
             `LHS`.`staff_last_name` AS `staff_last_name`,
             `LHS`.`other_staff_details` AS `other_staff_details`,
             `RHS`.`problem_id` AS `problem_id`,
             `RHS`.`product_id` AS `product_id`,
             `RHS`.`closure_authorised_by_staff_id` AS `closure_authorised_by_staff_id`,
             `RHS`.`date_problem_reported` AS `date_problem_reported`,
             `RHS`.`date_problem_closed` AS `date_problem_closed`,
             `RHS`.`problem_description` AS `problem_description`,
             `RHS`.`other_problem_details` AS `other_problem_details`
      FROM `df_staff` AS `LHS`
      INNER JOIN `df_problems` AS `RHS` ON (`LHS`.`staff_id` = `RHS`.`reported_by_staff_id`)))
WHERE (`staff_first_name` = 'Christop')
ORDER BY problem_description;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/tracking_software_problems/0011,"filter(input0, ""date_problem_reported >= parse_datetime('1978-06-26')"")","SELECT `problem_id`
FROM `df_problems`
WHERE (`date_problem_reported` >= parse_datetime('1978-06-26'))
ORDER BY problem_id;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_software_problems/0010,"filter(input0, ""staff_last_name == 'Bosco'""), inner_join(line0, input1, ""'staff_id' = 'reported_by_staff_id'"")","SELECT `problem_id`
FROM
  (SELECT `LHS`.`staff_id` AS `staff_id`,
          `LHS`.`staff_first_name` AS `staff_first_name`,
          `LHS`.`staff_last_name` AS `staff_last_name`,
          `LHS`.`other_staff_details` AS `other_staff_details`,
          `RHS`.`problem_id` AS `problem_id`,
          `RHS`.`product_id` AS `product_id`,
          `RHS`.`closure_authorised_by_staff_id` AS `closure_authorised_by_staff_id`,
          `RHS`.`date_problem_reported` AS `date_problem_reported`,
          `RHS`.`date_problem_closed` AS `date_problem_closed`,
          `RHS`.`problem_description` AS `problem_description`,
          `RHS`.`other_problem_details` AS `other_problem_details`
   FROM
     (SELECT *
      FROM `df_staff`
      WHERE (`staff_last_name` = 'Bosco')) AS LHS
   INNER JOIN df_problems AS RHS ON (LHS.staff_id = RHS.reported_by_staff_id))
ORDER BY problem_id;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/apartment_rentals/0037,"summarise(input0, 'n = n()', ""'gender_code','guest_id'""), summarise(line0, 'n = n()', ""'gender_code'"")","SELECT gender_code,
       n AS count___
FROM
  (SELECT gender_code,
          COUNT() AS n
   FROM
     (SELECT gender_code,
             guest_id,
             COUNT() AS n
      FROM df_guests
      GROUP BY gender_code,
               guest_id)
   GROUP BY gender_code)
ORDER BY gender_code;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0036,"summarise(input0, 'maxroom_count = max(room_count)', ""'apt_type_code'""), summarise(input0, 'minroom_count = min(room_count)', ""'apt_type_code'""), left_join(line0, line1)","SELECT apt_type_code,
       maxroom_count AS max_room_count_,
       minroom_count AS min_room_count_
FROM
  (SELECT LHS.apt_type_code AS apt_type_code,
          LHS.maxroom_count AS maxroom_count,
          RHS.minroom_count AS minroom_count
   FROM
     (SELECT apt_type_code,
             MAX(room_count) AS maxroom_count
      FROM df_apartments
      GROUP BY apt_type_code) AS LHS
   LEFT JOIN
     (SELECT apt_type_code,
             MIN(room_count) AS minroom_count
      FROM df_apartments
      GROUP BY apt_type_code) AS RHS ON (LHS.apt_type_code = RHS.apt_type_code))
ORDER BY apt_type_code;",3,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0
spider/apartment_rentals/0017,"filter(input0, ""apt_number == 'Suite 634'""), semi_join(input1, line0)","SELECT `booking_status_code`
FROM
  (SELECT *
   FROM `df_apartment_bookings` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_apartments`
           WHERE (`apt_number` = 'Suite 634')) AS RHS
        WHERE (LHS.apt_id = RHS.apt_id) ))
ORDER BY booking_status_code;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/apartment_rentals/0008,"summarise(input0, 'meanbedroom_count = mean(bedroom_count, na.rm = T)', ""'apt_number','bedroom_count'""), summarise(line0, 'meanbedroom_count = mean(bedroom_count, na.rm = T)', '')","SELECT meanbedroom_count AS avg_bedroom_count_
FROM
  (SELECT AVG(bedroom_count) AS meanbedroom_count
   FROM
     (SELECT apt_number,
             bedroom_count,
             AVG(bedroom_count) AS meanbedroom_count
      FROM df_apartments
      GROUP BY apt_number,
               bedroom_count))
ORDER BY avg_bedroom_count_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0039,"left_join(input1, input0), filter(line0, ""booking_status_code != 'Confirmed' & booking_status_code == 'Provisional'""), inner_join(line1, line0, ""'bathroom_count' = 'bathroom_count','bedroom_count' = 'guest_id'"")","SELECT DISTINCT `apt_number_other` AS `apt_number`
FROM
  (SELECT `LHS`.`apt_booking_id` AS `apt_booking_id`,
          `LHS`.`apt_id` AS `apt_id`,
          `LHS`.`guest_id` AS `guest_id`,
          `LHS`.`booking_status_code` AS `booking_status_code`,
          `LHS`.`booking_start_date` AS `booking_start_date`,
          `LHS`.`booking_end_date` AS `booking_end_date`,
          `LHS`.`building_id` AS `building_id`,
          `LHS`.`apt_type_code` AS `apt_type_code`,
          `LHS`.`apt_number` AS `apt_number`,
          `LHS`.`bathroom_count` AS `bathroom_count`,
          `LHS`.`bedroom_count` AS `bedroom_count`,
          `LHS`.`room_count` AS `room_count`,
          `RHS`.`apt_booking_id` AS `apt_booking_id_other`,
          `RHS`.`apt_id` AS `apt_id_other`,
          `RHS`.`booking_status_code` AS `booking_status_code_other`,
          `RHS`.`booking_start_date` AS `booking_start_date_other`,
          `RHS`.`booking_end_date` AS `booking_end_date_other`,
          `RHS`.`building_id` AS `building_id_other`,
          `RHS`.`apt_type_code` AS `apt_type_code_other`,
          `RHS`.`apt_number` AS `apt_number_other`,
          `RHS`.`bedroom_count` AS `bedroom_count_other`,
          `RHS`.`room_count` AS `room_count_other`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`apt_booking_id` AS `apt_booking_id`,
                `LHS`.`apt_id` AS `apt_id`,
                `LHS`.`guest_id` AS `guest_id`,
                `LHS`.`booking_status_code` AS `booking_status_code`,
                `LHS`.`booking_start_date` AS `booking_start_date`,
                `LHS`.`booking_end_date` AS `booking_end_date`,
                `RHS`.`building_id` AS `building_id`,
                `RHS`.`apt_type_code` AS `apt_type_code`,
                `RHS`.`apt_number` AS `apt_number`,
                `RHS`.`bathroom_count` AS `bathroom_count`,
                `RHS`.`bedroom_count` AS `bedroom_count`,
                `RHS`.`room_count` AS `room_count`
         FROM `df_apartment_bookings` AS `LHS`
         LEFT JOIN `df_apartments` AS `RHS` ON (`LHS`.`apt_id` = `RHS`.`apt_id`))
      WHERE (`booking_status_code` != 'Confirmed'
             AND `booking_status_code` = 'Provisional')) AS LHS
   INNER JOIN
     (SELECT LHS.apt_booking_id AS apt_booking_id,
             LHS.apt_id AS apt_id,
             LHS.guest_id AS guest_id,
             LHS.booking_status_code AS booking_status_code,
             LHS.booking_start_date AS booking_start_date,
             LHS.booking_end_date AS booking_end_date,
             RHS.building_id AS building_id,
             RHS.apt_type_code AS apt_type_code,
             RHS.apt_number AS apt_number,
             RHS.bathroom_count AS bathroom_count,
             RHS.bedroom_count AS bedroom_count,
             RHS.room_count AS room_count
      FROM df_apartment_bookings AS LHS
      LEFT JOIN df_apartments AS RHS ON (LHS.apt_id = RHS.apt_id)) AS RHS ON (LHS.bathroom_count = RHS.bathroom_count
                                                                              AND LHS.bedroom_count = RHS.guest_id))
ORDER BY apt_number;",3,15,5,1,5,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0
spider/apartment_rentals/0038,"anti_join(input0, input1, ""'apt_id'""), summarise(line0, 'n_distinct = n_distinct(apt_id)', '')","SELECT n_distinct AS count___
FROM
  (SELECT COUNT(DISTINCT apt_id) AS n_distinct
   FROM
     (SELECT *
      FROM df_apartments AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM df_apartment_facilities AS RHS
           WHERE (LHS.apt_id = RHS.apt_id) )))
ORDER BY count___;",2,13,4,1,4,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
spider/apartment_rentals/0003,df_apartment_buildings,"SELECT DISTINCT building_description
FROM df_apartment_buildings
ORDER BY building_description;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0027,"filter(input0, ""building_manager == 'Kyle'""), semi_join(input1, line0)","SELECT `apt_type_code`,
       `apt_number`
FROM
  (SELECT *
   FROM `df_apartments` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_apartment_buildings`
           WHERE (`building_manager` = 'Kyle')) AS RHS
        WHERE (LHS.building_id = RHS.building_id) ))
ORDER BY apt_type_code;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/apartment_rentals/0022,"filter(input1, ""booking_status_code == 'Confirmed'""), semi_join(input0, line0)","SELECT `guest_first_name`,
       `guest_last_name`
FROM
  (SELECT *
   FROM `df_guests` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_apartment_bookings`
           WHERE (`booking_status_code` = 'Confirmed')) AS RHS
        WHERE (LHS.guest_id = RHS.guest_id) ))
ORDER BY guest_first_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/apartment_rentals/0030,"limit(input0, 'desc(apt_type_code)')","SELECT apt_number
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_apartments
      ORDER BY apt_type_code DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0013,"filter(input0, ""gender_code == 'Male'""), intersect(line0, line0, 'date_of_birth')","SELECT `date_of_birth`
FROM
  (SELECT `date_of_birth`
   FROM `df_guests`
   WHERE (`gender_code` = 'Male') INTERSECT
     SELECT `date_of_birth`
     FROM `df_guests` WHERE (`gender_code` = 'Male'))
ORDER BY date_of_birth;",2,9,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/apartment_rentals/0004,"filter(input0, ""building_manager == 'Emma'"")","SELECT `building_short_name`
FROM `df_apartment_buildings`
WHERE (`building_manager` = 'Emma')
ORDER BY building_short_name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0012,df_guests,"SELECT guest_first_name,
       guest_last_name
FROM df_guests
ORDER BY guest_first_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0026,"natural_join(input0, input1), limit(line0, 'desc(bathroom_count)')","SELECT building_address
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.building_id AS building_id,
                LHS.building_short_name AS building_short_name,
                LHS.building_full_name AS building_full_name,
                LHS.building_description AS building_description,
                LHS.building_address AS building_address,
                LHS.building_manager AS building_manager,
                LHS.building_phone AS building_phone,
                RHS.apt_id AS apt_id,
                RHS.apt_type_code AS apt_type_code,
                RHS.apt_number AS apt_number,
                RHS.bathroom_count AS bathroom_count,
                RHS.bedroom_count AS bedroom_count,
                RHS.room_count AS room_count
         FROM df_apartment_buildings AS LHS
         INNER JOIN df_apartments AS RHS ON (LHS.building_id = RHS.building_id))
      ORDER BY bathroom_count DESC)
   LIMIT 2);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0015,"filter(input0, ""apt_type_code == 'Duplex'""), semi_join(input1, line0), inner_join(input1, line1, ""'apt_booking_id','apt_id'"")","SELECT `booking_start_date` AS `booking_start_date___1`,
       `booking_start_date_other` AS `booking_start_date___2`
FROM
  (SELECT `LHS`.`apt_booking_id` AS `apt_booking_id`,
          `LHS`.`apt_id` AS `apt_id`,
          `LHS`.`guest_id` AS `guest_id`,
          `LHS`.`booking_status_code` AS `booking_status_code`,
          `LHS`.`booking_start_date` AS `booking_start_date`,
          `LHS`.`booking_end_date` AS `booking_end_date`,
          `RHS`.`guest_id` AS `guest_id_other`,
          `RHS`.`booking_status_code` AS `booking_status_code_other`,
          `RHS`.`booking_start_date` AS `booking_start_date_other`,
          `RHS`.`booking_end_date` AS `booking_end_date_other`
   FROM `df_apartment_bookings` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_apartment_bookings` AS `LHS`
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_apartments`
              WHERE (`apt_type_code` = 'Duplex')) AS RHS
           WHERE (LHS.apt_id = RHS.apt_id) )) AS RHS ON (LHS.apt_booking_id = RHS.apt_booking_id
                                                         AND LHS.apt_id = RHS.apt_id))
ORDER BY booking_start_date___1;",3,15,5,0,5,1,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0
spider/apartment_rentals/0005,"filter(input0, ""building_manager == 'Brenden'""), semi_join(input0, line0)","SELECT `building_address`,
       `building_phone`
FROM
  (SELECT *
   FROM `df_apartment_buildings` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_apartment_buildings`
           WHERE (`building_manager` = 'Brenden')) AS RHS
        WHERE (LHS.building_id = RHS.building_id
               AND LHS.building_short_name = RHS.building_short_name
               AND LHS.building_full_name = RHS.building_full_name
               AND LHS.building_description = RHS.building_description
               AND LHS.building_address = RHS.building_address
               AND LHS.building_manager = RHS.building_manager
               AND LHS.building_phone = RHS.building_phone) ))
ORDER BY building_address;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/apartment_rentals/0016,"filter(input0, 'bedroom_count >= 2L'), semi_join(input1, line0), inner_join(line1, line1, ""'booking_end_date','booking_status_code'"")","SELECT booking_start_date AS booking_start_date___1,
       booking_start_date_other AS booking_start_date___2
FROM
  (SELECT LHS.apt_booking_id AS apt_booking_id,
          LHS.apt_id AS apt_id,
          LHS.guest_id AS guest_id,
          LHS.booking_status_code AS booking_status_code,
          LHS.booking_start_date AS booking_start_date,
          LHS.booking_end_date AS booking_end_date,
          RHS.apt_booking_id AS apt_booking_id_other,
          RHS.apt_id AS apt_id_other,
          RHS.guest_id AS guest_id_other,
          RHS.booking_start_date AS booking_start_date_other
   FROM
     (SELECT *
      FROM df_apartment_bookings AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM df_apartments
              WHERE (bedroom_count >= 2)) AS RHS
           WHERE (LHS.apt_id = RHS.apt_id) )) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_apartment_bookings AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM df_apartments
              WHERE (bedroom_count >= 2)) AS RHS
           WHERE (LHS.apt_id = RHS.apt_id) )) AS RHS ON (LHS.booking_end_date = RHS.booking_end_date
                                                         AND LHS.booking_status_code = RHS.booking_status_code))
ORDER BY booking_start_date___1;",3,25,8,0,8,1,6,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0
spider/apartment_rentals/0032,"filter(input0, 'room_count != 3L'), natural_join(input0, line0)","SELECT DISTINCT apt_type_code
FROM
  (SELECT LHS.apt_id AS apt_id,
          LHS.building_id AS building_id,
          LHS.apt_type_code AS apt_type_code,
          LHS.apt_number AS apt_number,
          LHS.bathroom_count AS bathroom_count,
          LHS.bedroom_count AS bedroom_count,
          LHS.room_count AS room_count
   FROM df_apartments AS LHS
   INNER JOIN
     (SELECT *
      FROM df_apartments
      WHERE (room_count != 3)) AS RHS ON (LHS.apt_id = RHS.apt_id
                                          AND LHS.building_id = RHS.building_id
                                          AND LHS.apt_type_code = RHS.apt_type_code
                                          AND LHS.apt_number = RHS.apt_number
                                          AND LHS.bathroom_count = RHS.bathroom_count
                                          AND LHS.bedroom_count = RHS.bedroom_count
                                          AND LHS.room_count = RHS.room_count))
ORDER BY apt_type_code;",2,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0018,"filter(input1, ""booking_status_code == 'Confirmed'""), natural_join(input0, line0)","SELECT DISTINCT `apt_number`
FROM
  (SELECT `LHS`.`apt_id` AS `apt_id`,
          `LHS`.`building_id` AS `building_id`,
          `LHS`.`apt_type_code` AS `apt_type_code`,
          `LHS`.`apt_number` AS `apt_number`,
          `LHS`.`bathroom_count` AS `bathroom_count`,
          `LHS`.`bedroom_count` AS `bedroom_count`,
          `LHS`.`room_count` AS `room_count`,
          `RHS`.`apt_booking_id` AS `apt_booking_id`,
          `RHS`.`guest_id` AS `guest_id`,
          `RHS`.`booking_status_code` AS `booking_status_code`,
          `RHS`.`booking_start_date` AS `booking_start_date`,
          `RHS`.`booking_end_date` AS `booking_end_date`
   FROM `df_apartments` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_apartment_bookings`
      WHERE (`booking_status_code` = 'Confirmed')) AS RHS ON (LHS.apt_id = RHS.apt_id))
ORDER BY apt_number;",2,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0035,"summarise(input0, 'n = n()', ""'apt_type_code','building_id'""), limit(line0, 'building_id')","SELECT apt_type_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT apt_type_code,
                building_id,
                COUNT() AS n
         FROM df_apartments
         GROUP BY apt_type_code,
                  building_id)
      ORDER BY building_id)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0020,"natural_join(input0, input1), inner_join(line0, input1, ""'apt_id','booking_end_date'"")","SELECT guest_first_name,
       booking_start_date AS booking_start_date___2,
       booking_start_date_other AS booking_start_date___3
FROM
  (SELECT LHS.guest_id AS guest_id,
          LHS.gender_code AS gender_code,
          LHS.guest_first_name AS guest_first_name,
          LHS.guest_last_name AS guest_last_name,
          LHS.date_of_birth AS date_of_birth,
          LHS.apt_booking_id AS apt_booking_id,
          LHS.apt_id AS apt_id,
          LHS.booking_status_code AS booking_status_code,
          LHS.booking_start_date AS booking_start_date,
          LHS.booking_end_date AS booking_end_date,
          RHS.apt_booking_id AS apt_booking_id_other,
          RHS.guest_id AS guest_id_other,
          RHS.booking_status_code AS booking_status_code_other,
          RHS.booking_start_date AS booking_start_date_other
   FROM
     (SELECT LHS.guest_id AS guest_id,
             LHS.gender_code AS gender_code,
             LHS.guest_first_name AS guest_first_name,
             LHS.guest_last_name AS guest_last_name,
             LHS.date_of_birth AS date_of_birth,
             RHS.apt_booking_id AS apt_booking_id,
             RHS.apt_id AS apt_id,
             RHS.booking_status_code AS booking_status_code,
             RHS.booking_start_date AS booking_start_date,
             RHS.booking_end_date AS booking_end_date
      FROM df_guests AS LHS
      INNER JOIN df_apartment_bookings AS RHS ON (LHS.guest_id = RHS.guest_id)) AS LHS
   INNER JOIN df_apartment_bookings AS RHS ON (LHS.apt_id = RHS.apt_id
                                               AND LHS.booking_end_date = RHS.booking_end_date))
ORDER BY guest_first_name;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0
spider/apartment_rentals/0007,"mutate(input0, 'maxbathroom_count = max(bathroom_count)'), mutate(line0, 'bathroom_count = min(bathroom_count)')","SELECT DISTINCT MIN(bathroom_count) OVER () AS min_bathroom_count_,
                                         maxbathroom_count AS max_bathroom_count_
FROM
  (SELECT apt_id,
          building_id,
          apt_type_code,
          apt_number,
          bathroom_count,
          bedroom_count,
          room_count,
          MAX(bathroom_count) OVER () AS maxbathroom_count
   FROM df_apartments)
ORDER BY min_bathroom_count_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0034,"summarise(input0, 'n = n()', ""'apt_type_code','bathroom_count'""), limit(line0, 'desc(n)')","SELECT apt_type_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT apt_type_code,
                bathroom_count,
                COUNT() AS n
         FROM df_apartments
         GROUP BY apt_type_code,
                  bathroom_count)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0021,"filter(input0, ""gender_code == 'Female'""), natural_join3(input0, input1, line0), inner_join(line1, input1, ""'apt_booking_id','booking_end_date'"")","SELECT `booking_start_date` AS `booking_start_date___1`,
       `booking_start_date_other` AS `booking_start_date___2`
FROM
  (SELECT `LHS`.`guest_id` AS `guest_id`,
          `LHS`.`gender_code` AS `gender_code`,
          `LHS`.`guest_first_name` AS `guest_first_name`,
          `LHS`.`guest_last_name` AS `guest_last_name`,
          `LHS`.`date_of_birth` AS `date_of_birth`,
          `LHS`.`apt_booking_id` AS `apt_booking_id`,
          `LHS`.`apt_id` AS `apt_id`,
          `LHS`.`booking_status_code` AS `booking_status_code`,
          `LHS`.`booking_start_date` AS `booking_start_date`,
          `LHS`.`booking_end_date` AS `booking_end_date`,
          `RHS`.`apt_id` AS `apt_id_other`,
          `RHS`.`guest_id` AS `guest_id_other`,
          `RHS`.`booking_status_code` AS `booking_status_code_other`,
          `RHS`.`booking_start_date` AS `booking_start_date_other`
   FROM
     (SELECT `LHS`.`guest_id` AS `guest_id`,
             `LHS`.`gender_code` AS `gender_code`,
             `LHS`.`guest_first_name` AS `guest_first_name`,
             `LHS`.`guest_last_name` AS `guest_last_name`,
             `LHS`.`date_of_birth` AS `date_of_birth`,
             `LHS`.`apt_booking_id` AS `apt_booking_id`,
             `LHS`.`apt_id` AS `apt_id`,
             `LHS`.`booking_status_code` AS `booking_status_code`,
             `LHS`.`booking_start_date` AS `booking_start_date`,
             `LHS`.`booking_end_date` AS `booking_end_date`
      FROM
        (SELECT `LHS`.`guest_id` AS `guest_id`,
                `LHS`.`gender_code` AS `gender_code`,
                `LHS`.`guest_first_name` AS `guest_first_name`,
                `LHS`.`guest_last_name` AS `guest_last_name`,
                `LHS`.`date_of_birth` AS `date_of_birth`,
                `RHS`.`apt_booking_id` AS `apt_booking_id`,
                `RHS`.`apt_id` AS `apt_id`,
                `RHS`.`booking_status_code` AS `booking_status_code`,
                `RHS`.`booking_start_date` AS `booking_start_date`,
                `RHS`.`booking_end_date` AS `booking_end_date`
         FROM `df_guests` AS `LHS`
         INNER JOIN `df_apartment_bookings` AS `RHS` ON (`LHS`.`guest_id` = `RHS`.`guest_id`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_guests`
         WHERE (`gender_code` = 'Female')) AS RHS ON (LHS.guest_id = RHS.guest_id
                                                      AND LHS.gender_code = RHS.gender_code
                                                      AND LHS.guest_first_name = RHS.guest_first_name
                                                      AND LHS.guest_last_name = RHS.guest_last_name
                                                      AND LHS.date_of_birth = RHS.date_of_birth)) AS LHS
   INNER JOIN df_apartment_bookings AS RHS ON (LHS.apt_booking_id = RHS.apt_booking_id
                                               AND LHS.booking_end_date = RHS.booking_end_date))
ORDER BY booking_start_date___1;",3,14,5,0,5,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0
spider/apartment_rentals/0023,"filter(input0, 'bedroom_count > 4L'), natural_join(input1, line0)","SELECT facility_code
FROM
  (SELECT LHS.apt_id AS apt_id,
          LHS.facility_code AS facility_code,
          RHS.building_id AS building_id,
          RHS.apt_type_code AS apt_type_code,
          RHS.apt_number AS apt_number,
          RHS.bathroom_count AS bathroom_count,
          RHS.bedroom_count AS bedroom_count,
          RHS.room_count AS room_count
   FROM df_apartment_facilities AS LHS
   INNER JOIN
     (SELECT *
      FROM df_apartments
      WHERE (bedroom_count > 4)) AS RHS ON (LHS.apt_id = RHS.apt_id))
ORDER BY facility_code;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0001,"mutate(input0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_apartment_bookings
ORDER BY count___;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0014,"left_join(input1, input0), inner_join(line0, input1, ""'booking_end_date'"")","SELECT apt_number,
       booking_start_date AS booking_start_date___2,
       booking_start_date_other AS booking_start_date___3
FROM
  (SELECT LHS.apt_booking_id AS apt_booking_id,
          LHS.apt_id AS apt_id,
          LHS.guest_id AS guest_id,
          LHS.booking_status_code AS booking_status_code,
          LHS.booking_start_date AS booking_start_date,
          LHS.booking_end_date AS booking_end_date,
          LHS.building_id AS building_id,
          LHS.apt_type_code AS apt_type_code,
          LHS.apt_number AS apt_number,
          LHS.bathroom_count AS bathroom_count,
          LHS.bedroom_count AS bedroom_count,
          LHS.room_count AS room_count,
          RHS.apt_booking_id AS apt_booking_id_other,
          RHS.apt_id AS apt_id_other,
          RHS.guest_id AS guest_id_other,
          RHS.booking_status_code AS booking_status_code_other,
          RHS.booking_start_date AS booking_start_date_other
   FROM
     (SELECT LHS.apt_booking_id AS apt_booking_id,
             LHS.apt_id AS apt_id,
             LHS.guest_id AS guest_id,
             LHS.booking_status_code AS booking_status_code,
             LHS.booking_start_date AS booking_start_date,
             LHS.booking_end_date AS booking_end_date,
             RHS.building_id AS building_id,
             RHS.apt_type_code AS apt_type_code,
             RHS.apt_number AS apt_number,
             RHS.bathroom_count AS bathroom_count,
             RHS.bedroom_count AS bedroom_count,
             RHS.room_count AS room_count
      FROM df_apartment_bookings AS LHS
      LEFT JOIN df_apartments AS RHS ON (LHS.apt_id = RHS.apt_id)) AS LHS
   INNER JOIN df_apartment_bookings AS RHS ON (LHS.booking_end_date = RHS.booking_end_date))
ORDER BY apt_number;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
spider/apartment_rentals/0009,df_apartments,"SELECT apt_number,
       room_count
FROM df_apartments
ORDER BY apt_number;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0011,"filter(input0, ""apt_type_code == 'Flat'"")","SELECT `apt_number`
FROM `df_apartments`
WHERE (`apt_type_code` = 'Flat')
ORDER BY apt_number;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0029,df_apartments,"SELECT apt_number
FROM df_apartments
ORDER BY apt_number;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/apartment_rentals/0040,"filter(input1, 'available_yn != T'), natural_join3(input0, input1, line0)","SELECT DISTINCT apt_number
FROM
  (SELECT LHS.apt_id AS apt_id,
          LHS.building_id AS building_id,
          LHS.apt_type_code AS apt_type_code,
          LHS.apt_number AS apt_number,
          LHS.bathroom_count AS bathroom_count,
          LHS.bedroom_count AS bedroom_count,
          LHS.room_count AS room_count,
          LHS.apt_booking_id AS apt_booking_id,
          LHS.status_date AS status_date,
          LHS.available_yn AS available_yn
   FROM
     (SELECT LHS.apt_id AS apt_id,
             LHS.building_id AS building_id,
             LHS.apt_type_code AS apt_type_code,
             LHS.apt_number AS apt_number,
             LHS.bathroom_count AS bathroom_count,
             LHS.bedroom_count AS bedroom_count,
             LHS.room_count AS room_count,
             RHS.apt_booking_id AS apt_booking_id,
             RHS.status_date AS status_date,
             RHS.available_yn AS available_yn
      FROM df_apartments AS LHS
      INNER JOIN df_view_unit_status AS RHS ON (LHS.apt_id = RHS.apt_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_view_unit_status
      WHERE (available_yn != 1)) AS RHS ON (LHS.apt_id = RHS.apt_id
                                            AND LHS.apt_booking_id = RHS.apt_booking_id
                                            AND LHS.status_date = RHS.status_date
                                            AND LHS.available_yn = RHS.available_yn))
ORDER BY apt_number;",2,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/apartment_rentals/0028,"inner_join(input0, input0, ""'booking_end_date','guest_id'""), summarise(line0, 'n = n()', ""'booking_status_code'"")","SELECT booking_status_code,
       n AS count___
FROM
  (SELECT booking_status_code,
          COUNT() AS n
   FROM
     (SELECT LHS.apt_booking_id AS apt_booking_id,
             LHS.apt_id AS apt_id,
             LHS.guest_id AS guest_id,
             LHS.booking_status_code AS booking_status_code,
             LHS.booking_start_date AS booking_start_date,
             LHS.booking_end_date AS booking_end_date,
             RHS.apt_booking_id AS apt_booking_id_other,
             RHS.apt_id AS apt_id_other,
             RHS.booking_status_code AS booking_status_code_other,
             RHS.booking_start_date AS booking_start_date_other
      FROM df_apartment_bookings AS LHS
      INNER JOIN df_apartment_bookings AS RHS ON (LHS.booking_end_date = RHS.booking_end_date
                                                  AND LHS.guest_id = RHS.guest_id))
   GROUP BY booking_status_code)
ORDER BY booking_status_code;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/apartment_rentals/0031,"summarise(input0, 'n = n()', ""'apt_type_code'"")","SELECT apt_type_code,
       n AS count___
FROM
  (SELECT apt_type_code,
          COUNT() AS n
   FROM df_apartments
   GROUP BY apt_type_code)
ORDER BY apt_type_code;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/party_people/0002,df_region,"SELECT DISTINCT region_name
FROM df_region
ORDER BY region_name;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/party_people/0017,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'minister','party_name'"")","SELECT party_name,
       n AS count___
FROM
  (SELECT minister,
          party_name,
          COUNT() AS n
   FROM
     (SELECT LHS.party_id AS party_id,
             LHS.minister AS minister,
             LHS.took_office AS took_office,
             LHS.left_office AS left_office,
             LHS.region_id AS region_id,
             LHS.party_name AS party_name,
             RHS.event_id AS event_id,
             RHS.event_name AS event_name,
             RHS.member_in_charge_id AS member_in_charge_id
      FROM df_party AS LHS
      INNER JOIN df_party_events AS RHS ON (LHS.party_id = RHS.party_id))
   GROUP BY minister,
            party_name)
ORDER BY party_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/party_people/0008,"limit(input0, 'party_name')","SELECT minister
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_party
      ORDER BY party_name)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/party_people/0003,"summarise(input0, 'n_distinct = n_distinct(party_name)', '')","SELECT n_distinct AS count_distinct_party_name_
FROM
  (SELECT COUNT(DISTINCT party_name) AS n_distinct
   FROM df_party)
ORDER BY count_distinct_party_name_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/party_people/0022,"natural_join3(input0, input1, input2), mutate(line0, 'n_distinct = n_distinct(region_name)'), filter(line1, ""region_name != 'United Kingdom' & event_name == 'Annaual Meeting'"")","SELECT `n_distinct` AS `count___`
FROM
  (SELECT `region_id`,
          `region_name`,
          `date`,
          `label`,
          `format`,
          `catalogue`,
          `party_id`,
          `minister`,
          `took_office`,
          `left_office`,
          `party_name`,
          `event_id`,
          `event_name`,
          `member_in_charge_id`,
          COUNT(DISTINCT `region_name`) OVER () AS `n_distinct`
   FROM
     (SELECT `LHS`.`region_id` AS `region_id`,
             `LHS`.`region_name` AS `region_name`,
             `LHS`.`date` AS `date`,
             `LHS`.`label` AS `label`,
             `LHS`.`format` AS `format`,
             `LHS`.`catalogue` AS `catalogue`,
             `LHS`.`party_id` AS `party_id`,
             `LHS`.`minister` AS `minister`,
             `LHS`.`took_office` AS `took_office`,
             `LHS`.`left_office` AS `left_office`,
             `LHS`.`party_name` AS `party_name`,
             `RHS`.`event_id` AS `event_id`,
             `RHS`.`event_name` AS `event_name`,
             `RHS`.`member_in_charge_id` AS `member_in_charge_id`
      FROM
        (SELECT `LHS`.`region_id` AS `region_id`,
                `LHS`.`region_name` AS `region_name`,
                `LHS`.`date` AS `date`,
                `LHS`.`label` AS `label`,
                `LHS`.`format` AS `format`,
                `LHS`.`catalogue` AS `catalogue`,
                `RHS`.`party_id` AS `party_id`,
                `RHS`.`minister` AS `minister`,
                `RHS`.`took_office` AS `took_office`,
                `RHS`.`left_office` AS `left_office`,
                `RHS`.`party_name` AS `party_name`
         FROM `df_region` AS `LHS`
         INNER JOIN `df_party` AS `RHS` ON (`LHS`.`region_id` = `RHS`.`region_id`)) AS `LHS`
      INNER JOIN `df_party_events` AS `RHS` ON (`LHS`.`party_id` = `RHS`.`party_id`)))
WHERE (`region_name` != 'United Kingdom'
       AND `event_name` = 'Annaual Meeting')
ORDER BY count___;",3,13,4,1,4,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0
spider/party_people/0013,"cross_join(input1, input0, 'party_id >= party_id.other'), anti_join(input0, line0, ""'party_name','took_office'"")","SELECT party_name
FROM
  (SELECT *
   FROM df_party AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT LHS.member_id AS member_id,
                     LHS.member_name AS member_name,
                     LHS.party_id AS party_id,
                     LHS.in_office AS in_office,
                     RHS.party_id AS party_id_other,
                     RHS.minister AS minister,
                     RHS.took_office AS took_office,
                     RHS.left_office AS left_office,
                     RHS.region_id AS region_id,
                     RHS.party_name AS party_name
              FROM df_member AS LHS
              CROSS JOIN df_party AS RHS)
           WHERE (party_id >= party_id_other)) AS RHS
        WHERE (LHS.party_name = RHS.party_name
               AND LHS.took_office = RHS.took_office) ))
ORDER BY party_name;",2,15,5,0,5,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
spider/party_people/0006,"filter(input0, ""party_name != 'Progress Party'"")","SELECT `minister`
FROM `df_party`
WHERE (`party_name` != 'Progress Party')
ORDER BY minister;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/party_people/0016,"summarise(input0, 'n = n()', ""'event_id','party_id'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT event_id,
             party_id,
             COUNT() AS n
      FROM df_party_events
      GROUP BY event_id,
               party_id))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/party_people/0018,"inner_join(input0, input1, ""'member_id' = 'member_in_charge_id'""), anti_join(input0, line0, ""'member_id','party_id'"")","SELECT member_name
FROM
  (SELECT *
   FROM df_member AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT member_id,
                  member_name,
                  party_id,
                  in_office,
                  event_id,
                  event_name,
                  party_id_other,
                  member_id AS member_in_charge_id
           FROM
             (SELECT LHS.member_id AS member_id,
                     LHS.member_name AS member_name,
                     LHS.party_id AS party_id,
                     LHS.in_office AS in_office,
                     RHS.event_id AS event_id,
                     RHS.event_name AS event_name,
                     RHS.party_id AS party_id_other
              FROM df_member AS LHS
              INNER JOIN df_party_events AS RHS ON (LHS.member_id = RHS.member_in_charge_id))) AS RHS
        WHERE (LHS.member_id = RHS.member_id
               AND LHS.party_id = RHS.party_id) ))
ORDER BY member_name;",2,15,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
spider/party_people/0020,"summarise(input0, 'n = n()', ""'member_id','member_name'""), inner_join(line0, input1, ""'member_id' = 'member_in_charge_id','n' = 'event_id'"")","SELECT member_name
FROM
  (SELECT member_id,
          member_name,
          n,
          event_name,
          party_id,
          member_id AS member_in_charge_id
   FROM
     (SELECT LHS.member_id AS member_id,
             LHS.member_name AS member_name,
             LHS.n AS n,
             RHS.event_name AS event_name,
             RHS.party_id AS party_id
      FROM
        (SELECT member_id,
                member_name,
                COUNT() AS n
         FROM df_member
         GROUP BY member_id,
                  member_name) AS LHS
      INNER JOIN df_party_events AS RHS ON (LHS.member_id = RHS.member_in_charge_id
                                            AND LHS.n = RHS.event_id)))
ORDER BY member_name;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/party_people/0019,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'member_in_charge_id','party_name'""), filter(line1, 'n <= 2L')","SELECT DISTINCT party_name
FROM
  (SELECT member_in_charge_id,
          party_name,
          COUNT() AS n
   FROM
     (SELECT LHS.party_id AS party_id,
             LHS.minister AS minister,
             LHS.took_office AS took_office,
             LHS.left_office AS left_office,
             LHS.region_id AS region_id,
             LHS.party_name AS party_name,
             RHS.event_id AS event_id,
             RHS.event_name AS event_name,
             RHS.member_in_charge_id AS member_in_charge_id
      FROM df_party AS LHS
      INNER JOIN df_party_events AS RHS ON (LHS.party_id = RHS.party_id))
   GROUP BY member_in_charge_id,
            party_name)
WHERE (n <= 2)
ORDER BY party_name;",3,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/party_people/0001,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_region)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/party_people/0011,"summarise(input0, 'n = n()', ""'party_name','took_office'""), inner_join(line0, input1, ""'party_name' = 'party_id'"")","SELECT DISTINCT party_name
FROM
  (SELECT LHS.party_name AS party_name,
          LHS.took_office AS took_office,
          LHS.n AS n,
          RHS.member_id AS member_id,
          RHS.member_name AS member_name,
          RHS.in_office AS in_office
   FROM
     (SELECT party_name,
             took_office,
             COUNT() AS n
      FROM df_party
      GROUP BY party_name,
               took_office) AS LHS
   INNER JOIN df_member AS RHS ON (LHS.party_name = RHS.party_id))
ORDER BY party_name;",2,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/county_public_safety/0002,df_county_public_safety,"SELECT name
FROM df_county_public_safety
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/county_public_safety/0008,"limit(input0, 'desc(police_officers)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_county_public_safety
      ORDER BY police_officers DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/county_public_safety/0003,"filter(input0, ""location != 'East'""), natural_join(input0, line0)","SELECT DISTINCT `police_force`
FROM
  (SELECT `LHS`.`county_id` AS `county_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`population` AS `population`,
          `LHS`.`police_officers` AS `police_officers`,
          `LHS`.`residents_per_officer` AS `residents_per_officer`,
          `LHS`.`case_burden` AS `case_burden`,
          `LHS`.`crime_rate` AS `crime_rate`,
          `LHS`.`police_force` AS `police_force`,
          `LHS`.`location` AS `location`
   FROM `df_county_public_safety` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_county_public_safety`
      WHERE (`location` != 'East')) AS RHS ON (LHS.county_id = RHS.county_id
                                               AND LHS.name = RHS.name
                                               AND LHS.population = RHS.population
                                               AND LHS.police_officers = RHS.police_officers
                                               AND LHS.residents_per_officer = RHS.residents_per_officer
                                               AND LHS.case_burden = RHS.case_burden
                                               AND LHS.crime_rate = RHS.crime_rate
                                               AND LHS.police_force = RHS.police_force
                                               AND LHS.location = RHS.location))
ORDER BY police_force;",2,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/county_public_safety/0006,df_city,"SELECT name
FROM df_city
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/county_public_safety/0004,"mutate(input0, 'mincrime_rate = min(crime_rate)'), mutate(line0, 'maxcrime_rate = max(crime_rate)')","SELECT DISTINCT mincrime_rate AS min_crime_rate_,
                MAX(crime_rate) OVER () AS max_crime_rate_
FROM
  (SELECT county_id,
          name,
          population,
          police_officers,
          residents_per_officer,
          case_burden,
          crime_rate,
          police_force,
          LOCATION,
          MIN(crime_rate) OVER () AS mincrime_rate
   FROM df_county_public_safety)
ORDER BY min_crime_rate_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/county_public_safety/0015,"summarise(input0, 'n = n()', ""'police_force'"")","SELECT police_force,
       n AS count___
FROM
  (SELECT police_force,
          COUNT() AS n
   FROM df_county_public_safety
   GROUP BY police_force)
ORDER BY police_force;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/county_public_safety/0005,"intersect(input0, input0, 'crime_rate')","SELECT crime_rate
FROM
  (SELECT crime_rate
   FROM df_county_public_safety INTERSECT SELECT crime_rate
   FROM df_county_public_safety)
ORDER BY crime_rate;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/county_public_safety/0016,"summarise(input0, 'n = n()', ""'location','residents_per_officer'""), limit(line0, 'desc(residents_per_officer)')","SELECT LOCATION
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LOCATION,
                residents_per_officer,
                COUNT() AS n
         FROM df_county_public_safety
         GROUP BY LOCATION,
                  residents_per_officer)
      ORDER BY residents_per_officer DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/county_public_safety/0018,"filter(input0, ""location != 'East' | location == 'West'""), semi_join(line0, input0)","SELECT DISTINCT `police_force`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_county_public_safety`
      WHERE (`location` != 'East'
             OR `location` = 'West')) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_county_public_safety AS RHS
        WHERE (LHS.county_id = RHS.county_id
               AND LHS.name = RHS.name
               AND LHS.population = RHS.population
               AND LHS.police_officers = RHS.police_officers
               AND LHS.residents_per_officer = RHS.residents_per_officer
               AND LHS.case_burden = RHS.case_burden
               AND LHS.crime_rate = RHS.crime_rate
               AND LHS.police_force = RHS.police_force
               AND LHS.location = RHS.location) ))
ORDER BY police_force;",2,14,4,1,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/county_public_safety/0020,"intersect(input0, input0, 'case_burden')","SELECT case_burden
FROM
  (SELECT case_burden
   FROM df_county_public_safety INTERSECT SELECT case_burden
   FROM df_county_public_safety)
ORDER BY case_burden;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/county_public_safety/0019,"filter(input0, 'crime_rate > 100 & crime_rate != county_id'), anti_join(input1, line0, ""'county_id'"")","SELECT name
FROM
  (SELECT *
   FROM df_city AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_county_public_safety
           WHERE (crime_rate > 100.0
                  AND crime_rate != county_id)) AS RHS
        WHERE (LHS.county_id = RHS.county_id) ))
ORDER BY name;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/county_public_safety/0007,"filter(input0, 'black > 10')","SELECT hispanic
FROM df_city
WHERE (black > 10.0)
ORDER BY hispanic;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/county_public_safety/0001,"mutate(input0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_county_public_safety
ORDER BY count___;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/county_public_safety/0014,"filter(input1, 'white >= 90'), inner_join(line0, input0, ""'county_id'"")","SELECT crime_rate
FROM
  (SELECT LHS.city_id AS city_id,
          LHS.county_id AS county_id,
          LHS.name AS name,
          LHS.white AS white,
          LHS.black AS black,
          LHS.amerindian AS amerindian,
          LHS.asian AS asian,
          LHS.multiracial AS multiracial,
          LHS.hispanic AS hispanic,
          RHS.name AS name_other,
          RHS.population AS population,
          RHS.police_officers AS police_officers,
          RHS.residents_per_officer AS residents_per_officer,
          RHS.case_burden AS case_burden,
          RHS.crime_rate AS crime_rate,
          RHS.police_force AS police_force,
          RHS.location AS LOCATION
   FROM
     (SELECT *
      FROM df_city
      WHERE (white >= 90.0)) AS LHS
   INNER JOIN df_county_public_safety AS RHS ON (LHS.county_id = RHS.county_id))
ORDER BY crime_rate;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/county_public_safety/0009,"limit(input0, 'desc(white)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_city
      ORDER BY white DESC)
   LIMIT 5);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/county_public_safety/0011,"inner_join(input0, input1, ""'county_id'"")","SELECT white,
       crime_rate
FROM
  (SELECT LHS.county_id AS county_id,
          LHS.name AS name,
          LHS.population AS population,
          LHS.police_officers AS police_officers,
          LHS.residents_per_officer AS residents_per_officer,
          LHS.case_burden AS case_burden,
          LHS.crime_rate AS crime_rate,
          LHS.police_force AS police_force,
          LHS.location AS LOCATION,
          RHS.city_id AS city_id,
          RHS.name AS name_other,
          RHS.white AS white,
          RHS.black AS black,
          RHS.amerindian AS amerindian,
          RHS.asian AS asian,
          RHS.multiracial AS multiracial,
          RHS.hispanic AS hispanic
   FROM df_county_public_safety AS LHS
   INNER JOIN df_city AS RHS ON (LHS.county_id = RHS.county_id))
ORDER BY white;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/county_public_safety/0010,"inner_join(input0, input1, ""'county_id'"")","SELECT name_other AS name___1,
       name AS name___2
FROM
  (SELECT LHS.county_id AS county_id,
          LHS.name AS name,
          LHS.population AS population,
          LHS.police_officers AS police_officers,
          LHS.residents_per_officer AS residents_per_officer,
          LHS.case_burden AS case_burden,
          LHS.crime_rate AS crime_rate,
          LHS.police_force AS police_force,
          LHS.location AS LOCATION,
          RHS.city_id AS city_id,
          RHS.name AS name_other,
          RHS.white AS white,
          RHS.black AS black,
          RHS.amerindian AS amerindian,
          RHS.asian AS asian,
          RHS.multiracial AS multiracial,
          RHS.hispanic AS hispanic
   FROM df_county_public_safety AS LHS
   INNER JOIN df_city AS RHS ON (LHS.county_id = RHS.county_id))
ORDER BY name___1;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/device/0002,df_device,"SELECT carrier
FROM df_device
ORDER BY carrier;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/device/0017,"anti_join(input0, input1, ""'shop_id'"")","SELECT shop_name
FROM
  (SELECT *
   FROM df_shop AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_stock AS RHS
        WHERE (LHS.shop_id = RHS.shop_id) ))
ORDER BY shop_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/device/0008,"filter(input0, ""shop_name == 'Apple'""), semi_join(input0, line0)","SELECT `open_date`,
       `open_year`
FROM
  (SELECT *
   FROM `df_shop` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_shop`
           WHERE (`shop_name` = 'Apple')) AS RHS
        WHERE (LHS.shop_id = RHS.shop_id
               AND LHS.shop_name = RHS.shop_name
               AND LHS.location = RHS.location
               AND LHS.open_date = RHS.open_date
               AND LHS.open_year = RHS.open_year) ))
ORDER BY open_date;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/device/0003,"filter(input0, ""software_platform != 'Android'"")","SELECT `carrier`
FROM `df_device`
WHERE (`software_platform` != 'Android')
ORDER BY carrier;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/device/0013,"mutate(input1, 'sumquantity = sum(quantity)'), natural_join(input0, line0), limit(line1, 'desc(quantity)')","SELECT shop_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.shop_id AS shop_id,
                LHS.shop_name AS shop_name,
                LHS.location AS LOCATION,
                LHS.open_date AS open_date,
                LHS.open_year AS open_year,
                RHS.device_id AS device_id,
                RHS.quantity AS quantity,
                RHS.sumquantity AS sumquantity
         FROM df_shop AS LHS
         INNER JOIN
           (SELECT shop_id,
                   device_id,
                   quantity,
                   SUM(quantity) OVER () AS sumquantity
            FROM df_stock) AS RHS ON (LHS.shop_id = RHS.shop_id))
      ORDER BY quantity DESC)
   LIMIT 1);",2,14,5,0,5,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0
spider/device/0006,df_shop,"SELECT shop_name,
       LOCATION
FROM df_shop
ORDER BY shop_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/device/0004,df_shop,"SELECT shop_name
FROM df_shop
ORDER BY shop_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/device/0012,"summarise(input1, 'n = n()', ""'device_id','quantity'""), inner_join(input0, line0, ""'shop_id' = 'n'"")","SELECT DISTINCT shop_name
FROM
  (SELECT LHS.shop_id AS shop_id,
          LHS.shop_name AS shop_name,
          LHS.location AS LOCATION,
          LHS.open_date AS open_date,
          LHS.open_year AS open_year,
          RHS.device_id AS device_id,
          RHS.quantity AS quantity
   FROM df_shop AS LHS
   INNER JOIN
     (SELECT device_id,
             quantity,
             COUNT() AS n
      FROM df_stock
      GROUP BY device_id,
               quantity) AS RHS ON (LHS.shop_id = RHS.n))
ORDER BY shop_name;",2,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/device/0015,"summarise(input0, 'n = n()', ""'device_id','software_platform'"")","SELECT DISTINCT software_platform
FROM
  (SELECT device_id,
          software_platform,
          COUNT() AS n
   FROM df_device
   GROUP BY device_id,
            software_platform)
ORDER BY software_platform;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/device/0005,"summarise(input0, 'meanquantity = mean(quantity, na.rm = T)', '')","SELECT meanquantity AS avg_quantity_
FROM
  (SELECT AVG(quantity) AS meanquantity
   FROM df_stock)
ORDER BY avg_quantity_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/device/0016,"summarise(input0, 'n = n()', ""'carrier','software_platform'""), limit(line0, 'n')","SELECT software_platform
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT carrier,
                software_platform,
                COUNT() AS n
         FROM df_device
         GROUP BY carrier,
                  software_platform)
      ORDER BY n)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/device/0020,"natural_join(input0, input1), mutate(line0, 'n = n()'), filter(line1, 'n != 1L')","SELECT DISTINCT carrier
FROM
  (SELECT device_id,
          device,
          carrier,
          package_version,
          applications,
          software_platform,
          shop_id,
          quantity,
          COUNT(*) OVER () AS n
   FROM
     (SELECT LHS.device_id AS device_id,
             LHS.device AS device,
             LHS.carrier AS carrier,
             LHS.package_version AS package_version,
             LHS.applications AS applications,
             LHS.software_platform AS software_platform,
             RHS.shop_id AS shop_id,
             RHS.quantity AS quantity
      FROM df_device AS LHS
      INNER JOIN df_stock AS RHS ON (LHS.device_id = RHS.device_id)))
WHERE (n != 1)
ORDER BY carrier;",3,10,3,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/device/0019,"anti_join(input0, input1, '')","SELECT carrier
FROM
  (SELECT *
   FROM df_device AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_stock AS RHS
        WHERE (LHS.device_id = RHS.device_id) ))
ORDER BY carrier;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/device/0007,"summarise(input0, 'n_distinct = n_distinct(software_platform)', ""'software_platform'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count_distinct_software_platform_
FROM
  (SELECT software_platform,
          COUNT(DISTINCT software_platform) AS n_distinct
   FROM df_device
   GROUP BY software_platform)
ORDER BY count_distinct_software_platform_;",2,7,2,2,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/device/0001,"summarise(input0, 'n = n()', ""'carrier','software_platform'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT carrier,
          software_platform,
          COUNT() AS n
   FROM df_device
   GROUP BY carrier,
            software_platform)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/device/0014,"summarise(input0, 'n = n()', ""'software_platform'""), semi_join(line0, input0)","SELECT software_platform,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT software_platform,
             COUNT() AS n
      FROM df_device
      GROUP BY software_platform) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_device AS RHS
        WHERE (LHS.software_platform = RHS.software_platform) ))
ORDER BY software_platform;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/device/0009,"limit(input0, 'desc(location)')","SELECT shop_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_shop
      ORDER BY LOCATION DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/device/0011,"summarise(input1, 'n = n()', ""'shop_id'""), left_join(input0, line0), filter(line1, 'n != 1L')","SELECT shop_name
FROM
  (SELECT LHS.shop_id AS shop_id,
          LHS.shop_name AS shop_name,
          LHS.location AS LOCATION,
          LHS.open_date AS open_date,
          LHS.open_year AS open_year,
          RHS.n AS n
   FROM df_shop AS LHS
   LEFT JOIN
     (SELECT shop_id,
             COUNT() AS n
      FROM df_stock
      GROUP BY shop_id) AS RHS ON (LHS.shop_id = RHS.shop_id))
WHERE (n != 1)
ORDER BY shop_name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/device/0010,"natural_join(input1, input2), left_join(line0, input0)","SELECT shop_name,
       carrier
FROM
  (SELECT LHS.shop_id AS shop_id,
          LHS.shop_name AS shop_name,
          LHS.location AS LOCATION,
          LHS.open_date AS open_date,
          LHS.open_year AS open_year,
          LHS.device_id AS device_id,
          LHS.quantity AS quantity,
          RHS.device AS device,
          RHS.carrier AS carrier,
          RHS.package_version AS package_version,
          RHS.applications AS applications,
          RHS.software_platform AS software_platform
   FROM
     (SELECT LHS.shop_id AS shop_id,
             LHS.shop_name AS shop_name,
             LHS.location AS LOCATION,
             LHS.open_date AS open_date,
             LHS.open_year AS open_year,
             RHS.device_id AS device_id,
             RHS.quantity AS quantity
      FROM df_shop AS LHS
      INNER JOIN df_stock AS RHS ON (LHS.shop_id = RHS.shop_id)) AS LHS
   LEFT JOIN df_device AS RHS ON (LHS.device_id = RHS.device_id))
ORDER BY shop_name;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
spider/university_basketball/0002,"filter(input0, ""affiliation == 'Public'""), semi_join(line0, input0)","SELECT `school`,
       `location`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_university`
      WHERE (`affiliation` = 'Public')) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_university AS RHS
        WHERE (LHS.school_id = RHS.school_id
               AND LHS.school = RHS.school
               AND LHS.location = RHS.location
               AND LHS.founded = RHS.founded
               AND LHS.affiliation = RHS.affiliation
               AND LHS.enrollment = RHS.enrollment
               AND LHS.nickname = RHS.nickname
               AND LHS.primary_conference = RHS.primary_conference) ))
ORDER BY school;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/university_basketball/0003,"limit(input0, 'desc(enrollment)')","SELECT founded
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_university
      ORDER BY enrollment DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/university_basketball/0013,"summarise(input0, 'sumenrollment = sum(enrollment)', ""'affiliation'"")","SELECT sumenrollment AS sum_enrollment_,
       affiliation
FROM
  (SELECT affiliation,
          SUM(enrollment) AS sumenrollment
   FROM df_university
   GROUP BY affiliation)
ORDER BY sum_enrollment_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/university_basketball/0004,"filter(input0, ""affiliation != 'Public'""), limit(line0, 'affiliation')","SELECT `founded`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM `df_university`
         WHERE (`affiliation` != 'Public'))
      ORDER BY affiliation)
   LIMIT 1);",1,10,4,0,4,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/university_basketball/0012,"mutate(input0, 'minenrollment = min(enrollment)'), mutate(line0, 'sumenrollment = sum(enrollment)')","SELECT DISTINCT SUM(enrollment) OVER () AS sum_enrollment_,
                                     minenrollment AS min_enrollment_
FROM
  (SELECT school_id,
          school,
          LOCATION,
          founded,
          affiliation,
          enrollment,
          nickname,
          primary_conference,
          MIN(enrollment) OVER () AS minenrollment
   FROM df_university)
ORDER BY sum_enrollment_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/university_basketball/0015,"filter(input0, ""affiliation == 'Public' | founded >= 1850""), intersect(input0, line0, 'school')","SELECT `school`
FROM
  (SELECT `school`
   FROM `df_university` INTERSECT SELECT `school`
   FROM `df_university`
   WHERE (`affiliation` = 'Public'
          OR founded >= 1850.0))
ORDER BY school;",2,9,3,0,3,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/university_basketball/0016,"summarise(input0, 'n = n()', ""'affiliation','founded'""), mutate(line0, 'n_distinct = n_distinct(affiliation)')","SELECT DISTINCT COUNT(DISTINCT affiliation) OVER () AS count_distinct_affiliation_
FROM
  (SELECT affiliation,
          founded,
          COUNT() AS n
   FROM df_university
   GROUP BY affiliation,
            founded)
ORDER BY count_distinct_affiliation_;",2,7,2,2,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/university_basketball/0020,"filter(input0, 'founded > 1850 & enrollment > 1850'), summarise(line0, 'sumenrollment = sum(enrollment)', ""'affiliation'"")","SELECT sumenrollment AS sum_enrollment_,
       affiliation
FROM
  (SELECT affiliation,
          SUM(enrollment) AS sumenrollment
   FROM
     (SELECT *
      FROM df_university
      WHERE (founded > 1850.0
             AND enrollment > 1850.0))
   GROUP BY affiliation)
ORDER BY sum_enrollment_;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/university_basketball/0021,"summarise(input0, 'enrollment = max(enrollment)', ''), intersect(line0, input0, 'enrollment')","SELECT enrollment AS max_enrollment_
FROM
  (SELECT enrollment
   FROM
     (SELECT MAX(enrollment) AS enrollment
      FROM df_university) INTERSECT SELECT enrollment
   FROM df_university)
ORDER BY max_enrollment_;",2,9,4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
spider/university_basketball/0001,df_university,"SELECT school,
       nickname
FROM df_university
ORDER BY school;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/university_basketball/0011,"limit(input0, 'desc(affiliation)')","SELECT enrollment,
       primary_conference
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_university
      ORDER BY affiliation DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/university_basketball/0010,"filter(input0, 'founded < 1850 | enrollment < founded'), mutate(line0, 'meanenrollment = mean(enrollment, na.rm = T)')","SELECT DISTINCT AVG(enrollment) OVER () AS avg_enrollment_
FROM df_university
WHERE (founded < 1850.0
       OR enrollment < founded)
ORDER BY avg_enrollment_;",2,6,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/wine_1/0033,"summarise(input1, 'n = n()', ""'appelation'""), left_join(line0, input0), filter(line1, 'n <= 3L')","SELECT county
FROM
  (SELECT LHS.appelation AS appelation,
          LHS.n AS n,
          RHS.no AS NO,
          RHS.county AS county,
          RHS.state AS state,
          RHS.area AS area,
          RHS.isava AS isava
   FROM
     (SELECT appelation,
             COUNT() AS n
      FROM df_wine
      GROUP BY appelation) AS LHS
   LEFT JOIN df_appellations AS RHS ON (LHS.appelation = RHS.appelation))
WHERE (n <= 3)
ORDER BY county;",3,9,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/wine_1/0037,"filter(input0, 'price > 100L')","SELECT grape,
       winery,
       YEAR
FROM df_wine
WHERE (price > 100)
ORDER BY grape;",1,4,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/wine_1/0002,"limit(input0, 'score')","SELECT winery
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_wine
      ORDER BY score)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/wine_1/0036,"summarise(input1, 'n = n()', ""'grape','winery'""), left_join(line0, input0), filter(line1, ""color == 'White' & n > 3L"")","SELECT `winery`
FROM
  (SELECT `LHS`.`grape` AS `grape`,
          `LHS`.`winery` AS `winery`,
          `LHS`.`n` AS `n`,
          `RHS`.`id` AS `id`,
          `RHS`.`color` AS `color`
   FROM
     (SELECT `grape`,
             `winery`,
             COUNT() AS `n`
      FROM `df_wine`
      GROUP BY `grape`,
               `winery`) AS `LHS`
   LEFT JOIN `df_grapes` AS `RHS` ON (`LHS`.`grape` = `RHS`.`grape`))
WHERE (`color` = 'White'
       AND n > 3)
ORDER BY winery;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/wine_1/0017,"filter(input0, ""color == 'Red'""), left_join(input1, line0), filter(line1, ""color == 'Red' & price > 50L"")","SELECT `name`
FROM
  (SELECT `LHS`.`no` AS `no`,
          `LHS`.`grape` AS `grape`,
          `LHS`.`winery` AS `winery`,
          `LHS`.`appelation` AS `appelation`,
          `LHS`.`state` AS `state`,
          `LHS`.`name` AS `name`,
          `LHS`.`year` AS `year`,
          `LHS`.`price` AS `price`,
          `LHS`.`score` AS `score`,
          `LHS`.`cases` AS `cases`,
          `LHS`.`drink` AS `drink`,
          `RHS`.`id` AS `id`,
          `RHS`.`color` AS `color`
   FROM `df_wine` AS `LHS`
   LEFT JOIN
     (SELECT *
      FROM `df_grapes`
      WHERE (`color` = 'Red')) AS `RHS` ON (`LHS`.`grape` = `RHS`.`grape`))
WHERE (`color` = 'Red'
       AND price > 50)
ORDER BY name;",3,9,3,0,3,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0
spider/wine_1/0008,"filter(input0, 'score > 90L')","SELECT name
FROM df_wine
WHERE (score > 90)
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/wine_1/0039,"inner_join(input0, input1, ""'appelation','state'""), filter(line0, ""area != 'Central Coast' & year > 2008L"")","SELECT DISTINCT `appelation`
FROM
  (SELECT `LHS`.`no` AS `no`,
          `LHS`.`appelation` AS `appelation`,
          `LHS`.`county` AS `county`,
          `LHS`.`state` AS `state`,
          `LHS`.`area` AS `area`,
          `LHS`.`isava` AS `isava`,
          `RHS`.`no` AS `no_other`,
          `RHS`.`grape` AS `grape`,
          `RHS`.`winery` AS `winery`,
          `RHS`.`name` AS `name`,
          `RHS`.`year` AS `year`,
          `RHS`.`price` AS `price`,
          `RHS`.`score` AS `score`,
          `RHS`.`cases` AS `cases`,
          `RHS`.`drink` AS `drink`
   FROM `df_appellations` AS `LHS`
   INNER JOIN `df_wine` AS `RHS` ON (`LHS`.`appelation` = `RHS`.`appelation`
                                     AND `LHS`.`state` = `RHS`.`state`))
WHERE (`area` != 'Central Coast'
       AND YEAR > 2008)
ORDER BY appelation;",2,8,2,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/wine_1/0038,"filter(input0, 'score > 93L')","SELECT grape,
       appelation,
       name
FROM df_wine
WHERE (score > 93)
ORDER BY grape;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/wine_1/0003,"filter(input0, 'year == 2008L'), filter(line0, 'year <= 2008L')","SELECT name
FROM
  (SELECT *
   FROM df_wine
   WHERE (YEAR = 2008))
WHERE (YEAR <= 2008)
ORDER BY name;",2,8,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/wine_1/0027,"filter(input0, 'price >= 50L & price <= 100L'), intersect(line0, line0, 'winery')","SELECT winery
FROM
  (SELECT winery
   FROM df_wine
   WHERE (price >= 50
          AND price <= 100) INTERSECT
     SELECT winery
     FROM df_wine WHERE (price >= 50
                         AND price <= 100))
ORDER BY winery;",2,9,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/wine_1/0022,df_wine,"SELECT DISTINCT name
FROM df_wine
ORDER BY name;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/wine_1/0013,"filter(input0, ""county != 'Sonoma'""), anti_join(input1, line0, ""'appelation','state'""), mutate(line1, 'meanprice = mean(price, na.rm = T)')","SELECT DISTINCT AVG(`price`) OVER () AS `avg_t2_price_`
FROM
  (SELECT *
   FROM `df_wine` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_appellations`
           WHERE (`county` != 'Sonoma')) AS RHS
        WHERE (LHS.appelation = RHS.appelation
               AND LHS.state = RHS.state) ))
ORDER BY avg_t2_price_;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/wine_1/0006,df_appellations,"SELECT area,
       county
FROM df_appellations
ORDER BY area;",2,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
spider/wine_1/0004,df_wine,"SELECT grape,
       appelation
FROM df_wine
ORDER BY grape;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/wine_1/0012,"summarise(input0, 'n = n()', ""'county','state'""), filter(line0, ""county == 'Napa'"")","SELECT `n` AS `count___`
FROM
  (SELECT `county`,
          `state`,
          COUNT() AS `n`
   FROM `df_appellations`
   GROUP BY `county`,
            `state`)
WHERE (`county` = 'Napa')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/wine_1/0026,"filter(input0, 'year != 2000L & year >= 2010L')","SELECT name
FROM df_wine
WHERE (YEAR != 2000
       AND YEAR >= 2010)
ORDER BY name;",1,5,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/wine_1/0015,"summarise(input0, 'area = max(area)', ""'appelation','state'""), left_join(line0, input1), filter(line1, ""area == 'Central Coast' & year < 2005L"")","SELECT `price` AS `max_t2_price_`
FROM
  (SELECT `LHS`.`appelation` AS `appelation`,
          `LHS`.`state` AS `state`,
          `LHS`.`area` AS `area`,
          `RHS`.`no` AS `no`,
          `RHS`.`grape` AS `grape`,
          `RHS`.`winery` AS `winery`,
          `RHS`.`name` AS `name`,
          `RHS`.`year` AS `year`,
          `RHS`.`price` AS `price`,
          `RHS`.`score` AS `score`,
          `RHS`.`cases` AS `cases`,
          `RHS`.`drink` AS `drink`
   FROM
     (SELECT `appelation`,
             `state`,
             MAX(`area`) AS `area`
      FROM `df_appellations`
      GROUP BY `appelation`,
               `state`) AS `LHS`
   LEFT JOIN `df_wine` AS `RHS` ON (`LHS`.`appelation` = `RHS`.`appelation`
                                    AND `LHS`.`state` = `RHS`.`state`))
WHERE (`area` = 'Central Coast'
       AND YEAR < 2005)
ORDER BY max_t2_price_;",3,9,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/wine_1/0005,df_wine,"SELECT name,
       score
FROM df_wine
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/wine_1/0016,"natural_join(input0, input1), filter(line0, ""color == 'White' & score > 90L""), natural_join4(input0, input1, line0, line1)","SELECT DISTINCT `grape`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`grape` AS `grape`,
          `LHS`.`color` AS `color`,
          `LHS`.`no` AS `no`,
          `LHS`.`winery` AS `winery`,
          `LHS`.`appelation` AS `appelation`,
          `LHS`.`state` AS `state`,
          `LHS`.`name` AS `name`,
          `LHS`.`year` AS `year`,
          `LHS`.`price` AS `price`,
          `LHS`.`score` AS `score`,
          `LHS`.`cases` AS `cases`,
          `LHS`.`drink` AS `drink`
   FROM
     (SELECT `LHS`.`id` AS `id`,
             `LHS`.`grape` AS `grape`,
             `LHS`.`color` AS `color`,
             `LHS`.`no` AS `no`,
             `LHS`.`winery` AS `winery`,
             `LHS`.`appelation` AS `appelation`,
             `LHS`.`state` AS `state`,
             `LHS`.`name` AS `name`,
             `LHS`.`year` AS `year`,
             `LHS`.`price` AS `price`,
             `LHS`.`score` AS `score`,
             `LHS`.`cases` AS `cases`,
             `LHS`.`drink` AS `drink`
      FROM
        (SELECT `LHS`.`id` AS `id`,
                `LHS`.`grape` AS `grape`,
                `LHS`.`color` AS `color`,
                `RHS`.`no` AS `no`,
                `RHS`.`winery` AS `winery`,
                `RHS`.`appelation` AS `appelation`,
                `RHS`.`state` AS `state`,
                `RHS`.`name` AS `name`,
                `RHS`.`year` AS `year`,
                `RHS`.`price` AS `price`,
                `RHS`.`score` AS `score`,
                `RHS`.`cases` AS `cases`,
                `RHS`.`drink` AS `drink`
         FROM `df_grapes` AS `LHS`
         INNER JOIN `df_wine` AS `RHS` ON (`LHS`.`grape` = `RHS`.`grape`)) AS `LHS`
      INNER JOIN
        (SELECT `LHS`.`id` AS `id`,
                `LHS`.`grape` AS `grape`,
                `LHS`.`color` AS `color`,
                `RHS`.`no` AS `no`,
                `RHS`.`winery` AS `winery`,
                `RHS`.`appelation` AS `appelation`,
                `RHS`.`state` AS `state`,
                `RHS`.`name` AS `name`,
                `RHS`.`year` AS `year`,
                `RHS`.`price` AS `price`,
                `RHS`.`score` AS `score`,
                `RHS`.`cases` AS `cases`,
                `RHS`.`drink` AS `drink`
         FROM `df_grapes` AS `LHS`
         INNER JOIN `df_wine` AS `RHS` ON (`LHS`.`grape` = `RHS`.`grape`)) AS `RHS` ON (`LHS`.`id` = `RHS`.`id`
                                                                                        AND `LHS`.`grape` = `RHS`.`grape`
                                                                                        AND `LHS`.`color` = `RHS`.`color`
                                                                                        AND `LHS`.`no` = `RHS`.`no`
                                                                                        AND `LHS`.`winery` = `RHS`.`winery`
                                                                                        AND `LHS`.`appelation` = `RHS`.`appelation`
                                                                                        AND `LHS`.`state` = `RHS`.`state`
                                                                                        AND `LHS`.`name` = `RHS`.`name`
                                                                                        AND `LHS`.`year` = `RHS`.`year`
                                                                                        AND `LHS`.`price` = `RHS`.`price`
                                                                                        AND `LHS`.`score` = `RHS`.`score`
                                                                                        AND `LHS`.`cases` = `RHS`.`cases`
                                                                                        AND `LHS`.`drink` = `RHS`.`drink`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM
        (SELECT `LHS`.`id` AS `id`,
                `LHS`.`grape` AS `grape`,
                `LHS`.`color` AS `color`,
                `RHS`.`no` AS `no`,
                `RHS`.`winery` AS `winery`,
                `RHS`.`appelation` AS `appelation`,
                `RHS`.`state` AS `state`,
                `RHS`.`name` AS `name`,
                `RHS`.`year` AS `year`,
                `RHS`.`price` AS `price`,
                `RHS`.`score` AS `score`,
                `RHS`.`cases` AS `cases`,
                `RHS`.`drink` AS `drink`
         FROM `df_grapes` AS `LHS`
         INNER JOIN `df_wine` AS `RHS` ON (`LHS`.`grape` = `RHS`.`grape`))
      WHERE (`color` = 'White'
             AND score > 90)) AS RHS ON (LHS.id = RHS.id
                                         AND LHS.grape = RHS.grape
                                         AND LHS.color = RHS.color
                                         AND LHS.no = RHS.no
                                         AND LHS.winery = RHS.winery
                                         AND LHS.appelation = RHS.appelation
                                         AND LHS.state = RHS.state
                                         AND LHS.name = RHS.name
                                         AND LHS.year = RHS.year
                                         AND LHS.price = RHS.price
                                         AND LHS.score = RHS.score
                                         AND LHS.cases = RHS.cases
                                         AND LHS.drink = RHS.drink))
ORDER BY grape;",3,21,7,1,7,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0
spider/wine_1/0032,"summarise(input0, 'n = n()', ""'state','winery'""), filter(line0, 'n >= 4L'), mutate(line1, 'n = n()')","SELECT winery
FROM
  (SELECT state,
          winery,
          COUNT() AS n
   FROM df_wine
   GROUP BY state,
            winery)
WHERE (n >= 4)
ORDER BY winery;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/wine_1/0018,"filter(input0, ""county != 'Monterey'""), anti_join(input1, line0, ""'appelation'""), filter(line1, 'price < 50L')","SELECT `name`
FROM
  (SELECT *
   FROM `df_wine` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_appellations`
           WHERE (`county` != 'Monterey')) AS RHS
        WHERE (LHS.appelation = RHS.appelation) ))
WHERE (price < 50)
ORDER BY name;",3,14,4,0,4,0,4,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0
spider/wine_1/0041,"filter(input1, 'score > 90L'), summarise(line0, 'n = n()', ""'cases','drink'""), inner_join(input0, line1, ""'no' = 'cases'"")","SELECT DISTINCT county
FROM
  (SELECT LHS.no AS NO,
          LHS.appelation AS appelation,
          LHS.county AS county,
          LHS.state AS state,
          LHS.area AS area,
          LHS.isava AS isava,
          RHS.drink AS drink,
          RHS.n AS n
   FROM df_appellations AS LHS
   INNER JOIN
     (SELECT cases,
             drink,
             COUNT() AS n
      FROM df_wine
      WHERE (score > 90)
      GROUP BY cases,
               drink) AS RHS ON (LHS.no = RHS.cases))
ORDER BY county;",3,10,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/wine_1/0035,"filter(input0, 'price < 2006L & price < year'), mutate(input0, 'price = max(price)'), semi_join(line0, line1)","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_wine
      WHERE (price < 2006
             AND price < YEAR)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT NO,
                  grape,
                  winery,
                  appelation,
                  state,
                  name,
                  YEAR,
                  MAX(price) OVER () AS price,
                                  score,
                                  cases,
                                  drink
           FROM df_wine) AS RHS
        WHERE (LHS.no = RHS.no
               AND LHS.grape = RHS.grape
               AND LHS.winery = RHS.winery
               AND LHS.appelation = RHS.appelation
               AND LHS.state = RHS.state
               AND LHS.name = RHS.name
               AND LHS.year = RHS.year
               AND LHS.price = RHS.price
               AND LHS.score = RHS.score
               AND LHS.cases = RHS.cases
               AND LHS.drink = RHS.drink) ))
ORDER BY name;",3,18,5,0,5,0,3,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0
spider/wine_1/0020,"summarise(input0, 'meanprice = mean(price, na.rm = T)', ""'year'"")","SELECT meanprice AS avg_price_,
       YEAR
FROM
  (SELECT YEAR,
          AVG(price) AS meanprice
   FROM df_wine
   GROUP BY YEAR)
ORDER BY avg_price_;",1,7,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/wine_1/0019,"summarise(input0, 'n = n()', ""'grape'"")","SELECT n AS count___,
       grape
FROM
  (SELECT grape,
          COUNT() AS n
   FROM df_wine
   GROUP BY grape)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/wine_1/0007,"filter(input0, 'year <= 2010L'), filter(line0, 'year <= 2010L')","SELECT price
FROM
  (SELECT *
   FROM df_wine
   WHERE (YEAR <= 2010))
WHERE (YEAR <= 2010)
ORDER BY price;",2,8,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/wine_1/0034,"filter(input0, ""winery == 'Brander'""), summarise(line0, 'minyear = min(year)', ""'year'""), cross_join(line1, input0, 'year > minyear | year > year.other')","SELECT `name`
FROM
  (SELECT `LHS`.`year` AS `year`,
          `LHS`.`minyear` AS `minyear`,
          `RHS`.`no` AS `no`,
          `RHS`.`grape` AS `grape`,
          `RHS`.`winery` AS `winery`,
          `RHS`.`appelation` AS `appelation`,
          `RHS`.`state` AS `state`,
          `RHS`.`name` AS `name`,
          `RHS`.`year` AS `year_other`,
          `RHS`.`price` AS `price`,
          `RHS`.`score` AS `score`,
          `RHS`.`cases` AS `cases`,
          `RHS`.`drink` AS `drink`
   FROM
     (SELECT `year`,
             MIN(`year`) AS `minyear`
      FROM `df_wine`
      WHERE (`winery` = 'Brander')
      GROUP BY YEAR) AS LHS
   CROSS JOIN df_wine AS RHS)
WHERE (YEAR > minyear
       OR YEAR > year_other)
ORDER BY name;",3,12,3,0,3,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0
spider/wine_1/0024,"summarise(input0, 'n = n()', ""'appelation','area'""), filter(line0, 'n <= 2010L | n == 1L'), inner_join(input1, line1, ""'no' = 'n','appelation' = 'appelation'"")","SELECT area
FROM
  (SELECT LHS.no AS NO,
          LHS.grape AS grape,
          LHS.winery AS winery,
          LHS.appelation AS appelation,
          LHS.state AS state,
          LHS.name AS name,
          LHS.year AS YEAR,
          LHS.price AS price,
          LHS.score AS score,
          LHS.cases AS cases,
          LHS.drink AS drink,
          RHS.area AS area
   FROM df_wine AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT appelation,
                area,
                COUNT() AS n
         FROM df_appellations
         GROUP BY appelation,
                  area)
      WHERE (n <= 2010
             OR n = 1)) AS RHS ON (LHS.no = RHS.n
                                   AND LHS.appelation = RHS.appelation))
ORDER BY area;",3,13,4,0,4,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/wine_1/0021,"mutate(input0, 'minprice = min(price)'), filter(input0, ""winery == 'John Anthony'""), cross_join(line1, line0, 'price < price.other | winery == winery.other')","SELECT DISTINCT `name_other` AS `name`
FROM
  (SELECT `LHS`.`no` AS `no`,
          `LHS`.`grape` AS `grape`,
          `LHS`.`winery` AS `winery`,
          `LHS`.`appelation` AS `appelation`,
          `LHS`.`state` AS `state`,
          `LHS`.`name` AS `name`,
          `LHS`.`year` AS `year`,
          `LHS`.`price` AS `price`,
          `LHS`.`score` AS `score`,
          `LHS`.`cases` AS `cases`,
          `LHS`.`drink` AS `drink`,
          `RHS`.`no` AS `no_other`,
          `RHS`.`grape` AS `grape_other`,
          `RHS`.`winery` AS `winery_other`,
          `RHS`.`appelation` AS `appelation_other`,
          `RHS`.`state` AS `state_other`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`year` AS `year_other`,
          `RHS`.`price` AS `price_other`,
          `RHS`.`score` AS `score_other`,
          `RHS`.`cases` AS `cases_other`,
          `RHS`.`drink` AS `drink_other`,
          `RHS`.`minprice` AS `minprice`
   FROM
     (SELECT *
      FROM `df_wine`
      WHERE (`winery` = 'John Anthony')) AS LHS
   CROSS JOIN
     (SELECT NO,
             grape,
             winery,
             appelation,
             state,
             name,
             YEAR,
             price,
             score,
             cases,
             drink,
             MIN(price) OVER () AS minprice
      FROM df_wine) AS RHS)
WHERE (price < price_other
       OR winery = winery_other)
ORDER BY name;",3,15,4,1,4,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0
spider/wine_1/0023,"intersect(input0, input0, 'name')","SELECT name
FROM
  (SELECT name
   FROM df_wine INTERSECT SELECT name
   FROM df_wine)
ORDER BY name;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/wine_1/0001,"limit(input0, 'desc(drink)')","SELECT grape AS name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_wine
      ORDER BY drink DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/wine_1/0014,"filter(input0, ""color == 'White'""), semi_join(input1, line0)","SELECT `name`,
       `score`
FROM
  (SELECT *
   FROM `df_wine` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_grapes`
           WHERE (`color` = 'White')) AS RHS
        WHERE (LHS.grape = RHS.grape) ))
ORDER BY name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/wine_1/0009,"filter(input0, ""color == 'Red'""), natural_join3(input0, input1, line0)","SELECT DISTINCT `name`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`grape` AS `grape`,
          `LHS`.`color` AS `color`,
          `LHS`.`no` AS `no`,
          `LHS`.`winery` AS `winery`,
          `LHS`.`appelation` AS `appelation`,
          `LHS`.`state` AS `state`,
          `LHS`.`name` AS `name`,
          `LHS`.`year` AS `year`,
          `LHS`.`price` AS `price`,
          `LHS`.`score` AS `score`,
          `LHS`.`cases` AS `cases`,
          `LHS`.`drink` AS `drink`
   FROM
     (SELECT `LHS`.`id` AS `id`,
             `LHS`.`grape` AS `grape`,
             `LHS`.`color` AS `color`,
             `RHS`.`no` AS `no`,
             `RHS`.`winery` AS `winery`,
             `RHS`.`appelation` AS `appelation`,
             `RHS`.`state` AS `state`,
             `RHS`.`name` AS `name`,
             `RHS`.`year` AS `year`,
             `RHS`.`price` AS `price`,
             `RHS`.`score` AS `score`,
             `RHS`.`cases` AS `cases`,
             `RHS`.`drink` AS `drink`
      FROM `df_grapes` AS `LHS`
      INNER JOIN `df_wine` AS `RHS` ON (`LHS`.`grape` = `RHS`.`grape`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_grapes`
      WHERE (`color` = 'Red')) AS RHS ON (LHS.id = RHS.id
                                          AND LHS.grape = RHS.grape
                                          AND LHS.color = RHS.color))
ORDER BY name;",2,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/wine_1/0025,"inner_join(input0, input1, ""'id' = 'no','grape' = 'grape'""), mutate(line0, 'meanprice = mean(price, na.rm = T)')","SELECT color
FROM
  (SELECT id,
          grape,
          color,
          winery,
          appelation,
          state,
          name,
          YEAR,
          price,
          score,
          cases,
          drink,
          id AS NO
   FROM
     (SELECT LHS.id AS id,
             LHS.grape AS grape,
             LHS.color AS color,
             RHS.winery AS winery,
             RHS.appelation AS appelation,
             RHS.state AS state,
             RHS.name AS name,
             RHS.year AS YEAR,
             RHS.price AS price,
             RHS.score AS score,
             RHS.cases AS cases,
             RHS.drink AS drink
      FROM df_grapes AS LHS
      INNER JOIN df_wine AS RHS ON (LHS.id = RHS.no
                                    AND LHS.grape = RHS.grape)))
ORDER BY color;",2,10,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/wine_1/0011,"filter(input0, ""winery == 'Robert Biale'""), natural_join(input0, line0), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM
  (SELECT `LHS`.`no` AS `no`,
          `LHS`.`grape` AS `grape`,
          `LHS`.`winery` AS `winery`,
          `LHS`.`appelation` AS `appelation`,
          `LHS`.`state` AS `state`,
          `LHS`.`name` AS `name`,
          `LHS`.`year` AS `year`,
          `LHS`.`price` AS `price`,
          `LHS`.`score` AS `score`,
          `LHS`.`cases` AS `cases`,
          `LHS`.`drink` AS `drink`
   FROM `df_wine` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_wine`
      WHERE (`winery` = 'Robert Biale')) AS RHS ON (LHS.no = RHS.no
                                                    AND LHS.grape = RHS.grape
                                                    AND LHS.winery = RHS.winery
                                                    AND LHS.appelation = RHS.appelation
                                                    AND LHS.state = RHS.state
                                                    AND LHS.name = RHS.name
                                                    AND LHS.year = RHS.year
                                                    AND LHS.price = RHS.price
                                                    AND LHS.score = RHS.score
                                                    AND LHS.cases = RHS.cases
                                                    AND LHS.drink = RHS.drink))
ORDER BY count___;",3,10,3,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/wine_1/0029,"filter(input0, ""appelation == 'St. Helena' | score >= price""), mutate(line0, 'price = max(price)'), natural_join(input0, line1)","SELECT `price` AS `max_price_`,
       `score` AS `max_score_`
FROM
  (SELECT `LHS`.`no` AS `no`,
          `LHS`.`grape` AS `grape`,
          `LHS`.`winery` AS `winery`,
          `LHS`.`appelation` AS `appelation`,
          `LHS`.`state` AS `state`,
          `LHS`.`name` AS `name`,
          `LHS`.`year` AS `year`,
          `LHS`.`price` AS `price`,
          `LHS`.`score` AS `score`,
          `LHS`.`cases` AS `cases`,
          `LHS`.`drink` AS `drink`
   FROM `df_wine` AS `LHS`
   INNER JOIN
     (SELECT `no`,
             `grape`,
             `winery`,
             `appelation`,
             `state`,
             `name`,
             `year`,
             MAX(`price`) OVER () AS `price`,
                               `score`,
                               `cases`,
                               `drink`
      FROM `df_wine`
      WHERE (`appelation` = 'St. Helena'
             OR score >= price)) AS RHS ON (LHS.no = RHS.no
                                            AND LHS.grape = RHS.grape
                                            AND LHS.winery = RHS.winery
                                            AND LHS.appelation = RHS.appelation
                                            AND LHS.state = RHS.state
                                            AND LHS.name = RHS.name
                                            AND LHS.year = RHS.year
                                            AND LHS.price = RHS.price
                                            AND LHS.score = RHS.score
                                            AND LHS.cases = RHS.cases
                                            AND LHS.drink = RHS.drink))
ORDER BY max_price_;",3,10,3,0,3,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/wine_1/0010,"filter(input0, ""area != 'North Coast'""), anti_join(input1, line0, ""'appelation','state'"")","SELECT DISTINCT `name`
FROM
  (SELECT *
   FROM `df_wine` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_appellations`
           WHERE (`area` != 'North Coast')) AS RHS
        WHERE (LHS.appelation = RHS.appelation
               AND LHS.state = RHS.state) ))
ORDER BY name;",2,14,4,1,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/wine_1/0040,"filter(input0, ""county == 'Sonoma'""), anti_join(input1, line0, ""'appelation'""), mutate(line1, 'meanprice = mean(price, na.rm = T)')","SELECT DISTINCT AVG(`price`) OVER () AS `avg_price_`
FROM
  (SELECT *
   FROM `df_wine` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_appellations`
           WHERE (`county` = 'Sonoma')) AS RHS
        WHERE (LHS.appelation = RHS.appelation) ))
ORDER BY avg_price_;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/wine_1/0028,"mutate(input0, 'meanprice = mean(price, na.rm = T)'), filter(line0, ""grape == 'Zinfandel' & year == 2009L"")","SELECT `price` AS `avg_price_`,
       `cases` AS `avg_cases_`
FROM
  (SELECT `no`,
          `grape`,
          `winery`,
          `appelation`,
          `state`,
          `name`,
          `year`,
          `price`,
          `score`,
          `cases`,
          `drink`,
          AVG(`price`) OVER () AS `meanprice`
   FROM `df_wine`)
WHERE (`grape` = 'Zinfandel'
       AND YEAR = 2009)
ORDER BY avg_price_;",2,7,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/wrestler/0002,"intersect(input0, input0, 'name')","SELECT name
FROM
  (SELECT name
   FROM df_wrestler INTERSECT SELECT name
   FROM df_wrestler)
ORDER BY name;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/wrestler/0017,"cross_join(input1, input0, 'wrestler_id <= wrestler_id.other & wrestler_id == wrestler_id.other'), anti_join(input0, line0, ""'days_held'"")","SELECT name
FROM
  (SELECT *
   FROM df_wrestler AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT LHS.elimination_id AS elimination_id,
                     LHS.wrestler_id AS wrestler_id,
                     LHS.team AS team,
                     LHS.eliminated_by AS eliminated_by,
                     LHS.elimination_move AS elimination_move,
                     LHS.time AS TIME,
                     RHS.wrestler_id AS wrestler_id_other,
                     RHS.name AS name,
                     RHS.reign AS reign,
                     RHS.days_held AS days_held,
                     RHS.location AS LOCATION,
                     RHS.event AS event
              FROM df_elimination AS LHS
              CROSS JOIN df_wrestler AS RHS)
           WHERE (wrestler_id <= wrestler_id_other
                  AND wrestler_id = wrestler_id_other)) AS RHS
        WHERE (LHS.days_held = RHS.days_held) ))
ORDER BY name;",2,16,5,0,5,0,3,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
spider/wrestler/0003,"limit(input0, 'name')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_wrestler
      ORDER BY name)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/wrestler/0013,df_wrestler,"SELECT reign,
       days_held
FROM df_wrestler
ORDER BY reign;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/wrestler/0006,"filter(input0, ""team == 'Team Orton'""), intersect(line0, input0, 'elimination_move')","SELECT `elimination_move`
FROM
  (SELECT `elimination_move`
   FROM `df_elimination`
   WHERE (`team` = 'Team Orton') INTERSECT
     SELECT elimination_move
     FROM df_elimination)
ORDER BY elimination_move;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/wrestler/0004,"filter(input0, ""location != 'Tokyo , Japan'"")","SELECT DISTINCT `reign`
FROM `df_wrestler`
WHERE (`location` != 'Tokyo , Japan')
ORDER BY reign;",1,4,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/wrestler/0012,"summarise(input0, 'n = n()', ""'team'""), semi_join(line0, input0), filter(line1, 'n >= 3L')","SELECT team
FROM
  (SELECT *
   FROM
     (SELECT team,
             COUNT() AS n
      FROM df_elimination
      GROUP BY team) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_elimination AS RHS
        WHERE (LHS.team = RHS.team) ))
WHERE (n >= 3)
ORDER BY team;",3,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0
spider/wrestler/0015,"summarise(input0, 'n = n()', ""'days_held','event'""), limit(line0, 'n')","SELECT days_held AS reign
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT days_held,
                event,
                COUNT() AS n
         FROM df_wrestler
         GROUP BY days_held,
                  event)
      ORDER BY n)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/wrestler/0005,df_wrestler,"SELECT name,
       LOCATION
FROM df_wrestler
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/wrestler/0016,"summarise(input0, 'n = n()', ""'days_held','location'""), limit(line0, 'n')","SELECT LOCATION
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT days_held,
                LOCATION,
                COUNT() AS n
         FROM df_wrestler
         GROUP BY days_held,
                  LOCATION)
      ORDER BY n)
   LIMIT 2);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/wrestler/0018,"filter(input0, ""eliminated_by == 'Orton' | eliminated_by == 'Benjamin'"")","SELECT DISTINCT `team`
FROM `df_elimination`
WHERE (`eliminated_by` = 'Orton'
       OR `eliminated_by` = 'Benjamin')
ORDER BY team;",1,5,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/wrestler/0020,"filter(input0, ""eliminated_by == 'Punk' | eliminated_by == 'Orton'"")","SELECT `time`
FROM `df_elimination`
WHERE (`eliminated_by` = 'Punk'
       OR `eliminated_by` = 'Orton')
ORDER BY TIME;",1,5,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/wrestler/0019,"summarise(input0, 'n_distinct = n_distinct(team)', '')","SELECT n_distinct AS count__distinct_team_
FROM
  (SELECT COUNT(DISTINCT team) AS n_distinct
   FROM df_elimination)
ORDER BY count__distinct_team_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/wrestler/0001,"summarise(input0, 'n = n()', ""'reign','wrestler_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT reign,
          wrestler_id,
          COUNT() AS n
   FROM df_wrestler
   GROUP BY reign,
            wrestler_id)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/wrestler/0014,"inner_join(input0, input0, ""'reign' = 'days_held'"")","SELECT DISTINCT name_other AS name
FROM
  (SELECT LHS.wrestler_id AS wrestler_id,
          LHS.name AS name,
          LHS.reign AS reign,
          LHS.days_held AS days_held,
          LHS.location AS LOCATION,
          LHS.event AS event,
          RHS.wrestler_id AS wrestler_id_other,
          RHS.name AS name_other,
          RHS.reign AS reign_other,
          RHS.location AS location_other,
          RHS.event AS event_other
   FROM df_wrestler AS LHS
   INNER JOIN df_wrestler AS RHS ON (LHS.reign = RHS.days_held))
ORDER BY name;",1,6,2,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/wrestler/0011,"summarise(input0, 'n = n()', ""'team'"")","SELECT team,
       n AS count___
FROM
  (SELECT team,
          COUNT() AS n
   FROM df_elimination
   GROUP BY team)
ORDER BY team;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_orders/0002,"limit(input0, 'date_order_placed')","SELECT order_id,
       customer_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_orders
      ORDER BY date_order_placed)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_orders/0017,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'product_details','product_id'"")","SELECT n AS count___,
       product_id
FROM
  (SELECT product_details,
          product_id,
          COUNT() AS n
   FROM
     (SELECT LHS.order_id AS order_id,
             LHS.customer_id AS customer_id,
             LHS.order_status AS order_status,
             LHS.date_order_placed AS date_order_placed,
             LHS.order_details AS order_details,
             LHS.product_id AS product_id,
             LHS.product_name AS product_name,
             LHS.product_details AS product_details,
             RHS.order_item_id AS order_item_id,
             RHS.order_item_status AS order_item_status,
             RHS.order_item_details AS order_item_details
      FROM
        (SELECT LHS.order_id AS order_id,
                LHS.customer_id AS customer_id,
                LHS.order_status AS order_status,
                LHS.date_order_placed AS date_order_placed,
                LHS.order_details AS order_details,
                RHS.product_id AS product_id,
                RHS.product_name AS product_name,
                RHS.product_details AS product_details
         FROM df_orders AS LHS
         CROSS JOIN df_products AS RHS) AS LHS
      INNER JOIN df_order_items AS RHS ON (LHS.order_id = RHS.order_id
                                           AND LHS.product_id = RHS.product_id))
   GROUP BY product_details,
            product_id)
ORDER BY count___;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
spider/tracking_orders/0008,"inner_join(input0, input1, ""'customer_id'""), summarise(line0, 'n = n()', '')","SELECT n AS customer_id
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT LHS.customer_id AS customer_id,
             LHS.customer_name AS customer_name,
             LHS.customer_details AS customer_details,
             RHS.order_id AS order_id,
             RHS.order_status AS order_status,
             RHS.date_order_placed AS date_order_placed,
             RHS.order_details AS order_details
      FROM df_customers AS LHS
      INNER JOIN df_orders AS RHS ON (LHS.customer_id = RHS.customer_id)))
ORDER BY customer_id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/tracking_orders/0003,"filter(input0, 'shipment_tracking_number == 3452L'), filter(line0, 'shipment_tracking_number == 3452L')","SELECT order_id
FROM
  (SELECT *
   FROM df_shipments
   WHERE (shipment_tracking_number = 3452))
WHERE (shipment_tracking_number = 3452)
ORDER BY order_id;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/tracking_orders/0027,"left_join(input1, input0), summarise(line0, 'n = n()', ""'customer_name','order_details'""), filter(line1, 'n >= 2L')","SELECT customer_name,
       n AS count___
FROM
  (SELECT customer_name,
          order_details,
          COUNT() AS n
   FROM
     (SELECT LHS.order_id AS order_id,
             LHS.customer_id AS customer_id,
             LHS.order_status AS order_status,
             LHS.date_order_placed AS date_order_placed,
             LHS.order_details AS order_details,
             RHS.customer_name AS customer_name,
             RHS.customer_details AS customer_details
      FROM df_orders AS LHS
      LEFT JOIN df_customers AS RHS ON (LHS.customer_id = RHS.customer_id))
   GROUP BY customer_name,
            order_details)
WHERE (n >= 2)
ORDER BY customer_name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/tracking_orders/0030,"natural_join4(input0, input1, input2, input3), filter(line0, ""order_item_status != 'Cancel' | product_name == 'food'""), summarise(line1, 'n_distinct = n_distinct(product_name)', ""'customer_name','order_item_status'""), filter(line2, ""order_item_status == 'Cancel' & n_distinct <= 1L"")","SELECT `customer_name`
FROM
  (SELECT `customer_name`,
          `order_item_status`,
          COUNT(DISTINCT `product_name`) AS `n_distinct`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`customer_id` AS `customer_id`,
                `LHS`.`customer_name` AS `customer_name`,
                `LHS`.`customer_details` AS `customer_details`,
                `LHS`.`order_id` AS `order_id`,
                `LHS`.`order_status` AS `order_status`,
                `LHS`.`date_order_placed` AS `date_order_placed`,
                `LHS`.`order_details` AS `order_details`,
                `LHS`.`product_id` AS `product_id`,
                `LHS`.`product_name` AS `product_name`,
                `LHS`.`product_details` AS `product_details`,
                `RHS`.`order_item_id` AS `order_item_id`,
                `RHS`.`order_item_status` AS `order_item_status`,
                `RHS`.`order_item_details` AS `order_item_details`
         FROM
           (SELECT `LHS`.`customer_id` AS `customer_id`,
                   `LHS`.`customer_name` AS `customer_name`,
                   `LHS`.`customer_details` AS `customer_details`,
                   `LHS`.`order_id` AS `order_id`,
                   `LHS`.`order_status` AS `order_status`,
                   `LHS`.`date_order_placed` AS `date_order_placed`,
                   `LHS`.`order_details` AS `order_details`,
                   `RHS`.`product_id` AS `product_id`,
                   `RHS`.`product_name` AS `product_name`,
                   `RHS`.`product_details` AS `product_details`
            FROM
              (SELECT `LHS`.`customer_id` AS `customer_id`,
                      `LHS`.`customer_name` AS `customer_name`,
                      `LHS`.`customer_details` AS `customer_details`,
                      `RHS`.`order_id` AS `order_id`,
                      `RHS`.`order_status` AS `order_status`,
                      `RHS`.`date_order_placed` AS `date_order_placed`,
                      `RHS`.`order_details` AS `order_details`
               FROM `df_customers` AS `LHS`
               INNER JOIN `df_orders` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`)) AS `LHS`
            CROSS JOIN `df_products` AS `RHS`) AS `LHS`
         INNER JOIN `df_order_items` AS `RHS` ON (`LHS`.`order_id` = `RHS`.`order_id`
                                                  AND `LHS`.`product_id` = `RHS`.`product_id`))
      WHERE (`order_item_status` != 'Cancel'
             OR `product_name` = 'food'))
   GROUP BY `customer_name`,
            `order_item_status`)
WHERE (`order_item_status` = 'Cancel'
       AND n_distinct <= 1)
ORDER BY customer_name;",4,18,6,1,6,2,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0
spider/tracking_orders/0013,"natural_join(input0, input1), filter(line0, ""order_status != 'On Road' & order_status == 'Shipped'""), inner_join(line1, line0, ""'customer_id' = 'order_id','order_status' = 'order_status'"")","SELECT `customer_name`
FROM
  (SELECT `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`customer_name` AS `customer_name`,
          `LHS`.`customer_details` AS `customer_details`,
          `LHS`.`order_id` AS `order_id`,
          `LHS`.`order_status` AS `order_status`,
          `LHS`.`date_order_placed` AS `date_order_placed`,
          `LHS`.`order_details` AS `order_details`,
          `RHS`.`customer_id` AS `customer_id_other`,
          `RHS`.`customer_name` AS `customer_name_other`,
          `RHS`.`customer_details` AS `customer_details_other`,
          `RHS`.`date_order_placed` AS `date_order_placed_other`,
          `RHS`.`order_details` AS `order_details_other`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`customer_id` AS `customer_id`,
                `LHS`.`customer_name` AS `customer_name`,
                `LHS`.`customer_details` AS `customer_details`,
                `RHS`.`order_id` AS `order_id`,
                `RHS`.`order_status` AS `order_status`,
                `RHS`.`date_order_placed` AS `date_order_placed`,
                `RHS`.`order_details` AS `order_details`
         FROM `df_customers` AS `LHS`
         INNER JOIN `df_orders` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`))
      WHERE (`order_status` != 'On Road'
             AND `order_status` = 'Shipped')) AS LHS
   INNER JOIN
     (SELECT LHS.customer_id AS customer_id,
             LHS.customer_name AS customer_name,
             LHS.customer_details AS customer_details,
             RHS.order_id AS order_id,
             RHS.order_status AS order_status,
             RHS.date_order_placed AS date_order_placed,
             RHS.order_details AS order_details
      FROM df_customers AS LHS
      INNER JOIN df_orders AS RHS ON (LHS.customer_id = RHS.customer_id)) AS RHS ON (LHS.customer_id = RHS.order_id
                                                                                     AND LHS.order_status = RHS.order_status))
ORDER BY customer_name;",3,14,5,0,5,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0
spider/tracking_orders/0006,"filter(input1, ""order_status == 'On Road'""), semi_join(input0, line0)","SELECT `customer_details`
FROM
  (SELECT *
   FROM `df_customers` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_orders`
           WHERE (`order_status` = 'On Road')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_details;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/tracking_orders/0004,"filter(input0, 'product_id <= 11L'), filter(line0, 'product_id == 11L')","SELECT order_item_id
FROM
  (SELECT *
   FROM df_order_items
   WHERE (product_id <= 11))
WHERE (product_id = 11)
ORDER BY order_item_id;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/tracking_orders/0012,"filter(input0, ""date_order_placed >= parse_datetime('1975-01-01') & date_order_placed < parse_datetime('1976-01-01')""), semi_join(input1, line0)","SELECT `product_id`
FROM
  (SELECT *
   FROM `df_order_items` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_orders`
           WHERE (`date_order_placed` >= parse_datetime('1975-01-01')
                  AND `date_order_placed` < parse_datetime('1976-01-01'))) AS RHS
        WHERE (LHS.order_id = RHS.order_id) ))
ORDER BY product_id;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/tracking_orders/0026,"filter(input0, ""invoice_date < parse_datetime('1989-09-03') | invoice_date > parse_datetime('2007-12-25')""), inner_join(input0, line0, ""'invoice_date','invoice_number'"")","SELECT DISTINCT `invoice_details`
FROM
  (SELECT `LHS`.`invoice_number` AS `invoice_number`,
          `LHS`.`invoice_date` AS `invoice_date`,
          `LHS`.`invoice_details` AS `invoice_details`,
          `RHS`.`invoice_details` AS `invoice_details_other`
   FROM `df_invoices` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_invoices`
      WHERE (`invoice_date` < parse_datetime('1989-09-03')
             OR `invoice_date` > parse_datetime('2007-12-25'))) AS RHS ON (LHS.invoice_date = RHS.invoice_date
                                                                           AND LHS.invoice_number = RHS.invoice_number))
ORDER BY invoice_details;",2,10,3,1,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/tracking_orders/0015,"filter(input1, 'shipment_tracking_number == 3452L'), semi_join(input0, line0)","SELECT date_order_placed
FROM
  (SELECT *
   FROM df_orders AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_shipments
           WHERE (shipment_tracking_number = 3452)) AS RHS
        WHERE (LHS.order_id = RHS.order_id) ))
ORDER BY date_order_placed;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/tracking_orders/0005,"filter(input1, ""order_status == 'Packing'""), natural_join(input0, line0)","SELECT DISTINCT `customer_name`
FROM
  (SELECT `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`customer_name` AS `customer_name`,
          `LHS`.`customer_details` AS `customer_details`,
          `RHS`.`order_id` AS `order_id`,
          `RHS`.`order_status` AS `order_status`,
          `RHS`.`date_order_placed` AS `date_order_placed`,
          `RHS`.`order_details` AS `order_details`
   FROM `df_customers` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_orders`
      WHERE (`order_status` = 'Packing')) AS RHS ON (LHS.customer_id = RHS.customer_id))
ORDER BY customer_name;",2,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_orders/0016,"filter(input1, 'invoice_number == 10L'), natural_join(input0, line0)","SELECT date_order_placed
FROM
  (SELECT LHS.order_id AS order_id,
          LHS.customer_id AS customer_id,
          LHS.order_status AS order_status,
          LHS.date_order_placed AS date_order_placed,
          LHS.order_details AS order_details,
          RHS.shipment_id AS shipment_id,
          RHS.invoice_number AS invoice_number,
          RHS.shipment_tracking_number AS shipment_tracking_number,
          RHS.shipment_date AS shipment_date,
          RHS.other_shipment_details AS other_shipment_details
   FROM df_orders AS LHS
   INNER JOIN
     (SELECT *
      FROM df_shipments
      WHERE (invoice_number = 10)) AS RHS ON (LHS.order_id = RHS.order_id))
ORDER BY date_order_placed;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_orders/0018,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'product_id','product_name'"")","SELECT product_name,
       n AS count___
FROM
  (SELECT product_id,
          product_name,
          COUNT() AS n
   FROM
     (SELECT LHS.order_id AS order_id,
             LHS.customer_id AS customer_id,
             LHS.order_status AS order_status,
             LHS.date_order_placed AS date_order_placed,
             LHS.order_details AS order_details,
             LHS.product_id AS product_id,
             LHS.product_name AS product_name,
             LHS.product_details AS product_details,
             RHS.order_item_id AS order_item_id,
             RHS.order_item_status AS order_item_status,
             RHS.order_item_details AS order_item_details
      FROM
        (SELECT LHS.order_id AS order_id,
                LHS.customer_id AS customer_id,
                LHS.order_status AS order_status,
                LHS.date_order_placed AS date_order_placed,
                LHS.order_details AS order_details,
                RHS.product_id AS product_id,
                RHS.product_name AS product_name,
                RHS.product_details AS product_details
         FROM df_orders AS LHS
         CROSS JOIN df_products AS RHS) AS LHS
      INNER JOIN df_order_items AS RHS ON (LHS.order_id = RHS.order_id
                                           AND LHS.product_id = RHS.product_id))
   GROUP BY product_id,
            product_name)
ORDER BY product_name;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
spider/tracking_orders/0020,"mutate(input0, 'maxshipment_date = max(shipment_date)'), filter(line0, 'maxshipment_date == shipment_date')","SELECT order_id
FROM
  (SELECT shipment_id,
          order_id,
          invoice_number,
          shipment_tracking_number,
          shipment_date,
          other_shipment_details,
          MAX(shipment_date) OVER () AS maxshipment_date
   FROM df_shipments)
WHERE (maxshipment_date = shipment_date)
ORDER BY order_id;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/tracking_orders/0019,"filter(input0, ""shipment_date >= parse_datetime('2000-01-01')"")","SELECT `order_id`
FROM `df_shipments`
WHERE (`shipment_date` >= parse_datetime('2000-01-01'))
ORDER BY order_id;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_orders/0007,"summarise(input1, 'n = n()', ""'customer_id','date_order_placed'""), left_join(input0, line0), limit(line1, 'desc(customer_id)')","SELECT customer_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.customer_name AS customer_name,
                LHS.customer_details AS customer_details,
                RHS.date_order_placed AS date_order_placed,
                RHS.n AS n
         FROM df_customers AS LHS
         LEFT JOIN
           (SELECT customer_id,
                   date_order_placed,
                   COUNT() AS n
            FROM df_orders
            GROUP BY customer_id,
                     date_order_placed) AS RHS ON (LHS.customer_id = RHS.customer_id))
      ORDER BY customer_id DESC)
   LIMIT 1);",2,13,5,0,5,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/tracking_orders/0024,"mutate(input1, 'n = n()'), inner_join(input0, line0, ""'customer_id' = 'n'"")","SELECT DISTINCT customer_name
FROM
  (SELECT LHS.customer_id AS customer_id,
          LHS.customer_name AS customer_name,
          LHS.customer_details AS customer_details,
          RHS.order_id AS order_id,
          RHS.customer_id AS customer_id_other,
          RHS.order_status AS order_status,
          RHS.date_order_placed AS date_order_placed,
          RHS.order_details AS order_details
   FROM df_customers AS LHS
   INNER JOIN
     (SELECT order_id,
             customer_id,
             order_status,
             date_order_placed,
             order_details,
             COUNT(*) OVER () AS n
      FROM df_orders) AS RHS ON (LHS.customer_id = RHS.n))
ORDER BY customer_name;",2,9,3,1,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/tracking_orders/0021,df_products,"SELECT DISTINCT product_name
FROM df_products
ORDER BY product_name;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_orders/0023,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'order_item_details'"")","SELECT n AS order_id
FROM
  (SELECT order_item_details,
          COUNT() AS n
   FROM
     (SELECT LHS.order_id AS order_id,
             LHS.customer_id AS customer_id,
             LHS.order_status AS order_status,
             LHS.date_order_placed AS date_order_placed,
             LHS.order_details AS order_details,
             RHS.order_item_id AS order_item_id,
             RHS.product_id AS product_id,
             RHS.order_item_status AS order_item_status,
             RHS.order_item_details AS order_item_details
      FROM df_orders AS LHS
      INNER JOIN df_order_items AS RHS ON (LHS.order_id = RHS.order_id))
   GROUP BY order_item_details)
ORDER BY order_id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_orders/0001,"inner_join(input0, input0, ""'order_id' = 'customer_id','date_order_placed' = 'date_order_placed'"")","SELECT order_id
FROM
  (SELECT LHS.order_id AS order_id,
          LHS.customer_id AS customer_id,
          LHS.order_status AS order_status,
          LHS.date_order_placed AS date_order_placed,
          LHS.order_details AS order_details,
          RHS.order_id AS order_id_other,
          RHS.order_status AS order_status_other,
          RHS.order_details AS order_details_other
   FROM df_orders AS LHS
   INNER JOIN df_orders AS RHS ON (LHS.order_id = RHS.customer_id
                                   AND LHS.date_order_placed = RHS.date_order_placed))
ORDER BY order_id;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/tracking_orders/0009,"filter(input0, ""customer_name == 'Jeramie'""), natural_join(input1, line0)","SELECT `order_id`,
       `order_status`
FROM
  (SELECT `LHS`.`order_id` AS `order_id`,
          `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`order_status` AS `order_status`,
          `LHS`.`date_order_placed` AS `date_order_placed`,
          `LHS`.`order_details` AS `order_details`,
          `RHS`.`customer_name` AS `customer_name`,
          `RHS`.`customer_details` AS `customer_details`
   FROM `df_orders` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_customers`
      WHERE (`customer_name` = 'Jeramie')) AS RHS ON (LHS.customer_id = RHS.customer_id))
ORDER BY order_id;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_orders/0025,"filter(input0, ""invoice_date <= parse_datetime('1989-09-03') | invoice_date > parse_datetime('2007-12-25')""), intersect(input0, line0, 'invoice_number')","SELECT `invoice_number`
FROM
  (SELECT `invoice_number`
   FROM `df_invoices` INTERSECT SELECT `invoice_number`
   FROM `df_invoices`
   WHERE (`invoice_date` <= parse_datetime('1989-09-03')
          OR `invoice_date` > parse_datetime('2007-12-25')))
ORDER BY invoice_number;",2,9,3,0,3,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/tracking_orders/0011,"left_join(input1, input0), filter(line0, ""date_order_placed >= parse_datetime('2009-01-01') & date_order_placed <= parse_datetime('2010-01-01')"")","SELECT `customer_name`
FROM
  (SELECT `LHS`.`order_id` AS `order_id`,
          `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`order_status` AS `order_status`,
          `LHS`.`date_order_placed` AS `date_order_placed`,
          `LHS`.`order_details` AS `order_details`,
          `RHS`.`customer_name` AS `customer_name`,
          `RHS`.`customer_details` AS `customer_details`
   FROM `df_orders` AS `LHS`
   LEFT JOIN `df_customers` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`))
WHERE (`date_order_placed` >= parse_datetime('2009-01-01')
       AND `date_order_placed` <= parse_datetime('2010-01-01'))
ORDER BY customer_name;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
spider/tracking_orders/0029,"natural_join4(input0, input1, input2, input3), summarise(line0, 'n = n()', ""'customer_name','product_name'""), filter(line1, ""product_name == 'food' & n == 1L"")","SELECT `customer_name`
FROM
  (SELECT `customer_name`,
          `product_name`,
          COUNT() AS `n`
   FROM
     (SELECT `LHS`.`customer_id` AS `customer_id`,
             `LHS`.`customer_name` AS `customer_name`,
             `LHS`.`customer_details` AS `customer_details`,
             `LHS`.`order_id` AS `order_id`,
             `LHS`.`order_status` AS `order_status`,
             `LHS`.`date_order_placed` AS `date_order_placed`,
             `LHS`.`order_details` AS `order_details`,
             `LHS`.`product_id` AS `product_id`,
             `LHS`.`product_name` AS `product_name`,
             `LHS`.`product_details` AS `product_details`,
             `RHS`.`order_item_id` AS `order_item_id`,
             `RHS`.`order_item_status` AS `order_item_status`,
             `RHS`.`order_item_details` AS `order_item_details`
      FROM
        (SELECT `LHS`.`customer_id` AS `customer_id`,
                `LHS`.`customer_name` AS `customer_name`,
                `LHS`.`customer_details` AS `customer_details`,
                `LHS`.`order_id` AS `order_id`,
                `LHS`.`order_status` AS `order_status`,
                `LHS`.`date_order_placed` AS `date_order_placed`,
                `LHS`.`order_details` AS `order_details`,
                `RHS`.`product_id` AS `product_id`,
                `RHS`.`product_name` AS `product_name`,
                `RHS`.`product_details` AS `product_details`
         FROM
           (SELECT `LHS`.`customer_id` AS `customer_id`,
                   `LHS`.`customer_name` AS `customer_name`,
                   `LHS`.`customer_details` AS `customer_details`,
                   `RHS`.`order_id` AS `order_id`,
                   `RHS`.`order_status` AS `order_status`,
                   `RHS`.`date_order_placed` AS `date_order_placed`,
                   `RHS`.`order_details` AS `order_details`
            FROM `df_customers` AS `LHS`
            INNER JOIN `df_orders` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`)) AS `LHS`
         CROSS JOIN `df_products` AS `RHS`) AS `LHS`
      INNER JOIN `df_order_items` AS `RHS` ON (`LHS`.`order_id` = `RHS`.`order_id`
                                               AND `LHS`.`product_id` = `RHS`.`product_id`))
   GROUP BY `customer_name`,
            `product_name`)
WHERE (`product_name` = 'food'
       AND n = 1)
ORDER BY customer_name;",3,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
spider/tracking_orders/0010,"filter(input0, ""customer_name == 'Jeramie'""), natural_join(input1, line0)","SELECT `date_order_placed`
FROM
  (SELECT `LHS`.`order_id` AS `order_id`,
          `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`order_status` AS `order_status`,
          `LHS`.`date_order_placed` AS `date_order_placed`,
          `LHS`.`order_details` AS `order_details`,
          `RHS`.`customer_name` AS `customer_name`,
          `RHS`.`customer_details` AS `customer_details`
   FROM `df_orders` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_customers`
      WHERE (`customer_name` = 'Jeramie')) AS RHS ON (LHS.customer_id = RHS.customer_id))
ORDER BY date_order_placed;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_orders/0028,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'customer_id','customer_name'""), filter(line1, 'n <= 2L')","SELECT customer_name
FROM
  (SELECT customer_id,
          customer_name,
          COUNT() AS n
   FROM
     (SELECT LHS.customer_id AS customer_id,
             LHS.customer_name AS customer_name,
             LHS.customer_details AS customer_details,
             RHS.order_id AS order_id,
             RHS.order_status AS order_status,
             RHS.date_order_placed AS date_order_placed,
             RHS.order_details AS order_details
      FROM df_customers AS LHS
      INNER JOIN df_orders AS RHS ON (LHS.customer_id = RHS.customer_id))
   GROUP BY customer_id,
            customer_name)
WHERE (n <= 2)
ORDER BY customer_name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/candidate_poll/0002,"summarise(input0, 'n = n()', ""'oppose_rate','poll_source'""), limit(line0, 'desc(oppose_rate)')","SELECT poll_source
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT oppose_rate,
                poll_source,
                COUNT() AS n
         FROM df_candidate
         GROUP BY oppose_rate,
                  poll_source)
      ORDER BY oppose_rate DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/candidate_poll/0008,"filter(input0, ""sex == 'M'""), mutate(line0, 'meanheight = mean(height, na.rm = T)'), mutate(line1, 'meanweight = mean(weight, na.rm = T)')","SELECT DISTINCT `meanheight` AS `avg_height_`,
                AVG(`weight`) OVER () AS `avg_weight_`
FROM
  (SELECT `people_id`,
          `sex`,
          `name`,
          `date_of_birth`,
          `height`,
          `weight`,
          AVG(`height`) OVER () AS `meanheight`
   FROM
     (SELECT *
      FROM `df_people`
      WHERE (`sex` = 'M')))
ORDER BY avg_height_;",3,10,3,1,3,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0
spider/candidate_poll/0003,"limit(input0, 'consider_rate')","SELECT support_rate
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_candidate
      ORDER BY consider_rate)
   LIMIT 3);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/candidate_poll/0013,"summarise(input0, 'meanunsure_rate = mean(unsure_rate, na.rm = T)', ""'people_id','poll_source'""), left_join(input1, line0), limit(line1, 'desc(weight)')","SELECT sex
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.people_id AS people_id,
                LHS.sex AS sex,
                LHS.name AS name,
                LHS.date_of_birth AS date_of_birth,
                LHS.height AS height,
                LHS.weight AS weight,
                RHS.poll_source AS poll_source,
                RHS.meanunsure_rate AS meanunsure_rate
         FROM df_people AS LHS
         LEFT JOIN
           (SELECT people_id,
                   poll_source,
                   AVG(unsure_rate) AS meanunsure_rate
            FROM df_candidate
            GROUP BY people_id,
                     poll_source) AS RHS ON (LHS.people_id = RHS.people_id))
      ORDER BY weight DESC)
   LIMIT 1);",2,13,5,0,5,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/candidate_poll/0006,"limit(input0, 'desc(date)')","SELECT poll_source
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_candidate
      ORDER BY date DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/candidate_poll/0004,"limit(input0, 'support_rate')","SELECT candidate_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_candidate
      ORDER BY support_rate)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/candidate_poll/0012,"mutate(input0, 'oppose_rate = min(oppose_rate)'), natural_join3(input0, input1, line0)","SELECT name,
       sex,
       oppose_rate AS min_oppose_rate_
FROM
  (SELECT LHS.candidate_id AS candidate_id,
          LHS.people_id AS people_id,
          LHS.poll_source AS poll_source,
          LHS.date AS date,
          LHS.support_rate AS support_rate,
          LHS.consider_rate AS consider_rate,
          LHS.oppose_rate AS oppose_rate,
          LHS.unsure_rate AS unsure_rate,
          LHS.sex AS sex,
          LHS.name AS name,
          LHS.date_of_birth AS date_of_birth,
          LHS.height AS height,
          LHS.weight AS weight
   FROM
     (SELECT LHS.candidate_id AS candidate_id,
             LHS.people_id AS people_id,
             LHS.poll_source AS poll_source,
             LHS.date AS date,
             LHS.support_rate AS support_rate,
             LHS.consider_rate AS consider_rate,
             LHS.oppose_rate AS oppose_rate,
             LHS.unsure_rate AS unsure_rate,
             RHS.sex AS sex,
             RHS.name AS name,
             RHS.date_of_birth AS date_of_birth,
             RHS.height AS height,
             RHS.weight AS weight
      FROM df_candidate AS LHS
      INNER JOIN df_people AS RHS ON (LHS.people_id = RHS.people_id)) AS LHS
   INNER JOIN
     (SELECT candidate_id,
             people_id,
             poll_source, date, support_rate,
                                consider_rate,
                                MIN(oppose_rate) OVER () AS oppose_rate,
                                                      unsure_rate
      FROM df_candidate) AS RHS ON (LHS.candidate_id = RHS.candidate_id
                                    AND LHS.people_id = RHS.people_id
                                    AND LHS.poll_source = RHS.poll_source
                                    AND LHS.date = RHS.date
                                    AND LHS.support_rate = RHS.support_rate
                                    AND LHS.consider_rate = RHS.consider_rate
                                    AND LHS.oppose_rate = RHS.oppose_rate
                                    AND LHS.unsure_rate = RHS.unsure_rate))
ORDER BY name;",2,11,4,0,4,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
spider/candidate_poll/0015,"semi_join(input1, input0)","SELECT name
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_candidate AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY name;",1,9,3,0,3,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
spider/candidate_poll/0016,"filter(input0, 'weight >= 85'), summarise(line0, 'n_distinct = n_distinct(weight)', ""'sex'"")","SELECT n_distinct AS count___,
       sex
FROM
  (SELECT sex,
          COUNT(DISTINCT weight) AS n_distinct
   FROM
     (SELECT *
      FROM df_people
      WHERE (weight >= 85.0))
   GROUP BY sex)
ORDER BY count___;",2,8,3,1,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/candidate_poll/0018,"filter(input1, ""sex == 'F'""), semi_join(line0, input0)","SELECT `name`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_people`
      WHERE (`sex` = 'F')) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_candidate AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/candidate_poll/0020,df_people,"SELECT people_id,
       sex,
       name,
       date_of_birth,
       height,
       weight
FROM df_people
ORDER BY people_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/candidate_poll/0019,"mutate(input0, 'meanheight = mean(height, na.rm = T)'), filter(line0, 'meanheight >= height')","SELECT name
FROM
  (SELECT people_id,
          sex,
          name,
          date_of_birth,
          height,
          weight,
          AVG(height) OVER () AS meanheight
   FROM df_people)
WHERE (meanheight >= height)
ORDER BY name;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/candidate_poll/0007,df_people,"SELECT name
FROM df_people
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/candidate_poll/0001,"summarise(input0, 'n = n()', ""'consider_rate','unsure_rate'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT consider_rate,
          unsure_rate,
          COUNT() AS n
   FROM df_candidate
   GROUP BY consider_rate,
            unsure_rate)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/candidate_poll/0014,"anti_join(input1, input0, '')","SELECT name
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_candidate AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/candidate_poll/0009,"filter(input0, 'height > 200 | height < 190'), semi_join(input0, line0)","SELECT name
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_people
           WHERE (height > 200.0
                  OR height < 190.0)) AS RHS
        WHERE (LHS.people_id = RHS.people_id
               AND LHS.sex = RHS.sex
               AND LHS.name = RHS.name
               AND LHS.date_of_birth = RHS.date_of_birth
               AND LHS.height = RHS.height
               AND LHS.weight = RHS.weight) ))
ORDER BY name;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/candidate_poll/0011,"natural_join(input0, input1), limit(line0, 'consider_rate')","SELECT name,
       sex
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.candidate_id AS candidate_id,
                LHS.people_id AS people_id,
                LHS.poll_source AS poll_source,
                LHS.date AS date,
                LHS.support_rate AS support_rate,
                LHS.consider_rate AS consider_rate,
                LHS.oppose_rate AS oppose_rate,
                LHS.unsure_rate AS unsure_rate,
                RHS.sex AS sex,
                RHS.name AS name,
                RHS.date_of_birth AS date_of_birth,
                RHS.height AS height,
                RHS.weight AS weight
         FROM df_candidate AS LHS
         INNER JOIN df_people AS RHS ON (LHS.people_id = RHS.people_id))
      ORDER BY consider_rate)
   LIMIT 1);",1,10,4,0,4,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/candidate_poll/0010,"summarise(input0, 'weight = min(weight)', ""'sex'""), summarise(input0, 'meanweight = mean(weight, na.rm = T)', ""'sex'""), left_join(line0, line1)","SELECT meanweight AS avg_weight_,
       weight AS min_weight_,
       sex
FROM
  (SELECT LHS.sex AS sex,
          LHS.weight AS weight,
          RHS.meanweight AS meanweight
   FROM
     (SELECT sex,
             MIN(weight) AS weight
      FROM df_people
      GROUP BY sex) AS LHS
   LEFT JOIN
     (SELECT sex,
             AVG(weight) AS meanweight
      FROM df_people
      GROUP BY sex) AS RHS ON (LHS.sex = RHS.sex))
ORDER BY avg_weight_;",3,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0
spider/performance_attendance/0002,df_performance,"SELECT HOST
FROM df_performance
ORDER BY HOST;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/performance_attendance/0008,"summarise(input0, 'n = n()', ""'location'""), cross_join(line0, line0, 'n > n.other')","SELECT DISTINCT LOCATION
FROM
  (SELECT LHS.location AS LOCATION,
          LHS.n AS n,
          RHS.location AS location_other,
          RHS.n AS n_other
   FROM
     (SELECT LOCATION,
             COUNT() AS n
      FROM df_performance
      GROUP BY LOCATION) AS LHS
   CROSS JOIN
     (SELECT LOCATION,
             COUNT() AS n
      FROM df_performance
      GROUP BY LOCATION) AS RHS)
WHERE (n > n_other)
ORDER BY LOCATION;",2,10,4,1,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
spider/performance_attendance/0003,df_performance,"SELECT date, LOCATION
FROM df_performance
ORDER BY date;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/performance_attendance/0006,"limit(input0, 'date')","SELECT date
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_performance
      ORDER BY date)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/performance_attendance/0004,"filter(input0, ""location == 'TD Garden' | location == 'Bell Centre'"")","SELECT `attendance`
FROM `df_performance`
WHERE (`location` = 'TD Garden'
       OR `location` = 'Bell Centre')
ORDER BY attendance;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/performance_attendance/0015,"cross_join(input1, input0, 'member_id == member_id.other'), anti_join(input0, line0, ""'name','nationality'"")","SELECT name
FROM
  (SELECT *
   FROM df_member AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT LHS.member_id AS member_id,
                     LHS.performance_id AS performance_id,
                     LHS.num_of_pieces AS num_of_pieces,
                     RHS.member_id AS member_id_other,
                     RHS.name AS name,
                     RHS.nationality AS nationality,
                     RHS.role AS ROLE
              FROM df_member_attendance AS LHS
              CROSS JOIN df_member AS RHS)
           WHERE (member_id = member_id_other)) AS RHS
        WHERE (LHS.name = RHS.name
               AND LHS.nationality = RHS.nationality) ))
ORDER BY name;",2,15,5,0,5,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
spider/performance_attendance/0005,"summarise(input0, 'meanattendance = mean(attendance, na.rm = T)', ""'attendance','date'""), summarise(line0, 'meanattendance = mean(attendance, na.rm = T)', '')","SELECT meanattendance AS avg_attendance_
FROM
  (SELECT AVG(attendance) AS meanattendance
   FROM
     (SELECT attendance, date, AVG(attendance) AS meanattendance
      FROM df_performance
      GROUP BY attendance, date))
ORDER BY avg_attendance_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/performance_attendance/0007,"summarise(input0, 'n = n()', ""'date','location'""), summarise(line0, 'n = n()', ""'location'"")","SELECT LOCATION,
       n AS count___
FROM
  (SELECT LOCATION,
          COUNT() AS n
   FROM
     (SELECT date, LOCATION,
                   COUNT() AS n
      FROM df_performance
      GROUP BY date, LOCATION)
   GROUP BY LOCATION)
ORDER BY LOCATION;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/performance_attendance/0001,"inner_join(input0, input0, ""'attendance'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT LHS.performance_id AS performance_id,
             LHS.date AS date,
             LHS.host AS HOST,
             LHS.location AS LOCATION,
             LHS.attendance AS attendance,
             RHS.performance_id AS performance_id_other,
             RHS.date AS date_other,
             RHS.host AS host_other,
             RHS.location AS location_other
      FROM df_performance AS LHS
      INNER JOIN df_performance AS RHS ON (LHS.attendance = RHS.attendance)))
ORDER BY count___;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/performance_attendance/0009,"summarise(input0, 'n = n()', ""'location'""), filter(line0, 'n == 2L')","SELECT LOCATION
FROM
  (SELECT LOCATION,
          COUNT() AS n
   FROM df_performance
   GROUP BY LOCATION)
WHERE (n = 2)
ORDER BY LOCATION;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0033,"summarise(input0, 'n = n()', ""'date_of_transaction','transaction_type_code'""), limit(line0, 'desc(n)')","SELECT transaction_type_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT date_of_transaction,
                transaction_type_code,
                COUNT() AS n
         FROM df_transactions
         GROUP BY date_of_transaction,
                  transaction_type_code)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0037,"summarise(input1, 'n = n()', ""'investor_id','other_details'""), filter(line0, 'n >= 2L'), left_join(line1, input0)","SELECT investor_id
FROM
  (SELECT LHS.investor_id AS investor_id,
          LHS.other_details AS other_details,
          LHS.n AS n,
          RHS.investor_details AS investor_details
   FROM
     (SELECT *
      FROM
        (SELECT investor_id,
                other_details,
                COUNT() AS n
         FROM df_transactions
         GROUP BY investor_id,
                  other_details)
      WHERE (n >= 2)) AS LHS
   LEFT JOIN df_investors AS RHS ON (LHS.investor_id = RHS.investor_id))
ORDER BY investor_id;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/tracking_share_transactions/0002,df_investors,"SELECT investor_details
FROM df_investors
ORDER BY investor_details;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0017,df_lots,"SELECT lot_details,
       investor_id
FROM df_lots
ORDER BY lot_details;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0008,"filter(input0, ""transaction_type_code == 'SALE'"")","SELECT `date_of_transaction`
FROM `df_transactions`
WHERE (`transaction_type_code` = 'SALE')
ORDER BY date_of_transaction;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0039,"filter(input0, 'amount_of_transaction != 100'), intersect(line0, input0, 'date_of_transaction')","SELECT date_of_transaction
FROM
  (SELECT date_of_transaction
   FROM df_transactions
   WHERE (amount_of_transaction != 100.0) INTERSECT
     SELECT date_of_transaction
     FROM df_transactions)
ORDER BY date_of_transaction;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/tracking_share_transactions/0038,"summarise(input1, 'n = n()', ""'investor_id','transaction_type_code'""), filter(line0, ""transaction_type_code == 'SALE' & n >= 2L""), left_join(line1, input0)","SELECT `investor_id`,
       `investor_details`
FROM
  (SELECT `LHS`.`investor_id` AS `investor_id`,
          `LHS`.`transaction_type_code` AS `transaction_type_code`,
          `LHS`.`n` AS `n`,
          `RHS`.`investor_details` AS `investor_details`
   FROM
     (SELECT *
      FROM
        (SELECT `investor_id`,
                `transaction_type_code`,
                COUNT() AS `n`
         FROM `df_transactions`
         GROUP BY `investor_id`,
                  `transaction_type_code`)
      WHERE (`transaction_type_code` = 'SALE'
             AND n >= 2)) AS LHS
   LEFT JOIN df_investors AS RHS ON (LHS.investor_id = RHS.investor_id))
ORDER BY investor_id;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/tracking_share_transactions/0027,"summarise(input0, 'meanamount_of_transaction = mean(amount_of_transaction, na.rm = T)', ""'investor_id'"")","SELECT investor_id,
       meanamount_of_transaction AS avg_amount_of_transaction_
FROM
  (SELECT investor_id,
          AVG(amount_of_transaction) AS meanamount_of_transaction
   FROM df_transactions
   GROUP BY investor_id)
ORDER BY investor_id;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0022,"filter(input1, ""transaction_type_code != 'PUR'""), anti_join(input2, line0, ''), inner_join(input0, line1, ""'lot_id' = 'transaction_id'"")","SELECT `lot_details`
FROM
  (SELECT `LHS`.`lot_id` AS `lot_id`,
          `LHS`.`investor_id` AS `investor_id`,
          `LHS`.`lot_details` AS `lot_details`,
          `RHS`.`lot_id` AS `lot_id_other`
   FROM `df_lots` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_transactions_lots` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_transactions`
              WHERE (`transaction_type_code` != 'PUR')) AS RHS
           WHERE (LHS.transaction_id = RHS.transaction_id) )) AS RHS ON (LHS.lot_id = RHS.transaction_id))
ORDER BY lot_details;",3,16,5,0,5,1,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0
spider/tracking_share_transactions/0030,"summarise(input0, 'n = n()', ""'investor_id','transaction_type_code'""), filter(line0, ""transaction_type_code == 'SALE'"")","SELECT `investor_id`,
       `n` AS `count___`
FROM
  (SELECT `investor_id`,
          `transaction_type_code`,
          COUNT() AS `n`
   FROM `df_transactions`
   GROUP BY `investor_id`,
            `transaction_type_code`)
WHERE (`transaction_type_code` = 'SALE')
ORDER BY investor_id;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0013,"filter(input0, 'amount_of_transaction >= 100 & amount_of_transaction >= 1000'), cross_join(line0, input0, 'share_count != share_count.other | amount_of_transaction == amount_of_transaction.other')","SELECT DISTINCT date_of_transaction_other AS date_of_transaction
FROM
  (SELECT LHS.transaction_id AS transaction_id,
          LHS.investor_id AS investor_id,
          LHS.transaction_type_code AS transaction_type_code,
          LHS.date_of_transaction AS date_of_transaction,
          LHS.amount_of_transaction AS amount_of_transaction,
          LHS.share_count AS share_count,
          LHS.other_details AS other_details,
          RHS.transaction_id AS transaction_id_other,
          RHS.investor_id AS investor_id_other,
          RHS.transaction_type_code AS transaction_type_code_other,
          RHS.date_of_transaction AS date_of_transaction_other,
          RHS.amount_of_transaction AS amount_of_transaction_other,
          RHS.share_count AS share_count_other,
          RHS.other_details AS other_details_other
   FROM
     (SELECT *
      FROM df_transactions
      WHERE (amount_of_transaction >= 100.0
             AND amount_of_transaction >= 1000.0)) AS LHS
   CROSS JOIN df_transactions AS RHS)
WHERE (share_count != share_count_other
       OR amount_of_transaction = amount_of_transaction_other)
ORDER BY date_of_transaction;",2,10,3,1,3,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
spider/tracking_share_transactions/0004,"summarise(input0, 'maxamount_of_transaction = max(amount_of_transaction)', ""'amount_of_transaction','date_of_transaction'""), summarise(line0, 'amount_of_transaction = max(amount_of_transaction)', '')","SELECT amount_of_transaction AS max_amount_of_transaction_
FROM
  (SELECT MAX(amount_of_transaction) AS amount_of_transaction
   FROM
     (SELECT amount_of_transaction,
             date_of_transaction,
             MAX(amount_of_transaction) AS maxamount_of_transaction
      FROM df_transactions
      GROUP BY amount_of_transaction,
               date_of_transaction))
ORDER BY max_amount_of_transaction_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0012,"summarise(input0, 'amount_of_transaction = max(amount_of_transaction)', ""'other_details','share_count'""), filter(line0, 'amount_of_transaction <= 10000'), mutate(line1, 'share_count = max(share_count)')","SELECT DISTINCT MAX(share_count) OVER () AS max_share_count_
FROM
  (SELECT other_details,
          share_count,
          MAX(amount_of_transaction) AS amount_of_transaction
   FROM df_transactions
   GROUP BY other_details,
            share_count)
WHERE (amount_of_transaction <= 10000.0)
ORDER BY max_share_count_;",3,7,2,1,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0015,"natural_join(input0, input1), cross_join(input1, line0, 'share_count == share_count.other')","SELECT investor_details
FROM
  (SELECT LHS.transaction_id AS transaction_id,
          LHS.investor_id AS investor_id,
          LHS.transaction_type_code AS transaction_type_code,
          LHS.date_of_transaction AS date_of_transaction,
          LHS.amount_of_transaction AS amount_of_transaction,
          LHS.share_count AS share_count,
          LHS.other_details AS other_details,
          RHS.investor_id AS investor_id_other,
          RHS.investor_details AS investor_details,
          RHS.transaction_id AS transaction_id_other,
          RHS.transaction_type_code AS transaction_type_code_other,
          RHS.date_of_transaction AS date_of_transaction_other,
          RHS.amount_of_transaction AS amount_of_transaction_other,
          RHS.share_count AS share_count_other,
          RHS.other_details AS other_details_other
   FROM df_transactions AS LHS
   CROSS JOIN
     (SELECT LHS.investor_id AS investor_id,
             LHS.investor_details AS investor_details,
             RHS.transaction_id AS transaction_id,
             RHS.transaction_type_code AS transaction_type_code,
             RHS.date_of_transaction AS date_of_transaction,
             RHS.amount_of_transaction AS amount_of_transaction,
             RHS.share_count AS share_count,
             RHS.other_details AS other_details
      FROM df_investors AS LHS
      INNER JOIN df_transactions AS RHS ON (LHS.investor_id = RHS.investor_id)) AS RHS)
WHERE (share_count = share_count_other)
ORDER BY investor_details;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
spider/tracking_share_transactions/0005,df_transactions,"SELECT date_of_transaction,
       share_count
FROM df_transactions
ORDER BY date_of_transaction;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0016,"summarise(input0, 'n_distinct = n_distinct(transaction_type_code)', ""'transaction_type_code'""), summarise(line0, 'n_distinct = n_distinct(transaction_type_code)', '')","SELECT n_distinct AS count_distinct_transaction_type_code_
FROM
  (SELECT COUNT(DISTINCT transaction_type_code) AS n_distinct
   FROM
     (SELECT transaction_type_code,
             COUNT(DISTINCT transaction_type_code) AS n_distinct
      FROM df_transactions
      GROUP BY transaction_type_code))
ORDER BY count_distinct_transaction_type_code_;",2,8,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0032,"summarise(input0, 'n = n()', ""'amount_of_transaction','transaction_type_code'""), limit(line0, 'desc(transaction_type_code)')","SELECT transaction_type_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT amount_of_transaction,
                transaction_type_code,
                COUNT() AS n
         FROM df_transactions
         GROUP BY amount_of_transaction,
                  transaction_type_code)
      ORDER BY transaction_type_code DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0018,"filter(input0, ""investor_details == 'l'""), natural_join(input1, line0)","SELECT `lot_details`
FROM
  (SELECT `LHS`.`lot_id` AS `lot_id`,
          `LHS`.`investor_id` AS `investor_id`,
          `LHS`.`lot_details` AS `lot_details`,
          `RHS`.`investor_details` AS `investor_details`
   FROM `df_lots` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_investors`
      WHERE (`investor_details` = 'l')) AS RHS ON (LHS.investor_id = RHS.investor_id))
ORDER BY lot_details;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0041,"left_join(input1, input0), anti_join(input0, line0, ""'lot_details'"")","SELECT DISTINCT lot_details
FROM
  (SELECT *
   FROM df_lots AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT LHS.transaction_id AS transaction_id,
                  LHS.lot_id AS lot_id,
                  RHS.investor_id AS investor_id,
                  RHS.lot_details AS lot_details
           FROM df_transactions_lots AS LHS
           LEFT JOIN df_lots AS RHS ON (LHS.lot_id = RHS.lot_id)) AS RHS
        WHERE (LHS.lot_details = RHS.lot_details) ))
ORDER BY lot_details;",2,14,4,1,4,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
spider/tracking_share_transactions/0035,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'amount_of_transaction'""), inner_join(line1, line0, ""'n' = 'investor_id','amount_of_transaction' = 'amount_of_transaction'"")","SELECT DISTINCT n AS investor_id,
                investor_details
FROM
  (SELECT LHS.amount_of_transaction AS amount_of_transaction,
          LHS.n AS n,
          RHS.investor_details AS investor_details,
          RHS.transaction_id AS transaction_id,
          RHS.transaction_type_code AS transaction_type_code,
          RHS.date_of_transaction AS date_of_transaction,
          RHS.share_count AS share_count,
          RHS.other_details AS other_details
   FROM
     (SELECT amount_of_transaction,
             COUNT() AS n
      FROM
        (SELECT LHS.investor_id AS investor_id,
                LHS.investor_details AS investor_details,
                RHS.transaction_id AS transaction_id,
                RHS.transaction_type_code AS transaction_type_code,
                RHS.date_of_transaction AS date_of_transaction,
                RHS.amount_of_transaction AS amount_of_transaction,
                RHS.share_count AS share_count,
                RHS.other_details AS other_details
         FROM df_investors AS LHS
         INNER JOIN df_transactions AS RHS ON (LHS.investor_id = RHS.investor_id))
      GROUP BY amount_of_transaction) AS LHS
   INNER JOIN
     (SELECT LHS.investor_id AS investor_id,
             LHS.investor_details AS investor_details,
             RHS.transaction_id AS transaction_id,
             RHS.transaction_type_code AS transaction_type_code,
             RHS.date_of_transaction AS date_of_transaction,
             RHS.amount_of_transaction AS amount_of_transaction,
             RHS.share_count AS share_count,
             RHS.other_details AS other_details
      FROM df_investors AS LHS
      INNER JOIN df_transactions AS RHS ON (LHS.investor_id = RHS.investor_id)) AS RHS ON (LHS.n = RHS.investor_id
                                                                                           AND LHS.amount_of_transaction = RHS.amount_of_transaction))
ORDER BY investor_id;",3,14,5,1,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0020,"inner_join(input0, input1, ""'transaction_id' = 'sales_transaction_id'""), filter(line0, 'amount_of_transaction <= 3000')","SELECT sales_details,
       date_of_transaction
FROM
  (SELECT transaction_id,
          investor_id,
          transaction_type_code,
          date_of_transaction,
          amount_of_transaction,
          share_count,
          other_details,
          sales_details,
          transaction_id AS sales_transaction_id
   FROM
     (SELECT LHS.transaction_id AS transaction_id,
             LHS.investor_id AS investor_id,
             LHS.transaction_type_code AS transaction_type_code,
             LHS.date_of_transaction AS date_of_transaction,
             LHS.amount_of_transaction AS amount_of_transaction,
             LHS.share_count AS share_count,
             LHS.other_details AS other_details,
             RHS.sales_details AS sales_details
      FROM df_transactions AS LHS
      INNER JOIN df_sales AS RHS ON (LHS.transaction_id = RHS.sales_transaction_id)))
WHERE (amount_of_transaction <= 3000.0)
ORDER BY sales_details;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0019,"filter(input0, 'amount_of_transaction > 10000'), inner_join(line0, input1, ""'transaction_id' = 'purchase_transaction_id'"")","SELECT purchase_details
FROM
  (SELECT LHS.transaction_id AS transaction_id,
          LHS.investor_id AS investor_id,
          LHS.transaction_type_code AS transaction_type_code,
          LHS.date_of_transaction AS date_of_transaction,
          LHS.amount_of_transaction AS amount_of_transaction,
          LHS.share_count AS share_count,
          LHS.other_details AS other_details,
          RHS.purchase_details AS purchase_details
   FROM
     (SELECT *
      FROM df_transactions
      WHERE (amount_of_transaction > 10000.0)) AS LHS
   INNER JOIN df_purchases AS RHS ON (LHS.transaction_id = RHS.purchase_transaction_id))
ORDER BY purchase_details;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0007,"filter(input0, ""transaction_type_code == 'PUR'"")","SELECT `transaction_id`
FROM `df_transactions`
WHERE (`transaction_type_code` = 'PUR')
ORDER BY transaction_id;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0034,"mutate(input0, 'n = n()'), inner_join(line0, input1, ""'n' = 'transaction_id','transaction_type_code' = 'transaction_type_code'"")","SELECT transaction_type_description
FROM
  (SELECT LHS.transaction_type_code AS transaction_type_code,
          LHS.transaction_type_description AS transaction_type_description,
          LHS.n AS n,
          RHS.investor_id AS investor_id,
          RHS.date_of_transaction AS date_of_transaction,
          RHS.amount_of_transaction AS amount_of_transaction,
          RHS.share_count AS share_count,
          RHS.other_details AS other_details
   FROM
     (SELECT transaction_type_code,
             transaction_type_description,
             COUNT(*) OVER () AS n
      FROM df_ref_transaction_types) AS LHS
   INNER JOIN df_transactions AS RHS ON (LHS.n = RHS.transaction_id
                                         AND LHS.transaction_type_code = RHS.transaction_type_code))
ORDER BY transaction_type_description;",2,8,3,0,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0024,"summarise(input0, 'share_count = min(share_count)', ""'amount_of_transaction'""), natural_join(input0, line0), summarise(line1, 'maxshare_count = max(share_count)', ""'other_details','transaction_type_code'"")","SELECT transaction_type_code,
       maxshare_count AS max_share_count_,
       other_details AS min_share_count_
FROM
  (SELECT other_details,
          transaction_type_code,
          MAX(share_count) AS maxshare_count
   FROM
     (SELECT LHS.transaction_id AS transaction_id,
             LHS.investor_id AS investor_id,
             LHS.transaction_type_code AS transaction_type_code,
             LHS.date_of_transaction AS date_of_transaction,
             LHS.amount_of_transaction AS amount_of_transaction,
             LHS.share_count AS share_count,
             LHS.other_details AS other_details
      FROM df_transactions AS LHS
      INNER JOIN
        (SELECT amount_of_transaction,
                MIN(share_count) AS share_count
         FROM df_transactions
         GROUP BY amount_of_transaction) AS RHS ON (LHS.amount_of_transaction = RHS.amount_of_transaction
                                                    AND LHS.share_count = RHS.share_count))
   GROUP BY other_details,
            transaction_type_code)
ORDER BY transaction_type_code;",3,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0023,"summarise(input0, 'meanamount_of_transaction = mean(amount_of_transaction, na.rm = T)', ""'transaction_type_code'"")","SELECT transaction_type_code,
       meanamount_of_transaction AS avg_amount_of_transaction_
FROM
  (SELECT transaction_type_code,
          AVG(amount_of_transaction) AS meanamount_of_transaction
   FROM df_transactions
   GROUP BY transaction_type_code)
ORDER BY transaction_type_code;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0001,"mutate(input0, 'n = n()'), cross_join(line0, line0, 'n == n.other')","SELECT DISTINCT n AS count___
FROM
  (SELECT LHS.investor_id AS investor_id,
          LHS.investor_details AS investor_details,
          LHS.n AS n,
          RHS.investor_id AS investor_id_other,
          RHS.investor_details AS investor_details_other,
          RHS.n AS n_other
   FROM
     (SELECT investor_id,
             investor_details,
             COUNT(*) OVER () AS n
      FROM df_investors) AS LHS
   CROSS JOIN
     (SELECT investor_id,
             investor_details,
             COUNT(*) OVER () AS n
      FROM df_investors) AS RHS)
WHERE (n = n_other)
ORDER BY count___;",2,12,4,1,4,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0
spider/tracking_share_transactions/0014,"left_join(input1, input0), anti_join(line0, input1, ""'share_count','transaction_id'"")","SELECT transaction_type_description,
       date_of_transaction
FROM
  (SELECT *
   FROM
     (SELECT LHS.transaction_id AS transaction_id,
             LHS.investor_id AS investor_id,
             LHS.transaction_type_code AS transaction_type_code,
             LHS.date_of_transaction AS date_of_transaction,
             LHS.amount_of_transaction AS amount_of_transaction,
             LHS.share_count AS share_count,
             LHS.other_details AS other_details,
             RHS.transaction_type_description AS transaction_type_description
      FROM df_transactions AS LHS
      LEFT JOIN df_ref_transaction_types AS RHS ON (LHS.transaction_type_code = RHS.transaction_type_code)) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_transactions AS RHS
        WHERE (LHS.share_count = RHS.share_count
               AND LHS.transaction_id = RHS.transaction_id) ))
ORDER BY transaction_type_description;",2,13,4,0,4,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
spider/tracking_share_transactions/0009,"summarise(input0, 'meanamount_of_transaction = mean(amount_of_transaction, na.rm = T)', ""'transaction_type_code'""), filter(line0, ""transaction_type_code == 'SALE'"")","SELECT `meanamount_of_transaction` AS `avg_amount_of_transaction_`
FROM
  (SELECT `transaction_type_code`,
          AVG(`amount_of_transaction`) AS `meanamount_of_transaction`
   FROM `df_transactions`
   GROUP BY `transaction_type_code`)
WHERE (`transaction_type_code` = 'SALE')
ORDER BY avg_amount_of_transaction_;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0011,"mutate(input0, 'minamount_of_transaction = min(amount_of_transaction)'), filter(line0, ""transaction_type_code == 'PUR' & minamount_of_transaction != 50"")","SELECT DISTINCT `minamount_of_transaction` AS `min_amount_of_transaction_`
FROM
  (SELECT `transaction_id`,
          `investor_id`,
          `transaction_type_code`,
          `date_of_transaction`,
          `amount_of_transaction`,
          `share_count`,
          `other_details`,
          MIN(`amount_of_transaction`) OVER () AS `minamount_of_transaction`
   FROM `df_transactions`)
WHERE (`transaction_type_code` = 'PUR'
       AND minamount_of_transaction != 50.0)
ORDER BY min_amount_of_transaction_;",2,7,2,1,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0029,"natural_join(input0, input1), summarise(line0, 'meanamount_of_transaction = mean(amount_of_transaction, na.rm = T)', ""'lot_id','other_details'"")","SELECT lot_id,
       meanamount_of_transaction AS avg_amount_of_transaction_
FROM
  (SELECT lot_id,
          other_details,
          AVG(amount_of_transaction) AS meanamount_of_transaction
   FROM
     (SELECT LHS.transaction_id AS transaction_id,
             LHS.investor_id AS investor_id,
             LHS.transaction_type_code AS transaction_type_code,
             LHS.date_of_transaction AS date_of_transaction,
             LHS.amount_of_transaction AS amount_of_transaction,
             LHS.share_count AS share_count,
             LHS.other_details AS other_details,
             RHS.lot_id AS lot_id
      FROM df_transactions AS LHS
      INNER JOIN df_transactions_lots AS RHS ON (LHS.transaction_id = RHS.transaction_id))
   GROUP BY lot_id,
            other_details)
ORDER BY lot_id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0010,"filter(input0, ""transaction_type_code == 'PUR'""), intersect(line0, input0, 'transaction_type_description')","SELECT `transaction_type_description`
FROM
  (SELECT `transaction_type_description`
   FROM `df_ref_transaction_types`
   WHERE (`transaction_type_code` = 'PUR') INTERSECT
     SELECT transaction_type_description
     FROM df_ref_transaction_types)
ORDER BY transaction_type_description;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/tracking_share_transactions/0028,"natural_join(input0, input1), summarise(line0, 'meanamount_of_transaction = mean(amount_of_transaction, na.rm = T)', ""'lot_id','other_details'"")","SELECT lot_id,
       meanamount_of_transaction AS avg_amount_of_transaction_
FROM
  (SELECT lot_id,
          other_details,
          AVG(amount_of_transaction) AS meanamount_of_transaction
   FROM
     (SELECT LHS.transaction_id AS transaction_id,
             LHS.investor_id AS investor_id,
             LHS.transaction_type_code AS transaction_type_code,
             LHS.date_of_transaction AS date_of_transaction,
             LHS.amount_of_transaction AS amount_of_transaction,
             LHS.share_count AS share_count,
             LHS.other_details AS other_details,
             RHS.lot_id AS lot_id
      FROM df_transactions AS LHS
      INNER JOIN df_transactions_lots AS RHS ON (LHS.transaction_id = RHS.transaction_id))
   GROUP BY lot_id,
            other_details)
ORDER BY lot_id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/tracking_share_transactions/0031,"summarise(input0, 'n = n()', ""'date_of_transaction','investor_id'""), summarise(line0, 'n = n()', ""'investor_id'"")","SELECT investor_id,
       n AS count___
FROM
  (SELECT investor_id,
          COUNT() AS n
   FROM
     (SELECT date_of_transaction,
             investor_id,
             COUNT() AS n
      FROM df_transactions
      GROUP BY date_of_transaction,
               investor_id)
   GROUP BY investor_id)
ORDER BY investor_id;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/medicine_enzyme_interaction/0002,df_enzyme,"SELECT name
FROM df_enzyme
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/medicine_enzyme_interaction/0017,"filter(input1, ""interaction_type == 'inhibitor'""), inner_join(input0, line0, ""'id' = 'enzyme_id'"")","SELECT DISTINCT `name`,
                `location`,
                `product`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `LHS`.`location` AS `location`,
          `LHS`.`product` AS `product`,
          `LHS`.`chromosome` AS `chromosome`,
          `LHS`.`omim` AS `omim`,
          `LHS`.`porphyria` AS `porphyria`,
          `RHS`.`medicine_id` AS `medicine_id`,
          `RHS`.`interaction_type` AS `interaction_type`
   FROM `df_enzyme` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_medicine_enzyme_interaction`
      WHERE (`interaction_type` = 'inhibitor')) AS RHS ON (LHS.id = RHS.enzyme_id))
ORDER BY name;",2,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/medicine_enzyme_interaction/0003,df_enzyme,"SELECT name,
       LOCATION
FROM df_enzyme
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/medicine_enzyme_interaction/0022,"summarise(input0, 'n = n()', ""'trade_name'""), summarise(line0, 'n = n()', ""'trade_name'"")","SELECT trade_name,
       n AS count___
FROM
  (SELECT trade_name,
          COUNT() AS n
   FROM
     (SELECT trade_name,
             COUNT() AS n
      FROM df_medicine
      GROUP BY trade_name)
   GROUP BY trade_name)
ORDER BY trade_name;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/medicine_enzyme_interaction/0013,"summarise(input0, 'n = n()', ""'interaction_type'""), limit(line0, 'desc(n)')","SELECT interaction_type,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT interaction_type,
                COUNT() AS n
         FROM df_medicine_enzyme_interaction
         GROUP BY interaction_type)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/medicine_enzyme_interaction/0006,"filter(input0, ""product != 'Heme'""), intersect(line0, input0, 'name')","SELECT `name`
FROM
  (SELECT `name`
   FROM `df_enzyme`
   WHERE (`product` != 'Heme') INTERSECT
     SELECT name
     FROM df_enzyme)
ORDER BY name;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/medicine_enzyme_interaction/0004,"mutate(input0, 'omim = max(omim)')","SELECT DISTINCT MAX(omim) OVER () AS max_omim_
FROM df_enzyme
ORDER BY max_omim_;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/medicine_enzyme_interaction/0012,"filter(input0, ""name == 'ALA synthase' | name == 'Aripiprazole'""), intersect(line0, input1, 'id'), inner_join(line1, input2, ""'id' = 'medicine_id'"")","SELECT DISTINCT `interaction_type`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `RHS`.`enzyme_id` AS `enzyme_id`,
          `RHS`.`interaction_type` AS `interaction_type`
   FROM
     (SELECT `id`
      FROM `df_medicine`
      WHERE (`name` = 'ALA synthase'
             OR `name` = 'Aripiprazole') INTERSECT
        SELECT id
        FROM df_enzyme) AS LHS
   INNER JOIN df_medicine_enzyme_interaction AS RHS ON (LHS.id = RHS.medicine_id))
ORDER BY interaction_type;",3,13,4,1,4,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0
spider/medicine_enzyme_interaction/0015,"natural_join(input0, input1), intersect(line0, input0, 'location'), summarise(line1, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT LOCATION
      FROM
        (SELECT LHS.id AS id,
                LHS.name AS name,
                LHS.location AS LOCATION,
                LHS.product AS product,
                LHS.chromosome AS chromosome,
                LHS.omim AS omim,
                LHS.porphyria AS porphyria,
                RHS.enzyme_id AS enzyme_id,
                RHS.medicine_id AS medicine_id,
                RHS.interaction_type AS interaction_type
         FROM df_enzyme AS LHS
         CROSS JOIN df_medicine_enzyme_interaction AS RHS) INTERSECT SELECT LOCATION
      FROM df_enzyme))
ORDER BY count___;",3,11,5,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0
spider/medicine_enzyme_interaction/0005,"filter(input0, ""location == 'Cytosol'""), semi_join(input0, line0)","SELECT `product`,
       `chromosome`,
       `porphyria`
FROM
  (SELECT *
   FROM `df_enzyme` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_enzyme`
           WHERE (`location` = 'Cytosol')) AS RHS
        WHERE (LHS.id = RHS.id
               AND LHS.name = RHS.name
               AND LHS.location = RHS.location
               AND LHS.product = RHS.product
               AND LHS.chromosome = RHS.chromosome
               AND LHS.omim = RHS.omim
               AND LHS.porphyria = RHS.porphyria) ))
ORDER BY product;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/medicine_enzyme_interaction/0016,"summarise(input1, 'n = n()', ""'medicine_id'""), filter(line0, 'n >= 3L'), inner_join(input0, line1, ""'id' = 'medicine_id'"")","SELECT id,
       trade_name
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.trade_name AS trade_name,
          LHS.fda_approved AS fda_approved,
          RHS.n AS n
   FROM df_medicine AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT medicine_id,
                COUNT() AS n
         FROM df_medicine_enzyme_interaction
         GROUP BY medicine_id)
      WHERE (n >= 3)) AS RHS ON (LHS.id = RHS.medicine_id))
ORDER BY id;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/medicine_enzyme_interaction/0020,"summarise(input0, 'n_distinct = n_distinct(fda_approved)', ""'fda_approved','trade_name'""), mutate(line0, 'n_distinct = n_distinct(fda_approved)')","SELECT DISTINCT COUNT(DISTINCT fda_approved) OVER () AS count_distinct_fda_approved_
FROM
  (SELECT fda_approved,
          trade_name,
          COUNT(DISTINCT fda_approved) AS n_distinct
   FROM df_medicine
   GROUP BY fda_approved,
            trade_name)
ORDER BY count_distinct_fda_approved_;",2,8,2,3,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/medicine_enzyme_interaction/0007,"filter(input0, ""fda_approved == 'Yes'"")","SELECT `name`,
       `trade_name`
FROM `df_medicine`
WHERE (`fda_approved` = 'Yes')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/medicine_enzyme_interaction/0001,"summarise(input0, 'n = n()', ""'name','porphyria'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT name,
          porphyria,
          COUNT() AS n
   FROM df_enzyme
   GROUP BY name,
            porphyria)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/medicine_enzyme_interaction/0014,"filter(input0, ""fda_approved == 'No'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM `df_medicine`
WHERE (`fda_approved` = 'No')
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/medicine_enzyme_interaction/0009,"summarise(input1, 'n = n()', ""'medicine_id'""), inner_join(input0, line0, ""'id' = 'medicine_id'""), filter(line1, 'n >= 2L')","SELECT id,
       name
FROM
  (SELECT id,
          name,
          trade_name,
          fda_approved,
          n,
          id AS medicine_id
   FROM
     (SELECT LHS.id AS id,
             LHS.name AS name,
             LHS.trade_name AS trade_name,
             LHS.fda_approved AS fda_approved,
             RHS.n AS n
      FROM df_medicine AS LHS
      INNER JOIN
        (SELECT medicine_id,
                COUNT() AS n
         FROM df_medicine_enzyme_interaction
         GROUP BY medicine_id) AS RHS ON (LHS.id = RHS.medicine_id)))
WHERE (n >= 2)
ORDER BY id;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/medicine_enzyme_interaction/0010,"inner_join(input0, input1, ""'id' = 'medicine_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT id,
                name,
                fda_approved
FROM
  (SELECT id,
          name,
          trade_name,
          fda_approved,
          enzyme_id,
          interaction_type,
          id AS medicine_id
   FROM
     (SELECT LHS.id AS id,
             LHS.name AS name,
             LHS.trade_name AS trade_name,
             LHS.fda_approved AS fda_approved,
             RHS.enzyme_id AS enzyme_id,
             RHS.interaction_type AS interaction_type
      FROM df_medicine AS LHS
      INNER JOIN df_medicine_enzyme_interaction AS RHS ON (LHS.id = RHS.medicine_id)))
ORDER BY id;",2,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/wedding/0002,df_church,"SELECT name,
       open_date,
       organized_by
FROM df_church
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/wedding/0017,"filter(input0, 'year == 2016L'), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT *
      FROM df_wedding
      WHERE (YEAR = 2016)))
ORDER BY count___;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/wedding/0008,"filter(input0, ""is_male != 'F' & age == 30L""), mutate(line0, 'n = n()')","SELECT `people_id` AS `count___`
FROM `df_people`
WHERE (`is_male` != 'F'
       AND age = 30)
ORDER BY count___;",2,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/wedding/0003,df_church,"SELECT name
FROM df_church
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/wedding/0006,"summarise(input0, 'n = n()', ""'church_id','open_date'"")","SELECT open_date,
       n AS count___
FROM
  (SELECT church_id,
          open_date,
          COUNT() AS n
   FROM df_church
   GROUP BY church_id,
            open_date)
ORDER BY open_date;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/wedding/0005,"filter(input0, 'open_date == 1830L | open_date <= 1840L'), semi_join(input0, line0)","SELECT organized_by,
       name
FROM
  (SELECT *
   FROM df_church AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_church
           WHERE (open_date = 1830
                  OR open_date <= 1840)) AS RHS
        WHERE (LHS.church_id = RHS.church_id
               AND LHS.name = RHS.name
               AND LHS.organized_by = RHS.organized_by
               AND LHS.open_date = RHS.open_date
               AND LHS.continuation_of = RHS.continuation_of) ))
ORDER BY organized_by;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/wedding/0018,"filter(input0, 'age > 30L'), natural_join(input1, input2), inner_join(line0, line1, ""'people_id' = 'male_id'"")","SELECT name_other AS name
FROM
  (SELECT LHS.people_id AS people_id,
          LHS.name AS name,
          LHS.country AS country,
          LHS.is_male AS is_male,
          LHS.age AS age,
          RHS.church_id AS church_id,
          RHS.name AS name_other,
          RHS.organized_by AS organized_by,
          RHS.open_date AS open_date,
          RHS.continuation_of AS continuation_of,
          RHS.female_id AS female_id,
          RHS.year AS YEAR
   FROM
     (SELECT *
      FROM df_people
      WHERE (age > 30)) AS LHS
   INNER JOIN
     (SELECT LHS.church_id AS church_id,
             LHS.name AS name,
             LHS.organized_by AS organized_by,
             LHS.open_date AS open_date,
             LHS.continuation_of AS continuation_of,
             RHS.male_id AS male_id,
             RHS.female_id AS female_id,
             RHS.year AS YEAR
      FROM df_church AS LHS
      INNER JOIN df_wedding AS RHS ON (LHS.church_id = RHS.church_id)) AS RHS ON (LHS.people_id = RHS.male_id))
ORDER BY name;",3,13,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0
spider/wedding/0020,"filter(input0, 'year != 2016L | year <= church_id'), mutate(line0, 'n_distinct = n_distinct(church_id)')","SELECT DISTINCT COUNT(DISTINCT church_id) OVER () AS count__distinct_church_id_
FROM df_wedding
WHERE (YEAR != 2016
       OR YEAR <= church_id)
ORDER BY count__distinct_church_id_;",2,9,1,2,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/wedding/0019,"summarise(input0, 'n = n()', ""'country'""), semi_join(line0, input0)","SELECT country,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT country,
             COUNT() AS n
      FROM df_people
      GROUP BY country) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_people AS RHS
        WHERE (LHS.country = RHS.country) ))
ORDER BY country;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/wedding/0007,"limit(input0, 'desc(church_id)')","SELECT name,
       open_date
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_church
      ORDER BY church_id DESC)
   LIMIT 3);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/wedding/0001,"mutate(input0, 'n = n()'), filter(line0, 'n >= 1850L | n != open_date')","SELECT DISTINCT n AS count___
FROM
  (SELECT church_id,
          name,
          organized_by,
          open_date,
          continuation_of,
          COUNT(*) OVER () AS n
   FROM df_church)
WHERE (n >= 1850
       OR n != open_date)
ORDER BY count___;",2,8,2,1,2,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/wedding/0014,"filter(input1, 'year == 2015L'), left_join(line0, input0), anti_join(input0, line1, ""'name'"")","SELECT name
FROM
  (SELECT *
   FROM df_church AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT LHS.church_id AS church_id,
                  LHS.male_id AS male_id,
                  LHS.female_id AS female_id,
                  LHS.year AS YEAR,
                  RHS.name AS name,
                  RHS.organized_by AS organized_by,
                  RHS.open_date AS open_date,
                  RHS.continuation_of AS continuation_of
           FROM
             (SELECT *
              FROM df_wedding
              WHERE (YEAR = 2015)) AS LHS
           LEFT JOIN df_church AS RHS ON (LHS.church_id = RHS.church_id)) AS RHS
        WHERE (LHS.name = RHS.name) ))
ORDER BY name;",3,18,5,0,5,1,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0
spider/wedding/0011,"mutate(input0, 'meanage = mean(age, na.rm = T)'), filter(line0, 'meanage > age')","SELECT name,
       country
FROM
  (SELECT people_id,
          name,
          country,
          is_male,
          age,
          AVG(age) OVER () AS meanage
   FROM df_people)
WHERE (meanage > age)
ORDER BY name;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/wedding/0010,"mutate(input0, 'maxage = max(age)'), mutate(line0, 'meanage = mean(age, na.rm = T)'), mutate(line1, 'minage = min(age)')","SELECT DISTINCT MIN(age) OVER () AS min_age_,
                              maxage AS max_age_,
                              meanage AS avg_age_
FROM
  (SELECT people_id,
          name,
          country,
          is_male,
          age,
          maxage,
          AVG(age) OVER () AS meanage
   FROM
     (SELECT people_id,
             name,
             country,
             is_male,
             age,
             MAX(age) OVER () AS maxage
      FROM df_people))
ORDER BY min_age_;",3,10,3,1,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0
spider/debate/0002,df_debate,"SELECT venue
FROM df_debate
ORDER BY venue;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/debate/0008,"summarise(input0, 'n = n()', ""'name','party'""), limit(line0, 'desc(n)')","SELECT party
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT name,
                party,
                COUNT() AS n
         FROM df_people
         GROUP BY name,
                  party)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/debate/0003,df_debate,"SELECT date, venue
FROM df_debate
ORDER BY date;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/debate/0013,"inner_join(input0, input1, ""'people_id' = 'affirmative'""), summarise(line0, 'n = n()', ""'affirmative','name'"")","SELECT name,
       n AS count___
FROM
  (SELECT affirmative,
          name,
          COUNT() AS n
   FROM
     (SELECT people_id,
             district,
             name,
             party,
             age,
             debate_id,
             negative,
             if_affirmative_win,
             people_id AS affirmative
      FROM
        (SELECT LHS.people_id AS people_id,
                LHS.district AS district,
                LHS.name AS name,
                LHS.party AS party,
                LHS.age AS age,
                RHS.debate_id AS debate_id,
                RHS.negative AS negative,
                RHS.if_affirmative_win AS if_affirmative_win
         FROM df_people AS LHS
         INNER JOIN df_debate_people AS RHS ON (LHS.people_id = RHS.affirmative)))
   GROUP BY affirmative,
            name)
ORDER BY name;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/debate/0006,"limit(input0, 'desc(people_id)')","SELECT party
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_people
      ORDER BY people_id DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/debate/0004,"filter(input0, 'num_of_audience >= 150L')","SELECT date
FROM df_debate
WHERE (num_of_audience >= 150)
ORDER BY date;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/debate/0012,"filter(input1, 'num_of_audience >= 200L'), natural_join3(input0, input1, line0), inner_join(input2, line1, ""'debate_id' = 'debate_id','affirmative' = 'people_id'"")","SELECT name
FROM
  (SELECT LHS.debate_id AS debate_id,
          LHS.affirmative AS affirmative,
          LHS.negative AS negative,
          LHS.if_affirmative_win AS if_affirmative_win,
          RHS.district AS district,
          RHS.name AS name,
          RHS.party AS party,
          RHS.age AS age,
          RHS.date AS date,
          RHS.venue AS venue,
          RHS.num_of_audience AS num_of_audience
   FROM df_debate_people AS LHS
   INNER JOIN
     (SELECT LHS.people_id AS people_id,
             LHS.district AS district,
             LHS.name AS name,
             LHS.party AS party,
             LHS.age AS age,
             LHS.debate_id AS debate_id,
             LHS.date AS date,
             LHS.venue AS venue,
             LHS.num_of_audience AS num_of_audience
      FROM
        (SELECT LHS.people_id AS people_id,
                LHS.district AS district,
                LHS.name AS name,
                LHS.party AS party,
                LHS.age AS age,
                RHS.debate_id AS debate_id,
                RHS.date AS date,
                RHS.venue AS venue,
                RHS.num_of_audience AS num_of_audience
         FROM df_people AS LHS
         CROSS JOIN df_debate AS RHS) AS LHS
      INNER JOIN
        (SELECT *
         FROM df_debate
         WHERE (num_of_audience >= 200)) AS RHS ON (LHS.debate_id = RHS.debate_id
                                                    AND LHS.date = RHS.date
                                                    AND LHS.venue = RHS.venue
                                                    AND LHS.num_of_audience = RHS.num_of_audience)) AS RHS ON (LHS.debate_id = RHS.debate_id
                                                                                                               AND LHS.affirmative = RHS.people_id))
ORDER BY name;",3,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0
spider/debate/0015,"inner_join(input0, input1, ""'people_id' = 'affirmative'""), anti_join(input0, line0, ""'district','name'"")","SELECT name
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT people_id,
                  district,
                  name,
                  party,
                  age,
                  debate_id,
                  negative,
                  if_affirmative_win,
                  people_id AS affirmative
           FROM
             (SELECT LHS.people_id AS people_id,
                     LHS.district AS district,
                     LHS.name AS name,
                     LHS.party AS party,
                     LHS.age AS age,
                     RHS.debate_id AS debate_id,
                     RHS.negative AS negative,
                     RHS.if_affirmative_win AS if_affirmative_win
              FROM df_people AS LHS
              INNER JOIN df_debate_people AS RHS ON (LHS.people_id = RHS.affirmative))) AS RHS
        WHERE (LHS.district = RHS.district
               AND LHS.name = RHS.name) ))
ORDER BY name;",2,15,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
spider/debate/0005,"filter(input0, 'age >= 35L & age <= 36L'), intersect(line0, input0, 'name')","SELECT name
FROM
  (SELECT name
   FROM df_people
   WHERE (age >= 35
          AND age <= 36) INTERSECT
     SELECT name
     FROM df_people)
ORDER BY name;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/debate/0007,"summarise(input0, 'n = n()', ""'district','party'""), summarise(line0, 'n = n()', ""'party'"")","SELECT party,
       n AS count___
FROM
  (SELECT party,
          COUNT() AS n
   FROM
     (SELECT district,
             party,
             COUNT() AS n
      FROM df_people
      GROUP BY district,
               party)
   GROUP BY party)
ORDER BY party;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/debate/0001,"mutate(input0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_debate
ORDER BY count___;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/debate/0014,"inner_join(input0, input1, ""'people_id' = 'negative'""), summarise(line0, 'n = n()', ""'name','party'""), filter(line1, 'n >= 2L')","SELECT name
FROM
  (SELECT name,
          party,
          COUNT() AS n
   FROM
     (SELECT people_id,
             district,
             name,
             party,
             age,
             debate_id,
             affirmative,
             if_affirmative_win,
             people_id AS negative
      FROM
        (SELECT LHS.people_id AS people_id,
                LHS.district AS district,
                LHS.name AS name,
                LHS.party AS party,
                LHS.age AS age,
                RHS.debate_id AS debate_id,
                RHS.affirmative AS affirmative,
                RHS.if_affirmative_win AS if_affirmative_win
         FROM df_people AS LHS
         INNER JOIN df_debate_people AS RHS ON (LHS.people_id = RHS.negative)))
   GROUP BY name,
            party)
WHERE (n >= 2)
ORDER BY name;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/debate/0009,"intersect(input0, input0, 'venue')","SELECT venue
FROM
  (SELECT venue
   FROM df_debate INTERSECT SELECT venue
   FROM df_debate)
ORDER BY venue;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/debate/0011,"left_join(input1, input2), inner_join(input0, line0, ""'people_id' = 'negative'"")","SELECT name, date, venue
FROM
  (SELECT LHS.people_id AS people_id,
          LHS.district AS district,
          LHS.name AS name,
          LHS.party AS party,
          LHS.age AS age,
          RHS.debate_id AS debate_id,
          RHS.date AS date,
          RHS.venue AS venue,
          RHS.num_of_audience AS num_of_audience,
          RHS.affirmative AS affirmative,
          RHS.if_affirmative_win AS if_affirmative_win
   FROM df_people AS LHS
   INNER JOIN
     (SELECT LHS.debate_id AS debate_id,
             LHS.date AS date,
             LHS.venue AS venue,
             LHS.num_of_audience AS num_of_audience,
             RHS.affirmative AS affirmative,
             RHS.negative AS negative,
             RHS.if_affirmative_win AS if_affirmative_win
      FROM df_debate AS LHS
      LEFT JOIN df_debate_people AS RHS ON (LHS.debate_id = RHS.debate_id)) AS RHS ON (LHS.people_id = RHS.negative))
ORDER BY name;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
spider/debate/0010,"left_join(input2, input1), inner_join(input0, line0, ""'people_id' = 'affirmative'"")","SELECT name, date, venue
FROM
  (SELECT LHS.people_id AS people_id,
          LHS.district AS district,
          LHS.name AS name,
          LHS.party AS party,
          LHS.age AS age,
          RHS.debate_id AS debate_id,
          RHS.negative AS negative,
          RHS.if_affirmative_win AS if_affirmative_win,
          RHS.date AS date,
          RHS.venue AS venue,
          RHS.num_of_audience AS num_of_audience
   FROM df_people AS LHS
   INNER JOIN
     (SELECT LHS.debate_id AS debate_id,
             LHS.affirmative AS affirmative,
             LHS.negative AS negative,
             LHS.if_affirmative_win AS if_affirmative_win,
             RHS.date AS date,
             RHS.venue AS venue,
             RHS.num_of_audience AS num_of_audience
      FROM df_debate_people AS LHS
      LEFT JOIN df_debate AS RHS ON (LHS.debate_id = RHS.debate_id)) AS RHS ON (LHS.people_id = RHS.affirmative))
ORDER BY name;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
spider/activity_1/0033,"summarise(input0, 'n = n()', ""'facid'""), natural_join(input1, line0)","SELECT fname,
       lname,
       n AS count___,
       facid
FROM
  (SELECT LHS.facid AS facid,
          LHS.lname AS lname,
          LHS.fname AS fname,
          LHS.rank AS rank,
          LHS.sex AS sex,
          LHS.phone AS phone,
          LHS.room AS room,
          LHS.building AS building,
          RHS.n AS n
   FROM df_faculty AS LHS
   INNER JOIN
     (SELECT facid,
             COUNT() AS n
      FROM df_faculty_participates_in
      GROUP BY facid) AS RHS ON (LHS.facid = RHS.facid))
ORDER BY fname;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0037,"anti_join(input1, input0, '')","SELECT stuid
FROM
  (SELECT *
   FROM df_student AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_participates_in AS RHS
        WHERE (LHS.stuid = RHS.stuid) ))
ORDER BY stuid;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/activity_1/0002,df_faculty,"SELECT DISTINCT rank
FROM df_faculty
ORDER BY rank;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0036,"summarise(input1, 'n = n()', ""'actid'""), inner_join(input0, line0, ""'actid'""), limit(line1, 'desc(n)')","SELECT activity_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.actid AS actid,
                LHS.activity_name AS activity_name,
                RHS.n AS n
         FROM df_activity AS LHS
         INNER JOIN
           (SELECT actid,
                   COUNT() AS n
            FROM df_faculty_participates_in
            GROUP BY actid) AS RHS ON (LHS.actid = RHS.actid))
      ORDER BY n DESC)
   LIMIT 1);",2,13,5,0,5,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/activity_1/0017,"filter(input0, ""rank == 'AsstProf'""), summarise(line0, 'n = n()', ""'rank','sex'"")","SELECT `sex`,
       `n` AS `count___`
FROM
  (SELECT `rank`,
          `sex`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_faculty`
      WHERE (`rank` = 'AsstProf'))
   GROUP BY rank,
            sex)
ORDER BY sex;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0008,"filter(input0, ""fname == 'Jerry' & lname == 'Prince'""), natural_join(input0, line0)","SELECT `phone`,
       `room`,
       `building`
FROM
  (SELECT `LHS`.`facid` AS `facid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`rank` AS `rank`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`phone` AS `phone`,
          `LHS`.`room` AS `room`,
          `LHS`.`building` AS `building`
   FROM `df_faculty` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_faculty`
      WHERE (`fname` = 'Jerry'
             AND `lname` = 'Prince')) AS RHS ON (LHS.facid = RHS.facid
                                                 AND LHS.lname = RHS.lname
                                                 AND LHS.fname = RHS.fname
                                                 AND LHS.rank = RHS.rank
                                                 AND LHS.sex = RHS.sex
                                                 AND LHS.phone = RHS.phone
                                                 AND LHS.room = RHS.room
                                                 AND LHS.building = RHS.building))
ORDER BY phone;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0038,"filter(input1, 'age < 20L'), semi_join(input0, line0)","SELECT DISTINCT stuid
FROM
  (SELECT *
   FROM df_participates_in AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_student
           WHERE (age < 20)) AS RHS
        WHERE (LHS.stuid = RHS.stuid) ))
ORDER BY stuid;",2,13,4,1,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/activity_1/0003,"intersect(input0, input0, 'building')","SELECT building
FROM
  (SELECT building
   FROM df_faculty INTERSECT SELECT building
   FROM df_faculty)
ORDER BY building;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/activity_1/0027,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_activity)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0030,"inner_join(input0, input1, ""'facid' = 'advisor'"")","SELECT DISTINCT facid
FROM
  (SELECT LHS.facid AS facid,
          LHS.actid AS actid,
          RHS.stuid AS stuid,
          RHS.lname AS lname,
          RHS.fname AS fname,
          RHS.age AS age,
          RHS.sex AS sex,
          RHS.major AS major,
          RHS.city_code AS city_code
   FROM df_faculty_participates_in AS LHS
   INNER JOIN df_student AS RHS ON (LHS.facid = RHS.advisor))
ORDER BY facid;",1,6,2,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/activity_1/0013,"summarise(input0, 'n = n()', ""'building','rank'""), filter(line0, ""rank == 'Professor' & n >= 10L"")","SELECT `building`
FROM
  (SELECT `building`,
          `rank`,
          COUNT() AS `n`
   FROM `df_faculty`
   GROUP BY `building`,
            `rank`)
WHERE (`rank` = 'Professor'
       AND n >= 10)
ORDER BY building;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0006,"filter(input0, ""sex == 'M'"")","SELECT `facid`
FROM `df_faculty`
WHERE (`sex` = 'M')
ORDER BY facid;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0004,"intersect(input0, input0, 'rank'), inner_join(line0, input0, ""'rank'"")","SELECT rank,
       fname,
       lname
FROM
  (SELECT LHS.rank AS rank,
          RHS.facid AS facid,
          RHS.lname AS lname,
          RHS.fname AS fname,
          RHS.sex AS sex,
          RHS.phone AS phone,
          RHS.room AS room,
          RHS.building AS building
   FROM
     (SELECT rank
      FROM df_faculty INTERSECT SELECT rank
      FROM df_faculty) AS LHS
   INNER JOIN df_faculty AS RHS ON (LHS.rank = RHS.rank))
ORDER BY rank;",2,10,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0
spider/activity_1/0012,"summarise(input0, 'n = n()', ""'building','phone'""), limit(line0, 'desc(phone)')","SELECT building
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT building,
                phone,
                COUNT() AS n
         FROM df_faculty
         GROUP BY building,
                  phone)
      ORDER BY phone DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0026,"intersect(input0, input0, 'activity_name')","SELECT activity_name
FROM
  (SELECT activity_name
   FROM df_activity INTERSECT SELECT activity_name
   FROM df_activity)
ORDER BY activity_name;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/activity_1/0015,"summarise(input0, 'n = n()', ""'rank','sex'"")","SELECT rank,
       sex,
       n AS count___
FROM
  (SELECT rank,
          sex,
          COUNT() AS n
   FROM df_faculty
   GROUP BY rank,
            sex)
ORDER BY rank;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0005,"filter(input0, ""sex == 'F'""), semi_join(line0, input0)","SELECT `fname`,
       `lname`,
       `phone`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_faculty`
      WHERE (`sex` = 'F')) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_faculty AS RHS
        WHERE (LHS.facid = RHS.facid
               AND LHS.lname = RHS.lname
               AND LHS.fname = RHS.fname
               AND LHS.rank = RHS.rank
               AND LHS.sex = RHS.sex
               AND LHS.phone = RHS.phone
               AND LHS.room = RHS.room
               AND LHS.building = RHS.building) ))
ORDER BY fname;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/activity_1/0016,"summarise(input0, 'n = n()', ""'rank','sex'""), limit(line0, 'n')","SELECT rank
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT rank,
                sex,
                COUNT() AS n
         FROM df_faculty
         GROUP BY rank,
                  sex)
      ORDER BY n)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0032,"natural_join3(input0, input1, input2), filter(line0, ""fname == 'Mark' & lname == 'Giuliano'"")","SELECT `activity_name`
FROM
  (SELECT `LHS`.`actid` AS `actid`,
          `LHS`.`activity_name` AS `activity_name`,
          `LHS`.`facid` AS `facid`,
          `RHS`.`lname` AS `lname`,
          `RHS`.`fname` AS `fname`,
          `RHS`.`rank` AS `rank`,
          `RHS`.`sex` AS `sex`,
          `RHS`.`phone` AS `phone`,
          `RHS`.`room` AS `room`,
          `RHS`.`building` AS `building`
   FROM
     (SELECT `LHS`.`actid` AS `actid`,
             `LHS`.`activity_name` AS `activity_name`,
             `RHS`.`facid` AS `facid`
      FROM `df_activity` AS `LHS`
      INNER JOIN `df_faculty_participates_in` AS `RHS` ON (`LHS`.`actid` = `RHS`.`actid`)) AS `LHS`
   INNER JOIN `df_faculty` AS `RHS` ON (`LHS`.`facid` = `RHS`.`facid`))
WHERE (`fname` = 'Mark'
       AND `lname` = 'Giuliano')
ORDER BY activity_name;",2,9,3,0,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/activity_1/0018,"filter(input0, ""fname == 'Linda' & lname == 'Smith'""), inner_join(line0, input1, ""'advisor' = 'facid'"")","SELECT `fname_other` AS `fname`,
       `lname_other` AS `lname`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `RHS`.`lname` AS `lname_other`,
          `RHS`.`fname` AS `fname_other`,
          `RHS`.`rank` AS `rank`,
          `RHS`.`sex` AS `sex_other`,
          `RHS`.`phone` AS `phone`,
          `RHS`.`room` AS `room`,
          `RHS`.`building` AS `building`
   FROM
     (SELECT *
      FROM `df_student`
      WHERE (`fname` = 'Linda'
             AND `lname` = 'Smith')) AS LHS
   INNER JOIN df_faculty AS RHS ON (LHS.advisor = RHS.facid))
ORDER BY fname;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/activity_1/0041,"filter(input0, ""activity_name != 'Canoeing' | activity_name != 'Kayaking'""), natural_join3(input1, input2, line0)","SELECT DISTINCT `lname`
FROM
  (SELECT `LHS`.`facid` AS `facid`,
          `LHS`.`actid` AS `actid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`rank` AS `rank`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`phone` AS `phone`,
          `LHS`.`room` AS `room`,
          `LHS`.`building` AS `building`,
          `RHS`.`activity_name` AS `activity_name`
   FROM
     (SELECT `LHS`.`facid` AS `facid`,
             `LHS`.`actid` AS `actid`,
             `RHS`.`lname` AS `lname`,
             `RHS`.`fname` AS `fname`,
             `RHS`.`rank` AS `rank`,
             `RHS`.`sex` AS `sex`,
             `RHS`.`phone` AS `phone`,
             `RHS`.`room` AS `room`,
             `RHS`.`building` AS `building`
      FROM `df_faculty_participates_in` AS `LHS`
      INNER JOIN `df_faculty` AS `RHS` ON (`LHS`.`facid` = `RHS`.`facid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_activity`
      WHERE (`activity_name` != 'Canoeing'
             OR `activity_name` != 'Kayaking')) AS RHS ON (LHS.actid = RHS.actid))
ORDER BY lname;",2,13,4,1,4,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/activity_1/0020,"filter(input1, ""fname == 'Michael' | lname == 'Goodrich'""), inner_join(input0, line0, ""'advisor' = 'facid'"")","SELECT `fname`,
       `lname`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `RHS`.`lname` AS `lname_other`,
          `RHS`.`fname` AS `fname_other`,
          `RHS`.`rank` AS `rank`,
          `RHS`.`sex` AS `sex_other`,
          `RHS`.`phone` AS `phone`,
          `RHS`.`room` AS `room`,
          `RHS`.`building` AS `building`
   FROM `df_student` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_faculty`
      WHERE (`fname` = 'Michael'
             OR `lname` = 'Goodrich')) AS RHS ON (LHS.advisor = RHS.facid))
ORDER BY fname;",2,9,3,0,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/activity_1/0019,"inner_join(input0, input1, ""'advisor' = 'facid'""), filter(line0, ""rank == 'Professor'"")","SELECT `stuid`
FROM
  (SELECT `stuid`,
          `lname`,
          `fname`,
          `age`,
          `sex`,
          `major`,
          `advisor`,
          `city_code`,
          `lname_other`,
          `fname_other`,
          `rank`,
          `sex_other`,
          `phone`,
          `room`,
          `building`,
          `advisor` AS `facid`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `RHS`.`lname` AS `lname_other`,
             `RHS`.`fname` AS `fname_other`,
             `RHS`.`rank` AS `rank`,
             `RHS`.`sex` AS `sex_other`,
             `RHS`.`phone` AS `phone`,
             `RHS`.`room` AS `room`,
             `RHS`.`building` AS `building`
      FROM `df_student` AS `LHS`
      INNER JOIN `df_faculty` AS `RHS` ON (`LHS`.`advisor` = `RHS`.`facid`)))
WHERE (`rank` = 'Professor')
ORDER BY stuid;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/activity_1/0007,"filter(input0, ""sex == 'F' & rank == 'Professor'""), summarise(line0, 'n_distinct = n_distinct(rank)', '')","SELECT `n_distinct` AS `count___`
FROM
  (SELECT COUNT(DISTINCT `rank`) AS `n_distinct`
   FROM
     (SELECT *
      FROM `df_faculty`
      WHERE (`sex` = 'F'
             AND `rank` = 'Professor')))
ORDER BY count___;",2,8,3,1,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0034,"inner_join(input1, input0, ""'actid'""), summarise(line0, 'n = n()', ""'actid','activity_name'"")","SELECT activity_name,
       n AS count___
FROM
  (SELECT actid,
          activity_name,
          COUNT() AS n
   FROM
     (SELECT LHS.facid AS facid,
             LHS.actid AS actid,
             RHS.activity_name AS activity_name
      FROM df_faculty_participates_in AS LHS
      INNER JOIN df_activity AS RHS ON (LHS.actid = RHS.actid))
   GROUP BY actid,
            activity_name)
ORDER BY activity_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/activity_1/0021,"left_join(input0, input1), summarise(line0, 'n = n()', ""'advisor','room'"")","SELECT advisor AS facid,
       n AS count___
FROM
  (SELECT advisor,
          room,
          COUNT() AS n
   FROM
     (SELECT LHS.stuid AS stuid,
             LHS.lname AS lname,
             LHS.fname AS fname,
             LHS.age AS age,
             LHS.sex AS sex,
             LHS.major AS major,
             LHS.advisor AS advisor,
             LHS.city_code AS city_code,
             RHS.facid AS facid,
             RHS.rank AS rank,
             RHS.phone AS phone,
             RHS.room AS room,
             RHS.building AS building
      FROM df_student AS LHS
      LEFT JOIN df_faculty AS RHS ON (LHS.lname = RHS.lname
                                      AND LHS.fname = RHS.fname
                                      AND LHS.sex = RHS.sex))
   GROUP BY advisor,
            room)
ORDER BY facid;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/activity_1/0023,"mutate(input1, 'n = n()'), anti_join(line0, input0, ""'lname','sex'""), limit(line1, 'desc(lname)')","SELECT fname,
       lname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM
           (SELECT facid,
                   lname,
                   fname,
                   rank,
                   sex,
                   phone,
                   room,
                   building,
                   COUNT(*) OVER () AS n
            FROM df_faculty) AS LHS
         WHERE NOT EXISTS
             (SELECT 1
              FROM df_student AS RHS
              WHERE (LHS.lname = RHS.lname
                     AND LHS.sex = RHS.sex) ))
      ORDER BY lname DESC)
   LIMIT 1);",2,19,6,0,6,0,2,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
spider/activity_1/0001,"summarise(input0, 'n = n()', ""'facid','sex'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT facid,
          sex,
          COUNT() AS n
   FROM df_faculty
   GROUP BY facid,
            sex)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/activity_1/0043,"filter(input0, ""activity_name != 'Canoeing' | activity_name != 'Kayaking'""), natural_join3(input1, input2, line0)","SELECT DISTINCT `lname`
FROM
  (SELECT `LHS`.`facid` AS `facid`,
          `LHS`.`actid` AS `actid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`rank` AS `rank`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`phone` AS `phone`,
          `LHS`.`room` AS `room`,
          `LHS`.`building` AS `building`,
          `RHS`.`activity_name` AS `activity_name`
   FROM
     (SELECT `LHS`.`facid` AS `facid`,
             `LHS`.`actid` AS `actid`,
             `RHS`.`lname` AS `lname`,
             `RHS`.`fname` AS `fname`,
             `RHS`.`rank` AS `rank`,
             `RHS`.`sex` AS `sex`,
             `RHS`.`phone` AS `phone`,
             `RHS`.`room` AS `room`,
             `RHS`.`building` AS `building`
      FROM `df_faculty_participates_in` AS `LHS`
      INNER JOIN `df_faculty` AS `RHS` ON (`LHS`.`facid` = `RHS`.`facid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_activity`
      WHERE (`activity_name` != 'Canoeing'
             OR `activity_name` != 'Kayaking')) AS RHS ON (LHS.actid = RHS.actid))
ORDER BY lname;",2,13,4,1,4,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/activity_1/0014,"summarise(input0, 'n = n()', ""'rank'"")","SELECT rank,
       n AS count___
FROM
  (SELECT rank,
          COUNT() AS n
   FROM df_faculty
   GROUP BY rank)
ORDER BY rank;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0009,"filter(input0, ""rank == 'Professor' & building == 'NEB'""), summarise(line0, 'n = n()', ""'building','sex'"")","SELECT `n` AS `count___`
FROM
  (SELECT `building`,
          `sex`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_faculty`
      WHERE (`rank` = 'Professor'
             AND `building` = 'NEB'))
   GROUP BY building,
            sex)
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0011,"summarise(input0, 'n = n()', ""'building'"")","SELECT building,
       n AS count___
FROM
  (SELECT building,
          COUNT() AS n
   FROM df_faculty
   GROUP BY building)
ORDER BY building;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0029,"anti_join(input1, input0, ""'facid'"")","SELECT facid
FROM
  (SELECT *
   FROM df_faculty AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_faculty_participates_in AS RHS
        WHERE (LHS.facid = RHS.facid) ))
ORDER BY facid;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/activity_1/0010,"filter(input0, ""rank == 'Instructor'"")","SELECT `fname`,
       `lname`
FROM `df_faculty`
WHERE (`rank` = 'Instructor')
ORDER BY fname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0044,"filter(input0, ""activity_name == 'Canoeing' | activity_name != 'Kayaking'""), natural_join(input1, line0)","SELECT DISTINCT `stuid`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`actid` AS `actid`,
          `RHS`.`activity_name` AS `activity_name`
   FROM `df_participates_in` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_activity`
      WHERE (`activity_name` = 'Canoeing'
             OR `activity_name` != 'Kayaking')) AS RHS ON (LHS.actid = RHS.actid))
ORDER BY stuid;",2,10,3,1,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0040,"summarise(input1, 'n = n()', ""'actid'""), natural_join3(input0, input1, line0), limit(line1, 'desc(n)')","SELECT activity_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.actid AS actid,
                LHS.activity_name AS activity_name,
                LHS.stuid AS stuid,
                RHS.n AS n
         FROM
           (SELECT LHS.actid AS actid,
                   LHS.activity_name AS activity_name,
                   RHS.stuid AS stuid
            FROM df_activity AS LHS
            INNER JOIN df_participates_in AS RHS ON (LHS.actid = RHS.actid)) AS LHS
         INNER JOIN
           (SELECT actid,
                   COUNT() AS n
            FROM df_participates_in
            GROUP BY actid) AS RHS ON (LHS.actid = RHS.actid))
      ORDER BY n DESC)
   LIMIT 1);",2,16,6,0,6,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
spider/activity_1/0028,"summarise(input0, 'n_distinct = n_distinct(facid)', '')","SELECT n_distinct AS count_distinct_facid_
FROM
  (SELECT COUNT(DISTINCT facid) AS n_distinct
   FROM df_faculty_participates_in)
ORDER BY count_distinct_facid_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/activity_1/0031,"filter(input1, ""fname != 'Mark' & lname != 'Giuliano'""), anti_join(input0, line0, ""'facid'""), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM
  (SELECT *
   FROM `df_faculty_participates_in` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_faculty`
           WHERE (`fname` != 'Mark'
                  AND `lname` != 'Giuliano')) AS RHS
        WHERE (LHS.facid = RHS.facid) ))
ORDER BY count___;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/gymnast/0002,df_gymnast,"SELECT total_points
FROM df_gymnast
ORDER BY total_points;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/gymnast/0017,"inner_join(input0, input1, ""'gymnast_id' = 'people_id'""), anti_join(input1, line0, ""'hometown'"")","SELECT hometown
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT gymnast_id,
                  floor_exercise_points,
                  pommel_horse_points,
                  rings_points,
                  vault_points,
                  parallel_bars_points,
                  horizontal_bar_points,
                  total_points,
                  name,
                  age,
                  height,
                  hometown,
                  gymnast_id AS people_id
           FROM
             (SELECT LHS.gymnast_id AS gymnast_id,
                     LHS.floor_exercise_points AS floor_exercise_points,
                     LHS.pommel_horse_points AS pommel_horse_points,
                     LHS.rings_points AS rings_points,
                     LHS.vault_points AS vault_points,
                     LHS.parallel_bars_points AS parallel_bars_points,
                     LHS.horizontal_bar_points AS horizontal_bar_points,
                     LHS.total_points AS total_points,
                     RHS.name AS name,
                     RHS.age AS age,
                     RHS.height AS height,
                     RHS.hometown AS hometown
              FROM df_gymnast AS LHS
              INNER JOIN df_people AS RHS ON (LHS.gymnast_id = RHS.people_id))) AS RHS
        WHERE (LHS.hometown = RHS.hometown) ))
ORDER BY hometown;",2,15,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
spider/gymnast/0008,"limit(input0, 'desc(height)')","SELECT age
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_people
      ORDER BY height DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/gymnast/0003,df_gymnast,"SELECT total_points
FROM df_gymnast
ORDER BY total_points;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/gymnast/0013,"inner_join(input0, input1, ""'gymnast_id' = 'people_id'""), summarise(line0, 'n = n()', ""'hometown'"")","SELECT hometown,
       n AS count___
FROM
  (SELECT hometown,
          COUNT() AS n
   FROM
     (SELECT gymnast_id,
             floor_exercise_points,
             pommel_horse_points,
             rings_points,
             vault_points,
             parallel_bars_points,
             horizontal_bar_points,
             total_points,
             name,
             age,
             height,
             hometown,
             gymnast_id AS people_id
      FROM
        (SELECT LHS.gymnast_id AS gymnast_id,
                LHS.floor_exercise_points AS floor_exercise_points,
                LHS.pommel_horse_points AS pommel_horse_points,
                LHS.rings_points AS rings_points,
                LHS.vault_points AS vault_points,
                LHS.parallel_bars_points AS parallel_bars_points,
                LHS.horizontal_bar_points AS horizontal_bar_points,
                LHS.total_points AS total_points,
                RHS.name AS name,
                RHS.age AS age,
                RHS.height AS height,
                RHS.hometown AS hometown
         FROM df_gymnast AS LHS
         INNER JOIN df_people AS RHS ON (LHS.gymnast_id = RHS.people_id)))
   GROUP BY hometown)
ORDER BY hometown;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/gymnast/0006,"inner_join(input0, input1, ""'gymnast_id' = 'people_id'"")","SELECT name
FROM
  (SELECT LHS.gymnast_id AS gymnast_id,
          LHS.floor_exercise_points AS floor_exercise_points,
          LHS.pommel_horse_points AS pommel_horse_points,
          LHS.rings_points AS rings_points,
          LHS.vault_points AS vault_points,
          LHS.parallel_bars_points AS parallel_bars_points,
          LHS.horizontal_bar_points AS horizontal_bar_points,
          LHS.total_points AS total_points,
          RHS.name AS name,
          RHS.age AS age,
          RHS.height AS height,
          RHS.hometown AS hometown
   FROM df_gymnast AS LHS
   INNER JOIN df_people AS RHS ON (LHS.gymnast_id = RHS.people_id))
ORDER BY name;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/gymnast/0004,"summarise(input0, 'meanhorizontal_bar_points = mean(horizontal_bar_points, na.rm = T)', '')","SELECT meanhorizontal_bar_points AS avg_horizontal_bar_points_
FROM
  (SELECT AVG(horizontal_bar_points) AS meanhorizontal_bar_points
   FROM df_gymnast)
ORDER BY avg_horizontal_bar_points_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/gymnast/0012,"inner_join(input0, input1, ""'gymnast_id' = 'people_id'""), filter(line0, ""total_points > '57.5'"")","SELECT DISTINCT `hometown`
FROM
  (SELECT `gymnast_id`,
          `floor_exercise_points`,
          `pommel_horse_points`,
          `rings_points`,
          `vault_points`,
          `parallel_bars_points`,
          `horizontal_bar_points`,
          `total_points`,
          `name`,
          `age`,
          `height`,
          `hometown`,
          `gymnast_id` AS `people_id`
   FROM
     (SELECT `LHS`.`gymnast_id` AS `gymnast_id`,
             `LHS`.`floor_exercise_points` AS `floor_exercise_points`,
             `LHS`.`pommel_horse_points` AS `pommel_horse_points`,
             `LHS`.`rings_points` AS `rings_points`,
             `LHS`.`vault_points` AS `vault_points`,
             `LHS`.`parallel_bars_points` AS `parallel_bars_points`,
             `LHS`.`horizontal_bar_points` AS `horizontal_bar_points`,
             `LHS`.`total_points` AS `total_points`,
             `RHS`.`name` AS `name`,
             `RHS`.`age` AS `age`,
             `RHS`.`height` AS `height`,
             `RHS`.`hometown` AS `hometown`
      FROM `df_gymnast` AS `LHS`
      INNER JOIN `df_people` AS `RHS` ON (`LHS`.`gymnast_id` = `RHS`.`people_id`)))
WHERE (`total_points` > '57.5')
ORDER BY hometown;",2,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/gymnast/0005,df_people,"SELECT name
FROM df_people
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/gymnast/0016,"inner_join(input0, input1, ""'gymnast_id' = 'people_id'"")","SELECT name
FROM
  (SELECT LHS.gymnast_id AS gymnast_id,
          LHS.floor_exercise_points AS floor_exercise_points,
          LHS.pommel_horse_points AS pommel_horse_points,
          LHS.rings_points AS rings_points,
          LHS.vault_points AS vault_points,
          LHS.parallel_bars_points AS parallel_bars_points,
          LHS.horizontal_bar_points AS horizontal_bar_points,
          LHS.total_points AS total_points,
          RHS.name AS name,
          RHS.age AS age,
          RHS.height AS height,
          RHS.hometown AS hometown
   FROM df_gymnast AS LHS
   INNER JOIN df_people AS RHS ON (LHS.gymnast_id = RHS.people_id))
ORDER BY name;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/gymnast/0018,"filter(input0, 'age <= 23 & age == 20'), intersect(line0, input0, 'hometown')","SELECT hometown
FROM
  (SELECT hometown
   FROM df_people
   WHERE (age <= 23.0
          AND age = 20.0) INTERSECT
     SELECT hometown
     FROM df_people)
ORDER BY hometown;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/gymnast/0020,"inner_join(input0, input1, ""'gymnast_id' = 'people_id'"")","SELECT age
FROM
  (SELECT LHS.gymnast_id AS gymnast_id,
          LHS.floor_exercise_points AS floor_exercise_points,
          LHS.pommel_horse_points AS pommel_horse_points,
          LHS.rings_points AS rings_points,
          LHS.vault_points AS vault_points,
          LHS.parallel_bars_points AS parallel_bars_points,
          LHS.horizontal_bar_points AS horizontal_bar_points,
          LHS.total_points AS total_points,
          RHS.name AS name,
          RHS.age AS age,
          RHS.height AS height,
          RHS.hometown AS hometown
   FROM df_gymnast AS LHS
   INNER JOIN df_people AS RHS ON (LHS.gymnast_id = RHS.people_id))
ORDER BY age;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/gymnast/0019,"summarise(input0, 'n = n()', ""'age','hometown'""), mutate(line0, 'n_distinct = n_distinct(hometown)')","SELECT DISTINCT COUNT(DISTINCT hometown) OVER () AS count_distinct_hometown_
FROM
  (SELECT age,
          hometown,
          COUNT() AS n
   FROM df_people
   GROUP BY age,
            hometown)
ORDER BY count_distinct_hometown_;",2,7,2,2,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/gymnast/0007,"filter(input1, ""hometown != 'Santo Domingo'""), inner_join(input0, line0, ""'gymnast_id' = 'people_id'"")","SELECT `name`
FROM
  (SELECT `LHS`.`gymnast_id` AS `gymnast_id`,
          `LHS`.`floor_exercise_points` AS `floor_exercise_points`,
          `LHS`.`pommel_horse_points` AS `pommel_horse_points`,
          `LHS`.`rings_points` AS `rings_points`,
          `LHS`.`vault_points` AS `vault_points`,
          `LHS`.`parallel_bars_points` AS `parallel_bars_points`,
          `LHS`.`horizontal_bar_points` AS `horizontal_bar_points`,
          `LHS`.`total_points` AS `total_points`,
          `RHS`.`name` AS `name`,
          `RHS`.`age` AS `age`,
          `RHS`.`height` AS `height`,
          `RHS`.`hometown` AS `hometown`
   FROM `df_gymnast` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_people`
      WHERE (`hometown` != 'Santo Domingo')) AS RHS ON (LHS.gymnast_id = RHS.people_id))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/gymnast/0001,"summarise(input0, 'n = n()', ""'gymnast_id','vault_points'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT gymnast_id,
          vault_points,
          COUNT() AS n
   FROM df_gymnast
   GROUP BY gymnast_id,
            vault_points)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/gymnast/0014,"summarise(input0, 'n = n()', ""'parallel_bars_points'""), inner_join(input1, line0, ""'people_id' = 'n'"")","SELECT DISTINCT hometown
FROM
  (SELECT LHS.people_id AS people_id,
          LHS.name AS name,
          LHS.age AS age,
          LHS.height AS height,
          LHS.hometown AS hometown,
          RHS.parallel_bars_points AS parallel_bars_points
   FROM df_people AS LHS
   INNER JOIN
     (SELECT parallel_bars_points,
             COUNT() AS n
      FROM df_gymnast
      GROUP BY parallel_bars_points) AS RHS ON (LHS.people_id = RHS.n))
ORDER BY hometown;",2,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/gymnast/0009,"limit(input0, 'desc(age)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_people
      ORDER BY age DESC)
   LIMIT 5);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/gymnast/0011,"inner_join(input0, input1, ""'gymnast_id' = 'people_id'""), mutate(line0, 'meanage = mean(age, na.rm = T)')","SELECT DISTINCT AVG(age) OVER () AS avg_t2_age_
FROM
  (SELECT gymnast_id,
          floor_exercise_points,
          pommel_horse_points,
          rings_points,
          vault_points,
          parallel_bars_points,
          horizontal_bar_points,
          total_points,
          name,
          age,
          height,
          hometown,
          gymnast_id AS people_id
   FROM
     (SELECT LHS.gymnast_id AS gymnast_id,
             LHS.floor_exercise_points AS floor_exercise_points,
             LHS.pommel_horse_points AS pommel_horse_points,
             LHS.rings_points AS rings_points,
             LHS.vault_points AS vault_points,
             LHS.parallel_bars_points AS parallel_bars_points,
             LHS.horizontal_bar_points AS horizontal_bar_points,
             LHS.total_points AS total_points,
             RHS.name AS name,
             RHS.age AS age,
             RHS.height AS height,
             RHS.hometown AS hometown
      FROM df_gymnast AS LHS
      INNER JOIN df_people AS RHS ON (LHS.gymnast_id = RHS.people_id)))
ORDER BY avg_t2_age_;",2,9,3,1,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/gymnast/0010,"natural_join(input0, input1), limit(line0, 'desc(pommel_horse_points)')","SELECT total_points
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.gymnast_id AS gymnast_id,
                LHS.floor_exercise_points AS floor_exercise_points,
                LHS.pommel_horse_points AS pommel_horse_points,
                LHS.rings_points AS rings_points,
                LHS.vault_points AS vault_points,
                LHS.parallel_bars_points AS parallel_bars_points,
                LHS.horizontal_bar_points AS horizontal_bar_points,
                LHS.total_points AS total_points,
                RHS.people_id AS people_id,
                RHS.name AS name,
                RHS.age AS age,
                RHS.height AS height,
                RHS.hometown AS hometown
         FROM df_gymnast AS LHS
         CROSS JOIN df_people AS RHS)
      ORDER BY pommel_horse_points DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0042,"anti_join(input0, input1, ''), mutate(line0, 'n_distinct = n_distinct(tourist_id)')","SELECT DISTINCT COUNT(DISTINCT tourist_id) OVER () AS count___
FROM
  (SELECT *
   FROM df_visitors AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_visits AS RHS
        WHERE (LHS.tourist_id = RHS.tourist_id) ))
ORDER BY count___;",2,13,3,2,3,0,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
spider/cre_Theme_park/0033,"summarise(input0, 'n = n()', ""'description','how_to_get_there'"")","SELECT how_to_get_there,
       n AS count___
FROM
  (SELECT description,
          how_to_get_there,
          COUNT() AS n
   FROM df_tourist_attractions
   GROUP BY description,
            how_to_get_there)
ORDER BY how_to_get_there;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0037,"left_join(input1, input0), filter(line0, ""address != '660 Shea Crescent' | how_to_get_there == 'walk'"")","SELECT `name`
FROM
  (SELECT `LHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
          `LHS`.`attraction_type_code` AS `attraction_type_code`,
          `LHS`.`location_id` AS `location_id`,
          `LHS`.`how_to_get_there` AS `how_to_get_there`,
          `LHS`.`name` AS `name`,
          `LHS`.`description` AS `description`,
          `LHS`.`opening_hours` AS `opening_hours`,
          `LHS`.`other_details` AS `other_details`,
          `RHS`.`location_name` AS `location_name`,
          `RHS`.`address` AS `address`
   FROM `df_tourist_attractions` AS `LHS`
   LEFT JOIN `df_locations` AS `RHS` ON (`LHS`.`location_id` = `RHS`.`location_id`
                                         AND `LHS`.`other_details` = `RHS`.`other_details`))
WHERE (`address` != '660 Shea Crescent'
       OR `how_to_get_there` = 'walk')
ORDER BY name;",2,7,2,0,2,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
spider/cre_Theme_park/0002,df_hotels,"SELECT price_range
FROM df_hotels
ORDER BY price_range;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0036,"left_join(input1, input0), summarise(line0, 'n = n()', ""'name','tourist_attraction_id'""), filter(line1, 'n == 1L')","SELECT name,
       tourist_attraction_id
FROM
  (SELECT name,
          tourist_attraction_id,
          COUNT() AS n
   FROM
     (SELECT LHS.visit_id AS visit_id,
             LHS.tourist_attraction_id AS tourist_attraction_id,
             LHS.tourist_id AS tourist_id,
             LHS.visit_date AS visit_date,
             LHS.visit_details AS visit_details,
             RHS.attraction_type_code AS attraction_type_code,
             RHS.location_id AS location_id,
             RHS.how_to_get_there AS how_to_get_there,
             RHS.name AS name,
             RHS.description AS description,
             RHS.opening_hours AS opening_hours,
             RHS.other_details AS other_details
      FROM df_visits AS LHS
      LEFT JOIN df_tourist_attractions AS RHS ON (LHS.tourist_attraction_id = RHS.tourist_attraction_id))
   GROUP BY name,
            tourist_attraction_id)
WHERE (n = 1)
ORDER BY name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/cre_Theme_park/0017,"filter(input1, ""name == 'game1'""), inner_join(line0, input0, ""'tourist_attraction_id'"")","SELECT `name_other` AS `name`
FROM
  (SELECT `LHS`.`photo_id` AS `photo_id`,
          `LHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`description` AS `description`,
          `LHS`.`filename` AS `filename`,
          `LHS`.`other_details` AS `other_details`,
          `RHS`.`attraction_type_code` AS `attraction_type_code`,
          `RHS`.`location_id` AS `location_id`,
          `RHS`.`how_to_get_there` AS `how_to_get_there`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`description` AS `description_other`,
          `RHS`.`opening_hours` AS `opening_hours`,
          `RHS`.`other_details` AS `other_details_other`
   FROM
     (SELECT *
      FROM `df_photos`
      WHERE (`name` = 'game1')) AS LHS
   INNER JOIN df_tourist_attractions AS RHS ON (LHS.tourist_attraction_id = RHS.tourist_attraction_id))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0008,"filter(input0, ""location_name == 'UK Gallery'""), intersect(line0, input0, 'address')","SELECT `address`
FROM
  (SELECT `address`
   FROM `df_locations`
   WHERE (`location_name` = 'UK Gallery') INTERSECT
     SELECT address
     FROM df_locations)
ORDER BY address;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/cre_Theme_park/0039,"left_join(input1, input0), filter(line0, ""address == '254 Ottilie Junction' | how_to_get_there == 'bus'"")","SELECT `name`
FROM
  (SELECT `LHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
          `LHS`.`attraction_type_code` AS `attraction_type_code`,
          `LHS`.`location_id` AS `location_id`,
          `LHS`.`how_to_get_there` AS `how_to_get_there`,
          `LHS`.`name` AS `name`,
          `LHS`.`description` AS `description`,
          `LHS`.`opening_hours` AS `opening_hours`,
          `LHS`.`other_details` AS `other_details`,
          `RHS`.`location_name` AS `location_name`,
          `RHS`.`address` AS `address`
   FROM `df_tourist_attractions` AS `LHS`
   LEFT JOIN `df_locations` AS `RHS` ON (`LHS`.`location_id` = `RHS`.`location_id`
                                         AND `LHS`.`other_details` = `RHS`.`other_details`))
WHERE (`address` = '254 Ottilie Junction'
       OR `how_to_get_there` = 'bus')
ORDER BY name;",2,7,2,0,2,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
spider/cre_Theme_park/0038,"filter(input0, ""feature_details == 'park' | feature_details == 'shopping'""), natural_join3(input1, input2, line0)","SELECT DISTINCT `name`
FROM
  (SELECT `LHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
          `LHS`.`attraction_type_code` AS `attraction_type_code`,
          `LHS`.`location_id` AS `location_id`,
          `LHS`.`how_to_get_there` AS `how_to_get_there`,
          `LHS`.`name` AS `name`,
          `LHS`.`description` AS `description`,
          `LHS`.`opening_hours` AS `opening_hours`,
          `LHS`.`other_details` AS `other_details`,
          `LHS`.`feature_id` AS `feature_id`,
          `RHS`.`feature_details` AS `feature_details`
   FROM
     (SELECT `LHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
             `LHS`.`attraction_type_code` AS `attraction_type_code`,
             `LHS`.`location_id` AS `location_id`,
             `LHS`.`how_to_get_there` AS `how_to_get_there`,
             `LHS`.`name` AS `name`,
             `LHS`.`description` AS `description`,
             `LHS`.`opening_hours` AS `opening_hours`,
             `LHS`.`other_details` AS `other_details`,
             `RHS`.`feature_id` AS `feature_id`
      FROM `df_tourist_attractions` AS `LHS`
      INNER JOIN `df_tourist_attraction_features` AS `RHS` ON (`LHS`.`tourist_attraction_id` = `RHS`.`tourist_attraction_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_features`
      WHERE (`feature_details` = 'park'
             OR `feature_details` = 'shopping')) AS RHS ON (LHS.feature_id = RHS.feature_id))
ORDER BY name;",2,13,4,1,4,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/cre_Theme_park/0003,df_locations,"SELECT location_name
FROM df_locations
ORDER BY location_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0022,"filter(input0, ""how_to_get_there == 'walk' & how_to_get_there == 'bus'""), natural_join(input1, line0)","SELECT `market_details`
FROM
  (SELECT `LHS`.`market_id` AS `market_id`,
          `LHS`.`market_details` AS `market_details`,
          `RHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
          `RHS`.`attraction_type_code` AS `attraction_type_code`,
          `RHS`.`location_id` AS `location_id`,
          `RHS`.`how_to_get_there` AS `how_to_get_there`,
          `RHS`.`name` AS `name`,
          `RHS`.`description` AS `description`,
          `RHS`.`opening_hours` AS `opening_hours`,
          `RHS`.`other_details` AS `other_details`
   FROM `df_street_markets` AS `LHS`
   CROSS JOIN
     (SELECT *
      FROM `df_tourist_attractions`
      WHERE (`how_to_get_there` = 'walk'
             AND `how_to_get_there` = 'bus')) AS RHS)
ORDER BY market_details;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0030,"limit(input0, 'price_range')","SELECT other_hotel_details,
       star_rating_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_hotels
      ORDER BY price_range)
   LIMIT 3);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0013,"filter(input0, ""how_to_get_there == 'bus'""), intersect(line0, input0, 'name')","SELECT `name`
FROM
  (SELECT `name`
   FROM `df_tourist_attractions`
   WHERE (`how_to_get_there` = 'bus') INTERSECT
     SELECT name
     FROM df_tourist_attractions)
ORDER BY name;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/cre_Theme_park/0006,"filter(input0, 'star_rating_code == 5L')","SELECT price_range
FROM df_hotels
WHERE (star_rating_code = 5)
ORDER BY price_range;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0004,df_staff,"SELECT name,
       other_details
FROM df_staff
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0012,"intersect(input0, input0, 'visit_date')","SELECT visit_date
FROM
  (SELECT visit_date
   FROM df_visits INTERSECT SELECT visit_date
   FROM df_visits)
ORDER BY visit_date;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/cre_Theme_park/0015,"filter(input1, 'price_range < 10000'), natural_join(input0, input1), cross_join(line0, line1, 'price_range >= price_range.other')","SELECT star_rating_description
FROM
  (SELECT LHS.hotel_id AS hotel_id,
          LHS.star_rating_code AS star_rating_code,
          LHS.pets_allowed_yn AS pets_allowed_yn,
          LHS.price_range AS price_range,
          LHS.other_hotel_details AS other_hotel_details,
          RHS.star_rating_code AS star_rating_code_other,
          RHS.star_rating_description AS star_rating_description,
          RHS.hotel_id AS hotel_id_other,
          RHS.pets_allowed_yn AS pets_allowed_yn_other,
          RHS.price_range AS price_range_other,
          RHS.other_hotel_details AS other_hotel_details_other
   FROM
     (SELECT *
      FROM df_hotels
      WHERE (price_range < 10000.0)) AS LHS
   CROSS JOIN
     (SELECT LHS.star_rating_code AS star_rating_code,
             LHS.star_rating_description AS star_rating_description,
             RHS.hotel_id AS hotel_id,
             RHS.pets_allowed_yn AS pets_allowed_yn,
             RHS.price_range AS price_range,
             RHS.other_hotel_details AS other_hotel_details
      FROM df_ref_hotel_star_ratings AS LHS
      INNER JOIN df_hotels AS RHS ON (LHS.star_rating_code = RHS.star_rating_code)) AS RHS)
WHERE (price_range >= price_range_other)
ORDER BY star_rating_description;",3,11,4,0,4,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0
spider/cre_Theme_park/0005,df_visitors,"SELECT tourist_details
FROM df_visitors
ORDER BY tourist_details;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0018,"filter(input0, ""name == 'film festival'""), inner_join(input1, line0, ""'tourist_attraction_id'"")","SELECT `name`,
       `description`
FROM
  (SELECT `LHS`.`photo_id` AS `photo_id`,
          `LHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`description` AS `description`,
          `LHS`.`filename` AS `filename`,
          `LHS`.`other_details` AS `other_details`,
          `RHS`.`attraction_type_code` AS `attraction_type_code`,
          `RHS`.`location_id` AS `location_id`,
          `RHS`.`how_to_get_there` AS `how_to_get_there`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`description` AS `description_other`,
          `RHS`.`opening_hours` AS `opening_hours`,
          `RHS`.`other_details` AS `other_details_other`
   FROM `df_photos` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_tourist_attractions`
      WHERE (`name` = 'film festival')) AS RHS ON (LHS.tourist_attraction_id = RHS.tourist_attraction_id))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0041,"filter(input0, ""tourist_details == 'Alison' & tourist_details != 'Rosalind'""), natural_join4(input0, input1, input2, line0)","SELECT `name`
FROM
  (SELECT `LHS`.`tourist_id` AS `tourist_id`,
          `LHS`.`tourist_details` AS `tourist_details`,
          `LHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
          `LHS`.`attraction_type_code` AS `attraction_type_code`,
          `LHS`.`location_id` AS `location_id`,
          `LHS`.`how_to_get_there` AS `how_to_get_there`,
          `LHS`.`name` AS `name`,
          `LHS`.`description` AS `description`,
          `LHS`.`opening_hours` AS `opening_hours`,
          `LHS`.`other_details` AS `other_details`,
          `LHS`.`visit_id` AS `visit_id`,
          `LHS`.`visit_date` AS `visit_date`,
          `LHS`.`visit_details` AS `visit_details`
   FROM
     (SELECT `LHS`.`tourist_id` AS `tourist_id`,
             `LHS`.`tourist_details` AS `tourist_details`,
             `LHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
             `LHS`.`attraction_type_code` AS `attraction_type_code`,
             `LHS`.`location_id` AS `location_id`,
             `LHS`.`how_to_get_there` AS `how_to_get_there`,
             `LHS`.`name` AS `name`,
             `LHS`.`description` AS `description`,
             `LHS`.`opening_hours` AS `opening_hours`,
             `LHS`.`other_details` AS `other_details`,
             `RHS`.`visit_id` AS `visit_id`,
             `RHS`.`visit_date` AS `visit_date`,
             `RHS`.`visit_details` AS `visit_details`
      FROM
        (SELECT `LHS`.`tourist_id` AS `tourist_id`,
                `LHS`.`tourist_details` AS `tourist_details`,
                `RHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
                `RHS`.`attraction_type_code` AS `attraction_type_code`,
                `RHS`.`location_id` AS `location_id`,
                `RHS`.`how_to_get_there` AS `how_to_get_there`,
                `RHS`.`name` AS `name`,
                `RHS`.`description` AS `description`,
                `RHS`.`opening_hours` AS `opening_hours`,
                `RHS`.`other_details` AS `other_details`
         FROM `df_visitors` AS `LHS`
         CROSS JOIN `df_tourist_attractions` AS `RHS`) AS `LHS`
      INNER JOIN `df_visits` AS `RHS` ON (`LHS`.`tourist_id` = `RHS`.`tourist_id`
                                          AND `LHS`.`tourist_attraction_id` = `RHS`.`tourist_attraction_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_visitors`
      WHERE (`tourist_details` = 'Alison'
             AND `tourist_details` != 'Rosalind')) AS RHS ON (LHS.tourist_id = RHS.tourist_id
                                                              AND LHS.tourist_details = RHS.tourist_details))
ORDER BY name;",2,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
spider/cre_Theme_park/0035,"summarise(input1, 'n = n()', ""'tourist_attraction_id'""), filter(line0, 'n >= 2L'), semi_join(input0, line1)","SELECT name,
       tourist_attraction_id
FROM
  (SELECT *
   FROM df_tourist_attractions AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT tourist_attraction_id,
                     COUNT() AS n
              FROM df_visits
              GROUP BY tourist_attraction_id)
           WHERE (n >= 2)) AS RHS
        WHERE (LHS.tourist_attraction_id = RHS.tourist_attraction_id) ))
ORDER BY name;",3,14,5,0,5,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0
spider/cre_Theme_park/0020,"inner_join(input0, input1, ""'tourist_attraction_id' = 'shop_id'""), filter(line0, ""how_to_get_there == 'walk'"")","SELECT `shop_details`
FROM
  (SELECT `tourist_attraction_id`,
          `attraction_type_code`,
          `location_id`,
          `how_to_get_there`,
          `name`,
          `description`,
          `opening_hours`,
          `other_details`,
          `shop_details`,
          `tourist_attraction_id` AS `shop_id`
   FROM
     (SELECT `LHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
             `LHS`.`attraction_type_code` AS `attraction_type_code`,
             `LHS`.`location_id` AS `location_id`,
             `LHS`.`how_to_get_there` AS `how_to_get_there`,
             `LHS`.`name` AS `name`,
             `LHS`.`description` AS `description`,
             `LHS`.`opening_hours` AS `opening_hours`,
             `LHS`.`other_details` AS `other_details`,
             `RHS`.`shop_details` AS `shop_details`
      FROM `df_tourist_attractions` AS `LHS`
      INNER JOIN `df_shops` AS `RHS` ON (`LHS`.`tourist_attraction_id` = `RHS`.`shop_id`)))
WHERE (`how_to_get_there` = 'walk')
ORDER BY shop_details;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0019,"inner_join(input0, input1, ""'tourist_attraction_id' = 'royal_family_id'"")","SELECT description AS royal_family_details,
       how_to_get_there
FROM
  (SELECT LHS.tourist_attraction_id AS tourist_attraction_id,
          LHS.attraction_type_code AS attraction_type_code,
          LHS.location_id AS location_id,
          LHS.how_to_get_there AS how_to_get_there,
          LHS.name AS name,
          LHS.description AS description,
          LHS.opening_hours AS opening_hours,
          LHS.other_details AS other_details,
          RHS.royal_family_details AS royal_family_details
   FROM df_tourist_attractions AS LHS
   INNER JOIN df_royal_family AS RHS ON (LHS.tourist_attraction_id = RHS.royal_family_id))
ORDER BY royal_family_details;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0034,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'name','tourist_attraction_id'"")","SELECT name,
       tourist_attraction_id,
       n AS count___
FROM
  (SELECT name,
          tourist_attraction_id,
          COUNT() AS n
   FROM
     (SELECT LHS.tourist_attraction_id AS tourist_attraction_id,
             LHS.attraction_type_code AS attraction_type_code,
             LHS.location_id AS location_id,
             LHS.how_to_get_there AS how_to_get_there,
             LHS.name AS name,
             LHS.description AS description,
             LHS.opening_hours AS opening_hours,
             LHS.other_details AS other_details,
             RHS.visit_id AS visit_id,
             RHS.tourist_id AS tourist_id,
             RHS.visit_date AS visit_date,
             RHS.visit_details AS visit_details
      FROM df_tourist_attractions AS LHS
      INNER JOIN df_visits AS RHS ON (LHS.tourist_attraction_id = RHS.tourist_attraction_id))
   GROUP BY name,
            tourist_attraction_id)
ORDER BY name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0024,"filter(input0, ""tourist_details == 'Vincent'""), natural_join3(input1, input2, line0)","SELECT `name`
FROM
  (SELECT `LHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
          `LHS`.`attraction_type_code` AS `attraction_type_code`,
          `LHS`.`location_id` AS `location_id`,
          `LHS`.`how_to_get_there` AS `how_to_get_there`,
          `LHS`.`name` AS `name`,
          `LHS`.`description` AS `description`,
          `LHS`.`opening_hours` AS `opening_hours`,
          `LHS`.`other_details` AS `other_details`,
          `LHS`.`visit_id` AS `visit_id`,
          `LHS`.`tourist_id` AS `tourist_id`,
          `LHS`.`visit_date` AS `visit_date`,
          `LHS`.`visit_details` AS `visit_details`,
          `RHS`.`tourist_details` AS `tourist_details`
   FROM
     (SELECT `LHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
             `LHS`.`attraction_type_code` AS `attraction_type_code`,
             `LHS`.`location_id` AS `location_id`,
             `LHS`.`how_to_get_there` AS `how_to_get_there`,
             `LHS`.`name` AS `name`,
             `LHS`.`description` AS `description`,
             `LHS`.`opening_hours` AS `opening_hours`,
             `LHS`.`other_details` AS `other_details`,
             `RHS`.`visit_id` AS `visit_id`,
             `RHS`.`tourist_id` AS `tourist_id`,
             `RHS`.`visit_date` AS `visit_date`,
             `RHS`.`visit_details` AS `visit_details`
      FROM `df_tourist_attractions` AS `LHS`
      INNER JOIN `df_visits` AS `RHS` ON (`LHS`.`tourist_attraction_id` = `RHS`.`tourist_attraction_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_visitors`
      WHERE (`tourist_details` = 'Vincent')) AS RHS ON (LHS.tourist_id = RHS.tourist_id))
ORDER BY name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/cre_Theme_park/0021,"filter(input0, ""name != 'US museum'""), anti_join(input1, line0, ""'tourist_attraction_id'"")","SELECT `name`
FROM
  (SELECT *
   FROM `df_staff` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_tourist_attractions`
           WHERE (`name` != 'US museum')) AS RHS
        WHERE (LHS.tourist_attraction_id = RHS.tourist_attraction_id) ))
ORDER BY name;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/cre_Theme_park/0023,"filter(input0, ""tourist_details == 'Vincent'""), semi_join(input1, line0)","SELECT `visit_date`,
       `visit_details`
FROM
  (SELECT *
   FROM `df_visits` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_visitors`
           WHERE (`tourist_details` = 'Vincent')) AS RHS
        WHERE (LHS.tourist_id = RHS.tourist_id) ))
ORDER BY visit_date;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/cre_Theme_park/0001,"summarise(input0, 'n = n()', ""'other_hotel_details'"")","SELECT n AS count___
FROM
  (SELECT other_hotel_details,
          COUNT() AS n
   FROM df_hotels
   GROUP BY other_hotel_details)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0014,"filter(input0, ""how_to_get_there == 'bus' | how_to_get_there == 'walk'"")","SELECT `name`,
       `description` AS `opening_hours`
FROM `df_tourist_attractions`
WHERE (`how_to_get_there` = 'bus'
       OR `how_to_get_there` = 'walk')
ORDER BY name;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0009,"filter(input0, ""location_name != 'UK Gallery'""), intersect(line0, input0, 'other_details')","SELECT `other_details`
FROM
  (SELECT `other_details`
   FROM `df_locations`
   WHERE (`location_name` != 'UK Gallery') INTERSECT
     SELECT other_details
     FROM df_locations)
ORDER BY other_details;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/cre_Theme_park/0025,"filter(input0, ""tourist_details == 'Vincent' | tourist_details == 'Vivian'""), natural_join3(input1, input2, line0)","SELECT `name`,
       `visit_date`
FROM
  (SELECT `LHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
          `LHS`.`attraction_type_code` AS `attraction_type_code`,
          `LHS`.`location_id` AS `location_id`,
          `LHS`.`how_to_get_there` AS `how_to_get_there`,
          `LHS`.`name` AS `name`,
          `LHS`.`description` AS `description`,
          `LHS`.`opening_hours` AS `opening_hours`,
          `LHS`.`other_details` AS `other_details`,
          `LHS`.`visit_id` AS `visit_id`,
          `LHS`.`tourist_id` AS `tourist_id`,
          `LHS`.`visit_date` AS `visit_date`,
          `LHS`.`visit_details` AS `visit_details`,
          `RHS`.`tourist_details` AS `tourist_details`
   FROM
     (SELECT `LHS`.`tourist_attraction_id` AS `tourist_attraction_id`,
             `LHS`.`attraction_type_code` AS `attraction_type_code`,
             `LHS`.`location_id` AS `location_id`,
             `LHS`.`how_to_get_there` AS `how_to_get_there`,
             `LHS`.`name` AS `name`,
             `LHS`.`description` AS `description`,
             `LHS`.`opening_hours` AS `opening_hours`,
             `LHS`.`other_details` AS `other_details`,
             `RHS`.`visit_id` AS `visit_id`,
             `RHS`.`tourist_id` AS `tourist_id`,
             `RHS`.`visit_date` AS `visit_date`,
             `RHS`.`visit_details` AS `visit_details`
      FROM `df_tourist_attractions` AS `LHS`
      INNER JOIN `df_visits` AS `RHS` ON (`LHS`.`tourist_attraction_id` = `RHS`.`tourist_attraction_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_visitors`
      WHERE (`tourist_details` = 'Vincent'
             OR `tourist_details` = 'Vivian')) AS RHS ON (LHS.tourist_id = RHS.tourist_id))
ORDER BY name;",2,12,4,0,4,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/cre_Theme_park/0011,"summarise(input0, 'n_distinct = n_distinct(name)', ""'description','other_details'""), left_join(line0, input0)","SELECT n_distinct AS count_distinct_name_
FROM
  (SELECT LHS.description AS description,
          LHS.other_details AS other_details,
          LHS.n_distinct AS n_distinct,
          RHS.photo_id AS photo_id,
          RHS.tourist_attraction_id AS tourist_attraction_id,
          RHS.name AS name,
          RHS.filename AS filename
   FROM
     (SELECT description,
             other_details,
             COUNT(DISTINCT name) AS n_distinct
      FROM df_photos
      GROUP BY description,
               other_details) AS LHS
   LEFT JOIN df_photos AS RHS ON (LHS.description = RHS.description
                                  AND LHS.other_details = RHS.other_details))
ORDER BY count_distinct_name_;",2,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/cre_Theme_park/0029,"limit(input0, 'desc(star_rating_code)')","SELECT other_hotel_details
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_hotels
      ORDER BY star_rating_code DESC)
   LIMIT 3);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0028,df_hotels,"SELECT hotel_id,
       star_rating_code
FROM df_hotels
ORDER BY hotel_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Theme_park/0031,"summarise(input0, 'n = n()', ""'how_to_get_there','name'""), limit(line0, 'name')","SELECT how_to_get_there
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT how_to_get_there,
                name,
                COUNT() AS n
         FROM df_tourist_attractions
         GROUP BY how_to_get_there,
                  name)
      ORDER BY name)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/driving_school/0042,"filter(input0, ""first_name != 'Janessa' & last_name != 'Sawayn'""), anti_join(input1, line0, ""'staff_id'"")","SELECT `lesson_time` AS `sum_lesson_time_`
FROM
  (SELECT *
   FROM `df_lessons` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_staff`
           WHERE (`first_name` != 'Janessa'
                  AND `last_name` != 'Sawayn')) AS RHS
        WHERE (LHS.staff_id = RHS.staff_id) ))
ORDER BY sum_lesson_time_;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/driving_school/0033,"filter(input1, ""first_name == 'Carole' & last_name == 'Bernhard'""), natural_join(input0, input1), inner_join(line0, line1, ""'customer_address_id' = 'address_id','customer_status_code' = 'customer_status_code'"")","SELECT DISTINCT `zip_postcode`
FROM
  (SELECT `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`customer_address_id` AS `customer_address_id`,
          `LHS`.`customer_status_code` AS `customer_status_code`,
          `LHS`.`date_became_customer` AS `date_became_customer`,
          `LHS`.`date_of_birth` AS `date_of_birth`,
          `LHS`.`first_name` AS `first_name`,
          `LHS`.`last_name` AS `last_name`,
          `LHS`.`amount_outstanding` AS `amount_outstanding`,
          `LHS`.`email_address` AS `email_address`,
          `LHS`.`phone_number` AS `phone_number`,
          `LHS`.`cell_mobile_phone_number` AS `cell_mobile_phone_number`,
          `RHS`.`line_1_number_building` AS `line_1_number_building`,
          `RHS`.`city` AS `city`,
          `RHS`.`zip_postcode` AS `zip_postcode`,
          `RHS`.`state_province_county` AS `state_province_county`,
          `RHS`.`country` AS `country`,
          `RHS`.`customer_id` AS `customer_id_other`,
          `RHS`.`customer_address_id` AS `customer_address_id_other`,
          `RHS`.`date_became_customer` AS `date_became_customer_other`,
          `RHS`.`date_of_birth` AS `date_of_birth_other`,
          `RHS`.`first_name` AS `first_name_other`,
          `RHS`.`last_name` AS `last_name_other`,
          `RHS`.`amount_outstanding` AS `amount_outstanding_other`,
          `RHS`.`email_address` AS `email_address_other`,
          `RHS`.`phone_number` AS `phone_number_other`,
          `RHS`.`cell_mobile_phone_number` AS `cell_mobile_phone_number_other`
   FROM
     (SELECT *
      FROM `df_customers`
      WHERE (`first_name` = 'Carole'
             AND `last_name` = 'Bernhard')) AS LHS
   INNER JOIN
     (SELECT LHS.address_id AS address_id,
             LHS.line_1_number_building AS line_1_number_building,
             LHS.city AS city,
             LHS.zip_postcode AS zip_postcode,
             LHS.state_province_county AS state_province_county,
             LHS.country AS country,
             RHS.customer_id AS customer_id,
             RHS.customer_address_id AS customer_address_id,
             RHS.customer_status_code AS customer_status_code,
             RHS.date_became_customer AS date_became_customer,
             RHS.date_of_birth AS date_of_birth,
             RHS.first_name AS first_name,
             RHS.last_name AS last_name,
             RHS.amount_outstanding AS amount_outstanding,
             RHS.email_address AS email_address,
             RHS.phone_number AS phone_number,
             RHS.cell_mobile_phone_number AS cell_mobile_phone_number
      FROM df_addresses AS LHS
      CROSS JOIN df_customers AS RHS) AS RHS ON (LHS.customer_address_id = RHS.address_id
                                                 AND LHS.customer_status_code = RHS.customer_status_code))
ORDER BY zip_postcode;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0
spider/driving_school/0037,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'first_name','last_name'""), filter(line1, 'n > 2L')","SELECT first_name,
       last_name
FROM
  (SELECT first_name,
          last_name,
          COUNT() AS n
   FROM
     (SELECT LHS.customer_id AS customer_id,
             LHS.customer_address_id AS customer_address_id,
             LHS.customer_status_code AS customer_status_code,
             LHS.date_became_customer AS date_became_customer,
             LHS.date_of_birth AS date_of_birth,
             LHS.first_name AS first_name,
             LHS.last_name AS last_name,
             LHS.amount_outstanding AS amount_outstanding,
             LHS.email_address AS email_address,
             LHS.phone_number AS phone_number,
             LHS.cell_mobile_phone_number AS cell_mobile_phone_number,
             RHS.datetime_payment AS datetime_payment,
             RHS.payment_method_code AS payment_method_code,
             RHS.amount_payment AS amount_payment
      FROM df_customers AS LHS
      INNER JOIN df_customer_payments AS RHS ON (LHS.customer_id = RHS.customer_id))
   GROUP BY first_name,
            last_name)
WHERE (n > 2)
ORDER BY first_name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/driving_school/0002,"summarise(input0, 'n = n()', ""'vehicle_details','vehicle_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT vehicle_details,
          vehicle_id,
          COUNT() AS n
   FROM df_vehicles
   GROUP BY vehicle_details,
            vehicle_id)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/driving_school/0036,"anti_join(input0, input1, ""'customer_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_customer_payments AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY count___;",2,12,3,1,3,0,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
spider/driving_school/0017,"summarise(input1, 'n = n()', ""'staff_address_id','staff_id'""), natural_join(input0, line0), limit(line1, 'n')","SELECT city,
       staff_id AS count___
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.address_id AS address_id,
                LHS.line_1_number_building AS line_1_number_building,
                LHS.city AS city,
                LHS.zip_postcode AS zip_postcode,
                LHS.state_province_county AS state_province_county,
                LHS.country AS country,
                RHS.staff_address_id AS staff_address_id,
                RHS.staff_id AS staff_id,
                RHS.n AS n
         FROM df_addresses AS LHS
         CROSS JOIN
           (SELECT staff_address_id,
                   staff_id,
                   COUNT() AS n
            FROM df_staff
            GROUP BY staff_address_id,
                     staff_id) AS RHS)
      ORDER BY n)
   LIMIT 1);",2,11,5,0,5,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/driving_school/0008,"filter(input0, ""first_name == 'Ludie'""), summarise(line0, 'n = n()', ""'last_name','staff_id'"")","SELECT `n` AS `count___`
FROM
  (SELECT `last_name`,
          `staff_id`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_staff`
      WHERE (`first_name` = 'Ludie'))
   GROUP BY last_name,
            staff_id)
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/driving_school/0039,"filter(input0, ""lesson_status_code == 'Cancelled'""), summarise(line0, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_lessons`
      WHERE (`lesson_status_code` = 'Cancelled')))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/driving_school/0038,"summarise(input0, 'n = n()', ""'payment_method_code'"")","SELECT payment_method_code,
       n AS count___
FROM
  (SELECT payment_method_code,
          COUNT() AS n
   FROM df_customer_payments
   GROUP BY payment_method_code)
ORDER BY payment_method_code;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/driving_school/0003,"limit(input0, 'vehicle_id')","SELECT vehicle_details
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_vehicles
      ORDER BY vehicle_id)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/driving_school/0027,"summarise(input0, 'n = n()', ""'amount_outstanding','customer_status_code'""), limit(line0, 'desc(customer_status_code)')","SELECT customer_status_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT amount_outstanding,
                customer_status_code,
                COUNT() AS n
         FROM df_customers
         GROUP BY amount_outstanding,
                  customer_status_code)
      ORDER BY customer_status_code DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/driving_school/0022,"filter(input0, ""first_name == 'Marina' | last_name == 'Kohler'""), semi_join(input0, line0)","SELECT `customer_status_code`,
       `cell_mobile_phone_number`,
       `email_address`
FROM
  (SELECT *
   FROM `df_customers` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customers`
           WHERE (`first_name` = 'Marina'
                  OR `last_name` = 'Kohler')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id
               AND LHS.customer_address_id = RHS.customer_address_id
               AND LHS.customer_status_code = RHS.customer_status_code
               AND LHS.date_became_customer = RHS.date_became_customer
               AND LHS.date_of_birth = RHS.date_of_birth
               AND LHS.first_name = RHS.first_name
               AND LHS.last_name = RHS.last_name
               AND LHS.amount_outstanding = RHS.amount_outstanding
               AND LHS.email_address = RHS.email_address
               AND LHS.phone_number = RHS.phone_number
               AND LHS.cell_mobile_phone_number = RHS.cell_mobile_phone_number) ))
ORDER BY customer_status_code;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/driving_school/0030,"filter(input0, 'amount_outstanding >= 1000 & amount_outstanding < 3000'), filter(line0, 'amount_outstanding < 1000 | amount_outstanding != 3000')","SELECT first_name,
       last_name
FROM
  (SELECT *
   FROM df_customers
   WHERE (amount_outstanding >= 1000.0
          AND amount_outstanding < 3000.0))
WHERE (amount_outstanding < 1000.0
       OR amount_outstanding != 3000.0)
ORDER BY first_name;",2,7,2,0,2,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/driving_school/0006,"filter(input0, ""first_name == 'Janessa' | last_name == 'Sawayn'""), semi_join(line0, input0)","SELECT `date_joined_staff`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_staff`
      WHERE (`first_name` = 'Janessa'
             OR `last_name` = 'Sawayn')) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_staff AS RHS
        WHERE (LHS.staff_id = RHS.staff_id
               AND LHS.staff_address_id = RHS.staff_address_id
               AND LHS.nickname = RHS.nickname
               AND LHS.first_name = RHS.first_name
               AND LHS.middle_name = RHS.middle_name
               AND LHS.last_name = RHS.last_name
               AND LHS.date_of_birth = RHS.date_of_birth
               AND LHS.date_joined_staff = RHS.date_joined_staff
               AND LHS.date_left_staff = RHS.date_left_staff) ))
ORDER BY date_joined_staff;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/driving_school/0004,df_staff,"SELECT first_name,
       middle_name,
       last_name
FROM df_staff
ORDER BY first_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/driving_school/0012,"filter(input1, ""first_name == 'Janessa' & last_name == 'Sawayn'""), semi_join(input1, line0), inner_join(input0, line1, ""'address_id' = 'staff_address_id'"")","SELECT `country`,
       `state_province_county`
FROM
  (SELECT `LHS`.`address_id` AS `address_id`,
          `LHS`.`line_1_number_building` AS `line_1_number_building`,
          `LHS`.`city` AS `city`,
          `LHS`.`zip_postcode` AS `zip_postcode`,
          `LHS`.`state_province_county` AS `state_province_county`,
          `LHS`.`country` AS `country`,
          `RHS`.`staff_id` AS `staff_id`,
          `RHS`.`nickname` AS `nickname`,
          `RHS`.`first_name` AS `first_name`,
          `RHS`.`middle_name` AS `middle_name`,
          `RHS`.`last_name` AS `last_name`,
          `RHS`.`date_of_birth` AS `date_of_birth`,
          `RHS`.`date_joined_staff` AS `date_joined_staff`,
          `RHS`.`date_left_staff` AS `date_left_staff`
   FROM `df_addresses` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_staff` AS `LHS`
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_staff`
              WHERE (`first_name` = 'Janessa'
                     AND `last_name` = 'Sawayn')) AS RHS
           WHERE (LHS.staff_id = RHS.staff_id
                  AND LHS.staff_address_id = RHS.staff_address_id
                  AND LHS.nickname = RHS.nickname
                  AND LHS.first_name = RHS.first_name
                  AND LHS.middle_name = RHS.middle_name
                  AND LHS.last_name = RHS.last_name
                  AND LHS.date_of_birth = RHS.date_of_birth
                  AND LHS.date_joined_staff = RHS.date_joined_staff
                  AND LHS.date_left_staff = RHS.date_left_staff) )) AS RHS ON (LHS.address_id = RHS.staff_address_id))
ORDER BY country;",3,15,5,0,5,1,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0
spider/driving_school/0026,"summarise(input0, 'n = n()', ""'customer_status_code'"")","SELECT customer_status_code,
       n AS count___
FROM
  (SELECT customer_status_code,
          COUNT() AS n
   FROM df_customers
   GROUP BY customer_status_code)
ORDER BY customer_status_code;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/driving_school/0015,"filter(input0, ""state_province_county == 'Georgia'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM `df_addresses`
WHERE (`state_province_county` = 'Georgia')
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/driving_school/0005,"filter(input0, ""first_name == 'Janessa' & last_name == 'Sawayn'""), natural_join(input0, line0)","SELECT `date_of_birth`
FROM
  (SELECT `LHS`.`staff_id` AS `staff_id`,
          `LHS`.`staff_address_id` AS `staff_address_id`,
          `LHS`.`nickname` AS `nickname`,
          `LHS`.`first_name` AS `first_name`,
          `LHS`.`middle_name` AS `middle_name`,
          `LHS`.`last_name` AS `last_name`,
          `LHS`.`date_of_birth` AS `date_of_birth`,
          `LHS`.`date_joined_staff` AS `date_joined_staff`,
          `LHS`.`date_left_staff` AS `date_left_staff`
   FROM `df_staff` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_staff`
      WHERE (`first_name` = 'Janessa'
             AND `last_name` = 'Sawayn')) AS RHS ON (LHS.staff_id = RHS.staff_id
                                                     AND LHS.staff_address_id = RHS.staff_address_id
                                                     AND LHS.nickname = RHS.nickname
                                                     AND LHS.first_name = RHS.first_name
                                                     AND LHS.middle_name = RHS.middle_name
                                                     AND LHS.last_name = RHS.last_name
                                                     AND LHS.date_of_birth = RHS.date_of_birth
                                                     AND LHS.date_joined_staff = RHS.date_joined_staff
                                                     AND LHS.date_left_staff = RHS.date_left_staff))
ORDER BY date_of_birth;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/driving_school/0016,"filter(input0, ""city == 'Damianfort'""), intersect(line0, line0, 'address_id'), inner_join(line1, input1, ""'address_id' = 'staff_address_id'"")","SELECT `first_name`,
       `last_name`
FROM
  (SELECT `LHS`.`address_id` AS `address_id`,
          `RHS`.`staff_id` AS `staff_id`,
          `RHS`.`nickname` AS `nickname`,
          `RHS`.`first_name` AS `first_name`,
          `RHS`.`middle_name` AS `middle_name`,
          `RHS`.`last_name` AS `last_name`,
          `RHS`.`date_of_birth` AS `date_of_birth`,
          `RHS`.`date_joined_staff` AS `date_joined_staff`,
          `RHS`.`date_left_staff` AS `date_left_staff`
   FROM
     (SELECT `address_id`
      FROM `df_addresses`
      WHERE (`city` = 'Damianfort') INTERSECT
        SELECT `address_id`
        FROM `df_addresses` WHERE (`city` = 'Damianfort')) AS LHS
   INNER JOIN df_staff AS RHS ON (LHS.address_id = RHS.staff_address_id))
ORDER BY first_name;",3,12,4,0,4,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0
spider/driving_school/0032,"filter(input1, ""first_name != 'Carole' | last_name == 'Bernhard'""), natural_join3(input0, input1, line0)","SELECT DISTINCT `country`
FROM
  (SELECT `LHS`.`address_id` AS `address_id`,
          `LHS`.`line_1_number_building` AS `line_1_number_building`,
          `LHS`.`city` AS `city`,
          `LHS`.`zip_postcode` AS `zip_postcode`,
          `LHS`.`state_province_county` AS `state_province_county`,
          `LHS`.`country` AS `country`,
          `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`customer_address_id` AS `customer_address_id`,
          `LHS`.`customer_status_code` AS `customer_status_code`,
          `LHS`.`date_became_customer` AS `date_became_customer`,
          `LHS`.`date_of_birth` AS `date_of_birth`,
          `LHS`.`first_name` AS `first_name`,
          `LHS`.`last_name` AS `last_name`,
          `LHS`.`amount_outstanding` AS `amount_outstanding`,
          `LHS`.`email_address` AS `email_address`,
          `LHS`.`phone_number` AS `phone_number`,
          `LHS`.`cell_mobile_phone_number` AS `cell_mobile_phone_number`
   FROM
     (SELECT `LHS`.`address_id` AS `address_id`,
             `LHS`.`line_1_number_building` AS `line_1_number_building`,
             `LHS`.`city` AS `city`,
             `LHS`.`zip_postcode` AS `zip_postcode`,
             `LHS`.`state_province_county` AS `state_province_county`,
             `LHS`.`country` AS `country`,
             `RHS`.`customer_id` AS `customer_id`,
             `RHS`.`customer_address_id` AS `customer_address_id`,
             `RHS`.`customer_status_code` AS `customer_status_code`,
             `RHS`.`date_became_customer` AS `date_became_customer`,
             `RHS`.`date_of_birth` AS `date_of_birth`,
             `RHS`.`first_name` AS `first_name`,
             `RHS`.`last_name` AS `last_name`,
             `RHS`.`amount_outstanding` AS `amount_outstanding`,
             `RHS`.`email_address` AS `email_address`,
             `RHS`.`phone_number` AS `phone_number`,
             `RHS`.`cell_mobile_phone_number` AS `cell_mobile_phone_number`
      FROM `df_addresses` AS `LHS`
      CROSS JOIN `df_customers` AS `RHS`) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_customers`
      WHERE (`first_name` != 'Carole'
             OR `last_name` = 'Bernhard')) AS RHS ON (LHS.customer_id = RHS.customer_id
                                                      AND LHS.customer_address_id = RHS.customer_address_id
                                                      AND LHS.customer_status_code = RHS.customer_status_code
                                                      AND LHS.date_became_customer = RHS.date_became_customer
                                                      AND LHS.date_of_birth = RHS.date_of_birth
                                                      AND LHS.first_name = RHS.first_name
                                                      AND LHS.last_name = RHS.last_name
                                                      AND LHS.amount_outstanding = RHS.amount_outstanding
                                                      AND LHS.email_address = RHS.email_address
                                                      AND LHS.phone_number = RHS.phone_number
                                                      AND LHS.cell_mobile_phone_number = RHS.cell_mobile_phone_number))
ORDER BY country;",2,12,4,1,4,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/driving_school/0045,"intersect(input1, input0, 'last_name')","SELECT last_name
FROM
  (SELECT last_name
   FROM df_customers INTERSECT SELECT last_name
   FROM df_staff)
ORDER BY last_name;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/driving_school/0035,"filter(input0, ""first_name != 'Carole' | last_name != 'Bernhard'""), anti_join(input1, line0, ""'customer_id'""), mutate(line1, 'sumamount_payment = sum(amount_payment)')","SELECT `amount_payment` AS `sum_t1_amount_payment_`
FROM
  (SELECT *
   FROM `df_customer_payments` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customers`
           WHERE (`first_name` != 'Carole'
                  OR `last_name` != 'Bernhard')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY sum_t1_amount_payment_;",3,14,4,0,4,0,3,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/driving_school/0020,"filter(input0, ""first_name == 'Carole'""), semi_join(input0, line0)","SELECT `email_address`,
       `date_of_birth`
FROM
  (SELECT *
   FROM `df_customers` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customers`
           WHERE (`first_name` = 'Carole')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id
               AND LHS.customer_address_id = RHS.customer_address_id
               AND LHS.customer_status_code = RHS.customer_status_code
               AND LHS.date_became_customer = RHS.date_became_customer
               AND LHS.date_of_birth = RHS.date_of_birth
               AND LHS.first_name = RHS.first_name
               AND LHS.last_name = RHS.last_name
               AND LHS.amount_outstanding = RHS.amount_outstanding
               AND LHS.email_address = RHS.email_address
               AND LHS.phone_number = RHS.phone_number
               AND LHS.cell_mobile_phone_number = RHS.cell_mobile_phone_number) ))
ORDER BY email_address;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/driving_school/0019,"intersect(input0, input0, 'first_name'), left_join(line0, input0)","SELECT first_name,
       last_name
FROM
  (SELECT LHS.first_name AS first_name,
          RHS.customer_id AS customer_id,
          RHS.customer_address_id AS customer_address_id,
          RHS.customer_status_code AS customer_status_code,
          RHS.date_became_customer AS date_became_customer,
          RHS.date_of_birth AS date_of_birth,
          RHS.last_name AS last_name,
          RHS.amount_outstanding AS amount_outstanding,
          RHS.email_address AS email_address,
          RHS.phone_number AS phone_number,
          RHS.cell_mobile_phone_number AS cell_mobile_phone_number
   FROM
     (SELECT first_name
      FROM df_customers INTERSECT SELECT first_name
      FROM df_customers) AS LHS
   LEFT JOIN df_customers AS RHS ON (LHS.first_name = RHS.first_name))
ORDER BY first_name;",2,10,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0
spider/driving_school/0007,"filter(input0, ""first_name == 'Janessa' | last_name == 'Sawayn'""), semi_join(line0, input0)","SELECT `date_left_staff`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_staff`
      WHERE (`first_name` = 'Janessa'
             OR `last_name` = 'Sawayn')) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_staff AS RHS
        WHERE (LHS.staff_id = RHS.staff_id
               AND LHS.staff_address_id = RHS.staff_address_id
               AND LHS.nickname = RHS.nickname
               AND LHS.first_name = RHS.first_name
               AND LHS.middle_name = RHS.middle_name
               AND LHS.last_name = RHS.last_name
               AND LHS.date_of_birth = RHS.date_of_birth
               AND LHS.date_joined_staff = RHS.date_joined_staff
               AND LHS.date_left_staff = RHS.date_left_staff) ))
ORDER BY date_left_staff;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/driving_school/0024,"filter(input0, ""first_name == 'Carole' | last_name == 'Bernhard'""), semi_join(input0, line0)","SELECT `date_became_customer`
FROM
  (SELECT *
   FROM `df_customers` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customers`
           WHERE (`first_name` = 'Carole'
                  OR `last_name` = 'Bernhard')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id
               AND LHS.customer_address_id = RHS.customer_address_id
               AND LHS.customer_status_code = RHS.customer_status_code
               AND LHS.date_became_customer = RHS.date_became_customer
               AND LHS.date_of_birth = RHS.date_of_birth
               AND LHS.first_name = RHS.first_name
               AND LHS.last_name = RHS.last_name
               AND LHS.amount_outstanding = RHS.amount_outstanding
               AND LHS.email_address = RHS.email_address
               AND LHS.phone_number = RHS.phone_number
               AND LHS.cell_mobile_phone_number = RHS.cell_mobile_phone_number) ))
ORDER BY date_became_customer;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/driving_school/0021,"filter(input0, 'amount_outstanding >= 2000'), filter(line0, 'amount_outstanding > 2000')","SELECT phone_number,
       email_address
FROM
  (SELECT *
   FROM df_customers
   WHERE (amount_outstanding >= 2000.0))
WHERE (amount_outstanding > 2000.0)
ORDER BY phone_number;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/driving_school/0023,"filter(input0, ""customer_status_code == 'Good Customer'"")","SELECT `date_of_birth`
FROM `df_customers`
WHERE (`customer_status_code` = 'Good Customer')
ORDER BY date_of_birth;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/driving_school/0001,df_vehicles,"SELECT vehicle_id
FROM df_vehicles
ORDER BY vehicle_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/driving_school/0043,"filter(input0, ""first_name == 'Janessa' | last_name == 'Sawayn'""), natural_join(input1, line0), mutate(line1, 'meanprice = mean(price, na.rm = T)')","SELECT `price` AS `avg_price_`
FROM
  (SELECT `LHS`.`lesson_id` AS `lesson_id`,
          `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`lesson_status_code` AS `lesson_status_code`,
          `LHS`.`staff_id` AS `staff_id`,
          `LHS`.`vehicle_id` AS `vehicle_id`,
          `LHS`.`lesson_date` AS `lesson_date`,
          `LHS`.`lesson_time` AS `lesson_time`,
          `LHS`.`price` AS `price`,
          `RHS`.`staff_address_id` AS `staff_address_id`,
          `RHS`.`nickname` AS `nickname`,
          `RHS`.`first_name` AS `first_name`,
          `RHS`.`middle_name` AS `middle_name`,
          `RHS`.`last_name` AS `last_name`,
          `RHS`.`date_of_birth` AS `date_of_birth`,
          `RHS`.`date_joined_staff` AS `date_joined_staff`,
          `RHS`.`date_left_staff` AS `date_left_staff`
   FROM `df_lessons` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_staff`
      WHERE (`first_name` = 'Janessa'
             OR `last_name` = 'Sawayn')) AS RHS ON (LHS.staff_id = RHS.staff_id))
ORDER BY avg_price_;",3,9,3,0,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/driving_school/0046,"anti_join(input0, input1, ""'staff_id'"")","SELECT first_name
FROM
  (SELECT *
   FROM df_staff AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_lessons AS RHS
        WHERE (LHS.staff_id = RHS.staff_id) ))
ORDER BY first_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/driving_school/0047,"summarise(input1, 'n = n()', ""'customer_id','vehicle_id'""), filter(line0, 'n != 1L'), inner_join(line1, input0, ""'vehicle_id'"")","SELECT customer_id AS vehicle_id,
       vehicle_details
FROM
  (SELECT LHS.customer_id AS customer_id,
          LHS.vehicle_id AS vehicle_id,
          LHS.n AS n,
          RHS.vehicle_details AS vehicle_details
   FROM
     (SELECT *
      FROM
        (SELECT customer_id,
                vehicle_id,
                COUNT() AS n
         FROM df_lessons
         GROUP BY customer_id,
                  vehicle_id)
      WHERE (n != 1)) AS LHS
   INNER JOIN df_vehicles AS RHS ON (LHS.vehicle_id = RHS.vehicle_id))
ORDER BY vehicle_id;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/driving_school/0014,"filter(input1, ""first_name == 'Janessa' | last_name == 'Sawayn'""), inner_join(input0, line0, ""'address_id' = 'staff_address_id'"")","SELECT `zip_postcode`
FROM
  (SELECT `LHS`.`address_id` AS `address_id`,
          `LHS`.`line_1_number_building` AS `line_1_number_building`,
          `LHS`.`city` AS `city`,
          `LHS`.`zip_postcode` AS `zip_postcode`,
          `LHS`.`state_province_county` AS `state_province_county`,
          `LHS`.`country` AS `country`,
          `RHS`.`staff_id` AS `staff_id`,
          `RHS`.`nickname` AS `nickname`,
          `RHS`.`first_name` AS `first_name`,
          `RHS`.`middle_name` AS `middle_name`,
          `RHS`.`last_name` AS `last_name`,
          `RHS`.`date_of_birth` AS `date_of_birth`,
          `RHS`.`date_joined_staff` AS `date_joined_staff`,
          `RHS`.`date_left_staff` AS `date_left_staff`
   FROM `df_addresses` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_staff`
      WHERE (`first_name` = 'Janessa'
             OR `last_name` = 'Sawayn')) AS RHS ON (LHS.address_id = RHS.staff_address_id))
ORDER BY zip_postcode;",2,9,3,0,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/driving_school/0009,"filter(input0, ""first_name == 'Janessa' | last_name == 'Sawayn'""), semi_join(line0, input0)","SELECT `nickname`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_staff`
      WHERE (`first_name` = 'Janessa'
             OR `last_name` = 'Sawayn')) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_staff AS RHS
        WHERE (LHS.staff_id = RHS.staff_id
               AND LHS.staff_address_id = RHS.staff_address_id
               AND LHS.nickname = RHS.nickname
               AND LHS.first_name = RHS.first_name
               AND LHS.middle_name = RHS.middle_name
               AND LHS.last_name = RHS.last_name
               AND LHS.date_of_birth = RHS.date_of_birth
               AND LHS.date_joined_staff = RHS.date_joined_staff
               AND LHS.date_left_staff = RHS.date_left_staff) ))
ORDER BY nickname;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/driving_school/0025,"summarise(input0, 'n = n()', ""'date_of_birth','phone_number'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT date_of_birth,
          phone_number,
          COUNT() AS n
   FROM df_customers
   GROUP BY date_of_birth,
            phone_number)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/driving_school/0011,"filter(input1, ""first_name == 'Janessa' & last_name == 'Sawayn'""), semi_join(input1, line0), inner_join(input0, line1, ""'address_id' = 'staff_address_id'"")","SELECT `city`
FROM
  (SELECT `LHS`.`address_id` AS `address_id`,
          `LHS`.`line_1_number_building` AS `line_1_number_building`,
          `LHS`.`city` AS `city`,
          `LHS`.`zip_postcode` AS `zip_postcode`,
          `LHS`.`state_province_county` AS `state_province_county`,
          `LHS`.`country` AS `country`,
          `RHS`.`staff_id` AS `staff_id`,
          `RHS`.`nickname` AS `nickname`,
          `RHS`.`first_name` AS `first_name`,
          `RHS`.`middle_name` AS `middle_name`,
          `RHS`.`last_name` AS `last_name`,
          `RHS`.`date_of_birth` AS `date_of_birth`,
          `RHS`.`date_joined_staff` AS `date_joined_staff`,
          `RHS`.`date_left_staff` AS `date_left_staff`
   FROM `df_addresses` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_staff` AS `LHS`
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_staff`
              WHERE (`first_name` = 'Janessa'
                     AND `last_name` = 'Sawayn')) AS RHS
           WHERE (LHS.staff_id = RHS.staff_id
                  AND LHS.staff_address_id = RHS.staff_address_id
                  AND LHS.nickname = RHS.nickname
                  AND LHS.first_name = RHS.first_name
                  AND LHS.middle_name = RHS.middle_name
                  AND LHS.last_name = RHS.last_name
                  AND LHS.date_of_birth = RHS.date_of_birth
                  AND LHS.date_joined_staff = RHS.date_joined_staff
                  AND LHS.date_left_staff = RHS.date_left_staff) )) AS RHS ON (LHS.address_id = RHS.staff_address_id))
ORDER BY city;",3,15,5,0,5,1,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0
spider/driving_school/0029,"mutate(input0, 'maxamount_outstanding = max(amount_outstanding)'), mutate(line0, 'minamount_outstanding = min(amount_outstanding)'), mutate(line1, 'meanamount_outstanding = mean(amount_outstanding, na.rm = T)')","SELECT DISTINCT maxamount_outstanding AS max_amount_outstanding_,
                minamount_outstanding AS min_amount_outstanding_,
                AVG(amount_outstanding) OVER () AS avg_amount_outstanding_
FROM
  (SELECT customer_id,
          customer_address_id,
          customer_status_code,
          date_became_customer,
          date_of_birth,
          first_name,
          last_name,
          amount_outstanding,
          email_address,
          phone_number,
          cell_mobile_phone_number,
          maxamount_outstanding,
          MIN(amount_outstanding) OVER () AS minamount_outstanding
   FROM
     (SELECT customer_id,
             customer_address_id,
             customer_status_code,
             date_became_customer,
             date_of_birth,
             first_name,
             last_name,
             amount_outstanding,
             email_address,
             phone_number,
             cell_mobile_phone_number,
             MAX(amount_outstanding) OVER () AS maxamount_outstanding
      FROM df_customers))
ORDER BY max_amount_outstanding_;",3,10,3,1,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0
spider/driving_school/0010,"summarise(input0, 'n = n()', ""'date_left_staff','middle_name'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT date_left_staff,
          middle_name,
          COUNT() AS n
   FROM df_staff
   GROUP BY date_left_staff,
            middle_name)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/driving_school/0044,"filter(input0, ""first_name != 'Ray'""), anti_join(input1, line0, ''), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM
  (SELECT *
   FROM `df_lessons` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customers`
           WHERE (`first_name` != 'Ray')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY count___;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/driving_school/0028,"filter(input1, ""lesson_status_code == 'Completed'""), summarise(line0, 'n_distinct = n_distinct(lesson_status_code)', ""'customer_id'""), left_join(input0, line1), filter(line2, ""first_name == 'Rylan' | last_name == 'Goodwin'"")","SELECT `customer_address_id` AS `count___`
FROM
  (SELECT `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`customer_address_id` AS `customer_address_id`,
          `LHS`.`customer_status_code` AS `customer_status_code`,
          `LHS`.`date_became_customer` AS `date_became_customer`,
          `LHS`.`date_of_birth` AS `date_of_birth`,
          `LHS`.`first_name` AS `first_name`,
          `LHS`.`last_name` AS `last_name`,
          `LHS`.`amount_outstanding` AS `amount_outstanding`,
          `LHS`.`email_address` AS `email_address`,
          `LHS`.`phone_number` AS `phone_number`,
          `LHS`.`cell_mobile_phone_number` AS `cell_mobile_phone_number`,
          `RHS`.`n_distinct` AS `n_distinct`
   FROM `df_customers` AS `LHS`
   LEFT JOIN
     (SELECT `customer_id`,
             COUNT(DISTINCT `lesson_status_code`) AS `n_distinct`
      FROM `df_lessons`
      WHERE (`lesson_status_code` = 'Completed')
      GROUP BY `customer_id`) AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`))
WHERE (`first_name` = 'Rylan'
       OR `last_name` = 'Goodwin')
ORDER BY count___;",4,11,3,1,3,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,1,0,0,0,0,0,0,0
spider/driving_school/0031,"inner_join(input0, input1, ""'address_id' = 'customer_address_id'""), filter(line0, ""city == 'Lockmanfurt'"")","SELECT `first_name`,
       `last_name`
FROM
  (SELECT `address_id`,
          `line_1_number_building`,
          `city`,
          `zip_postcode`,
          `state_province_county`,
          `country`,
          `customer_id`,
          `customer_status_code`,
          `date_became_customer`,
          `date_of_birth`,
          `first_name`,
          `last_name`,
          `amount_outstanding`,
          `email_address`,
          `phone_number`,
          `cell_mobile_phone_number`,
          `address_id` AS `customer_address_id`
   FROM
     (SELECT `LHS`.`address_id` AS `address_id`,
             `LHS`.`line_1_number_building` AS `line_1_number_building`,
             `LHS`.`city` AS `city`,
             `LHS`.`zip_postcode` AS `zip_postcode`,
             `LHS`.`state_province_county` AS `state_province_county`,
             `LHS`.`country` AS `country`,
             `RHS`.`customer_id` AS `customer_id`,
             `RHS`.`customer_status_code` AS `customer_status_code`,
             `RHS`.`date_became_customer` AS `date_became_customer`,
             `RHS`.`date_of_birth` AS `date_of_birth`,
             `RHS`.`first_name` AS `first_name`,
             `RHS`.`last_name` AS `last_name`,
             `RHS`.`amount_outstanding` AS `amount_outstanding`,
             `RHS`.`email_address` AS `email_address`,
             `RHS`.`phone_number` AS `phone_number`,
             `RHS`.`cell_mobile_phone_number` AS `cell_mobile_phone_number`
      FROM `df_addresses` AS `LHS`
      INNER JOIN `df_customers` AS `RHS` ON (`LHS`.`address_id` = `RHS`.`customer_address_id`)))
WHERE (`city` = 'Lockmanfurt')
ORDER BY first_name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/sakila_1/0033,"limit(input0, 'rental_id')","SELECT payment_date
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_payment
      ORDER BY rental_id)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/sakila_1/0002,"summarise(input0, 'n = n()', ""'actor_id','first_name'""), limit(line0, 'actor_id')","SELECT first_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT actor_id,
                first_name,
                COUNT() AS n
         FROM df_actor
         GROUP BY actor_id,
                  first_name)
      ORDER BY actor_id)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/sakila_1/0036,"inner_join(input0, input1, ""'customer_id' = 'customer_id','store_id' = 'rental_id'"")","SELECT first_name,
       last_name
FROM
  (SELECT LHS.customer_id AS customer_id,
          LHS.store_id AS store_id,
          LHS.first_name AS first_name,
          LHS.last_name AS last_name,
          LHS.email AS email,
          LHS.address_id AS address_id,
          LHS.active AS active,
          LHS.create_date AS create_date,
          LHS.last_update AS last_update,
          RHS.rental_date AS rental_date,
          RHS.inventory_id AS inventory_id,
          RHS.return_date AS return_date,
          RHS.staff_id AS staff_id,
          RHS.last_update AS last_update_other
   FROM df_customer AS LHS
   INNER JOIN df_rental AS RHS ON (LHS.customer_id = RHS.customer_id
                                   AND LHS.store_id = RHS.rental_id))
ORDER BY first_name;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/sakila_1/0017,"summarise(input0, 'n = n()', ""'film_id','store_id'""), limit(line0, 'desc(store_id)')","SELECT store_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT film_id,
                store_id,
                COUNT() AS n
         FROM df_inventory
         GROUP BY film_id,
                  store_id)
      ORDER BY store_id DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/sakila_1/0039,"limit(input0, 'desc(amount)')","SELECT amount
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_payment
      ORDER BY amount DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/sakila_1/0038,"summarise(input0, 'n = n()', ""'last_name','store_id'""), limit(line0, 'desc(store_id)')","SELECT n AS store_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT last_name,
                store_id,
                COUNT() AS n
         FROM df_customer
         GROUP BY last_name,
                  store_id)
      ORDER BY store_id DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/sakila_1/0003,"summarise(input0, 'n = n()', ""'first_name','last_name'""), filter(line0, 'n > 1L')","SELECT first_name,
       last_name
FROM
  (SELECT first_name,
          last_name,
          COUNT() AS n
   FROM df_actor
   GROUP BY first_name,
            last_name)
WHERE (n > 1)
ORDER BY first_name;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/sakila_1/0030,"summarise(input0, 'n_distinct = n_distinct(rating)', ""'rental_duration'"")","SELECT DISTINCT n_distinct AS count_distinct_rating_
FROM
  (SELECT rental_duration,
          COUNT(DISTINCT rating) AS n_distinct
   FROM df_film
   GROUP BY rental_duration)
ORDER BY count_distinct_rating_;",1,6,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/sakila_1/0013,"limit(input0, 'rental_duration')","SELECT title,
       rental_rate
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_film
      ORDER BY rental_duration)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/sakila_1/0004,"summarise(input0, 'n = n()', ""'address2','district'""), anti_join(line0, input0, ""'address2','district'""), filter(line1, 'n >= 2L')","SELECT district
FROM
  (SELECT *
   FROM
     (SELECT address2,
             district,
             COUNT() AS n
      FROM df_address
      GROUP BY address2,
               district) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_address AS RHS
        WHERE (LHS.address2 = RHS.address2
               AND LHS.district = RHS.district) ))
WHERE (n >= 2)
ORDER BY district;",3,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0
spider/sakila_1/0012,"summarise(input0, 'n = n()', ""'active'""), filter(line0, 'active == T | n <= 1L')","SELECT n AS count___
FROM
  (SELECT active,
          COUNT() AS n
   FROM df_customer
   GROUP BY active)
WHERE (active = 1
       OR n <= 1)
ORDER BY count___;",2,6,2,0,2,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/sakila_1/0005,"filter(input0, ""address == '1031 Daugavpils Parkway'"")","SELECT `phone`,
       `postal_code`
FROM `df_address`
WHERE (`address` = '1031 Daugavpils Parkway')
ORDER BY phone;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/sakila_1/0016,"summarise(input1, 'n = n()', ""'actor_id'""), filter(line0, 'n <= 30L'), anti_join(input0, line1, ""'actor_id'"")","SELECT first_name,
       last_name
FROM
  (SELECT *
   FROM df_actor AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT actor_id,
                     COUNT() AS n
              FROM df_film_actor
              GROUP BY actor_id)
           WHERE (n <= 30)) AS RHS
        WHERE (LHS.actor_id = RHS.actor_id) ))
ORDER BY first_name;",3,15,5,0,5,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0
spider/sakila_1/0032,"filter(input0, 'store_id <= 1L'), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT *
      FROM df_inventory
      WHERE (store_id <= 1)))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/sakila_1/0041,"filter(input1, ""rental_date > parse_datetime('2005-08-23 02:06:01')""), anti_join(input0, line0, ""'customer_id'"")","SELECT `first_name`
FROM
  (SELECT *
   FROM `df_customer` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_rental`
           WHERE (`rental_date` > parse_datetime('2005-08-23 02:06:01'))) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY first_name;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/sakila_1/0035,"filter(input0, ""rating == 'PG' | length > 100L""), filter(line0, 'replacement_cost >= 200 | replacement_cost != length')","SELECT `title`
FROM
  (SELECT *
   FROM `df_film`
   WHERE (`rating` = 'PG'
          OR LENGTH > 100))
WHERE (replacement_cost >= 200.0
       OR replacement_cost != LENGTH)
ORDER BY title;",2,8,2,0,2,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/sakila_1/0020,"filter(input1, ""title != 'HUNGER ROOF'""), anti_join(input2, line0, ""'film_id'""), inner_join(line1, input0, ""'category_id'"")","SELECT `name`
FROM
  (SELECT `LHS`.`film_id` AS `film_id`,
          `LHS`.`category_id` AS `category_id`,
          `LHS`.`last_update` AS `last_update`,
          `RHS`.`name` AS `name`,
          `RHS`.`last_update` AS `last_update_other`
   FROM
     (SELECT *
      FROM `df_film_category` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_film`
              WHERE (`title` != 'HUNGER ROOF')) AS RHS
           WHERE (LHS.film_id = RHS.film_id) )) AS LHS
   INNER JOIN df_category AS RHS ON (LHS.category_id = RHS.category_id))
ORDER BY name;",3,16,5,0,5,1,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0
spider/sakila_1/0007,"filter(input0, ""district == 'California'""), summarise(line0, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_address`
      WHERE (`district` = 'California')))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/sakila_1/0034,"inner_join(input1, input0, ""'address_id'""), filter(line0, ""first_name == 'LINDA'"")","SELECT `address`,
       `email`
FROM
  (SELECT `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`store_id` AS `store_id`,
          `LHS`.`first_name` AS `first_name`,
          `LHS`.`last_name` AS `last_name`,
          `LHS`.`email` AS `email`,
          `LHS`.`address_id` AS `address_id`,
          `LHS`.`active` AS `active`,
          `LHS`.`create_date` AS `create_date`,
          `LHS`.`last_update` AS `last_update`,
          `RHS`.`address` AS `address`,
          `RHS`.`address2` AS `address2`,
          `RHS`.`district` AS `district`,
          `RHS`.`city_id` AS `city_id`,
          `RHS`.`postal_code` AS `postal_code`,
          `RHS`.`phone` AS `phone`,
          `RHS`.`last_update` AS `last_update_other`
   FROM `df_customer` AS `LHS`
   INNER JOIN `df_address` AS `RHS` ON (`LHS`.`address_id` = `RHS`.`address_id`))
WHERE (`first_name` = 'LINDA')
ORDER BY address;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/sakila_1/0024,"summarise(input0, 'n = n()', ""'language_id','last_update'""), filter(line0, 'n > language_id')","SELECT language_id AS count_distinct_language_id_
FROM
  (SELECT language_id,
          last_update,
          COUNT() AS n
   FROM df_film
   GROUP BY language_id,
            last_update)
WHERE (n > language_id)
ORDER BY count_distinct_language_id_;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/sakila_1/0021,"inner_join(input1, input0, ""'category_id'""), summarise(line0, 'n = n()', ""'category_id','name'"")","SELECT name,
       category_id,
       n AS count___
FROM
  (SELECT category_id,
          name,
          COUNT() AS n
   FROM
     (SELECT LHS.film_id AS film_id,
             LHS.category_id AS category_id,
             LHS.last_update AS last_update,
             RHS.name AS name,
             RHS.last_update AS last_update_other
      FROM df_film_category AS LHS
      INNER JOIN df_category AS RHS ON (LHS.category_id = RHS.category_id))
   GROUP BY category_id,
            name)
ORDER BY name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/sakila_1/0001,"mutate(input0, 'n_distinct = n_distinct(last_name)')","SELECT DISTINCT COUNT(DISTINCT last_name) OVER () AS count_distinct_last_name_
FROM df_actor
ORDER BY count_distinct_last_name_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/sakila_1/0009,"filter(input1, ""country == 'Australia'""), anti_join(line0, input0, ""'country_id','last_update'""), mutate(line1, 'n_distinct = n_distinct(country)')","SELECT COUNT(DISTINCT `country`) OVER () AS `count___`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_country`
      WHERE (`country` = 'Australia')) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_city AS RHS
        WHERE (LHS.country_id = RHS.country_id
               AND LHS.last_update = RHS.last_update) ))
ORDER BY count___;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/sakila_1/0025,"filter(input0, ""rating == 'R'"")","SELECT `title`
FROM `df_film`
WHERE (`rating` = 'R')
ORDER BY title;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/sakila_1/0010,"summarise(input0, 'n = n()', ""'country_id'""), left_join(input1, line0), filter(line1, 'n >= 3L')","SELECT country
FROM
  (SELECT LHS.country_id AS country_id,
          LHS.country AS country,
          LHS.last_update AS last_update,
          RHS.n AS n
   FROM df_country AS LHS
   LEFT JOIN
     (SELECT country_id,
             COUNT() AS n
      FROM df_city
      GROUP BY country_id) AS RHS ON (LHS.country_id = RHS.country_id))
WHERE (n >= 3)
ORDER BY country;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/manufactory_1/0033,"filter(input0, 'price >= 180'), natural_join(input0, line0)","SELECT name,
       price
FROM
  (SELECT LHS.code AS code,
          LHS.name AS name,
          LHS.price AS price,
          LHS.manufacturer AS manufacturer
   FROM df_products AS LHS
   INNER JOIN
     (SELECT *
      FROM df_products
      WHERE (price >= 180.0)) AS RHS ON (LHS.code = RHS.code
                                         AND LHS.name = RHS.name
                                         AND LHS.price = RHS.price
                                         AND LHS.manufacturer = RHS.manufacturer))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0037,"inner_join(input0, input1, ""'code' = 'manufacturer'""), summarise(line0, 'meanprice = mean(price, na.rm = T)', ""'name','revenue'""), filter(line1, 'meanprice >= 150')","SELECT meanprice AS avg_t1_price_,
       name
FROM
  (SELECT name,
          revenue,
          AVG(price) AS meanprice
   FROM
     (SELECT code,
             name,
             headquarter,
             founder,
             revenue,
             code_other,
             name_other,
             price,
             code AS manufacturer
      FROM
        (SELECT LHS.code AS code,
                LHS.name AS name,
                LHS.headquarter AS headquarter,
                LHS.founder AS founder,
                LHS.revenue AS revenue,
                RHS.code AS code_other,
                RHS.name AS name_other,
                RHS.price AS price
         FROM df_manufacturers AS LHS
         INNER JOIN df_products AS RHS ON (LHS.code = RHS.manufacturer)))
   GROUP BY name,
            revenue)
WHERE (meanprice >= 150.0)
ORDER BY avg_t1_price_;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/manufactory_1/0002,"filter(input0, ""founder == 'James'""), intersect(line0, input0, 'headquarter')","SELECT `headquarter`
FROM
  (SELECT `headquarter`
   FROM `df_manufacturers`
   WHERE (`founder` = 'James') INTERSECT
     SELECT headquarter
     FROM df_manufacturers)
ORDER BY headquarter;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/manufactory_1/0036,"inner_join(input0, input1, ""'code' = 'manufacturer'""), summarise(line0, 'meanprice = mean(price, na.rm = T)', ""'name','revenue'"")","SELECT meanprice AS avg_t1_price_,
       name
FROM
  (SELECT name,
          revenue,
          AVG(price) AS meanprice
   FROM
     (SELECT code,
             name,
             headquarter,
             founder,
             revenue,
             code_other,
             name_other,
             price,
             code AS manufacturer
      FROM
        (SELECT LHS.code AS code,
                LHS.name AS name,
                LHS.headquarter AS headquarter,
                LHS.founder AS founder,
                LHS.revenue AS revenue,
                RHS.code AS code_other,
                RHS.name AS name_other,
                RHS.price AS price
         FROM df_manufacturers AS LHS
         INNER JOIN df_products AS RHS ON (LHS.code = RHS.manufacturer)))
   GROUP BY name,
            revenue)
ORDER BY avg_t1_price_;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/manufactory_1/0017,"filter(input0, ""headquarter == 'Austin'""), cross_join(input0, line0, 'revenue > revenue.other'), mutate(line1, 'sumrevenue = sum(revenue)'), mutate(line2, 'minrevenue = min(revenue)')","SELECT DISTINCT `sumrevenue` AS `sum_revenue_`
FROM
  (SELECT `code`,
          `name`,
          `headquarter`,
          `founder`,
          `revenue`,
          `code_other`,
          `name_other`,
          `headquarter_other`,
          `founder_other`,
          `revenue_other`,
          SUM(`revenue`) OVER () AS `sumrevenue`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`code` AS `code`,
                `LHS`.`name` AS `name`,
                `LHS`.`headquarter` AS `headquarter`,
                `LHS`.`founder` AS `founder`,
                `LHS`.`revenue` AS `revenue`,
                `RHS`.`code` AS `code_other`,
                `RHS`.`name` AS `name_other`,
                `RHS`.`headquarter` AS `headquarter_other`,
                `RHS`.`founder` AS `founder_other`,
                `RHS`.`revenue` AS `revenue_other`
         FROM `df_manufacturers` AS `LHS`
         CROSS JOIN
           (SELECT *
            FROM `df_manufacturers`
            WHERE (`headquarter` = 'Austin')) AS RHS)
      WHERE (revenue > revenue_other)))
ORDER BY sum_revenue_;",4,14,5,1,5,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0
spider/manufactory_1/0008,"filter(input0, ""headquarter == 'Tokyo' | headquarter == 'Beijing'""), mutate(line0, 'n_distinct = n_distinct(headquarter)')","SELECT DISTINCT COUNT(DISTINCT `headquarter`) OVER () AS `count___`
FROM `df_manufacturers`
WHERE (`headquarter` = 'Tokyo'
       OR `headquarter` = 'Beijing')
ORDER BY count___;",2,7,1,2,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0038,"limit(input0, 'price')","SELECT name,
       price
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_products
      ORDER BY price)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0003,df_manufacturers,"SELECT name,
       headquarter
FROM df_manufacturers
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0027,df_products,"SELECT name,
       price
FROM df_products
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0022,"summarise(input1, 'n = n()', ""'manufacturer'""), inner_join(input0, line0, ""'code' = 'manufacturer'"")","SELECT n AS count_distinct_t1_name_,
       headquarter
FROM
  (SELECT LHS.code AS code,
          LHS.name AS name,
          LHS.headquarter AS headquarter,
          LHS.founder AS founder,
          LHS.revenue AS revenue,
          RHS.n AS n
   FROM df_manufacturers AS LHS
   INNER JOIN
     (SELECT manufacturer,
             COUNT() AS n
      FROM df_products
      GROUP BY manufacturer) AS RHS ON (LHS.code = RHS.manufacturer))
ORDER BY count_distinct_t1_name_;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/manufactory_1/0030,"summarise(input0, 'meanprice = mean(price, na.rm = T)', '')","SELECT meanprice AS avg_price_
FROM
  (SELECT AVG(price) AS meanprice
   FROM df_products)
ORDER BY avg_price_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0013,"limit(input0, 'desc(revenue)')","SELECT name,
       headquarter,
       founder
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_manufacturers
      ORDER BY revenue DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0006,"filter(input0, ""headquarter == 'Austin'""), summarise(line0, 'sumrevenue = sum(revenue)', ""'name','revenue'"")","SELECT `revenue` AS `sum_revenue_`
FROM
  (SELECT `name`,
          `revenue`,
          SUM(`revenue`) AS `sumrevenue`
   FROM
     (SELECT *
      FROM `df_manufacturers`
      WHERE (`headquarter` = 'Austin'))
   GROUP BY name,
            revenue)
ORDER BY sum_revenue_;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0004,"mutate(input0, 'maxrevenue = max(revenue)'), mutate(line0, 'sumrevenue = sum(revenue)'), mutate(line1, 'meanrevenue = mean(revenue, na.rm = T)')","SELECT DISTINCT AVG(revenue) OVER () AS avg_revenue_,
                                  maxrevenue AS max_revenue_,
                                  sumrevenue AS sum_revenue_
FROM
  (SELECT code,
          name,
          headquarter,
          founder,
          revenue,
          maxrevenue,
          SUM(revenue) OVER () AS sumrevenue
   FROM
     (SELECT code,
             name,
             headquarter,
             founder,
             revenue,
             MAX(revenue) OVER () AS maxrevenue
      FROM df_manufacturers))
ORDER BY avg_revenue_;",3,10,3,1,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0026,df_products,"SELECT name
FROM df_products
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0015,"mutate(input0, 'meanrevenue = mean(revenue, na.rm = T)'), filter(line0, 'meanrevenue <= revenue')","SELECT name
FROM
  (SELECT code,
          name,
          headquarter,
          founder,
          revenue,
          AVG(revenue) OVER () AS meanrevenue
   FROM df_manufacturers)
WHERE (meanrevenue <= revenue)
ORDER BY name;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0005,"mutate(input0, 'n = n()'), filter(line0, ""founder == 'Andy'"")","SELECT `code` AS `count___`
FROM
  (SELECT `code`,
          `name`,
          `headquarter`,
          `founder`,
          `revenue`,
          COUNT(*) OVER () AS `n`
   FROM `df_manufacturers`)
WHERE (`founder` = 'Andy')
ORDER BY count___;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0016,"filter(input0, ""headquarter == 'Austin'""), summarise(line0, 'revenue = min(revenue)', ""'headquarter'""), cross_join(line1, input0, 'headquarter != headquarter.other & revenue > revenue.other')","SELECT `name`
FROM
  (SELECT `LHS`.`headquarter` AS `headquarter`,
          `LHS`.`revenue` AS `revenue`,
          `RHS`.`code` AS `code`,
          `RHS`.`name` AS `name`,
          `RHS`.`headquarter` AS `headquarter_other`,
          `RHS`.`founder` AS `founder`,
          `RHS`.`revenue` AS `revenue_other`
   FROM
     (SELECT `headquarter`,
             MIN(`revenue`) AS `revenue`
      FROM `df_manufacturers`
      WHERE (`headquarter` = 'Austin')
      GROUP BY headquarter) AS LHS
   CROSS JOIN df_manufacturers AS RHS)
WHERE (headquarter != headquarter_other
       AND revenue > revenue_other)
ORDER BY name;",3,8,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0
spider/manufactory_1/0032,"filter(input0, 'price < 180'), mutate(line0, 'n_distinct = n_distinct(price)')","SELECT DISTINCT COUNT(DISTINCT price) OVER () AS count___
FROM df_products
WHERE (price < 180.0)
ORDER BY count___;",2,6,1,2,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0018,"summarise(input0, 'sumrevenue = sum(revenue)', ""'founder','revenue'""), summarise(line0, 'sumrevenue = sum(revenue)', ""'founder','revenue'"")","SELECT revenue AS sum_revenue_,
       founder
FROM
  (SELECT founder,
          revenue,
          SUM(revenue) AS sumrevenue
   FROM
     (SELECT founder,
             revenue,
             SUM(revenue) AS sumrevenue
      FROM df_manufacturers
      GROUP BY founder,
               revenue)
   GROUP BY founder,
            revenue)
ORDER BY sum_revenue_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0035,"summarise(input0, 'meanprice = mean(price, na.rm = T)', ""'manufacturer'"")","SELECT meanprice AS avg_price_,
       manufacturer
FROM
  (SELECT manufacturer,
          AVG(price) AS meanprice
   FROM df_products
   GROUP BY manufacturer)
ORDER BY avg_price_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0020,"summarise(input0, 'sumrevenue = sum(revenue)', ""'name','revenue'""), summarise(line0, 'sumrevenue = sum(revenue)', ""'name','revenue'"")","SELECT revenue AS sum_revenue_,
       name
FROM
  (SELECT name,
          revenue,
          SUM(revenue) AS sumrevenue
   FROM
     (SELECT name,
             revenue,
             SUM(revenue) AS sumrevenue
      FROM df_manufacturers
      GROUP BY name,
               revenue)
   GROUP BY name,
            revenue)
ORDER BY sum_revenue_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0019,"summarise(input0, 'maxrevenue = max(revenue)', ""'headquarter','name'"")","SELECT name,
       maxrevenue AS max_revenue_,
       headquarter
FROM
  (SELECT headquarter,
          name,
          MAX(revenue) AS maxrevenue
   FROM df_manufacturers
   GROUP BY headquarter,
            name)
ORDER BY name;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0007,"intersect(input0, input0, 'headquarter')","SELECT headquarter
FROM
  (SELECT headquarter
   FROM df_manufacturers INTERSECT SELECT headquarter
   FROM df_manufacturers)
ORDER BY headquarter;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/manufactory_1/0024,"filter(input1, ""name == 'DVD drive'""), inner_join(input0, line0, ""'code' = 'manufacturer'""), anti_join(input0, line1, ""'code','founder'"")","SELECT `name`
FROM
  (SELECT *
   FROM `df_manufacturers` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT `code`,
                  `name`,
                  `headquarter`,
                  `founder`,
                  `revenue`,
                  `code_other`,
                  `name_other`,
                  `price`,
                  `code` AS `manufacturer`
           FROM
             (SELECT `LHS`.`code` AS `code`,
                     `LHS`.`name` AS `name`,
                     `LHS`.`headquarter` AS `headquarter`,
                     `LHS`.`founder` AS `founder`,
                     `LHS`.`revenue` AS `revenue`,
                     `RHS`.`code` AS `code_other`,
                     `RHS`.`name` AS `name_other`,
                     `RHS`.`price` AS `price`
              FROM `df_manufacturers` AS `LHS`
              INNER JOIN
                (SELECT *
                 FROM `df_products`
                 WHERE (`name` = 'DVD drive')) AS RHS ON (LHS.code = RHS.manufacturer))) AS RHS
        WHERE (LHS.code = RHS.code
               AND LHS.founder = RHS.founder) ))
ORDER BY name;",3,18,6,0,6,1,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0
spider/manufactory_1/0021,"inner_join(input0, input1, ""'code' = 'manufacturer'""), summarise(line0, 'meanprice = mean(price, na.rm = T)', ""'name','revenue'"")","SELECT meanprice AS avg_t1_price_,
       name
FROM
  (SELECT name,
          revenue,
          AVG(price) AS meanprice
   FROM
     (SELECT code,
             name,
             headquarter,
             founder,
             revenue,
             code_other,
             name_other,
             price,
             code AS manufacturer
      FROM
        (SELECT LHS.code AS code,
                LHS.name AS name,
                LHS.headquarter AS headquarter,
                LHS.founder AS founder,
                LHS.revenue AS revenue,
                RHS.code AS code_other,
                RHS.name AS name_other,
                RHS.price AS price
         FROM df_manufacturers AS LHS
         INNER JOIN df_products AS RHS ON (LHS.code = RHS.manufacturer)))
   GROUP BY name,
            revenue)
ORDER BY avg_t1_price_;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/manufactory_1/0023,"filter(input0, ""name == 'Sony'""), anti_join(input1, line0, ""'code'""), mutate(line1, 'n_distinct = n_distinct(name)')","SELECT DISTINCT COUNT(DISTINCT `name`) OVER () AS `count_distinct_name_`
FROM
  (SELECT *
   FROM `df_products` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_manufacturers`
           WHERE (`name` = 'Sony')) AS RHS
        WHERE (LHS.code = RHS.code) ))
ORDER BY count_distinct_name_;",3,16,4,2,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/manufactory_1/0001,"filter(input0, ""name == 'Sony'"")","SELECT `founder`
FROM `df_manufacturers`
WHERE (`name` = 'Sony')
ORDER BY founder;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0014,"intersect(input0, input0, 'name'), inner_join(line0, input0, ""'name'"")","SELECT name,
       headquarter,
       revenue
FROM
  (SELECT LHS.name AS name,
          RHS.code AS code,
          RHS.headquarter AS headquarter,
          RHS.founder AS founder,
          RHS.revenue AS revenue
   FROM
     (SELECT name
      FROM df_manufacturers INTERSECT SELECT name
      FROM df_manufacturers) AS LHS
   INNER JOIN df_manufacturers AS RHS ON (LHS.name = RHS.name))
ORDER BY name;",2,10,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0
spider/manufactory_1/0025,"inner_join(input0, input1, ""'code' = 'manufacturer'""), summarise(line0, 'n = n()', ""'headquarter','name'"")","SELECT n AS count___,
       name
FROM
  (SELECT headquarter,
          name,
          COUNT() AS n
   FROM
     (SELECT code,
             name,
             headquarter,
             founder,
             revenue,
             code_other,
             name_other,
             price,
             code AS manufacturer
      FROM
        (SELECT LHS.code AS code,
                LHS.name AS name,
                LHS.headquarter AS headquarter,
                LHS.founder AS founder,
                LHS.revenue AS revenue,
                RHS.code AS code_other,
                RHS.name AS name_other,
                RHS.price AS price
         FROM df_manufacturers AS LHS
         INNER JOIN df_products AS RHS ON (LHS.code = RHS.manufacturer)))
   GROUP BY headquarter,
            name)
ORDER BY count___;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/manufactory_1/0011,"filter(input0, ""headquarter == 'Tokyo' | headquarter == 'Taiwan'""), mutate(line0, 'sumrevenue = sum(revenue)')","SELECT DISTINCT SUM(`revenue`) OVER () AS `sum_revenue_`
FROM `df_manufacturers`
WHERE (`headquarter` = 'Tokyo'
       OR `headquarter` = 'Taiwan')
ORDER BY sum_revenue_;",2,6,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0029,"filter(input0, 'price >= 60 & price <= 120'), inner_join(line0, line0, ""'code','manufacturer'"")","SELECT code,
       name,
       price,
       manufacturer
FROM
  (SELECT LHS.code AS code,
          LHS.name AS name,
          LHS.price AS price,
          LHS.manufacturer AS manufacturer,
          RHS.name AS name_other,
          RHS.price AS price_other
   FROM
     (SELECT *
      FROM df_products
      WHERE (price >= 60.0
             AND price <= 120.0)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_products
      WHERE (price >= 60.0
             AND price <= 120.0)) AS RHS ON (LHS.code = RHS.code
                                             AND LHS.manufacturer = RHS.manufacturer))
ORDER BY code;",2,11,4,0,4,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/manufactory_1/0010,"filter(input0, 'revenue >= 100 & revenue < 150')","SELECT name
FROM df_manufacturers
WHERE (revenue >= 100.0
       AND revenue < 150.0)
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0040,"summarise(input0, 'price = min(price)', ""'name'""), semi_join(input0, line0)","SELECT code,
       name,
       price AS min_price_
FROM
  (SELECT *
   FROM df_products AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT name,
                  MIN(price) AS price
           FROM df_products
           GROUP BY name) AS RHS
        WHERE (LHS.name = RHS.name
               AND LHS.price = RHS.price) ))
ORDER BY code;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/manufactory_1/0028,"filter(input0, 'price <= 200')","SELECT name
FROM df_products
WHERE (price <= 200.0)
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/manufactory_1/0031,"summarise(input0, 'meanprice = mean(price, na.rm = T)', ""'manufacturer'""), filter(line0, 'manufacturer == 2L & meanprice > manufacturer')","SELECT meanprice AS avg_price_
FROM
  (SELECT manufacturer,
          AVG(price) AS meanprice
   FROM df_products
   GROUP BY manufacturer)
WHERE (manufacturer = 2
       AND meanprice > manufacturer)
ORDER BY avg_price_;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0002,"summarise(input0, 'sumno_of_customers = sum(no_of_customers)', ""'bname','no_of_customers'""), summarise(line0, 'sumno_of_customers = sum(no_of_customers)', '')","SELECT sumno_of_customers AS sum_no_of_customers_
FROM
  (SELECT SUM(no_of_customers) AS sumno_of_customers
   FROM
     (SELECT bname,
             no_of_customers,
             SUM(no_of_customers) AS sumno_of_customers
      FROM df_bank
      GROUP BY bname,
               no_of_customers))
ORDER BY sum_no_of_customers_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0017,"filter(input0, ""acc_type != 'saving'"")","SELECT `cust_name`
FROM `df_customer`
WHERE (`acc_type` != 'saving')
ORDER BY cust_name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0008,df_customer,"SELECT cust_name
FROM df_customer
ORDER BY cust_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0039,"summarise(input0, 'meancredit_score = mean(credit_score, na.rm = T)', ""'credit_score','cust_id'""), semi_join(line0, input1), summarise(line1, 'meancredit_score = mean(credit_score, na.rm = T)', '')","SELECT meancredit_score AS avg_credit_score_
FROM
  (SELECT AVG(credit_score) AS meancredit_score
   FROM
     (SELECT *
      FROM
        (SELECT credit_score,
                cust_id,
                AVG(credit_score) AS meancredit_score
         FROM df_customer
         GROUP BY credit_score,
                  cust_id) AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM df_loan AS RHS
           WHERE (LHS.cust_id = RHS.cust_id) )))
ORDER BY avg_credit_score_;",3,13,5,0,5,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0
spider/loan_1/0003,"filter(input0, ""city == 'New York City'""), summarise(line0, 'sumno_of_customers = sum(no_of_customers)', ""'city'"")","SELECT `sumno_of_customers` AS `sum_no_of_customers_`
FROM
  (SELECT `city`,
          SUM(`no_of_customers`) AS `sumno_of_customers`
   FROM
     (SELECT *
      FROM `df_bank`
      WHERE (`city` = 'New York City'))
   GROUP BY city)
ORDER BY sum_no_of_customers_;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0027,"summarise(input0, 'sumcredit_score = sum(credit_score)', ""'acc_bal','state'""), filter(line0, 'acc_bal != 100L & sumcredit_score > 100L')","SELECT acc_bal AS sum_acc_bal_,
       state
FROM
  (SELECT acc_bal,
          state,
          SUM(credit_score) AS sumcredit_score
   FROM df_customer
   GROUP BY acc_bal,
            state)
WHERE (acc_bal != 100
       AND sumcredit_score > 100)
ORDER BY sum_acc_bal_;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0022,"limit(input0, 'cust_name')","SELECT cust_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_customer
      ORDER BY cust_name)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0030,"filter(input1, 'amount != 5000L'), summarise(line0, 'sumamount = sum(amount)', ""'cust_id','loan_type'""), left_join(line1, input0)","SELECT DISTINCT cust_name,
                acc_type
FROM
  (SELECT LHS.cust_id AS cust_id,
          LHS.loan_type AS loan_type,
          LHS.sumamount AS sumamount,
          RHS.cust_name AS cust_name,
          RHS.acc_type AS acc_type,
          RHS.acc_bal AS acc_bal,
          RHS.no_of_loans AS no_of_loans,
          RHS.credit_score AS credit_score,
          RHS.branch_id AS branch_id,
          RHS.state AS state
   FROM
     (SELECT cust_id,
             loan_type,
             SUM(amount) AS sumamount
      FROM df_loan
      WHERE (amount != 5000)
      GROUP BY cust_id,
               loan_type) AS LHS
   LEFT JOIN df_customer AS RHS ON (LHS.cust_id = RHS.cust_id))
ORDER BY cust_name;",3,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/loan_1/0013,"mutate(input0, 'n_distinct = n_distinct(acc_type)')","SELECT DISTINCT COUNT(DISTINCT acc_type) OVER () AS count_distinct_acc_type_
FROM df_customer
ORDER BY count_distinct_acc_type_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/loan_1/0006,"filter(input0, ""bname == 'morningside'""), natural_join(input0, line0)","SELECT `city`,
       `state`
FROM
  (SELECT `LHS`.`branch_id` AS `branch_id`,
          `LHS`.`bname` AS `bname`,
          `LHS`.`no_of_customers` AS `no_of_customers`,
          `LHS`.`city` AS `city`,
          `LHS`.`state` AS `state`
   FROM `df_bank` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_bank`
      WHERE (`bname` = 'morningside')) AS RHS ON (LHS.branch_id = RHS.branch_id
                                                  AND LHS.bname = RHS.bname
                                                  AND LHS.no_of_customers = RHS.no_of_customers
                                                  AND LHS.city = RHS.city
                                                  AND LHS.state = RHS.state))
ORDER BY city;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0004,"summarise(input0, 'meanno_of_customers = mean(no_of_customers, na.rm = T)', ""'no_of_customers','state'""), filter(line0, ""state == 'Utah' & meanno_of_customers >= no_of_customers"")","SELECT `no_of_customers` AS `avg_no_of_customers_`
FROM
  (SELECT `no_of_customers`,
          `state`,
          AVG(`no_of_customers`) AS `meanno_of_customers`
   FROM `df_bank`
   GROUP BY `no_of_customers`,
            `state`)
WHERE (`state` = 'Utah'
       AND meanno_of_customers >= no_of_customers)
ORDER BY avg_no_of_customers_;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0012,"summarise(input0, 'n_distinct = n_distinct(state)', ""'city','state'""), mutate(line0, 'n_distinct = n_distinct(state)')","SELECT DISTINCT COUNT(DISTINCT state) OVER () AS count_distinct_state_
FROM
  (SELECT city,
          state,
          COUNT(DISTINCT state) AS n_distinct
   FROM df_bank
   GROUP BY city,
            state)
ORDER BY count_distinct_state_;",2,8,2,3,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/loan_1/0026,"filter(input0, 'credit_score < 50L & credit_score <= acc_bal'), summarise(line0, 'meanacc_bal = mean(acc_bal, na.rm = T)', ""'acc_type','cust_name'"")","SELECT meanacc_bal AS avg_acc_bal_,
       acc_type
FROM
  (SELECT acc_type,
          cust_name,
          AVG(acc_bal) AS meanacc_bal
   FROM
     (SELECT *
      FROM df_customer
      WHERE (credit_score < 50
             AND credit_score <= acc_bal))
   GROUP BY acc_type,
            cust_name)
ORDER BY avg_acc_bal_;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0015,"filter(input0, ""state == 'Utah' | state == 'Texas'""), summarise(line0, 'sumacc_bal = sum(acc_bal)', '')","SELECT `sumacc_bal` AS `sum_acc_bal_`
FROM
  (SELECT SUM(`acc_bal`) AS `sumacc_bal`
   FROM
     (SELECT *
      FROM `df_customer`
      WHERE (`state` = 'Utah'
             OR `state` = 'Texas')))
ORDER BY sum_acc_bal_;",2,8,3,0,3,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0005,"summarise(input0, 'meanno_of_customers = mean(no_of_customers, na.rm = T)', ""'bname','no_of_customers'""), summarise(line0, 'meanno_of_customers = mean(no_of_customers, na.rm = T)', '')","SELECT meanno_of_customers AS avg_no_of_customers_
FROM
  (SELECT AVG(no_of_customers) AS meanno_of_customers
   FROM
     (SELECT bname,
             no_of_customers,
             AVG(no_of_customers) AS meanno_of_customers
      FROM df_bank
      GROUP BY bname,
               no_of_customers))
ORDER BY avg_no_of_customers_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0032,"filter(input1, 'credit_score < 100L & credit_score != 1L'), summarise(input2, 'sumamount = sum(amount)', ""'cust_id','loan_id'""), natural_join4(input0, input1, line0, line1)","SELECT DISTINCT bname
FROM
  (SELECT LHS.branch_id AS branch_id,
          LHS.bname AS bname,
          LHS.no_of_customers AS no_of_customers,
          LHS.city AS city,
          LHS.state AS state,
          LHS.cust_id AS cust_id,
          LHS.cust_name AS cust_name,
          LHS.acc_type AS acc_type,
          LHS.acc_bal AS acc_bal,
          LHS.no_of_loans AS no_of_loans,
          LHS.credit_score AS credit_score,
          RHS.loan_id AS loan_id,
          RHS.sumamount AS sumamount
   FROM
     (SELECT LHS.branch_id AS branch_id,
             LHS.bname AS bname,
             LHS.no_of_customers AS no_of_customers,
             LHS.city AS city,
             LHS.state AS state,
             LHS.cust_id AS cust_id,
             LHS.cust_name AS cust_name,
             LHS.acc_type AS acc_type,
             LHS.acc_bal AS acc_bal,
             LHS.no_of_loans AS no_of_loans,
             LHS.credit_score AS credit_score
      FROM
        (SELECT LHS.branch_id AS branch_id,
                LHS.bname AS bname,
                LHS.no_of_customers AS no_of_customers,
                LHS.city AS city,
                LHS.state AS state,
                RHS.cust_id AS cust_id,
                RHS.cust_name AS cust_name,
                RHS.acc_type AS acc_type,
                RHS.acc_bal AS acc_bal,
                RHS.no_of_loans AS no_of_loans,
                RHS.credit_score AS credit_score
         FROM df_bank AS LHS
         INNER JOIN df_customer AS RHS ON (LHS.branch_id = RHS.branch_id
                                           AND LHS.state = RHS.state)) AS LHS
      INNER JOIN
        (SELECT *
         FROM df_customer
         WHERE (credit_score < 100
                AND credit_score != 1)) AS RHS ON (LHS.branch_id = RHS.branch_id
                                                   AND LHS.state = RHS.state
                                                   AND LHS.cust_id = RHS.cust_id
                                                   AND LHS.cust_name = RHS.cust_name
                                                   AND LHS.acc_type = RHS.acc_type
                                                   AND LHS.acc_bal = RHS.acc_bal
                                                   AND LHS.no_of_loans = RHS.no_of_loans
                                                   AND LHS.credit_score = RHS.credit_score)) AS LHS
   INNER JOIN
     (SELECT cust_id,
             loan_id,
             SUM(amount) AS sumamount
      FROM df_loan
      GROUP BY cust_id,
               loan_id) AS RHS ON (LHS.cust_id = RHS.cust_id))
ORDER BY bname;",3,17,6,1,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
spider/loan_1/0018,"filter(input1, ""loan_type == 'Mortgages'""), anti_join(input0, line0, ""'cust_id'"")","SELECT `cust_name`
FROM
  (SELECT *
   FROM `df_customer` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_loan`
           WHERE (`loan_type` = 'Mortgages')) AS RHS
        WHERE (LHS.cust_id = RHS.cust_id) ))
ORDER BY cust_name;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/loan_1/0035,"filter(input1, 'amount <= 3000L'), anti_join(input1, line0, ""'loan_id'""), inner_join(input0, line1, ""'cust_id' = 'branch_id'"")","SELECT cust_name
FROM
  (SELECT LHS.cust_id AS cust_id,
          LHS.cust_name AS cust_name,
          LHS.acc_type AS acc_type,
          LHS.acc_bal AS acc_bal,
          LHS.no_of_loans AS no_of_loans,
          LHS.credit_score AS credit_score,
          LHS.branch_id AS branch_id,
          LHS.state AS state,
          RHS.loan_id AS loan_id,
          RHS.loan_type AS loan_type,
          RHS.cust_id AS cust_id_other,
          RHS.amount AS amount
   FROM df_customer AS LHS
   INNER JOIN
     (SELECT *
      FROM df_loan AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM df_loan
              WHERE (amount <= 3000)) AS RHS
           WHERE (LHS.loan_id = RHS.loan_id) )) AS RHS ON (LHS.cust_id = RHS.branch_id))
ORDER BY cust_name;",3,16,5,0,5,1,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0
spider/loan_1/0020,"cross_join(input0, input0, 'credit_score < credit_score.other'), summarise(line0, 'meancredit_score = mean(credit_score, na.rm = T)', ""'cust_name','no_of_loans'"")","SELECT cust_name
FROM
  (SELECT cust_name,
          no_of_loans,
          AVG(credit_score) AS meancredit_score
   FROM
     (SELECT *
      FROM
        (SELECT LHS.cust_id AS cust_id,
                LHS.cust_name AS cust_name,
                LHS.acc_type AS acc_type,
                LHS.acc_bal AS acc_bal,
                LHS.no_of_loans AS no_of_loans,
                LHS.credit_score AS credit_score,
                LHS.branch_id AS branch_id,
                LHS.state AS state,
                RHS.cust_id AS cust_id_other,
                RHS.cust_name AS cust_name_other,
                RHS.acc_type AS acc_type_other,
                RHS.acc_bal AS acc_bal_other,
                RHS.no_of_loans AS no_of_loans_other,
                RHS.credit_score AS credit_score_other,
                RHS.branch_id AS branch_id_other,
                RHS.state AS state_other
         FROM df_customer AS LHS
         CROSS JOIN df_customer AS RHS)
      WHERE (credit_score < credit_score_other))
   GROUP BY cust_name,
            no_of_loans)
ORDER BY cust_name;",2,9,4,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
spider/loan_1/0019,"filter(input1, ""loan_type == 'Mortgages' | loan_type != 'Auto'""), inner_join(input0, input1, ""'cust_id'""), anti_join(line1, line0, ""'cust_id','loan_type'"")","SELECT `cust_name`
FROM
  (SELECT *
   FROM
     (SELECT `LHS`.`cust_id` AS `cust_id`,
             `LHS`.`cust_name` AS `cust_name`,
             `LHS`.`acc_type` AS `acc_type`,
             `LHS`.`acc_bal` AS `acc_bal`,
             `LHS`.`no_of_loans` AS `no_of_loans`,
             `LHS`.`credit_score` AS `credit_score`,
             `LHS`.`branch_id` AS `branch_id`,
             `LHS`.`state` AS `state`,
             `RHS`.`loan_id` AS `loan_id`,
             `RHS`.`loan_type` AS `loan_type`,
             `RHS`.`branch_id` AS `branch_id_other`,
             `RHS`.`amount` AS `amount`
      FROM `df_customer` AS `LHS`
      INNER JOIN `df_loan` AS `RHS` ON (`LHS`.`cust_id` = `RHS`.`cust_id`)) AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_loan`
           WHERE (`loan_type` = 'Mortgages'
                  OR `loan_type` != 'Auto')) AS RHS
        WHERE (LHS.cust_id = RHS.cust_id
               AND LHS.loan_type = RHS.loan_type) ))
ORDER BY cust_name;",3,17,5,0,5,1,3,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0
spider/loan_1/0007,"filter(input0, ""state == 'New York'"")","SELECT `bname`
FROM `df_bank`
WHERE (`state` = 'New York')
ORDER BY bname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0034,"intersect(input1, input1, 'cust_id'), semi_join(input0, line0)","SELECT cust_name,
       credit_score
FROM
  (SELECT *
   FROM df_customer AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT cust_id
           FROM df_loan INTERSECT SELECT cust_id
           FROM df_loan) AS RHS
        WHERE (LHS.cust_id = RHS.cust_id) ))
ORDER BY cust_name;",2,14,5,0,5,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0
spider/loan_1/0024,"summarise(input1, 'sumamount = sum(amount)', ""'cust_id'""), natural_join(input0, line0), limit(line1, 'acc_bal')","SELECT cust_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.cust_id AS cust_id,
                LHS.cust_name AS cust_name,
                LHS.acc_type AS acc_type,
                LHS.acc_bal AS acc_bal,
                LHS.no_of_loans AS no_of_loans,
                LHS.credit_score AS credit_score,
                LHS.branch_id AS branch_id,
                LHS.state AS state,
                RHS.sumamount AS sumamount
         FROM df_customer AS LHS
         INNER JOIN
           (SELECT cust_id,
                   SUM(amount) AS sumamount
            FROM df_loan
            GROUP BY cust_id) AS RHS ON (LHS.cust_id = RHS.cust_id))
      ORDER BY acc_bal)
   LIMIT 1);",2,12,5,0,5,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0021,"limit(input0, 'bname')","SELECT bname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_bank
      ORDER BY bname)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0023,"limit(input0, 'no_of_loans')","SELECT cust_name,
       acc_type,
       acc_bal
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_customer
      ORDER BY no_of_loans)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0009,"summarise(input1, 'sumamount = sum(amount)', ""'cust_id'""), semi_join(input0, line0)","SELECT cust_name
FROM
  (SELECT *
   FROM df_customer AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT cust_id,
                  SUM(amount) AS sumamount
           FROM df_loan
           GROUP BY cust_id) AS RHS
        WHERE (LHS.cust_id = RHS.cust_id) ))
ORDER BY cust_name;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/loan_1/0025,"summarise(input0, 'sumno_of_customers = sum(no_of_customers)', ""'city','state'""), limit(line0, 'desc(sumno_of_customers)')","SELECT state
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT city,
                state,
                SUM(no_of_customers) AS sumno_of_customers
         FROM df_bank
         GROUP BY city,
                  state)
      ORDER BY sumno_of_customers DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/loan_1/0011,"summarise(input0, 'n_distinct = n_distinct(city)', ''), mutate(line0, 'n = n()')","SELECT n_distinct AS count_distinct_city_
FROM
  (SELECT COUNT(DISTINCT city) AS n_distinct
   FROM df_bank)
ORDER BY count_distinct_city_;",2,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/loan_1/0010,"filter(input0, 'no_of_loans <= 0L'), left_join(line0, input0)","SELECT state,
       acc_type,
       credit_score
FROM
  (SELECT LHS.cust_id AS cust_id,
          LHS.cust_name AS cust_name,
          LHS.acc_type AS acc_type,
          LHS.acc_bal AS acc_bal,
          LHS.no_of_loans AS no_of_loans,
          LHS.credit_score AS credit_score,
          LHS.branch_id AS branch_id,
          LHS.state AS state
   FROM
     (SELECT *
      FROM df_customer
      WHERE (no_of_loans <= 0)) AS LHS
   LEFT JOIN df_customer AS RHS ON (LHS.cust_id = RHS.cust_id
                                    AND LHS.cust_name = RHS.cust_name
                                    AND LHS.acc_type = RHS.acc_type
                                    AND LHS.acc_bal = RHS.acc_bal
                                    AND LHS.no_of_loans = RHS.no_of_loans
                                    AND LHS.credit_score = RHS.credit_score
                                    AND LHS.branch_id = RHS.branch_id
                                    AND LHS.state = RHS.state))
ORDER BY state;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
spider/loan_1/0040,"summarise(input0, 'meancredit_score = mean(credit_score, na.rm = T)', ""'cust_id','cust_name'""), anti_join(line0, input1, ""'cust_id'"")","SELECT meancredit_score AS avg_credit_score_
FROM
  (SELECT *
   FROM
     (SELECT cust_id,
             cust_name,
             AVG(credit_score) AS meancredit_score
      FROM df_customer
      GROUP BY cust_id,
               cust_name) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_loan AS RHS
        WHERE (LHS.cust_id = RHS.cust_id) ))
ORDER BY avg_credit_score_;",2,12,4,0,4,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
spider/loan_1/0031,"summarise(input1, 'sumamount = sum(amount)', ""'amount','cust_id'""), natural_join(input0, line0), limit(line1, 'desc(no_of_customers)')","SELECT bname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.branch_id AS branch_id,
                LHS.bname AS bname,
                LHS.no_of_customers AS no_of_customers,
                LHS.city AS city,
                LHS.state AS state,
                RHS.amount AS amount,
                RHS.cust_id AS cust_id,
                RHS.sumamount AS sumamount
         FROM df_bank AS LHS
         CROSS JOIN
           (SELECT amount,
                   cust_id,
                   SUM(amount) AS sumamount
            FROM df_loan
            GROUP BY amount,
                     cust_id) AS RHS)
      ORDER BY no_of_customers DESC)
   LIMIT 1);",2,12,5,0,5,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/phone_market/0002,df_phone,"SELECT name
FROM df_phone
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/phone_market/0008,"summarise(input0, 'n = n()', ""'carrier','memory_in_g'""), limit(line0, 'memory_in_g')","SELECT carrier
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT carrier,
                memory_in_g,
                COUNT() AS n
         FROM df_phone
         GROUP BY carrier,
                  memory_in_g)
      ORDER BY memory_in_g)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/phone_market/0003,df_phone,"SELECT memory_in_g,
       carrier
FROM df_phone
ORDER BY memory_in_g;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/phone_market/0006,"limit(input0, 'desc(price)')","SELECT carrier
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_phone
      ORDER BY price DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/phone_market/0004,"filter(input0, 'memory_in_g > 32L')","SELECT DISTINCT carrier
FROM df_phone
WHERE (memory_in_g > 32)
ORDER BY carrier;",1,4,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/phone_market/0012,"natural_join(input1, input2), filter(line0, 'num_of_shops != 50'), inner_join(input0, line1, ""'phone_id' = 'ranking'"")","SELECT DISTINCT name
FROM
  (SELECT LHS.name AS name,
          LHS.phone_id AS phone_id,
          LHS.memory_in_g AS memory_in_g,
          LHS.carrier AS carrier,
          LHS.price AS price,
          RHS.market_id AS market_id,
          RHS.district AS district,
          RHS.num_of_employees AS num_of_employees,
          RHS.num_of_shops AS num_of_shops,
          RHS.phone_id AS phone_id_other,
          RHS.num_of_stock AS num_of_stock
   FROM df_phone AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT LHS.market_id AS market_id,
                LHS.district AS district,
                LHS.num_of_employees AS num_of_employees,
                LHS.num_of_shops AS num_of_shops,
                LHS.ranking AS ranking,
                RHS.phone_id AS phone_id,
                RHS.num_of_stock AS num_of_stock
         FROM df_market AS LHS
         INNER JOIN df_phone_market AS RHS ON (LHS.market_id = RHS.market_id))
      WHERE (num_of_shops != 50.0)) AS RHS ON (LHS.phone_id = RHS.ranking))
ORDER BY name;",3,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0
spider/phone_market/0015,"cross_join(input0, input1, 'phone_id == phone_id.other | phone_id == phone_id.other'), anti_join(input0, line0, ""'price'"")","SELECT name
FROM
  (SELECT *
   FROM df_phone AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT LHS.name AS name,
                     LHS.phone_id AS phone_id,
                     LHS.memory_in_g AS memory_in_g,
                     LHS.carrier AS carrier,
                     LHS.price AS price,
                     RHS.market_id AS market_id,
                     RHS.phone_id AS phone_id_other,
                     RHS.num_of_stock AS num_of_stock
              FROM df_phone AS LHS
              CROSS JOIN df_phone_market AS RHS)
           WHERE (phone_id = phone_id_other
                  OR phone_id = phone_id_other)) AS RHS
        WHERE (LHS.price = RHS.price) ))
ORDER BY name;",2,16,5,0,5,0,3,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
spider/phone_market/0005,"filter(input0, ""carrier == 'Sprint' | carrier == 'TMobile'"")","SELECT `name`
FROM `df_phone`
WHERE (`carrier` = 'Sprint'
       OR `carrier` = 'TMobile')
ORDER BY name;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/phone_market/0001,"summarise(input0, 'n = n()', ""'memory_in_g','phone_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT memory_in_g,
          phone_id,
          COUNT() AS n
   FROM df_phone
   GROUP BY memory_in_g,
            phone_id)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/phone_market/0009,"filter(input0, 'memory_in_g != 32L & memory_in_g == 64L'), cross_join(line0, input0, 'memory_in_g == memory_in_g.other')","SELECT carrier
FROM
  (SELECT LHS.name AS name,
          LHS.phone_id AS phone_id,
          LHS.memory_in_g AS memory_in_g,
          LHS.carrier AS carrier,
          LHS.price AS price,
          RHS.name AS name_other,
          RHS.phone_id AS phone_id_other,
          RHS.memory_in_g AS memory_in_g_other,
          RHS.carrier AS carrier_other,
          RHS.price AS price_other
   FROM
     (SELECT *
      FROM df_phone
      WHERE (memory_in_g != 32
             AND memory_in_g = 64)) AS LHS
   CROSS JOIN df_phone AS RHS)
WHERE (memory_in_g = memory_in_g_other)
ORDER BY carrier;",2,8,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
spider/coffee_shop/0002,"summarise(input0, 'n = n()', ""'address'"")","SELECT n AS count___,
       address
FROM
  (SELECT address,
          COUNT() AS n
   FROM df_member
   GROUP BY address)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/coffee_shop/0017,"summarise(input0, 'n = n()', ""'hh_id','month'""), limit(line0, 'desc(month)')","SELECT MONTH
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT hh_id,
                MONTH,
                COUNT() AS n
         FROM df_happy_hour
         GROUP BY hh_id,
                  MONTH)
      ORDER BY MONTH DESC)
   LIMIT 1);",1,14,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/coffee_shop/0008,"filter(input0, ""address == 'Hartford' & address != 'Waterbury'""), intersect(line0, line0, 'membership_card')","SELECT `membership_card`
FROM
  (SELECT `membership_card`
   FROM `df_member`
   WHERE (`address` = 'Hartford'
          AND `address` != 'Waterbury') INTERSECT
     SELECT `membership_card`
     FROM `df_member` WHERE (`address` = 'Hartford'
                             AND `address` != 'Waterbury'))
ORDER BY membership_card;",2,9,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/coffee_shop/0003,"filter(input0, ""address == 'Waterbury'"")","SELECT `name`
FROM `df_member`
WHERE (`address` = 'Waterbury')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/coffee_shop/0013,"mutate(input0, 'meanscore = mean(score, na.rm = T)'), filter(line0, 'meanscore >= score')","SELECT shop_id,
       address
FROM
  (SELECT shop_id,
          address,
          num_of_staff,
          score,
          open_year,
          AVG(score) OVER () AS meanscore
   FROM df_shop)
WHERE (meanscore >= score)
ORDER BY shop_id;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/coffee_shop/0006,"summarise(input0, 'n = n()', ""'membership_card'""), filter(line0, 'n > 5L'), natural_join(line0, line1)","SELECT membership_card
FROM
  (SELECT LHS.membership_card AS membership_card,
          LHS.n AS n
   FROM
     (SELECT membership_card,
             COUNT() AS n
      FROM df_member
      GROUP BY membership_card) AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT membership_card,
                COUNT() AS n
         FROM df_member
         GROUP BY membership_card)
      WHERE (n > 5)) AS RHS ON (LHS.membership_card = RHS.membership_card
                                AND LHS.n = RHS.n))
ORDER BY membership_card;",3,12,5,0,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/coffee_shop/0004,"filter(input0, ""membership_card == 'Black' & age != 30L""), semi_join(input0, line0)","SELECT `name`,
       `member_id`
FROM
  (SELECT *
   FROM `df_member` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_member`
           WHERE (`membership_card` = 'Black'
                  AND age != 30)) AS RHS
        WHERE (LHS.member_id = RHS.member_id
               AND LHS.name = RHS.name
               AND LHS.membership_card = RHS.membership_card
               AND LHS.age = RHS.age
               AND LHS.time_of_purchase = RHS.time_of_purchase
               AND LHS.level_of_membership = RHS.level_of_membership
               AND LHS.address = RHS.address) ))
ORDER BY name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/coffee_shop/0015,"filter(input1, ""month == 'May'""), natural_join(input0, line0)","SELECT `address`,
       `shop_id`
FROM
  (SELECT `LHS`.`shop_id` AS `shop_id`,
          `LHS`.`address` AS `address`,
          `LHS`.`num_of_staff` AS `num_of_staff`,
          `LHS`.`score` AS `score`,
          `LHS`.`open_year` AS `open_year`,
          `RHS`.`hh_id` AS `hh_id`,
          `RHS`.`month` AS `month`,
          `RHS`.`num_of_shaff_in_charge` AS `num_of_shaff_in_charge`
   FROM `df_shop` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_happy_hour`
      WHERE (`month` = 'May')) AS RHS ON (LHS.shop_id = RHS.shop_id))
ORDER BY address;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/coffee_shop/0005,df_member,"SELECT time_of_purchase,
       age,
       address
FROM df_member
ORDER BY time_of_purchase;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/coffee_shop/0016,"summarise(input0, 'n = n()', ""'month','num_of_shaff_in_charge'""), limit(line0, 'month')","SELECT n AS shop_id,
       num_of_shaff_in_charge AS count___
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT MONTH,
                num_of_shaff_in_charge,
                COUNT() AS n
         FROM df_happy_hour
         GROUP BY MONTH,
                  num_of_shaff_in_charge)
      ORDER BY MONTH)
   LIMIT 1);",1,12,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/coffee_shop/0018,"summarise(input0, 'n = n()', ""'month','num_of_shaff_in_charge'""), filter(line0, 'n >= 2L')","SELECT MONTH
FROM
  (SELECT MONTH,
          num_of_shaff_in_charge,
          COUNT() AS n
   FROM df_happy_hour
   GROUP BY MONTH,
            num_of_shaff_in_charge)
WHERE (n >= 2)
ORDER BY MONTH;",2,9,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/coffee_shop/0007,"filter(input0, 'age <= 30L & age < 40L'), natural_join(input0, line0)","SELECT address
FROM
  (SELECT LHS.member_id AS member_id,
          LHS.name AS name,
          LHS.membership_card AS membership_card,
          LHS.age AS age,
          LHS.time_of_purchase AS time_of_purchase,
          LHS.level_of_membership AS level_of_membership,
          LHS.address AS address
   FROM df_member AS LHS
   INNER JOIN
     (SELECT *
      FROM df_member
      WHERE (age <= 30
             AND age < 40)) AS RHS ON (LHS.member_id = RHS.member_id
                                       AND LHS.name = RHS.name
                                       AND LHS.membership_card = RHS.membership_card
                                       AND LHS.age = RHS.age
                                       AND LHS.time_of_purchase = RHS.time_of_purchase
                                       AND LHS.level_of_membership = RHS.level_of_membership
                                       AND LHS.address = RHS.address))
ORDER BY address;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/coffee_shop/0001,"filter(input0, ""membership_card == 'Black'""), summarise(line0, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_member`
      WHERE (`membership_card` = 'Black')))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/coffee_shop/0014,"anti_join(input0, input1, '')","SELECT address,
       num_of_staff
FROM
  (SELECT *
   FROM df_shop AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_happy_hour AS RHS
        WHERE (LHS.shop_id = RHS.shop_id) ))
ORDER BY address;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/coffee_shop/0009,"filter(input0, ""address != 'Hartford'""), summarise(line0, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_member`
      WHERE (`address` != 'Hartford')))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/coffee_shop/0011,"intersect(input0, input0, 'address')","SELECT address
FROM
  (SELECT address
   FROM df_shop INTERSECT SELECT address
   FROM df_shop)
ORDER BY address;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/coffee_shop/0010,"filter(input0, ""membership_card == 'Black'""), intersect(input0, input0, 'address'), anti_join(line1, line0, '')","SELECT `address`
FROM
  (SELECT *
   FROM
     (SELECT `address`
      FROM `df_member` INTERSECT SELECT `address`
      FROM `df_member`) AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_member`
           WHERE (`membership_card` = 'Black')) AS RHS
        WHERE (LHS.address = RHS.address) ))
ORDER BY address;",3,18,6,0,6,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0
spider/hospital_1/0033,"filter(input1, 'primaryaffiliation == T'), natural_join3(input0, input1, line0)","SELECT DISTINCT name
FROM
  (SELECT LHS.departmentid AS departmentid,
          LHS.name AS name,
          LHS.head AS head,
          LHS.physician AS physician,
          LHS.department AS department,
          LHS.primaryaffiliation AS primaryaffiliation
   FROM
     (SELECT LHS.departmentid AS departmentid,
             LHS.name AS name,
             LHS.head AS head,
             RHS.physician AS physician,
             RHS.department AS department,
             RHS.primaryaffiliation AS primaryaffiliation
      FROM df_department AS LHS
      CROSS JOIN df_affiliated_with AS RHS) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_affiliated_with
      WHERE (primaryaffiliation = 1)) AS RHS ON (LHS.physician = RHS.physician
                                                 AND LHS.department = RHS.department
                                                 AND LHS.primaryaffiliation = RHS.primaryaffiliation))
ORDER BY name;",2,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/hospital_1/0037,"limit(input0, 'cost')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_procedures
      ORDER BY cost)
   LIMIT 3);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/hospital_1/0002,"summarise(input0, 'n = n()', ""'head'""), limit(line0, 'desc(n)')","SELECT head
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT head,
                COUNT() AS n
         FROM df_department
         GROUP BY head)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/hospital_1/0036,df_procedures,"SELECT name,
       cost
FROM df_procedures
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/hospital_1/0008,"inner_join(input0, input1, ""'employeeid' = 'physician'""), anti_join(input0, line0, ""'name','ssn'"")","SELECT name
FROM
  (SELECT *
   FROM df_physician AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT employeeid,
                  name,
                  POSITION,
                  ssn,
                  appointmentid,
                  patient,
                  prepnurse, START, END,
                                    examinationroom,
                                    employeeid AS physician
           FROM
             (SELECT LHS.employeeid AS employeeid,
                     LHS.name AS name,
                     LHS.position AS POSITION,
                     LHS.ssn AS ssn,
                     RHS.appointmentid AS appointmentid,
                     RHS.patient AS patient,
                     RHS.prepnurse AS prepnurse,
                     RHS.start AS START, RHS.end AS END,
                                         RHS.examinationroom AS examinationroom
              FROM df_physician AS LHS
              INNER JOIN df_appointment AS RHS ON (LHS.employeeid = RHS.physician))) AS RHS
        WHERE (LHS.name = RHS.name
               AND LHS.ssn = RHS.ssn) ))
ORDER BY name;",2,21,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
spider/hospital_1/0038,"filter(input1, 'cost >= 5000'), inner_join(line0, input2, ""'code' = 'treatment'""), inner_join(input0, line1, ""'employeeid' = 'physician'"")","SELECT name
FROM
  (SELECT LHS.employeeid AS employeeid,
          LHS.name AS name,
          LHS.position AS POSITION,
          LHS.ssn AS ssn,
          RHS.code AS code,
          RHS.name AS name_other,
          RHS.cost AS cost,
          RHS.certificationdate AS certificationdate,
          RHS.certificationexpires AS certificationexpires,
          RHS.treatment AS treatment
   FROM df_physician AS LHS
   INNER JOIN
     (SELECT code,
             name,
             cost,
             physician,
             certificationdate,
             certificationexpires,
             code AS treatment
      FROM
        (SELECT LHS.code AS code,
                LHS.name AS name,
                LHS.cost AS cost,
                RHS.physician AS physician,
                RHS.certificationdate AS certificationdate,
                RHS.certificationexpires AS certificationexpires
         FROM
           (SELECT *
            FROM df_procedures
            WHERE (cost >= 5000.0)) AS LHS
         INNER JOIN df_trained_in AS RHS ON (LHS.code = RHS.treatment))) AS RHS ON (LHS.employeeid = RHS.physician))
ORDER BY name;",3,14,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0
spider/hospital_1/0003,"filter(input1, 'departmentid == 1L'), summarise(line0, 'n_distinct = n_distinct(departmentid)', ""'head','name'""), inner_join(input0, line1, ""'employeeid' = 'head'"")","SELECT name,
       POSITION
FROM
  (SELECT LHS.employeeid AS employeeid,
          LHS.name AS name,
          LHS.position AS POSITION,
          LHS.ssn AS ssn,
          RHS.name AS name_other,
          RHS.n_distinct AS n_distinct
   FROM df_physician AS LHS
   INNER JOIN
     (SELECT head,
             name,
             COUNT(DISTINCT departmentid) AS n_distinct
      FROM df_department
      WHERE (departmentid = 1)
      GROUP BY head,
               name) AS RHS ON (LHS.employeeid = RHS.head))
ORDER BY name;",3,11,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/hospital_1/0027,"filter(input1, 'room > 111L'), semi_join(input2, line0), inner_join(input0, line1, ""'pcp' = 'procedures'"")","SELECT name
FROM
  (SELECT LHS.ssn AS ssn,
          LHS.name AS name,
          LHS.address AS address,
          LHS.phone AS phone,
          LHS.insuranceid AS insuranceid,
          LHS.pcp AS pcp,
          RHS.patient AS patient,
          RHS.stay AS stay,
          RHS.dateundergoes AS dateundergoes,
          RHS.physician AS physician,
          RHS.assistingnurse AS assistingnurse
   FROM df_patient AS LHS
   INNER JOIN
     (SELECT *
      FROM df_undergoes AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM df_stay
              WHERE (room > 111)) AS RHS
           WHERE (LHS.patient = RHS.patient) )) AS RHS ON (LHS.pcp = RHS.procedures))
ORDER BY name;",3,15,5,0,5,1,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0
spider/hospital_1/0048,"filter(input0, ""name != 'Procrastin-X'""), mutate(input2, 'n = n()'), natural_join4(input0, input1, line0, line1)","SELECT DISTINCT `n` AS `count___`
FROM
  (SELECT `LHS`.`ssn` AS `ssn`,
          `LHS`.`name` AS `name`,
          `LHS`.`address` AS `address`,
          `LHS`.`phone` AS `phone`,
          `LHS`.`insuranceid` AS `insuranceid`,
          `LHS`.`pcp` AS `pcp`,
          `LHS`.`code` AS `code`,
          `LHS`.`brand` AS `brand`,
          `LHS`.`description` AS `description`,
          `RHS`.`physician` AS `physician`,
          `RHS`.`patient` AS `patient`,
          `RHS`.`medication` AS `medication`,
          `RHS`.`date` AS `date`,
          `RHS`.`appointment` AS `appointment`,
          `RHS`.`dose` AS `dose`,
          `RHS`.`n` AS `n`
   FROM
     (SELECT `LHS`.`ssn` AS `ssn`,
             `LHS`.`name` AS `name`,
             `LHS`.`address` AS `address`,
             `LHS`.`phone` AS `phone`,
             `LHS`.`insuranceid` AS `insuranceid`,
             `LHS`.`pcp` AS `pcp`,
             `LHS`.`code` AS `code`,
             `LHS`.`brand` AS `brand`,
             `LHS`.`description` AS `description`
      FROM
        (SELECT `LHS`.`ssn` AS `ssn`,
                `LHS`.`name` AS `name`,
                `LHS`.`address` AS `address`,
                `LHS`.`phone` AS `phone`,
                `LHS`.`insuranceid` AS `insuranceid`,
                `LHS`.`pcp` AS `pcp`,
                `RHS`.`code` AS `code`,
                `RHS`.`brand` AS `brand`,
                `RHS`.`description` AS `description`
         FROM `df_patient` AS `LHS`
         INNER JOIN `df_medication` AS `RHS` ON (`LHS`.`name` = `RHS`.`name`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_patient`
         WHERE (`name` != 'Procrastin-X')) AS RHS ON (LHS.ssn = RHS.ssn
                                                      AND LHS.name = RHS.name
                                                      AND LHS.address = RHS.address
                                                      AND LHS.phone = RHS.phone
                                                      AND LHS.insuranceid = RHS.insuranceid
                                                      AND LHS.pcp = RHS.pcp)) AS LHS
   CROSS JOIN
     (SELECT physician,
             patient,
             medication, date, appointment,
                               dose,
                               COUNT(*) OVER () AS n
      FROM df_prescribes) AS RHS)
ORDER BY count___;",3,17,6,1,6,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0
spider/hospital_1/0022,"filter(input1, ""name == 'Thesisin'""), cross_join(line0, input0, 'name != name.other'), inner_join(input2, line1, ""'physician' = 'employeeid','medication' = 'code'"")","SELECT DISTINCT `name_other` AS `name`
FROM
  (SELECT `physician`,
          `patient`,
          `medication`,
          `date`,
          `appointment`,
          `dose`,
          `name`,
          `brand`,
          `description`,
          `name_other`,
          `position`,
          `ssn`,
          `physician` AS `employeeid`
   FROM
     (SELECT `LHS`.`physician` AS `physician`,
             `LHS`.`patient` AS `patient`,
             `LHS`.`medication` AS `medication`,
             `LHS`.`date` AS `date`,
             `LHS`.`appointment` AS `appointment`,
             `LHS`.`dose` AS `dose`,
             `RHS`.`name` AS `name`,
             `RHS`.`brand` AS `brand`,
             `RHS`.`description` AS `description`,
             `RHS`.`name_other` AS `name_other`,
             `RHS`.`position` AS `position`,
             `RHS`.`ssn` AS `ssn`
      FROM `df_prescribes` AS `LHS`
      INNER JOIN
        (SELECT *
         FROM
           (SELECT `LHS`.`code` AS `code`,
                   `LHS`.`name` AS `name`,
                   `LHS`.`brand` AS `brand`,
                   `LHS`.`description` AS `description`,
                   `RHS`.`employeeid` AS `employeeid`,
                   `RHS`.`name` AS `name_other`,
                   `RHS`.`position` AS `position`,
                   `RHS`.`ssn` AS `ssn`
            FROM
              (SELECT *
               FROM `df_medication`
               WHERE (`name` = 'Thesisin')) AS LHS
            CROSS JOIN df_physician AS RHS)
         WHERE (name != name_other)) AS RHS ON (LHS.physician = RHS.employeeid
                                                AND LHS.medication = RHS.code)))
ORDER BY name;",3,16,6,1,6,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0
spider/hospital_1/0030,df_medication,"SELECT name
FROM df_medication
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/hospital_1/0013,"natural_join3(input0, input2, input3), filter(line0, 'room <= 111L'), inner_join(input1, line1, ""'code' = 'physician'"")","SELECT DISTINCT name
FROM
  (SELECT LHS.code AS code,
          LHS.name AS name,
          LHS.brand AS brand,
          LHS.description AS description,
          RHS.ssn AS ssn,
          RHS.name AS name_other,
          RHS.address AS address,
          RHS.phone AS phone,
          RHS.insuranceid AS insuranceid,
          RHS.pcp AS pcp,
          RHS.patient AS patient,
          RHS.medication AS medication,
          RHS.date AS date,
          RHS.appointment AS appointment,
          RHS.dose AS dose,
          RHS.stayid AS stayid,
          RHS.room AS room,
          RHS.staystart AS staystart,
          RHS.stayend AS stayend
   FROM df_medication AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT LHS.ssn AS ssn,
                LHS.name AS name,
                LHS.address AS address,
                LHS.phone AS phone,
                LHS.insuranceid AS insuranceid,
                LHS.pcp AS pcp,
                LHS.physician AS physician,
                LHS.patient AS patient,
                LHS.medication AS medication,
                LHS.date AS date,
                LHS.appointment AS appointment,
                LHS.dose AS dose,
                RHS.stayid AS stayid,
                RHS.room AS room,
                RHS.staystart AS staystart,
                RHS.stayend AS stayend
         FROM
           (SELECT LHS.ssn AS ssn,
                   LHS.name AS name,
                   LHS.address AS address,
                   LHS.phone AS phone,
                   LHS.insuranceid AS insuranceid,
                   LHS.pcp AS pcp,
                   RHS.physician AS physician,
                   RHS.patient AS patient,
                   RHS.medication AS medication,
                   RHS.date AS date,
                   RHS.appointment AS appointment,
                   RHS.dose AS dose
            FROM df_patient AS LHS
            CROSS JOIN df_prescribes AS RHS) AS LHS
         INNER JOIN df_stay AS RHS ON (LHS.patient = RHS.patient))
      WHERE (room <= 111)) AS RHS ON (LHS.code = RHS.physician))
ORDER BY name;",3,14,5,1,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0
spider/hospital_1/0006,"limit(input0, 'desc(physician)')","SELECT appointmentid
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_appointment
      ORDER BY physician DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/hospital_1/0004,"inner_join(input0, input1, ""'ssn' = 'patient'"")","SELECT name
FROM
  (SELECT LHS.ssn AS ssn,
          LHS.name AS name,
          LHS.address AS address,
          LHS.phone AS phone,
          LHS.insuranceid AS insuranceid,
          LHS.pcp AS pcp,
          RHS.appointmentid AS appointmentid,
          RHS.prepnurse AS prepnurse,
          RHS.physician AS physician,
          RHS.start AS START, RHS.end AS END,
                              RHS.examinationroom AS examinationroom
   FROM df_patient AS LHS
   INNER JOIN df_appointment AS RHS ON (LHS.ssn = RHS.patient))
ORDER BY name;",1,7,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/hospital_1/0012,"filter(input0, ""name != 'John Dorian'""), summarise(input1, 'n_distinct = n_distinct(ssn)', ""'pcp','phone'""), natural_join4(input0, input2, line0, line1)","SELECT DISTINCT `n_distinct` AS `count_t1_ssn_`
FROM
  (SELECT `LHS`.`employeeid` AS `employeeid`,
          `LHS`.`name` AS `name`,
          `LHS`.`position` AS `position`,
          `LHS`.`ssn` AS `ssn`,
          `LHS`.`physician` AS `physician`,
          `LHS`.`patient` AS `patient`,
          `LHS`.`medication` AS `medication`,
          `LHS`.`date` AS `date`,
          `LHS`.`appointment` AS `appointment`,
          `LHS`.`dose` AS `dose`,
          `RHS`.`pcp` AS `pcp`,
          `RHS`.`phone` AS `phone`,
          `RHS`.`n_distinct` AS `n_distinct`
   FROM
     (SELECT `LHS`.`employeeid` AS `employeeid`,
             `LHS`.`name` AS `name`,
             `LHS`.`position` AS `position`,
             `LHS`.`ssn` AS `ssn`,
             `LHS`.`physician` AS `physician`,
             `LHS`.`patient` AS `patient`,
             `LHS`.`medication` AS `medication`,
             `LHS`.`date` AS `date`,
             `LHS`.`appointment` AS `appointment`,
             `LHS`.`dose` AS `dose`
      FROM
        (SELECT `LHS`.`employeeid` AS `employeeid`,
                `LHS`.`name` AS `name`,
                `LHS`.`position` AS `position`,
                `LHS`.`ssn` AS `ssn`,
                `RHS`.`physician` AS `physician`,
                `RHS`.`patient` AS `patient`,
                `RHS`.`medication` AS `medication`,
                `RHS`.`date` AS `date`,
                `RHS`.`appointment` AS `appointment`,
                `RHS`.`dose` AS `dose`
         FROM `df_physician` AS `LHS`
         CROSS JOIN `df_prescribes` AS `RHS`) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_physician`
         WHERE (`name` != 'John Dorian')) AS RHS ON (LHS.employeeid = RHS.employeeid
                                                     AND LHS.name = RHS.name
                                                     AND LHS.position = RHS.position
                                                     AND LHS.ssn = RHS.ssn)) AS LHS
   CROSS JOIN
     (SELECT pcp,
             phone,
             COUNT(DISTINCT ssn) AS n_distinct
      FROM df_patient
      GROUP BY pcp,
               phone) AS RHS)
ORDER BY count_t1_ssn_;",3,16,6,2,6,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
spider/hospital_1/0026,"natural_join(input0, input1), limit(line0, 'desc(stay)')","SELECT ssn AS patient
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.ssn AS ssn,
                LHS.name AS name,
                LHS.address AS address,
                LHS.phone AS phone,
                LHS.insuranceid AS insuranceid,
                LHS.pcp AS pcp,
                RHS.patient AS patient,
                RHS.procedures AS procedures,
                RHS.stay AS stay,
                RHS.dateundergoes AS dateundergoes,
                RHS.physician AS physician,
                RHS.assistingnurse AS assistingnurse
         FROM df_patient AS LHS
         CROSS JOIN df_undergoes AS RHS)
      ORDER BY stay DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/hospital_1/0015,"mutate(input0, 'n = n()'), natural_join3(input0, input1, line0), limit(line1, 'n')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.employeeid AS employeeid,
                LHS.name AS name,
                LHS.position AS POSITION,
                LHS.registered AS registered,
                LHS.ssn AS ssn,
                LHS.appointmentid AS appointmentid,
                LHS.patient AS patient,
                LHS.prepnurse AS prepnurse,
                LHS.physician AS physician,
                LHS.start AS START, LHS.end AS END,
                                    LHS.examinationroom AS examinationroom,
                                    RHS.n AS n
         FROM
           (SELECT LHS.employeeid AS employeeid,
                   LHS.name AS name,
                   LHS.position AS POSITION,
                   LHS.registered AS registered,
                   LHS.ssn AS ssn,
                   RHS.appointmentid AS appointmentid,
                   RHS.patient AS patient,
                   RHS.prepnurse AS prepnurse,
                   RHS.physician AS physician,
                   RHS.start AS START, RHS.end AS END,
                                       RHS.examinationroom AS examinationroom
            FROM df_nurse AS LHS
            CROSS JOIN df_appointment AS RHS) AS LHS
         INNER JOIN
           (SELECT employeeid,
                   name,
                   POSITION,
                   registered,
                   ssn,
                   COUNT(*) OVER () AS n
            FROM df_nurse) AS RHS ON (LHS.employeeid = RHS.employeeid
                                      AND LHS.name = RHS.name
                                      AND LHS.position = RHS.position
                                      AND LHS.registered = RHS.registered
                                      AND LHS.ssn = RHS.ssn))
      ORDER BY n)
   LIMIT 1);",2,22,6,0,6,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,2,2,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
spider/hospital_1/0005,"summarise(input1, 'n = n()', ""'patient','physician'""), filter(line0, 'n > 1L'), inner_join(input0, line1, ""'ssn' = 'patient'"")","SELECT name,
       phone
FROM
  (SELECT LHS.ssn AS ssn,
          LHS.name AS name,
          LHS.address AS address,
          LHS.phone AS phone,
          LHS.insuranceid AS insuranceid,
          LHS.pcp AS pcp,
          RHS.physician AS physician,
          RHS.n AS n
   FROM df_patient AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT patient,
                physician,
                COUNT() AS n
         FROM df_appointment
         GROUP BY patient,
                  physician)
      WHERE (n > 1)) AS RHS ON (LHS.ssn = RHS.patient))
ORDER BY name;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/hospital_1/0016,"inner_join(input0, input1, ""'employeeid' = 'pcp'""), summarise(line0, 'n = n()', ""'name','pcp'"")","SELECT name,
       n AS count___
FROM
  (SELECT name,
          pcp,
          COUNT() AS n
   FROM
     (SELECT employeeid,
             name,
             POSITION,
             ssn,
             ssn_other,
             name_other,
             address,
             phone,
             insuranceid,
             employeeid AS pcp
      FROM
        (SELECT LHS.employeeid AS employeeid,
                LHS.name AS name,
                LHS.position AS POSITION,
                LHS.ssn AS ssn,
                RHS.ssn AS ssn_other,
                RHS.name AS name_other,
                RHS.address AS address,
                RHS.phone AS phone,
                RHS.insuranceid AS insuranceid
         FROM df_physician AS LHS
         INNER JOIN df_patient AS RHS ON (LHS.employeeid = RHS.pcp)))
   GROUP BY name,
            pcp)
ORDER BY name;",2,11,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/hospital_1/0050,df_nurse,"SELECT name
FROM df_nurse
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/hospital_1/0032,"natural_join(input0, input2), filter(line0, 'primaryaffiliation == T'), anti_join(line1, input1, ""'name'"")","SELECT DISTINCT physician,
                department
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.employeeid AS employeeid,
                LHS.name AS name,
                LHS.position AS POSITION,
                LHS.ssn AS ssn,
                RHS.physician AS physician,
                RHS.department AS department,
                RHS.primaryaffiliation AS primaryaffiliation
         FROM df_physician AS LHS
         CROSS JOIN df_affiliated_with AS RHS)
      WHERE (primaryaffiliation = 1)) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_department AS RHS
        WHERE (LHS.name = RHS.name) ))
ORDER BY physician;",3,17,5,1,5,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0
spider/hospital_1/0018,"summarise(input1, 'n = n()', ""'blockfloor'""), semi_join(line0, input0)","SELECT n AS count___,
       blockfloor
FROM
  (SELECT *
   FROM
     (SELECT blockfloor,
             COUNT() AS n
      FROM df_room
      GROUP BY blockfloor) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_block AS RHS
        WHERE (LHS.blockfloor = RHS.blockfloor) ))
ORDER BY count___;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/hospital_1/0035,"mutate(input0, 'meancost = mean(cost, na.rm = T)'), mutate(line0, 'maxcost = max(cost)'), mutate(line1, 'cost = min(cost)')","SELECT DISTINCT maxcost AS max_cost_,
                MIN(cost) OVER () AS min_cost_,
                               meancost AS avg_cost_
FROM
  (SELECT code,
          name,
          cost,
          meancost,
          MAX(cost) OVER () AS maxcost
   FROM
     (SELECT code,
             name,
             cost,
             AVG(cost) OVER () AS meancost
      FROM df_procedures))
ORDER BY max_cost_;",3,10,3,1,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0
spider/hospital_1/0020,"filter(input0, 'unavailable == T')","SELECT DISTINCT blockcode
FROM df_room
WHERE (unavailable = 1)
ORDER BY blockcode;",1,4,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/hospital_1/0019,"summarise(input1, 'n = n()', ""'blockcode'""), semi_join(line0, input0)","SELECT n AS count___,
       blockcode
FROM
  (SELECT *
   FROM
     (SELECT blockcode,
             COUNT() AS n
      FROM df_room
      GROUP BY blockcode) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_block AS RHS
        WHERE (LHS.blockcode = RHS.blockcode) ))
ORDER BY count___;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/hospital_1/0007,"inner_join(input0, input1, ""'employeeid' = 'physician'"")","SELECT name
FROM
  (SELECT LHS.employeeid AS employeeid,
          LHS.name AS name,
          LHS.position AS POSITION,
          LHS.ssn AS ssn,
          RHS.appointmentid AS appointmentid,
          RHS.patient AS patient,
          RHS.prepnurse AS prepnurse,
          RHS.start AS START, RHS.end AS END,
                              RHS.examinationroom AS examinationroom
   FROM df_physician AS LHS
   INNER JOIN df_appointment AS RHS ON (LHS.employeeid = RHS.physician))
ORDER BY name;",1,8,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/hospital_1/0034,"filter(input1, 'blockfloor <= 1L & blockcode == blockfloor'), natural_join3(input0, input1, line0)","SELECT DISTINCT nurse
FROM
  (SELECT LHS.employeeid AS employeeid,
          LHS.name AS name,
          LHS.position AS POSITION,
          LHS.registered AS registered,
          LHS.ssn AS ssn,
          LHS.nurse AS nurse,
          LHS.blockfloor AS blockfloor,
          LHS.blockcode AS blockcode,
          LHS.oncallstart AS oncallstart,
          LHS.oncallend AS oncallend
   FROM
     (SELECT LHS.employeeid AS employeeid,
             LHS.name AS name,
             LHS.position AS POSITION,
             LHS.registered AS registered,
             LHS.ssn AS ssn,
             RHS.nurse AS nurse,
             RHS.blockfloor AS blockfloor,
             RHS.blockcode AS blockcode,
             RHS.oncallstart AS oncallstart,
             RHS.oncallend AS oncallend
      FROM df_nurse AS LHS
      CROSS JOIN df_on_call AS RHS) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_on_call
      WHERE (blockfloor <= 1
             AND blockcode = blockfloor)) AS RHS ON (LHS.nurse = RHS.nurse
                                                     AND LHS.blockfloor = RHS.blockfloor
                                                     AND LHS.blockcode = RHS.blockcode
                                                     AND LHS.oncallstart = RHS.oncallstart
                                                     AND LHS.oncallend = RHS.oncallend))
ORDER BY nurse;",2,13,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/hospital_1/0024,"mutate(input1, 'n = n()'), inner_join(input0, line0, ""'code' = 'medication'"")","SELECT DISTINCT code AS count___,
                name
FROM
  (SELECT LHS.code AS code,
          LHS.name AS name,
          LHS.brand AS brand,
          LHS.description AS description,
          RHS.physician AS physician,
          RHS.patient AS patient,
          RHS.date AS date,
          RHS.appointment AS appointment,
          RHS.dose AS dose,
          RHS.n AS n
   FROM df_medication AS LHS
   INNER JOIN
     (SELECT physician,
             patient,
             medication, date, appointment,
                               dose,
                               COUNT(*) OVER () AS n
      FROM df_prescribes) AS RHS ON (LHS.code = RHS.medication))
ORDER BY count___;",2,9,3,1,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/hospital_1/0021,"summarise(input0, 'n = n()', ""'blockcode','roomtype'""), summarise(line0, 'n_distinct = n_distinct(roomtype)', ""'roomtype'"")","SELECT n_distinct AS count_distinct_roomtype_
FROM
  (SELECT roomtype,
          COUNT(DISTINCT roomtype) AS n_distinct
   FROM
     (SELECT blockcode,
             roomtype,
             COUNT() AS n
      FROM df_room
      GROUP BY blockcode,
               roomtype)
   GROUP BY roomtype)
ORDER BY count_distinct_roomtype_;",2,7,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/hospital_1/0023,"natural_join(input0, input2), filter(input1, ""brand == 'X'""), inner_join(line0, line1, ""'employeeid' = 'code'"")","SELECT DISTINCT `name`,
                `position`
FROM
  (SELECT `LHS`.`employeeid` AS `employeeid`,
          `LHS`.`name` AS `name`,
          `LHS`.`position` AS `position`,
          `LHS`.`ssn` AS `ssn`,
          `LHS`.`physician` AS `physician`,
          `LHS`.`patient` AS `patient`,
          `LHS`.`medication` AS `medication`,
          `LHS`.`date` AS `date`,
          `LHS`.`appointment` AS `appointment`,
          `LHS`.`dose` AS `dose`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`brand` AS `brand`,
          `RHS`.`description` AS `description`
   FROM
     (SELECT `LHS`.`employeeid` AS `employeeid`,
             `LHS`.`name` AS `name`,
             `LHS`.`position` AS `position`,
             `LHS`.`ssn` AS `ssn`,
             `RHS`.`physician` AS `physician`,
             `RHS`.`patient` AS `patient`,
             `RHS`.`medication` AS `medication`,
             `RHS`.`date` AS `date`,
             `RHS`.`appointment` AS `appointment`,
             `RHS`.`dose` AS `dose`
      FROM `df_physician` AS `LHS`
      CROSS JOIN `df_prescribes` AS `RHS`) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_medication`
      WHERE (`brand` = 'X')) AS RHS ON (LHS.employeeid = RHS.code))
ORDER BY name;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0
spider/hospital_1/0001,"summarise(input0, 'n = n()', ""'departmentid','name'""), limit(line0, 'desc(n)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT departmentid,
                name,
                COUNT() AS n
         FROM df_department
         GROUP BY departmentid,
                  name)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/hospital_1/0046,"filter(input1, ""name == 'Surgery' | name == 'Psychiatry'""), cross_join(input0, line0, 'name != name.other'), inner_join(input2, line1, ""'physician' = 'employeeid','department' = 'departmentid'"")","SELECT `name`
FROM
  (SELECT `physician`,
          `department`,
          `primaryaffiliation`,
          `name`,
          `position`,
          `ssn`,
          `name_other`,
          `head`,
          `physician` AS `employeeid`
   FROM
     (SELECT `LHS`.`physician` AS `physician`,
             `LHS`.`department` AS `department`,
             `LHS`.`primaryaffiliation` AS `primaryaffiliation`,
             `RHS`.`name` AS `name`,
             `RHS`.`position` AS `position`,
             `RHS`.`ssn` AS `ssn`,
             `RHS`.`name_other` AS `name_other`,
             `RHS`.`head` AS `head`
      FROM `df_affiliated_with` AS `LHS`
      INNER JOIN
        (SELECT *
         FROM
           (SELECT `LHS`.`employeeid` AS `employeeid`,
                   `LHS`.`name` AS `name`,
                   `LHS`.`position` AS `position`,
                   `LHS`.`ssn` AS `ssn`,
                   `RHS`.`departmentid` AS `departmentid`,
                   `RHS`.`name` AS `name_other`,
                   `RHS`.`head` AS `head`
            FROM `df_physician` AS `LHS`
            CROSS JOIN
              (SELECT *
               FROM `df_department`
               WHERE (`name` = 'Surgery'
                      OR `name` = 'Psychiatry')) AS RHS)
         WHERE (name != name_other)) AS RHS ON (LHS.physician = RHS.employeeid
                                                AND LHS.department = RHS.departmentid)))
ORDER BY name;",3,16,6,0,6,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0
spider/hospital_1/0014,"natural_join(input0, input1), filter(line0, 'room <= 111L | room <= 1L')","SELECT DISTINCT patient
FROM
  (SELECT LHS.ssn AS ssn,
          LHS.name AS name,
          LHS.address AS address,
          LHS.phone AS phone,
          LHS.insuranceid AS insuranceid,
          LHS.pcp AS pcp,
          RHS.stayid AS stayid,
          RHS.patient AS patient,
          RHS.room AS room,
          RHS.staystart AS staystart,
          RHS.stayend AS stayend
   FROM df_patient AS LHS
   CROSS JOIN df_stay AS RHS)
WHERE (room <= 111
       OR room <= 1)
ORDER BY patient;",2,7,2,1,2,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/hospital_1/0009,"filter(input2, 'primaryaffiliation == T'), inner_join(input1, line0, ""'departmentid' = 'department'""), inner_join(input0, line1, ""'employeeid' = 'physician'"")","SELECT name AS name___1,
       name_other AS name___2
FROM
  (SELECT LHS.employeeid AS employeeid,
          LHS.name AS name,
          LHS.position AS POSITION,
          LHS.ssn AS ssn,
          RHS.departmentid AS departmentid,
          RHS.name AS name_other,
          RHS.head AS head,
          RHS.primaryaffiliation AS primaryaffiliation,
          RHS.department AS department
   FROM df_physician AS LHS
   INNER JOIN
     (SELECT departmentid,
             name,
             head,
             physician,
             primaryaffiliation,
             departmentid AS department
      FROM
        (SELECT LHS.departmentid AS departmentid,
                LHS.name AS name,
                LHS.head AS head,
                RHS.physician AS physician,
                RHS.primaryaffiliation AS primaryaffiliation
         FROM df_department AS LHS
         INNER JOIN
           (SELECT *
            FROM df_affiliated_with
            WHERE (primaryaffiliation = 1)) AS RHS ON (LHS.departmentid = RHS.department))) AS RHS ON (LHS.employeeid = RHS.physician))
ORDER BY name___1;",3,14,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0
spider/hospital_1/0011,"filter(input0, 'patient > 112L & room < patient'), summarise(line0, 'n = n()', ""'stayid','staystart'"")","SELECT DISTINCT n AS count_patient_
FROM
  (SELECT stayid,
          staystart,
          COUNT() AS n
   FROM
     (SELECT *
      FROM df_stay
      WHERE (patient > 112
             AND room < patient))
   GROUP BY stayid,
            staystart)
ORDER BY count_patient_;",2,8,3,1,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/hospital_1/0029,df_nurse,"SELECT name
FROM df_nurse
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/hospital_1/0010,"natural_join(input0, input1), limit(line0, 'name')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.ssn AS ssn,
                LHS.name AS name,
                LHS.address AS address,
                LHS.phone AS phone,
                LHS.insuranceid AS insuranceid,
                LHS.pcp AS pcp,
                RHS.appointmentid AS appointmentid,
                RHS.patient AS patient,
                RHS.prepnurse AS prepnurse,
                RHS.physician AS physician,
                RHS.start AS START, RHS.end AS END,
                                    RHS.examinationroom AS examinationroom
         FROM df_patient AS LHS
         CROSS JOIN df_appointment AS RHS)
      ORDER BY name)
   LIMIT 1);",1,11,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/hospital_1/0040,"filter(input1, ""name != 'John Wen'""), summarise(line0, 'meancost = mean(cost, na.rm = T)', ''), natural_join3(input0, input2, line1)","SELECT DISTINCT `meancost` AS `avg_t3_cost_`
FROM
  (SELECT `LHS`.`employeeid` AS `employeeid`,
          `LHS`.`name` AS `name`,
          `LHS`.`position` AS `position`,
          `LHS`.`ssn` AS `ssn`,
          `LHS`.`physician` AS `physician`,
          `LHS`.`treatment` AS `treatment`,
          `LHS`.`certificationdate` AS `certificationdate`,
          `LHS`.`certificationexpires` AS `certificationexpires`,
          `RHS`.`meancost` AS `meancost`
   FROM
     (SELECT `LHS`.`employeeid` AS `employeeid`,
             `LHS`.`name` AS `name`,
             `LHS`.`position` AS `position`,
             `LHS`.`ssn` AS `ssn`,
             `RHS`.`physician` AS `physician`,
             `RHS`.`treatment` AS `treatment`,
             `RHS`.`certificationdate` AS `certificationdate`,
             `RHS`.`certificationexpires` AS `certificationexpires`
      FROM `df_physician` AS `LHS`
      CROSS JOIN `df_trained_in` AS `RHS`) AS `LHS`
   CROSS JOIN
     (SELECT AVG(`cost`) AS `meancost`
      FROM `df_procedures`
      WHERE (`name` != 'John Wen')) AS RHS)
ORDER BY avg_t3_cost_;",3,10,4,1,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/hospital_1/0028,df_nurse,"SELECT name
FROM df_nurse
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/hospital_1/0049,"summarise(input0, 'n = n()', ""'examinationroom','start'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT examinationroom, START, COUNT() AS n
   FROM df_appointment
   GROUP BY examinationroom, START)
ORDER BY count___;",2,8,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/hospital_1/0031,"natural_join(input0, input1), limit(line0, 'desc(date)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.employeeid AS employeeid,
                LHS.name AS name,
                LHS.position AS POSITION,
                LHS.ssn AS ssn,
                RHS.physician AS physician,
                RHS.patient AS patient,
                RHS.medication AS medication,
                RHS.date AS date,
                RHS.appointment AS appointment,
                RHS.dose AS dose
         FROM df_physician AS LHS
         CROSS JOIN df_prescribes AS RHS)
      ORDER BY date DESC)
   LIMIT 1);",1,11,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/department_store/0037,"summarise(input0, 'minproduct_price = min(product_price)', ""'product_type_code'""), summarise(input0, 'product_price = max(product_price)', ""'product_type_code'""), natural_join(line0, line1)","SELECT product_price AS max_product_price_,
       minproduct_price AS min_product_price_,
       product_type_code
FROM
  (SELECT LHS.product_type_code AS product_type_code,
          LHS.minproduct_price AS minproduct_price,
          RHS.product_price AS product_price
   FROM
     (SELECT product_type_code,
             MIN(product_price) AS minproduct_price
      FROM df_products
      GROUP BY product_type_code) AS LHS
   INNER JOIN
     (SELECT product_type_code,
             MAX(product_price) AS product_price
      FROM df_products
      GROUP BY product_type_code) AS RHS ON (LHS.product_type_code = RHS.product_type_code))
ORDER BY max_product_price_;",3,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0
spider/department_store/0002,"limit(input0, 'product_price')","SELECT product_id,
       product_type_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_products
      ORDER BY product_price)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/department_store/0036,"filter(input1, ""product_name == 'red jeans'""), natural_join3(input0, input2, line0)","SELECT `supplier_name`,
       `supplier_phone`
FROM
  (SELECT `LHS`.`supplier_id` AS `supplier_id`,
          `LHS`.`supplier_name` AS `supplier_name`,
          `LHS`.`supplier_phone` AS `supplier_phone`,
          `LHS`.`product_id` AS `product_id`,
          `LHS`.`date_supplied_from` AS `date_supplied_from`,
          `LHS`.`date_supplied_to` AS `date_supplied_to`,
          `LHS`.`total_amount_purchased` AS `total_amount_purchased`,
          `LHS`.`total_value_purchased` AS `total_value_purchased`,
          `RHS`.`product_type_code` AS `product_type_code`,
          `RHS`.`product_name` AS `product_name`,
          `RHS`.`product_price` AS `product_price`
   FROM
     (SELECT `LHS`.`supplier_id` AS `supplier_id`,
             `LHS`.`supplier_name` AS `supplier_name`,
             `LHS`.`supplier_phone` AS `supplier_phone`,
             `RHS`.`product_id` AS `product_id`,
             `RHS`.`date_supplied_from` AS `date_supplied_from`,
             `RHS`.`date_supplied_to` AS `date_supplied_to`,
             `RHS`.`total_amount_purchased` AS `total_amount_purchased`,
             `RHS`.`total_value_purchased` AS `total_value_purchased`
      FROM `df_suppliers` AS `LHS`
      INNER JOIN `df_product_suppliers` AS `RHS` ON (`LHS`.`supplier_id` = `RHS`.`supplier_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_products`
      WHERE (`product_name` = 'red jeans')) AS RHS ON (LHS.product_id = RHS.product_id))
ORDER BY supplier_name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/department_store/0017,"summarise(input0, 'n = n()', ""'dept_store_chain_id','store_phone'""), limit(line0, 'store_phone')","SELECT dept_store_chain_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT dept_store_chain_id,
                store_phone,
                COUNT() AS n
         FROM df_department_stores
         GROUP BY dept_store_chain_id,
                  store_phone)
      ORDER BY store_phone)
   LIMIT 2);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/department_store/0008,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'order_status_code'""), inner_join(line0, line1, ""'customer_id' = 'n'"")","SELECT DISTINCT customer_name,
                customer_phone,
                customer_email
FROM
  (SELECT LHS.customer_id AS customer_id,
          LHS.payment_method_code AS payment_method_code,
          LHS.customer_code AS customer_code,
          LHS.customer_name AS customer_name,
          LHS.customer_address AS customer_address,
          LHS.customer_phone AS customer_phone,
          LHS.customer_email AS customer_email,
          LHS.order_id AS order_id,
          LHS.order_status_code AS order_status_code,
          LHS.order_date AS order_date,
          RHS.order_status_code AS order_status_code_other
   FROM
     (SELECT LHS.customer_id AS customer_id,
             LHS.payment_method_code AS payment_method_code,
             LHS.customer_code AS customer_code,
             LHS.customer_name AS customer_name,
             LHS.customer_address AS customer_address,
             LHS.customer_phone AS customer_phone,
             LHS.customer_email AS customer_email,
             RHS.order_id AS order_id,
             RHS.order_status_code AS order_status_code,
             RHS.order_date AS order_date
      FROM df_customers AS LHS
      INNER JOIN df_customer_orders AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
   INNER JOIN
     (SELECT order_status_code,
             COUNT() AS n
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.payment_method_code AS payment_method_code,
                LHS.customer_code AS customer_code,
                LHS.customer_name AS customer_name,
                LHS.customer_address AS customer_address,
                LHS.customer_phone AS customer_phone,
                LHS.customer_email AS customer_email,
                RHS.order_id AS order_id,
                RHS.order_status_code AS order_status_code,
                RHS.order_date AS order_date
         FROM df_customers AS LHS
         INNER JOIN df_customer_orders AS RHS ON (LHS.customer_id = RHS.customer_id))
      GROUP BY order_status_code) AS RHS ON (LHS.customer_id = RHS.n))
ORDER BY customer_name;",3,14,5,1,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0
spider/department_store/0039,"natural_join3(input0, input1, input2), summarise(line0, 'n_distinct = n_distinct(customer_id)', ""'product_name'""), filter(line1, 'n_distinct >= 2L')","SELECT product_name
FROM
  (SELECT product_name,
          COUNT(DISTINCT customer_id) AS n_distinct
   FROM
     (SELECT LHS.product_id AS product_id,
             LHS.product_type_code AS product_type_code,
             LHS.product_name AS product_name,
             LHS.product_price AS product_price,
             LHS.order_id AS order_id,
             LHS.customer_id AS customer_id,
             LHS.order_status_code AS order_status_code,
             LHS.order_date AS order_date,
             RHS.order_item_id AS order_item_id
      FROM
        (SELECT LHS.product_id AS product_id,
                LHS.product_type_code AS product_type_code,
                LHS.product_name AS product_name,
                LHS.product_price AS product_price,
                RHS.order_id AS order_id,
                RHS.customer_id AS customer_id,
                RHS.order_status_code AS order_status_code,
                RHS.order_date AS order_date
         FROM df_products AS LHS
         CROSS JOIN df_customer_orders AS RHS) AS LHS
      INNER JOIN df_order_items AS RHS ON (LHS.product_id = RHS.product_id
                                           AND LHS.order_id = RHS.order_id))
   GROUP BY product_name)
WHERE (n_distinct >= 2)
ORDER BY product_name;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/department_store/0038,"filter(input0, ""order_status_code == 'Cancelled'"")","SELECT `order_id`,
       `customer_id`
FROM `df_customer_orders`
WHERE (`order_status_code` = 'Cancelled')
ORDER BY order_id;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/department_store/0003,"summarise(input0, 'n_distinct = n_distinct(product_type_code)', '')","SELECT n_distinct AS count_distinct_product_type_code_
FROM
  (SELECT COUNT(DISTINCT product_type_code) AS n_distinct
   FROM df_products)
ORDER BY count_distinct_product_type_code_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/department_store/0027,"left_join(input1, input0), summarise(line0, 'n = n()', ""'staff_gender','staff_name'""), filter(line1, 'n > 1L')","SELECT staff_name
FROM
  (SELECT staff_gender,
          staff_name,
          COUNT() AS n
   FROM
     (SELECT LHS.staff_id AS staff_id,
             LHS.department_id AS department_id,
             LHS.date_assigned_from AS date_assigned_from,
             LHS.job_title_code AS job_title_code,
             LHS.date_assigned_to AS date_assigned_to,
             RHS.staff_gender AS staff_gender,
             RHS.staff_name AS staff_name
      FROM df_staff_department_assignments AS LHS
      LEFT JOIN df_staff AS RHS ON (LHS.staff_id = RHS.staff_id))
   GROUP BY staff_gender,
            staff_name)
WHERE (n > 1)
ORDER BY staff_name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/department_store/0022,"filter(input0, 'product_price > 600 & product_price <= 700'), semi_join(input0, line0)","SELECT product_name,
       product_id
FROM
  (SELECT *
   FROM df_products AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_products
           WHERE (product_price > 600.0
                  AND product_price <= 700.0)) AS RHS
        WHERE (LHS.product_id = RHS.product_id
               AND LHS.product_type_code = RHS.product_type_code
               AND LHS.product_name = RHS.product_name
               AND LHS.product_price = RHS.product_price) ))
ORDER BY product_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/department_store/0013,"filter(input1, ""order_status_code == 'Pending'""), semi_join(input0, line0)","SELECT `customer_name`
FROM
  (SELECT *
   FROM `df_customers` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customer_orders`
           WHERE (`order_status_code` = 'Pending')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/department_store/0006,"summarise(input0, 'n = n()', ""'payment_method_code'"")","SELECT payment_method_code,
       n AS count___
FROM
  (SELECT payment_method_code,
          COUNT() AS n
   FROM df_customers
   GROUP BY payment_method_code)
ORDER BY payment_method_code;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/department_store/0004,"filter(input1, 'customer_id == 10L'), semi_join(input0, line0)","SELECT address_details
FROM
  (SELECT *
   FROM df_addresses AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_customer_addresses
           WHERE (customer_id = 10)) AS RHS
        WHERE (LHS.address_id = RHS.address_id) ))
ORDER BY address_details;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/department_store/0012,"inner_join(input1, input0, ""'product_id'""), filter(line0, 'supplier_id == 3L')","SELECT product_type_code,
       product_name,
       product_price
FROM
  (SELECT LHS.product_id AS product_id,
          LHS.supplier_id AS supplier_id,
          LHS.date_supplied_from AS date_supplied_from,
          LHS.date_supplied_to AS date_supplied_to,
          LHS.total_amount_purchased AS total_amount_purchased,
          LHS.total_value_purchased AS total_value_purchased,
          RHS.product_type_code AS product_type_code,
          RHS.product_name AS product_name,
          RHS.product_price AS product_price
   FROM df_product_suppliers AS LHS
   INNER JOIN df_products AS RHS ON (LHS.product_id = RHS.product_id))
WHERE (supplier_id = 3)
ORDER BY product_type_code;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/department_store/0005,"filter(input1, ""job_title_code == 'Department Manager'""), semi_join(input0, line0)","SELECT `staff_id`,
       `staff_gender`
FROM
  (SELECT *
   FROM `df_staff` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_staff_department_assignments`
           WHERE (`job_title_code` = 'Department Manager')) AS RHS
        WHERE (LHS.staff_id = RHS.staff_id) ))
ORDER BY staff_id;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/department_store/0016,"filter(input1, ""department_name == 'marketing' & department_name != 'managing'""), semi_join(input0, line0)","SELECT `dept_store_id`,
       `store_name`
FROM
  (SELECT *
   FROM `df_department_stores` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_departments`
           WHERE (`department_name` = 'marketing'
                  AND `department_name` != 'managing')) AS RHS
        WHERE (LHS.dept_store_id = RHS.dept_store_id) ))
ORDER BY dept_store_id;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/department_store/0032,"inner_join(input0, input0, ""'product_id' = 'supplier_id','total_value_purchased' = 'total_value_purchased'""), anti_join(input0, line0, ""'supplier_id'"")","SELECT DISTINCT supplier_id
FROM
  (SELECT *
   FROM df_product_suppliers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT product_id,
                  product_id AS supplier_id,
                  date_supplied_from,
                  date_supplied_to,
                  total_amount_purchased,
                  total_value_purchased,
                  product_id_other,
                  date_supplied_from_other,
                  date_supplied_to_other,
                  total_amount_purchased_other
           FROM
             (SELECT LHS.product_id AS product_id,
                     LHS.supplier_id AS supplier_id,
                     LHS.date_supplied_from AS date_supplied_from,
                     LHS.date_supplied_to AS date_supplied_to,
                     LHS.total_amount_purchased AS total_amount_purchased,
                     LHS.total_value_purchased AS total_value_purchased,
                     RHS.product_id AS product_id_other,
                     RHS.date_supplied_from AS date_supplied_from_other,
                     RHS.date_supplied_to AS date_supplied_to_other,
                     RHS.total_amount_purchased AS total_amount_purchased_other
              FROM df_product_suppliers AS LHS
              INNER JOIN df_product_suppliers AS RHS ON (LHS.product_id = RHS.supplier_id
                                                         AND LHS.total_value_purchased = RHS.total_value_purchased))) AS RHS
        WHERE (LHS.supplier_id = RHS.supplier_id) ))
ORDER BY supplier_id;",2,16,5,1,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
spider/department_store/0018,"summarise(input0, 'n = n()', ""'date_assigned_from','job_title_code'""), limit(line0, 'desc(n)')","SELECT n AS department_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT date_assigned_from,
                job_title_code,
                COUNT() AS n
         FROM df_staff_department_assignments
         GROUP BY date_assigned_from,
                  job_title_code)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/department_store/0041,"filter(input1, ""job_title_code == 'Sales Person' & job_title_code != 'Clerical Staff'""), semi_join(input0, line0)","SELECT `staff_name`,
       `staff_gender`
FROM
  (SELECT *
   FROM `df_staff` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_staff_department_assignments`
           WHERE (`job_title_code` = 'Sales Person'
                  AND `job_title_code` != 'Clerical Staff')) AS RHS
        WHERE (LHS.staff_id = RHS.staff_id) ))
ORDER BY staff_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/department_store/0035,"natural_join4(input0, input1, input2, input3), filter(line0, ""product_name == 'keyboard'"")","SELECT DISTINCT `customer_name`
FROM
  (SELECT `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`payment_method_code` AS `payment_method_code`,
          `LHS`.`customer_code` AS `customer_code`,
          `LHS`.`customer_name` AS `customer_name`,
          `LHS`.`customer_address` AS `customer_address`,
          `LHS`.`customer_phone` AS `customer_phone`,
          `LHS`.`customer_email` AS `customer_email`,
          `LHS`.`product_id` AS `product_id`,
          `LHS`.`product_type_code` AS `product_type_code`,
          `LHS`.`product_name` AS `product_name`,
          `LHS`.`product_price` AS `product_price`,
          `LHS`.`order_id` AS `order_id`,
          `LHS`.`order_status_code` AS `order_status_code`,
          `LHS`.`order_date` AS `order_date`,
          `RHS`.`order_item_id` AS `order_item_id`
   FROM
     (SELECT `LHS`.`customer_id` AS `customer_id`,
             `LHS`.`payment_method_code` AS `payment_method_code`,
             `LHS`.`customer_code` AS `customer_code`,
             `LHS`.`customer_name` AS `customer_name`,
             `LHS`.`customer_address` AS `customer_address`,
             `LHS`.`customer_phone` AS `customer_phone`,
             `LHS`.`customer_email` AS `customer_email`,
             `LHS`.`product_id` AS `product_id`,
             `LHS`.`product_type_code` AS `product_type_code`,
             `LHS`.`product_name` AS `product_name`,
             `LHS`.`product_price` AS `product_price`,
             `RHS`.`order_id` AS `order_id`,
             `RHS`.`order_status_code` AS `order_status_code`,
             `RHS`.`order_date` AS `order_date`
      FROM
        (SELECT `LHS`.`customer_id` AS `customer_id`,
                `LHS`.`payment_method_code` AS `payment_method_code`,
                `LHS`.`customer_code` AS `customer_code`,
                `LHS`.`customer_name` AS `customer_name`,
                `LHS`.`customer_address` AS `customer_address`,
                `LHS`.`customer_phone` AS `customer_phone`,
                `LHS`.`customer_email` AS `customer_email`,
                `RHS`.`product_id` AS `product_id`,
                `RHS`.`product_type_code` AS `product_type_code`,
                `RHS`.`product_name` AS `product_name`,
                `RHS`.`product_price` AS `product_price`
         FROM `df_customers` AS `LHS`
         CROSS JOIN `df_products` AS `RHS`) AS `LHS`
      INNER JOIN `df_customer_orders` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`)) AS `LHS`
   INNER JOIN `df_order_items` AS `RHS` ON (`LHS`.`product_id` = `RHS`.`product_id`
                                            AND `LHS`.`order_id` = `RHS`.`order_id`))
WHERE (`product_name` = 'keyboard')
ORDER BY customer_name;",2,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
spider/department_store/0020,"summarise(input0, 'meanproduct_price = mean(product_price, na.rm = T)', ""'product_type_code'""), cross_join(line0, line0, 'meanproduct_price < meanproduct_price.other')","SELECT product_type_code_other AS product_type_code
FROM
  (SELECT LHS.product_type_code AS product_type_code,
          LHS.meanproduct_price AS meanproduct_price,
          RHS.product_type_code AS product_type_code_other,
          RHS.meanproduct_price AS meanproduct_price_other
   FROM
     (SELECT product_type_code,
             AVG(product_price) AS meanproduct_price
      FROM df_products
      GROUP BY product_type_code) AS LHS
   CROSS JOIN
     (SELECT product_type_code,
             AVG(product_price) AS meanproduct_price
      FROM df_products
      GROUP BY product_type_code) AS RHS)
WHERE (meanproduct_price < meanproduct_price_other)
ORDER BY product_type_code;",2,9,4,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
spider/department_store/0007,"summarise(input0, 'n = n()', ""'order_id','product_id'""), filter(line0, 'n != 1L')","SELECT product_id
FROM
  (SELECT order_id,
          product_id,
          COUNT() AS n
   FROM df_order_items
   GROUP BY order_id,
            product_id)
WHERE (n != 1)
ORDER BY product_id;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/department_store/0034,"mutate(input0, 'maxcustomer_code = max(customer_code)'), mutate(line0, 'customer_code = min(customer_code)')","SELECT DISTINCT maxcustomer_code AS max_customer_code_,
                MIN(customer_code) OVER () AS min_customer_code_
FROM
  (SELECT customer_id,
          payment_method_code,
          customer_code,
          customer_name,
          customer_address,
          customer_phone,
          customer_email,
          MAX(customer_code) OVER () AS maxcustomer_code
   FROM df_customers)
ORDER BY max_customer_code_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/department_store/0024,"mutate(input0, 'maxdate_assigned_to = max(date_assigned_to)'), filter(line0, ""job_title_code != 'Clerical Staff' | maxdate_assigned_to > date_assigned_to"")","SELECT `staff_id`
FROM
  (SELECT `staff_id`,
          `department_id`,
          `date_assigned_from`,
          `job_title_code`,
          `date_assigned_to`,
          MAX(`date_assigned_to`) OVER () AS `maxdate_assigned_to`
   FROM `df_staff_department_assignments`)
WHERE (`job_title_code` != 'Clerical Staff'
       OR maxdate_assigned_to > date_assigned_to)
ORDER BY staff_id;",2,7,2,0,2,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/department_store/0021,"natural_join(input0, input1), limit(line0, 'desc(staff_gender)')","SELECT staff_id,
       staff_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.staff_id AS staff_id,
                LHS.staff_gender AS staff_gender,
                LHS.staff_name AS staff_name,
                RHS.department_id AS department_id,
                RHS.date_assigned_from AS date_assigned_from,
                RHS.job_title_code AS job_title_code,
                RHS.date_assigned_to AS date_assigned_to
         FROM df_staff AS LHS
         INNER JOIN df_staff_department_assignments AS RHS ON (LHS.staff_id = RHS.staff_id))
      ORDER BY staff_gender DESC)
   LIMIT 1);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/department_store/0023,"filter(input0, ""order_status_code == 'Cancelled'""), mutate(input0, 'minorder_date = min(order_date)'), cross_join(line1, line0, 'order_date == minorder_date | order_date >= order_date.other')","SELECT DISTINCT `customer_id`
FROM
  (SELECT `LHS`.`order_id` AS `order_id`,
          `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`order_status_code` AS `order_status_code`,
          `LHS`.`order_date` AS `order_date`,
          `LHS`.`minorder_date` AS `minorder_date`,
          `RHS`.`order_id` AS `order_id_other`,
          `RHS`.`customer_id` AS `customer_id_other`,
          `RHS`.`order_status_code` AS `order_status_code_other`,
          `RHS`.`order_date` AS `order_date_other`
   FROM
     (SELECT `order_id`,
             `customer_id`,
             `order_status_code`,
             `order_date`,
             MIN(`order_date`) OVER () AS `minorder_date`
      FROM `df_customer_orders`) AS `LHS`
   CROSS JOIN
     (SELECT *
      FROM `df_customer_orders`
      WHERE (`order_status_code` = 'Cancelled')) AS RHS)
WHERE (order_date = minorder_date
       OR order_date >= order_date_other)
ORDER BY customer_id;",3,13,4,1,4,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0
spider/department_store/0001,"limit(input0, 'desc(total_amount_purchased)')","SELECT product_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_product_suppliers
      ORDER BY total_amount_purchased DESC)
   LIMIT 3);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/department_store/0043,"summarise(input0, 'meanproduct_price = mean(product_price, na.rm = T)', ""'product_type_code'""), filter(line0, ""product_type_code == 'Clothes'"")","SELECT `meanproduct_price` AS `avg_product_price_`
FROM
  (SELECT `product_type_code`,
          AVG(`product_price`) AS `meanproduct_price`
   FROM `df_products`
   GROUP BY `product_type_code`)
WHERE (`product_type_code` = 'Clothes')
ORDER BY avg_product_price_;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/department_store/0014,"left_join(input0, input1), filter(line0, ""order_status_code == 'New' & order_status_code != 'Pending'"")","SELECT DISTINCT `customer_name`,
                `customer_address`
FROM
  (SELECT `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`payment_method_code` AS `payment_method_code`,
          `LHS`.`customer_code` AS `customer_code`,
          `LHS`.`customer_name` AS `customer_name`,
          `LHS`.`customer_address` AS `customer_address`,
          `LHS`.`customer_phone` AS `customer_phone`,
          `LHS`.`customer_email` AS `customer_email`,
          `RHS`.`order_id` AS `order_id`,
          `RHS`.`order_status_code` AS `order_status_code`,
          `RHS`.`order_date` AS `order_date`
   FROM `df_customers` AS `LHS`
   LEFT JOIN `df_customer_orders` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`))
WHERE (`order_status_code` = 'New'
       AND `order_status_code` != 'Pending')
ORDER BY customer_name;",2,7,2,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
spider/department_store/0009,"summarise(input0, 'meanproduct_price = mean(product_price, na.rm = T)', ""'product_price','product_type_code'""), summarise(line0, 'meanproduct_price = mean(product_price, na.rm = T)', ""'product_type_code'"")","SELECT product_type_code,
       meanproduct_price AS avg_product_price_
FROM
  (SELECT product_type_code,
          AVG(product_price) AS meanproduct_price
   FROM
     (SELECT product_price,
             product_type_code,
             AVG(product_price) AS meanproduct_price
      FROM df_products
      GROUP BY product_price,
               product_type_code)
   GROUP BY product_type_code)
ORDER BY product_type_code;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/department_store/0011,"natural_join(input0, input1), limit(line0, 'desc(date_assigned_to)')","SELECT staff_name,
       job_title_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.staff_id AS staff_id,
                LHS.staff_gender AS staff_gender,
                LHS.staff_name AS staff_name,
                RHS.department_id AS department_id,
                RHS.date_assigned_from AS date_assigned_from,
                RHS.job_title_code AS job_title_code,
                RHS.date_assigned_to AS date_assigned_to
         FROM df_staff AS LHS
         INNER JOIN df_staff_department_assignments AS RHS ON (LHS.staff_id = RHS.staff_id))
      ORDER BY date_assigned_to DESC)
   LIMIT 1);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/department_store/0010,"filter(input0, ""dept_store_chain_name == 'South'""), natural_join(input1, line0), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM
  (SELECT `LHS`.`dept_store_id` AS `dept_store_id`,
          `LHS`.`dept_store_chain_id` AS `dept_store_chain_id`,
          `LHS`.`store_name` AS `store_name`,
          `LHS`.`store_address` AS `store_address`,
          `LHS`.`store_phone` AS `store_phone`,
          `LHS`.`store_email` AS `store_email`,
          `RHS`.`dept_store_chain_name` AS `dept_store_chain_name`
   FROM `df_department_stores` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_department_store_chain`
      WHERE (`dept_store_chain_name` = 'South')) AS RHS ON (LHS.dept_store_chain_id = RHS.dept_store_chain_id))
ORDER BY count___;",3,10,3,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/department_store/0044,"filter(input0, ""product_type_code == 'Hardware'""), limit(line0, 'desc(product_id)')","SELECT `product_name`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM `df_products`
         WHERE (`product_type_code` = 'Hardware'))
      ORDER BY product_id DESC)
   LIMIT 1);",1,11,4,0,4,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/department_store/0040,"natural_join3(input0, input1, input2), summarise(line0, 'n_distinct = n_distinct(product_id)', ""'customer_code','customer_name'""), filter(line1, 'n_distinct >= 3L')","SELECT customer_name
FROM
  (SELECT customer_code,
          customer_name,
          COUNT(DISTINCT product_id) AS n_distinct
   FROM
     (SELECT LHS.customer_id AS customer_id,
             LHS.payment_method_code AS payment_method_code,
             LHS.customer_code AS customer_code,
             LHS.customer_name AS customer_name,
             LHS.customer_address AS customer_address,
             LHS.customer_phone AS customer_phone,
             LHS.customer_email AS customer_email,
             LHS.order_id AS order_id,
             LHS.order_status_code AS order_status_code,
             LHS.order_date AS order_date,
             RHS.order_item_id AS order_item_id,
             RHS.product_id AS product_id
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.payment_method_code AS payment_method_code,
                LHS.customer_code AS customer_code,
                LHS.customer_name AS customer_name,
                LHS.customer_address AS customer_address,
                LHS.customer_phone AS customer_phone,
                LHS.customer_email AS customer_email,
                RHS.order_id AS order_id,
                RHS.order_status_code AS order_status_code,
                RHS.order_date AS order_date
         FROM df_customers AS LHS
         INNER JOIN df_customer_orders AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
      INNER JOIN df_order_items AS RHS ON (LHS.order_id = RHS.order_id))
   GROUP BY customer_code,
            customer_name)
WHERE (n_distinct >= 3)
ORDER BY customer_name;",3,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/department_store/0028,"semi_join(input2, input0), natural_join(input1, line0)","SELECT supplier_name,
       supplier_phone
FROM
  (SELECT LHS.supplier_id AS supplier_id,
          LHS.supplier_name AS supplier_name,
          LHS.supplier_phone AS supplier_phone,
          RHS.address_id AS address_id,
          RHS.date_from AS date_from,
          RHS.date_to AS date_to
   FROM df_suppliers AS LHS
   INNER JOIN
     (SELECT *
      FROM df_supplier_addresses AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM df_addresses AS RHS
           WHERE (LHS.address_id = RHS.address_id) )) AS RHS ON (LHS.supplier_id = RHS.supplier_id))
ORDER BY supplier_name;",2,12,4,0,4,1,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0
spider/department_store/0031,"cross_join(input0, input0, 'product_price == product_price.other'), filter(line0, 'product_price <= 600 | product_price >= 900')","SELECT product_id,
       product_name
FROM
  (SELECT *
   FROM
     (SELECT LHS.product_id AS product_id,
             LHS.product_type_code AS product_type_code,
             LHS.product_name AS product_name,
             LHS.product_price AS product_price,
             RHS.product_id AS product_id_other,
             RHS.product_type_code AS product_type_code_other,
             RHS.product_name AS product_name_other,
             RHS.product_price AS product_price_other
      FROM df_products AS LHS
      CROSS JOIN df_products AS RHS)
   WHERE (product_price = product_price_other))
WHERE (product_price <= 600.0
       OR product_price >= 900.0)
ORDER BY product_id;",2,9,3,0,3,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
spider/music_4/0002,df_artist,"SELECT age
FROM df_artist
ORDER BY age;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_4/0017,"natural_join(input0, input1), limit(line0, 'famous_title')","SELECT famous_title
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.artist_id AS artist_id,
                LHS.artist AS artist,
                LHS.age AS age,
                LHS.famous_title AS famous_title,
                LHS.famous_release_date AS famous_release_date,
                RHS.volume_id AS volume_id,
                RHS.volume_issue AS volume_issue,
                RHS.issue_date AS issue_date,
                RHS.weeks_on_top AS weeks_on_top,
                RHS.song AS song
         FROM df_artist AS LHS
         INNER JOIN df_volume AS RHS ON (LHS.artist_id = RHS.artist_id))
      ORDER BY famous_title)
   LIMIT 2);",1,10,4,0,4,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/music_4/0008,"summarise(input0, 'minweeks_on_top = min(weeks_on_top)', ''), natural_join(input0, line0), mutate(line1, 'maxweeks_on_top = max(weeks_on_top)')","SELECT DISTINCT MAX(weeks_on_top) OVER () AS max_weeks_on_top_,
                                       minweeks_on_top AS min_weeks_on_top_
FROM
  (SELECT LHS.volume_id AS volume_id,
          LHS.volume_issue AS volume_issue,
          LHS.issue_date AS issue_date,
          LHS.weeks_on_top AS weeks_on_top,
          LHS.song AS song,
          LHS.artist_id AS artist_id,
          RHS.minweeks_on_top AS minweeks_on_top
   FROM df_volume AS LHS
   CROSS JOIN
     (SELECT MIN(weeks_on_top) AS minweeks_on_top
      FROM df_volume) AS RHS)
ORDER BY max_weeks_on_top_;",3,8,3,1,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0
spider/music_4/0003,"summarise(input0, 'meanage = mean(age, na.rm = T)', ""'age','artist'""), summarise(line0, 'meanage = mean(age, na.rm = T)', '')","SELECT meanage AS avg_age_
FROM
  (SELECT AVG(age) AS meanage
   FROM
     (SELECT age,
             artist,
             AVG(age) AS meanage
      FROM df_artist
      GROUP BY age,
               artist))
ORDER BY avg_age_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_4/0027,"limit(input0, 'weeks_on_top')","SELECT issue_date
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_volume
      ORDER BY weeks_on_top)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_4/0022,"summarise(input0, 'n = n()', ""'category','result'""), filter(line0, 'n != 1L'), summarise(line1, 'n = n()', ""'category','result'"")","SELECT DISTINCT category
FROM
  (SELECT category,
          RESULT,
          COUNT() AS n
   FROM
     (SELECT *
      FROM
        (SELECT category,
                RESULT,
                COUNT() AS n
         FROM df_music_festival
         GROUP BY category,
                  RESULT)
      WHERE (n != 1))
   GROUP BY category,
            RESULT)
ORDER BY category;",3,14,4,1,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0
spider/music_4/0013,"filter(input1, ""result == 'Nominated'""), semi_join(input1, line0), inner_join(input0, line1, ""'volume_id' = 'id'"")","SELECT `song`
FROM
  (SELECT `LHS`.`volume_id` AS `volume_id`,
          `LHS`.`volume_issue` AS `volume_issue`,
          `LHS`.`issue_date` AS `issue_date`,
          `LHS`.`weeks_on_top` AS `weeks_on_top`,
          `LHS`.`song` AS `song`,
          `LHS`.`artist_id` AS `artist_id`,
          `RHS`.`music_festival` AS `music_festival`,
          `RHS`.`date_of_ceremony` AS `date_of_ceremony`,
          `RHS`.`category` AS `category`,
          `RHS`.`volume` AS `volume`,
          `RHS`.`result` AS `result`
   FROM `df_volume` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_music_festival` AS `LHS`
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_music_festival`
              WHERE (`result` = 'Nominated')) AS RHS
           WHERE (LHS.id = RHS.id
                  AND LHS.music_festival = RHS.music_festival
                  AND LHS.date_of_ceremony = RHS.date_of_ceremony
                  AND LHS.category = RHS.category
                  AND LHS.volume = RHS.volume
                  AND LHS.result = RHS.result) )) AS RHS ON (LHS.volume_id = RHS.id))
ORDER BY song;",3,15,5,0,5,1,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0
spider/music_4/0006,df_music_festival,"SELECT date_of_ceremony,
       RESULT
FROM df_music_festival
ORDER BY date_of_ceremony;",0,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_4/0004,"filter(input0, ""artist == 'Triumfall'"")","SELECT `famous_title`
FROM `df_artist`
WHERE (`artist` = 'Triumfall')
ORDER BY famous_title;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/music_4/0012,"natural_join(input0, input1), limit(line0, 'weeks_on_top')","SELECT date_of_ceremony
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.volume_id AS volume_id,
                LHS.volume_issue AS volume_issue,
                LHS.issue_date AS issue_date,
                LHS.weeks_on_top AS weeks_on_top,
                LHS.song AS song,
                LHS.artist_id AS artist_id,
                RHS.id AS id,
                RHS.music_festival AS music_festival,
                RHS.date_of_ceremony AS date_of_ceremony,
                RHS.category AS category,
                RHS.volume AS volume,
                RHS.result AS RESULT
         FROM df_volume AS LHS
         CROSS JOIN df_music_festival AS RHS)
      ORDER BY weeks_on_top)
   LIMIT 2);",1,10,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/music_4/0026,"filter(input0, ""category == 'Best Song' & result == 'Awarded'""), filter(line0, ""result == 'Awarded'"")","SELECT `date_of_ceremony`
FROM
  (SELECT *
   FROM `df_music_festival`
   WHERE (`category` = 'Best Song'
          AND `result` = 'Awarded'))
WHERE (`result` = 'Awarded')
ORDER BY date_of_ceremony;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/music_4/0015,"filter(input0, 'age >= 32L'), semi_join(input1, line0)","SELECT song
FROM
  (SELECT *
   FROM df_volume AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_artist
           WHERE (age >= 32)) AS RHS
        WHERE (LHS.artist_id = RHS.artist_id) ))
ORDER BY song;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/music_4/0005,"intersect(input0, input0, 'famous_release_date')","SELECT famous_release_date
FROM
  (SELECT famous_release_date
   FROM df_artist INTERSECT SELECT famous_release_date
   FROM df_artist)
ORDER BY famous_release_date;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/music_4/0016,"filter(input0, 'age <= 25L'), natural_join(input1, line0), mutate(line1, 'meanage = mean(age, na.rm = T)')","SELECT weeks_on_top AS avg_t2_weeks_on_top_
FROM
  (SELECT LHS.volume_id AS volume_id,
          LHS.volume_issue AS volume_issue,
          LHS.issue_date AS issue_date,
          LHS.weeks_on_top AS weeks_on_top,
          LHS.song AS song,
          LHS.artist_id AS artist_id,
          RHS.artist AS artist,
          RHS.age AS age,
          RHS.famous_title AS famous_title,
          RHS.famous_release_date AS famous_release_date
   FROM df_volume AS LHS
   INNER JOIN
     (SELECT *
      FROM df_artist
      WHERE (age <= 25)) AS RHS ON (LHS.artist_id = RHS.artist_id))
ORDER BY avg_t2_weeks_on_top_;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/music_4/0018,df_artist,"SELECT famous_title,
       age
FROM df_artist
ORDER BY famous_title;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_4/0020,"summarise(input0, 'n = n()', ""'category','date_of_ceremony'"")","SELECT category,
       n AS count___
FROM
  (SELECT category,
          date_of_ceremony,
          COUNT() AS n
   FROM df_music_festival
   GROUP BY category,
            date_of_ceremony)
ORDER BY category;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_4/0019,"limit(input0, 'desc(artist)')","SELECT famous_release_date
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_artist
      ORDER BY artist DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_4/0007,"filter(input0, ""result == 'Awarded'"")","SELECT `category`
FROM `df_music_festival`
WHERE (`result` = 'Awarded')
ORDER BY category;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/music_4/0024,"anti_join(input0, input1, ""'artist_id'"")","SELECT famous_title
FROM
  (SELECT *
   FROM df_artist AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_volume AS RHS
        WHERE (LHS.artist_id = RHS.artist_id) ))
ORDER BY famous_title;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/music_4/0021,"summarise(input0, 'n = n()', ""'id','result'""), inner_join(line0, input0, ""'id' = 'id','n' = 'volume'"")","SELECT RESULT
FROM
  (SELECT LHS.id AS id,
          LHS.result AS RESULT,
          LHS.n AS n,
          RHS.music_festival AS music_festival,
          RHS.date_of_ceremony AS date_of_ceremony,
          RHS.category AS category,
          RHS.result AS result_other
   FROM
     (SELECT id,
             RESULT,
             COUNT() AS n
      FROM df_music_festival
      GROUP BY id,
               RESULT) AS LHS
   INNER JOIN df_music_festival AS RHS ON (LHS.id = RHS.id
                                           AND LHS.n = RHS.volume))
ORDER BY RESULT;",2,12,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/music_4/0023,"limit(input0, 'volume_issue')","SELECT song
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_volume
      ORDER BY volume_issue)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_4/0001,"summarise(input0, 'n = n()', ""'age','famous_title'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT age,
             famous_title,
             COUNT() AS n
      FROM df_artist
      GROUP BY age,
               famous_title))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_4/0014,"filter(input0, ""artist == 'Gorgoroth'""), natural_join(input1, line0)","SELECT `issue_date`
FROM
  (SELECT `LHS`.`volume_id` AS `volume_id`,
          `LHS`.`volume_issue` AS `volume_issue`,
          `LHS`.`issue_date` AS `issue_date`,
          `LHS`.`weeks_on_top` AS `weeks_on_top`,
          `LHS`.`song` AS `song`,
          `LHS`.`artist_id` AS `artist_id`,
          `RHS`.`artist` AS `artist`,
          `RHS`.`age` AS `age`,
          `RHS`.`famous_title` AS `famous_title`,
          `RHS`.`famous_release_date` AS `famous_release_date`
   FROM `df_volume` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_artist`
      WHERE (`artist` = 'Gorgoroth')) AS RHS ON (LHS.artist_id = RHS.artist_id))
ORDER BY issue_date;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/music_4/0009,"filter(input0, 'weeks_on_top > 1'), intersect(line0, input0, 'song')","SELECT song
FROM
  (SELECT song
   FROM df_volume
   WHERE (weeks_on_top > 1.0) INTERSECT
     SELECT song
     FROM df_volume)
ORDER BY song;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/music_4/0025,"filter(input1, 'weeks_on_top > 2'), natural_join3(input0, input1, line0)","SELECT DISTINCT famous_title
FROM
  (SELECT LHS.artist_id AS artist_id,
          LHS.artist AS artist,
          LHS.age AS age,
          LHS.famous_title AS famous_title,
          LHS.famous_release_date AS famous_release_date,
          LHS.volume_id AS volume_id,
          LHS.volume_issue AS volume_issue,
          LHS.issue_date AS issue_date,
          LHS.weeks_on_top AS weeks_on_top,
          LHS.song AS song
   FROM
     (SELECT LHS.artist_id AS artist_id,
             LHS.artist AS artist,
             LHS.age AS age,
             LHS.famous_title AS famous_title,
             LHS.famous_release_date AS famous_release_date,
             RHS.volume_id AS volume_id,
             RHS.volume_issue AS volume_issue,
             RHS.issue_date AS issue_date,
             RHS.weeks_on_top AS weeks_on_top,
             RHS.song AS song
      FROM df_artist AS LHS
      INNER JOIN df_volume AS RHS ON (LHS.artist_id = RHS.artist_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_volume
      WHERE (weeks_on_top > 2.0)) AS RHS ON (LHS.artist_id = RHS.artist_id
                                             AND LHS.volume_id = RHS.volume_id
                                             AND LHS.volume_issue = RHS.volume_issue
                                             AND LHS.issue_date = RHS.issue_date
                                             AND LHS.weeks_on_top = RHS.weeks_on_top
                                             AND LHS.song = RHS.song))
ORDER BY famous_title;",2,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/music_4/0011,"mutate(input0, 'n_distinct = n_distinct(artist_id)')","SELECT DISTINCT COUNT(DISTINCT artist_id) OVER () AS count_distinct_artist_id_
FROM df_volume
ORDER BY count_distinct_artist_id_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/music_4/0029,"filter(input0, 'age <= 23L'), semi_join(input1, line0)","SELECT issue_date
FROM
  (SELECT *
   FROM df_volume AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_artist
           WHERE (age <= 23)) AS RHS
        WHERE (LHS.artist_id = RHS.artist_id) ))
ORDER BY issue_date;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/music_4/0010,"intersect(input0, input0, 'song')","SELECT song
FROM
  (SELECT song
   FROM df_volume INTERSECT SELECT song
   FROM df_volume)
ORDER BY song;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/music_4/0028,"summarise(input0, 'n = n()', ""'date_of_ceremony','result'"")","SELECT RESULT,
       n AS count___
FROM
  (SELECT date_of_ceremony,
          RESULT,
          COUNT() AS n
   FROM df_music_festival
   GROUP BY date_of_ceremony,
            RESULT)
ORDER BY RESULT;",1,8,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/hr_1/0056,"left_join(input0, input1)","SELECT department_name,
       city,
       state_province
FROM
  (SELECT LHS.department_id AS department_id,
          LHS.department_name AS department_name,
          LHS.manager_id AS manager_id,
          LHS.location_id AS location_id,
          RHS.street_address AS street_address,
          RHS.postal_code AS postal_code,
          RHS.city AS city,
          RHS.state_province AS state_province,
          RHS.country_id AS country_id
   FROM df_departments AS LHS
   LEFT JOIN df_locations AS RHS ON (LHS.location_id = RHS.location_id))
ORDER BY department_name;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
spider/hr_1/0042,"filter(input0, ""department_name == 'Finance'""), inner_join(line0, input1, ""'department_id'"")","SELECT `first_name`,
       `job_id`
FROM
  (SELECT `LHS`.`department_id` AS `department_id`,
          `LHS`.`department_name` AS `department_name`,
          `LHS`.`manager_id` AS `manager_id`,
          `LHS`.`location_id` AS `location_id`,
          `RHS`.`employee_id` AS `employee_id`,
          `RHS`.`first_name` AS `first_name`,
          `RHS`.`last_name` AS `last_name`,
          `RHS`.`email` AS `email`,
          `RHS`.`phone_number` AS `phone_number`,
          `RHS`.`hire_date` AS `hire_date`,
          `RHS`.`job_id` AS `job_id`,
          `RHS`.`salary` AS `salary`,
          `RHS`.`commission_pct` AS `commission_pct`,
          `RHS`.`manager_id` AS `manager_id_other`
   FROM
     (SELECT *
      FROM `df_departments`
      WHERE (`department_name` = 'Finance')) AS LHS
   INNER JOIN df_employees AS RHS ON (LHS.department_id = RHS.department_id))
ORDER BY first_name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/hr_1/0037,"inner_join(input0, input0, ""'employee_id' = 'manager_id','commission_pct' = 'commission_pct'""), filter(line0, ""first_name == 'Payam'"")","SELECT `employee_id_other` AS `employee_id`,
       `salary_other` AS `salary`
FROM
  (SELECT `employee_id`,
          `first_name`,
          `last_name`,
          `email`,
          `phone_number`,
          `hire_date`,
          `job_id`,
          `salary`,
          `commission_pct`,
          `employee_id` AS `manager_id`,
          `department_id`,
          `employee_id_other`,
          `first_name_other`,
          `last_name_other`,
          `email_other`,
          `phone_number_other`,
          `hire_date_other`,
          `job_id_other`,
          `salary_other`,
          `department_id_other`
   FROM
     (SELECT `LHS`.`employee_id` AS `employee_id`,
             `LHS`.`first_name` AS `first_name`,
             `LHS`.`last_name` AS `last_name`,
             `LHS`.`email` AS `email`,
             `LHS`.`phone_number` AS `phone_number`,
             `LHS`.`hire_date` AS `hire_date`,
             `LHS`.`job_id` AS `job_id`,
             `LHS`.`salary` AS `salary`,
             `LHS`.`commission_pct` AS `commission_pct`,
             `LHS`.`manager_id` AS `manager_id`,
             `LHS`.`department_id` AS `department_id`,
             `RHS`.`employee_id` AS `employee_id_other`,
             `RHS`.`first_name` AS `first_name_other`,
             `RHS`.`last_name` AS `last_name_other`,
             `RHS`.`email` AS `email_other`,
             `RHS`.`phone_number` AS `phone_number_other`,
             `RHS`.`hire_date` AS `hire_date_other`,
             `RHS`.`job_id` AS `job_id_other`,
             `RHS`.`salary` AS `salary_other`,
             `RHS`.`department_id` AS `department_id_other`
      FROM `df_employees` AS `LHS`
      INNER JOIN `df_employees` AS `RHS` ON (`LHS`.`employee_id` = `RHS`.`manager_id`
                                             AND `LHS`.`commission_pct` = `RHS`.`commission_pct`)))
WHERE (`first_name` = 'Payam')
ORDER BY employee_id;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/hr_1/0036,"mutate(input0, 'meansalary = mean(salary, na.rm = T)'), filter(line0, 'meansalary < salary')","SELECT employee_id
FROM
  (SELECT employee_id,
          first_name,
          last_name,
          email,
          phone_number,
          hire_date,
          job_id,
          salary,
          commission_pct,
          manager_id,
          department_id,
          AVG(salary) OVER () AS meansalary
   FROM df_employees)
WHERE (meansalary < salary)
ORDER BY employee_id;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/hr_1/0052,"anti_join(input0, input1, ""'employee_id'""), natural_join(input0, line0)","SELECT employee_id,
       first_name,
       last_name,
       email,
       phone_number,
       hire_date,
       job_id,
       salary,
       commission_pct,
       manager_id,
       department_id
FROM
  (SELECT LHS.employee_id AS employee_id,
          LHS.first_name AS first_name,
          LHS.last_name AS last_name,
          LHS.email AS email,
          LHS.phone_number AS phone_number,
          LHS.hire_date AS hire_date,
          LHS.job_id AS job_id,
          LHS.salary AS salary,
          LHS.commission_pct AS commission_pct,
          LHS.manager_id AS manager_id,
          LHS.department_id AS department_id
   FROM df_employees AS LHS
   INNER JOIN
     (SELECT *
      FROM df_employees AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM df_job_history AS RHS
           WHERE (LHS.employee_id = RHS.employee_id) )) AS RHS ON (LHS.employee_id = RHS.employee_id
                                                                   AND LHS.first_name = RHS.first_name
                                                                   AND LHS.last_name = RHS.last_name
                                                                   AND LHS.email = RHS.email
                                                                   AND LHS.phone_number = RHS.phone_number
                                                                   AND LHS.hire_date = RHS.hire_date
                                                                   AND LHS.job_id = RHS.job_id
                                                                   AND LHS.salary = RHS.salary
                                                                   AND LHS.commission_pct = RHS.commission_pct
                                                                   AND LHS.manager_id = RHS.manager_id
                                                                   AND LHS.department_id = RHS.department_id))
ORDER BY employee_id;",2,13,4,0,4,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
spider/hr_1/0038,"inner_join(input0, input1, ""'department_id' = 'department_id','manager_id' = 'employee_id'"")","SELECT department_name
FROM
  (SELECT LHS.department_id AS department_id,
          LHS.department_name AS department_name,
          LHS.manager_id AS manager_id,
          LHS.location_id AS location_id,
          RHS.first_name AS first_name,
          RHS.last_name AS last_name,
          RHS.email AS email,
          RHS.phone_number AS phone_number,
          RHS.hire_date AS hire_date,
          RHS.job_id AS job_id,
          RHS.salary AS salary,
          RHS.commission_pct AS commission_pct,
          RHS.manager_id AS manager_id_other
   FROM df_departments AS LHS
   INNER JOIN df_employees AS RHS ON (LHS.department_id = RHS.department_id
                                      AND LHS.manager_id = RHS.employee_id))
ORDER BY department_name;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/hr_1/0003,"filter(input0, ""last_name == 'McEwen'"")","SELECT `first_name`,
       `department_id`
FROM `df_employees`
WHERE (`last_name` = 'McEwen')
ORDER BY first_name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/hr_1/0022,"summarise(input0, 'maxend_date = max(end_date)', ""'employee_id','end_date'""), summarise(line0, 'maxend_date = max(end_date)', ""'employee_id'"")","SELECT employee_id,
       maxend_date AS max_end_date_
FROM
  (SELECT employee_id,
          MAX(end_date) AS maxend_date
   FROM
     (SELECT employee_id,
             end_date,
             MAX(end_date) AS maxend_date
      FROM df_job_history
      GROUP BY employee_id,
               end_date)
   GROUP BY employee_id)
ORDER BY employee_id;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/hr_1/0030,"summarise(input1, 'n = n()', ""'department_id'""), natural_join(input0, line0)","SELECT department_name,
       n AS count___
FROM
  (SELECT LHS.department_id AS department_id,
          LHS.department_name AS department_name,
          LHS.manager_id AS manager_id,
          LHS.location_id AS location_id,
          RHS.n AS n
   FROM df_departments AS LHS
   INNER JOIN
     (SELECT department_id,
             COUNT() AS n
      FROM df_employees
      GROUP BY department_id) AS RHS ON (LHS.department_id = RHS.department_id))
ORDER BY department_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/hr_1/0026,"summarise(input0, 'n = n()', ""'country_id'""), semi_join(line0, input0)","SELECT country_id,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT country_id,
             COUNT() AS n
      FROM df_locations
      GROUP BY country_id) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_locations AS RHS
        WHERE (LHS.country_id = RHS.country_id) ))
ORDER BY country_id;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/hr_1/0015,"intersect(input0, input0, 'manager_id'), natural_join(input0, line0)","SELECT salary,
       manager_id
FROM
  (SELECT LHS.employee_id AS employee_id,
          LHS.first_name AS first_name,
          LHS.last_name AS last_name,
          LHS.email AS email,
          LHS.phone_number AS phone_number,
          LHS.hire_date AS hire_date,
          LHS.job_id AS job_id,
          LHS.salary AS salary,
          LHS.commission_pct AS commission_pct,
          LHS.manager_id AS manager_id,
          LHS.department_id AS department_id
   FROM df_employees AS LHS
   INNER JOIN
     (SELECT manager_id
      FROM df_employees INTERSECT SELECT manager_id
      FROM df_employees) AS RHS ON (LHS.manager_id = RHS.manager_id))
ORDER BY salary;",2,10,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
spider/hr_1/0005,"filter(input0, ""department_name == 'Marketing'""), filter(line0, ""department_name == 'Marketing'"")","SELECT `department_id`,
       `department_name`,
       `manager_id`,
       `location_id`
FROM
  (SELECT *
   FROM `df_departments`
   WHERE (`department_name` = 'Marketing'))
WHERE (`department_name` = 'Marketing')
ORDER BY department_id;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/hr_1/0016,"filter(input0, ""hire_date != parse_datetime('2002-06-21')""), semi_join(input0, line0)","SELECT `employee_id`,
       `first_name`,
       `last_name`,
       `email`,
       `phone_number`,
       `hire_date`,
       `job_id`,
       `salary`,
       `commission_pct`,
       `manager_id`,
       `department_id`
FROM
  (SELECT *
   FROM `df_employees` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_employees`
           WHERE (`hire_date` != parse_datetime('2002-06-21'))) AS RHS
        WHERE (LHS.employee_id = RHS.employee_id
               AND LHS.first_name = RHS.first_name
               AND LHS.last_name = RHS.last_name
               AND LHS.email = RHS.email
               AND LHS.phone_number = RHS.phone_number
               AND LHS.hire_date = RHS.hire_date
               AND LHS.job_id = RHS.job_id
               AND LHS.salary = RHS.salary
               AND LHS.commission_pct = RHS.commission_pct
               AND LHS.manager_id = RHS.manager_id
               AND LHS.department_id = RHS.department_id) ))
ORDER BY employee_id;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/hr_1/0059,"filter(input2, ""city != 'London'""), anti_join(input0, line0, ''), inner_join(line1, input1, ""'department_id' = 'department_id','manager_id' = 'employee_id'"")","SELECT `first_name`,
       `last_name`,
       `salary`
FROM
  (SELECT `LHS`.`department_id` AS `department_id`,
          `LHS`.`department_name` AS `department_name`,
          `LHS`.`manager_id` AS `manager_id`,
          `LHS`.`location_id` AS `location_id`,
          `RHS`.`first_name` AS `first_name`,
          `RHS`.`last_name` AS `last_name`,
          `RHS`.`email` AS `email`,
          `RHS`.`phone_number` AS `phone_number`,
          `RHS`.`hire_date` AS `hire_date`,
          `RHS`.`job_id` AS `job_id`,
          `RHS`.`salary` AS `salary`,
          `RHS`.`commission_pct` AS `commission_pct`,
          `RHS`.`manager_id` AS `manager_id_other`
   FROM
     (SELECT *
      FROM `df_departments` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_locations`
              WHERE (`city` != 'London')) AS RHS
           WHERE (LHS.location_id = RHS.location_id) )) AS LHS
   INNER JOIN df_employees AS RHS ON (LHS.department_id = RHS.department_id
                                      AND LHS.manager_id = RHS.employee_id))
ORDER BY first_name;",3,16,5,0,5,1,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0
spider/hr_1/0032,"natural_join(input0, input1), summarise(line0, 'meansalary = mean(salary, na.rm = T)', ""'job_id','job_title'"")","SELECT job_title,
       meansalary AS avg_salary_
FROM
  (SELECT job_id,
          job_title,
          AVG(salary) AS meansalary
   FROM
     (SELECT LHS.job_id AS job_id,
             LHS.job_title AS job_title,
             LHS.min_salary AS min_salary,
             LHS.max_salary AS max_salary,
             RHS.employee_id AS employee_id,
             RHS.first_name AS first_name,
             RHS.last_name AS last_name,
             RHS.email AS email,
             RHS.phone_number AS phone_number,
             RHS.hire_date AS hire_date,
             RHS.salary AS salary,
             RHS.commission_pct AS commission_pct,
             RHS.manager_id AS manager_id,
             RHS.department_id AS department_id
      FROM df_jobs AS LHS
      INNER JOIN df_employees AS RHS ON (LHS.job_id = RHS.job_id))
   GROUP BY job_id,
            job_title)
ORDER BY job_title;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/hr_1/0045,"filter(input0, ""first_name == 'Clara'""), inner_join(line0, input0, ""'department_id'"")","SELECT `first_name_other` AS `first_name`,
       `last_name_other` AS `last_name`,
       `hire_date_other` AS `hire_date`
FROM
  (SELECT `LHS`.`employee_id` AS `employee_id`,
          `LHS`.`first_name` AS `first_name`,
          `LHS`.`last_name` AS `last_name`,
          `LHS`.`email` AS `email`,
          `LHS`.`phone_number` AS `phone_number`,
          `LHS`.`hire_date` AS `hire_date`,
          `LHS`.`job_id` AS `job_id`,
          `LHS`.`salary` AS `salary`,
          `LHS`.`commission_pct` AS `commission_pct`,
          `LHS`.`manager_id` AS `manager_id`,
          `LHS`.`department_id` AS `department_id`,
          `RHS`.`employee_id` AS `employee_id_other`,
          `RHS`.`first_name` AS `first_name_other`,
          `RHS`.`last_name` AS `last_name_other`,
          `RHS`.`email` AS `email_other`,
          `RHS`.`phone_number` AS `phone_number_other`,
          `RHS`.`hire_date` AS `hire_date_other`,
          `RHS`.`job_id` AS `job_id_other`,
          `RHS`.`salary` AS `salary_other`,
          `RHS`.`commission_pct` AS `commission_pct_other`,
          `RHS`.`manager_id` AS `manager_id_other`
   FROM
     (SELECT *
      FROM `df_employees`
      WHERE (`first_name` = 'Clara')) AS LHS
   INNER JOIN df_employees AS RHS ON (LHS.department_id = RHS.department_id))
ORDER BY first_name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/hr_1/0018,"filter(input0, ""hire_date > parse_datetime('1987-09-07')"")","SELECT `employee_id`,
       `first_name`,
       `last_name`,
       `email`,
       `phone_number`,
       `hire_date`,
       `job_id`,
       `salary`,
       `commission_pct`,
       `manager_id`,
       `department_id`
FROM `df_employees`
WHERE (`hire_date` > parse_datetime('1987-09-07'))
ORDER BY employee_id;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/hr_1/0041,"filter(input1, 'department_id == 80'), left_join(line0, input0)","SELECT employee_id,
       job_title
FROM
  (SELECT LHS.employee_id AS employee_id,
          LHS.first_name AS first_name,
          LHS.last_name AS last_name,
          LHS.email AS email,
          LHS.phone_number AS phone_number,
          LHS.hire_date AS hire_date,
          LHS.job_id AS job_id,
          LHS.salary AS salary,
          LHS.commission_pct AS commission_pct,
          LHS.manager_id AS manager_id,
          LHS.department_id AS department_id,
          RHS.job_title AS job_title,
          RHS.min_salary AS min_salary,
          RHS.max_salary AS max_salary
   FROM
     (SELECT *
      FROM df_employees
      WHERE (department_id = 80.0)) AS LHS
   LEFT JOIN df_jobs AS RHS ON (LHS.job_id = RHS.job_id))
ORDER BY employee_id;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
spider/hr_1/0019,"filter(input0, 'min_salary > 9000'), semi_join(input0, line0)","SELECT job_title
FROM
  (SELECT *
   FROM df_jobs AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_jobs
           WHERE (min_salary > 9000.0)) AS RHS
        WHERE (LHS.job_id = RHS.job_id
               AND LHS.job_title = RHS.job_title
               AND LHS.min_salary = RHS.min_salary
               AND LHS.max_salary = RHS.max_salary) ))
ORDER BY job_title;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/hr_1/0034,"summarise(input0, 'salary = min(salary)', ""'commission_pct','department_id'""), summarise(line0, 'salary = min(salary)', ""'department_id'"")","SELECT salary AS min_salary_,
       department_id
FROM
  (SELECT department_id,
          MIN(salary) AS salary
   FROM
     (SELECT commission_pct,
             department_id,
             MIN(salary) AS salary
      FROM df_employees
      GROUP BY commission_pct,
               department_id)
   GROUP BY department_id)
ORDER BY min_salary_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/hr_1/0024,"summarise(input0, 'n_distinct = n_distinct(employee_id)', ""'department_id'""), filter(line0, 'n_distinct > 4L')","SELECT department_id
FROM
  (SELECT department_id,
          COUNT(DISTINCT employee_id) AS n_distinct
   FROM df_employees
   GROUP BY department_id)
WHERE (n_distinct > 4)
ORDER BY department_id;",2,6,2,1,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/hr_1/0023,"summarise(input0, 'n = n()', ""'department_id'""), filter(line0, 'n >= 10L'), mutate(line1, 'n = n()')","SELECT department_id
FROM
  (SELECT department_id,
          COUNT() AS n
   FROM df_employees
   GROUP BY department_id)
WHERE (n >= 10)
ORDER BY department_id;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/hr_1/0001,"inner_join(input0, input1, ""'department_id'"")","SELECT first_name,
       department_name
FROM
  (SELECT LHS.department_id AS department_id,
          LHS.department_name AS department_name,
          LHS.manager_id AS manager_id,
          LHS.location_id AS location_id,
          RHS.employee_id AS employee_id,
          RHS.first_name AS first_name,
          RHS.last_name AS last_name,
          RHS.email AS email,
          RHS.phone_number AS phone_number,
          RHS.hire_date AS hire_date,
          RHS.job_id AS job_id,
          RHS.salary AS salary,
          RHS.commission_pct AS commission_pct,
          RHS.manager_id AS manager_id_other
   FROM df_departments AS LHS
   INNER JOIN df_employees AS RHS ON (LHS.department_id = RHS.department_id))
ORDER BY first_name;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/hr_1/0043,"filter(input0, 'salary <= 2500'), mutate(line0, 'minsalary = min(salary)')","SELECT employee_id,
       first_name,
       last_name,
       email,
       phone_number,
       hire_date,
       job_id,
       salary,
       commission_pct,
       manager_id,
       department_id
FROM df_employees
WHERE (salary <= 2500.0)
ORDER BY employee_id;",2,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/hr_1/0009,"filter(input0, 'salary < 8000 | salary > 12000'), anti_join(input0, line0, ""'email','employee_id'"")","SELECT phone_number
FROM
  (SELECT *
   FROM df_employees AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_employees
           WHERE (salary < 8000.0
                  OR salary > 12000.0)) AS RHS
        WHERE (LHS.email = RHS.email
               AND LHS.employee_id = RHS.employee_id) ))
ORDER BY phone_number;",2,14,4,0,4,0,3,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/hr_1/0025,"summarise(input0, 'meansalary = mean(salary, na.rm = T)', ""'department_id'""), semi_join(line0, input0)","SELECT department_id,
       meansalary AS avg_salary_
FROM
  (SELECT *
   FROM
     (SELECT department_id,
             AVG(salary) AS meansalary
      FROM df_employees
      GROUP BY department_id) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_employees AS RHS
        WHERE (LHS.department_id = RHS.department_id) ))
ORDER BY department_id;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/hr_1/0029,"inner_join(input2, input1, ""'department_id'""), natural_join4(input0, input2, input3, line0)","SELECT employee_id,
       country_name
FROM
  (SELECT LHS.country_id AS country_id,
          LHS.country_name AS country_name,
          LHS.region_id AS region_id,
          LHS.employee_id AS employee_id,
          LHS.first_name AS first_name,
          LHS.last_name AS last_name,
          LHS.email AS email,
          LHS.phone_number AS phone_number,
          LHS.hire_date AS hire_date,
          LHS.job_id AS job_id,
          LHS.salary AS salary,
          LHS.commission_pct AS commission_pct,
          LHS.manager_id AS manager_id,
          LHS.department_id AS department_id,
          LHS.location_id AS location_id,
          LHS.street_address AS street_address,
          LHS.postal_code AS postal_code,
          LHS.city AS city,
          LHS.state_province AS state_province,
          RHS.department_name AS department_name,
          RHS.manager_id_other AS manager_id_other
   FROM
     (SELECT LHS.country_id AS country_id,
             LHS.country_name AS country_name,
             LHS.region_id AS region_id,
             LHS.employee_id AS employee_id,
             LHS.first_name AS first_name,
             LHS.last_name AS last_name,
             LHS.email AS email,
             LHS.phone_number AS phone_number,
             LHS.hire_date AS hire_date,
             LHS.job_id AS job_id,
             LHS.salary AS salary,
             LHS.commission_pct AS commission_pct,
             LHS.manager_id AS manager_id,
             LHS.department_id AS department_id,
             RHS.location_id AS location_id,
             RHS.street_address AS street_address,
             RHS.postal_code AS postal_code,
             RHS.city AS city,
             RHS.state_province AS state_province
      FROM
        (SELECT LHS.country_id AS country_id,
                LHS.country_name AS country_name,
                LHS.region_id AS region_id,
                RHS.employee_id AS employee_id,
                RHS.first_name AS first_name,
                RHS.last_name AS last_name,
                RHS.email AS email,
                RHS.phone_number AS phone_number,
                RHS.hire_date AS hire_date,
                RHS.job_id AS job_id,
                RHS.salary AS salary,
                RHS.commission_pct AS commission_pct,
                RHS.manager_id AS manager_id,
                RHS.department_id AS department_id
         FROM df_countries AS LHS
         CROSS JOIN df_employees AS RHS) AS LHS
      INNER JOIN df_locations AS RHS ON (LHS.country_id = RHS.country_id)) AS LHS
   INNER JOIN
     (SELECT LHS.employee_id AS employee_id,
             LHS.first_name AS first_name,
             LHS.last_name AS last_name,
             LHS.email AS email,
             LHS.phone_number AS phone_number,
             LHS.hire_date AS hire_date,
             LHS.job_id AS job_id,
             LHS.salary AS salary,
             LHS.commission_pct AS commission_pct,
             LHS.manager_id AS manager_id,
             LHS.department_id AS department_id,
             RHS.department_name AS department_name,
             RHS.manager_id AS manager_id_other,
             RHS.location_id AS location_id
      FROM df_employees AS LHS
      INNER JOIN df_departments AS RHS ON (LHS.department_id = RHS.department_id)) AS RHS ON (LHS.employee_id = RHS.employee_id
                                                                                              AND LHS.first_name = RHS.first_name
                                                                                              AND LHS.last_name = RHS.last_name
                                                                                              AND LHS.email = RHS.email
                                                                                              AND LHS.phone_number = RHS.phone_number
                                                                                              AND LHS.hire_date = RHS.hire_date
                                                                                              AND LHS.job_id = RHS.job_id
                                                                                              AND LHS.salary = RHS.salary
                                                                                              AND LHS.commission_pct = RHS.commission_pct
                                                                                              AND LHS.manager_id = RHS.manager_id
                                                                                              AND LHS.department_id = RHS.department_id
                                                                                              AND LHS.location_id = RHS.location_id))
ORDER BY employee_id;",2,13,5,0,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0
spider/hr_1/0010,"filter(input0, 'commission_pct <= 8000 | department_id <= 12000'), filter(line0, 'department_id != 40 & department_id != salary'), natural_join3(input0, line0, line1)","SELECT employee_id,
       first_name,
       last_name,
       email,
       phone_number,
       hire_date,
       job_id,
       salary,
       commission_pct,
       manager_id,
       department_id
FROM
  (SELECT LHS.employee_id AS employee_id,
          LHS.first_name AS first_name,
          LHS.last_name AS last_name,
          LHS.email AS email,
          LHS.phone_number AS phone_number,
          LHS.hire_date AS hire_date,
          LHS.job_id AS job_id,
          LHS.salary AS salary,
          LHS.commission_pct AS commission_pct,
          LHS.manager_id AS manager_id,
          LHS.department_id AS department_id
   FROM
     (SELECT LHS.employee_id AS employee_id,
             LHS.first_name AS first_name,
             LHS.last_name AS last_name,
             LHS.email AS email,
             LHS.phone_number AS phone_number,
             LHS.hire_date AS hire_date,
             LHS.job_id AS job_id,
             LHS.salary AS salary,
             LHS.commission_pct AS commission_pct,
             LHS.manager_id AS manager_id,
             LHS.department_id AS department_id
      FROM df_employees AS LHS
      INNER JOIN
        (SELECT *
         FROM df_employees
         WHERE (commission_pct <= 8000.0
                OR department_id <= 12000.0)) AS RHS ON (LHS.employee_id = RHS.employee_id
                                                         AND LHS.first_name = RHS.first_name
                                                         AND LHS.last_name = RHS.last_name
                                                         AND LHS.email = RHS.email
                                                         AND LHS.phone_number = RHS.phone_number
                                                         AND LHS.hire_date = RHS.hire_date
                                                         AND LHS.job_id = RHS.job_id
                                                         AND LHS.salary = RHS.salary
                                                         AND LHS.commission_pct = RHS.commission_pct
                                                         AND LHS.manager_id = RHS.manager_id
                                                         AND LHS.department_id = RHS.department_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT *
         FROM df_employees
         WHERE (commission_pct <= 8000.0
                OR department_id <= 12000.0))
      WHERE (department_id != 40.0
             AND department_id != salary)) AS RHS ON (LHS.employee_id = RHS.employee_id
                                                      AND LHS.first_name = RHS.first_name
                                                      AND LHS.last_name = RHS.last_name
                                                      AND LHS.email = RHS.email
                                                      AND LHS.phone_number = RHS.phone_number
                                                      AND LHS.hire_date = RHS.hire_date
                                                      AND LHS.job_id = RHS.job_id
                                                      AND LHS.salary = RHS.salary
                                                      AND LHS.commission_pct = RHS.commission_pct
                                                      AND LHS.manager_id = RHS.manager_id
                                                      AND LHS.department_id = RHS.department_id))
ORDER BY employee_id;",3,19,6,0,6,2,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0
spider/hr_1/0040,"summarise(input0, 'meansalary = mean(salary, na.rm = T)', ""'department_id','job_id'""), natural_join(input0, line0), filter(line1, 'meansalary >= 8000 & meansalary <= salary')","SELECT DISTINCT job_id
FROM
  (SELECT LHS.employee_id AS employee_id,
          LHS.first_name AS first_name,
          LHS.last_name AS last_name,
          LHS.email AS email,
          LHS.phone_number AS phone_number,
          LHS.hire_date AS hire_date,
          LHS.job_id AS job_id,
          LHS.salary AS salary,
          LHS.commission_pct AS commission_pct,
          LHS.manager_id AS manager_id,
          LHS.department_id AS department_id,
          RHS.meansalary AS meansalary
   FROM df_employees AS LHS
   INNER JOIN
     (SELECT department_id,
             job_id,
             AVG(salary) AS meansalary
      FROM df_employees
      GROUP BY department_id,
               job_id) AS RHS ON (LHS.job_id = RHS.job_id
                                  AND LHS.department_id = RHS.department_id))
WHERE (meansalary >= 8000.0
       AND meansalary <= salary)
ORDER BY job_id;",3,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/hr_1/0028,"summarise(input0, 'n = n()', ""'employee_id'""), filter(line0, 'n >= 2L'), mutate(line1, 'n = n()')","SELECT employee_id
FROM
  (SELECT employee_id,
          COUNT() AS n
   FROM df_job_history
   GROUP BY employee_id)
WHERE (n >= 2)
ORDER BY employee_id;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/hr_1/0049,"filter(input0, ""job_id == 'MK_MAN'""), mutate(line0, 'salary = min(salary)'), cross_join(line1, input0, 'job_id != job_id.other & salary > salary.other')","SELECT `employee_id_other` AS `employee_id`,
       `job_id_other` AS `job_id`
FROM
  (SELECT `LHS`.`employee_id` AS `employee_id`,
          `LHS`.`first_name` AS `first_name`,
          `LHS`.`last_name` AS `last_name`,
          `LHS`.`email` AS `email`,
          `LHS`.`phone_number` AS `phone_number`,
          `LHS`.`hire_date` AS `hire_date`,
          `LHS`.`job_id` AS `job_id`,
          `LHS`.`salary` AS `salary`,
          `LHS`.`commission_pct` AS `commission_pct`,
          `LHS`.`manager_id` AS `manager_id`,
          `LHS`.`department_id` AS `department_id`,
          `RHS`.`employee_id` AS `employee_id_other`,
          `RHS`.`first_name` AS `first_name_other`,
          `RHS`.`last_name` AS `last_name_other`,
          `RHS`.`email` AS `email_other`,
          `RHS`.`phone_number` AS `phone_number_other`,
          `RHS`.`hire_date` AS `hire_date_other`,
          `RHS`.`job_id` AS `job_id_other`,
          `RHS`.`salary` AS `salary_other`,
          `RHS`.`commission_pct` AS `commission_pct_other`,
          `RHS`.`manager_id` AS `manager_id_other`,
          `RHS`.`department_id` AS `department_id_other`
   FROM
     (SELECT `employee_id`,
             `first_name`,
             `last_name`,
             `email`,
             `phone_number`,
             `hire_date`,
             `job_id`,
             MIN(`salary`) OVER () AS `salary`,
                                `commission_pct`,
                                `manager_id`,
                                `department_id`
      FROM `df_employees`
      WHERE (`job_id` = 'MK_MAN')) AS LHS
   CROSS JOIN df_employees AS RHS)
WHERE (job_id != job_id_other
       AND salary > salary_other)
ORDER BY employee_id;",3,9,3,0,3,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0
spider/hr_1/0058,"summarise(input1, 'n = n()', ""'department_id'""), natural_join(input0, line0)","SELECT department_name,
       n AS count___
FROM
  (SELECT LHS.department_id AS department_id,
          LHS.department_name AS department_name,
          LHS.manager_id AS manager_id,
          LHS.location_id AS location_id,
          RHS.n AS n
   FROM df_departments AS LHS
   INNER JOIN
     (SELECT department_id,
             COUNT() AS n
      FROM df_employees
      GROUP BY department_id) AS RHS ON (LHS.department_id = RHS.department_id))
ORDER BY department_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/products_gen_characteristics/0042,"summarise(input2, 'n = n()', ""'product_characteristic_value','product_id'""), filter(line0, 'n == 2L'), natural_join4(input0, input1, input2, line1)","SELECT DISTINCT characteristic_name
FROM
  (SELECT LHS.characteristic_id AS characteristic_id,
          LHS.characteristic_type_code AS characteristic_type_code,
          LHS.characteristic_data_type AS characteristic_data_type,
          LHS.characteristic_name AS characteristic_name,
          LHS.other_characteristic_details AS other_characteristic_details,
          LHS.product_id AS product_id,
          LHS.color_code AS color_code,
          LHS.product_category_code AS product_category_code,
          LHS.product_name AS product_name,
          LHS.typical_buying_price AS typical_buying_price,
          LHS.typical_selling_price AS typical_selling_price,
          LHS.product_description AS product_description,
          LHS.other_product_details AS other_product_details,
          LHS.product_characteristic_value AS product_characteristic_value,
          RHS.n AS n
   FROM
     (SELECT LHS.characteristic_id AS characteristic_id,
             LHS.characteristic_type_code AS characteristic_type_code,
             LHS.characteristic_data_type AS characteristic_data_type,
             LHS.characteristic_name AS characteristic_name,
             LHS.other_characteristic_details AS other_characteristic_details,
             LHS.product_id AS product_id,
             LHS.color_code AS color_code,
             LHS.product_category_code AS product_category_code,
             LHS.product_name AS product_name,
             LHS.typical_buying_price AS typical_buying_price,
             LHS.typical_selling_price AS typical_selling_price,
             LHS.product_description AS product_description,
             LHS.other_product_details AS other_product_details,
             RHS.product_characteristic_value AS product_characteristic_value
      FROM
        (SELECT LHS.characteristic_id AS characteristic_id,
                LHS.characteristic_type_code AS characteristic_type_code,
                LHS.characteristic_data_type AS characteristic_data_type,
                LHS.characteristic_name AS characteristic_name,
                LHS.other_characteristic_details AS other_characteristic_details,
                RHS.product_id AS product_id,
                RHS.color_code AS color_code,
                RHS.product_category_code AS product_category_code,
                RHS.product_name AS product_name,
                RHS.typical_buying_price AS typical_buying_price,
                RHS.typical_selling_price AS typical_selling_price,
                RHS.product_description AS product_description,
                RHS.other_product_details AS other_product_details
         FROM df_characteristics AS LHS
         CROSS JOIN df_products AS RHS) AS LHS
      INNER JOIN df_product_characteristics AS RHS ON (LHS.characteristic_id = RHS.characteristic_id
                                                       AND LHS.product_id = RHS.product_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT product_characteristic_value,
                product_id,
                COUNT() AS n
         FROM df_product_characteristics
         GROUP BY product_characteristic_value,
                  product_id)
      WHERE (n = 2)) AS RHS ON (LHS.product_id = RHS.product_id
                                AND LHS.product_characteristic_value = RHS.product_characteristic_value))
ORDER BY characteristic_name;",3,16,6,1,6,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
spider/products_gen_characteristics/0033,"filter(input0, ""product_category_code == 'Spices'"")","SELECT `product_category_code` AS `product_category_description`
FROM `df_ref_product_categories`
WHERE (`product_category_code` = 'Spices')
ORDER BY product_category_description;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/products_gen_characteristics/0037,"filter(input0, ""color_description == 'white'""), natural_join3(input1, input2, line0)","SELECT `product_name`
FROM
  (SELECT `LHS`.`product_category_code` AS `product_category_code`,
          `LHS`.`product_category_description` AS `product_category_description`,
          `LHS`.`unit_of_measure` AS `unit_of_measure`,
          `LHS`.`product_id` AS `product_id`,
          `LHS`.`color_code` AS `color_code`,
          `LHS`.`product_name` AS `product_name`,
          `LHS`.`typical_buying_price` AS `typical_buying_price`,
          `LHS`.`typical_selling_price` AS `typical_selling_price`,
          `LHS`.`product_description` AS `product_description`,
          `LHS`.`other_product_details` AS `other_product_details`,
          `RHS`.`color_description` AS `color_description`
   FROM
     (SELECT `LHS`.`product_category_code` AS `product_category_code`,
             `LHS`.`product_category_description` AS `product_category_description`,
             `LHS`.`unit_of_measure` AS `unit_of_measure`,
             `RHS`.`product_id` AS `product_id`,
             `RHS`.`color_code` AS `color_code`,
             `RHS`.`product_name` AS `product_name`,
             `RHS`.`typical_buying_price` AS `typical_buying_price`,
             `RHS`.`typical_selling_price` AS `typical_selling_price`,
             `RHS`.`product_description` AS `product_description`,
             `RHS`.`other_product_details` AS `other_product_details`
      FROM `df_ref_product_categories` AS `LHS`
      INNER JOIN `df_products` AS `RHS` ON (`LHS`.`product_category_code` = `RHS`.`product_category_code`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_ref_colors`
      WHERE (`color_description` = 'white')) AS RHS ON (LHS.color_code = RHS.color_code))
ORDER BY product_name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/products_gen_characteristics/0002,"inner_join(input0, input0, ""'color_description'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT LHS.color_code AS color_code,
             LHS.color_description AS color_description,
             RHS.color_code AS color_code_other
      FROM df_ref_colors AS LHS
      INNER JOIN df_ref_colors AS RHS ON (LHS.color_description = RHS.color_description)))
ORDER BY count___;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/products_gen_characteristics/0036,"filter(input1, ""product_name == 'chervil'""), semi_join(input0, line0)","SELECT `unit_of_measure`,
       `product_category_code`
FROM
  (SELECT *
   FROM `df_ref_product_categories` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_products`
           WHERE (`product_name` = 'chervil')) AS RHS
        WHERE (LHS.product_category_code = RHS.product_category_code) ))
ORDER BY unit_of_measure;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/products_gen_characteristics/0017,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'color_description','product_id'""), filter(line1, 'n >= 2L')","SELECT product_id,
       color_description
FROM
  (SELECT color_description,
          product_id,
          COUNT() AS n
   FROM
     (SELECT LHS.color_code AS color_code,
             LHS.color_description AS color_description,
             LHS.product_id AS product_id,
             LHS.product_category_code AS product_category_code,
             LHS.product_name AS product_name,
             LHS.typical_buying_price AS typical_buying_price,
             LHS.typical_selling_price AS typical_selling_price,
             LHS.product_description AS product_description,
             LHS.other_product_details AS other_product_details,
             RHS.characteristic_id AS characteristic_id,
             RHS.product_characteristic_value AS product_characteristic_value
      FROM
        (SELECT LHS.color_code AS color_code,
                LHS.color_description AS color_description,
                RHS.product_id AS product_id,
                RHS.product_category_code AS product_category_code,
                RHS.product_name AS product_name,
                RHS.typical_buying_price AS typical_buying_price,
                RHS.typical_selling_price AS typical_selling_price,
                RHS.product_description AS product_description,
                RHS.other_product_details AS other_product_details
         FROM df_ref_colors AS LHS
         INNER JOIN df_products AS RHS ON (LHS.color_code = RHS.color_code)) AS LHS
      INNER JOIN df_product_characteristics AS RHS ON (LHS.product_id = RHS.product_id))
   GROUP BY color_description,
            product_id)
WHERE (n >= 2)
ORDER BY product_id;",3,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/products_gen_characteristics/0008,"filter(input1, ""product_category_code == 'Herbs'""), natural_join(input0, line0)","SELECT `product_name`,
       `color_description`,
       `product_description`
FROM
  (SELECT `LHS`.`color_code` AS `color_code`,
          `LHS`.`color_description` AS `color_description`,
          `RHS`.`product_id` AS `product_id`,
          `RHS`.`product_category_code` AS `product_category_code`,
          `RHS`.`product_name` AS `product_name`,
          `RHS`.`typical_buying_price` AS `typical_buying_price`,
          `RHS`.`typical_selling_price` AS `typical_selling_price`,
          `RHS`.`product_description` AS `product_description`,
          `RHS`.`other_product_details` AS `other_product_details`
   FROM `df_ref_colors` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_products`
      WHERE (`product_category_code` = 'Herbs')) AS RHS ON (LHS.color_code = RHS.color_code))
ORDER BY product_name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/products_gen_characteristics/0038,"summarise(input0, 'n = n()', ""'color_code','color_description'""), inner_join(line0, input1, ""'n' = 'product_id','color_code' = 'color_code'"")","SELECT color_description
FROM
  (SELECT LHS.color_code AS color_code,
          LHS.color_description AS color_description,
          LHS.n AS n,
          RHS.product_category_code AS product_category_code,
          RHS.product_name AS product_name,
          RHS.typical_buying_price AS typical_buying_price,
          RHS.typical_selling_price AS typical_selling_price,
          RHS.product_description AS product_description,
          RHS.other_product_details AS other_product_details
   FROM
     (SELECT color_code,
             color_description,
             COUNT() AS n
      FROM df_ref_colors
      GROUP BY color_code,
               color_description) AS LHS
   INNER JOIN df_products AS RHS ON (LHS.n = RHS.product_id
                                     AND LHS.color_code = RHS.color_code))
ORDER BY color_description;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/products_gen_characteristics/0003,"summarise(input0, 'n = n()', ""'characteristic_data_type'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT characteristic_data_type,
          COUNT() AS n
   FROM df_characteristics
   GROUP BY characteristic_data_type)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/products_gen_characteristics/0027,"natural_join(input0, input1), filter(line0, ""color_description == 'red' & characteristic_name == 'fast'""), natural_join3(input2, input3, line1)","SELECT `product_name`
FROM
  (SELECT `LHS`.`product_id` AS `product_id`,
          `LHS`.`color_code` AS `color_code`,
          `LHS`.`product_category_code` AS `product_category_code`,
          `LHS`.`product_name` AS `product_name`,
          `LHS`.`typical_buying_price` AS `typical_buying_price`,
          `LHS`.`typical_selling_price` AS `typical_selling_price`,
          `LHS`.`product_description` AS `product_description`,
          `LHS`.`other_product_details` AS `other_product_details`,
          `LHS`.`characteristic_id` AS `characteristic_id`,
          `LHS`.`product_characteristic_value` AS `product_characteristic_value`,
          `RHS`.`color_description` AS `color_description`,
          `RHS`.`characteristic_type_code` AS `characteristic_type_code`,
          `RHS`.`characteristic_data_type` AS `characteristic_data_type`,
          `RHS`.`characteristic_name` AS `characteristic_name`,
          `RHS`.`other_characteristic_details` AS `other_characteristic_details`
   FROM
     (SELECT `LHS`.`product_id` AS `product_id`,
             `LHS`.`color_code` AS `color_code`,
             `LHS`.`product_category_code` AS `product_category_code`,
             `LHS`.`product_name` AS `product_name`,
             `LHS`.`typical_buying_price` AS `typical_buying_price`,
             `LHS`.`typical_selling_price` AS `typical_selling_price`,
             `LHS`.`product_description` AS `product_description`,
             `LHS`.`other_product_details` AS `other_product_details`,
             `RHS`.`characteristic_id` AS `characteristic_id`,
             `RHS`.`product_characteristic_value` AS `product_characteristic_value`
      FROM `df_products` AS `LHS`
      INNER JOIN `df_product_characteristics` AS `RHS` ON (`LHS`.`product_id` = `RHS`.`product_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM
        (SELECT `LHS`.`color_code` AS `color_code`,
                `LHS`.`color_description` AS `color_description`,
                `RHS`.`characteristic_id` AS `characteristic_id`,
                `RHS`.`characteristic_type_code` AS `characteristic_type_code`,
                `RHS`.`characteristic_data_type` AS `characteristic_data_type`,
                `RHS`.`characteristic_name` AS `characteristic_name`,
                `RHS`.`other_characteristic_details` AS `other_characteristic_details`
         FROM `df_ref_colors` AS `LHS`
         CROSS JOIN `df_characteristics` AS `RHS`)
      WHERE (`color_description` = 'red'
             AND `characteristic_name` = 'fast')) AS RHS ON (LHS.color_code = RHS.color_code
                                                             AND LHS.characteristic_id = RHS.characteristic_id))
ORDER BY product_name;",3,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0
spider/products_gen_characteristics/0022,"filter(input1, ""product_name == 'sesame'""), natural_join3(input0, input2, line0)","SELECT `characteristic_name`
FROM
  (SELECT `LHS`.`characteristic_id` AS `characteristic_id`,
          `LHS`.`characteristic_type_code` AS `characteristic_type_code`,
          `LHS`.`characteristic_data_type` AS `characteristic_data_type`,
          `LHS`.`characteristic_name` AS `characteristic_name`,
          `LHS`.`other_characteristic_details` AS `other_characteristic_details`,
          `LHS`.`product_id` AS `product_id`,
          `LHS`.`product_characteristic_value` AS `product_characteristic_value`,
          `RHS`.`color_code` AS `color_code`,
          `RHS`.`product_category_code` AS `product_category_code`,
          `RHS`.`product_name` AS `product_name`,
          `RHS`.`typical_buying_price` AS `typical_buying_price`,
          `RHS`.`typical_selling_price` AS `typical_selling_price`,
          `RHS`.`product_description` AS `product_description`,
          `RHS`.`other_product_details` AS `other_product_details`
   FROM
     (SELECT `LHS`.`characteristic_id` AS `characteristic_id`,
             `LHS`.`characteristic_type_code` AS `characteristic_type_code`,
             `LHS`.`characteristic_data_type` AS `characteristic_data_type`,
             `LHS`.`characteristic_name` AS `characteristic_name`,
             `LHS`.`other_characteristic_details` AS `other_characteristic_details`,
             `RHS`.`product_id` AS `product_id`,
             `RHS`.`product_characteristic_value` AS `product_characteristic_value`
      FROM `df_characteristics` AS `LHS`
      INNER JOIN `df_product_characteristics` AS `RHS` ON (`LHS`.`characteristic_id` = `RHS`.`characteristic_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_products`
      WHERE (`product_name` = 'sesame')) AS RHS ON (LHS.product_id = RHS.product_id))
ORDER BY characteristic_name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/products_gen_characteristics/0030,"natural_join(input0, input1), filter(line0, ""color_description == 'red' & characteristic_name == 'slow'""), natural_join3(input2, input3, line1), summarise(line2, 'n_distinct = n_distinct(characteristic_name)', '')","SELECT `n_distinct` AS `count___`
FROM
  (SELECT COUNT(DISTINCT `characteristic_name`) AS `n_distinct`
   FROM
     (SELECT `LHS`.`product_id` AS `product_id`,
             `LHS`.`color_code` AS `color_code`,
             `LHS`.`product_category_code` AS `product_category_code`,
             `LHS`.`product_name` AS `product_name`,
             `LHS`.`typical_buying_price` AS `typical_buying_price`,
             `LHS`.`typical_selling_price` AS `typical_selling_price`,
             `LHS`.`product_description` AS `product_description`,
             `LHS`.`other_product_details` AS `other_product_details`,
             `LHS`.`characteristic_id` AS `characteristic_id`,
             `LHS`.`product_characteristic_value` AS `product_characteristic_value`,
             `RHS`.`color_description` AS `color_description`,
             `RHS`.`characteristic_type_code` AS `characteristic_type_code`,
             `RHS`.`characteristic_data_type` AS `characteristic_data_type`,
             `RHS`.`characteristic_name` AS `characteristic_name`,
             `RHS`.`other_characteristic_details` AS `other_characteristic_details`
      FROM
        (SELECT `LHS`.`product_id` AS `product_id`,
                `LHS`.`color_code` AS `color_code`,
                `LHS`.`product_category_code` AS `product_category_code`,
                `LHS`.`product_name` AS `product_name`,
                `LHS`.`typical_buying_price` AS `typical_buying_price`,
                `LHS`.`typical_selling_price` AS `typical_selling_price`,
                `LHS`.`product_description` AS `product_description`,
                `LHS`.`other_product_details` AS `other_product_details`,
                `RHS`.`characteristic_id` AS `characteristic_id`,
                `RHS`.`product_characteristic_value` AS `product_characteristic_value`
         FROM `df_products` AS `LHS`
         INNER JOIN `df_product_characteristics` AS `RHS` ON (`LHS`.`product_id` = `RHS`.`product_id`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM
           (SELECT `LHS`.`color_code` AS `color_code`,
                   `LHS`.`color_description` AS `color_description`,
                   `RHS`.`characteristic_id` AS `characteristic_id`,
                   `RHS`.`characteristic_type_code` AS `characteristic_type_code`,
                   `RHS`.`characteristic_data_type` AS `characteristic_data_type`,
                   `RHS`.`characteristic_name` AS `characteristic_name`,
                   `RHS`.`other_characteristic_details` AS `other_characteristic_details`
            FROM `df_ref_colors` AS `LHS`
            CROSS JOIN `df_characteristics` AS `RHS`)
         WHERE (`color_description` = 'red'
                AND `characteristic_name` = 'slow')) AS RHS ON (LHS.color_code = RHS.color_code
                                                                AND LHS.characteristic_id = RHS.characteristic_id)))
ORDER BY count___;",4,16,6,1,6,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0
spider/products_gen_characteristics/0013,"filter(input0, ""color_description == 'yellow'""), semi_join(input1, line0)","SELECT `product_name`
FROM
  (SELECT *
   FROM `df_products` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_ref_colors`
           WHERE (`color_description` = 'yellow')) AS RHS
        WHERE (LHS.color_code = RHS.color_code) ))
ORDER BY product_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/products_gen_characteristics/0006,"intersect(input0, input0, 'characteristic_name')","SELECT characteristic_name
FROM
  (SELECT characteristic_name
   FROM df_characteristics INTERSECT SELECT characteristic_name
   FROM df_characteristics)
ORDER BY characteristic_name;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/products_gen_characteristics/0004,df_products,"SELECT product_name,
       typical_buying_price
FROM df_products
ORDER BY product_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/products_gen_characteristics/0012,"filter(input0, ""product_name == 'flax'"")","SELECT `product_category_code`
FROM `df_products`
WHERE (`product_name` = 'flax')
ORDER BY product_category_code;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/products_gen_characteristics/0026,"natural_join3(input0, input1, input2), filter(line0, ""product_name == 'flax'""), summarise(line1, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`characteristic_id` AS `characteristic_id`,
                `LHS`.`characteristic_type_code` AS `characteristic_type_code`,
                `LHS`.`characteristic_data_type` AS `characteristic_data_type`,
                `LHS`.`characteristic_name` AS `characteristic_name`,
                `LHS`.`other_characteristic_details` AS `other_characteristic_details`,
                `LHS`.`product_id` AS `product_id`,
                `LHS`.`color_code` AS `color_code`,
                `LHS`.`product_category_code` AS `product_category_code`,
                `LHS`.`product_name` AS `product_name`,
                `LHS`.`typical_buying_price` AS `typical_buying_price`,
                `LHS`.`typical_selling_price` AS `typical_selling_price`,
                `LHS`.`product_description` AS `product_description`,
                `LHS`.`other_product_details` AS `other_product_details`,
                `RHS`.`product_characteristic_value` AS `product_characteristic_value`
         FROM
           (SELECT `LHS`.`characteristic_id` AS `characteristic_id`,
                   `LHS`.`characteristic_type_code` AS `characteristic_type_code`,
                   `LHS`.`characteristic_data_type` AS `characteristic_data_type`,
                   `LHS`.`characteristic_name` AS `characteristic_name`,
                   `LHS`.`other_characteristic_details` AS `other_characteristic_details`,
                   `RHS`.`product_id` AS `product_id`,
                   `RHS`.`color_code` AS `color_code`,
                   `RHS`.`product_category_code` AS `product_category_code`,
                   `RHS`.`product_name` AS `product_name`,
                   `RHS`.`typical_buying_price` AS `typical_buying_price`,
                   `RHS`.`typical_selling_price` AS `typical_selling_price`,
                   `RHS`.`product_description` AS `product_description`,
                   `RHS`.`other_product_details` AS `other_product_details`
            FROM `df_characteristics` AS `LHS`
            CROSS JOIN `df_products` AS `RHS`) AS `LHS`
         INNER JOIN `df_product_characteristics` AS `RHS` ON (`LHS`.`characteristic_id` = `RHS`.`characteristic_id`
                                                              AND `LHS`.`product_id` = `RHS`.`product_id`))
      WHERE (`product_name` = 'flax')))
ORDER BY count___;",3,12,5,0,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/products_gen_characteristics/0015,"filter(input1, ""product_name == 'catnip'""), natural_join(input0, line0)","SELECT `color_description`
FROM
  (SELECT `LHS`.`color_code` AS `color_code`,
          `LHS`.`color_description` AS `color_description`,
          `RHS`.`product_id` AS `product_id`,
          `RHS`.`product_category_code` AS `product_category_code`,
          `RHS`.`product_name` AS `product_name`,
          `RHS`.`typical_buying_price` AS `typical_buying_price`,
          `RHS`.`typical_selling_price` AS `typical_selling_price`,
          `RHS`.`product_description` AS `product_description`,
          `RHS`.`other_product_details` AS `other_product_details`
   FROM `df_ref_colors` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_products`
      WHERE (`product_name` = 'catnip')) AS RHS ON (LHS.color_code = RHS.color_code))
ORDER BY color_description;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/products_gen_characteristics/0005,df_ref_colors,"SELECT color_description
FROM df_ref_colors
ORDER BY color_description;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/products_gen_characteristics/0016,"filter(input1, ""product_name == 'chervil'""), natural_join(input0, line0)","SELECT `color_code`,
       `color_description`
FROM
  (SELECT `LHS`.`color_code` AS `color_code`,
          `LHS`.`color_description` AS `color_description`,
          `RHS`.`product_id` AS `product_id`,
          `RHS`.`product_category_code` AS `product_category_code`,
          `RHS`.`product_name` AS `product_name`,
          `RHS`.`typical_buying_price` AS `typical_buying_price`,
          `RHS`.`typical_selling_price` AS `typical_selling_price`,
          `RHS`.`product_description` AS `product_description`,
          `RHS`.`other_product_details` AS `other_product_details`
   FROM `df_ref_colors` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_products`
      WHERE (`product_name` = 'chervil')) AS RHS ON (LHS.color_code = RHS.color_code))
ORDER BY color_code;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/products_gen_characteristics/0032,"filter(input0, ""product_category_code == 'Herbs'""), natural_join(input0, line0)","SELECT `unit_of_measure`
FROM
  (SELECT `LHS`.`product_category_code` AS `product_category_code`,
          `LHS`.`product_category_description` AS `product_category_description`,
          `LHS`.`unit_of_measure` AS `unit_of_measure`
   FROM `df_ref_product_categories` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_ref_product_categories`
      WHERE (`product_category_code` = 'Herbs')) AS RHS ON (LHS.product_category_code = RHS.product_category_code
                                                            AND LHS.product_category_description = RHS.product_category_description
                                                            AND LHS.unit_of_measure = RHS.unit_of_measure))
ORDER BY unit_of_measure;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/products_gen_characteristics/0018,"filter(input0, ""color_description == 'white'""), semi_join(input1, line0)","SELECT `product_name`
FROM
  (SELECT *
   FROM `df_products` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_ref_colors`
           WHERE (`color_description` = 'white')) AS RHS
        WHERE (LHS.color_code = RHS.color_code) ))
ORDER BY product_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/products_gen_characteristics/0041,"anti_join(input0, input1, '')","SELECT characteristic_name,
       other_characteristic_details,
       characteristic_data_type
FROM
  (SELECT *
   FROM df_characteristics AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_product_characteristics AS RHS
        WHERE (LHS.characteristic_id = RHS.characteristic_id) ))
ORDER BY characteristic_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/products_gen_characteristics/0035,"filter(input1, ""product_name == 'cumin'""), semi_join(input0, line0)","SELECT `unit_of_measure`
FROM
  (SELECT *
   FROM `df_ref_product_categories` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_products`
           WHERE (`product_name` = 'cumin')) AS RHS
        WHERE (LHS.product_category_code = RHS.product_category_code) ))
ORDER BY unit_of_measure;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/products_gen_characteristics/0020,"filter(input0, ""product_name != 'sesame'""), anti_join(input1, line0, ""'product_id'""), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM
  (SELECT *
   FROM `df_product_characteristics` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_products`
           WHERE (`product_name` != 'sesame')) AS RHS
        WHERE (LHS.product_id = RHS.product_id) ))
ORDER BY count___;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/products_gen_characteristics/0019,"filter(input0, ""color_description == 'yellow'""), semi_join(input1, line0)","SELECT `product_name`,
       `typical_buying_price`,
       `typical_selling_price`
FROM
  (SELECT *
   FROM `df_products` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_ref_colors`
           WHERE (`color_description` = 'yellow')) AS RHS
        WHERE (LHS.color_code = RHS.color_code) ))
ORDER BY product_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/products_gen_characteristics/0007,"filter(input0, ""product_category_code == 'Spices'""), intersect(line0, input0, 'product_name')","SELECT `product_name`
FROM
  (SELECT `product_name`
   FROM `df_products`
   WHERE (`product_category_code` = 'Spices') INTERSECT
     SELECT product_name
     FROM df_products)
ORDER BY product_name;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/products_gen_characteristics/0024,"natural_join3(input0, input1, input2), filter(line0, ""product_name == 'sesame' & characteristic_type_code == 'Grade'"")","SELECT `characteristic_name`
FROM
  (SELECT `LHS`.`characteristic_id` AS `characteristic_id`,
          `LHS`.`characteristic_type_code` AS `characteristic_type_code`,
          `LHS`.`characteristic_data_type` AS `characteristic_data_type`,
          `LHS`.`characteristic_name` AS `characteristic_name`,
          `LHS`.`other_characteristic_details` AS `other_characteristic_details`,
          `LHS`.`product_id` AS `product_id`,
          `LHS`.`color_code` AS `color_code`,
          `LHS`.`product_category_code` AS `product_category_code`,
          `LHS`.`product_name` AS `product_name`,
          `LHS`.`typical_buying_price` AS `typical_buying_price`,
          `LHS`.`typical_selling_price` AS `typical_selling_price`,
          `LHS`.`product_description` AS `product_description`,
          `LHS`.`other_product_details` AS `other_product_details`,
          `RHS`.`product_characteristic_value` AS `product_characteristic_value`
   FROM
     (SELECT `LHS`.`characteristic_id` AS `characteristic_id`,
             `LHS`.`characteristic_type_code` AS `characteristic_type_code`,
             `LHS`.`characteristic_data_type` AS `characteristic_data_type`,
             `LHS`.`characteristic_name` AS `characteristic_name`,
             `LHS`.`other_characteristic_details` AS `other_characteristic_details`,
             `RHS`.`product_id` AS `product_id`,
             `RHS`.`color_code` AS `color_code`,
             `RHS`.`product_category_code` AS `product_category_code`,
             `RHS`.`product_name` AS `product_name`,
             `RHS`.`typical_buying_price` AS `typical_buying_price`,
             `RHS`.`typical_selling_price` AS `typical_selling_price`,
             `RHS`.`product_description` AS `product_description`,
             `RHS`.`other_product_details` AS `other_product_details`
      FROM `df_characteristics` AS `LHS`
      CROSS JOIN `df_products` AS `RHS`) AS `LHS`
   INNER JOIN `df_product_characteristics` AS `RHS` ON (`LHS`.`characteristic_id` = `RHS`.`characteristic_id`
                                                        AND `LHS`.`product_id` = `RHS`.`product_id`))
WHERE (`product_name` = 'sesame'
       AND `characteristic_type_code` = 'Grade')
ORDER BY characteristic_name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/products_gen_characteristics/0021,"natural_join3(input0, input1, input2), summarise(line0, 'n_distinct = n_distinct(characteristic_name)', ""'product_name'""), filter(line1, ""product_name == 'sesame'"")","SELECT `n_distinct` AS `count_distinct_t3_characteristic_name_`
FROM
  (SELECT `product_name`,
          COUNT(DISTINCT `characteristic_name`) AS `n_distinct`
   FROM
     (SELECT `LHS`.`characteristic_id` AS `characteristic_id`,
             `LHS`.`characteristic_type_code` AS `characteristic_type_code`,
             `LHS`.`characteristic_data_type` AS `characteristic_data_type`,
             `LHS`.`characteristic_name` AS `characteristic_name`,
             `LHS`.`other_characteristic_details` AS `other_characteristic_details`,
             `LHS`.`product_id` AS `product_id`,
             `LHS`.`color_code` AS `color_code`,
             `LHS`.`product_category_code` AS `product_category_code`,
             `LHS`.`product_name` AS `product_name`,
             `LHS`.`typical_buying_price` AS `typical_buying_price`,
             `LHS`.`typical_selling_price` AS `typical_selling_price`,
             `LHS`.`product_description` AS `product_description`,
             `LHS`.`other_product_details` AS `other_product_details`,
             `RHS`.`product_characteristic_value` AS `product_characteristic_value`
      FROM
        (SELECT `LHS`.`characteristic_id` AS `characteristic_id`,
                `LHS`.`characteristic_type_code` AS `characteristic_type_code`,
                `LHS`.`characteristic_data_type` AS `characteristic_data_type`,
                `LHS`.`characteristic_name` AS `characteristic_name`,
                `LHS`.`other_characteristic_details` AS `other_characteristic_details`,
                `RHS`.`product_id` AS `product_id`,
                `RHS`.`color_code` AS `color_code`,
                `RHS`.`product_category_code` AS `product_category_code`,
                `RHS`.`product_name` AS `product_name`,
                `RHS`.`typical_buying_price` AS `typical_buying_price`,
                `RHS`.`typical_selling_price` AS `typical_selling_price`,
                `RHS`.`product_description` AS `product_description`,
                `RHS`.`other_product_details` AS `other_product_details`
         FROM `df_characteristics` AS `LHS`
         CROSS JOIN `df_products` AS `RHS`) AS `LHS`
      INNER JOIN `df_product_characteristics` AS `RHS` ON (`LHS`.`characteristic_id` = `RHS`.`characteristic_id`
                                                           AND `LHS`.`product_id` = `RHS`.`product_id`))
   GROUP BY `product_name`)
WHERE (`product_name` = 'sesame')
ORDER BY count_distinct_t3_characteristic_name_;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/products_gen_characteristics/0023,"natural_join(input0, input1), filter(line0, ""product_name == 'cumin'""), semi_join(line1, input2)","SELECT `characteristic_name`,
       `characteristic_data_type`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`characteristic_id` AS `characteristic_id`,
                `LHS`.`characteristic_type_code` AS `characteristic_type_code`,
                `LHS`.`characteristic_data_type` AS `characteristic_data_type`,
                `LHS`.`characteristic_name` AS `characteristic_name`,
                `LHS`.`other_characteristic_details` AS `other_characteristic_details`,
                `RHS`.`product_id` AS `product_id`,
                `RHS`.`color_code` AS `color_code`,
                `RHS`.`product_category_code` AS `product_category_code`,
                `RHS`.`product_name` AS `product_name`,
                `RHS`.`typical_buying_price` AS `typical_buying_price`,
                `RHS`.`typical_selling_price` AS `typical_selling_price`,
                `RHS`.`product_description` AS `product_description`,
                `RHS`.`other_product_details` AS `other_product_details`
         FROM `df_characteristics` AS `LHS`
         CROSS JOIN `df_products` AS `RHS`)
      WHERE (`product_name` = 'cumin')) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_product_characteristics AS RHS
        WHERE (LHS.characteristic_id = RHS.characteristic_id
               AND LHS.product_id = RHS.product_id) ))
ORDER BY characteristic_name;",3,14,5,0,5,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0
spider/products_gen_characteristics/0001,"summarise(input0, 'n = n()', ""'product_name'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT product_name,
          COUNT() AS n
   FROM df_products
   GROUP BY product_name)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/products_gen_characteristics/0043,"anti_join(input0, input1, ""'color_code'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT *
      FROM df_ref_colors AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM df_products AS RHS
           WHERE (LHS.color_code = RHS.color_code) )))
ORDER BY count___;",2,12,4,0,4,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
spider/products_gen_characteristics/0009,"filter(input0, ""product_category_code == 'Seeds'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM `df_products`
WHERE (`product_category_code` = 'Seeds')
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/products_gen_characteristics/0025,"natural_join3(input0, input1, input2), filter(line0, ""product_name == 'laurel'""), summarise(line1, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`characteristic_id` AS `characteristic_id`,
                `LHS`.`characteristic_type_code` AS `characteristic_type_code`,
                `LHS`.`characteristic_data_type` AS `characteristic_data_type`,
                `LHS`.`characteristic_name` AS `characteristic_name`,
                `LHS`.`other_characteristic_details` AS `other_characteristic_details`,
                `LHS`.`product_id` AS `product_id`,
                `LHS`.`color_code` AS `color_code`,
                `LHS`.`product_category_code` AS `product_category_code`,
                `LHS`.`product_name` AS `product_name`,
                `LHS`.`typical_buying_price` AS `typical_buying_price`,
                `LHS`.`typical_selling_price` AS `typical_selling_price`,
                `LHS`.`product_description` AS `product_description`,
                `LHS`.`other_product_details` AS `other_product_details`,
                `RHS`.`product_characteristic_value` AS `product_characteristic_value`
         FROM
           (SELECT `LHS`.`characteristic_id` AS `characteristic_id`,
                   `LHS`.`characteristic_type_code` AS `characteristic_type_code`,
                   `LHS`.`characteristic_data_type` AS `characteristic_data_type`,
                   `LHS`.`characteristic_name` AS `characteristic_name`,
                   `LHS`.`other_characteristic_details` AS `other_characteristic_details`,
                   `RHS`.`product_id` AS `product_id`,
                   `RHS`.`color_code` AS `color_code`,
                   `RHS`.`product_category_code` AS `product_category_code`,
                   `RHS`.`product_name` AS `product_name`,
                   `RHS`.`typical_buying_price` AS `typical_buying_price`,
                   `RHS`.`typical_selling_price` AS `typical_selling_price`,
                   `RHS`.`product_description` AS `product_description`,
                   `RHS`.`other_product_details` AS `other_product_details`
            FROM `df_characteristics` AS `LHS`
            CROSS JOIN `df_products` AS `RHS`) AS `LHS`
         INNER JOIN `df_product_characteristics` AS `RHS` ON (`LHS`.`characteristic_id` = `RHS`.`characteristic_id`
                                                              AND `LHS`.`product_id` = `RHS`.`product_id`))
      WHERE (`product_name` = 'laurel')))
ORDER BY count___;",3,12,5,0,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/products_gen_characteristics/0011,"filter(input0, ""product_name == 'cumin'"")","SELECT `product_category_code`,
       `typical_buying_price`
FROM `df_products`
WHERE (`product_name` = 'cumin')
ORDER BY product_category_code;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/products_gen_characteristics/0029,"filter(input0, ""characteristic_name == 'warm'""), natural_join3(input1, input2, line0)","SELECT DISTINCT `product_name`
FROM
  (SELECT `LHS`.`product_id` AS `product_id`,
          `LHS`.`color_code` AS `color_code`,
          `LHS`.`product_category_code` AS `product_category_code`,
          `LHS`.`product_name` AS `product_name`,
          `LHS`.`typical_buying_price` AS `typical_buying_price`,
          `LHS`.`typical_selling_price` AS `typical_selling_price`,
          `LHS`.`product_description` AS `product_description`,
          `LHS`.`other_product_details` AS `other_product_details`,
          `LHS`.`characteristic_id` AS `characteristic_id`,
          `LHS`.`product_characteristic_value` AS `product_characteristic_value`,
          `RHS`.`characteristic_type_code` AS `characteristic_type_code`,
          `RHS`.`characteristic_data_type` AS `characteristic_data_type`,
          `RHS`.`characteristic_name` AS `characteristic_name`,
          `RHS`.`other_characteristic_details` AS `other_characteristic_details`
   FROM
     (SELECT `LHS`.`product_id` AS `product_id`,
             `LHS`.`color_code` AS `color_code`,
             `LHS`.`product_category_code` AS `product_category_code`,
             `LHS`.`product_name` AS `product_name`,
             `LHS`.`typical_buying_price` AS `typical_buying_price`,
             `LHS`.`typical_selling_price` AS `typical_selling_price`,
             `LHS`.`product_description` AS `product_description`,
             `LHS`.`other_product_details` AS `other_product_details`,
             `RHS`.`characteristic_id` AS `characteristic_id`,
             `RHS`.`product_characteristic_value` AS `product_characteristic_value`
      FROM `df_products` AS `LHS`
      INNER JOIN `df_product_characteristics` AS `RHS` ON (`LHS`.`product_id` = `RHS`.`product_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_characteristics`
      WHERE (`characteristic_name` = 'warm')) AS RHS ON (LHS.characteristic_id = RHS.characteristic_id))
ORDER BY product_name;",2,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/products_gen_characteristics/0010,"summarise(input0, 'n = n()', ""'color_code','product_category_code'""), filter(line0, ""product_category_code != 'Spices' & n < 1000L""), mutate(line1, 'n_distinct = n_distinct(product_category_code)')","SELECT DISTINCT COUNT(DISTINCT `product_category_code`) OVER () AS `count___`
FROM
  (SELECT `color_code`,
          `product_category_code`,
          COUNT() AS `n`
   FROM `df_products`
   GROUP BY `color_code`,
            `product_category_code`)
WHERE (`product_category_code` != 'Spices'
       AND n < 1000)
ORDER BY count___;",3,8,2,2,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/products_gen_characteristics/0040,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'characteristic_name','product_description'""), inner_join(line1, line0, ""'characteristic_name' = 'characteristic_name','product_description' = 'characteristic_data_type'"")","SELECT DISTINCT characteristic_name
FROM
  (SELECT LHS.characteristic_name AS characteristic_name,
          LHS.product_description AS product_description,
          LHS.n AS n,
          RHS.characteristic_id AS characteristic_id,
          RHS.characteristic_type_code AS characteristic_type_code,
          RHS.other_characteristic_details AS other_characteristic_details,
          RHS.product_id AS product_id,
          RHS.color_code AS color_code,
          RHS.product_category_code AS product_category_code,
          RHS.product_name AS product_name,
          RHS.typical_buying_price AS typical_buying_price,
          RHS.typical_selling_price AS typical_selling_price,
          RHS.product_description AS product_description_other,
          RHS.other_product_details AS other_product_details,
          RHS.product_characteristic_value AS product_characteristic_value
   FROM
     (SELECT characteristic_name,
             product_description,
             COUNT() AS n
      FROM
        (SELECT LHS.characteristic_id AS characteristic_id,
                LHS.characteristic_type_code AS characteristic_type_code,
                LHS.characteristic_data_type AS characteristic_data_type,
                LHS.characteristic_name AS characteristic_name,
                LHS.other_characteristic_details AS other_characteristic_details,
                LHS.product_id AS product_id,
                LHS.color_code AS color_code,
                LHS.product_category_code AS product_category_code,
                LHS.product_name AS product_name,
                LHS.typical_buying_price AS typical_buying_price,
                LHS.typical_selling_price AS typical_selling_price,
                LHS.product_description AS product_description,
                LHS.other_product_details AS other_product_details,
                RHS.product_characteristic_value AS product_characteristic_value
         FROM
           (SELECT LHS.characteristic_id AS characteristic_id,
                   LHS.characteristic_type_code AS characteristic_type_code,
                   LHS.characteristic_data_type AS characteristic_data_type,
                   LHS.characteristic_name AS characteristic_name,
                   LHS.other_characteristic_details AS other_characteristic_details,
                   RHS.product_id AS product_id,
                   RHS.color_code AS color_code,
                   RHS.product_category_code AS product_category_code,
                   RHS.product_name AS product_name,
                   RHS.typical_buying_price AS typical_buying_price,
                   RHS.typical_selling_price AS typical_selling_price,
                   RHS.product_description AS product_description,
                   RHS.other_product_details AS other_product_details
            FROM df_characteristics AS LHS
            CROSS JOIN df_products AS RHS) AS LHS
         INNER JOIN df_product_characteristics AS RHS ON (LHS.characteristic_id = RHS.characteristic_id
                                                          AND LHS.product_id = RHS.product_id))
      GROUP BY characteristic_name,
               product_description) AS LHS
   INNER JOIN
     (SELECT LHS.characteristic_id AS characteristic_id,
             LHS.characteristic_type_code AS characteristic_type_code,
             LHS.characteristic_data_type AS characteristic_data_type,
             LHS.characteristic_name AS characteristic_name,
             LHS.other_characteristic_details AS other_characteristic_details,
             LHS.product_id AS product_id,
             LHS.color_code AS color_code,
             LHS.product_category_code AS product_category_code,
             LHS.product_name AS product_name,
             LHS.typical_buying_price AS typical_buying_price,
             LHS.typical_selling_price AS typical_selling_price,
             LHS.product_description AS product_description,
             LHS.other_product_details AS other_product_details,
             RHS.product_characteristic_value AS product_characteristic_value
      FROM
        (SELECT LHS.characteristic_id AS characteristic_id,
                LHS.characteristic_type_code AS characteristic_type_code,
                LHS.characteristic_data_type AS characteristic_data_type,
                LHS.characteristic_name AS characteristic_name,
                LHS.other_characteristic_details AS other_characteristic_details,
                RHS.product_id AS product_id,
                RHS.color_code AS color_code,
                RHS.product_category_code AS product_category_code,
                RHS.product_name AS product_name,
                RHS.typical_buying_price AS typical_buying_price,
                RHS.typical_selling_price AS typical_selling_price,
                RHS.product_description AS product_description,
                RHS.other_product_details AS other_product_details
         FROM df_characteristics AS LHS
         CROSS JOIN df_products AS RHS) AS LHS
      INNER JOIN df_product_characteristics AS RHS ON (LHS.characteristic_id = RHS.characteristic_id
                                                       AND LHS.product_id = RHS.product_id)) AS RHS ON (LHS.characteristic_name = RHS.characteristic_name
                                                                                                        AND LHS.product_description = RHS.characteristic_data_type))
ORDER BY characteristic_name;",3,18,7,1,7,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0
spider/products_gen_characteristics/0028,"natural_join3(input0, input1, input2), summarise(line0, 'n_distinct = n_distinct(characteristic_name)', ""'characteristic_name','other_product_details'""), filter(line1, ""characteristic_name == 'hot'"")","SELECT `n_distinct` AS `count___`
FROM
  (SELECT `characteristic_name`,
          `other_product_details`,
          COUNT(DISTINCT `characteristic_name`) AS `n_distinct`
   FROM
     (SELECT `LHS`.`characteristic_id` AS `characteristic_id`,
             `LHS`.`characteristic_type_code` AS `characteristic_type_code`,
             `LHS`.`characteristic_data_type` AS `characteristic_data_type`,
             `LHS`.`characteristic_name` AS `characteristic_name`,
             `LHS`.`other_characteristic_details` AS `other_characteristic_details`,
             `LHS`.`product_id` AS `product_id`,
             `LHS`.`color_code` AS `color_code`,
             `LHS`.`product_category_code` AS `product_category_code`,
             `LHS`.`product_name` AS `product_name`,
             `LHS`.`typical_buying_price` AS `typical_buying_price`,
             `LHS`.`typical_selling_price` AS `typical_selling_price`,
             `LHS`.`product_description` AS `product_description`,
             `LHS`.`other_product_details` AS `other_product_details`,
             `RHS`.`product_characteristic_value` AS `product_characteristic_value`
      FROM
        (SELECT `LHS`.`characteristic_id` AS `characteristic_id`,
                `LHS`.`characteristic_type_code` AS `characteristic_type_code`,
                `LHS`.`characteristic_data_type` AS `characteristic_data_type`,
                `LHS`.`characteristic_name` AS `characteristic_name`,
                `LHS`.`other_characteristic_details` AS `other_characteristic_details`,
                `RHS`.`product_id` AS `product_id`,
                `RHS`.`color_code` AS `color_code`,
                `RHS`.`product_category_code` AS `product_category_code`,
                `RHS`.`product_name` AS `product_name`,
                `RHS`.`typical_buying_price` AS `typical_buying_price`,
                `RHS`.`typical_selling_price` AS `typical_selling_price`,
                `RHS`.`product_description` AS `product_description`,
                `RHS`.`other_product_details` AS `other_product_details`
         FROM `df_characteristics` AS `LHS`
         CROSS JOIN `df_products` AS `RHS`) AS `LHS`
      INNER JOIN `df_product_characteristics` AS `RHS` ON (`LHS`.`characteristic_id` = `RHS`.`characteristic_id`
                                                           AND `LHS`.`product_id` = `RHS`.`product_id`))
   GROUP BY `characteristic_name`,
            `other_product_details`)
WHERE (`characteristic_name` = 'hot')
ORDER BY count___;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/products_gen_characteristics/0031,"natural_join4(input0, input1, input2, input3), filter(line0, ""color_description != 'white' & characteristic_name == 'hot'""), summarise(line1, 'n_distinct = n_distinct(characteristic_name)', ""'product_category_code'"")","SELECT `n_distinct` AS `count___`
FROM
  (SELECT `product_category_code`,
          COUNT(DISTINCT `characteristic_name`) AS `n_distinct`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`color_code` AS `color_code`,
                `LHS`.`color_description` AS `color_description`,
                `LHS`.`characteristic_id` AS `characteristic_id`,
                `LHS`.`characteristic_type_code` AS `characteristic_type_code`,
                `LHS`.`characteristic_data_type` AS `characteristic_data_type`,
                `LHS`.`characteristic_name` AS `characteristic_name`,
                `LHS`.`other_characteristic_details` AS `other_characteristic_details`,
                `LHS`.`product_id` AS `product_id`,
                `LHS`.`product_category_code` AS `product_category_code`,
                `LHS`.`product_name` AS `product_name`,
                `LHS`.`typical_buying_price` AS `typical_buying_price`,
                `LHS`.`typical_selling_price` AS `typical_selling_price`,
                `LHS`.`product_description` AS `product_description`,
                `LHS`.`other_product_details` AS `other_product_details`,
                `RHS`.`product_characteristic_value` AS `product_characteristic_value`
         FROM
           (SELECT `LHS`.`color_code` AS `color_code`,
                   `LHS`.`color_description` AS `color_description`,
                   `LHS`.`characteristic_id` AS `characteristic_id`,
                   `LHS`.`characteristic_type_code` AS `characteristic_type_code`,
                   `LHS`.`characteristic_data_type` AS `characteristic_data_type`,
                   `LHS`.`characteristic_name` AS `characteristic_name`,
                   `LHS`.`other_characteristic_details` AS `other_characteristic_details`,
                   `RHS`.`product_id` AS `product_id`,
                   `RHS`.`product_category_code` AS `product_category_code`,
                   `RHS`.`product_name` AS `product_name`,
                   `RHS`.`typical_buying_price` AS `typical_buying_price`,
                   `RHS`.`typical_selling_price` AS `typical_selling_price`,
                   `RHS`.`product_description` AS `product_description`,
                   `RHS`.`other_product_details` AS `other_product_details`
            FROM
              (SELECT `LHS`.`color_code` AS `color_code`,
                      `LHS`.`color_description` AS `color_description`,
                      `RHS`.`characteristic_id` AS `characteristic_id`,
                      `RHS`.`characteristic_type_code` AS `characteristic_type_code`,
                      `RHS`.`characteristic_data_type` AS `characteristic_data_type`,
                      `RHS`.`characteristic_name` AS `characteristic_name`,
                      `RHS`.`other_characteristic_details` AS `other_characteristic_details`
               FROM `df_ref_colors` AS `LHS`
               CROSS JOIN `df_characteristics` AS `RHS`) AS `LHS`
            INNER JOIN `df_products` AS `RHS` ON (`LHS`.`color_code` = `RHS`.`color_code`)) AS `LHS`
         INNER JOIN `df_product_characteristics` AS `RHS` ON (`LHS`.`characteristic_id` = `RHS`.`characteristic_id`
                                                              AND `LHS`.`product_id` = `RHS`.`product_id`))
      WHERE (`color_description` != 'white'
             AND `characteristic_name` = 'hot'))
   GROUP BY product_category_code)
ORDER BY count___;",3,16,6,1,6,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
spider/school_bus/0002,df_driver,"SELECT name,
       home_city,
       age
FROM df_driver
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_bus/0008,"filter(input0, 'age == 40L | age <= 2L'), mutate(line0, 'n = n()')","SELECT home_city
FROM df_driver
WHERE (age = 40
       OR age <= 2)
ORDER BY home_city;",2,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/school_bus/0013,"mutate(input0, 'minyears_working = min(years_working)'), mutate(line0, 'meanyears_working = mean(years_working, na.rm = T)'), mutate(line1, 'maxyears_working = max(years_working)')","SELECT DISTINCT MAX(years_working) OVER () AS max_years_working_,
                                        minyears_working AS min_years_working_,
                                        meanyears_working AS avg_years_working_
FROM
  (SELECT school_id,
          driver_id,
          years_working,
          if_full_time,
          minyears_working,
          AVG(years_working) OVER () AS meanyears_working
   FROM
     (SELECT school_id,
             driver_id,
             years_working,
             if_full_time,
             MIN(years_working) OVER () AS minyears_working
      FROM df_school_bus))
ORDER BY max_years_working_;",3,10,3,1,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0
spider/school_bus/0006,"summarise(input0, 'n = n()', ""'age','name'""), inner_join(input0, line0, ""'driver_id' = 'n'"")","SELECT DISTINCT home_city
FROM
  (SELECT LHS.driver_id AS driver_id,
          LHS.name AS name,
          LHS.party AS party,
          LHS.home_city AS home_city,
          LHS.age AS age,
          RHS.age AS age_other,
          RHS.name AS name_other
   FROM df_driver AS LHS
   INNER JOIN
     (SELECT age,
             name,
             COUNT() AS n
      FROM df_driver
      GROUP BY age,
               name) AS RHS ON (LHS.driver_id = RHS.n))
ORDER BY home_city;",2,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/school_bus/0004,df_driver,"SELECT name
FROM df_driver
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_bus/0012,"natural_join(input0, input1), semi_join(line0, input2)","SELECT school,
       name
FROM
  (SELECT *
   FROM
     (SELECT LHS.driver_id AS driver_id,
             LHS.name AS name,
             LHS.party AS party,
             LHS.home_city AS home_city,
             LHS.age AS age,
             RHS.school_id AS school_id,
             RHS.grade AS grade,
             RHS.school AS school,
             RHS.location AS LOCATION,
             RHS.type AS TYPE
      FROM df_driver AS LHS
      CROSS JOIN df_school AS RHS) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_school_bus AS RHS
        WHERE (LHS.driver_id = RHS.driver_id
               AND LHS.school_id = RHS.school_id) ))
ORDER BY school;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0
spider/school_bus/0015,"semi_join(input0, input1), summarise(line0, 'n = n()', ""'type'"")","SELECT TYPE,
       n AS count___
FROM
  (SELECT TYPE,
          COUNT() AS n
   FROM
     (SELECT *
      FROM df_school AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM df_school_bus AS RHS
           WHERE (LHS.school_id = RHS.school_id) ))
   GROUP BY TYPE)
ORDER BY TYPE;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/school_bus/0005,"intersect(input0, input0, 'home_city')","SELECT home_city
FROM
  (SELECT home_city
   FROM df_driver INTERSECT SELECT home_city
   FROM df_driver)
ORDER BY home_city;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/school_bus/0016,"filter(input0, ""home_city != 'Hartford' | age >= 40L""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM `df_driver`
WHERE (`home_city` != 'Hartford'
       OR age >= 40)
ORDER BY count___;",2,6,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/school_bus/0018,"natural_join(input0, input1), limit(line0, 'desc(driver_id)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.driver_id AS driver_id,
                LHS.name AS name,
                LHS.party AS party,
                LHS.home_city AS home_city,
                LHS.age AS age,
                RHS.school_id AS school_id,
                RHS.years_working AS years_working,
                RHS.if_full_time AS if_full_time
         FROM df_driver AS LHS
         INNER JOIN df_school_bus AS RHS ON (LHS.driver_id = RHS.driver_id))
      ORDER BY driver_id DESC)
   LIMIT 1);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/school_bus/0007,"filter(input0, ""home_city == 'Hartford' & age > 40L""), natural_join(input0, line0)","SELECT `party`
FROM
  (SELECT `LHS`.`driver_id` AS `driver_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`party` AS `party`,
          `LHS`.`home_city` AS `home_city`,
          `LHS`.`age` AS `age`
   FROM `df_driver` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_driver`
      WHERE (`home_city` = 'Hartford'
             AND age > 40)) AS RHS ON (LHS.driver_id = RHS.driver_id
                                       AND LHS.name = RHS.name
                                       AND LHS.party = RHS.party
                                       AND LHS.home_city = RHS.home_city
                                       AND LHS.age = RHS.age))
ORDER BY party;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/school_bus/0001,"summarise(input0, 'n = n()', ""'driver_id','name'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT driver_id,
             name,
             COUNT() AS n
      FROM df_driver
      GROUP BY driver_id,
               name))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_bus/0014,"anti_join(input0, input1, '')","SELECT school,
       TYPE
FROM
  (SELECT *
   FROM df_school AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_school_bus AS RHS
        WHERE (LHS.school_id = RHS.school_id) ))
ORDER BY school;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/school_bus/0009,"filter(input0, 'age >= 40L'), cross_join(input0, input0, 'age < age.other'), anti_join(line1, line0, ""'home_city'"")","SELECT DISTINCT home_city
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.driver_id AS driver_id,
                LHS.name AS name,
                LHS.party AS party,
                LHS.home_city AS home_city,
                LHS.age AS age,
                RHS.driver_id AS driver_id_other,
                RHS.name AS name_other,
                RHS.party AS party_other,
                RHS.home_city AS home_city_other,
                RHS.age AS age_other
         FROM df_driver AS LHS
         CROSS JOIN df_driver AS RHS)
      WHERE (age < age_other)) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_driver
           WHERE (age >= 40)) AS RHS
        WHERE (LHS.home_city = RHS.home_city) ))
ORDER BY home_city;",3,19,6,1,6,0,4,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0
spider/school_bus/0011,"summarise(input0, 'n = n()', ""'type'""), filter(line0, 'n == 2L')","SELECT TYPE
FROM
  (SELECT TYPE,
          COUNT() AS n
   FROM df_school
   GROUP BY TYPE)
WHERE (n = 2)
ORDER BY TYPE;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/school_bus/0010,"anti_join(input0, input1, ""'driver_id'"")","SELECT name
FROM
  (SELECT *
   FROM df_driver AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_school_bus AS RHS
        WHERE (LHS.driver_id = RHS.driver_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/flight_4/0033,"summarise(input0, 'n = n()', ""'alid'""), natural_join(input1, line0)","SELECT country,
       name,
       n AS count___
FROM
  (SELECT LHS.alid AS alid,
          LHS.name AS name,
          LHS.iata AS iata,
          LHS.icao AS icao,
          LHS.callsign AS callsign,
          LHS.country AS country,
          LHS.active AS active,
          RHS.n AS n
   FROM df_airlines AS LHS
   INNER JOIN
     (SELECT alid,
             COUNT() AS n
      FROM df_routes
      GROUP BY alid) AS RHS ON (LHS.alid = RHS.alid))
ORDER BY country;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/flight_4/0002,"filter(input0, ""city == 'New York'""), natural_join(input0, line0)","SELECT `name`,
       `city`,
       `country`,
       `elevation`
FROM
  (SELECT `LHS`.`apid` AS `apid`,
          `LHS`.`name` AS `name`,
          `LHS`.`city` AS `city`,
          `LHS`.`country` AS `country`,
          `LHS`.`x` AS `x`,
          `LHS`.`y` AS `y`,
          `LHS`.`elevation` AS `elevation`,
          `LHS`.`iata` AS `iata`,
          `LHS`.`icao` AS `icao`
   FROM `df_airports` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_airports`
      WHERE (`city` = 'New York')) AS RHS ON (LHS.apid = RHS.apid
                                              AND LHS.name = RHS.name
                                              AND LHS.city = RHS.city
                                              AND LHS.country = RHS.country
                                              AND LHS.x = RHS.x
                                              AND LHS.y = RHS.y
                                              AND LHS.elevation = RHS.elevation
                                              AND LHS.iata = RHS.iata
                                              AND LHS.icao = RHS.icao))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/flight_4/0008,"inner_join(input0, input0, ""'country','y'""), filter(line0, 'elevation >= -50L & elevation <= 50L')","SELECT name
FROM
  (SELECT LHS.apid AS apid,
          LHS.name AS name,
          LHS.city AS city,
          LHS.country AS country,
          LHS.x AS x,
          LHS.y AS y,
          LHS.elevation AS elevation,
          LHS.iata AS iata,
          LHS.icao AS icao,
          RHS.apid AS apid_other,
          RHS.name AS name_other,
          RHS.city AS city_other,
          RHS.x AS x_other,
          RHS.elevation AS elevation_other,
          RHS.iata AS iata_other,
          RHS.icao AS icao_other
   FROM df_airports AS LHS
   INNER JOIN df_airports AS RHS ON (LHS.country = RHS.country
                                     AND LHS.y = RHS.y))
WHERE (elevation >= -50
       AND elevation <= 50)
ORDER BY name;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/flight_4/0003,"mutate(input0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_airlines
ORDER BY count___;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/flight_4/0006,"filter(input0, ""country == 'Cuba' | country == 'Argentina'""), natural_join(input0, line0)","SELECT `name`
FROM
  (SELECT `LHS`.`apid` AS `apid`,
          `LHS`.`name` AS `name`,
          `LHS`.`city` AS `city`,
          `LHS`.`country` AS `country`,
          `LHS`.`x` AS `x`,
          `LHS`.`y` AS `y`,
          `LHS`.`elevation` AS `elevation`,
          `LHS`.`iata` AS `iata`,
          `LHS`.`icao` AS `icao`
   FROM `df_airports` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_airports`
      WHERE (`country` = 'Cuba'
             OR `country` = 'Argentina')) AS RHS ON (LHS.apid = RHS.apid
                                                     AND LHS.name = RHS.name
                                                     AND LHS.city = RHS.city
                                                     AND LHS.country = RHS.country
                                                     AND LHS.x = RHS.x
                                                     AND LHS.y = RHS.y
                                                     AND LHS.elevation = RHS.elevation
                                                     AND LHS.iata = RHS.iata
                                                     AND LHS.icao = RHS.icao))
ORDER BY name;",2,9,3,0,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/flight_4/0004,"summarise(input0, 'n = n()', ""'country'""), filter(line0, ""country == 'Russia'"")","SELECT `n` AS `count___`
FROM
  (SELECT `country`,
          COUNT() AS `n`
   FROM `df_airlines`
   GROUP BY `country`)
WHERE (`country` = 'Russia')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/flight_4/0012,"filter(input1, ""name == 'American Airlines'""), natural_join(input0, line0), summarise(line1, 'n = n()', ""'alid','country'"")","SELECT `n` AS `count___`
FROM
  (SELECT `alid`,
          `country`,
          COUNT() AS `n`
   FROM
     (SELECT `LHS`.`rid` AS `rid`,
             `LHS`.`dst_apid` AS `dst_apid`,
             `LHS`.`dst_ap` AS `dst_ap`,
             `LHS`.`src_apid` AS `src_apid`,
             `LHS`.`src_ap` AS `src_ap`,
             `LHS`.`alid` AS `alid`,
             `LHS`.`airline` AS `airline`,
             `LHS`.`codeshare` AS `codeshare`,
             `RHS`.`name` AS `name`,
             `RHS`.`iata` AS `iata`,
             `RHS`.`icao` AS `icao`,
             `RHS`.`callsign` AS `callsign`,
             `RHS`.`country` AS `country`,
             `RHS`.`active` AS `active`
      FROM `df_routes` AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_airlines`
         WHERE (`name` = 'American Airlines')) AS RHS ON (LHS.alid = RHS.alid))
   GROUP BY alid,
            country)
ORDER BY count___;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/flight_4/0015,"limit(input0, 'desc(elevation)')","SELECT name,
       city,
       country
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_airports
      ORDER BY elevation DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_4/0005,"filter(input0, ""country == 'Iceland'""), mutate(line0, 'elevation = max(elevation)')","SELECT DISTINCT MAX(`elevation`) OVER () AS `max_elevation_`
FROM `df_airports`
WHERE (`country` = 'Iceland')
ORDER BY max_elevation_;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/flight_4/0032,"summarise(input0, 'n = n()', ""'city'""), natural_join(input0, line0), filter(line1, 'n == 2L')","SELECT DISTINCT city
FROM
  (SELECT LHS.apid AS apid,
          LHS.name AS name,
          LHS.city AS city,
          LHS.country AS country,
          LHS.x AS x,
          LHS.y AS y,
          LHS.elevation AS elevation,
          LHS.iata AS iata,
          LHS.icao AS icao,
          RHS.n AS n
   FROM df_airports AS LHS
   INNER JOIN
     (SELECT city,
             COUNT() AS n
      FROM df_airports
      GROUP BY city) AS RHS ON (LHS.city = RHS.city))
WHERE (n = 2)
ORDER BY city;",3,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/flight_4/0020,"summarise(input0, 'n = n()', ""'country','icao'""), limit(line0, 'desc(n)')","SELECT country
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT country,
                icao,
                COUNT() AS n
         FROM df_airlines
         GROUP BY country,
                  icao)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_4/0019,"filter(input1, ""name == 'American Airlines'""), natural_join(input0, line0), mutate(line1, 'n_distinct = n_distinct(dst_apid)')","SELECT DISTINCT COUNT(DISTINCT `dst_apid`) OVER () AS `count_distinct_dst_apid_`
FROM
  (SELECT `LHS`.`rid` AS `rid`,
          `LHS`.`dst_apid` AS `dst_apid`,
          `LHS`.`dst_ap` AS `dst_ap`,
          `LHS`.`src_apid` AS `src_apid`,
          `LHS`.`src_ap` AS `src_ap`,
          `LHS`.`alid` AS `alid`,
          `LHS`.`airline` AS `airline`,
          `LHS`.`codeshare` AS `codeshare`,
          `RHS`.`name` AS `name`,
          `RHS`.`iata` AS `iata`,
          `RHS`.`icao` AS `icao`,
          `RHS`.`callsign` AS `callsign`,
          `RHS`.`country` AS `country`,
          `RHS`.`active` AS `active`
   FROM `df_routes` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_airlines`
      WHERE (`name` = 'American Airlines')) AS RHS ON (LHS.alid = RHS.alid))
ORDER BY count_distinct_dst_apid_;",3,11,3,2,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/flight_4/0023,"summarise(input0, 'n = n()', ""'country'"")","SELECT n AS count___,
       country
FROM
  (SELECT country,
          COUNT() AS n
   FROM df_airports
   GROUP BY country)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_4/0001,"filter(input0, ""city == 'Goroka'"")","SELECT `name`
FROM `df_airports`
WHERE (`city` = 'Goroka')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/flight_4/0014,"limit(input0, 'elevation')","SELECT name,
       city,
       country
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_airports
      ORDER BY elevation)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_4/0009,"limit(input0, 'desc(elevation)')","SELECT country
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_airports
      ORDER BY elevation DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/flight_4/0011,"filter(input0, ""country == 'Greenland'""), natural_join(input0, line0), mutate(line1, 'n_distinct = n_distinct(city)')","SELECT DISTINCT COUNT(DISTINCT `city`) OVER () AS `count_distinct_city_`
FROM
  (SELECT `LHS`.`apid` AS `apid`,
          `LHS`.`name` AS `name`,
          `LHS`.`city` AS `city`,
          `LHS`.`country` AS `country`,
          `LHS`.`x` AS `x`,
          `LHS`.`y` AS `y`,
          `LHS`.`elevation` AS `elevation`,
          `LHS`.`iata` AS `iata`,
          `LHS`.`icao` AS `icao`
   FROM `df_airports` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_airports`
      WHERE (`country` = 'Greenland')) AS RHS ON (LHS.apid = RHS.apid
                                                  AND LHS.name = RHS.name
                                                  AND LHS.city = RHS.city
                                                  AND LHS.country = RHS.country
                                                  AND LHS.x = RHS.x
                                                  AND LHS.y = RHS.y
                                                  AND LHS.elevation = RHS.elevation
                                                  AND LHS.iata = RHS.iata
                                                  AND LHS.icao = RHS.icao))
ORDER BY count_distinct_city_;",3,11,3,2,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/flight_4/0028,"summarise(input0, 'n = n()', ""'apid','city'""), summarise(line0, 'n = n()', ""'city'""), filter(line1, 'n > 2L')","SELECT city
FROM
  (SELECT city,
          COUNT() AS n
   FROM
     (SELECT apid,
             city,
             COUNT() AS n
      FROM df_airports
      GROUP BY apid,
               city)
   GROUP BY city)
WHERE (n > 2)
ORDER BY city;",3,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0
spider/flight_4/0031,"summarise(input0, 'meanelevation = mean(elevation, na.rm = T)', ""'country'"")","SELECT meanelevation AS avg_elevation_,
       country
FROM
  (SELECT country,
          AVG(elevation) AS meanelevation
   FROM df_airports
   GROUP BY country)
ORDER BY avg_elevation_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/city_record/0002,"filter(input0, ""competition == '1994 FIFA World Cup qualification'"")","SELECT `match_id`
FROM `df_match`
WHERE (`competition` = '1994 FIFA World Cup qualification')
ORDER BY match_id;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/city_record/0017,"summarise(input0, 'n = n()', ""'competition'""), semi_join(line0, input0)","SELECT n AS count___,
       competition
FROM
  (SELECT *
   FROM
     (SELECT competition,
             COUNT() AS n
      FROM df_match
      GROUP BY competition) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_match AS RHS
        WHERE (LHS.competition = RHS.competition) ))
ORDER BY count___;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/city_record/0008,"limit(input0, 'desc(regional_population)')","SELECT city
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_city
      ORDER BY regional_population DESC)
   LIMIT 3);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/city_record/0015,"filter(input0, 'regional_population > 10000000L')","SELECT city
FROM df_city
WHERE (regional_population > 10000000)
ORDER BY city;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/city_record/0005,"natural_join3(input0, input1, input2), filter(line0, ""city == 'Nanjing ( Jiangsu )' | competition != '1994 FIFA World Cup qualification'"")","SELECT DISTINCT `venue`
FROM
  (SELECT `LHS`.`city_id` AS `city_id`,
          `LHS`.`city` AS `city`,
          `LHS`.`hanzi` AS `hanzi`,
          `LHS`.`hanyu_pinyin` AS `hanyu_pinyin`,
          `LHS`.`regional_population` AS `regional_population`,
          `LHS`.`gdp` AS `gdp`,
          `LHS`.`match_id` AS `match_id`,
          `LHS`.`date` AS `date`,
          `LHS`.`venue` AS `venue`,
          `LHS`.`score` AS `score`,
          `LHS`.`result` AS `result`,
          `LHS`.`competition` AS `competition`,
          `RHS`.`year` AS `year`,
          `RHS`.`host_city` AS `host_city`
   FROM
     (SELECT `LHS`.`city_id` AS `city_id`,
             `LHS`.`city` AS `city`,
             `LHS`.`hanzi` AS `hanzi`,
             `LHS`.`hanyu_pinyin` AS `hanyu_pinyin`,
             `LHS`.`regional_population` AS `regional_population`,
             `LHS`.`gdp` AS `gdp`,
             `RHS`.`match_id` AS `match_id`,
             `RHS`.`date` AS `date`,
             `RHS`.`venue` AS `venue`,
             `RHS`.`score` AS `score`,
             `RHS`.`result` AS `result`,
             `RHS`.`competition` AS `competition`
      FROM `df_city` AS `LHS`
      CROSS JOIN `df_match` AS `RHS`) AS `LHS`
   INNER JOIN `df_hosting_city` AS `RHS` ON (`LHS`.`match_id` = `RHS`.`match_id`))
WHERE (`city` = 'Nanjing ( Jiangsu )'
       OR `competition` != '1994 FIFA World Cup qualification')
ORDER BY venue;",2,10,3,1,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/city_record/0016,"filter(input0, 'regional_population >= 10000000L | regional_population <= 5000000L'), semi_join(input0, line0)","SELECT city
FROM
  (SELECT *
   FROM df_city AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_city
           WHERE (regional_population >= 10000000
                  OR regional_population <= 5000000)) AS RHS
        WHERE (LHS.city_id = RHS.city_id
               AND LHS.city = RHS.city
               AND LHS.hanzi = RHS.hanzi
               AND LHS.hanyu_pinyin = RHS.hanyu_pinyin
               AND LHS.regional_population = RHS.regional_population
               AND LHS.gdp = RHS.gdp) ))
ORDER BY city;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/city_record/0018,df_match,"SELECT venue
FROM df_match
ORDER BY venue;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/city_record/0019,"limit(input0, 'hanzi')","SELECT gdp
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_city
      ORDER BY hanzi)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/city_record/0001,"limit(input0, 'desc(year)')","SELECT host_city
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_hosting_city
      ORDER BY YEAR DESC)
   LIMIT 1);",0,9,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/city_record/0009,"limit(input0, 'gdp')","SELECT city,
       gdp
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_city
      ORDER BY gdp)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/theme_gallery/0002,df_artist,"SELECT name,
       age,
       country
FROM df_artist
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/theme_gallery/0017,"filter(input1, 'year == 2004L'), anti_join(input0, line0, ""'artist_id'"")","SELECT name
FROM
  (SELECT *
   FROM df_artist AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_exhibition
           WHERE (YEAR = 2004)) AS RHS
        WHERE (LHS.artist_id = RHS.artist_id) ))
ORDER BY name;",2,14,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/theme_gallery/0008,"filter(input0, 'year != 2005L'), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_exhibition
WHERE (YEAR != 2005)
ORDER BY count___;",2,6,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/theme_gallery/0003,"intersect(input0, input0, 'country')","SELECT country
FROM
  (SELECT country
   FROM df_artist INTERSECT SELECT country
   FROM df_artist)
ORDER BY country;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/theme_gallery/0006,"filter(input0, ""country == 'United States'""), mutate(line0, 'meanage = mean(age, na.rm = T)'), mutate(line1, 'age = min(age)')","SELECT DISTINCT `meanage` AS `avg_age_`,
                MIN(`age`) OVER () AS `min_age_`
FROM
  (SELECT `artist_id`,
          `name`,
          `country`,
          `year_join`,
          `age`,
          AVG(`age`) OVER () AS `meanage`
   FROM
     (SELECT *
      FROM `df_artist`
      WHERE (`country` = 'United States')))
ORDER BY avg_age_;",3,10,3,1,3,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0
spider/theme_gallery/0004,"filter(input0, ""country != 'United States'""), semi_join(input0, line0)","SELECT `name`,
       `year_join`
FROM
  (SELECT *
   FROM `df_artist` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_artist`
           WHERE (`country` != 'United States')) AS RHS
        WHERE (LHS.artist_id = RHS.artist_id
               AND LHS.name = RHS.name
               AND LHS.country = RHS.country
               AND LHS.year_join = RHS.year_join
               AND LHS.age = RHS.age) ))
ORDER BY name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/theme_gallery/0012,"anti_join(input0, input1, ""'artist_id'"")","SELECT name
FROM
  (SELECT *
   FROM df_artist AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_exhibition AS RHS
        WHERE (LHS.artist_id = RHS.artist_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/theme_gallery/0015,"intersect(input0, input0, 'theme'), left_join(line0, input0)","SELECT theme,
       YEAR
FROM
  (SELECT LHS.theme AS theme,
          RHS.exhibition_id AS exhibition_id,
          RHS.year AS YEAR,
          RHS.artist_id AS artist_id,
          RHS.ticket_price AS ticket_price
   FROM
     (SELECT theme
      FROM df_exhibition INTERSECT SELECT theme
      FROM df_exhibition) AS LHS
   LEFT JOIN df_exhibition AS RHS ON (LHS.theme = RHS.theme))
ORDER BY theme;",2,12,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0
spider/theme_gallery/0005,"filter(input0, 'age > 46L & year_join > 1990L'), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_artist
WHERE (age > 46
       AND year_join > 1990)
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/theme_gallery/0016,"filter(input0, 'year == 2004L'), natural_join3(input0, input1, line0)","SELECT theme, date, attendance
FROM
  (SELECT LHS.exhibition_id AS exhibition_id,
          LHS.year AS YEAR,
          LHS.theme AS theme,
          LHS.artist_id AS artist_id,
          LHS.ticket_price AS ticket_price,
          LHS.date AS date,
          LHS.attendance AS attendance
   FROM
     (SELECT LHS.exhibition_id AS exhibition_id,
             LHS.year AS YEAR,
             LHS.theme AS theme,
             LHS.artist_id AS artist_id,
             LHS.ticket_price AS ticket_price,
             RHS.date AS date,
             RHS.attendance AS attendance
      FROM df_exhibition AS LHS
      INNER JOIN df_exhibition_record AS RHS ON (LHS.exhibition_id = RHS.exhibition_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_exhibition
      WHERE (YEAR = 2004)) AS RHS ON (LHS.exhibition_id = RHS.exhibition_id
                                      AND LHS.year = RHS.year
                                      AND LHS.theme = RHS.theme
                                      AND LHS.artist_id = RHS.artist_id
                                      AND LHS.ticket_price = RHS.ticket_price))
ORDER BY theme;",2,14,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/theme_gallery/0020,"natural_join3(input0, input1, input2), filter(line0, 'attendance > 200L'), mutate(line1, 'meanattendance = mean(attendance, na.rm = T)')","SELECT DISTINCT name
FROM
  (SELECT LHS.artist_id AS artist_id,
          LHS.name AS name,
          LHS.country AS country,
          LHS.year_join AS year_join,
          LHS.age AS age,
          LHS.exhibition_id AS exhibition_id,
          LHS.year AS YEAR,
          LHS.theme AS theme,
          LHS.ticket_price AS ticket_price,
          RHS.date AS date,
          RHS.attendance AS attendance
   FROM
     (SELECT LHS.artist_id AS artist_id,
             LHS.name AS name,
             LHS.country AS country,
             LHS.year_join AS year_join,
             LHS.age AS age,
             RHS.exhibition_id AS exhibition_id,
             RHS.year AS YEAR,
             RHS.theme AS theme,
             RHS.ticket_price AS ticket_price
      FROM df_artist AS LHS
      INNER JOIN df_exhibition AS RHS ON (LHS.artist_id = RHS.artist_id)) AS LHS
   INNER JOIN df_exhibition_record AS RHS ON (LHS.exhibition_id = RHS.exhibition_id))
WHERE (attendance > 200)
ORDER BY name;",3,12,3,1,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0
spider/theme_gallery/0019,"filter(input1, 'attendance >= 100L | attendance != 10L'), natural_join(input0, line0), mutate(line1, 'n_distinct = n_distinct(attendance)')","SELECT DISTINCT COUNT(DISTINCT attendance) OVER () AS count___
FROM
  (SELECT LHS.exhibition_id AS exhibition_id,
          LHS.year AS YEAR,
          LHS.theme AS theme,
          LHS.artist_id AS artist_id,
          LHS.ticket_price AS ticket_price,
          RHS.date AS date,
          RHS.attendance AS attendance
   FROM df_exhibition AS LHS
   INNER JOIN
     (SELECT *
      FROM df_exhibition_record
      WHERE (attendance >= 100
             OR attendance != 10)) AS RHS ON (LHS.exhibition_id = RHS.exhibition_id))
ORDER BY count___;",3,13,3,2,3,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/theme_gallery/0007,"limit(input0, 'desc(year_join)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_artist
      ORDER BY year_join DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/theme_gallery/0001,"summarise(input0, 'n = n()', ""'age','year_join'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT age,
             year_join,
             COUNT() AS n
      FROM df_artist
      GROUP BY age,
               year_join))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/theme_gallery/0009,"filter(input0, 'ticket_price < 15')","SELECT theme,
       YEAR
FROM df_exhibition
WHERE (ticket_price < 15.0)
ORDER BY theme;",1,4,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/theme_gallery/0011,"summarise(input1, 'n = n()', ""'ticket_price','year'""), inner_join(input0, line0, ""'artist_id' = 'n'"")","SELECT DISTINCT name,
                country
FROM
  (SELECT LHS.artist_id AS artist_id,
          LHS.name AS name,
          LHS.country AS country,
          LHS.year_join AS year_join,
          LHS.age AS age,
          RHS.ticket_price AS ticket_price,
          RHS.year AS YEAR
   FROM df_artist AS LHS
   INNER JOIN
     (SELECT ticket_price,
             YEAR,
             COUNT() AS n
      FROM df_exhibition
      GROUP BY ticket_price,
               YEAR) AS RHS ON (LHS.artist_id = RHS.n))
ORDER BY name;",2,11,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/theme_gallery/0010,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'name'"")","SELECT name,
       n AS count___
FROM
  (SELECT name,
          COUNT() AS n
   FROM
     (SELECT LHS.artist_id AS artist_id,
             LHS.name AS name,
             LHS.country AS country,
             LHS.year_join AS year_join,
             LHS.age AS age,
             RHS.exhibition_id AS exhibition_id,
             RHS.year AS YEAR,
             RHS.theme AS theme,
             RHS.ticket_price AS ticket_price
      FROM df_artist AS LHS
      INNER JOIN df_exhibition AS RHS ON (LHS.artist_id = RHS.artist_id))
   GROUP BY name)
ORDER BY name;",2,8,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/culture_company/0002,"filter(input0, 'year != 1989L'), semi_join(line0, input0)","SELECT book_title,
       author_or_editor
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_book_club
      WHERE (YEAR != 1989)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_book_club AS RHS
        WHERE (LHS.book_club_id = RHS.book_club_id
               AND LHS.year = RHS.year
               AND LHS.author_or_editor = RHS.author_or_editor
               AND LHS.book_title = RHS.book_title
               AND LHS.publisher = RHS.publisher
               AND LHS.category = RHS.category
               AND LHS.result = RHS.result) ))
ORDER BY book_title;",2,13,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/culture_company/0008,"filter(input0, 'year != 1989L | year <= 2L'), summarise(line0, 'n = n()', ""'category','result'"")","SELECT DISTINCT category
FROM
  (SELECT category,
          RESULT,
          COUNT() AS n
   FROM
     (SELECT *
      FROM df_book_club
      WHERE (YEAR != 1989
             OR YEAR <= 2))
   GROUP BY category,
            RESULT)
ORDER BY category;",2,13,3,1,3,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/culture_company/0003,df_book_club,"SELECT DISTINCT publisher
FROM df_book_club
ORDER BY publisher;",1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/culture_company/0013,"filter(input0, 'year >= 2000L'), limit(line0, 'desc(title)')","SELECT title,
       director
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM df_movie
         WHERE (YEAR >= 2000))
      ORDER BY title DESC)
   LIMIT 1);",1,12,4,0,4,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/culture_company/0006,"summarise(input0, 'n = n()', ""'category','publisher'""), limit(line0, 'desc(category)')","SELECT publisher
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT category,
                publisher,
                COUNT() AS n
         FROM df_book_club
         GROUP BY category,
                  publisher)
      ORDER BY category DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/culture_company/0012,"mutate(input0, 'n_distinct = n_distinct(director)')","SELECT DISTINCT COUNT(DISTINCT director) OVER () AS count__distinct_director_
FROM df_movie
ORDER BY count__distinct_director_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/culture_company/0015,"filter(input0, 'year >= 1999L & year <= 2000L'), filter(line0, 'year == 1999L | year >= 2000L')","SELECT director
FROM
  (SELECT *
   FROM df_movie
   WHERE (YEAR >= 1999
          AND YEAR <= 2000))
WHERE (YEAR = 1999
       OR YEAR >= 2000)
ORDER BY director;",2,11,2,0,2,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/culture_company/0005,"summarise(input0, 'n = n()', ""'publisher'"")","SELECT publisher,
       n AS count___
FROM
  (SELECT publisher,
          COUNT() AS n
   FROM df_book_club
   GROUP BY publisher)
ORDER BY publisher;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/culture_company/0007,"summarise(input0, 'n = n()', ""'category'"")","SELECT category,
       n AS count___
FROM
  (SELECT category,
          COUNT() AS n
   FROM df_book_club
   GROUP BY category)
ORDER BY category;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/culture_company/0001,"mutate(input0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_book_club
ORDER BY count___;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/culture_company/0009,"filter(input0, 'year != 1989L & year >= 1990L')","SELECT publisher
FROM df_book_club
WHERE (YEAR != 1989
       AND YEAR >= 1990)
ORDER BY publisher;",1,5,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/culture_company/0011,df_movie,"SELECT title,
       YEAR,
       director
FROM df_movie
ORDER BY title;",0,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/race_track/0002,df_track,"SELECT name,
       LOCATION
FROM df_track
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/race_track/0008,"summarise(input0, 'n = n()', ""'date','race_id'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT date, race_id,
                   COUNT() AS n
      FROM df_race
      GROUP BY date, race_id))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/race_track/0003,"filter(input0, 'year_opened > 2000')","SELECT name,
       seating
FROM df_track
WHERE (year_opened > 2000.0)
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/race_track/0013,"summarise(input0, 'n = n()', ""'race_id'""), left_join(input0, line0)","SELECT DISTINCT CLASS
FROM
  (SELECT LHS.race_id AS race_id,
          LHS.name AS name,
          LHS.class AS CLASS,
          LHS.date AS date,
          LHS.track_id AS track_id,
          RHS.n AS n
   FROM df_race AS LHS
   LEFT JOIN
     (SELECT race_id,
             COUNT() AS n
      FROM df_race
      GROUP BY race_id) AS RHS ON (LHS.race_id = RHS.race_id))
ORDER BY CLASS;",2,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/race_track/0006,"mutate(input0, 'meanseating = mean(seating, na.rm = T)'), filter(line0, 'meanseating < seating')","SELECT name,
       LOCATION,
       year_opened
FROM
  (SELECT track_id,
          name,
          LOCATION,
          seating,
          year_opened,
          AVG(seating) OVER () AS meanseating
   FROM df_track)
WHERE (meanseating < seating)
ORDER BY name;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/race_track/0004,"limit(input0, 'desc(year_opened)')","SELECT name,
       LOCATION,
       seating
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_track
      ORDER BY year_opened DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/race_track/0012,"summarise(input0, 'n = n()', ""'class','name'""), limit(line0, 'desc(name)')","SELECT CLASS
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT CLASS,
                name,
                COUNT() AS n
         FROM df_race
         GROUP BY CLASS,
                  name)
      ORDER BY name DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/race_track/0015,"cross_join(input1, input0, 'track_id >= track_id.other & track_id == track_id.other'), anti_join(input1, line0, ""'name','year_opened'"")","SELECT name
FROM
  (SELECT *
   FROM df_track AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT LHS.track_id AS track_id,
                     LHS.name AS name,
                     LHS.location AS LOCATION,
                     LHS.seating AS seating,
                     LHS.year_opened AS year_opened,
                     RHS.race_id AS race_id,
                     RHS.name AS name_other,
                     RHS.class AS CLASS,
                     RHS.date AS date,
                     RHS.track_id AS track_id_other
              FROM df_track AS LHS
              CROSS JOIN df_race AS RHS)
           WHERE (track_id >= track_id_other
                  AND track_id = track_id_other)) AS RHS
        WHERE (LHS.name = RHS.name
               AND LHS.year_opened = RHS.year_opened) ))
ORDER BY name;",2,15,5,0,5,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0
spider/race_track/0005,"mutate(input0, 'minseating = min(seating)'), mutate(line0, 'meanseating = mean(seating, na.rm = T)'), mutate(line1, 'maxseating = max(seating)')","SELECT DISTINCT minseating AS min_seating_,
                MAX(seating) OVER () AS max_seating_,
                                  meanseating AS avg_seating_
FROM
  (SELECT track_id,
          name,
          LOCATION,
          seating,
          year_opened,
          minseating,
          AVG(seating) OVER () AS meanseating
   FROM
     (SELECT track_id,
             name,
             LOCATION,
             seating,
             year_opened,
             MIN(seating) OVER () AS minseating
      FROM df_track))
ORDER BY min_seating_;",3,10,3,1,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0
spider/race_track/0007,df_track,"SELECT LOCATION
FROM df_track
ORDER BY LOCATION;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/race_track/0001,"summarise(input0, 'n = n()', ""'location'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT LOCATION,
             COUNT() AS n
      FROM df_track
      GROUP BY LOCATION))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/race_track/0014,"filter(input0, ""class == 'GT'""), inner_join(line0, input1, ""'race_id' = 'track_id'""), anti_join(input1, line1, ""'track_id','year_opened'"")","SELECT `name`
FROM
  (SELECT *
   FROM `df_track` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT `race_id`,
                  `name`,
                  `class`,
                  `date`,
                  `race_id` AS `track_id`,
                  `name_other`,
                  `location`,
                  `seating`,
                  `year_opened`
           FROM
             (SELECT `LHS`.`race_id` AS `race_id`,
                     `LHS`.`name` AS `name`,
                     `LHS`.`class` AS `class`,
                     `LHS`.`date` AS `date`,
                     `LHS`.`track_id` AS `track_id`,
                     `RHS`.`name` AS `name_other`,
                     `RHS`.`location` AS `location`,
                     `RHS`.`seating` AS `seating`,
                     `RHS`.`year_opened` AS `year_opened`
              FROM
                (SELECT *
                 FROM `df_race`
                 WHERE (`class` = 'GT')) AS LHS
              INNER JOIN df_track AS RHS ON (LHS.race_id = RHS.track_id))) AS RHS
        WHERE (LHS.track_id = RHS.track_id
               AND LHS.year_opened = RHS.year_opened) ))
ORDER BY name;",3,18,6,0,6,1,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0
spider/race_track/0009,df_race,"SELECT DISTINCT CLASS
FROM df_race
ORDER BY CLASS;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/race_track/0011,"summarise(input0, 'n = n()', ""'class'""), semi_join(line0, input0)","SELECT CLASS,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT CLASS,
             COUNT() AS n
      FROM df_race
      GROUP BY CLASS) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_race AS RHS
        WHERE (LHS.class = RHS.class) ))
ORDER BY CLASS;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/race_track/0010,"intersect(input0, input0, 'name'), left_join(line0, input0)","SELECT name,
       CLASS, date
FROM
  (SELECT LHS.name AS name,
          RHS.race_id AS race_id,
          RHS.class AS CLASS,
          RHS.date AS date,
          RHS.track_id AS track_id
   FROM
     (SELECT name
      FROM df_race INTERSECT SELECT name
      FROM df_race) AS LHS
   LEFT JOIN df_race AS RHS ON (LHS.name = RHS.name))
ORDER BY name;",2,10,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0
spider/local_govt_mdm/0002,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'cmi_cross_ref_id','source_system_code'""), filter(line1, 'n == 1L')","SELECT cmi_cross_ref_id,
       source_system_code
FROM
  (SELECT cmi_cross_ref_id,
          source_system_code,
          COUNT() AS n
   FROM
     (SELECT LHS.cmi_cross_ref_id AS cmi_cross_ref_id,
             LHS.master_customer_id AS master_customer_id,
             LHS.source_system_code AS source_system_code,
             RHS.council_tax_id AS council_tax_id
      FROM df_cmi_cross_references AS LHS
      INNER JOIN df_council_tax AS RHS ON (LHS.cmi_cross_ref_id = RHS.cmi_cross_ref_id))
   GROUP BY cmi_cross_ref_id,
            source_system_code)
WHERE (n = 1)
ORDER BY cmi_cross_ref_id;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/local_govt_mdm/0008,"summarise(input0, 'n_distinct = n_distinct(source_system_code)', '')","SELECT n_distinct AS count_distinct_source_system_code_
FROM
  (SELECT COUNT(DISTINCT source_system_code) AS n_distinct
   FROM df_cmi_cross_references)
ORDER BY count_distinct_source_system_code_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/local_govt_mdm/0003,"summarise(input0, 'n = n()', ""'cmi_cross_ref_id','master_customer_id'""), semi_join(line0, input1)","SELECT cmi_cross_ref_id,
       master_customer_id,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT cmi_cross_ref_id,
             master_customer_id,
             COUNT() AS n
      FROM df_cmi_cross_references
      GROUP BY cmi_cross_ref_id,
               master_customer_id) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_business_rates AS RHS
        WHERE (LHS.cmi_cross_ref_id = RHS.cmi_cross_ref_id) ))
ORDER BY cmi_cross_ref_id;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/local_govt_mdm/0013,"anti_join(input0, input1, '')","SELECT cmi_cross_ref_id
FROM
  (SELECT *
   FROM df_cmi_cross_references AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_parking_fines AS RHS
        WHERE (LHS.cmi_cross_ref_id = RHS.cmi_cross_ref_id) ))
ORDER BY cmi_cross_ref_id;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/local_govt_mdm/0006,"natural_join(input0, input1), semi_join(input2, line0)","SELECT council_tax_id
FROM
  (SELECT *
   FROM df_rent_arrears AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT LHS.master_customer_id AS master_customer_id,
                  LHS.cmi_details AS cmi_details,
                  RHS.cmi_cross_ref_id AS cmi_cross_ref_id,
                  RHS.source_system_code AS source_system_code
           FROM df_customer_master_index AS LHS
           INNER JOIN df_cmi_cross_references AS RHS ON (LHS.master_customer_id = RHS.master_customer_id)) AS RHS
        WHERE (LHS.cmi_cross_ref_id = RHS.cmi_cross_ref_id) ))
ORDER BY council_tax_id;",2,12,4,0,4,1,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0
spider/local_govt_mdm/0004,"natural_join(input0, input1)","SELECT source_system_code,
       council_tax_id
FROM
  (SELECT LHS.cmi_cross_ref_id AS cmi_cross_ref_id,
          LHS.master_customer_id AS master_customer_id,
          LHS.source_system_code AS source_system_code,
          RHS.council_tax_id AS council_tax_id
   FROM df_cmi_cross_references AS LHS
   INNER JOIN df_benefits_overpayments AS RHS ON (LHS.cmi_cross_ref_id = RHS.cmi_cross_ref_id))
ORDER BY source_system_code;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/local_govt_mdm/0005,"natural_join(input0, input1), inner_join(line0, input1, ""'cmi_cross_ref_id','council_tax_id'"")","SELECT source_system_code,
       master_customer_id,
       council_tax_id
FROM
  (SELECT LHS.cmi_cross_ref_id AS cmi_cross_ref_id,
          LHS.master_customer_id AS master_customer_id,
          LHS.source_system_code AS source_system_code,
          LHS.council_tax_id AS council_tax_id
   FROM
     (SELECT LHS.cmi_cross_ref_id AS cmi_cross_ref_id,
             LHS.master_customer_id AS master_customer_id,
             LHS.source_system_code AS source_system_code,
             RHS.council_tax_id AS council_tax_id
      FROM df_cmi_cross_references AS LHS
      INNER JOIN df_parking_fines AS RHS ON (LHS.cmi_cross_ref_id = RHS.cmi_cross_ref_id)) AS LHS
   INNER JOIN df_parking_fines AS RHS ON (LHS.cmi_cross_ref_id = RHS.cmi_cross_ref_id
                                          AND LHS.council_tax_id = RHS.council_tax_id))
ORDER BY source_system_code;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0
spider/local_govt_mdm/0007,"filter(input0, ""source_system_code == 'Electoral' | source_system_code == 'Tax'""), semi_join(input1, line0)","SELECT `electoral_register_id`
FROM
  (SELECT *
   FROM `df_electoral_register` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_cmi_cross_references`
           WHERE (`source_system_code` = 'Electoral'
                  OR `source_system_code` = 'Tax')) AS RHS
        WHERE (LHS.cmi_cross_ref_id = RHS.cmi_cross_ref_id) ))
ORDER BY electoral_register_id;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/local_govt_mdm/0001,"filter(input1, ""source_system_code == 'Tax'""), natural_join(input0, line0)","SELECT `cmi_details`
FROM
  (SELECT `LHS`.`master_customer_id` AS `master_customer_id`,
          `LHS`.`cmi_details` AS `cmi_details`,
          `RHS`.`cmi_cross_ref_id` AS `cmi_cross_ref_id`,
          `RHS`.`source_system_code` AS `source_system_code`
   FROM `df_customer_master_index` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_cmi_cross_references`
      WHERE (`source_system_code` = 'Tax')) AS RHS ON (LHS.master_customer_id = RHS.master_customer_id))
ORDER BY cmi_details;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/local_govt_mdm/0009,df_customer_master_index,"SELECT master_customer_id,
       cmi_details
FROM df_customer_master_index
ORDER BY master_customer_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/local_govt_mdm/0011,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_rent_arrears)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/local_govt_mdm/0010,df_parking_fines,"SELECT council_tax_id,
       cmi_cross_ref_id
FROM df_parking_fines
ORDER BY council_tax_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/company_1/0002,"filter(input0, ""relationship == 'Spouse'"")","SELECT `dependent_name`
FROM `df_dependent`
WHERE (`relationship` = 'Spouse')
ORDER BY dependent_name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/company_1/0003,"summarise(input0, 'n = n()', ""'sex'""), filter(line0, ""sex == 'F'"")","SELECT `n` AS `count___`
FROM
  (SELECT `sex`,
          COUNT() AS `n`
   FROM `df_dependent`
   GROUP BY `sex`)
WHERE (`sex` = 'F')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/company_1/0006,"filter(input0, 'salary < 50000L'), summarise(line0, 'n = n()', ""'sex'"")","SELECT n AS count___,
       sex
FROM
  (SELECT sex,
          COUNT() AS n
   FROM
     (SELECT *
      FROM df_employee
      WHERE (salary < 50000))
   GROUP BY sex)
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/company_1/0004,"filter(input1, ""dlocation == 'Houston'""), natural_join3(input0, input1, line0)","SELECT `dname`
FROM
  (SELECT `LHS`.`dname` AS `dname`,
          `LHS`.`dnumber` AS `dnumber`,
          `LHS`.`mgr_ssn` AS `mgr_ssn`,
          `LHS`.`mgr_start_date` AS `mgr_start_date`,
          `LHS`.`dlocation` AS `dlocation`
   FROM
     (SELECT `LHS`.`dname` AS `dname`,
             `LHS`.`dnumber` AS `dnumber`,
             `LHS`.`mgr_ssn` AS `mgr_ssn`,
             `LHS`.`mgr_start_date` AS `mgr_start_date`,
             `RHS`.`dlocation` AS `dlocation`
      FROM `df_department` AS `LHS`
      INNER JOIN `df_dept_locations` AS `RHS` ON (`LHS`.`dnumber` = `RHS`.`dnumber`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_dept_locations`
      WHERE (`dlocation` = 'Houston')) AS RHS ON (LHS.dnumber = RHS.dnumber
                                                  AND LHS.dlocation = RHS.dlocation))
ORDER BY dname;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/company_1/0005,"filter(input0, 'salary > 30000L')","SELECT fname,
       lname
FROM df_employee
WHERE (salary > 30000)
ORDER BY fname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/company_1/0007,df_employee,"SELECT fname,
       lname,
       address
FROM df_employee
ORDER BY fname;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/company_1/0001,df_department,"SELECT dname
FROM df_department
ORDER BY dname;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/soccer_1/0002,"filter(input0, ""name != 'England'""), summarise(input1, 'n_distinct = n_distinct(name)', ""'name'""), left_join(line1, line0)","SELECT DISTINCT `n_distinct` AS `count___`
FROM
  (SELECT `LHS`.`name` AS `name`,
          `LHS`.`n_distinct` AS `n_distinct`,
          `RHS`.`id` AS `id`,
          `RHS`.`country_id` AS `country_id`
   FROM
     (SELECT `name`,
             COUNT(DISTINCT `name`) AS `n_distinct`
      FROM `df_country`
      GROUP BY `name`) AS `LHS`
   LEFT JOIN
     (SELECT *
      FROM `df_league`
      WHERE (`name` != 'England')) AS RHS ON (LHS.name = RHS.name))
ORDER BY count___;",3,12,4,2,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/soccer_1/0001,"left_join(input1, input0), inner_join(line0, input0, ""'id'"")","SELECT name AS name___1,
       name_other AS name___2
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.country_id AS country_id,
          RHS.country_id AS country_id_other,
          RHS.name AS name_other
   FROM
     (SELECT LHS.id AS id,
             LHS.name AS name,
             RHS.country_id AS country_id
      FROM df_country AS LHS
      LEFT JOIN df_league AS RHS ON (LHS.id = RHS.id
                                     AND LHS.name = RHS.name)) AS LHS
   INNER JOIN df_league AS RHS ON (LHS.id = RHS.id))
ORDER BY name___1;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0002,df_bookings,"SELECT order_date
FROM df_bookings
ORDER BY order_date;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0036,"summarise(input0, 'n = n()', ""'status_code','store_id'""), limit(line0, 'desc(n)')","SELECT status_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT status_code,
                store_id,
                COUNT() AS n
         FROM df_bookings
         GROUP BY status_code,
                  store_id)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0008,df_invoices,"SELECT DISTINCT payment_method_code
FROM df_invoices
ORDER BY payment_method_code;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0003,"intersect(input0, input0, 'planned_delivery_date'), inner_join(line0, input0, ""'planned_delivery_date'"")","SELECT planned_delivery_date,
       actual_delivery_date
FROM
  (SELECT LHS.planned_delivery_date AS planned_delivery_date,
          RHS.booking_id AS booking_id,
          RHS.customer_id AS customer_id,
          RHS.workshop_group_id AS workshop_group_id,
          RHS.status_code AS status_code,
          RHS.store_id AS store_id,
          RHS.order_date AS order_date,
          RHS.actual_delivery_date AS actual_delivery_date,
          RHS.other_order_details AS other_order_details
   FROM
     (SELECT planned_delivery_date
      FROM df_bookings INTERSECT SELECT planned_delivery_date
      FROM df_bookings) AS LHS
   INNER JOIN df_bookings AS RHS ON (LHS.planned_delivery_date = RHS.planned_delivery_date))
ORDER BY planned_delivery_date;",2,10,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0
spider/cre_Drama_Workshop_Groups/0022,"natural_join(input0, input1)","SELECT store_phone,
       store_email_address
FROM
  (SELECT LHS.workshop_group_id AS workshop_group_id,
          LHS.address_id AS address_id,
          LHS.currency_code AS currency_code,
          LHS.marketing_region_code AS marketing_region_code,
          LHS.store_name AS store_name,
          LHS.store_phone AS store_phone,
          LHS.store_email_address AS store_email_address,
          LHS.other_details AS other_details,
          RHS.service_id AS service_id,
          RHS.service_type_code AS service_type_code,
          RHS.product_description AS product_description,
          RHS.product_name AS product_name,
          RHS.product_price AS product_price,
          RHS.other_product_service_details AS other_product_service_details
   FROM df_drama_workshop_groups AS LHS
   INNER JOIN df_services AS RHS ON (LHS.workshop_group_id = RHS.workshop_group_id))
ORDER BY store_phone;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0030,"mutate(input0, 'n_distinct = n_distinct(currency_code)')","SELECT DISTINCT COUNT(DISTINCT currency_code) OVER () AS count_distinct_currency_code_
FROM df_drama_workshop_groups
ORDER BY count_distinct_currency_code_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0013,"filter(input0, ""customer_name == 'Ashley'"")","SELECT `customer_phone`
FROM `df_performers`
WHERE (`customer_name` = 'Ashley')
ORDER BY customer_phone;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0006,df_drama_workshop_groups,"SELECT store_name
FROM df_drama_workshop_groups
ORDER BY store_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0004,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_customers)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0012,df_products,"SELECT product_name
FROM df_products
ORDER BY product_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0015,"summarise(input0, 'n = n()', ""'other_item_details','payment_method_code'""), limit(line0, 'desc(n)')","SELECT payment_method_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT other_item_details,
                payment_method_code,
                COUNT() AS n
         FROM df_invoices
         GROUP BY other_item_details,
                  payment_method_code)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0005,"filter(input0, ""customer_name == 'Harold'""), filter(line0, ""customer_name == 'Harold'"")","SELECT `customer_phone`,
       `customer_email_address`
FROM
  (SELECT *
   FROM `df_customers`
   WHERE (`customer_name` = 'Harold'))
WHERE (`customer_name` = 'Harold')
ORDER BY customer_phone;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0018,"filter(input1, ""store_name == 'Rob Dinning'""), inner_join(line0, input0, ""'marketing_region_code'"")","SELECT `marketing_region_name`
FROM
  (SELECT `LHS`.`store_id` AS `store_id`,
          `LHS`.`address_id` AS `address_id`,
          `LHS`.`marketing_region_code` AS `marketing_region_code`,
          `LHS`.`store_name` AS `store_name`,
          `LHS`.`store_phone` AS `store_phone`,
          `LHS`.`store_email_address` AS `store_email_address`,
          `LHS`.`other_details` AS `other_details`,
          `RHS`.`marketing_region_name` AS `marketing_region_name`,
          `RHS`.`marketing_region_descriptrion` AS `marketing_region_descriptrion`,
          `RHS`.`other_details` AS `other_details_other`
   FROM
     (SELECT *
      FROM `df_stores`
      WHERE (`store_name` = 'Rob Dinning')) AS LHS
   INNER JOIN df_marketing_regions AS RHS ON (LHS.marketing_region_code = RHS.marketing_region_code))
ORDER BY marketing_region_name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0041,"filter(input1, ""product_name != 'photo' & product_name != 'film'""), intersect(input1, line0, 'workshop_group_id'), natural_join3(input0, input1, line1), filter(line2, ""product_name == 'photo' | product_name == 'film'"")","SELECT `service_type_description`
FROM
  (SELECT `LHS`.`service_type_code` AS `service_type_code`,
          `LHS`.`parent_service_type_code` AS `parent_service_type_code`,
          `LHS`.`service_type_description` AS `service_type_description`,
          `LHS`.`service_id` AS `service_id`,
          `LHS`.`workshop_group_id` AS `workshop_group_id`,
          `LHS`.`product_description` AS `product_description`,
          `LHS`.`product_name` AS `product_name`,
          `LHS`.`product_price` AS `product_price`,
          `LHS`.`other_product_service_details` AS `other_product_service_details`
   FROM
     (SELECT `LHS`.`service_type_code` AS `service_type_code`,
             `LHS`.`parent_service_type_code` AS `parent_service_type_code`,
             `LHS`.`service_type_description` AS `service_type_description`,
             `RHS`.`service_id` AS `service_id`,
             `RHS`.`workshop_group_id` AS `workshop_group_id`,
             `RHS`.`product_description` AS `product_description`,
             `RHS`.`product_name` AS `product_name`,
             `RHS`.`product_price` AS `product_price`,
             `RHS`.`other_product_service_details` AS `other_product_service_details`
      FROM `df_ref_service_types` AS `LHS`
      INNER JOIN `df_services` AS `RHS` ON (`LHS`.`service_type_code` = `RHS`.`service_type_code`)) AS `LHS`
   INNER JOIN
     (SELECT `workshop_group_id`
      FROM `df_services` INTERSECT SELECT `workshop_group_id`
      FROM `df_services`
      WHERE (`product_name` != 'photo'
             AND `product_name` != 'film')) AS `RHS` ON (`LHS`.`workshop_group_id` = `RHS`.`workshop_group_id`))
WHERE (`product_name` = 'photo'
       OR `product_name` = 'film')
ORDER BY service_type_description;",4,16,5,0,5,2,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,1,0
spider/cre_Drama_Workshop_Groups/0020,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'service_type_code','service_type_description'"")","SELECT service_type_description,
       service_type_code,
       n AS count___
FROM
  (SELECT service_type_code,
          service_type_description,
          COUNT() AS n
   FROM
     (SELECT LHS.service_type_code AS service_type_code,
             LHS.parent_service_type_code AS parent_service_type_code,
             LHS.service_type_description AS service_type_description,
             RHS.service_id AS service_id,
             RHS.workshop_group_id AS workshop_group_id,
             RHS.product_description AS product_description,
             RHS.product_name AS product_name,
             RHS.product_price AS product_price,
             RHS.other_product_service_details AS other_product_service_details
      FROM df_ref_service_types AS LHS
      INNER JOIN df_services AS RHS ON (LHS.service_type_code = RHS.service_type_code))
   GROUP BY service_type_code,
            service_type_description)
ORDER BY service_type_description;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0019,"filter(input1, 'product_price > 100'), natural_join(input0, line0)","SELECT service_type_description
FROM
  (SELECT LHS.service_type_code AS service_type_code,
          LHS.parent_service_type_code AS parent_service_type_code,
          LHS.service_type_description AS service_type_description,
          RHS.service_id AS service_id,
          RHS.workshop_group_id AS workshop_group_id,
          RHS.product_description AS product_description,
          RHS.product_name AS product_name,
          RHS.product_price AS product_price,
          RHS.other_product_service_details AS other_product_service_details
   FROM df_ref_service_types AS LHS
   INNER JOIN
     (SELECT *
      FROM df_services
      WHERE (product_price > 100.0)) AS RHS ON (LHS.service_type_code = RHS.service_type_code))
ORDER BY service_type_description;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0034,"summarise(input0, 'n = n()', ""'marketing_region_code','store_email_address'""), limit(line0, 'desc(store_email_address)')","SELECT marketing_region_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT marketing_region_code,
                store_email_address,
                COUNT() AS n
         FROM df_drama_workshop_groups
         GROUP BY marketing_region_code,
                  store_email_address)
      ORDER BY store_email_address DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0024,"summarise(input0, 'meanproduct_price = mean(product_price, na.rm = T)', ""'product_description','product_name'"")","SELECT product_name,
       meanproduct_price AS avg_product_price_
FROM
  (SELECT product_description,
          product_name,
          AVG(product_price) AS meanproduct_price
   FROM df_products
   GROUP BY product_description,
            product_name)
ORDER BY product_name;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0021,"summarise(input1, 'n = n()', ""'service_type_code','workshop_group_id'""), cross_join(line0, line0, 'n > n.other'), natural_join4(input0, input1, line0, line1)","SELECT DISTINCT service_type_description,
                service_type_code
FROM
  (SELECT LHS.service_type_code AS service_type_code,
          LHS.parent_service_type_code AS parent_service_type_code,
          LHS.service_type_description AS service_type_description,
          LHS.service_id AS service_id,
          LHS.workshop_group_id AS workshop_group_id,
          LHS.product_description AS product_description,
          LHS.product_name AS product_name,
          LHS.product_price AS product_price,
          LHS.other_product_service_details AS other_product_service_details,
          LHS.n AS n,
          RHS.service_type_code_other AS service_type_code_other,
          RHS.workshop_group_id_other AS workshop_group_id_other,
          RHS.n_other AS n_other
   FROM
     (SELECT LHS.service_type_code AS service_type_code,
             LHS.parent_service_type_code AS parent_service_type_code,
             LHS.service_type_description AS service_type_description,
             LHS.service_id AS service_id,
             LHS.workshop_group_id AS workshop_group_id,
             LHS.product_description AS product_description,
             LHS.product_name AS product_name,
             LHS.product_price AS product_price,
             LHS.other_product_service_details AS other_product_service_details,
             RHS.n AS n
      FROM
        (SELECT LHS.service_type_code AS service_type_code,
                LHS.parent_service_type_code AS parent_service_type_code,
                LHS.service_type_description AS service_type_description,
                RHS.service_id AS service_id,
                RHS.workshop_group_id AS workshop_group_id,
                RHS.product_description AS product_description,
                RHS.product_name AS product_name,
                RHS.product_price AS product_price,
                RHS.other_product_service_details AS other_product_service_details
         FROM df_ref_service_types AS LHS
         INNER JOIN df_services AS RHS ON (LHS.service_type_code = RHS.service_type_code)) AS LHS
      INNER JOIN
        (SELECT service_type_code,
                workshop_group_id,
                COUNT() AS n
         FROM df_services
         GROUP BY service_type_code,
                  workshop_group_id) AS RHS ON (LHS.service_type_code = RHS.service_type_code
                                                AND LHS.workshop_group_id = RHS.workshop_group_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT LHS.service_type_code AS service_type_code,
                LHS.workshop_group_id AS workshop_group_id,
                LHS.n AS n,
                RHS.service_type_code AS service_type_code_other,
                RHS.workshop_group_id AS workshop_group_id_other,
                RHS.n AS n_other
         FROM
           (SELECT service_type_code,
                   workshop_group_id,
                   COUNT() AS n
            FROM df_services
            GROUP BY service_type_code,
                     workshop_group_id) AS LHS
         CROSS JOIN
           (SELECT service_type_code,
                   workshop_group_id,
                   COUNT() AS n
            FROM df_services
            GROUP BY service_type_code,
                     workshop_group_id) AS RHS)
      WHERE (n > n_other)) AS RHS ON (LHS.service_type_code = RHS.service_type_code
                                      AND LHS.workshop_group_id = RHS.workshop_group_id
                                      AND LHS.n = RHS.n))
ORDER BY service_type_description;",3,23,9,1,9,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0
spider/cre_Drama_Workshop_Groups/0023,"filter(input1, ""product_name == 'film'""), semi_join(input0, line0)","SELECT `store_phone`,
       `store_email_address`
FROM
  (SELECT *
   FROM `df_drama_workshop_groups` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_services`
           WHERE (`product_name` = 'film')) AS RHS
        WHERE (LHS.workshop_group_id = RHS.workshop_group_id) ))
ORDER BY store_phone;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/cre_Drama_Workshop_Groups/0001,"summarise(input0, 'n = n()', ""'booking_id','planned_delivery_date'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT booking_id,
          planned_delivery_date,
          COUNT() AS n
   FROM df_bookings
   GROUP BY booking_id,
            planned_delivery_date)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0014,"summarise(input0, 'n = n()', ""'payment_method_code'"")","SELECT payment_method_code,
       n AS count___
FROM
  (SELECT payment_method_code,
          COUNT() AS n
   FROM df_invoices
   GROUP BY payment_method_code)
ORDER BY payment_method_code;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0025,"summarise(input0, 'meanproduct_price = mean(product_price, na.rm = T)', ""'product_description','product_name'""), filter(line0, 'meanproduct_price < 1000000')","SELECT product_name
FROM
  (SELECT product_description,
          product_name,
          AVG(product_price) AS meanproduct_price
   FROM df_products
   GROUP BY product_description,
            product_name)
WHERE (meanproduct_price < 1000000.0)
ORDER BY product_name;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0011,"limit(input0, 'desc(product_price)')","SELECT product_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_products
      ORDER BY product_price DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0010,"mutate(input0, 'meanproduct_price = mean(product_price, na.rm = T)'), filter(line0, 'meanproduct_price < product_price')","SELECT DISTINCT product_name
FROM
  (SELECT product_id,
          product_name,
          product_price,
          product_description,
          other_product_service_details,
          AVG(product_price) OVER () AS meanproduct_price
   FROM df_products)
WHERE (meanproduct_price < product_price)
ORDER BY product_name;",2,7,2,1,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0040,"summarise(input0, 'n = n()', ""'payment_method_code'""), limit(line0, 'payment_method_code')","SELECT n AS product_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT payment_method_code,
                COUNT() AS n
         FROM df_invoices
         GROUP BY payment_method_code)
      ORDER BY payment_method_code)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Drama_Workshop_Groups/0028,"filter(input1, 'order_quantity == 1L'), natural_join(input0, line0)","SELECT actual_delivery_date
FROM
  (SELECT LHS.order_id AS order_id,
          LHS.customer_id AS customer_id,
          LHS.store_id AS store_id,
          LHS.order_date AS order_date,
          LHS.planned_delivery_date AS planned_delivery_date,
          LHS.actual_delivery_date AS actual_delivery_date,
          LHS.other_order_details AS other_order_details,
          RHS.order_item_id AS order_item_id,
          RHS.product_id AS product_id,
          RHS.order_quantity AS order_quantity,
          RHS.other_item_details AS other_item_details
   FROM df_customer_orders AS LHS
   INNER JOIN
     (SELECT *
      FROM df_order_items
      WHERE (order_quantity = 1)) AS RHS ON (LHS.order_id = RHS.order_id))
ORDER BY actual_delivery_date;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/assets_maintenance/0002,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'maintenance_contract_id','other_contract_details'"")","SELECT n AS count___,
       maintenance_contract_id
FROM
  (SELECT maintenance_contract_id,
          other_contract_details,
          COUNT() AS n
   FROM
     (SELECT LHS.maintenance_contract_id AS maintenance_contract_id,
             LHS.maintenance_contract_company_id AS maintenance_contract_company_id,
             LHS.contract_start_date AS contract_start_date,
             LHS.contract_end_date AS contract_end_date,
             LHS.other_contract_details AS other_contract_details,
             RHS.asset_id AS asset_id,
             RHS.supplier_company_id AS supplier_company_id,
             RHS.asset_details AS asset_details,
             RHS.asset_make AS asset_make,
             RHS.asset_model AS asset_model,
             RHS.asset_acquired_date AS asset_acquired_date,
             RHS.asset_disposed_date AS asset_disposed_date,
             RHS.other_asset_details AS other_asset_details
      FROM df_maintenance_contracts AS LHS
      INNER JOIN df_assets AS RHS ON (LHS.maintenance_contract_id = RHS.maintenance_contract_id))
   GROUP BY maintenance_contract_id,
            other_contract_details)
ORDER BY count___;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/assets_maintenance/0017,"limit(input0, 'asset_acquired_date')","SELECT asset_acquired_date
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_assets
      ORDER BY asset_acquired_date)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/assets_maintenance/0008,"inner_join(input1, input2, ""'engineer_id'""), left_join(line0, input0)","SELECT first_name,
       last_name,
       other_details,
       skill_description
FROM
  (SELECT LHS.engineer_id AS engineer_id,
          LHS.company_id AS company_id,
          LHS.first_name AS first_name,
          LHS.last_name AS last_name,
          LHS.other_details AS other_details,
          LHS.skill_id AS skill_id,
          RHS.skill_code AS skill_code,
          RHS.skill_description AS skill_description
   FROM
     (SELECT LHS.engineer_id AS engineer_id,
             LHS.company_id AS company_id,
             LHS.first_name AS first_name,
             LHS.last_name AS last_name,
             LHS.other_details AS other_details,
             RHS.skill_id AS skill_id
      FROM df_maintenance_engineers AS LHS
      INNER JOIN df_engineer_skills AS RHS ON (LHS.engineer_id = RHS.engineer_id)) AS LHS
   LEFT JOIN df_skills AS RHS ON (LHS.skill_id = RHS.skill_id))
ORDER BY first_name;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
spider/assets_maintenance/0003,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'company_name','supplier_company_id'"")","SELECT DISTINCT n AS count___,
                supplier_company_id AS company_id
FROM
  (SELECT company_name,
          supplier_company_id,
          COUNT() AS n
   FROM
     (SELECT LHS.company_id AS company_id,
             LHS.company_type AS company_type,
             LHS.company_name AS company_name,
             LHS.company_address AS company_address,
             LHS.other_company_details AS other_company_details,
             RHS.asset_id AS asset_id,
             RHS.maintenance_contract_id AS maintenance_contract_id,
             RHS.supplier_company_id AS supplier_company_id,
             RHS.asset_details AS asset_details,
             RHS.asset_make AS asset_make,
             RHS.asset_model AS asset_model,
             RHS.asset_acquired_date AS asset_acquired_date,
             RHS.asset_disposed_date AS asset_disposed_date,
             RHS.other_asset_details AS other_asset_details
      FROM df_third_party_companies AS LHS
      CROSS JOIN df_assets AS RHS)
   GROUP BY company_name,
            supplier_company_id)
ORDER BY count___;",2,7,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/assets_maintenance/0027,"inner_join(input0, input1, ""'company_id' = 'maintenance_contract_company_id'""), limit(line0, 'desc(contract_end_date)')","SELECT company_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT company_id,
                company_type,
                company_name,
                company_address,
                other_company_details,
                maintenance_contract_id,
                contract_start_date,
                contract_end_date,
                other_contract_details,
                company_id AS maintenance_contract_company_id
         FROM
           (SELECT LHS.company_id AS company_id,
                   LHS.company_type AS company_type,
                   LHS.company_name AS company_name,
                   LHS.company_address AS company_address,
                   LHS.other_company_details AS other_company_details,
                   RHS.maintenance_contract_id AS maintenance_contract_id,
                   RHS.contract_start_date AS contract_start_date,
                   RHS.contract_end_date AS contract_end_date,
                   RHS.other_contract_details AS other_contract_details
            FROM df_third_party_companies AS LHS
            INNER JOIN df_maintenance_contracts AS RHS ON (LHS.company_id = RHS.maintenance_contract_company_id)))
      ORDER BY contract_end_date DESC)
   LIMIT 1);",1,13,5,0,5,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/assets_maintenance/0022,"summarise(input1, 'n = n()', ""'fault_log_entry_id'""), filter(line0, 'n != 1L'), inner_join(input0, line1, ""'fault_log_entry_id' = 'fault_log_entry_id','asset_id' = 'n'"")","SELECT fault_log_entry_id,
       fault_description,
       fault_log_entry_datetime
FROM
  (SELECT LHS.fault_log_entry_id AS fault_log_entry_id,
          LHS.asset_id AS asset_id,
          LHS.recorded_by_staff_id AS recorded_by_staff_id,
          LHS.fault_log_entry_datetime AS fault_log_entry_datetime,
          LHS.fault_description AS fault_description,
          LHS.other_fault_details AS other_fault_details
   FROM df_fault_log AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT fault_log_entry_id,
                COUNT() AS n
         FROM df_fault_log_parts
         GROUP BY fault_log_entry_id)
      WHERE (n != 1)) AS RHS ON (LHS.fault_log_entry_id = RHS.fault_log_entry_id
                                 AND LHS.asset_id = RHS.n))
ORDER BY fault_log_entry_id;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/assets_maintenance/0030,"summarise(input1, 'n = n()', ""'contact_staff_id'""), inner_join(input0, line0, ""'staff_id' = 'contact_staff_id'"")","SELECT staff_name,
       n AS count___
FROM
  (SELECT LHS.staff_id AS staff_id,
          LHS.staff_name AS staff_name,
          LHS.gender AS gender,
          LHS.other_staff_details AS other_staff_details,
          RHS.n AS n
   FROM df_staff AS LHS
   INNER JOIN
     (SELECT contact_staff_id,
             COUNT() AS n
      FROM df_engineer_visits
      GROUP BY contact_staff_id) AS RHS ON (LHS.staff_id = RHS.contact_staff_id))
ORDER BY staff_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/assets_maintenance/0013,df_maintenance_engineers,"SELECT last_name
FROM df_maintenance_engineers
ORDER BY last_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/assets_maintenance/0006,"summarise(input1, 'n = n()', ""'visit_start_datetime'""), filter(line0, 'n <= 1L'), inner_join(input0, line1, ""'engineer_id' = 'n'"")","SELECT DISTINCT engineer_id,
                first_name,
                last_name
FROM
  (SELECT LHS.engineer_id AS engineer_id,
          LHS.company_id AS company_id,
          LHS.first_name AS first_name,
          LHS.last_name AS last_name,
          LHS.other_details AS other_details,
          RHS.visit_start_datetime AS visit_start_datetime
   FROM df_maintenance_engineers AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT visit_start_datetime,
                COUNT() AS n
         FROM df_engineer_visits
         GROUP BY visit_start_datetime)
      WHERE (n <= 1)) AS RHS ON (LHS.engineer_id = RHS.n))
ORDER BY engineer_id;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/assets_maintenance/0012,"mutate(input0, 'n = n()'), inner_join(line0, input1, ""'fault_log_entry_id' = 'contact_staff_id','n' = 'engineer_visit_id'"")","SELECT asset_id AS count___,
       recorded_by_staff_id AS fault_log_entry_id
FROM
  (SELECT fault_log_entry_id,
          asset_id,
          recorded_by_staff_id,
          fault_log_entry_datetime,
          fault_description,
          other_fault_details,
          n,
          engineer_id,
          fault_log_entry_id_other,
          fault_status,
          visit_start_datetime,
          visit_end_datetime,
          other_visit_details,
          fault_log_entry_id AS contact_staff_id
   FROM
     (SELECT LHS.fault_log_entry_id AS fault_log_entry_id,
             LHS.asset_id AS asset_id,
             LHS.recorded_by_staff_id AS recorded_by_staff_id,
             LHS.fault_log_entry_datetime AS fault_log_entry_datetime,
             LHS.fault_description AS fault_description,
             LHS.other_fault_details AS other_fault_details,
             LHS.n AS n,
             RHS.engineer_id AS engineer_id,
             RHS.fault_log_entry_id AS fault_log_entry_id_other,
             RHS.fault_status AS fault_status,
             RHS.visit_start_datetime AS visit_start_datetime,
             RHS.visit_end_datetime AS visit_end_datetime,
             RHS.other_visit_details AS other_visit_details
      FROM
        (SELECT fault_log_entry_id,
                asset_id,
                recorded_by_staff_id,
                fault_log_entry_datetime,
                fault_description,
                other_fault_details,
                COUNT(*) OVER () AS n
         FROM df_fault_log) AS LHS
      INNER JOIN df_engineer_visits AS RHS ON (LHS.fault_log_entry_id = RHS.contact_staff_id
                                               AND LHS.n = RHS.engineer_visit_id)))
ORDER BY count___;",2,10,4,0,4,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/assets_maintenance/0026,"limit(input0, 'desc(part_name)')","SELECT part_id,
       chargeable_amount
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_parts
      ORDER BY part_name DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/assets_maintenance/0015,"anti_join(input0, input1, ""'engineer_id'"")","SELECT first_name,
       last_name
FROM
  (SELECT *
   FROM df_maintenance_engineers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_engineer_visits AS RHS
        WHERE (LHS.engineer_id = RHS.engineer_id) ))
ORDER BY first_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/assets_maintenance/0016,df_assets,"SELECT asset_id,
       asset_details,
       asset_make,
       asset_model
FROM df_assets
ORDER BY asset_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/assets_maintenance/0018,"left_join(input0, input1), summarise(input2, 'n = n()', ""'part_fault_id','skill_id'""), inner_join(line0, line1, ""'part_id' = 'n','part_fault_id' = 'part_fault_id'"")","SELECT DISTINCT part_id,
                part_name
FROM
  (SELECT LHS.part_id AS part_id,
          LHS.part_name AS part_name,
          LHS.chargeable_yn AS chargeable_yn,
          LHS.chargeable_amount AS chargeable_amount,
          LHS.other_part_details AS other_part_details,
          LHS.part_fault_id AS part_fault_id,
          LHS.fault_short_name AS fault_short_name,
          LHS.fault_description AS fault_description,
          LHS.other_fault_details AS other_fault_details,
          RHS.skill_id AS skill_id
   FROM
     (SELECT LHS.part_id AS part_id,
             LHS.part_name AS part_name,
             LHS.chargeable_yn AS chargeable_yn,
             LHS.chargeable_amount AS chargeable_amount,
             LHS.other_part_details AS other_part_details,
             RHS.part_fault_id AS part_fault_id,
             RHS.fault_short_name AS fault_short_name,
             RHS.fault_description AS fault_description,
             RHS.other_fault_details AS other_fault_details
      FROM df_parts AS LHS
      LEFT JOIN df_part_faults AS RHS ON (LHS.part_id = RHS.part_id)) AS LHS
   INNER JOIN
     (SELECT part_fault_id,
             skill_id,
             COUNT() AS n
      FROM df_skills_required_to_fix
      GROUP BY part_fault_id,
               skill_id) AS RHS ON (LHS.part_id = RHS.n
                                    AND LHS.part_fault_id = RHS.part_fault_id))
ORDER BY part_id;",3,11,4,1,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0
spider/assets_maintenance/0020,"mutate(input0, 'n = n()'), natural_join3(input0, input1, line0)","SELECT engineer_id,
       first_name,
       last_name
FROM
  (SELECT LHS.engineer_id AS engineer_id,
          LHS.company_id AS company_id,
          LHS.first_name AS first_name,
          LHS.last_name AS last_name,
          LHS.other_details AS other_details,
          LHS.engineer_visit_id AS engineer_visit_id,
          LHS.contact_staff_id AS contact_staff_id,
          LHS.fault_log_entry_id AS fault_log_entry_id,
          LHS.fault_status AS fault_status,
          LHS.visit_start_datetime AS visit_start_datetime,
          LHS.visit_end_datetime AS visit_end_datetime,
          LHS.other_visit_details AS other_visit_details,
          RHS.n AS n
   FROM
     (SELECT LHS.engineer_id AS engineer_id,
             LHS.company_id AS company_id,
             LHS.first_name AS first_name,
             LHS.last_name AS last_name,
             LHS.other_details AS other_details,
             RHS.engineer_visit_id AS engineer_visit_id,
             RHS.contact_staff_id AS contact_staff_id,
             RHS.fault_log_entry_id AS fault_log_entry_id,
             RHS.fault_status AS fault_status,
             RHS.visit_start_datetime AS visit_start_datetime,
             RHS.visit_end_datetime AS visit_end_datetime,
             RHS.other_visit_details AS other_visit_details
      FROM df_maintenance_engineers AS LHS
      INNER JOIN df_engineer_visits AS RHS ON (LHS.engineer_id = RHS.engineer_id)) AS LHS
   INNER JOIN
     (SELECT engineer_id,
             company_id,
             first_name,
             last_name,
             other_details,
             COUNT(*) OVER () AS n
      FROM df_maintenance_engineers) AS RHS ON (LHS.engineer_id = RHS.engineer_id
                                                AND LHS.company_id = RHS.company_id
                                                AND LHS.first_name = RHS.first_name
                                                AND LHS.last_name = RHS.last_name
                                                AND LHS.other_details = RHS.other_details))
ORDER BY engineer_id;",2,11,4,0,4,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
spider/assets_maintenance/0019,"summarise(input1, 'n = n()', ""'other_fault_details','part_id'""), inner_join(input0, line0, ""'part_id' = 'n'"")","SELECT part_name
FROM
  (SELECT LHS.part_id AS part_id,
          LHS.part_name AS part_name,
          LHS.chargeable_yn AS chargeable_yn,
          LHS.chargeable_amount AS chargeable_amount,
          LHS.other_part_details AS other_part_details,
          RHS.other_fault_details AS other_fault_details,
          RHS.part_id AS part_id_other
   FROM df_parts AS LHS
   INNER JOIN
     (SELECT other_fault_details,
             part_id,
             COUNT() AS n
      FROM df_part_faults
      GROUP BY other_fault_details,
               part_id) AS RHS ON (LHS.part_id = RHS.n))
ORDER BY part_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/assets_maintenance/0007,"summarise(input1, 'n = n()', ""'part_id'""), filter(line0, 'n > 2L'), inner_join(input0, line1, ""'part_id'"")","SELECT part_name,
       part_id
FROM
  (SELECT LHS.part_id AS part_id,
          LHS.part_name AS part_name,
          LHS.chargeable_yn AS chargeable_yn,
          LHS.chargeable_amount AS chargeable_amount,
          LHS.other_part_details AS other_part_details,
          RHS.n AS n
   FROM df_parts AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT part_id,
                COUNT() AS n
         FROM df_part_faults
         GROUP BY part_id)
      WHERE (n > 2)) AS RHS ON (LHS.part_id = RHS.part_id))
ORDER BY part_name;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/assets_maintenance/0024,"intersect(input0, input0, 'asset_model')","SELECT asset_model
FROM
  (SELECT asset_model
   FROM df_assets INTERSECT SELECT asset_model
   FROM df_assets)
ORDER BY asset_model;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/assets_maintenance/0021,"left_join(input1, input2), inner_join(input0, line0, ""'staff_id' = 'contact_staff_id'"")","SELECT staff_name,
       first_name,
       last_name
FROM
  (SELECT LHS.staff_id AS staff_id,
          LHS.staff_name AS staff_name,
          LHS.gender AS gender,
          LHS.other_staff_details AS other_staff_details,
          RHS.engineer_id AS engineer_id,
          RHS.company_id AS company_id,
          RHS.first_name AS first_name,
          RHS.last_name AS last_name,
          RHS.other_details AS other_details,
          RHS.engineer_visit_id AS engineer_visit_id,
          RHS.fault_log_entry_id AS fault_log_entry_id,
          RHS.fault_status AS fault_status,
          RHS.visit_start_datetime AS visit_start_datetime,
          RHS.visit_end_datetime AS visit_end_datetime,
          RHS.other_visit_details AS other_visit_details
   FROM df_staff AS LHS
   INNER JOIN
     (SELECT LHS.engineer_id AS engineer_id,
             LHS.company_id AS company_id,
             LHS.first_name AS first_name,
             LHS.last_name AS last_name,
             LHS.other_details AS other_details,
             RHS.engineer_visit_id AS engineer_visit_id,
             RHS.contact_staff_id AS contact_staff_id,
             RHS.fault_log_entry_id AS fault_log_entry_id,
             RHS.fault_status AS fault_status,
             RHS.visit_start_datetime AS visit_start_datetime,
             RHS.visit_end_datetime AS visit_end_datetime,
             RHS.other_visit_details AS other_visit_details
      FROM df_maintenance_engineers AS LHS
      LEFT JOIN df_engineer_visits AS RHS ON (LHS.engineer_id = RHS.engineer_id)) AS RHS ON (LHS.staff_id = RHS.contact_staff_id))
ORDER BY staff_name;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
spider/assets_maintenance/0023,"summarise(input1, 'n = n()', ""'skill_id'""), inner_join(input0, line0, ""'skill_id' = 'n'"")","SELECT skill_id,
       skill_description
FROM
  (SELECT LHS.skill_id AS skill_id,
          LHS.skill_code AS skill_code,
          LHS.skill_description AS skill_description,
          RHS.skill_id AS skill_id_other
   FROM df_skills AS LHS
   INNER JOIN
     (SELECT skill_id,
             COUNT() AS n
      FROM df_skills_required_to_fix
      GROUP BY skill_id) AS RHS ON (LHS.skill_id = RHS.n))
ORDER BY skill_id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/assets_maintenance/0001,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'asset_disposed_date','asset_model'""), inner_join(line0, line1, ""'part_id' = 'n','asset_model' = 'asset_model'"")","SELECT asset_id,
       asset_details
FROM
  (SELECT LHS.asset_id AS asset_id,
          LHS.maintenance_contract_id AS maintenance_contract_id,
          LHS.supplier_company_id AS supplier_company_id,
          LHS.asset_details AS asset_details,
          LHS.asset_make AS asset_make,
          LHS.asset_model AS asset_model,
          LHS.asset_acquired_date AS asset_acquired_date,
          LHS.asset_disposed_date AS asset_disposed_date,
          LHS.other_asset_details AS other_asset_details,
          LHS.part_id AS part_id,
          LHS.fault_log_entry_id AS fault_log_entry_id,
          LHS.recorded_by_staff_id AS recorded_by_staff_id,
          LHS.fault_log_entry_datetime AS fault_log_entry_datetime,
          LHS.fault_description AS fault_description,
          LHS.other_fault_details AS other_fault_details,
          RHS.asset_disposed_date AS asset_disposed_date_other
   FROM
     (SELECT LHS.asset_id AS asset_id,
             LHS.maintenance_contract_id AS maintenance_contract_id,
             LHS.supplier_company_id AS supplier_company_id,
             LHS.asset_details AS asset_details,
             LHS.asset_make AS asset_make,
             LHS.asset_model AS asset_model,
             LHS.asset_acquired_date AS asset_acquired_date,
             LHS.asset_disposed_date AS asset_disposed_date,
             LHS.other_asset_details AS other_asset_details,
             LHS.part_id AS part_id,
             RHS.fault_log_entry_id AS fault_log_entry_id,
             RHS.recorded_by_staff_id AS recorded_by_staff_id,
             RHS.fault_log_entry_datetime AS fault_log_entry_datetime,
             RHS.fault_description AS fault_description,
             RHS.other_fault_details AS other_fault_details
      FROM
        (SELECT LHS.asset_id AS asset_id,
                LHS.maintenance_contract_id AS maintenance_contract_id,
                LHS.supplier_company_id AS supplier_company_id,
                LHS.asset_details AS asset_details,
                LHS.asset_make AS asset_make,
                LHS.asset_model AS asset_model,
                LHS.asset_acquired_date AS asset_acquired_date,
                LHS.asset_disposed_date AS asset_disposed_date,
                LHS.other_asset_details AS other_asset_details,
                RHS.part_id AS part_id
         FROM df_assets AS LHS
         INNER JOIN df_asset_parts AS RHS ON (LHS.asset_id = RHS.asset_id)) AS LHS
      INNER JOIN df_fault_log AS RHS ON (LHS.asset_id = RHS.asset_id)) AS LHS
   INNER JOIN
     (SELECT asset_disposed_date,
             asset_model,
             COUNT() AS n
      FROM
        (SELECT LHS.asset_id AS asset_id,
                LHS.maintenance_contract_id AS maintenance_contract_id,
                LHS.supplier_company_id AS supplier_company_id,
                LHS.asset_details AS asset_details,
                LHS.asset_make AS asset_make,
                LHS.asset_model AS asset_model,
                LHS.asset_acquired_date AS asset_acquired_date,
                LHS.asset_disposed_date AS asset_disposed_date,
                LHS.other_asset_details AS other_asset_details,
                LHS.part_id AS part_id,
                RHS.fault_log_entry_id AS fault_log_entry_id,
                RHS.recorded_by_staff_id AS recorded_by_staff_id,
                RHS.fault_log_entry_datetime AS fault_log_entry_datetime,
                RHS.fault_description AS fault_description,
                RHS.other_fault_details AS other_fault_details
         FROM
           (SELECT LHS.asset_id AS asset_id,
                   LHS.maintenance_contract_id AS maintenance_contract_id,
                   LHS.supplier_company_id AS supplier_company_id,
                   LHS.asset_details AS asset_details,
                   LHS.asset_make AS asset_make,
                   LHS.asset_model AS asset_model,
                   LHS.asset_acquired_date AS asset_acquired_date,
                   LHS.asset_disposed_date AS asset_disposed_date,
                   LHS.other_asset_details AS other_asset_details,
                   RHS.part_id AS part_id
            FROM df_assets AS LHS
            INNER JOIN df_asset_parts AS RHS ON (LHS.asset_id = RHS.asset_id)) AS LHS
         INNER JOIN df_fault_log AS RHS ON (LHS.asset_id = RHS.asset_id))
      GROUP BY asset_disposed_date,
               asset_model) AS RHS ON (LHS.part_id = RHS.n
                                       AND LHS.asset_model = RHS.asset_model))
ORDER BY asset_id;",3,19,7,0,7,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0
spider/assets_maintenance/0014,"intersect(input0, input0, 'fault_status')","SELECT fault_status
FROM
  (SELECT fault_status
   FROM df_fault_log_parts INTERSECT SELECT fault_status
   FROM df_fault_log_parts)
ORDER BY fault_status;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/assets_maintenance/0009,"natural_join3(input0, input1, input2)","SELECT fault_short_name,
       skill_description
FROM
  (SELECT LHS.skill_id AS skill_id,
          LHS.skill_code AS skill_code,
          LHS.skill_description AS skill_description,
          LHS.part_fault_id AS part_fault_id,
          LHS.part_id AS part_id,
          LHS.fault_short_name AS fault_short_name,
          LHS.fault_description AS fault_description,
          LHS.other_fault_details AS other_fault_details
   FROM
     (SELECT LHS.skill_id AS skill_id,
             LHS.skill_code AS skill_code,
             LHS.skill_description AS skill_description,
             RHS.part_fault_id AS part_fault_id,
             RHS.part_id AS part_id,
             RHS.fault_short_name AS fault_short_name,
             RHS.fault_description AS fault_description,
             RHS.other_fault_details AS other_fault_details
      FROM df_skills AS LHS
      CROSS JOIN df_part_faults AS RHS) AS LHS
   INNER JOIN df_skills_required_to_fix AS RHS ON (LHS.skill_id = RHS.skill_id
                                                   AND LHS.part_fault_id = RHS.part_fault_id))
ORDER BY fault_short_name;",1,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
spider/assets_maintenance/0025,df_assets,"SELECT asset_make,
       asset_model,
       asset_details
FROM df_assets
ORDER BY asset_make;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/assets_maintenance/0011,"natural_join(input0, input1)","SELECT fault_description,
       fault_status
FROM
  (SELECT LHS.fault_log_entry_id AS fault_log_entry_id,
          LHS.asset_id AS asset_id,
          LHS.recorded_by_staff_id AS recorded_by_staff_id,
          LHS.fault_log_entry_datetime AS fault_log_entry_datetime,
          LHS.fault_description AS fault_description,
          LHS.other_fault_details AS other_fault_details,
          RHS.part_fault_id AS part_fault_id,
          RHS.fault_status AS fault_status
   FROM df_fault_log AS LHS
   INNER JOIN df_fault_log_parts AS RHS ON (LHS.fault_log_entry_id = RHS.fault_log_entry_id))
ORDER BY fault_description;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/assets_maintenance/0029,"summarise(input0, 'n = n()', ""'gender','other_staff_details'""), limit(line0, 'other_staff_details')","SELECT gender
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT gender,
                other_staff_details,
                COUNT() AS n
         FROM df_staff
         GROUP BY gender,
                  other_staff_details)
      ORDER BY other_staff_details)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/assets_maintenance/0010,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'chargeable_yn','part_name'"")","SELECT part_name,
       n AS count___
FROM
  (SELECT chargeable_yn,
          part_name,
          COUNT() AS n
   FROM
     (SELECT LHS.part_id AS part_id,
             LHS.part_name AS part_name,
             LHS.chargeable_yn AS chargeable_yn,
             LHS.chargeable_amount AS chargeable_amount,
             LHS.other_part_details AS other_part_details,
             RHS.asset_id AS asset_id
      FROM df_parts AS LHS
      INNER JOIN df_asset_parts AS RHS ON (LHS.part_id = RHS.part_id))
   GROUP BY chargeable_yn,
            part_name)
ORDER BY part_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/assets_maintenance/0031,"anti_join(input0, input1, ""'asset_id'"")","SELECT asset_model
FROM
  (SELECT *
   FROM df_assets AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_fault_log AS RHS
        WHERE (LHS.asset_id = RHS.asset_id) ))
ORDER BY asset_model;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/company_office/0002,df_companies,"SELECT name
FROM df_companies
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/company_office/0017,"inner_join(input0, input1, ""'id' = 'building_id'""), anti_join(input0, line0, ""'city','stories'"")","SELECT name
FROM
  (SELECT *
   FROM df_buildings AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT id,
                  name,
                  city,
                  height,
                  stories,
                  status,
                  company_id,
                  move_in_year,
                  id AS building_id
           FROM
             (SELECT LHS.id AS id,
                     LHS.name AS name,
                     LHS.city AS city,
                     LHS.height AS height,
                     LHS.stories AS stories,
                     LHS.status AS status,
                     RHS.company_id AS company_id,
                     RHS.move_in_year AS move_in_year
              FROM df_buildings AS LHS
              INNER JOIN df_office_locations AS RHS ON (LHS.id = RHS.building_id))) AS RHS
        WHERE (LHS.city = RHS.city
               AND LHS.stories = RHS.stories) ))
ORDER BY name;",2,15,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
spider/company_office/0008,df_buildings,"SELECT name
FROM df_buildings
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/company_office/0003,"filter(input0, ""headquarters != 'USA'"")","SELECT `name`
FROM `df_companies`
WHERE (`headquarters` != 'USA')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/company_office/0013,"filter(input0, ""status == 'on-hold'"")","SELECT `name`
FROM `df_buildings`
WHERE (`status` = 'on-hold')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/company_office/0006,"filter(input0, ""industry != 'Banking'""), mutate(line0, 'maxsales_billion = max(sales_billion)'), mutate(line1, 'minsales_billion = min(sales_billion)')","SELECT DISTINCT `maxsales_billion` AS `max_sales_billion_`,
                MIN(`sales_billion`) OVER () AS `min_sales_billion_`
FROM
  (SELECT `id`,
          `name`,
          `headquarters`,
          `industry`,
          `sales_billion`,
          `profits_billion`,
          `assets_billion`,
          `market_value_billion`,
          MAX(`sales_billion`) OVER () AS `maxsales_billion`
   FROM
     (SELECT *
      FROM `df_companies`
      WHERE (`industry` != 'Banking')))
ORDER BY max_sales_billion_;",3,10,3,1,3,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0
spider/company_office/0004,df_companies,"SELECT name,
       assets_billion
FROM df_companies
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/company_office/0015,"summarise(input0, 'n = n()', ""'industry'""), mutate(line0, 'n = n()')","SELECT industry
FROM
  (SELECT industry,
          COUNT() AS n
   FROM df_companies
   GROUP BY industry)
ORDER BY industry;",2,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/company_office/0005,"summarise(input0, 'meanprofits_billion = mean(profits_billion, na.rm = T)', ""'headquarters','profits_billion'""), summarise(line0, 'meanprofits_billion = mean(profits_billion, na.rm = T)', '')","SELECT meanprofits_billion AS avg_profits_billion_
FROM
  (SELECT AVG(profits_billion) AS meanprofits_billion
   FROM
     (SELECT headquarters,
             profits_billion,
             AVG(profits_billion) AS meanprofits_billion
      FROM df_companies
      GROUP BY headquarters,
               profits_billion))
ORDER BY avg_profits_billion_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/company_office/0016,"summarise(input0, 'n = n()', ""'industry','market_value_billion'""), limit(line0, 'industry')","SELECT industry
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT industry,
                market_value_billion,
                COUNT() AS n
         FROM df_companies
         GROUP BY industry,
                  market_value_billion)
      ORDER BY industry)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/company_office/0018,"filter(input0, ""headquarters != 'USA' | headquarters == 'China'"")","SELECT DISTINCT `industry`
FROM `df_companies`
WHERE (`headquarters` != 'USA'
       OR `headquarters` = 'China')
ORDER BY industry;",1,5,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/company_office/0020,"summarise(input0, 'n = n()', ""'headquarters','industry'""), limit(line0, 'desc(n)')","SELECT headquarters
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT headquarters,
                industry,
                COUNT() AS n
         FROM df_companies
         GROUP BY headquarters,
                  industry)
      ORDER BY n DESC)
   LIMIT 2);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/company_office/0019,"filter(input0, ""industry != 'Banking' & industry != 'Conglomerate'""), anti_join(input0, line0, ""'assets_billion','market_value_billion'""), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM
  (SELECT *
   FROM `df_companies` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_companies`
           WHERE (`industry` != 'Banking'
                  AND `industry` != 'Conglomerate')) AS RHS
        WHERE (LHS.assets_billion = RHS.assets_billion
               AND LHS.market_value_billion = RHS.market_value_billion) ))
ORDER BY count___;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/company_office/0007,"summarise(input0, 'n = n()', ""'id','industry'""), mutate(line0, 'n_distinct = n_distinct(industry)')","SELECT DISTINCT COUNT(DISTINCT industry) OVER () AS count_distinct_industry_
FROM
  (SELECT id,
          industry,
          COUNT() AS n
   FROM df_companies
   GROUP BY id,
            industry)
ORDER BY count_distinct_industry_;",2,7,2,2,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/company_office/0001,"summarise(input0, 'n = n()', ""'headquarters','sales_billion'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT headquarters,
          sales_billion,
          COUNT() AS n
   FROM df_companies
   GROUP BY headquarters,
            sales_billion)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/company_office/0014,"summarise(input0, 'n = n()', ""'industry'"")","SELECT industry,
       n AS count___
FROM
  (SELECT industry,
          COUNT() AS n
   FROM df_companies
   GROUP BY industry)
ORDER BY industry;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/company_office/0009,"limit(input0, 'desc(name)')","SELECT stories
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_buildings
      ORDER BY name DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/company_office/0011,"summarise(input2, 'n = n()', ""'building_id'""), filter(line0, 'n > 1L'), natural_join(input1, line1), inner_join(input0, line2, ""'id' = 'building_id'"")","SELECT DISTINCT name
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.city AS city,
          LHS.height AS height,
          LHS.stories AS stories,
          LHS.status AS status,
          RHS.id AS id_other,
          RHS.name AS name_other,
          RHS.headquarters AS headquarters,
          RHS.industry AS industry,
          RHS.sales_billion AS sales_billion,
          RHS.profits_billion AS profits_billion,
          RHS.assets_billion AS assets_billion,
          RHS.market_value_billion AS market_value_billion,
          RHS.n AS n
   FROM df_buildings AS LHS
   INNER JOIN
     (SELECT LHS.id AS id,
             LHS.name AS name,
             LHS.headquarters AS headquarters,
             LHS.industry AS industry,
             LHS.sales_billion AS sales_billion,
             LHS.profits_billion AS profits_billion,
             LHS.assets_billion AS assets_billion,
             LHS.market_value_billion AS market_value_billion,
             RHS.building_id AS building_id,
             RHS.n AS n
      FROM df_companies AS LHS
      CROSS JOIN
        (SELECT *
         FROM
           (SELECT building_id,
                   COUNT() AS n
            FROM df_office_locations
            GROUP BY building_id)
         WHERE (n > 1)) AS RHS) AS RHS ON (LHS.id = RHS.building_id))
ORDER BY name;",4,13,5,1,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0
spider/college_1/0056,"filter(input2, ""stu_lname == 'Smithson'""), semi_join(input0, input1), anti_join(line1, line0, '')","SELECT `crs_code`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_class` AS `LHS`
      WHERE EXISTS
          (SELECT 1
           FROM `df_enroll` AS `RHS`
           WHERE (`LHS`.`class_code` = `RHS`.`class_code`) )) AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_student`
           WHERE (`stu_lname` = 'Smithson')) AS RHS
        WHERE (LHS.prof_num = RHS.prof_num) ))
ORDER BY crs_code;",3,20,6,0,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/college_1/0042,df_department,"SELECT dept_name
FROM df_department
ORDER BY dept_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_1/0033,"left_join(input0, input1), summarise(line0, 'sumcrs_credit = sum(crs_credit)', ""'dept_code'"")","SELECT sumcrs_credit AS sum_t1_crs_credit_,
       dept_code
FROM
  (SELECT dept_code,
          SUM(crs_credit) AS sumcrs_credit
   FROM
     (SELECT LHS.class_code AS class_code,
             LHS.crs_code AS crs_code,
             LHS.class_section AS class_section,
             LHS.class_time AS class_time,
             LHS.class_room AS class_room,
             LHS.prof_num AS prof_num,
             RHS.dept_code AS dept_code,
             RHS.crs_description AS crs_description,
             RHS.crs_credit AS crs_credit
      FROM df_class AS LHS
      LEFT JOIN df_course AS RHS ON (LHS.crs_code = RHS.crs_code))
   GROUP BY dept_code)
ORDER BY sum_t1_crs_credit_;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/college_1/0037,"left_join(input0, input1), filter(line0, ""crs_code == 'ACCT-211' & enroll_grade == 'C'""), inner_join(line1, input2, ""'stu_num'"")","SELECT `stu_fname`
FROM
  (SELECT `LHS`.`class_code` AS `class_code`,
          `LHS`.`crs_code` AS `crs_code`,
          `LHS`.`class_section` AS `class_section`,
          `LHS`.`class_time` AS `class_time`,
          `LHS`.`class_room` AS `class_room`,
          `LHS`.`prof_num` AS `prof_num`,
          `LHS`.`stu_num` AS `stu_num`,
          `LHS`.`enroll_grade` AS `enroll_grade`,
          `RHS`.`stu_lname` AS `stu_lname`,
          `RHS`.`stu_fname` AS `stu_fname`,
          `RHS`.`stu_init` AS `stu_init`,
          `RHS`.`stu_dob` AS `stu_dob`,
          `RHS`.`stu_hrs` AS `stu_hrs`,
          `RHS`.`stu_class` AS `stu_class`,
          `RHS`.`stu_gpa` AS `stu_gpa`,
          `RHS`.`stu_transfer` AS `stu_transfer`,
          `RHS`.`dept_code` AS `dept_code`,
          `RHS`.`stu_phone` AS `stu_phone`,
          `RHS`.`prof_num` AS `prof_num_other`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`class_code` AS `class_code`,
                `LHS`.`crs_code` AS `crs_code`,
                `LHS`.`class_section` AS `class_section`,
                `LHS`.`class_time` AS `class_time`,
                `LHS`.`class_room` AS `class_room`,
                `LHS`.`prof_num` AS `prof_num`,
                `RHS`.`stu_num` AS `stu_num`,
                `RHS`.`enroll_grade` AS `enroll_grade`
         FROM `df_class` AS `LHS`
         LEFT JOIN `df_enroll` AS `RHS` ON (`LHS`.`class_code` = `RHS`.`class_code`))
      WHERE (`crs_code` = 'ACCT-211'
             AND `enroll_grade` = 'C')) AS LHS
   INNER JOIN df_student AS RHS ON (LHS.stu_num = RHS.stu_num))
ORDER BY stu_fname;",3,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0
spider/college_1/0002,"filter(input0, ""crs_code == 'ACCT-211'""), mutate(line0, 'n_distinct = n_distinct(prof_num)')","SELECT DISTINCT COUNT(DISTINCT `prof_num`) OVER () AS `count_distinct_prof_num_`
FROM `df_class`
WHERE (`crs_code` = 'ACCT-211')
ORDER BY count_distinct_prof_num_;",2,6,1,2,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/college_1/0036,"filter(input0, ""crs_code != 'ACCT-211'""), semi_join(input2, input1), anti_join(line1, line0, '')","SELECT `stu_fname`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_student` AS `LHS`
      WHERE EXISTS
          (SELECT 1
           FROM `df_enroll` AS `RHS`
           WHERE (`LHS`.`stu_num` = `RHS`.`stu_num`) )) AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_class`
           WHERE (`crs_code` != 'ACCT-211')) AS RHS
        WHERE (LHS.prof_num = RHS.prof_num) ))
ORDER BY stu_fname;",3,20,6,0,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/college_1/0057,"filter(input3, ""stu_lname == 'Smithson'""), semi_join(input2, line0), natural_join4(input0, input1, input2, line1)","SELECT `crs_description`,
       `crs_credit`
FROM
  (SELECT `LHS`.`class_code` AS `class_code`,
          `LHS`.`crs_code` AS `crs_code`,
          `LHS`.`class_section` AS `class_section`,
          `LHS`.`class_time` AS `class_time`,
          `LHS`.`class_room` AS `class_room`,
          `LHS`.`prof_num` AS `prof_num`,
          `LHS`.`dept_code` AS `dept_code`,
          `LHS`.`crs_description` AS `crs_description`,
          `LHS`.`crs_credit` AS `crs_credit`,
          `LHS`.`stu_num` AS `stu_num`,
          `LHS`.`enroll_grade` AS `enroll_grade`
   FROM
     (SELECT `LHS`.`class_code` AS `class_code`,
             `LHS`.`crs_code` AS `crs_code`,
             `LHS`.`class_section` AS `class_section`,
             `LHS`.`class_time` AS `class_time`,
             `LHS`.`class_room` AS `class_room`,
             `LHS`.`prof_num` AS `prof_num`,
             `LHS`.`dept_code` AS `dept_code`,
             `LHS`.`crs_description` AS `crs_description`,
             `LHS`.`crs_credit` AS `crs_credit`,
             `RHS`.`stu_num` AS `stu_num`,
             `RHS`.`enroll_grade` AS `enroll_grade`
      FROM
        (SELECT `LHS`.`class_code` AS `class_code`,
                `LHS`.`crs_code` AS `crs_code`,
                `LHS`.`class_section` AS `class_section`,
                `LHS`.`class_time` AS `class_time`,
                `LHS`.`class_room` AS `class_room`,
                `LHS`.`prof_num` AS `prof_num`,
                `RHS`.`dept_code` AS `dept_code`,
                `RHS`.`crs_description` AS `crs_description`,
                `RHS`.`crs_credit` AS `crs_credit`
         FROM `df_class` AS `LHS`
         INNER JOIN `df_course` AS `RHS` ON (`LHS`.`crs_code` = `RHS`.`crs_code`)) AS `LHS`
      INNER JOIN `df_enroll` AS `RHS` ON (`LHS`.`class_code` = `RHS`.`class_code`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_enroll` AS `LHS`
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_student`
              WHERE (`stu_lname` = 'Smithson')) AS RHS
           WHERE (LHS.stu_num = RHS.stu_num) )) AS RHS ON (LHS.class_code = RHS.class_code
                                                           AND LHS.stu_num = RHS.stu_num
                                                           AND LHS.enroll_grade = RHS.enroll_grade))
ORDER BY crs_description;",3,21,7,0,7,3,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0
spider/college_1/0017,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'dept_code'"")","SELECT n AS count___,
       dept_code
FROM
  (SELECT dept_code,
          COUNT() AS n
   FROM
     (SELECT LHS.class_code AS class_code,
             LHS.crs_code AS crs_code,
             LHS.class_section AS class_section,
             LHS.class_time AS class_time,
             LHS.class_room AS class_room,
             LHS.prof_num AS prof_num,
             RHS.dept_code AS dept_code,
             RHS.crs_description AS crs_description,
             RHS.crs_credit AS crs_credit
      FROM df_class AS LHS
      INNER JOIN df_course AS RHS ON (LHS.crs_code = RHS.crs_code))
   GROUP BY dept_code)
ORDER BY count___;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/college_1/0052,"filter(input1, ""dept_name != 'History'""), anti_join(input3, line0, ""'dept_code'""), natural_join3(input0, input2, line1)","SELECT DISTINCT `emp_fname`
FROM
  (SELECT `LHS`.`class_code` AS `class_code`,
          `LHS`.`crs_code` AS `crs_code`,
          `LHS`.`class_section` AS `class_section`,
          `LHS`.`class_time` AS `class_time`,
          `LHS`.`class_room` AS `class_room`,
          `LHS`.`prof_num` AS `prof_num`,
          `LHS`.`emp_num` AS `emp_num`,
          `LHS`.`emp_lname` AS `emp_lname`,
          `LHS`.`emp_fname` AS `emp_fname`,
          `LHS`.`emp_initial` AS `emp_initial`,
          `LHS`.`emp_jobcode` AS `emp_jobcode`,
          `LHS`.`emp_hiredate` AS `emp_hiredate`,
          `LHS`.`emp_dob` AS `emp_dob`,
          `RHS`.`dept_code` AS `dept_code`,
          `RHS`.`prof_office` AS `prof_office`,
          `RHS`.`prof_extension` AS `prof_extension`,
          `RHS`.`prof_high_degree` AS `prof_high_degree`
   FROM
     (SELECT `LHS`.`class_code` AS `class_code`,
             `LHS`.`crs_code` AS `crs_code`,
             `LHS`.`class_section` AS `class_section`,
             `LHS`.`class_time` AS `class_time`,
             `LHS`.`class_room` AS `class_room`,
             `LHS`.`prof_num` AS `prof_num`,
             `RHS`.`emp_num` AS `emp_num`,
             `RHS`.`emp_lname` AS `emp_lname`,
             `RHS`.`emp_fname` AS `emp_fname`,
             `RHS`.`emp_initial` AS `emp_initial`,
             `RHS`.`emp_jobcode` AS `emp_jobcode`,
             `RHS`.`emp_hiredate` AS `emp_hiredate`,
             `RHS`.`emp_dob` AS `emp_dob`
      FROM `df_class` AS `LHS`
      CROSS JOIN `df_employee` AS `RHS`) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_professor` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_department`
              WHERE (`dept_name` != 'History')) AS RHS
           WHERE (LHS.dept_code = RHS.dept_code) )) AS RHS ON (LHS.emp_num = RHS.emp_num))
ORDER BY emp_fname;",3,19,6,1,6,1,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0
spider/college_1/0008,"filter(input0, ""dept_name == 'History'""), intersect(line0, input0, 'dept_address')","SELECT `dept_address`
FROM
  (SELECT `dept_address`
   FROM `df_department`
   WHERE (`dept_name` = 'History') INTERSECT
     SELECT dept_address
     FROM df_department)
ORDER BY dept_address;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/college_1/0039,"summarise(input0, 'n = n()', ""'prof_high_degree'""), filter(line0, ""prof_high_degree == 'Ph.D.'"")","SELECT `n` AS `count___`
FROM
  (SELECT `prof_high_degree`,
          COUNT() AS `n`
   FROM `df_professor`
   GROUP BY `prof_high_degree`)
WHERE (`prof_high_degree` = 'Ph.D.')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_1/0038,"summarise(input0, 'n = n()', ""'emp_hiredate','emp_num'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT emp_hiredate,
          emp_num,
          COUNT() AS n
   FROM df_employee
   GROUP BY emp_hiredate,
            emp_num)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/college_1/0003,"filter(input0, ""dept_name == 'Biology'""), intersect(input0, line0, 'dept_code'), natural_join3(input1, input2, line1)","SELECT `emp_fname`,
       `emp_lname`
FROM
  (SELECT `LHS`.`emp_num` AS `emp_num`,
          `LHS`.`emp_lname` AS `emp_lname`,
          `LHS`.`emp_fname` AS `emp_fname`,
          `LHS`.`emp_initial` AS `emp_initial`,
          `LHS`.`emp_jobcode` AS `emp_jobcode`,
          `LHS`.`emp_hiredate` AS `emp_hiredate`,
          `LHS`.`emp_dob` AS `emp_dob`,
          `LHS`.`dept_code` AS `dept_code`,
          `LHS`.`prof_office` AS `prof_office`,
          `LHS`.`prof_extension` AS `prof_extension`,
          `LHS`.`prof_high_degree` AS `prof_high_degree`
   FROM
     (SELECT `LHS`.`emp_num` AS `emp_num`,
             `LHS`.`emp_lname` AS `emp_lname`,
             `LHS`.`emp_fname` AS `emp_fname`,
             `LHS`.`emp_initial` AS `emp_initial`,
             `LHS`.`emp_jobcode` AS `emp_jobcode`,
             `LHS`.`emp_hiredate` AS `emp_hiredate`,
             `LHS`.`emp_dob` AS `emp_dob`,
             `RHS`.`dept_code` AS `dept_code`,
             `RHS`.`prof_office` AS `prof_office`,
             `RHS`.`prof_extension` AS `prof_extension`,
             `RHS`.`prof_high_degree` AS `prof_high_degree`
      FROM `df_employee` AS `LHS`
      INNER JOIN `df_professor` AS `RHS` ON (`LHS`.`emp_num` = `RHS`.`emp_num`)) AS `LHS`
   INNER JOIN
     (SELECT `dept_code`
      FROM `df_department` INTERSECT SELECT `dept_code`
      FROM `df_department`
      WHERE (`dept_name` = 'Biology')) AS RHS ON (LHS.dept_code = RHS.dept_code))
ORDER BY emp_fname;",3,14,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0
spider/college_1/0027,"summarise(input0, 'n_distinct = n_distinct(school_code)', ""'emp_num','school_code'""), mutate(line0, 'n_distinct = n_distinct(school_code)')","SELECT DISTINCT COUNT(DISTINCT school_code) OVER () AS count_distinct_school_code_
FROM
  (SELECT emp_num,
          school_code,
          COUNT(DISTINCT school_code) AS n_distinct
   FROM df_department
   GROUP BY emp_num,
            school_code)
ORDER BY count_distinct_school_code_;",2,8,2,3,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/college_1/0048,"filter(input0, ""enroll_grade != 'C'""), semi_join(input1, line0)","SELECT `stu_fname`
FROM
  (SELECT *
   FROM `df_student` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_enroll`
           WHERE (`enroll_grade` != 'C')) AS RHS
        WHERE (LHS.stu_num = RHS.stu_num) ))
ORDER BY stu_fname;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/college_1/0022,"filter(input0, ""prof_high_degree == 'Ph.D.'""), summarise(line0, 'n = n()', ""'dept_code'"")","SELECT `n` AS `count___`,
       `dept_code`
FROM
  (SELECT `dept_code`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_professor`
      WHERE (`prof_high_degree` = 'Ph.D.'))
   GROUP BY dept_code)
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_1/0074,"left_join(input1, input0), filter(line0, ""enroll_grade == 'C' | enroll_grade == 'A'"")","SELECT `stu_fname`,
       `stu_lname`
FROM
  (SELECT `LHS`.`stu_num` AS `stu_num`,
          `LHS`.`stu_lname` AS `stu_lname`,
          `LHS`.`stu_fname` AS `stu_fname`,
          `LHS`.`stu_init` AS `stu_init`,
          `LHS`.`stu_dob` AS `stu_dob`,
          `LHS`.`stu_hrs` AS `stu_hrs`,
          `LHS`.`stu_class` AS `stu_class`,
          `LHS`.`stu_gpa` AS `stu_gpa`,
          `LHS`.`stu_transfer` AS `stu_transfer`,
          `LHS`.`dept_code` AS `dept_code`,
          `LHS`.`stu_phone` AS `stu_phone`,
          `LHS`.`prof_num` AS `prof_num`,
          `RHS`.`class_code` AS `class_code`,
          `RHS`.`enroll_grade` AS `enroll_grade`
   FROM `df_student` AS `LHS`
   LEFT JOIN `df_enroll` AS `RHS` ON (`LHS`.`stu_num` = `RHS`.`stu_num`))
WHERE (`enroll_grade` = 'C'
       OR `enroll_grade` = 'A')
ORDER BY stu_fname;",2,7,2,0,2,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
spider/college_1/0053,"filter(input0, ""dept_name != 'History'""), anti_join(input2, line0, ""'dept_code'""), natural_join3(input1, input2, line1)","SELECT `emp_lname`,
       `prof_office`
FROM
  (SELECT `LHS`.`emp_num` AS `emp_num`,
          `LHS`.`emp_lname` AS `emp_lname`,
          `LHS`.`emp_fname` AS `emp_fname`,
          `LHS`.`emp_initial` AS `emp_initial`,
          `LHS`.`emp_jobcode` AS `emp_jobcode`,
          `LHS`.`emp_hiredate` AS `emp_hiredate`,
          `LHS`.`emp_dob` AS `emp_dob`,
          `LHS`.`dept_code` AS `dept_code`,
          `LHS`.`prof_office` AS `prof_office`,
          `LHS`.`prof_extension` AS `prof_extension`,
          `LHS`.`prof_high_degree` AS `prof_high_degree`
   FROM
     (SELECT `LHS`.`emp_num` AS `emp_num`,
             `LHS`.`emp_lname` AS `emp_lname`,
             `LHS`.`emp_fname` AS `emp_fname`,
             `LHS`.`emp_initial` AS `emp_initial`,
             `LHS`.`emp_jobcode` AS `emp_jobcode`,
             `LHS`.`emp_hiredate` AS `emp_hiredate`,
             `LHS`.`emp_dob` AS `emp_dob`,
             `RHS`.`dept_code` AS `dept_code`,
             `RHS`.`prof_office` AS `prof_office`,
             `RHS`.`prof_extension` AS `prof_extension`,
             `RHS`.`prof_high_degree` AS `prof_high_degree`
      FROM `df_employee` AS `LHS`
      INNER JOIN `df_professor` AS `RHS` ON (`LHS`.`emp_num` = `RHS`.`emp_num`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_professor` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_department`
              WHERE (`dept_name` != 'History')) AS RHS
           WHERE (LHS.dept_code = RHS.dept_code) )) AS RHS ON (LHS.emp_num = RHS.emp_num
                                                               AND LHS.dept_code = RHS.dept_code
                                                               AND LHS.prof_office = RHS.prof_office
                                                               AND LHS.prof_extension = RHS.prof_extension
                                                               AND LHS.prof_high_degree = RHS.prof_high_degree))
ORDER BY emp_lname;",3,19,6,0,6,2,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0
spider/college_1/0030,"summarise(input0, 'n_distinct = n_distinct(dept_name)', '')","SELECT n_distinct AS count_distinct_dept_name_
FROM
  (SELECT COUNT(DISTINCT dept_name) AS n_distinct
   FROM df_department)
ORDER BY count_distinct_dept_name_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_1/0013,"summarise(input0, 'n = n()', ""'school_code'""), filter(line0, 'n <= 5L')","SELECT n AS count_distinct_dept_name_,
       school_code
FROM
  (SELECT school_code,
          COUNT() AS n
   FROM df_department
   GROUP BY school_code)
WHERE (n <= 5)
ORDER BY count_distinct_dept_name_;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_1/0006,"filter(input0, ""dept_name == 'Accounting'""), intersect(input0, line0, 'school_code')","SELECT `school_code`
FROM
  (SELECT `school_code`
   FROM `df_department` INTERSECT SELECT `school_code`
   FROM `df_department`
   WHERE (`dept_name` = 'Accounting'))
ORDER BY school_code;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/college_1/0065,"mutate(input0, 'meanstu_gpa = mean(stu_gpa, na.rm = T)'), filter(line0, 'meanstu_gpa > stu_gpa')","SELECT stu_fname,
       stu_gpa
FROM
  (SELECT stu_num,
          stu_lname,
          stu_fname,
          stu_init,
          stu_dob,
          stu_hrs,
          stu_class,
          stu_gpa,
          stu_transfer,
          dept_code,
          stu_phone,
          prof_num,
          AVG(stu_gpa) OVER () AS meanstu_gpa
   FROM df_student)
WHERE (meanstu_gpa > stu_gpa)
ORDER BY stu_fname;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/college_1/0064,"natural_join(input0, input1), limit(line0, 'dept_code')","SELECT dept_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.dept_code AS dept_code,
                LHS.dept_name AS dept_name,
                LHS.school_code AS school_code,
                LHS.emp_num AS emp_num,
                LHS.dept_address AS dept_address,
                LHS.dept_extension AS dept_extension,
                RHS.stu_num AS stu_num,
                RHS.stu_lname AS stu_lname,
                RHS.stu_fname AS stu_fname,
                RHS.stu_init AS stu_init,
                RHS.stu_dob AS stu_dob,
                RHS.stu_hrs AS stu_hrs,
                RHS.stu_class AS stu_class,
                RHS.stu_gpa AS stu_gpa,
                RHS.stu_transfer AS stu_transfer,
                RHS.stu_phone AS stu_phone,
                RHS.prof_num AS prof_num
         FROM df_department AS LHS
         INNER JOIN df_student AS RHS ON (LHS.dept_code = RHS.dept_code))
      ORDER BY dept_code)
   LIMIT 1);",1,10,4,0,4,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/college_1/0004,"inner_join(input0, input1, ""'prof_num' = 'emp_num'""), filter(line0, ""crs_code == 'ACCT-211'"")","SELECT DISTINCT `emp_fname`,
                `emp_dob`
FROM
  (SELECT `class_code`,
          `crs_code`,
          `class_section`,
          `class_time`,
          `class_room`,
          `prof_num`,
          `emp_lname`,
          `emp_fname`,
          `emp_initial`,
          `emp_jobcode`,
          `emp_hiredate`,
          `emp_dob`,
          `prof_num` AS `emp_num`
   FROM
     (SELECT `LHS`.`class_code` AS `class_code`,
             `LHS`.`crs_code` AS `crs_code`,
             `LHS`.`class_section` AS `class_section`,
             `LHS`.`class_time` AS `class_time`,
             `LHS`.`class_room` AS `class_room`,
             `LHS`.`prof_num` AS `prof_num`,
             `RHS`.`emp_lname` AS `emp_lname`,
             `RHS`.`emp_fname` AS `emp_fname`,
             `RHS`.`emp_initial` AS `emp_initial`,
             `RHS`.`emp_jobcode` AS `emp_jobcode`,
             `RHS`.`emp_hiredate` AS `emp_hiredate`,
             `RHS`.`emp_dob` AS `emp_dob`
      FROM `df_class` AS `LHS`
      INNER JOIN `df_employee` AS `RHS` ON (`LHS`.`prof_num` = `RHS`.`emp_num`)))
WHERE (`crs_code` = 'ACCT-211')
ORDER BY emp_fname;",2,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/college_1/0012,"summarise(input0, 'n = n()', ""'school_code'"")","SELECT n AS count_distinct_dept_name_,
       school_code
FROM
  (SELECT school_code,
          COUNT() AS n
   FROM df_department
   GROUP BY school_code)
ORDER BY count_distinct_dept_name_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_1/0015,"summarise(input0, 'sumcrs_credit = sum(crs_credit)', ""'dept_code'"")","SELECT sumcrs_credit AS sum_crs_credit_,
       dept_code
FROM
  (SELECT dept_code,
          SUM(crs_credit) AS sumcrs_credit
   FROM df_course
   GROUP BY dept_code)
ORDER BY sum_crs_credit_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_1/0005,"summarise(input1, 'n = n()', ""'emp_hiredate','emp_lname'""), natural_join3(input0, input1, line0), filter(line1, ""emp_lname != 'Graztevski'""), summarise(line2, 'n = n()', ""'class_code','class_room'"")","SELECT DISTINCT `n` AS `count___`
FROM
  (SELECT `class_code`,
          `class_room`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`class_code` AS `class_code`,
                `LHS`.`crs_code` AS `crs_code`,
                `LHS`.`class_section` AS `class_section`,
                `LHS`.`class_time` AS `class_time`,
                `LHS`.`class_room` AS `class_room`,
                `LHS`.`prof_num` AS `prof_num`,
                `LHS`.`emp_num` AS `emp_num`,
                `LHS`.`emp_lname` AS `emp_lname`,
                `LHS`.`emp_fname` AS `emp_fname`,
                `LHS`.`emp_initial` AS `emp_initial`,
                `LHS`.`emp_jobcode` AS `emp_jobcode`,
                `LHS`.`emp_hiredate` AS `emp_hiredate`,
                `LHS`.`emp_dob` AS `emp_dob`,
                `RHS`.`n` AS `n`
         FROM
           (SELECT `LHS`.`class_code` AS `class_code`,
                   `LHS`.`crs_code` AS `crs_code`,
                   `LHS`.`class_section` AS `class_section`,
                   `LHS`.`class_time` AS `class_time`,
                   `LHS`.`class_room` AS `class_room`,
                   `LHS`.`prof_num` AS `prof_num`,
                   `RHS`.`emp_num` AS `emp_num`,
                   `RHS`.`emp_lname` AS `emp_lname`,
                   `RHS`.`emp_fname` AS `emp_fname`,
                   `RHS`.`emp_initial` AS `emp_initial`,
                   `RHS`.`emp_jobcode` AS `emp_jobcode`,
                   `RHS`.`emp_hiredate` AS `emp_hiredate`,
                   `RHS`.`emp_dob` AS `emp_dob`
            FROM `df_class` AS `LHS`
            CROSS JOIN `df_employee` AS `RHS`) AS `LHS`
         INNER JOIN
           (SELECT `emp_hiredate`,
                   `emp_lname`,
                   COUNT() AS `n`
            FROM `df_employee`
            GROUP BY `emp_hiredate`,
                     `emp_lname`) AS `RHS` ON (`LHS`.`emp_lname` = `RHS`.`emp_lname`
                                               AND `LHS`.`emp_hiredate` = `RHS`.`emp_hiredate`))
      WHERE (`emp_lname` != 'Graztevski'))
   GROUP BY class_code,
            class_room)
ORDER BY count___;",4,15,6,1,6,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,1,0,0,0,0,0,0
spider/college_1/0016,"summarise(input0, 'n = n()', ""'class_room'""), filter(line0, 'n >= 2L')","SELECT n AS count___,
       class_room
FROM
  (SELECT class_room,
          COUNT() AS n
   FROM df_class
   GROUP BY class_room)
WHERE (n >= 2)
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_1/0066,"mutate(input1, 'n = n()'), inner_join(input0, line0, ""'emp_num' = 'stu_hrs','dept_code' = 'dept_code'"")","SELECT dept_name,
       dept_address
FROM
  (SELECT LHS.dept_code AS dept_code,
          LHS.dept_name AS dept_name,
          LHS.school_code AS school_code,
          LHS.emp_num AS emp_num,
          LHS.dept_address AS dept_address,
          LHS.dept_extension AS dept_extension,
          RHS.stu_num AS stu_num,
          RHS.stu_lname AS stu_lname,
          RHS.stu_fname AS stu_fname,
          RHS.stu_init AS stu_init,
          RHS.stu_dob AS stu_dob,
          RHS.stu_class AS stu_class,
          RHS.stu_gpa AS stu_gpa,
          RHS.stu_transfer AS stu_transfer,
          RHS.stu_phone AS stu_phone,
          RHS.prof_num AS prof_num,
          RHS.n AS n
   FROM df_department AS LHS
   INNER JOIN
     (SELECT stu_num,
             stu_lname,
             stu_fname,
             stu_init,
             stu_dob,
             stu_hrs,
             stu_class,
             stu_gpa,
             stu_transfer,
             dept_code,
             stu_phone,
             prof_num,
             COUNT(*) OVER () AS n
      FROM df_student) AS RHS ON (LHS.emp_num = RHS.stu_hrs
                                  AND LHS.dept_code = RHS.dept_code))
ORDER BY dept_name;",2,8,3,0,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/college_1/0062,"filter(input0, ""crs_code != 'ACCT-211'""), natural_join(input1, input2), summarise(line1, 'meanstu_gpa = mean(stu_gpa, na.rm = T)', ""'class_code'""), semi_join(line2, line0)","SELECT DISTINCT `meanstu_gpa` AS `avg_t2_stu_gpa_`
FROM
  (SELECT *
   FROM
     (SELECT `class_code`,
             AVG(`stu_gpa`) AS `meanstu_gpa`
      FROM
        (SELECT `LHS`.`class_code` AS `class_code`,
                `LHS`.`stu_num` AS `stu_num`,
                `LHS`.`enroll_grade` AS `enroll_grade`,
                `RHS`.`stu_lname` AS `stu_lname`,
                `RHS`.`stu_fname` AS `stu_fname`,
                `RHS`.`stu_init` AS `stu_init`,
                `RHS`.`stu_dob` AS `stu_dob`,
                `RHS`.`stu_hrs` AS `stu_hrs`,
                `RHS`.`stu_class` AS `stu_class`,
                `RHS`.`stu_gpa` AS `stu_gpa`,
                `RHS`.`stu_transfer` AS `stu_transfer`,
                `RHS`.`dept_code` AS `dept_code`,
                `RHS`.`stu_phone` AS `stu_phone`,
                `RHS`.`prof_num` AS `prof_num`
         FROM `df_enroll` AS `LHS`
         INNER JOIN `df_student` AS `RHS` ON (`LHS`.`stu_num` = `RHS`.`stu_num`))
      GROUP BY `class_code`) AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_class`
           WHERE (`crs_code` != 'ACCT-211')) AS RHS
        WHERE (LHS.class_code = RHS.class_code) ))
ORDER BY avg_t2_stu_gpa_;",4,18,6,1,6,1,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0
spider/college_1/0068,"natural_join(input0, input2), filter(line0, ""dept_name == 'History' & prof_high_degree == 'Ph.D.'""), natural_join(input1, line1)","SELECT `emp_fname`,
       `prof_office`
FROM
  (SELECT `LHS`.`emp_num` AS `emp_num`,
          `LHS`.`emp_lname` AS `emp_lname`,
          `LHS`.`emp_fname` AS `emp_fname`,
          `LHS`.`emp_initial` AS `emp_initial`,
          `LHS`.`emp_jobcode` AS `emp_jobcode`,
          `LHS`.`emp_hiredate` AS `emp_hiredate`,
          `LHS`.`emp_dob` AS `emp_dob`,
          `RHS`.`dept_code` AS `dept_code`,
          `RHS`.`dept_name` AS `dept_name`,
          `RHS`.`school_code` AS `school_code`,
          `RHS`.`dept_address` AS `dept_address`,
          `RHS`.`dept_extension` AS `dept_extension`,
          `RHS`.`prof_office` AS `prof_office`,
          `RHS`.`prof_extension` AS `prof_extension`,
          `RHS`.`prof_high_degree` AS `prof_high_degree`
   FROM `df_employee` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM
        (SELECT `LHS`.`dept_code` AS `dept_code`,
                `LHS`.`dept_name` AS `dept_name`,
                `LHS`.`school_code` AS `school_code`,
                `LHS`.`emp_num` AS `emp_num`,
                `LHS`.`dept_address` AS `dept_address`,
                `LHS`.`dept_extension` AS `dept_extension`,
                `RHS`.`prof_office` AS `prof_office`,
                `RHS`.`prof_extension` AS `prof_extension`,
                `RHS`.`prof_high_degree` AS `prof_high_degree`
         FROM `df_department` AS `LHS`
         INNER JOIN `df_professor` AS `RHS` ON (`LHS`.`dept_code` = `RHS`.`dept_code`
                                                AND `LHS`.`emp_num` = `RHS`.`emp_num`))
      WHERE (`dept_name` = 'History'
             AND `prof_high_degree` = 'Ph.D.')) AS RHS ON (LHS.emp_num = RHS.emp_num))
ORDER BY emp_fname;",3,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0
spider/college_1/0059,"filter(input0, ""dept_name != 'Accounting' & dept_name != 'Biology'""), anti_join(input1, line0, ""'dept_code'""), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM
  (SELECT *
   FROM `df_professor` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_department`
           WHERE (`dept_name` != 'Accounting'
                  AND `dept_name` != 'Biology')) AS RHS
        WHERE (LHS.dept_code = RHS.dept_code) ))
ORDER BY count___;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/college_1/0032,"summarise(input0, 'n_distinct = n_distinct(class_section)', ""'crs_code'""), filter(line0, ""crs_code == 'ACCT-211'"")","SELECT `n_distinct` AS `count_distinct_class_section_`
FROM
  (SELECT `crs_code`,
          COUNT(DISTINCT `class_section`) AS `n_distinct`
   FROM `df_class`
   GROUP BY `crs_code`)
WHERE (`crs_code` = 'ACCT-211')
ORDER BY count_distinct_class_section_;",2,6,2,1,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_1/0045,"natural_join(input0, input1), semi_join(line0, input1)","SELECT emp_fname,
       prof_office
FROM
  (SELECT *
   FROM
     (SELECT LHS.emp_num AS emp_num,
             LHS.emp_lname AS emp_lname,
             LHS.emp_fname AS emp_fname,
             LHS.emp_initial AS emp_initial,
             LHS.emp_jobcode AS emp_jobcode,
             LHS.emp_hiredate AS emp_hiredate,
             LHS.emp_dob AS emp_dob,
             RHS.dept_code AS dept_code,
             RHS.prof_office AS prof_office,
             RHS.prof_extension AS prof_extension,
             RHS.prof_high_degree AS prof_high_degree
      FROM df_employee AS LHS
      INNER JOIN df_professor AS RHS ON (LHS.emp_num = RHS.emp_num)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_professor AS RHS
        WHERE (LHS.emp_num = RHS.emp_num
               AND LHS.dept_code = RHS.dept_code
               AND LHS.prof_office = RHS.prof_office
               AND LHS.prof_extension = RHS.prof_extension
               AND LHS.prof_high_degree = RHS.prof_high_degree) ))
ORDER BY emp_fname;",2,12,4,0,4,1,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0
spider/college_1/0063,"limit(input0, 'desc(stu_gpa)')","SELECT stu_gpa,
       stu_phone,
       stu_fname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_student
      ORDER BY stu_gpa DESC)
   LIMIT 5);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_1/0018,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'school_code'"")","SELECT n AS count___,
       school_code
FROM
  (SELECT school_code,
          COUNT() AS n
   FROM
     (SELECT LHS.class_code AS class_code,
             LHS.crs_code AS crs_code,
             LHS.class_section AS class_section,
             LHS.class_time AS class_time,
             LHS.class_room AS class_room,
             LHS.prof_num AS prof_num,
             LHS.dept_code AS dept_code,
             LHS.crs_description AS crs_description,
             LHS.crs_credit AS crs_credit,
             RHS.dept_name AS dept_name,
             RHS.school_code AS school_code,
             RHS.emp_num AS emp_num,
             RHS.dept_address AS dept_address,
             RHS.dept_extension AS dept_extension
      FROM
        (SELECT LHS.class_code AS class_code,
                LHS.crs_code AS crs_code,
                LHS.class_section AS class_section,
                LHS.class_time AS class_time,
                LHS.class_room AS class_room,
                LHS.prof_num AS prof_num,
                RHS.dept_code AS dept_code,
                RHS.crs_description AS crs_description,
                RHS.crs_credit AS crs_credit
         FROM df_class AS LHS
         INNER JOIN df_course AS RHS ON (LHS.crs_code = RHS.crs_code)) AS LHS
      INNER JOIN df_department AS RHS ON (LHS.dept_code = RHS.dept_code))
   GROUP BY school_code)
ORDER BY count___;",2,10,4,0,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
spider/college_1/0041,"natural_join4(input0, input1, input2, input3), mutate(line0, 'n = n()'), limit(line1, 'desc(class_code)')","SELECT dept_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT class_code,
                crs_code,
                class_section,
                class_time,
                class_room,
                prof_num,
                dept_code,
                crs_description,
                crs_credit,
                dept_name,
                school_code,
                emp_num,
                dept_address,
                dept_extension,
                stu_num,
                enroll_grade,
                COUNT(*) OVER () AS n
         FROM
           (SELECT LHS.class_code AS class_code,
                   LHS.crs_code AS crs_code,
                   LHS.class_section AS class_section,
                   LHS.class_time AS class_time,
                   LHS.class_room AS class_room,
                   LHS.prof_num AS prof_num,
                   LHS.dept_code AS dept_code,
                   LHS.crs_description AS crs_description,
                   LHS.crs_credit AS crs_credit,
                   LHS.dept_name AS dept_name,
                   LHS.school_code AS school_code,
                   LHS.emp_num AS emp_num,
                   LHS.dept_address AS dept_address,
                   LHS.dept_extension AS dept_extension,
                   RHS.stu_num AS stu_num,
                   RHS.enroll_grade AS enroll_grade
            FROM
              (SELECT LHS.class_code AS class_code,
                      LHS.crs_code AS crs_code,
                      LHS.class_section AS class_section,
                      LHS.class_time AS class_time,
                      LHS.class_room AS class_room,
                      LHS.prof_num AS prof_num,
                      LHS.dept_code AS dept_code,
                      LHS.crs_description AS crs_description,
                      LHS.crs_credit AS crs_credit,
                      RHS.dept_name AS dept_name,
                      RHS.school_code AS school_code,
                      RHS.emp_num AS emp_num,
                      RHS.dept_address AS dept_address,
                      RHS.dept_extension AS dept_extension
               FROM
                 (SELECT LHS.class_code AS class_code,
                         LHS.crs_code AS crs_code,
                         LHS.class_section AS class_section,
                         LHS.class_time AS class_time,
                         LHS.class_room AS class_room,
                         LHS.prof_num AS prof_num,
                         RHS.dept_code AS dept_code,
                         RHS.crs_description AS crs_description,
                         RHS.crs_credit AS crs_credit
                  FROM df_class AS LHS
                  INNER JOIN df_course AS RHS ON (LHS.crs_code = RHS.crs_code)) AS LHS
               INNER JOIN df_department AS RHS ON (LHS.dept_code = RHS.dept_code)) AS LHS
            INNER JOIN df_enroll AS RHS ON (LHS.class_code = RHS.class_code)))
      ORDER BY class_code DESC)
   LIMIT 1);",2,20,7,0,7,3,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0
spider/college_1/0035,"filter(input0, ""crs_code != 'ACCT-211'""), intersect(input1, line0, 'class_code'), summarise(line1, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT `class_code`
      FROM `df_enroll` INTERSECT SELECT `class_code`
      FROM `df_class`
      WHERE (`crs_code` != 'ACCT-211')))
ORDER BY count___;",3,10,4,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0
spider/college_1/0020,"summarise(input0, 'n = n()', ""'emp_jobcode'""), limit(line0, 'desc(n)')","SELECT emp_jobcode,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT emp_jobcode,
                COUNT() AS n
         FROM df_employee
         GROUP BY emp_jobcode)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_1/0019,"summarise(input0, 'n = n()', ""'dept_code','school_code'""), left_join(line0, input1), summarise(line1, 'n = n()', ""'school_code'"")","SELECT n AS count___,
       school_code
FROM
  (SELECT school_code,
          COUNT() AS n
   FROM
     (SELECT LHS.dept_code AS dept_code,
             LHS.school_code AS school_code,
             LHS.n AS n,
             RHS.emp_num AS emp_num,
             RHS.prof_office AS prof_office,
             RHS.prof_extension AS prof_extension,
             RHS.prof_high_degree AS prof_high_degree
      FROM
        (SELECT dept_code,
                school_code,
                COUNT() AS n
         FROM df_department
         GROUP BY dept_code,
                  school_code) AS LHS
      LEFT JOIN df_professor AS RHS ON (LHS.dept_code = RHS.dept_code))
   GROUP BY school_code)
ORDER BY count___;",3,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0
spider/college_1/0007,"filter(input0, ""crs_code == 'CIS-220'""), semi_join(line0, input0)","SELECT `crs_credit`,
       `crs_description`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_course`
      WHERE (`crs_code` = 'CIS-220')) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_course AS RHS
        WHERE (LHS.crs_code = RHS.crs_code
               AND LHS.dept_code = RHS.dept_code
               AND LHS.crs_description = RHS.crs_description
               AND LHS.crs_credit = RHS.crs_credit) ))
ORDER BY crs_credit;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/college_1/0061,"filter(input2, ""dept_name != 'Accounting' | dept_name == 'Computer Info. Systems'""), intersect(input1, input0, 'crs_code'), natural_join4(input3, input4, line0, line1)","SELECT DISTINCT `stu_fname`
FROM
  (SELECT `LHS`.`class_code` AS `class_code`,
          `LHS`.`stu_num` AS `stu_num`,
          `LHS`.`enroll_grade` AS `enroll_grade`,
          `LHS`.`stu_lname` AS `stu_lname`,
          `LHS`.`stu_fname` AS `stu_fname`,
          `LHS`.`stu_init` AS `stu_init`,
          `LHS`.`stu_dob` AS `stu_dob`,
          `LHS`.`stu_hrs` AS `stu_hrs`,
          `LHS`.`stu_class` AS `stu_class`,
          `LHS`.`stu_gpa` AS `stu_gpa`,
          `LHS`.`stu_transfer` AS `stu_transfer`,
          `LHS`.`dept_code` AS `dept_code`,
          `LHS`.`stu_phone` AS `stu_phone`,
          `LHS`.`prof_num` AS `prof_num`,
          `LHS`.`dept_name` AS `dept_name`,
          `LHS`.`school_code` AS `school_code`,
          `LHS`.`emp_num` AS `emp_num`,
          `LHS`.`dept_address` AS `dept_address`,
          `LHS`.`dept_extension` AS `dept_extension`,
          `RHS`.`crs_code` AS `crs_code`
   FROM
     (SELECT `LHS`.`class_code` AS `class_code`,
             `LHS`.`stu_num` AS `stu_num`,
             `LHS`.`enroll_grade` AS `enroll_grade`,
             `LHS`.`stu_lname` AS `stu_lname`,
             `LHS`.`stu_fname` AS `stu_fname`,
             `LHS`.`stu_init` AS `stu_init`,
             `LHS`.`stu_dob` AS `stu_dob`,
             `LHS`.`stu_hrs` AS `stu_hrs`,
             `LHS`.`stu_class` AS `stu_class`,
             `LHS`.`stu_gpa` AS `stu_gpa`,
             `LHS`.`stu_transfer` AS `stu_transfer`,
             `LHS`.`dept_code` AS `dept_code`,
             `LHS`.`stu_phone` AS `stu_phone`,
             `LHS`.`prof_num` AS `prof_num`,
             `RHS`.`dept_name` AS `dept_name`,
             `RHS`.`school_code` AS `school_code`,
             `RHS`.`emp_num` AS `emp_num`,
             `RHS`.`dept_address` AS `dept_address`,
             `RHS`.`dept_extension` AS `dept_extension`
      FROM
        (SELECT `LHS`.`class_code` AS `class_code`,
                `LHS`.`stu_num` AS `stu_num`,
                `LHS`.`enroll_grade` AS `enroll_grade`,
                `RHS`.`stu_lname` AS `stu_lname`,
                `RHS`.`stu_fname` AS `stu_fname`,
                `RHS`.`stu_init` AS `stu_init`,
                `RHS`.`stu_dob` AS `stu_dob`,
                `RHS`.`stu_hrs` AS `stu_hrs`,
                `RHS`.`stu_class` AS `stu_class`,
                `RHS`.`stu_gpa` AS `stu_gpa`,
                `RHS`.`stu_transfer` AS `stu_transfer`,
                `RHS`.`dept_code` AS `dept_code`,
                `RHS`.`stu_phone` AS `stu_phone`,
                `RHS`.`prof_num` AS `prof_num`
         FROM `df_enroll` AS `LHS`
         INNER JOIN `df_student` AS `RHS` ON (`LHS`.`stu_num` = `RHS`.`stu_num`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_department`
         WHERE (`dept_name` != 'Accounting'
                OR `dept_name` = 'Computer Info. Systems')) AS RHS ON (LHS.dept_code = RHS.dept_code)) AS LHS
   CROSS JOIN
     (SELECT crs_code
      FROM df_course INTERSECT SELECT crs_code
      FROM df_class) AS RHS)
ORDER BY stu_fname;",3,20,7,1,7,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0
spider/college_1/0034,"natural_join3(input0, input1, input2), cross_join(line0, input1, 'crs_credit > crs_credit.other'), summarise(line1, 'sumcrs_credit = sum(crs_credit)', ""'dept_address','dept_name'"")","SELECT dept_name
FROM
  (SELECT dept_address,
          dept_name,
          SUM(crs_credit) AS sumcrs_credit
   FROM
     (SELECT *
      FROM
        (SELECT LHS.class_code AS class_code,
                LHS.crs_code AS crs_code,
                LHS.class_section AS class_section,
                LHS.class_time AS class_time,
                LHS.class_room AS class_room,
                LHS.prof_num AS prof_num,
                LHS.dept_code AS dept_code,
                LHS.crs_description AS crs_description,
                LHS.crs_credit AS crs_credit,
                LHS.dept_name AS dept_name,
                LHS.school_code AS school_code,
                LHS.emp_num AS emp_num,
                LHS.dept_address AS dept_address,
                LHS.dept_extension AS dept_extension,
                RHS.crs_code AS crs_code_other,
                RHS.dept_code AS dept_code_other,
                RHS.crs_description AS crs_description_other,
                RHS.crs_credit AS crs_credit_other
         FROM
           (SELECT LHS.class_code AS class_code,
                   LHS.crs_code AS crs_code,
                   LHS.class_section AS class_section,
                   LHS.class_time AS class_time,
                   LHS.class_room AS class_room,
                   LHS.prof_num AS prof_num,
                   LHS.dept_code AS dept_code,
                   LHS.crs_description AS crs_description,
                   LHS.crs_credit AS crs_credit,
                   RHS.dept_name AS dept_name,
                   RHS.school_code AS school_code,
                   RHS.emp_num AS emp_num,
                   RHS.dept_address AS dept_address,
                   RHS.dept_extension AS dept_extension
            FROM
              (SELECT LHS.class_code AS class_code,
                      LHS.crs_code AS crs_code,
                      LHS.class_section AS class_section,
                      LHS.class_time AS class_time,
                      LHS.class_room AS class_room,
                      LHS.prof_num AS prof_num,
                      RHS.dept_code AS dept_code,
                      RHS.crs_description AS crs_description,
                      RHS.crs_credit AS crs_credit
               FROM df_class AS LHS
               INNER JOIN df_course AS RHS ON (LHS.crs_code = RHS.crs_code)) AS LHS
            INNER JOIN df_department AS RHS ON (LHS.dept_code = RHS.dept_code)) AS LHS
         CROSS JOIN df_course AS RHS)
      WHERE (crs_credit > crs_credit_other))
   GROUP BY dept_address,
            dept_name)
ORDER BY dept_name;",3,15,6,0,6,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0
spider/college_1/0024,"summarise(input0, 'sumstu_hrs = sum(stu_hrs)', ""'dept_code','stu_hrs'""), summarise(line0, 'sumstu_hrs = sum(stu_hrs)', ""'dept_code'"")","SELECT sumstu_hrs AS sum_stu_hrs_,
       dept_code
FROM
  (SELECT dept_code,
          SUM(stu_hrs) AS sumstu_hrs
   FROM
     (SELECT dept_code,
             stu_hrs,
             SUM(stu_hrs) AS sumstu_hrs
      FROM df_student
      GROUP BY dept_code,
               stu_hrs)
   GROUP BY dept_code)
ORDER BY sum_stu_hrs_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_1/0021,"left_join(input0, input1), summarise(line0, 'n = n()', ""'school_code'""), cross_join(line1, line1, 'n < n.other')","SELECT school_code
FROM
  (SELECT LHS.school_code AS school_code,
          LHS.n AS n,
          RHS.school_code AS school_code_other,
          RHS.n AS n_other
   FROM
     (SELECT school_code,
             COUNT() AS n
      FROM
        (SELECT LHS.dept_code AS dept_code,
                LHS.dept_name AS dept_name,
                LHS.school_code AS school_code,
                LHS.emp_num AS emp_num,
                LHS.dept_address AS dept_address,
                LHS.dept_extension AS dept_extension,
                RHS.prof_office AS prof_office,
                RHS.prof_extension AS prof_extension,
                RHS.prof_high_degree AS prof_high_degree
         FROM df_department AS LHS
         LEFT JOIN df_professor AS RHS ON (LHS.dept_code = RHS.dept_code
                                           AND LHS.emp_num = RHS.emp_num))
      GROUP BY school_code) AS LHS
   CROSS JOIN
     (SELECT school_code,
             COUNT() AS n
      FROM
        (SELECT LHS.dept_code AS dept_code,
                LHS.dept_name AS dept_name,
                LHS.school_code AS school_code,
                LHS.emp_num AS emp_num,
                LHS.dept_address AS dept_address,
                LHS.dept_extension AS dept_extension,
                RHS.prof_office AS prof_office,
                RHS.prof_extension AS prof_extension,
                RHS.prof_high_degree AS prof_high_degree
         FROM df_department AS LHS
         LEFT JOIN df_professor AS RHS ON (LHS.dept_code = RHS.dept_code
                                           AND LHS.emp_num = RHS.emp_num))
      GROUP BY school_code) AS RHS)
WHERE (n < n_other)
ORDER BY school_code;",3,15,6,0,6,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0
spider/college_1/0069,"inner_join(input0, input1, ""'prof_num' = 'emp_num'"")","SELECT emp_fname,
       crs_code
FROM
  (SELECT LHS.class_code AS class_code,
          LHS.crs_code AS crs_code,
          LHS.class_section AS class_section,
          LHS.class_time AS class_time,
          LHS.class_room AS class_room,
          LHS.prof_num AS prof_num,
          RHS.emp_lname AS emp_lname,
          RHS.emp_fname AS emp_fname,
          RHS.emp_initial AS emp_initial,
          RHS.emp_jobcode AS emp_jobcode,
          RHS.emp_hiredate AS emp_hiredate,
          RHS.emp_dob AS emp_dob
   FROM df_class AS LHS
   INNER JOIN df_employee AS RHS ON (LHS.prof_num = RHS.emp_num))
ORDER BY emp_fname;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/college_1/0023,"summarise(input0, 'n = n()', ""'dept_code'"")","SELECT n AS count___,
       dept_code
FROM
  (SELECT dept_code,
          COUNT() AS n
   FROM df_student
   GROUP BY dept_code)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_1/0001,"filter(input0, ""dept_name == 'Accounting'""), summarise(input1, 'n = n()', ""'dept_code'""), left_join(line0, line1)","SELECT `n` AS `count___`
FROM
  (SELECT `LHS`.`dept_code` AS `dept_code`,
          `LHS`.`dept_name` AS `dept_name`,
          `LHS`.`school_code` AS `school_code`,
          `LHS`.`emp_num` AS `emp_num`,
          `LHS`.`dept_address` AS `dept_address`,
          `LHS`.`dept_extension` AS `dept_extension`,
          `RHS`.`n` AS `n`
   FROM
     (SELECT *
      FROM `df_department`
      WHERE (`dept_name` = 'Accounting')) AS LHS
   LEFT JOIN
     (SELECT dept_code,
             COUNT() AS n
      FROM df_professor
      GROUP BY dept_code) AS RHS ON (LHS.dept_code = RHS.dept_code))
ORDER BY count___;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/college_1/0043,"filter(input0, ""class_room == 'KLR209'"")","SELECT `class_code`
FROM `df_class`
WHERE (`class_room` = 'KLR209')
ORDER BY class_code;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_1/0046,"limit(input0, 'emp_dob')","SELECT emp_fname,
       emp_lname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_employee
      ORDER BY emp_dob)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_1/0054,"filter(input1, ""emp_lname == 'Heffington'""), semi_join(input2, line0), inner_join(input0, line1, ""'dept_code'"")","SELECT `dept_name`,
       `prof_office`
FROM
  (SELECT `LHS`.`dept_code` AS `dept_code`,
          `LHS`.`dept_name` AS `dept_name`,
          `LHS`.`school_code` AS `school_code`,
          `LHS`.`emp_num` AS `emp_num`,
          `LHS`.`dept_address` AS `dept_address`,
          `LHS`.`dept_extension` AS `dept_extension`,
          `RHS`.`emp_num` AS `emp_num_other`,
          `RHS`.`prof_office` AS `prof_office`,
          `RHS`.`prof_extension` AS `prof_extension`,
          `RHS`.`prof_high_degree` AS `prof_high_degree`
   FROM `df_department` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_professor` AS `LHS`
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_employee`
              WHERE (`emp_lname` = 'Heffington')) AS RHS
           WHERE (LHS.emp_num = RHS.emp_num) )) AS RHS ON (LHS.dept_code = RHS.dept_code))
ORDER BY dept_name;",3,15,5,0,5,1,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0
spider/college_1/0077,"filter(input0, ""enroll_grade == 'A' & class_code == 10018L""), natural_join(input1, line0)","SELECT `stu_lname`
FROM
  (SELECT `LHS`.`stu_num` AS `stu_num`,
          `LHS`.`stu_lname` AS `stu_lname`,
          `LHS`.`stu_fname` AS `stu_fname`,
          `LHS`.`stu_init` AS `stu_init`,
          `LHS`.`stu_dob` AS `stu_dob`,
          `LHS`.`stu_hrs` AS `stu_hrs`,
          `LHS`.`stu_class` AS `stu_class`,
          `LHS`.`stu_gpa` AS `stu_gpa`,
          `LHS`.`stu_transfer` AS `stu_transfer`,
          `LHS`.`dept_code` AS `dept_code`,
          `LHS`.`stu_phone` AS `stu_phone`,
          `LHS`.`prof_num` AS `prof_num`,
          `RHS`.`class_code` AS `class_code`,
          `RHS`.`enroll_grade` AS `enroll_grade`
   FROM `df_student` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_enroll`
      WHERE (`enroll_grade` = 'A'
             AND class_code = 10018)) AS RHS ON (LHS.stu_num = RHS.stu_num))
ORDER BY stu_lname;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/college_1/0047,"filter(input0, 'stu_gpa > 3 & stu_gpa != 1'), limit(line0, 'desc(stu_lname)')","SELECT stu_fname,
       stu_lname,
       stu_gpa
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM df_student
         WHERE (stu_gpa > 3.0
                AND stu_gpa != 1.0))
      ORDER BY stu_lname DESC)
   LIMIT 1);",1,11,4,0,4,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_1/0014,"summarise(input0, 'n = n()', ""'crs_code'"")","SELECT n AS count___,
       crs_code
FROM
  (SELECT crs_code,
          COUNT() AS n
   FROM df_class
   GROUP BY crs_code)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_1/0009,"filter(input0, ""school_code == 'BUS'""), summarise(line0, 'n = n()', '')","SELECT `n` AS `count_distinct_dept_address_`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_department`
      WHERE (`school_code` = 'BUS')))
ORDER BY count_distinct_dept_address_;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_1/0011,"filter(input0, ""crs_code == 'QM-261'"")","SELECT `crs_credit`,
       `crs_description`
FROM `df_course`
WHERE (`crs_code` = 'QM-261')
ORDER BY crs_credit;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_1/0060,"filter(input0, ""crs_code != 'CIS-220' & crs_code == 'QM-261'""), inner_join(line0, input1, ""'prof_num' = 'emp_num'"")","SELECT DISTINCT `emp_fname`
FROM
  (SELECT `LHS`.`class_code` AS `class_code`,
          `LHS`.`crs_code` AS `crs_code`,
          `LHS`.`class_section` AS `class_section`,
          `LHS`.`class_time` AS `class_time`,
          `LHS`.`class_room` AS `class_room`,
          `LHS`.`prof_num` AS `prof_num`,
          `RHS`.`emp_lname` AS `emp_lname`,
          `RHS`.`emp_fname` AS `emp_fname`,
          `RHS`.`emp_initial` AS `emp_initial`,
          `RHS`.`emp_jobcode` AS `emp_jobcode`,
          `RHS`.`emp_hiredate` AS `emp_hiredate`,
          `RHS`.`emp_dob` AS `emp_dob`
   FROM
     (SELECT *
      FROM `df_class`
      WHERE (`crs_code` != 'CIS-220'
             AND `crs_code` = 'QM-261')) AS LHS
   INNER JOIN df_employee AS RHS ON (LHS.prof_num = RHS.emp_num))
ORDER BY emp_fname;",2,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/college_1/0079,"summarise(input0, 'n = n()', ""'prof_num'""), filter(line0, 'n != 1L'), inner_join(line1, input1, ""'prof_num' = 'emp_num'"")","SELECT emp_fname
FROM
  (SELECT LHS.prof_num AS prof_num,
          LHS.n AS n,
          RHS.emp_lname AS emp_lname,
          RHS.emp_fname AS emp_fname,
          RHS.emp_initial AS emp_initial,
          RHS.emp_jobcode AS emp_jobcode,
          RHS.emp_hiredate AS emp_hiredate,
          RHS.emp_dob AS emp_dob
   FROM
     (SELECT *
      FROM
        (SELECT prof_num,
                COUNT() AS n
         FROM df_class
         GROUP BY prof_num)
      WHERE (n != 1)) AS LHS
   INNER JOIN df_employee AS RHS ON (LHS.prof_num = RHS.emp_num))
ORDER BY emp_fname;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/college_1/0067,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'dept_address','dept_name'"")","SELECT dept_name,
       dept_address,
       n AS count___
FROM
  (SELECT dept_address,
          dept_name,
          COUNT() AS n
   FROM
     (SELECT LHS.dept_code AS dept_code,
             LHS.dept_name AS dept_name,
             LHS.school_code AS school_code,
             LHS.emp_num AS emp_num,
             LHS.dept_address AS dept_address,
             LHS.dept_extension AS dept_extension,
             RHS.stu_num AS stu_num,
             RHS.stu_lname AS stu_lname,
             RHS.stu_fname AS stu_fname,
             RHS.stu_init AS stu_init,
             RHS.stu_dob AS stu_dob,
             RHS.stu_hrs AS stu_hrs,
             RHS.stu_class AS stu_class,
             RHS.stu_gpa AS stu_gpa,
             RHS.stu_transfer AS stu_transfer,
             RHS.stu_phone AS stu_phone,
             RHS.prof_num AS prof_num
      FROM df_department AS LHS
      INNER JOIN df_student AS RHS ON (LHS.dept_code = RHS.dept_code))
   GROUP BY dept_address,
            dept_name)
ORDER BY dept_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/college_1/0029,"summarise(input0, 'n_distinct = n_distinct(crs_code)', '')","SELECT n_distinct AS count_distinct_crs_code_
FROM
  (SELECT COUNT(DISTINCT crs_code) AS n_distinct
   FROM df_class)
ORDER BY count_distinct_crs_code_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_1/0010,"summarise(input0, 'n = n()', ""'dept_name','school_code'""), summarise(line0, 'n = n()', ""'school_code'"")","SELECT n AS count_distinct_dept_address_,
       school_code
FROM
  (SELECT school_code,
          COUNT() AS n
   FROM
     (SELECT dept_name,
             school_code,
             COUNT() AS n
      FROM df_department
      GROUP BY dept_name,
               school_code)
   GROUP BY school_code)
ORDER BY count_distinct_dept_address_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_1/0044,"filter(input0, ""emp_jobcode == 'PROF'"")","SELECT `emp_fname`
FROM `df_employee`
WHERE (`emp_jobcode` = 'PROF')
ORDER BY emp_fname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_1/0040,"natural_join4(input0, input1, input2, input3), filter(line0, ""dept_name == 'Accounting'""), summarise(line1, 'n = n()', ""'crs_credit','dept_address'"")","SELECT `n` AS `count___`
FROM
  (SELECT `crs_credit`,
          `dept_address`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`class_code` AS `class_code`,
                `LHS`.`crs_code` AS `crs_code`,
                `LHS`.`class_section` AS `class_section`,
                `LHS`.`class_time` AS `class_time`,
                `LHS`.`class_room` AS `class_room`,
                `LHS`.`prof_num` AS `prof_num`,
                `LHS`.`dept_code` AS `dept_code`,
                `LHS`.`crs_description` AS `crs_description`,
                `LHS`.`crs_credit` AS `crs_credit`,
                `LHS`.`dept_name` AS `dept_name`,
                `LHS`.`school_code` AS `school_code`,
                `LHS`.`emp_num` AS `emp_num`,
                `LHS`.`dept_address` AS `dept_address`,
                `LHS`.`dept_extension` AS `dept_extension`,
                `RHS`.`stu_num` AS `stu_num`,
                `RHS`.`enroll_grade` AS `enroll_grade`
         FROM
           (SELECT `LHS`.`class_code` AS `class_code`,
                   `LHS`.`crs_code` AS `crs_code`,
                   `LHS`.`class_section` AS `class_section`,
                   `LHS`.`class_time` AS `class_time`,
                   `LHS`.`class_room` AS `class_room`,
                   `LHS`.`prof_num` AS `prof_num`,
                   `LHS`.`dept_code` AS `dept_code`,
                   `LHS`.`crs_description` AS `crs_description`,
                   `LHS`.`crs_credit` AS `crs_credit`,
                   `RHS`.`dept_name` AS `dept_name`,
                   `RHS`.`school_code` AS `school_code`,
                   `RHS`.`emp_num` AS `emp_num`,
                   `RHS`.`dept_address` AS `dept_address`,
                   `RHS`.`dept_extension` AS `dept_extension`
            FROM
              (SELECT `LHS`.`class_code` AS `class_code`,
                      `LHS`.`crs_code` AS `crs_code`,
                      `LHS`.`class_section` AS `class_section`,
                      `LHS`.`class_time` AS `class_time`,
                      `LHS`.`class_room` AS `class_room`,
                      `LHS`.`prof_num` AS `prof_num`,
                      `RHS`.`dept_code` AS `dept_code`,
                      `RHS`.`crs_description` AS `crs_description`,
                      `RHS`.`crs_credit` AS `crs_credit`
               FROM `df_class` AS `LHS`
               INNER JOIN `df_course` AS `RHS` ON (`LHS`.`crs_code` = `RHS`.`crs_code`)) AS `LHS`
            INNER JOIN `df_department` AS `RHS` ON (`LHS`.`dept_code` = `RHS`.`dept_code`)) AS `LHS`
         INNER JOIN `df_enroll` AS `RHS` ON (`LHS`.`class_code` = `RHS`.`class_code`))
      WHERE (`dept_name` = 'Accounting'))
   GROUP BY crs_credit,
            dept_address)
ORDER BY count___;",3,16,6,0,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
spider/college_1/0070,"natural_join(input1, input2), inner_join(input0, line0, ""'prof_num' = 'emp_num','crs_code' = 'crs_code'"")","SELECT emp_fname,
       crs_description
FROM
  (SELECT LHS.class_code AS class_code,
          LHS.crs_code AS crs_code,
          LHS.class_section AS class_section,
          LHS.class_time AS class_time,
          LHS.class_room AS class_room,
          LHS.prof_num AS prof_num,
          RHS.dept_code AS dept_code,
          RHS.crs_description AS crs_description,
          RHS.crs_credit AS crs_credit,
          RHS.emp_lname AS emp_lname,
          RHS.emp_fname AS emp_fname,
          RHS.emp_initial AS emp_initial,
          RHS.emp_jobcode AS emp_jobcode,
          RHS.emp_hiredate AS emp_hiredate,
          RHS.emp_dob AS emp_dob
   FROM df_class AS LHS
   INNER JOIN
     (SELECT LHS.crs_code AS crs_code,
             LHS.dept_code AS dept_code,
             LHS.crs_description AS crs_description,
             LHS.crs_credit AS crs_credit,
             RHS.emp_num AS emp_num,
             RHS.emp_lname AS emp_lname,
             RHS.emp_fname AS emp_fname,
             RHS.emp_initial AS emp_initial,
             RHS.emp_jobcode AS emp_jobcode,
             RHS.emp_hiredate AS emp_hiredate,
             RHS.emp_dob AS emp_dob
      FROM df_course AS LHS
      CROSS JOIN df_employee AS RHS) AS RHS ON (LHS.prof_num = RHS.emp_num
                                                AND LHS.crs_code = RHS.crs_code))
ORDER BY emp_fname;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0
spider/college_1/0028,"summarise(input0, 'n = n()', ""'class_time','prof_num'""), summarise(line0, 'n = n()', '')","SELECT n AS count_distinct_class_code_
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT class_time,
             prof_num,
             COUNT() AS n
      FROM df_class
      GROUP BY class_time,
               prof_num))
ORDER BY count_distinct_class_code_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_1/0049,"inner_join(input1, input0, ""'emp_num' = 'emp_num','prof_extension' = 'dept_extension'""), summarise(line0, 'n = n()', ""'dept_name','emp_num'"")","SELECT dept_name
FROM
  (SELECT dept_name,
          emp_num,
          COUNT() AS n
   FROM
     (SELECT emp_num,
             dept_code,
             prof_office,
             prof_extension,
             prof_high_degree,
             dept_code_other,
             dept_name,
             school_code,
             dept_address,
             prof_extension AS dept_extension
      FROM
        (SELECT LHS.emp_num AS emp_num,
                LHS.dept_code AS dept_code,
                LHS.prof_office AS prof_office,
                LHS.prof_extension AS prof_extension,
                LHS.prof_high_degree AS prof_high_degree,
                RHS.dept_code AS dept_code_other,
                RHS.dept_name AS dept_name,
                RHS.school_code AS school_code,
                RHS.dept_address AS dept_address
         FROM df_professor AS LHS
         INNER JOIN df_department AS RHS ON (LHS.emp_num = RHS.emp_num
                                             AND LHS.prof_extension = RHS.dept_extension)))
   GROUP BY dept_name,
            emp_num)
ORDER BY dept_name;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/college_1/0031,"filter(input1, ""dept_name == 'Computer Info. Systems'""), natural_join(input0, line0), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM
  (SELECT `LHS`.`crs_code` AS `crs_code`,
          `LHS`.`dept_code` AS `dept_code`,
          `LHS`.`crs_description` AS `crs_description`,
          `LHS`.`crs_credit` AS `crs_credit`,
          `RHS`.`dept_name` AS `dept_name`,
          `RHS`.`school_code` AS `school_code`,
          `RHS`.`emp_num` AS `emp_num`,
          `RHS`.`dept_address` AS `dept_address`,
          `RHS`.`dept_extension` AS `dept_extension`
   FROM `df_course` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_department`
      WHERE (`dept_name` = 'Computer Info. Systems')) AS RHS ON (LHS.dept_code = RHS.dept_code))
ORDER BY count___;",3,10,3,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/college_1/0055,"filter(input1, ""prof_office == 'DRE 102'""), semi_join(input0, line0)","SELECT `emp_lname`,
       `emp_hiredate`
FROM
  (SELECT *
   FROM `df_employee` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_professor`
           WHERE (`prof_office` = 'DRE 102')) AS RHS
        WHERE (LHS.emp_num = RHS.emp_num) ))
ORDER BY emp_lname;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/college_1/0058,"filter(input0, ""prof_high_degree == 'Ph.D.' | prof_high_degree == 'MA'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM `df_professor`
WHERE (`prof_high_degree` = 'Ph.D.'
       OR `prof_high_degree` = 'MA')
ORDER BY count___;",2,6,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/phone_1/0002,"limit(input0, 'rom_mib')","SELECT model_name,
       ram_mib
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_chip_model
      ORDER BY rom_mib)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/phone_1/0008,"filter(input0, ""accreditation_type == 'Full'"")","SELECT `hardware_model_name`,
       `company_name`
FROM `df_phone`
WHERE (`accreditation_type` = 'Full')
ORDER BY hardware_model_name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/phone_1/0003,"filter(input2, ""hardware_model_name == 'LG-P760'""), natural_join4(input0, input1, input2, line0)","SELECT DISTINCT `chip_model`,
                `screen_mode`
FROM
  (SELECT `LHS`.`model_name` AS `model_name`,
          `LHS`.`launch_year` AS `launch_year`,
          `LHS`.`ram_mib` AS `ram_mib`,
          `LHS`.`rom_mib` AS `rom_mib`,
          `LHS`.`slots` AS `slots`,
          `LHS`.`wifi` AS `wifi`,
          `LHS`.`bluetooth` AS `bluetooth`,
          `LHS`.`graphics_mode` AS `graphics_mode`,
          `LHS`.`char_cells` AS `char_cells`,
          `LHS`.`pixels` AS `pixels`,
          `LHS`.`hardware_colours` AS `hardware_colours`,
          `LHS`.`used_kb` AS `used_kb`,
          `LHS`.`map` AS `map`,
          `LHS`.`type` AS `type`,
          `LHS`.`company_name` AS `company_name`,
          `LHS`.`hardware_model_name` AS `hardware_model_name`,
          `LHS`.`accreditation_type` AS `accreditation_type`,
          `LHS`.`accreditation_level` AS `accreditation_level`,
          `LHS`.`date` AS `date`,
          `LHS`.`chip_model` AS `chip_model`,
          `LHS`.`screen_mode` AS `screen_mode`
   FROM
     (SELECT `LHS`.`model_name` AS `model_name`,
             `LHS`.`launch_year` AS `launch_year`,
             `LHS`.`ram_mib` AS `ram_mib`,
             `LHS`.`rom_mib` AS `rom_mib`,
             `LHS`.`slots` AS `slots`,
             `LHS`.`wifi` AS `wifi`,
             `LHS`.`bluetooth` AS `bluetooth`,
             `LHS`.`graphics_mode` AS `graphics_mode`,
             `LHS`.`char_cells` AS `char_cells`,
             `LHS`.`pixels` AS `pixels`,
             `LHS`.`hardware_colours` AS `hardware_colours`,
             `LHS`.`used_kb` AS `used_kb`,
             `LHS`.`map` AS `map`,
             `LHS`.`type` AS `type`,
             `RHS`.`company_name` AS `company_name`,
             `RHS`.`hardware_model_name` AS `hardware_model_name`,
             `RHS`.`accreditation_type` AS `accreditation_type`,
             `RHS`.`accreditation_level` AS `accreditation_level`,
             `RHS`.`date` AS `date`,
             `RHS`.`chip_model` AS `chip_model`,
             `RHS`.`screen_mode` AS `screen_mode`
      FROM
        (SELECT `LHS`.`model_name` AS `model_name`,
                `LHS`.`launch_year` AS `launch_year`,
                `LHS`.`ram_mib` AS `ram_mib`,
                `LHS`.`rom_mib` AS `rom_mib`,
                `LHS`.`slots` AS `slots`,
                `LHS`.`wifi` AS `wifi`,
                `LHS`.`bluetooth` AS `bluetooth`,
                `RHS`.`graphics_mode` AS `graphics_mode`,
                `RHS`.`char_cells` AS `char_cells`,
                `RHS`.`pixels` AS `pixels`,
                `RHS`.`hardware_colours` AS `hardware_colours`,
                `RHS`.`used_kb` AS `used_kb`,
                `RHS`.`map` AS `map`,
                `RHS`.`type` AS `type`
         FROM `df_chip_model` AS `LHS`
         CROSS JOIN `df_screen_mode` AS `RHS`) AS `LHS`
      CROSS JOIN `df_phone` AS `RHS`) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_phone`
      WHERE (`hardware_model_name` = 'LG-P760')) AS RHS ON (LHS.company_name = RHS.company_name
                                                            AND LHS.hardware_model_name = RHS.hardware_model_name
                                                            AND LHS.accreditation_type = RHS.accreditation_type
                                                            AND LHS.accreditation_level = RHS.accreditation_level
                                                            AND LHS.date = RHS.date
                                                            AND LHS.chip_model = RHS.chip_model
                                                            AND LHS.screen_mode = RHS.screen_mode))
ORDER BY chip_model;",2,13,5,1,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
spider/phone_1/0022,df_chip_model,"SELECT model_name,
       launch_year,
       ram_mib,
       rom_mib,
       slots,
       wifi,
       bluetooth
FROM df_chip_model
ORDER BY model_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/phone_1/0013,"mutate(input0, 'minused_kb = min(used_kb)'), mutate(line0, 'meanused_kb = mean(used_kb, na.rm = T)'), mutate(line1, 'used_kb = max(used_kb)')","SELECT DISTINCT MAX(used_kb) OVER () AS max_used_kb_,
                                  minused_kb AS min_used_kb_,
                                  meanused_kb AS avg_used_kb_
FROM
  (SELECT graphics_mode,
          char_cells,
          pixels,
          hardware_colours,
          used_kb,
          MAP,
          TYPE,
          minused_kb,
          AVG(used_kb) OVER () AS meanused_kb
   FROM
     (SELECT graphics_mode,
             char_cells,
             pixels,
             hardware_colours,
             used_kb,
             MAP,
             TYPE,
             MIN(used_kb) OVER () AS minused_kb
      FROM df_screen_mode))
ORDER BY max_used_kb_;",3,10,3,1,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0
spider/phone_1/0006,"filter(input1, ""company_name == 'Nokia Corporation'""), mutate(input0, 'meanrom_mib = mean(rom_mib, na.rm = T)'), inner_join(line1, line0, ""'model_name' = 'chip_model'"")","SELECT DISTINCT `ram_mib` AS `avg_t1_rom_mib_`
FROM
  (SELECT `LHS`.`model_name` AS `model_name`,
          `LHS`.`launch_year` AS `launch_year`,
          `LHS`.`ram_mib` AS `ram_mib`,
          `LHS`.`rom_mib` AS `rom_mib`,
          `LHS`.`slots` AS `slots`,
          `LHS`.`wifi` AS `wifi`,
          `LHS`.`bluetooth` AS `bluetooth`,
          `LHS`.`meanrom_mib` AS `meanrom_mib`,
          `RHS`.`company_name` AS `company_name`,
          `RHS`.`hardware_model_name` AS `hardware_model_name`,
          `RHS`.`accreditation_type` AS `accreditation_type`,
          `RHS`.`accreditation_level` AS `accreditation_level`,
          `RHS`.`date` AS `date`,
          `RHS`.`screen_mode` AS `screen_mode`
   FROM
     (SELECT `model_name`,
             `launch_year`,
             `ram_mib`,
             `rom_mib`,
             `slots`,
             `wifi`,
             `bluetooth`,
             AVG(`rom_mib`) OVER () AS `meanrom_mib`
      FROM `df_chip_model`) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_phone`
      WHERE (`company_name` = 'Nokia Corporation')) AS RHS ON (LHS.model_name = RHS.chip_model))
ORDER BY avg_t1_rom_mib_;",3,12,4,1,4,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0
spider/phone_1/0004,"summarise(input0, 'n = n()', ""'company_name'""), filter(line0, ""company_name == 'Nokia Corporation'"")","SELECT `n` AS `count___`
FROM
  (SELECT `company_name`,
          COUNT() AS `n`
   FROM `df_phone`
   GROUP BY `company_name`)
WHERE (`company_name` = 'Nokia Corporation')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/phone_1/0012,"summarise(input0, 'n = n()', ""'company_name'""), filter(line0, 'n > 1L'), mutate(line1, 'n = n()')","SELECT company_name
FROM
  (SELECT company_name,
          COUNT() AS n
   FROM df_phone
   GROUP BY company_name)
WHERE (n > 1)
ORDER BY company_name;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/phone_1/0005,"mutate(input1, 'company_name = max(company_name)'), mutate(input0, 'minram_mib = min(ram_mib)'), natural_join4(input0, input1, line0, line1), filter(line2, ""company_name != 'Nokia Corporation' & minram_mib == ram_mib"")","SELECT DISTINCT `ram_mib` AS `max_t1_ram_mib_`,
                `rom_mib` AS `min_t1_ram_mib_`
FROM
  (SELECT `LHS`.`model_name` AS `model_name`,
          `LHS`.`launch_year` AS `launch_year`,
          `LHS`.`ram_mib` AS `ram_mib`,
          `LHS`.`rom_mib` AS `rom_mib`,
          `LHS`.`slots` AS `slots`,
          `LHS`.`wifi` AS `wifi`,
          `LHS`.`bluetooth` AS `bluetooth`,
          `LHS`.`company_name` AS `company_name`,
          `LHS`.`hardware_model_name` AS `hardware_model_name`,
          `LHS`.`accreditation_type` AS `accreditation_type`,
          `LHS`.`accreditation_level` AS `accreditation_level`,
          `LHS`.`date` AS `date`,
          `LHS`.`chip_model` AS `chip_model`,
          `LHS`.`screen_mode` AS `screen_mode`,
          `RHS`.`minram_mib` AS `minram_mib`
   FROM
     (SELECT `LHS`.`model_name` AS `model_name`,
             `LHS`.`launch_year` AS `launch_year`,
             `LHS`.`ram_mib` AS `ram_mib`,
             `LHS`.`rom_mib` AS `rom_mib`,
             `LHS`.`slots` AS `slots`,
             `LHS`.`wifi` AS `wifi`,
             `LHS`.`bluetooth` AS `bluetooth`,
             `LHS`.`company_name` AS `company_name`,
             `LHS`.`hardware_model_name` AS `hardware_model_name`,
             `LHS`.`accreditation_type` AS `accreditation_type`,
             `LHS`.`accreditation_level` AS `accreditation_level`,
             `LHS`.`date` AS `date`,
             `LHS`.`chip_model` AS `chip_model`,
             `LHS`.`screen_mode` AS `screen_mode`
      FROM
        (SELECT `LHS`.`model_name` AS `model_name`,
                `LHS`.`launch_year` AS `launch_year`,
                `LHS`.`ram_mib` AS `ram_mib`,
                `LHS`.`rom_mib` AS `rom_mib`,
                `LHS`.`slots` AS `slots`,
                `LHS`.`wifi` AS `wifi`,
                `LHS`.`bluetooth` AS `bluetooth`,
                `RHS`.`company_name` AS `company_name`,
                `RHS`.`hardware_model_name` AS `hardware_model_name`,
                `RHS`.`accreditation_type` AS `accreditation_type`,
                `RHS`.`accreditation_level` AS `accreditation_level`,
                `RHS`.`date` AS `date`,
                `RHS`.`chip_model` AS `chip_model`,
                `RHS`.`screen_mode` AS `screen_mode`
         FROM `df_chip_model` AS `LHS`
         CROSS JOIN `df_phone` AS `RHS`) AS `LHS`
      INNER JOIN
        (SELECT MAX(`company_name`) OVER () AS `company_name`,
                                         `hardware_model_name`,
                                         `accreditation_type`,
                                         `accreditation_level`,
                                         `date`,
                                         `chip_model`,
                                         `screen_mode`
         FROM `df_phone`) AS `RHS` ON (`LHS`.`company_name` = `RHS`.`company_name`
                                       AND `LHS`.`hardware_model_name` = `RHS`.`hardware_model_name`
                                       AND `LHS`.`accreditation_type` = `RHS`.`accreditation_type`
                                       AND `LHS`.`accreditation_level` = `RHS`.`accreditation_level`
                                       AND `LHS`.`date` = `RHS`.`date`
                                       AND `LHS`.`chip_model` = `RHS`.`chip_model`
                                       AND `LHS`.`screen_mode` = `RHS`.`screen_mode`)) AS `LHS`
   INNER JOIN
     (SELECT `model_name`,
             `launch_year`,
             `ram_mib`,
             `rom_mib`,
             `slots`,
             `wifi`,
             `bluetooth`,
             MIN(`ram_mib`) OVER () AS `minram_mib`
      FROM `df_chip_model`) AS `RHS` ON (`LHS`.`model_name` = `RHS`.`model_name`
                                         AND `LHS`.`launch_year` = `RHS`.`launch_year`
                                         AND `LHS`.`ram_mib` = `RHS`.`ram_mib`
                                         AND `LHS`.`rom_mib` = `RHS`.`rom_mib`
                                         AND `LHS`.`slots` = `RHS`.`slots`
                                         AND `LHS`.`wifi` = `RHS`.`wifi`
                                         AND `LHS`.`bluetooth` = `RHS`.`bluetooth`))
WHERE (`company_name` != 'Nokia Corporation'
       AND minram_mib = ram_mib)
ORDER BY max_t1_ram_mib_;",4,18,6,1,6,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,0,0
spider/phone_1/0016,"natural_join3(input0, input1, input2), inner_join(input0, line0, ""'model_name' = 'chip_model','launch_year' = 'launch_year'""), filter(line1, ""type == 'Text' & ram_mib > 32"")","SELECT DISTINCT `hardware_model_name`
FROM
  (SELECT `model_name`,
          `launch_year`,
          `ram_mib`,
          `rom_mib`,
          `slots`,
          `wifi`,
          `bluetooth`,
          `model_name_other`,
          `ram_mib_other`,
          `rom_mib_other`,
          `slots_other`,
          `wifi_other`,
          `bluetooth_other`,
          `graphics_mode`,
          `char_cells`,
          `pixels`,
          `hardware_colours`,
          `used_kb`,
          `map`,
          `type`,
          `company_name`,
          `hardware_model_name`,
          `accreditation_type`,
          `accreditation_level`,
          `date`,
          `screen_mode`,
          `model_name` AS `chip_model`
   FROM
     (SELECT `LHS`.`model_name` AS `model_name`,
             `LHS`.`launch_year` AS `launch_year`,
             `LHS`.`ram_mib` AS `ram_mib`,
             `LHS`.`rom_mib` AS `rom_mib`,
             `LHS`.`slots` AS `slots`,
             `LHS`.`wifi` AS `wifi`,
             `LHS`.`bluetooth` AS `bluetooth`,
             `RHS`.`model_name` AS `model_name_other`,
             `RHS`.`ram_mib` AS `ram_mib_other`,
             `RHS`.`rom_mib` AS `rom_mib_other`,
             `RHS`.`slots` AS `slots_other`,
             `RHS`.`wifi` AS `wifi_other`,
             `RHS`.`bluetooth` AS `bluetooth_other`,
             `RHS`.`graphics_mode` AS `graphics_mode`,
             `RHS`.`char_cells` AS `char_cells`,
             `RHS`.`pixels` AS `pixels`,
             `RHS`.`hardware_colours` AS `hardware_colours`,
             `RHS`.`used_kb` AS `used_kb`,
             `RHS`.`map` AS `map`,
             `RHS`.`type` AS `type`,
             `RHS`.`company_name` AS `company_name`,
             `RHS`.`hardware_model_name` AS `hardware_model_name`,
             `RHS`.`accreditation_type` AS `accreditation_type`,
             `RHS`.`accreditation_level` AS `accreditation_level`,
             `RHS`.`date` AS `date`,
             `RHS`.`screen_mode` AS `screen_mode`
      FROM `df_chip_model` AS `LHS`
      INNER JOIN
        (SELECT `LHS`.`model_name` AS `model_name`,
                `LHS`.`launch_year` AS `launch_year`,
                `LHS`.`ram_mib` AS `ram_mib`,
                `LHS`.`rom_mib` AS `rom_mib`,
                `LHS`.`slots` AS `slots`,
                `LHS`.`wifi` AS `wifi`,
                `LHS`.`bluetooth` AS `bluetooth`,
                `LHS`.`graphics_mode` AS `graphics_mode`,
                `LHS`.`char_cells` AS `char_cells`,
                `LHS`.`pixels` AS `pixels`,
                `LHS`.`hardware_colours` AS `hardware_colours`,
                `LHS`.`used_kb` AS `used_kb`,
                `LHS`.`map` AS `map`,
                `LHS`.`type` AS `type`,
                `RHS`.`company_name` AS `company_name`,
                `RHS`.`hardware_model_name` AS `hardware_model_name`,
                `RHS`.`accreditation_type` AS `accreditation_type`,
                `RHS`.`accreditation_level` AS `accreditation_level`,
                `RHS`.`date` AS `date`,
                `RHS`.`chip_model` AS `chip_model`,
                `RHS`.`screen_mode` AS `screen_mode`
         FROM
           (SELECT `LHS`.`model_name` AS `model_name`,
                   `LHS`.`launch_year` AS `launch_year`,
                   `LHS`.`ram_mib` AS `ram_mib`,
                   `LHS`.`rom_mib` AS `rom_mib`,
                   `LHS`.`slots` AS `slots`,
                   `LHS`.`wifi` AS `wifi`,
                   `LHS`.`bluetooth` AS `bluetooth`,
                   `RHS`.`graphics_mode` AS `graphics_mode`,
                   `RHS`.`char_cells` AS `char_cells`,
                   `RHS`.`pixels` AS `pixels`,
                   `RHS`.`hardware_colours` AS `hardware_colours`,
                   `RHS`.`used_kb` AS `used_kb`,
                   `RHS`.`map` AS `map`,
                   `RHS`.`type` AS `type`
            FROM `df_chip_model` AS `LHS`
            CROSS JOIN `df_screen_mode` AS `RHS`) AS `LHS`
         CROSS JOIN `df_phone` AS `RHS`) AS `RHS` ON (`LHS`.`model_name` = `RHS`.`chip_model`
                                                      AND `LHS`.`launch_year` = `RHS`.`launch_year`)))
WHERE (`type` = 'Text'
       AND ram_mib > 32.0)
ORDER BY hardware_model_name;",3,13,5,1,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0
spider/phone_1/0018,"natural_join(input0, input1), filter(line0, ""company_name == 'Nokia Corporation' & type == 'Text'"")","SELECT DISTINCT `hardware_model_name`
FROM
  (SELECT `LHS`.`graphics_mode` AS `graphics_mode`,
          `LHS`.`char_cells` AS `char_cells`,
          `LHS`.`pixels` AS `pixels`,
          `LHS`.`hardware_colours` AS `hardware_colours`,
          `LHS`.`used_kb` AS `used_kb`,
          `LHS`.`map` AS `map`,
          `LHS`.`type` AS `type`,
          `RHS`.`company_name` AS `company_name`,
          `RHS`.`hardware_model_name` AS `hardware_model_name`,
          `RHS`.`accreditation_type` AS `accreditation_type`,
          `RHS`.`accreditation_level` AS `accreditation_level`,
          `RHS`.`date` AS `date`,
          `RHS`.`chip_model` AS `chip_model`,
          `RHS`.`screen_mode` AS `screen_mode`
   FROM `df_screen_mode` AS `LHS`
   CROSS JOIN `df_phone` AS `RHS`)
WHERE (`company_name` = 'Nokia Corporation'
       AND `type` = 'Text')
ORDER BY hardware_model_name;",2,6,2,1,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/phone_1/0020,"summarise(input0, 'n = n()', ""'accreditation_type'"")","SELECT accreditation_type,
       n AS count___
FROM
  (SELECT accreditation_type,
          COUNT() AS n
   FROM df_phone
   GROUP BY accreditation_type)
ORDER BY accreditation_type;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/phone_1/0024,df_chip_model,"SELECT model_name
FROM df_chip_model
ORDER BY model_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/phone_1/0021,"summarise(input0, 'n = n()', ""'accreditation_level','accreditation_type'""), filter(line0, 'n > 3L'), mutate(line1, 'n = n()')","SELECT accreditation_level
FROM
  (SELECT accreditation_level,
          accreditation_type,
          COUNT() AS n
   FROM df_phone
   GROUP BY accreditation_level,
            accreditation_type)
WHERE (n > 3)
ORDER BY accreditation_level;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/phone_1/0023,"filter(input0, ""wifi != 'No'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM `df_chip_model`
WHERE (`wifi` != 'No')
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/phone_1/0001,"filter(input0, 'launch_year <= 2002 | launch_year <= 2004')","SELECT model_name
FROM df_chip_model
WHERE (launch_year <= 2002.0
       OR launch_year <= 2004.0)
ORDER BY model_name;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/phone_1/0014,"natural_join(input0, input1), filter(line0, 'launch_year == 2002 & launch_year != 1'), limit(line1, 'desc(ram_mib)')","SELECT hardware_model_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM
           (SELECT LHS.model_name AS model_name,
                   LHS.launch_year AS launch_year,
                   LHS.ram_mib AS ram_mib,
                   LHS.rom_mib AS rom_mib,
                   LHS.slots AS slots,
                   LHS.wifi AS wifi,
                   LHS.bluetooth AS bluetooth,
                   RHS.company_name AS company_name,
                   RHS.hardware_model_name AS hardware_model_name,
                   RHS.accreditation_type AS accreditation_type,
                   RHS.accreditation_level AS accreditation_level,
                   RHS.date AS date,
                   RHS.chip_model AS chip_model,
                   RHS.screen_mode AS screen_mode
            FROM df_chip_model AS LHS
            CROSS JOIN df_phone AS RHS)
         WHERE (launch_year = 2002.0
                AND launch_year != 1.0))
      ORDER BY ram_mib DESC)
   LIMIT 1);",2,13,5,0,5,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/phone_1/0025,"summarise(input0, 'meanram_mib = mean(ram_mib, na.rm = T)', ""'slots'""), natural_join3(input0, input1, line0), cross_join(line1, line1, 'ram_mib > meanram_mib & meanram_mib > meanram_mib.other')","SELECT DISTINCT meanram_mib AS avg_ram_mib_
FROM
  (SELECT LHS.model_name AS model_name,
          LHS.launch_year AS launch_year,
          LHS.ram_mib AS ram_mib,
          LHS.rom_mib AS rom_mib,
          LHS.slots AS slots,
          LHS.wifi AS wifi,
          LHS.bluetooth AS bluetooth,
          LHS.company_name AS company_name,
          LHS.hardware_model_name AS hardware_model_name,
          LHS.accreditation_type AS accreditation_type,
          LHS.accreditation_level AS accreditation_level,
          LHS.date AS date,
          LHS.chip_model AS chip_model,
          LHS.screen_mode AS screen_mode,
          LHS.meanram_mib AS meanram_mib,
          RHS.model_name AS model_name_other,
          RHS.launch_year AS launch_year_other,
          RHS.ram_mib AS ram_mib_other,
          RHS.rom_mib AS rom_mib_other,
          RHS.slots AS slots_other,
          RHS.wifi AS wifi_other,
          RHS.bluetooth AS bluetooth_other,
          RHS.company_name AS company_name_other,
          RHS.hardware_model_name AS hardware_model_name_other,
          RHS.accreditation_type AS accreditation_type_other,
          RHS.accreditation_level AS accreditation_level_other,
          RHS.date AS date_other,
          RHS.chip_model AS chip_model_other,
          RHS.screen_mode AS screen_mode_other,
          RHS.meanram_mib AS meanram_mib_other
   FROM
     (SELECT LHS.model_name AS model_name,
             LHS.launch_year AS launch_year,
             LHS.ram_mib AS ram_mib,
             LHS.rom_mib AS rom_mib,
             LHS.slots AS slots,
             LHS.wifi AS wifi,
             LHS.bluetooth AS bluetooth,
             LHS.company_name AS company_name,
             LHS.hardware_model_name AS hardware_model_name,
             LHS.accreditation_type AS accreditation_type,
             LHS.accreditation_level AS accreditation_level,
             LHS.date AS date,
             LHS.chip_model AS chip_model,
             LHS.screen_mode AS screen_mode,
             RHS.meanram_mib AS meanram_mib
      FROM
        (SELECT LHS.model_name AS model_name,
                LHS.launch_year AS launch_year,
                LHS.ram_mib AS ram_mib,
                LHS.rom_mib AS rom_mib,
                LHS.slots AS slots,
                LHS.wifi AS wifi,
                LHS.bluetooth AS bluetooth,
                RHS.company_name AS company_name,
                RHS.hardware_model_name AS hardware_model_name,
                RHS.accreditation_type AS accreditation_type,
                RHS.accreditation_level AS accreditation_level,
                RHS.date AS date,
                RHS.chip_model AS chip_model,
                RHS.screen_mode AS screen_mode
         FROM df_chip_model AS LHS
         CROSS JOIN df_phone AS RHS) AS LHS
      INNER JOIN
        (SELECT slots,
                AVG(ram_mib) AS meanram_mib
         FROM df_chip_model
         GROUP BY slots) AS RHS ON (LHS.slots = RHS.slots)) AS LHS
   CROSS JOIN
     (SELECT LHS.model_name AS model_name,
             LHS.launch_year AS launch_year,
             LHS.ram_mib AS ram_mib,
             LHS.rom_mib AS rom_mib,
             LHS.slots AS slots,
             LHS.wifi AS wifi,
             LHS.bluetooth AS bluetooth,
             LHS.company_name AS company_name,
             LHS.hardware_model_name AS hardware_model_name,
             LHS.accreditation_type AS accreditation_type,
             LHS.accreditation_level AS accreditation_level,
             LHS.date AS date,
             LHS.chip_model AS chip_model,
             LHS.screen_mode AS screen_mode,
             RHS.meanram_mib AS meanram_mib
      FROM
        (SELECT LHS.model_name AS model_name,
                LHS.launch_year AS launch_year,
                LHS.ram_mib AS ram_mib,
                LHS.rom_mib AS rom_mib,
                LHS.slots AS slots,
                LHS.wifi AS wifi,
                LHS.bluetooth AS bluetooth,
                RHS.company_name AS company_name,
                RHS.hardware_model_name AS hardware_model_name,
                RHS.accreditation_type AS accreditation_type,
                RHS.accreditation_level AS accreditation_level,
                RHS.date AS date,
                RHS.chip_model AS chip_model,
                RHS.screen_mode AS screen_mode
         FROM df_chip_model AS LHS
         CROSS JOIN df_phone AS RHS) AS LHS
      INNER JOIN
        (SELECT slots,
                AVG(ram_mib) AS meanram_mib
         FROM df_chip_model
         GROUP BY slots) AS RHS ON (LHS.slots = RHS.slots)) AS RHS)
WHERE (ram_mib > meanram_mib
       AND meanram_mib > meanram_mib_other)
ORDER BY avg_ram_mib_;",3,20,8,1,8,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0
spider/phone_1/0011,"summarise(input0, 'n = n()', ""'accreditation_level','company_name'""), limit(line0, 'accreditation_level')","SELECT company_name,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT accreditation_level,
                company_name,
                COUNT() AS n
         FROM df_phone
         GROUP BY accreditation_level,
                  company_name)
      ORDER BY accreditation_level)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/chinook_1/0002,"intersect(input0, input0, 'name')","SELECT name
FROM
  (SELECT name
   FROM df_genre INTERSECT SELECT name
   FROM df_genre)
ORDER BY name;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/chinook_1/0036,"anti_join(input1, input0, ""'artistid'"")","SELECT name
FROM
  (SELECT *
   FROM df_artist AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_album AS RHS
        WHERE (LHS.artistid = RHS.artistid) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/chinook_1/0017,"filter(input1, 'unitprice >= 1'), semi_join(input0, line0)","SELECT title,
       albumid
FROM
  (SELECT *
   FROM df_album AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_track
           WHERE (unitprice >= 1.0)) AS RHS
        WHERE (LHS.albumid = RHS.albumid) ))
ORDER BY title;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/chinook_1/0008,"filter(input1, ""name != 'Metallica'""), anti_join(input0, line0, ""'artistid'""), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM
  (SELECT *
   FROM `df_album` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_artist`
           WHERE (`name` != 'Metallica')) AS RHS
        WHERE (LHS.artistid = RHS.artistid) ))
ORDER BY count___;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/chinook_1/0039,"filter(input0, ""city == 'Edmonton'"")","SELECT `birthdate`
FROM `df_employee`
WHERE (`city` = 'Edmonton')
ORDER BY birthdate;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/chinook_1/0038,"filter(input0, ""name != 'Pop'""), anti_join(input1, line0, ""'genreid'""), mutate(line1, 'maxmilliseconds = max(milliseconds)'), mutate(line2, 'minmilliseconds = min(milliseconds)')","SELECT DISTINCT `maxmilliseconds` AS `max_milliseconds_`,
                MIN(`milliseconds`) OVER () AS `min_milliseconds_`
FROM
  (SELECT `trackid`,
          `name`,
          `albumid`,
          `mediatypeid`,
          `genreid`,
          `composer`,
          `milliseconds`,
          `bytes`,
          `unitprice`,
          MAX(`milliseconds`) OVER () AS `maxmilliseconds`
   FROM
     (SELECT *
      FROM `df_track` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_genre`
              WHERE (`name` != 'Pop')) AS RHS
           WHERE (LHS.genreid = RHS.genreid) )))
ORDER BY max_milliseconds_;",4,18,5,1,5,0,3,2,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,0,0,0
spider/chinook_1/0027,"filter(input0, ""country == 'Brazil'""), natural_join3(input0, input1, line0)","SELECT DISTINCT `firstname`
FROM
  (SELECT `LHS`.`customerid` AS `customerid`,
          `LHS`.`firstname` AS `firstname`,
          `LHS`.`lastname` AS `lastname`,
          `LHS`.`company` AS `company`,
          `LHS`.`address` AS `address`,
          `LHS`.`city` AS `city`,
          `LHS`.`state` AS `state`,
          `LHS`.`country` AS `country`,
          `LHS`.`postalcode` AS `postalcode`,
          `LHS`.`phone` AS `phone`,
          `LHS`.`fax` AS `fax`,
          `LHS`.`email` AS `email`,
          `LHS`.`supportrepid` AS `supportrepid`,
          `LHS`.`invoiceid` AS `invoiceid`,
          `LHS`.`invoicedate` AS `invoicedate`,
          `LHS`.`billingaddress` AS `billingaddress`,
          `LHS`.`billingcity` AS `billingcity`,
          `LHS`.`billingstate` AS `billingstate`,
          `LHS`.`billingcountry` AS `billingcountry`,
          `LHS`.`billingpostalcode` AS `billingpostalcode`,
          `LHS`.`total` AS `total`
   FROM
     (SELECT `LHS`.`customerid` AS `customerid`,
             `LHS`.`firstname` AS `firstname`,
             `LHS`.`lastname` AS `lastname`,
             `LHS`.`company` AS `company`,
             `LHS`.`address` AS `address`,
             `LHS`.`city` AS `city`,
             `LHS`.`state` AS `state`,
             `LHS`.`country` AS `country`,
             `LHS`.`postalcode` AS `postalcode`,
             `LHS`.`phone` AS `phone`,
             `LHS`.`fax` AS `fax`,
             `LHS`.`email` AS `email`,
             `LHS`.`supportrepid` AS `supportrepid`,
             `RHS`.`invoiceid` AS `invoiceid`,
             `RHS`.`invoicedate` AS `invoicedate`,
             `RHS`.`billingaddress` AS `billingaddress`,
             `RHS`.`billingcity` AS `billingcity`,
             `RHS`.`billingstate` AS `billingstate`,
             `RHS`.`billingcountry` AS `billingcountry`,
             `RHS`.`billingpostalcode` AS `billingpostalcode`,
             `RHS`.`total` AS `total`
      FROM `df_customer` AS `LHS`
      INNER JOIN `df_invoice` AS `RHS` ON (`LHS`.`customerid` = `RHS`.`customerid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_customer`
      WHERE (`country` = 'Brazil')) AS RHS ON (LHS.customerid = RHS.customerid
                                               AND LHS.firstname = RHS.firstname
                                               AND LHS.lastname = RHS.lastname
                                               AND LHS.company = RHS.company
                                               AND LHS.address = RHS.address
                                               AND LHS.city = RHS.city
                                               AND LHS.state = RHS.state
                                               AND LHS.country = RHS.country
                                               AND LHS.postalcode = RHS.postalcode
                                               AND LHS.phone = RHS.phone
                                               AND LHS.fax = RHS.fax
                                               AND LHS.email = RHS.email
                                               AND LHS.supportrepid = RHS.supportrepid))
ORDER BY firstname;",2,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/chinook_1/0022,"filter(input1, ""firstname != 'Leonie'""), inner_join(line0, input0, ""'employeeid' = 'supportrepid','firstname' = 'firstname'"")","SELECT `firstname`,
       `lastname`
FROM
  (SELECT `LHS`.`employeeid` AS `employeeid`,
          `LHS`.`lastname` AS `lastname`,
          `LHS`.`firstname` AS `firstname`,
          `LHS`.`title` AS `title`,
          `LHS`.`reportsto` AS `reportsto`,
          `LHS`.`birthdate` AS `birthdate`,
          `LHS`.`hiredate` AS `hiredate`,
          `LHS`.`address` AS `address`,
          `LHS`.`city` AS `city`,
          `LHS`.`state` AS `state`,
          `LHS`.`country` AS `country`,
          `LHS`.`postalcode` AS `postalcode`,
          `LHS`.`phone` AS `phone`,
          `LHS`.`fax` AS `fax`,
          `LHS`.`email` AS `email`,
          `RHS`.`customerid` AS `customerid`,
          `RHS`.`lastname` AS `lastname_other`,
          `RHS`.`company` AS `company`,
          `RHS`.`address` AS `address_other`,
          `RHS`.`city` AS `city_other`,
          `RHS`.`state` AS `state_other`,
          `RHS`.`country` AS `country_other`,
          `RHS`.`postalcode` AS `postalcode_other`,
          `RHS`.`phone` AS `phone_other`,
          `RHS`.`fax` AS `fax_other`,
          `RHS`.`email` AS `email_other`
   FROM
     (SELECT *
      FROM `df_employee`
      WHERE (`firstname` != 'Leonie')) AS LHS
   INNER JOIN df_customer AS RHS ON (LHS.employeeid = RHS.supportrepid
                                     AND LHS.firstname = RHS.firstname))
ORDER BY firstname;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/chinook_1/0030,"filter(input0, ""name != 'AAC audio file'""), anti_join(input1, line0, ""'mediatypeid'""), summarise(line1, 'n_distinct = n_distinct(name)', ""'mediatypeid'"")","SELECT `n_distinct` AS `count___`
FROM
  (SELECT `mediatypeid`,
          COUNT(DISTINCT `name`) AS `n_distinct`
   FROM
     (SELECT *
      FROM `df_track` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_mediatype`
              WHERE (`name` != 'AAC audio file')) AS RHS
           WHERE (LHS.mediatypeid = RHS.mediatypeid) ))
   GROUP BY mediatypeid)
ORDER BY count___;",3,16,5,1,5,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0
spider/chinook_1/0013,"mutate(input0, 'maxmilliseconds = max(milliseconds)'), mutate(line0, 'milliseconds = min(milliseconds)')","SELECT DISTINCT maxmilliseconds AS max_milliseconds_,
                MIN(milliseconds) OVER () AS min_milliseconds_
FROM
  (SELECT trackid,
          name,
          albumid,
          mediatypeid,
          genreid,
          composer,
          milliseconds,
          bytes,
          unitprice,
          MAX(milliseconds) OVER () AS maxmilliseconds
   FROM df_track)
ORDER BY max_milliseconds_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/chinook_1/0004,"filter(input0, ""city == 'Calgary'""), semi_join(line0, input0)","SELECT `firstname`,
       `lastname`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_employee`
      WHERE (`city` = 'Calgary')) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_employee AS RHS
        WHERE (LHS.employeeid = RHS.employeeid
               AND LHS.lastname = RHS.lastname
               AND LHS.firstname = RHS.firstname
               AND LHS.title = RHS.title
               AND LHS.reportsto = RHS.reportsto
               AND LHS.birthdate = RHS.birthdate
               AND LHS.hiredate = RHS.hiredate
               AND LHS.address = RHS.address
               AND LHS.city = RHS.city
               AND LHS.state = RHS.state
               AND LHS.country = RHS.country
               AND LHS.postalcode = RHS.postalcode
               AND LHS.phone = RHS.phone
               AND LHS.fax = RHS.fax
               AND LHS.email = RHS.email) ))
ORDER BY firstname;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/chinook_1/0026,"filter(input1, 'total >= 20'), anti_join(input0, line0, ""'customerid'"")","SELECT lastname
FROM
  (SELECT *
   FROM df_customer AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_invoice
           WHERE (total >= 20.0)) AS RHS
        WHERE (LHS.customerid = RHS.customerid) ))
ORDER BY lastname;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/chinook_1/0015,"summarise(input1, 'n = n()', ""'milliseconds','trackid'""), inner_join(input0, line0, ""'genreid' = 'n'"")","SELECT DISTINCT name
FROM
  (SELECT LHS.genreid AS genreid,
          LHS.name AS name,
          RHS.milliseconds AS milliseconds,
          RHS.trackid AS trackid
   FROM df_genre AS LHS
   INNER JOIN
     (SELECT milliseconds,
             trackid,
             COUNT() AS n
      FROM df_track
      GROUP BY milliseconds,
               trackid) AS RHS ON (LHS.genreid = RHS.n))
ORDER BY name;",2,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/chinook_1/0005,df_invoice,"SELECT DISTINCT billingcountry
FROM df_invoice
ORDER BY billingcountry;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/chinook_1/0018,"filter(input0, ""name != 'Rock'""), anti_join(input1, line0, ""'genreid'""), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM
  (SELECT *
   FROM `df_track` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_genre`
           WHERE (`name` != 'Rock')) AS RHS
        WHERE (LHS.genreid = RHS.genreid) ))
ORDER BY count___;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/chinook_1/0041,"anti_join(input1, input0, ''), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT *
   FROM df_artist AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_album AS RHS
        WHERE (LHS.artistid = RHS.artistid) ))
ORDER BY count___;",2,12,3,1,3,0,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
spider/chinook_1/0035,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'artistid','name'""), filter(line1, 'n >= 3L')","SELECT name,
       artistid
FROM
  (SELECT artistid,
          name,
          COUNT() AS n
   FROM
     (SELECT LHS.albumid AS albumid,
             LHS.title AS title,
             LHS.artistid AS artistid,
             RHS.name AS name
      FROM df_album AS LHS
      INNER JOIN df_artist AS RHS ON (LHS.artistid = RHS.artistid))
   GROUP BY artistid,
            name)
WHERE (n >= 3)
ORDER BY name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/chinook_1/0020,"filter(input0, ""email == 'luisg@embraer.com.br'"")","SELECT `firstname`,
       `lastname`
FROM `df_customer`
WHERE (`email` = 'luisg@embraer.com.br')
ORDER BY firstname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/chinook_1/0007,"filter(input1, ""name == 'AC/DC'""), natural_join(input0, line0)","SELECT `title`
FROM
  (SELECT `LHS`.`albumid` AS `albumid`,
          `LHS`.`title` AS `title`,
          `LHS`.`artistid` AS `artistid`,
          `RHS`.`name` AS `name`
   FROM `df_album` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_artist`
      WHERE (`name` = 'AC/DC')) AS RHS ON (LHS.artistid = RHS.artistid))
ORDER BY title;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/chinook_1/0034,df_album,"SELECT title
FROM df_album
ORDER BY title;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/chinook_1/0024,"mutate(input0, 'n_distinct = n_distinct(city)')","SELECT DISTINCT COUNT(DISTINCT city) OVER () AS count_distinct_city_
FROM df_employee
ORDER BY count_distinct_city_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/chinook_1/0023,"anti_join(input1, input0, ""'lastname'""), filter(line0, 'postalcode != 70174L'), anti_join(input1, line1, ""'employeeid','postalcode'"")","SELECT city
FROM
  (SELECT *
   FROM df_employee AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT *
              FROM df_employee AS LHS
              WHERE NOT EXISTS
                  (SELECT 1
                   FROM df_customer AS RHS
                   WHERE (LHS.lastname = RHS.lastname) ))
           WHERE (postalcode != 70174)) AS RHS
        WHERE (LHS.employeeid = RHS.employeeid
               AND LHS.postalcode = RHS.postalcode) ))
ORDER BY city;",3,21,6,0,6,0,5,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,0,0,0,0
spider/chinook_1/0001,"mutate(input0, 'n = n()'), inner_join(line0, line0, ""'albumid' = 'n','artistid' = 'artistid'"")","SELECT albumid AS count___
FROM
  (SELECT LHS.albumid AS albumid,
          LHS.title AS title,
          LHS.artistid AS artistid,
          LHS.n AS n,
          RHS.albumid AS albumid_other,
          RHS.title AS title_other
   FROM
     (SELECT albumid,
             title,
             artistid,
             COUNT(*) OVER () AS n
      FROM df_album) AS LHS
   INNER JOIN
     (SELECT albumid,
             title,
             artistid,
             COUNT(*) OVER () AS n
      FROM df_album) AS RHS ON (LHS.albumid = RHS.n
                                AND LHS.artistid = RHS.artistid))
ORDER BY count___;",2,11,4,0,4,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/chinook_1/0014,"summarise(input1, 'n = n()', ""'albumid'""), left_join(input0, line0)","SELECT title,
       albumid,
       n AS count___
FROM
  (SELECT LHS.albumid AS albumid,
          LHS.title AS title,
          LHS.artistid AS artistid,
          RHS.n AS n
   FROM df_album AS LHS
   LEFT JOIN
     (SELECT albumid,
             COUNT() AS n
      FROM df_track
      GROUP BY albumid) AS RHS ON (LHS.albumid = RHS.albumid))
ORDER BY title;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/chinook_1/0009,"filter(input0, ""title == 'Balls to the Wall'""), natural_join(input1, line0)","SELECT `name`
FROM
  (SELECT `LHS`.`artistid` AS `artistid`,
          `LHS`.`name` AS `name`,
          `RHS`.`albumid` AS `albumid`,
          `RHS`.`title` AS `title`
   FROM `df_artist` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_album`
      WHERE (`title` = 'Balls to the Wall')) AS RHS ON (LHS.artistid = RHS.artistid))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/chinook_1/0025,"filter(input0, ""firstname == 'Astrid' | lastname == 'Gruber'""), semi_join(input1, line0)","SELECT `invoicedate`
FROM
  (SELECT *
   FROM `df_invoice` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customer`
           WHERE (`firstname` = 'Astrid'
                  OR `lastname` = 'Gruber')) AS RHS
        WHERE (LHS.customerid = RHS.customerid) ))
ORDER BY invoicedate;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/chinook_1/0029,df_employee,"SELECT phone
FROM df_employee
ORDER BY phone;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/chinook_1/0010,"summarise(input0, 'n = n()', ""'artistid'""), natural_join(input1, line0), limit(line1, 'desc(n)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.artistid AS artistid,
                LHS.name AS name,
                RHS.n AS n
         FROM df_artist AS LHS
         INNER JOIN
           (SELECT artistid,
                   COUNT() AS n
            FROM df_album
            GROUP BY artistid) AS RHS ON (LHS.artistid = RHS.artistid))
      ORDER BY n DESC)
   LIMIT 1);",2,13,5,0,5,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/chinook_1/0028,"filter(input0, ""country == 'Germany'""), semi_join(line0, input1)","SELECT `address`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_customer`
      WHERE (`country` = 'Germany')) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_invoice AS RHS
        WHERE (LHS.customerid = RHS.customerid) ))
ORDER BY address;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/chinook_1/0031,"filter(input0, ""name != 'Latin' & name != 'Pop'""), anti_join(input1, line0, ""'genreid'""), mutate(line1, 'meanmilliseconds = mean(milliseconds, na.rm = T)')","SELECT DISTINCT AVG(`milliseconds`) OVER () AS `avg_milliseconds_`
FROM
  (SELECT *
   FROM `df_track` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_genre`
           WHERE (`name` != 'Latin'
                  AND `name` != 'Pop')) AS RHS
        WHERE (LHS.genreid = RHS.genreid) ))
ORDER BY avg_milliseconds_;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/scientist_1/0002,"summarise(input0, 'sumhours = sum(hours)', '')","SELECT sumhours AS sum_hours_
FROM
  (SELECT SUM(hours) AS sumhours
   FROM df_projects)
ORDER BY sum_hours_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/scientist_1/0003,"summarise(input0, 'n_distinct = n_distinct(scientist)', '')","SELECT n_distinct AS count_distinct_scientist_
FROM
  (SELECT COUNT(DISTINCT scientist) AS n_distinct
   FROM df_assignedto)
ORDER BY count_distinct_scientist_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/scientist_1/0022,"summarise(input1, 'hours = max(hours)', ''), natural_join3(input0, input2, line0)","SELECT DISTINCT name
FROM
  (SELECT LHS.ssn AS ssn,
          LHS.name AS name,
          LHS.scientist AS scientist,
          LHS.project AS project,
          RHS.hours AS hours
   FROM
     (SELECT LHS.ssn AS ssn,
             LHS.name AS name,
             RHS.scientist AS scientist,
             RHS.project AS project
      FROM df_scientists AS LHS
      CROSS JOIN df_assignedto AS RHS) AS LHS
   CROSS JOIN
     (SELECT MAX(hours) AS hours
      FROM df_projects) AS RHS)
ORDER BY name;",2,9,4,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
spider/scientist_1/0013,df_scientists,"SELECT name
FROM df_scientists
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/scientist_1/0006,"limit(input0, 'desc(hours)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_projects
      ORDER BY hours DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/scientist_1/0004,"summarise(input0, 'n_distinct = n_distinct(name)', '')","SELECT n_distinct AS count_distinct_name_
FROM
  (SELECT COUNT(DISTINCT name) AS n_distinct
   FROM df_projects)
ORDER BY count_distinct_name_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/scientist_1/0015,"filter(input0, 'hours >= 300L'), summarise(input1, 'n = n()', ""'project'""), inner_join(line0, line1, ""'code' = 'project'"")","SELECT n AS count___,
       name
FROM
  (SELECT LHS.code AS code,
          LHS.name AS name,
          LHS.hours AS hours,
          RHS.n AS n
   FROM
     (SELECT *
      FROM df_projects
      WHERE (hours >= 300)) AS LHS
   INNER JOIN
     (SELECT project,
             COUNT() AS n
      FROM df_assignedto
      GROUP BY project) AS RHS ON (LHS.code = RHS.project))
ORDER BY count___;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/scientist_1/0005,"summarise(input0, 'meanhours = mean(hours, na.rm = T)', ""'hours','name'""), summarise(line0, 'meanhours = mean(hours, na.rm = T)', '')","SELECT meanhours AS avg_hours_
FROM
  (SELECT AVG(hours) AS meanhours
   FROM
     (SELECT hours,
             name,
             AVG(hours) AS meanhours
      FROM df_projects
      GROUP BY hours,
               name))
ORDER BY avg_hours_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/scientist_1/0016,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'name','scientist'"")","SELECT DISTINCT n AS count___,
                name
FROM
  (SELECT name,
          scientist,
          COUNT() AS n
   FROM
     (SELECT LHS.ssn AS ssn,
             LHS.name AS name,
             RHS.scientist AS scientist,
             RHS.project AS project
      FROM df_scientists AS LHS
      CROSS JOIN df_assignedto AS RHS)
   GROUP BY name,
            scientist)
ORDER BY count___;",2,7,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/scientist_1/0018,df_scientists,"SELECT name
FROM df_scientists
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/scientist_1/0019,"inner_join(input0, input1, ""'code' = 'project'""), anti_join(input0, line0, ""'code'"")","SELECT name
FROM
  (SELECT *
   FROM df_projects AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT code,
                  name,
                  hours,
                  scientist,
                  code AS project
           FROM
             (SELECT LHS.code AS code,
                     LHS.name AS name,
                     LHS.hours AS hours,
                     RHS.scientist AS scientist
              FROM df_projects AS LHS
              INNER JOIN df_assignedto AS RHS ON (LHS.code = RHS.project))) AS RHS
        WHERE (LHS.code = RHS.code) ))
ORDER BY name;",2,15,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
spider/scientist_1/0007,"mutate(input0, 'meanhours = mean(hours, na.rm = T)'), filter(line0, 'meanhours <= hours')","SELECT name
FROM
  (SELECT code,
          name,
          hours,
          AVG(hours) OVER () AS meanhours
   FROM df_projects)
WHERE (meanhours <= hours)
ORDER BY name;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/scientist_1/0021,"inner_join(input0, input1, ""'name' = 'project'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT ssn,
             name,
             scientist,
             name AS project
      FROM
        (SELECT LHS.ssn AS ssn,
                LHS.name AS name,
                RHS.scientist AS scientist
         FROM df_scientists AS LHS
         INNER JOIN df_assignedto AS RHS ON (LHS.name = RHS.project))))
ORDER BY count___;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/scientist_1/0023,"inner_join(input1, input2, ""'code' = 'project'""), inner_join(input0, line0, ""'ssn' = 'scientist'"")","SELECT name AS name___1,
       name_other AS name___2,
       hours
FROM
  (SELECT LHS.ssn AS ssn,
          LHS.name AS name,
          RHS.code AS code,
          RHS.name AS name_other,
          RHS.hours AS hours,
          RHS.project AS project
   FROM df_scientists AS LHS
   INNER JOIN
     (SELECT code,
             name,
             hours,
             scientist,
             code AS project
      FROM
        (SELECT LHS.code AS code,
                LHS.name AS name,
                LHS.hours AS hours,
                RHS.scientist AS scientist
         FROM df_projects AS LHS
         INNER JOIN df_assignedto AS RHS ON (LHS.code = RHS.project))) AS RHS ON (LHS.ssn = RHS.scientist))
ORDER BY name___1;",2,10,4,0,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0
spider/scientist_1/0001,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_scientists)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/scientist_1/0014,"inner_join(input0, input1, ""'code' = 'project'""), summarise(line0, 'n = n()', ""'hours','name'"")","SELECT n AS count___,
       name
FROM
  (SELECT hours,
          name,
          COUNT() AS n
   FROM
     (SELECT code,
             name,
             hours,
             scientist,
             code AS project
      FROM
        (SELECT LHS.code AS code,
                LHS.name AS name,
                LHS.hours AS hours,
                RHS.scientist AS scientist
         FROM df_projects AS LHS
         INNER JOIN df_assignedto AS RHS ON (LHS.code = RHS.project)))
   GROUP BY hours,
            name)
ORDER BY count___;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/scientist_1/0011,"filter(input0, 'hours <= 100L | hours <= 300L'), filter(line0, 'hours >= 100L & hours <= 300L')","SELECT name
FROM
  (SELECT *
   FROM df_projects
   WHERE (hours <= 100
          OR hours <= 300))
WHERE (hours >= 100
       AND hours <= 300)
ORDER BY name;",2,7,2,0,2,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/game_1/0033,"mutate(input0, 'n_distinct = n_distinct(stuid)')","SELECT DISTINCT COUNT(DISTINCT stuid) OVER () AS count_distinct_stuid_
FROM df_plays_games
ORDER BY count_distinct_stuid_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/game_1/0037,"summarise(input0, 'sumhours_played = sum(hours_played)', ""'stuid'"")","SELECT stuid,
       sumhours_played AS sum_hours_played_
FROM
  (SELECT stuid,
          SUM(hours_played) AS sumhours_played
   FROM df_plays_games
   GROUP BY stuid)
ORDER BY stuid;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/game_1/0002,"mutate(input0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count_distinct_gtype_
FROM df_video_games
ORDER BY count_distinct_gtype_;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/game_1/0036,"summarise(input0, 'sumhours_played = sum(hours_played)', ""'gameid'"")","SELECT gameid,
       sumhours_played AS sum_hours_played_
FROM
  (SELECT gameid,
          SUM(hours_played) AS sumhours_played
   FROM df_plays_games
   GROUP BY gameid)
ORDER BY gameid;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/game_1/0017,"mutate(input0, 'n_distinct = n_distinct(stuid)')","SELECT DISTINCT COUNT(DISTINCT stuid) OVER () AS count_distinct_stuid_
FROM df_sportsinfo
ORDER BY count_distinct_stuid_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/game_1/0008,"summarise(input0, 'n = n()', ""'gameid','gtype'"")","SELECT gtype,
       n AS count___
FROM
  (SELECT gameid,
          gtype,
          COUNT() AS n
   FROM df_video_games
   GROUP BY gameid,
            gtype)
ORDER BY gtype;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/game_1/0039,"filter(input1, 'hours_played >= 1000L'), natural_join(input0, line0), mutate(line1, 'sumhours_played = sum(hours_played)')","SELECT gname
FROM
  (SELECT LHS.gameid AS gameid,
          LHS.gname AS gname,
          LHS.gtype AS gtype,
          RHS.stuid AS stuid,
          RHS.hours_played AS hours_played
   FROM df_video_games AS LHS
   INNER JOIN
     (SELECT *
      FROM df_plays_games
      WHERE (hours_played >= 1000)) AS RHS ON (LHS.gameid = RHS.gameid))
ORDER BY gname;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/game_1/0038,"mutate(input1, 'sumhours_played = sum(hours_played)'), natural_join3(input0, input1, line0), limit(line1, 'desc(gname)')","SELECT gname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.gameid AS gameid,
                LHS.gname AS gname,
                LHS.gtype AS gtype,
                LHS.stuid AS stuid,
                LHS.hours_played AS hours_played,
                RHS.sumhours_played AS sumhours_played
         FROM
           (SELECT LHS.gameid AS gameid,
                   LHS.gname AS gname,
                   LHS.gtype AS gtype,
                   RHS.stuid AS stuid,
                   RHS.hours_played AS hours_played
            FROM df_video_games AS LHS
            INNER JOIN df_plays_games AS RHS ON (LHS.gameid = RHS.gameid)) AS LHS
         INNER JOIN
           (SELECT stuid,
                   gameid,
                   hours_played,
                   SUM(hours_played) OVER () AS sumhours_played
            FROM df_plays_games) AS RHS ON (LHS.gameid = RHS.gameid
                                            AND LHS.stuid = RHS.stuid
                                            AND LHS.hours_played = RHS.hours_played))
      ORDER BY gname DESC)
   LIMIT 1);",2,17,6,0,6,2,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
spider/game_1/0003,df_video_games,"SELECT gtype
FROM df_video_games
ORDER BY gtype;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/game_1/0027,"anti_join(input0, input1, ""'stuid'"")","SELECT stuid
FROM
  (SELECT *
   FROM df_student AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_sportsinfo AS RHS
        WHERE (LHS.stuid = RHS.stuid) ))
ORDER BY stuid;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/game_1/0022,"summarise(input0, 'n = n()', ""'sportname'"")","SELECT sportname,
       n AS count___
FROM
  (SELECT sportname,
          COUNT() AS n
   FROM df_sportsinfo
   GROUP BY sportname)
ORDER BY sportname;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/game_1/0030,"filter(input0, ""sex == 'M'""), filter(input1, ""sportname == 'Football'""), anti_join(line0, line1, ""'stuid'"")","SELECT `stuid`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_student`
      WHERE (`sex` = 'M')) AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_sportsinfo`
           WHERE (`sportname` = 'Football')) AS RHS
        WHERE (LHS.stuid = RHS.stuid) ))
ORDER BY stuid;",3,16,5,0,5,0,4,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0
spider/game_1/0013,"filter(input0, 'major >= 600L')","SELECT fname
FROM df_student
WHERE (major >= 600)
ORDER BY fname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/game_1/0006,"filter(input0, ""gname == 'Call of Destiny'""), natural_join(input0, line0)","SELECT `gtype`
FROM
  (SELECT `LHS`.`gameid` AS `gameid`,
          `LHS`.`gname` AS `gname`,
          `LHS`.`gtype` AS `gtype`
   FROM `df_video_games` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_video_games`
      WHERE (`gname` = 'Call of Destiny')) AS RHS ON (LHS.gameid = RHS.gameid
                                                      AND LHS.gname = RHS.gname
                                                      AND LHS.gtype = RHS.gtype))
ORDER BY gtype;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/game_1/0004,df_video_games,"SELECT gname,
       gtype
FROM df_video_games
ORDER BY gname;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/game_1/0012,"filter(input0, 'advisor <= 1121L'), semi_join(input0, line0)","SELECT stuid
FROM
  (SELECT *
   FROM df_student AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_student
           WHERE (advisor <= 1121)) AS RHS
        WHERE (LHS.stuid = RHS.stuid
               AND LHS.lname = RHS.lname
               AND LHS.fname = RHS.fname
               AND LHS.age = RHS.age
               AND LHS.sex = RHS.sex
               AND LHS.major = RHS.major
               AND LHS.advisor = RHS.advisor
               AND LHS.city_code = RHS.city_code) ))
ORDER BY stuid;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/game_1/0026,"summarise(input0, 'n = n()', ""'onscholarship','sportname'""), filter(line0, ""onscholarship == 'Y' & n > 1L"")","SELECT `sportname`
FROM
  (SELECT `onscholarship`,
          `sportname`,
          COUNT() AS `n`
   FROM `df_sportsinfo`
   GROUP BY `onscholarship`,
            `sportname`)
WHERE (`onscholarship` = 'Y'
       AND n > 1)
ORDER BY sportname;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/game_1/0015,"summarise(input0, 'n = n()', ""'advisor'""), filter(line0, 'n >= 2L')","SELECT advisor
FROM
  (SELECT advisor,
          COUNT() AS n
   FROM df_student
   GROUP BY advisor)
WHERE (n >= 2)
ORDER BY advisor;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/game_1/0005,"filter(input0, ""gtype == 'Collectible card game'"")","SELECT `gname`
FROM `df_video_games`
WHERE (`gtype` = 'Collectible card game')
ORDER BY gname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/game_1/0016,"mutate(input0, 'n_distinct = n_distinct(sportname)')","SELECT DISTINCT COUNT(DISTINCT sportname) OVER () AS count_distinct_sportname_
FROM df_sportsinfo
ORDER BY count_distinct_sportname_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/game_1/0018,"filter(input0, ""onscholarship == 'Y'"")","SELECT `stuid`
FROM `df_sportsinfo`
WHERE (`onscholarship` = 'Y')
ORDER BY stuid;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/game_1/0041,"filter(input1, ""sportname == 'Football' | sportname == 'Lacrosse'""), semi_join(input0, line0)","SELECT `lname`,
       `fname`
FROM
  (SELECT *
   FROM `df_student` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_sportsinfo`
           WHERE (`sportname` = 'Football'
                  OR `sportname` = 'Lacrosse')) AS RHS
        WHERE (LHS.stuid = RHS.stuid) ))
ORDER BY lname;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/game_1/0035,"natural_join(input0, input1)","SELECT DISTINCT stuid
FROM
  (SELECT LHS.stuid AS stuid,
          LHS.gameid AS gameid,
          LHS.hours_played AS hours_played,
          RHS.sportname AS sportname,
          RHS.hoursperweek AS hoursperweek,
          RHS.gamesplayed AS gamesplayed,
          RHS.onscholarship AS onscholarship
   FROM df_plays_games AS LHS
   INNER JOIN df_sportsinfo AS RHS ON (LHS.stuid = RHS.stuid))
ORDER BY stuid;",1,6,2,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/game_1/0020,"summarise(input0, 'sumgamesplayed = sum(gamesplayed)', ""'gamesplayed','hoursperweek'""), summarise(line0, 'sumgamesplayed = sum(gamesplayed)', '')","SELECT sumgamesplayed AS sum_gamesplayed_
FROM
  (SELECT SUM(gamesplayed) AS sumgamesplayed
   FROM
     (SELECT gamesplayed,
             hoursperweek,
             SUM(gamesplayed) AS sumgamesplayed
      FROM df_sportsinfo
      GROUP BY gamesplayed,
               hoursperweek))
ORDER BY sum_gamesplayed_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/game_1/0019,"filter(input1, ""onscholarship == 'Y'""), natural_join3(input0, input1, line0)","SELECT `lname`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `LHS`.`sportname` AS `sportname`,
          `LHS`.`hoursperweek` AS `hoursperweek`,
          `LHS`.`gamesplayed` AS `gamesplayed`,
          `LHS`.`onscholarship` AS `onscholarship`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `RHS`.`sportname` AS `sportname`,
             `RHS`.`hoursperweek` AS `hoursperweek`,
             `RHS`.`gamesplayed` AS `gamesplayed`,
             `RHS`.`onscholarship` AS `onscholarship`
      FROM `df_student` AS `LHS`
      INNER JOIN `df_sportsinfo` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_sportsinfo`
      WHERE (`onscholarship` = 'Y')) AS RHS ON (LHS.stuid = RHS.stuid
                                                AND LHS.sportname = RHS.sportname
                                                AND LHS.hoursperweek = RHS.hoursperweek
                                                AND LHS.gamesplayed = RHS.gamesplayed
                                                AND LHS.onscholarship = RHS.onscholarship))
ORDER BY lname;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/game_1/0007,"summarise(input0, 'n_distinct = n_distinct(gtype)', ""'gname','gtype'""), filter(line0, ""gtype != 'Massively multiplayer online game'"")","SELECT DISTINCT `n_distinct` AS `count___`
FROM
  (SELECT `gname`,
          `gtype`,
          COUNT(DISTINCT `gtype`) AS `n_distinct`
   FROM `df_video_games`
   GROUP BY `gname`,
            `gtype`)
WHERE (`gtype` != 'Massively multiplayer online game')
ORDER BY count___;",2,7,2,2,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/game_1/0034,"anti_join(input0, input1, '')","SELECT stuid
FROM
  (SELECT *
   FROM df_student AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_plays_games AS RHS
        WHERE (LHS.stuid = RHS.stuid) ))
ORDER BY stuid;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/game_1/0024,"summarise(input0, 'sumhoursperweek = sum(hoursperweek)', ""'stuid'""), limit(line0, 'desc(stuid)')","SELECT stuid
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT stuid,
                SUM(hoursperweek) AS sumhoursperweek
         FROM df_sportsinfo
         GROUP BY stuid)
      ORDER BY stuid DESC)
   LIMIT 10);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/game_1/0021,"summarise(input0, 'sumgamesplayed = sum(gamesplayed)', ""'onscholarship','sportname'""), filter(line0, ""sportname == 'Football' & onscholarship == 'Y'"")","SELECT `sumgamesplayed` AS `sum_gamesplayed_`
FROM
  (SELECT `onscholarship`,
          `sportname`,
          SUM(`gamesplayed`) AS `sumgamesplayed`
   FROM `df_sportsinfo`
   GROUP BY `onscholarship`,
            `sportname`)
WHERE (`sportname` = 'Football'
       AND `onscholarship` = 'Y')
ORDER BY sum_gamesplayed_;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/game_1/0023,"summarise(input0, 'n = n()', ""'stuid'""), summarise(input0, 'sumgamesplayed = sum(gamesplayed)', ""'stuid'""), natural_join(line0, line1)","SELECT stuid,
       n AS count___,
       sumgamesplayed AS sum_gamesplayed_
FROM
  (SELECT LHS.stuid AS stuid,
          LHS.n AS n,
          RHS.sumgamesplayed AS sumgamesplayed
   FROM
     (SELECT stuid,
             COUNT() AS n
      FROM df_sportsinfo
      GROUP BY stuid) AS LHS
   INNER JOIN
     (SELECT stuid,
             SUM(gamesplayed) AS sumgamesplayed
      FROM df_sportsinfo
      GROUP BY stuid) AS RHS ON (LHS.stuid = RHS.stuid))
ORDER BY stuid;",3,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0
spider/game_1/0001,"summarise(input0, 'n = n()', ""'gameid','gtype'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT gameid,
          gtype,
          COUNT() AS n
   FROM df_video_games
   GROUP BY gameid,
            gtype)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/game_1/0009,"summarise(input0, 'n = n()', ""'gtype'""), limit(line0, 'desc(gtype)')","SELECT gtype
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT gtype,
                COUNT() AS n
         FROM df_video_games
         GROUP BY gtype)
      ORDER BY gtype DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/game_1/0025,"left_join(input1, input0), mutate(line0, 'n = n()'), inner_join(line1, line0, ""'n' = 'hoursperweek','city_code' = 'city_code'"")","SELECT DISTINCT fname,
                lname
FROM
  (SELECT LHS.stuid AS stuid,
          LHS.sportname AS sportname,
          LHS.hoursperweek AS hoursperweek,
          LHS.gamesplayed AS gamesplayed,
          LHS.onscholarship AS onscholarship,
          LHS.lname AS lname,
          LHS.fname AS fname,
          LHS.age AS age,
          LHS.sex AS sex,
          LHS.major AS major,
          LHS.advisor AS advisor,
          LHS.city_code AS city_code,
          LHS.n AS n,
          RHS.stuid AS stuid_other,
          RHS.sportname AS sportname_other,
          RHS.gamesplayed AS gamesplayed_other,
          RHS.onscholarship AS onscholarship_other,
          RHS.lname AS lname_other,
          RHS.fname AS fname_other,
          RHS.age AS age_other,
          RHS.sex AS sex_other,
          RHS.major AS major_other,
          RHS.advisor AS advisor_other
   FROM
     (SELECT stuid,
             sportname,
             hoursperweek,
             gamesplayed,
             onscholarship,
             lname,
             fname,
             age,
             sex,
             major,
             advisor,
             city_code,
             COUNT(*) OVER () AS n
      FROM
        (SELECT LHS.stuid AS stuid,
                LHS.sportname AS sportname,
                LHS.hoursperweek AS hoursperweek,
                LHS.gamesplayed AS gamesplayed,
                LHS.onscholarship AS onscholarship,
                RHS.lname AS lname,
                RHS.fname AS fname,
                RHS.age AS age,
                RHS.sex AS sex,
                RHS.major AS major,
                RHS.advisor AS advisor,
                RHS.city_code AS city_code
         FROM df_sportsinfo AS LHS
         LEFT JOIN df_student AS RHS ON (LHS.stuid = RHS.stuid))) AS LHS
   INNER JOIN
     (SELECT LHS.stuid AS stuid,
             LHS.sportname AS sportname,
             LHS.hoursperweek AS hoursperweek,
             LHS.gamesplayed AS gamesplayed,
             LHS.onscholarship AS onscholarship,
             RHS.lname AS lname,
             RHS.fname AS fname,
             RHS.age AS age,
             RHS.sex AS sex,
             RHS.major AS major,
             RHS.advisor AS advisor,
             RHS.city_code AS city_code
      FROM df_sportsinfo AS LHS
      LEFT JOIN df_student AS RHS ON (LHS.stuid = RHS.stuid)) AS RHS ON (LHS.n = RHS.hoursperweek
                                                                         AND LHS.city_code = RHS.city_code))
ORDER BY fname;",3,15,5,1,5,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0
spider/game_1/0011,"filter(input0, ""city_code == 'CHI'"")","SELECT `stuid`
FROM `df_student`
WHERE (`city_code` = 'CHI')
ORDER BY stuid;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/game_1/0029,"natural_join(input0, input1), filter(line0, ""sex == 'F' & sportname == 'Football'"")","SELECT `stuid`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `RHS`.`sportname` AS `sportname`,
          `RHS`.`hoursperweek` AS `hoursperweek`,
          `RHS`.`gamesplayed` AS `gamesplayed`,
          `RHS`.`onscholarship` AS `onscholarship`
   FROM `df_student` AS `LHS`
   INNER JOIN `df_sportsinfo` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`))
WHERE (`sex` = 'F'
       AND `sportname` = 'Football')
ORDER BY stuid;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/game_1/0010,"summarise(input0, 'n = n()', ""'gameid','gtype'""), limit(line0, 'desc(n)')","SELECT gtype
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT gameid,
                gtype,
                COUNT() AS n
         FROM df_video_games
         GROUP BY gameid,
                  gtype)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/game_1/0040,"filter(input0, ""lname == 'Smith' | fname == 'Linda'""), natural_join3(input1, input2, line0)","SELECT `gname`
FROM
  (SELECT `LHS`.`gameid` AS `gameid`,
          `LHS`.`gname` AS `gname`,
          `LHS`.`gtype` AS `gtype`,
          `LHS`.`stuid` AS `stuid`,
          `LHS`.`hours_played` AS `hours_played`,
          `RHS`.`lname` AS `lname`,
          `RHS`.`fname` AS `fname`,
          `RHS`.`age` AS `age`,
          `RHS`.`sex` AS `sex`,
          `RHS`.`major` AS `major`,
          `RHS`.`advisor` AS `advisor`,
          `RHS`.`city_code` AS `city_code`
   FROM
     (SELECT `LHS`.`gameid` AS `gameid`,
             `LHS`.`gname` AS `gname`,
             `LHS`.`gtype` AS `gtype`,
             `RHS`.`stuid` AS `stuid`,
             `RHS`.`hours_played` AS `hours_played`
      FROM `df_video_games` AS `LHS`
      INNER JOIN `df_plays_games` AS `RHS` ON (`LHS`.`gameid` = `RHS`.`gameid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_student`
      WHERE (`lname` = 'Smith'
             OR `fname` = 'Linda')) AS RHS ON (LHS.stuid = RHS.stuid))
ORDER BY gname;",2,12,4,0,4,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/game_1/0028,"natural_join(input0, input1), filter(line0, ""onscholarship == 'Y' & major == 600L""), semi_join(line1, input0)","SELECT `stuid`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `RHS`.`sportname` AS `sportname`,
                `RHS`.`hoursperweek` AS `hoursperweek`,
                `RHS`.`gamesplayed` AS `gamesplayed`,
                `RHS`.`onscholarship` AS `onscholarship`
         FROM `df_student` AS `LHS`
         INNER JOIN `df_sportsinfo` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`))
      WHERE (`onscholarship` = 'Y'
             AND major = 600)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_student AS RHS
        WHERE (LHS.stuid = RHS.stuid
               AND LHS.lname = RHS.lname
               AND LHS.fname = RHS.fname
               AND LHS.age = RHS.age
               AND LHS.sex = RHS.sex
               AND LHS.major = RHS.major
               AND LHS.advisor = RHS.advisor
               AND LHS.city_code = RHS.city_code) ))
ORDER BY stuid;",3,15,5,0,5,1,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0
spider/election/0033,"filter(input1, ""committee != 'Appropriations' & committee == 'Economic Matters'""), inner_join(input0, line0, ""'party_id' = 'district'"")","SELECT `party`
FROM
  (SELECT `LHS`.`party_id` AS `party_id`,
          `LHS`.`year` AS `year`,
          `LHS`.`party` AS `party`,
          `LHS`.`governor` AS `governor`,
          `LHS`.`lieutenant_governor` AS `lieutenant_governor`,
          `LHS`.`comptroller` AS `comptroller`,
          `LHS`.`attorney_general` AS `attorney_general`,
          `LHS`.`us_senate` AS `us_senate`,
          `RHS`.`election_id` AS `election_id`,
          `RHS`.`counties_represented` AS `counties_represented`,
          `RHS`.`delegate` AS `delegate`,
          `RHS`.`party` AS `party_other`,
          `RHS`.`first_elected` AS `first_elected`,
          `RHS`.`committee` AS `committee`
   FROM `df_party` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_election`
      WHERE (`committee` != 'Appropriations'
             AND `committee` = 'Economic Matters')) AS RHS ON (LHS.party_id = RHS.district))
ORDER BY party;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/election/0002,df_county,"SELECT county_name,
       population
FROM df_county
ORDER BY county_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/election/0008,df_election,"SELECT delegate,
       committee
FROM df_election
ORDER BY delegate;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/election/0003,"summarise(input0, 'meanpopulation = mean(population, na.rm = T)', ""'population','zip_code'""), summarise(line0, 'meanpopulation = mean(population, na.rm = T)', '')","SELECT meanpopulation AS avg_population_
FROM
  (SELECT AVG(population) AS meanpopulation
   FROM
     (SELECT population,
             zip_code,
             AVG(population) AS meanpopulation
      FROM df_county
      GROUP BY population,
               zip_code))
ORDER BY avg_population_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/election/0027,"summarise(input1, 'n = n()', ""'district'""), inner_join(input0, line0, ""'county_id' = 'district'""), filter(line1, 'n >= 2L')","SELECT county_name
FROM
  (SELECT county_id,
          county_name,
          population,
          zip_code,
          n,
          county_id AS district
   FROM
     (SELECT LHS.county_id AS county_id,
             LHS.county_name AS county_name,
             LHS.population AS population,
             LHS.zip_code AS zip_code,
             RHS.n AS n
      FROM df_county AS LHS
      INNER JOIN
        (SELECT district,
                COUNT() AS n
         FROM df_election
         GROUP BY district) AS RHS ON (LHS.county_id = RHS.district)))
WHERE (n >= 2)
ORDER BY county_name;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/election/0030,"summarise(input0, 'n = n()', ""'governor','party'""), limit(line0, 'desc(party)')","SELECT governor
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT governor,
                party,
                COUNT() AS n
         FROM df_party
         GROUP BY governor,
                  party)
      ORDER BY party DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/election/0013,"inner_join(input0, input1, ""'county_id' = 'district'"")","SELECT delegate,
       county_name
FROM
  (SELECT LHS.county_id AS county_id,
          LHS.county_name AS county_name,
          LHS.population AS population,
          LHS.zip_code AS zip_code,
          RHS.election_id AS election_id,
          RHS.counties_represented AS counties_represented,
          RHS.delegate AS delegate,
          RHS.party AS party,
          RHS.first_elected AS first_elected,
          RHS.committee AS committee
   FROM df_county AS LHS
   INNER JOIN df_election AS RHS ON (LHS.county_id = RHS.district))
ORDER BY delegate;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/election/0006,"filter(input0, ""county_name == 'Howard'""), intersect(line0, input0, 'zip_code')","SELECT `zip_code`
FROM
  (SELECT `zip_code`
   FROM `df_county`
   WHERE (`county_name` = 'Howard') INTERSECT
     SELECT zip_code
     FROM df_county)
ORDER BY zip_code;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/election/0004,"mutate(input0, 'maxpopulation = max(population)'), mutate(line0, 'minpopulation = min(population)')","SELECT DISTINCT maxpopulation AS max_population_,
                MIN(population) OVER () AS min_population_
FROM
  (SELECT county_id,
          county_name,
          population,
          zip_code,
          MAX(population) OVER () AS maxpopulation
   FROM df_county)
ORDER BY max_population_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/election/0012,df_election,"SELECT election_id,
       counties_represented,
       district,
       delegate,
       party,
       first_elected,
       committee
FROM df_election
ORDER BY election_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/election/0026,"limit(input0, 'population')","SELECT county_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_county
      ORDER BY population)
   LIMIT 3);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/election/0015,"filter(input0, 'population != 50000'), natural_join(input1, line0), summarise(line1, 'n = n()', ""'election_id'"")","SELECT DISTINCT n AS count_distinct_t2_delegate_
FROM
  (SELECT election_id,
          COUNT() AS n
   FROM
     (SELECT LHS.election_id AS election_id,
             LHS.counties_represented AS counties_represented,
             LHS.district AS district,
             LHS.delegate AS delegate,
             LHS.party AS party,
             LHS.first_elected AS first_elected,
             LHS.committee AS committee,
             RHS.county_id AS county_id,
             RHS.county_name AS county_name,
             RHS.population AS population,
             RHS.zip_code AS zip_code
      FROM df_election AS LHS
      CROSS JOIN
        (SELECT *
         FROM df_county
         WHERE (population != 50000.0)) AS RHS)
   GROUP BY election_id)
ORDER BY count_distinct_t2_delegate_;",3,10,4,1,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/election/0005,df_election,"SELECT DISTINCT district
FROM df_election
ORDER BY district;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/election/0016,"filter(input1, ""committee == 'Appropriations'""), natural_join(input0, line0), inner_join(line1, line0, ""'county_id' = 'district','counties_represented' = 'counties_represented'"")","SELECT `county_name`
FROM
  (SELECT `LHS`.`county_id` AS `county_id`,
          `LHS`.`county_name` AS `county_name`,
          `LHS`.`population` AS `population`,
          `LHS`.`zip_code` AS `zip_code`,
          `LHS`.`election_id` AS `election_id`,
          `LHS`.`counties_represented` AS `counties_represented`,
          `LHS`.`district` AS `district`,
          `LHS`.`delegate` AS `delegate`,
          `LHS`.`party` AS `party`,
          `LHS`.`first_elected` AS `first_elected`,
          `LHS`.`committee` AS `committee`,
          `RHS`.`election_id` AS `election_id_other`,
          `RHS`.`delegate` AS `delegate_other`,
          `RHS`.`party` AS `party_other`,
          `RHS`.`first_elected` AS `first_elected_other`,
          `RHS`.`committee` AS `committee_other`
   FROM
     (SELECT `LHS`.`county_id` AS `county_id`,
             `LHS`.`county_name` AS `county_name`,
             `LHS`.`population` AS `population`,
             `LHS`.`zip_code` AS `zip_code`,
             `RHS`.`election_id` AS `election_id`,
             `RHS`.`counties_represented` AS `counties_represented`,
             `RHS`.`district` AS `district`,
             `RHS`.`delegate` AS `delegate`,
             `RHS`.`party` AS `party`,
             `RHS`.`first_elected` AS `first_elected`,
             `RHS`.`committee` AS `committee`
      FROM `df_county` AS `LHS`
      CROSS JOIN
        (SELECT *
         FROM `df_election`
         WHERE (`committee` = 'Appropriations')) AS `RHS`) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_election`
      WHERE (`committee` = 'Appropriations')) AS RHS ON (LHS.county_id = RHS.district
                                                         AND LHS.counties_represented = RHS.counties_represented))
ORDER BY county_name;",3,13,5,0,5,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0
spider/election/0032,"inner_join(input0, input1, ""'party_id' = 'party'""), anti_join(input0, line0, ""'party_id','year'"")","SELECT party
FROM
  (SELECT *
   FROM df_party AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT party_id,
                  YEAR,
                  party_id AS party,
                  governor,
                  lieutenant_governor,
                  comptroller,
                  attorney_general,
                  us_senate,
                  election_id,
                  counties_represented,
                  district,
                  delegate,
                  first_elected,
                  committee
           FROM
             (SELECT LHS.party_id AS party_id,
                     LHS.year AS YEAR,
                     LHS.party AS party,
                     LHS.governor AS governor,
                     LHS.lieutenant_governor AS lieutenant_governor,
                     LHS.comptroller AS comptroller,
                     LHS.attorney_general AS attorney_general,
                     LHS.us_senate AS us_senate,
                     RHS.election_id AS election_id,
                     RHS.counties_represented AS counties_represented,
                     RHS.district AS district,
                     RHS.delegate AS delegate,
                     RHS.first_elected AS first_elected,
                     RHS.committee AS committee
              FROM df_party AS LHS
              INNER JOIN df_election AS RHS ON (LHS.party_id = RHS.party))) AS RHS
        WHERE (LHS.party_id = RHS.party_id
               AND LHS.year = RHS.year) ))
ORDER BY party;",2,17,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
spider/election/0018,"inner_join(input0, input1, ""'party_id' = 'party'""), filter(line0, 'district <= 1L')","SELECT governor
FROM
  (SELECT party_id,
          YEAR,
          party_id AS party,
          governor,
          lieutenant_governor,
          comptroller,
          attorney_general,
          us_senate,
          election_id,
          counties_represented,
          district,
          delegate,
          first_elected,
          committee
   FROM
     (SELECT LHS.party_id AS party_id,
             LHS.year AS YEAR,
             LHS.party AS party,
             LHS.governor AS governor,
             LHS.lieutenant_governor AS lieutenant_governor,
             LHS.comptroller AS comptroller,
             LHS.attorney_general AS attorney_general,
             LHS.us_senate AS us_senate,
             RHS.election_id AS election_id,
             RHS.counties_represented AS counties_represented,
             RHS.district AS district,
             RHS.delegate AS delegate,
             RHS.first_elected AS first_elected,
             RHS.committee AS committee
      FROM df_party AS LHS
      INNER JOIN df_election AS RHS ON (LHS.party_id = RHS.party)))
WHERE (district <= 1)
ORDER BY governor;",2,10,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/election/0020,"filter(input0, ""party == 'Democratic'""), intersect(line0, input0, 'party_id'), inner_join(line1, input1, ""'party_id' = 'party'"")","SELECT `committee`
FROM
  (SELECT `LHS`.`party_id` AS `party_id`,
          `RHS`.`election_id` AS `election_id`,
          `RHS`.`counties_represented` AS `counties_represented`,
          `RHS`.`district` AS `district`,
          `RHS`.`delegate` AS `delegate`,
          `RHS`.`first_elected` AS `first_elected`,
          `RHS`.`committee` AS `committee`
   FROM
     (SELECT `party_id`
      FROM `df_party`
      WHERE (`party` = 'Democratic') INTERSECT
        SELECT party_id
        FROM df_party) AS LHS
   INNER JOIN df_election AS RHS ON (LHS.party_id = RHS.party))
ORDER BY committee;",3,11,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0
spider/election/0019,"filter(input1, 'district >= 1L & district <= 2L'), inner_join(input0, line0, ""'party_id' = 'party'"")","SELECT comptroller
FROM
  (SELECT LHS.party_id AS party_id,
          LHS.year AS YEAR,
          LHS.party AS party,
          LHS.governor AS governor,
          LHS.lieutenant_governor AS lieutenant_governor,
          LHS.comptroller AS comptroller,
          LHS.attorney_general AS attorney_general,
          LHS.us_senate AS us_senate,
          RHS.election_id AS election_id,
          RHS.counties_represented AS counties_represented,
          RHS.district AS district,
          RHS.delegate AS delegate,
          RHS.first_elected AS first_elected,
          RHS.committee AS committee
   FROM df_party AS LHS
   INNER JOIN
     (SELECT *
      FROM df_election
      WHERE (district >= 1
             AND district <= 2)) AS RHS ON (LHS.party_id = RHS.party))
ORDER BY comptroller;",2,9,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/election/0007,"filter(input0, 'district == 1L'), semi_join(line0, input0)","SELECT delegate
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_election
      WHERE (district = 1)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_election AS RHS
        WHERE (LHS.election_id = RHS.election_id
               AND LHS.counties_represented = RHS.counties_represented
               AND LHS.district = RHS.district
               AND LHS.delegate = RHS.delegate
               AND LHS.party = RHS.party
               AND LHS.first_elected = RHS.first_elected
               AND LHS.committee = RHS.committee) ))
ORDER BY delegate;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/election/0034,"inner_join(input0, input1, ""'party_id' = 'election_id','year' = 'first_elected'""), filter(line0, ""party != 'Democratic' & party != 'Liberal'"")","SELECT `committee`
FROM
  (SELECT `party_id`,
          `year`,
          `party`,
          `governor`,
          `lieutenant_governor`,
          `comptroller`,
          `attorney_general`,
          `us_senate`,
          `counties_represented`,
          `district`,
          `delegate`,
          `party_other`,
          `committee`,
          `election_id`,
          `year` AS `first_elected`
   FROM
     (SELECT `party_id`,
             `year`,
             `party`,
             `governor`,
             `lieutenant_governor`,
             `comptroller`,
             `attorney_general`,
             `us_senate`,
             `counties_represented`,
             `district`,
             `delegate`,
             `party_other`,
             `committee`,
             `party_id` AS `election_id`
      FROM
        (SELECT `LHS`.`party_id` AS `party_id`,
                `LHS`.`year` AS `year`,
                `LHS`.`party` AS `party`,
                `LHS`.`governor` AS `governor`,
                `LHS`.`lieutenant_governor` AS `lieutenant_governor`,
                `LHS`.`comptroller` AS `comptroller`,
                `LHS`.`attorney_general` AS `attorney_general`,
                `LHS`.`us_senate` AS `us_senate`,
                `RHS`.`counties_represented` AS `counties_represented`,
                `RHS`.`district` AS `district`,
                `RHS`.`delegate` AS `delegate`,
                `RHS`.`party` AS `party_other`,
                `RHS`.`committee` AS `committee`
         FROM `df_party` AS `LHS`
         INNER JOIN `df_election` AS `RHS` ON (`LHS`.`party_id` = `RHS`.`election_id`
                                               AND `LHS`.`year` = `RHS`.`first_elected`))))
WHERE (`party` != 'Democratic'
       AND `party` != 'Liberal')
ORDER BY committee;",2,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/election/0024,df_county,"SELECT county_name
FROM df_county
ORDER BY county_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/election/0021,"summarise(input1, 'n = n()', ""'district'""), inner_join(input0, line0, ""'county_id' = 'district'"")","SELECT county_name,
       n AS count___
FROM
  (SELECT LHS.county_id AS county_id,
          LHS.county_name AS county_name,
          LHS.population AS population,
          LHS.zip_code AS zip_code,
          RHS.n AS n
   FROM df_county AS LHS
   INNER JOIN
     (SELECT district,
             COUNT() AS n
      FROM df_election
      GROUP BY district) AS RHS ON (LHS.county_id = RHS.district))
ORDER BY county_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/election/0023,df_county,"SELECT county_name
FROM df_county
ORDER BY county_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/election/0001,"summarise(input0, 'n = n()', ""'county_id','zip_code'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT county_id,
          zip_code,
          COUNT() AS n
   FROM df_county
   GROUP BY county_id,
            zip_code)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/election/0014,"filter(input0, 'population <= 100000'), natural_join(input1, line0)","SELECT DISTINCT delegate
FROM
  (SELECT LHS.election_id AS election_id,
          LHS.counties_represented AS counties_represented,
          LHS.district AS district,
          LHS.delegate AS delegate,
          LHS.party AS party,
          LHS.first_elected AS first_elected,
          LHS.committee AS committee,
          RHS.county_id AS county_id,
          RHS.county_name AS county_name,
          RHS.population AS population,
          RHS.zip_code AS zip_code
   FROM df_election AS LHS
   CROSS JOIN
     (SELECT *
      FROM df_county
      WHERE (population <= 100000.0)) AS RHS)
ORDER BY delegate;",2,8,3,1,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/election/0009,"summarise(input0, 'n = n()', ""'governor','us_senate'""), summarise(line0, 'n = n()', '')","SELECT n AS count_distinct_governor_
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT governor,
             us_senate,
             COUNT() AS n
      FROM df_party
      GROUP BY governor,
               us_senate))
ORDER BY count_distinct_governor_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/election/0025,"limit(input0, 'county_name')","SELECT county_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_county
      ORDER BY county_name)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/election/0011,"filter(input0, ""governor == 'Eliot Spitzer'"")","SELECT DISTINCT `year`
FROM `df_party`
WHERE (`governor` = 'Eliot Spitzer')
ORDER BY YEAR;",1,5,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/election/0029,"summarise(input1, 'n = n()', ""'counties_represented','election_id'""), inner_join(input0, line0, ""'party_id' = 'n'"")","SELECT DISTINCT party
FROM
  (SELECT LHS.party_id AS party_id,
          LHS.year AS YEAR,
          LHS.party AS party,
          LHS.governor AS governor,
          LHS.lieutenant_governor AS lieutenant_governor,
          LHS.comptroller AS comptroller,
          LHS.attorney_general AS attorney_general,
          LHS.us_senate AS us_senate,
          RHS.counties_represented AS counties_represented,
          RHS.election_id AS election_id
   FROM df_party AS LHS
   INNER JOIN
     (SELECT counties_represented,
             election_id,
             COUNT() AS n
      FROM df_election
      GROUP BY counties_represented,
               election_id) AS RHS ON (LHS.party_id = RHS.n))
ORDER BY party;",2,9,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/election/0010,"filter(input0, ""party == 'Democratic'""), semi_join(input0, line0)","SELECT `lieutenant_governor`,
       `comptroller`
FROM
  (SELECT *
   FROM `df_party` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_party`
           WHERE (`party` = 'Democratic')) AS RHS
        WHERE (LHS.party_id = RHS.party_id
               AND LHS.year = RHS.year
               AND LHS.party = RHS.party
               AND LHS.governor = RHS.governor
               AND LHS.lieutenant_governor = RHS.lieutenant_governor
               AND LHS.comptroller = RHS.comptroller
               AND LHS.attorney_general = RHS.attorney_general
               AND LHS.us_senate = RHS.us_senate) ))
ORDER BY lieutenant_governor;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/election/0028,"summarise(input0, 'n = n()', ""'lieutenant_governor','party'""), limit(line0, 'desc(lieutenant_governor)')","SELECT party
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT lieutenant_governor,
                party,
                COUNT() AS n
         FROM df_party
         GROUP BY lieutenant_governor,
                  party)
      ORDER BY lieutenant_governor DESC)
   LIMIT 2);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/election/0031,"summarise(input0, 'n = n()', ""'comptroller'""), limit(line0, 'comptroller')","SELECT comptroller,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT comptroller,
                COUNT() AS n
         FROM df_party
         GROUP BY comptroller)
      ORDER BY comptroller)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/body_builder/0002,df_body_builder,"SELECT total
FROM df_body_builder
ORDER BY total;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/body_builder/0017,df_people,"SELECT height,
       weight
FROM df_people
ORDER BY height;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/body_builder/0008,"filter(input0, 'total >= 300'), natural_join(input1, line0)","SELECT name
FROM
  (SELECT LHS.people_id AS people_id,
          LHS.name AS name,
          LHS.height AS height,
          LHS.weight AS weight,
          LHS.birth_date AS birth_date,
          LHS.birth_place AS birth_place,
          RHS.body_builder_id AS body_builder_id,
          RHS.snatch AS snatch,
          RHS.clean_jerk AS clean_jerk,
          RHS.total AS total
   FROM df_people AS LHS
   INNER JOIN
     (SELECT *
      FROM df_body_builder
      WHERE (total >= 300.0)) AS RHS ON (LHS.people_id = RHS.people_id))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/body_builder/0003,"intersect(input0, input0, 'snatch'), inner_join(line0, input0, ""'snatch'"")","SELECT snatch,
       clean_jerk
FROM
  (SELECT LHS.snatch AS snatch,
          RHS.body_builder_id AS body_builder_id,
          RHS.people_id AS people_id,
          RHS.clean_jerk AS clean_jerk,
          RHS.total AS total
   FROM
     (SELECT snatch
      FROM df_body_builder INTERSECT SELECT snatch
      FROM df_body_builder) AS LHS
   INNER JOIN df_body_builder AS RHS ON (LHS.snatch = RHS.snatch))
ORDER BY snatch;",2,10,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0
spider/body_builder/0022,"natural_join(input0, input1), filter(line0, 'snatch > 140 | height >= 200')","SELECT weight
FROM
  (SELECT LHS.body_builder_id AS body_builder_id,
          LHS.people_id AS people_id,
          LHS.snatch AS snatch,
          LHS.clean_jerk AS clean_jerk,
          LHS.total AS total,
          RHS.name AS name,
          RHS.height AS height,
          RHS.weight AS weight,
          RHS.birth_date AS birth_date,
          RHS.birth_place AS birth_place
   FROM df_body_builder AS LHS
   INNER JOIN df_people AS RHS ON (LHS.people_id = RHS.people_id))
WHERE (snatch > 140.0
       OR height >= 200.0)
ORDER BY weight;",2,7,2,0,2,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/body_builder/0013,"semi_join(input1, input0)","SELECT name
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_body_builder AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY name;",1,9,3,0,3,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
spider/body_builder/0006,"intersect(input0, input0, 'birth_date'), intersect(line0, input0, 'birth_date')","SELECT birth_date
FROM
  (SELECT birth_date
   FROM
     (SELECT birth_date
      FROM df_people INTERSECT SELECT birth_date
      FROM df_people) INTERSECT SELECT birth_date
   FROM df_people)
ORDER BY birth_date;",2,12,5,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0
spider/body_builder/0004,"summarise(input0, 'meansnatch = mean(snatch, na.rm = T)', ""'body_builder_id','snatch'""), summarise(line0, 'meansnatch = mean(snatch, na.rm = T)', '')","SELECT meansnatch AS avg_snatch_
FROM
  (SELECT AVG(snatch) AS meansnatch
   FROM
     (SELECT body_builder_id,
             snatch,
             AVG(snatch) AS meansnatch
      FROM df_body_builder
      GROUP BY body_builder_id,
               snatch))
ORDER BY avg_snatch_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/body_builder/0012,"filter(input1, 'height > 200'), natural_join(input0, line0), summarise(line1, 'meantotal = mean(total, na.rm = T)', ""'snatch'"")","SELECT meantotal AS avg_t1_total_
FROM
  (SELECT snatch,
          AVG(total) AS meantotal
   FROM
     (SELECT LHS.body_builder_id AS body_builder_id,
             LHS.people_id AS people_id,
             LHS.snatch AS snatch,
             LHS.clean_jerk AS clean_jerk,
             LHS.total AS total,
             RHS.name AS name,
             RHS.height AS height,
             RHS.weight AS weight,
             RHS.birth_date AS birth_date,
             RHS.birth_place AS birth_place
      FROM df_body_builder AS LHS
      INNER JOIN
        (SELECT *
         FROM df_people
         WHERE (height > 200.0)) AS RHS ON (LHS.people_id = RHS.people_id))
   GROUP BY snatch)
ORDER BY avg_t1_total_;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/body_builder/0015,"summarise(input0, 'n = n()', ""'birth_place','weight'""), limit(line0, 'weight')","SELECT birth_place
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT birth_place,
                weight,
                COUNT() AS n
         FROM df_people
         GROUP BY birth_place,
                  weight)
      ORDER BY weight)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/body_builder/0005,"limit(input0, 'desc(total)')","SELECT clean_jerk
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_body_builder
      ORDER BY total DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/body_builder/0018,df_body_builder,"SELECT body_builder_id,
       people_id,
       snatch,
       clean_jerk,
       total
FROM df_body_builder
ORDER BY body_builder_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/body_builder/0020,"summarise(input0, 'n_distinct = n_distinct(birth_place)', ""'birth_place','name'""), summarise(line0, 'n_distinct = n_distinct(birth_place)', '')","SELECT n_distinct AS count_distinct_birth_place_
FROM
  (SELECT COUNT(DISTINCT birth_place) AS n_distinct
   FROM
     (SELECT birth_place,
             name,
             COUNT(DISTINCT birth_place) AS n_distinct
      FROM df_people
      GROUP BY birth_place,
               name))
ORDER BY count_distinct_birth_place_;",2,8,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/body_builder/0019,"anti_join(input1, input0, '')","SELECT name,
       birth_place
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_body_builder AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/body_builder/0007,"semi_join(input1, input0)","SELECT name
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_body_builder AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY name;",1,9,3,0,3,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
spider/body_builder/0024,"mutate(input0, 'minsnatch = min(snatch)')","SELECT DISTINCT MIN(snatch) OVER () AS min_snatch_
FROM df_body_builder
ORDER BY min_snatch_;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/body_builder/0021,"summarise(input1, 'n = n()', ""'people_id','weight'""), left_join(input0, line0)","SELECT DISTINCT n AS count___
FROM
  (SELECT LHS.body_builder_id AS body_builder_id,
          LHS.people_id AS people_id,
          LHS.snatch AS snatch,
          LHS.clean_jerk AS clean_jerk,
          LHS.total AS total,
          RHS.weight AS weight,
          RHS.n AS n
   FROM df_body_builder AS LHS
   LEFT JOIN
     (SELECT people_id,
             weight,
             COUNT() AS n
      FROM df_people
      GROUP BY people_id,
               weight) AS RHS ON (LHS.people_id = RHS.people_id))
ORDER BY count___;",2,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/body_builder/0001,"summarise(input0, 'n = n()', ""'body_builder_id'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT body_builder_id,
             COUNT() AS n
      FROM df_body_builder
      GROUP BY body_builder_id))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/body_builder/0014,"summarise(input0, 'n = n()', ""'birth_date','birth_place'""), summarise(line0, 'n = n()', ""'birth_place'"")","SELECT birth_place,
       n AS count___
FROM
  (SELECT birth_place,
          COUNT() AS n
   FROM
     (SELECT birth_date,
             birth_place,
             COUNT() AS n
      FROM df_people
      GROUP BY birth_date,
               birth_place)
   GROUP BY birth_place)
ORDER BY birth_place;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/body_builder/0009,"natural_join(input0, input1), limit(line0, 'name')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.body_builder_id AS body_builder_id,
                LHS.people_id AS people_id,
                LHS.snatch AS snatch,
                LHS.clean_jerk AS clean_jerk,
                LHS.total AS total,
                RHS.name AS name,
                RHS.height AS height,
                RHS.weight AS weight,
                RHS.birth_date AS birth_date,
                RHS.birth_place AS birth_place
         FROM df_body_builder AS LHS
         INNER JOIN df_people AS RHS ON (LHS.people_id = RHS.people_id))
      ORDER BY name)
   LIMIT 1);",1,10,4,0,4,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/body_builder/0011,"filter(input0, 'total < 315'), semi_join(input1, line0)","SELECT height
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_body_builder
           WHERE (total < 315.0)) AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY height;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/body_builder/0010,"natural_join(input0, input1), limit(line0, 'desc(birth_place)')","SELECT birth_date,
       birth_place
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.body_builder_id AS body_builder_id,
                LHS.people_id AS people_id,
                LHS.snatch AS snatch,
                LHS.clean_jerk AS clean_jerk,
                LHS.total AS total,
                RHS.name AS name,
                RHS.height AS height,
                RHS.weight AS weight,
                RHS.birth_date AS birth_date,
                RHS.birth_place AS birth_place
         FROM df_body_builder AS LHS
         INNER JOIN df_people AS RHS ON (LHS.people_id = RHS.people_id))
      ORDER BY birth_place DESC)
   LIMIT 1);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0033,"summarise(input0, 'n = n()', ""'card_number','card_type_code'""), summarise(line0, 'n_distinct = n_distinct(card_type_code)', '')","SELECT n_distinct AS count_distinct_card_type_code_
FROM
  (SELECT COUNT(DISTINCT card_type_code) AS n_distinct
   FROM
     (SELECT card_number,
             card_type_code,
             COUNT() AS n
      FROM df_customers_cards
      GROUP BY card_number,
               card_type_code))
ORDER BY count_distinct_card_type_code_;",2,7,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0037,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'card_type_code','other_transaction_details'"")","SELECT card_type_code,
       n AS count___
FROM
  (SELECT card_type_code,
          other_transaction_details,
          COUNT() AS n
   FROM
     (SELECT LHS.card_id AS card_id,
             LHS.customer_id AS customer_id,
             LHS.card_type_code AS card_type_code,
             LHS.card_number AS card_number,
             LHS.date_valid_from AS date_valid_from,
             LHS.date_valid_to AS date_valid_to,
             LHS.other_card_details AS other_card_details,
             RHS.transaction_id AS transaction_id,
             RHS.previous_transaction_id AS previous_transaction_id,
             RHS.account_id AS account_id,
             RHS.transaction_type AS transaction_type,
             RHS.transaction_date AS transaction_date,
             RHS.transaction_amount AS transaction_amount,
             RHS.transaction_comment AS transaction_comment,
             RHS.other_transaction_details AS other_transaction_details
      FROM df_customers_cards AS LHS
      INNER JOIN df_financial_transactions AS RHS ON (LHS.card_id = RHS.card_id))
   GROUP BY card_type_code,
            other_transaction_details)
ORDER BY card_type_code;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0002,df_accounts,"SELECT account_id,
       customer_id,
       account_name
FROM df_accounts
ORDER BY account_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0036,"summarise(input0, 'sumtransaction_amount = sum(transaction_amount)', ""'account_id','transaction_amount'""), mutate(line0, 'sumtransaction_amount = sum(transaction_amount)'), mutate(line1, 'meantransaction_amount = mean(transaction_amount, na.rm = T)')","SELECT DISTINCT AVG(transaction_amount) OVER () AS avg_transaction_amount_,
                                             sumtransaction_amount AS sum_transaction_amount_
FROM
  (SELECT account_id,
          transaction_amount,
          SUM(transaction_amount) OVER () AS sumtransaction_amount
   FROM
     (SELECT account_id,
             transaction_amount,
             SUM(transaction_amount) AS sumtransaction_amount
      FROM df_financial_transactions
      GROUP BY account_id,
               transaction_amount))
ORDER BY avg_transaction_amount_;",3,9,3,1,3,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0017,df_customers_cards,"SELECT card_id,
       customer_id,
       card_type_code,
       card_number
FROM df_customers_cards
ORDER BY card_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0008,"natural_join(input0, input1), summarise(input1, 'n = n()', ""'customer_last_name','other_customer_details'""), inner_join(line0, line1, ""'customer_id' = 'n'"")","SELECT customer_first_name,
       customer_last_name,
       customer_id
FROM
  (SELECT LHS.account_id AS account_id,
          LHS.customer_id AS customer_id,
          LHS.account_name AS account_name,
          LHS.other_account_details AS other_account_details,
          LHS.customer_first_name AS customer_first_name,
          LHS.customer_last_name AS customer_last_name,
          LHS.customer_address AS customer_address,
          LHS.customer_phone AS customer_phone,
          LHS.customer_email AS customer_email,
          LHS.other_customer_details AS other_customer_details,
          RHS.customer_last_name AS customer_last_name_other,
          RHS.other_customer_details AS other_customer_details_other
   FROM
     (SELECT LHS.account_id AS account_id,
             LHS.customer_id AS customer_id,
             LHS.account_name AS account_name,
             LHS.other_account_details AS other_account_details,
             RHS.customer_first_name AS customer_first_name,
             RHS.customer_last_name AS customer_last_name,
             RHS.customer_address AS customer_address,
             RHS.customer_phone AS customer_phone,
             RHS.customer_email AS customer_email,
             RHS.other_customer_details AS other_customer_details
      FROM df_accounts AS LHS
      INNER JOIN df_customers AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
   INNER JOIN
     (SELECT customer_last_name,
             other_customer_details,
             COUNT() AS n
      FROM df_customers
      GROUP BY customer_last_name,
               other_customer_details) AS RHS ON (LHS.customer_id = RHS.n))
ORDER BY customer_first_name;",3,10,4,0,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0039,"summarise(input0, 'sumtransaction_amount = sum(transaction_amount)', ""'transaction_date','transaction_type'""), limit(line0, 'sumtransaction_amount')","SELECT transaction_type
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT transaction_date,
                transaction_type,
                SUM(transaction_amount) AS sumtransaction_amount
         FROM df_financial_transactions
         GROUP BY transaction_date,
                  transaction_type)
      ORDER BY sumtransaction_amount)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0038,"summarise(input0, 'n = n()', ""'transaction_type'"")","SELECT transaction_type,
       n AS count___
FROM
  (SELECT transaction_type,
          COUNT() AS n
   FROM df_financial_transactions
   GROUP BY transaction_type)
ORDER BY transaction_type;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0003,"filter(input0, 'account_name == 338L'), intersect(line0, input0, 'other_account_details')","SELECT other_account_details
FROM
  (SELECT other_account_details
   FROM df_accounts
   WHERE (account_name = 338) INTERSECT
     SELECT other_account_details
     FROM df_accounts)
ORDER BY other_account_details;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/customers_card_transactions/0027,"summarise(input0, 'n = n()', ""'card_type_code'"")","SELECT card_type_code,
       n AS count___
FROM
  (SELECT card_type_code,
          COUNT() AS n
   FROM df_customers_cards
   GROUP BY card_type_code)
ORDER BY card_type_code;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0022,"filter(input0, ""customer_last_name != 'Huels'""), natural_join(input1, line0), filter(line1, ""customer_first_name != 'Blanche' | card_type_code != 'Credit'""), summarise(line2, 'n_distinct = n_distinct(card_type_code)', ""'card_type_code','other_card_details'"")","SELECT DISTINCT `n_distinct` AS `count___`
FROM
  (SELECT `card_type_code`,
          `other_card_details`,
          COUNT(DISTINCT `card_type_code`) AS `n_distinct`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`card_id` AS `card_id`,
                `LHS`.`customer_id` AS `customer_id`,
                `LHS`.`card_type_code` AS `card_type_code`,
                `LHS`.`card_number` AS `card_number`,
                `LHS`.`date_valid_from` AS `date_valid_from`,
                `LHS`.`date_valid_to` AS `date_valid_to`,
                `LHS`.`other_card_details` AS `other_card_details`,
                `RHS`.`customer_first_name` AS `customer_first_name`,
                `RHS`.`customer_last_name` AS `customer_last_name`,
                `RHS`.`customer_address` AS `customer_address`,
                `RHS`.`customer_phone` AS `customer_phone`,
                `RHS`.`customer_email` AS `customer_email`,
                `RHS`.`other_customer_details` AS `other_customer_details`
         FROM `df_customers_cards` AS `LHS`
         INNER JOIN
           (SELECT *
            FROM `df_customers`
            WHERE (`customer_last_name` != 'Huels')) AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`))
      WHERE (`customer_first_name` != 'Blanche'
             OR `card_type_code` != 'Credit'))
   GROUP BY card_type_code,
            other_card_details)
ORDER BY count___;",4,16,5,2,5,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0030,"summarise(input0, 'n_distinct = n_distinct(customer_id)', ""'card_type_code'"")","SELECT card_type_code,
       n_distinct AS count_distinct_customer_id_
FROM
  (SELECT card_type_code,
          COUNT(DISTINCT customer_id) AS n_distinct
   FROM df_customers_cards
   GROUP BY card_type_code)
ORDER BY card_type_code;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0013,"summarise(input0, 'n = n()', ""'customer_id','customer_phone'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT customer_id,
          customer_phone,
          COUNT() AS n
   FROM df_customers
   GROUP BY customer_id,
            customer_phone)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0006,"summarise(input0, 'n = n()', ""'customer_id'"")","SELECT customer_id,
       n AS count___
FROM
  (SELECT customer_id,
          COUNT() AS n
   FROM df_accounts
   GROUP BY customer_id)
ORDER BY customer_id;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0004,"filter(input0, 'account_name == 162L'), semi_join(input1, line0)","SELECT customer_first_name,
       customer_last_name,
       customer_phone
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_accounts
           WHERE (account_name = 162)) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_first_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/customers_card_transactions/0012,"summarise(input0, 'n_distinct = n_distinct(customer_id)', '')","SELECT n_distinct AS count_distinct_customer_id_
FROM
  (SELECT COUNT(DISTINCT customer_id) AS n_distinct
   FROM df_accounts)
ORDER BY count_distinct_customer_id_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0015,"filter(input0, ""customer_first_name == 'Aniyah' & customer_last_name == 'Feest'"")","SELECT `customer_phone`,
       `customer_email`
FROM `df_customers`
WHERE (`customer_first_name` = 'Aniyah'
       AND `customer_last_name` = 'Feest')
ORDER BY customer_phone;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0005,"natural_join(input0, input1), filter(line0, ""customer_first_name == 'Art' & customer_last_name == 'Turcotte'""), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM
  (SELECT `LHS`.`account_id` AS `account_id`,
          `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`account_name` AS `account_name`,
          `LHS`.`other_account_details` AS `other_account_details`,
          `RHS`.`customer_first_name` AS `customer_first_name`,
          `RHS`.`customer_last_name` AS `customer_last_name`,
          `RHS`.`customer_address` AS `customer_address`,
          `RHS`.`customer_phone` AS `customer_phone`,
          `RHS`.`customer_email` AS `customer_email`,
          `RHS`.`other_customer_details` AS `other_customer_details`
   FROM `df_accounts` AS `LHS`
   INNER JOIN `df_customers` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`))
WHERE (`customer_first_name` = 'Art'
       AND `customer_last_name` = 'Turcotte')
ORDER BY count___;",3,8,2,1,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0016,"mutate(input0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_customers_cards
ORDER BY count___;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0032,df_customers_cards,"SELECT DISTINCT card_type_code
FROM df_customers_cards
ORDER BY card_type_code;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0018,"filter(input0, 'card_number == 4560596484842L'), natural_join(input0, line0)","SELECT date_valid_from,
       date_valid_to
FROM
  (SELECT LHS.card_id AS card_id,
          LHS.customer_id AS customer_id,
          LHS.card_type_code AS card_type_code,
          LHS.card_number AS card_number,
          LHS.date_valid_from AS date_valid_from,
          LHS.date_valid_to AS date_valid_to,
          LHS.other_card_details AS other_card_details
   FROM df_customers_cards AS LHS
   INNER JOIN
     (SELECT *
      FROM df_customers_cards
      WHERE (card_number = 4560596484842.0)) AS RHS ON (LHS.card_id = RHS.card_id
                                                        AND LHS.customer_id = RHS.customer_id
                                                        AND LHS.card_type_code = RHS.card_type_code
                                                        AND LHS.card_number = RHS.card_number
                                                        AND LHS.date_valid_from = RHS.date_valid_from
                                                        AND LHS.date_valid_to = RHS.date_valid_to
                                                        AND LHS.other_card_details = RHS.other_card_details))
ORDER BY date_valid_from;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0035,"mutate(input0, 'n_distinct = n_distinct(transaction_type)')","SELECT DISTINCT COUNT(DISTINCT transaction_type) OVER () AS count_distinct_transaction_type_
FROM df_financial_transactions
ORDER BY count_distinct_transaction_type_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0020,"filter(input0, ""customer_first_name == 'Art' & customer_last_name == 'Turcotte'""), intersect(input1, line0, 'customer_id'), summarise(line1, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT `customer_id`
      FROM `df_customers_cards` INTERSECT SELECT `customer_id`
      FROM `df_customers`
      WHERE (`customer_first_name` = 'Art'
             AND `customer_last_name` = 'Turcotte')))
ORDER BY count___;",3,10,4,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0
spider/customers_card_transactions/0019,"filter(input1, 'card_number == 4560596484842L'), semi_join(input0, line0)","SELECT customer_first_name,
       customer_last_name,
       customer_phone
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_customers_cards
           WHERE (card_number = 4560596484842.0)) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_first_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/customers_card_transactions/0007,"summarise(input0, 'n = n()', ""'customer_id'""), limit(line0, 'desc(n)')","SELECT customer_id,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT customer_id,
                COUNT() AS n
         FROM df_accounts
         GROUP BY customer_id)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0034,df_financial_transactions,"SELECT DISTINCT transaction_type
FROM df_financial_transactions
ORDER BY transaction_type;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0021,"filter(input0, ""card_type_code == 'Debit'""), summarise(line0, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_customers_cards`
      WHERE (`card_type_code` = 'Debit')))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0023,"summarise(input0, 'n = n()', ""'customer_id'"")","SELECT customer_id,
       n AS count___
FROM
  (SELECT customer_id,
          COUNT() AS n
   FROM df_customers_cards
   GROUP BY customer_id)
ORDER BY customer_id;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0001,"summarise(input0, 'n = n()', ""'account_id','other_account_details'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT account_id,
          other_account_details,
          COUNT() AS n
   FROM df_accounts
   GROUP BY account_id,
            other_account_details)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0014,df_customers,"SELECT customer_id,
       customer_first_name,
       customer_last_name,
       customer_phone
FROM df_customers
ORDER BY customer_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0009,"anti_join(input1, input0, ""'customer_id'""), mutate(line0, 'n_distinct = n_distinct(customer_id)')","SELECT DISTINCT COUNT(DISTINCT customer_id) OVER () AS count___
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_accounts AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY count___;",2,13,3,2,3,0,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
spider/customers_card_transactions/0025,"summarise(input1, 'n = n()', ""'customer_id'""), filter(line0, 'n >= 2L'), semi_join(input0, line1)","SELECT customer_id,
       customer_first_name,
       customer_last_name
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT customer_id,
                     COUNT() AS n
              FROM df_customers_cards
              GROUP BY customer_id)
           WHERE (n >= 2)) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_id;",3,14,5,0,5,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0
spider/customers_card_transactions/0011,"semi_join(input1, input0)","SELECT customer_first_name,
       customer_last_name
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_accounts AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_first_name;",1,9,3,0,3,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
spider/customers_card_transactions/0029,"mutate(input0, 'n = n()'), filter(line0, 'n > 5L')","SELECT DISTINCT card_type_code
FROM
  (SELECT card_id,
          customer_id,
          card_type_code,
          card_number,
          date_valid_from,
          date_valid_to,
          other_card_details,
          COUNT(*) OVER () AS n
   FROM df_customers_cards)
WHERE (n > 5)
ORDER BY card_type_code;",2,7,2,1,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0010,"anti_join(input1, input0, '')","SELECT customer_first_name,
       customer_last_name
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_accounts AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_first_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/customers_card_transactions/0040,"summarise(input0, 'n = n()', ""'account_id','transaction_comment'"")","SELECT account_id,
       n AS count___
FROM
  (SELECT account_id,
          transaction_comment,
          COUNT() AS n
   FROM df_financial_transactions
   GROUP BY account_id,
            transaction_comment)
ORDER BY account_id;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0028,"mutate(input0, 'n = n()'), inner_join(line0, input0, ""'n' = 'card_id','card_number' = 'card_number'"")","SELECT card_type_code
FROM
  (SELECT LHS.card_id AS card_id,
          LHS.customer_id AS customer_id,
          LHS.card_type_code AS card_type_code,
          LHS.card_number AS card_number,
          LHS.date_valid_from AS date_valid_from,
          LHS.date_valid_to AS date_valid_to,
          LHS.other_card_details AS other_card_details,
          LHS.n AS n,
          RHS.customer_id AS customer_id_other,
          RHS.card_type_code AS card_type_code_other,
          RHS.date_valid_from AS date_valid_from_other,
          RHS.date_valid_to AS date_valid_to_other,
          RHS.other_card_details AS other_card_details_other
   FROM
     (SELECT card_id,
             customer_id,
             card_type_code,
             card_number,
             date_valid_from,
             date_valid_to,
             other_card_details,
             COUNT(*) OVER () AS n
      FROM df_customers_cards) AS LHS
   INNER JOIN df_customers_cards AS RHS ON (LHS.n = RHS.card_id
                                            AND LHS.card_number = RHS.card_number))
ORDER BY card_type_code;",2,8,3,0,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/customers_card_transactions/0031,"filter(input1, ""card_type_code == 'Credit'""), anti_join(input0, line0, ""'customer_id'"")","SELECT `customer_id`,
       `customer_first_name`
FROM
  (SELECT *
   FROM `df_customers` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customers_cards`
           WHERE (`card_type_code` = 'Credit')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_id;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/products_for_hire/0002,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'customer_id','first_name'"")","SELECT customer_id,
       first_name,
       n AS count___
FROM
  (SELECT customer_id,
          first_name,
          COUNT() AS n
   FROM
     (SELECT LHS.customer_id AS customer_id,
             LHS.coupon_id AS coupon_id,
             LHS.good_or_bad_customer AS good_or_bad_customer,
             LHS.first_name AS first_name,
             LHS.last_name AS last_name,
             LHS.gender_mf AS gender_mf,
             LHS.date_became_customer AS date_became_customer,
             LHS.date_last_hire AS date_last_hire,
             RHS.booking_id AS booking_id,
             RHS.booking_status_code AS booking_status_code,
             RHS.returned_damaged_yn AS returned_damaged_yn,
             RHS.booking_start_date AS booking_start_date,
             RHS.booking_end_date AS booking_end_date,
             RHS.count_hired AS count_hired,
             RHS.amount_payable AS amount_payable,
             RHS.amount_of_discount AS amount_of_discount,
             RHS.amount_outstanding AS amount_outstanding,
             RHS.amount_of_refund AS amount_of_refund
      FROM df_customers AS LHS
      INNER JOIN df_bookings AS RHS ON (LHS.customer_id = RHS.customer_id))
   GROUP BY customer_id,
            first_name)
ORDER BY customer_id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/products_for_hire/0017,"filter(input0, ""payment_type_code == 'Check' | amount_paid > 300"")","SELECT `payment_date`
FROM `df_payments`
WHERE (`payment_type_code` = 'Check'
       OR amount_paid > 300.0)
ORDER BY payment_date;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/products_for_hire/0008,"filter(input1, 'available_yn == 1L'), semi_join(input0, line0)","SELECT product_name
FROM
  (SELECT *
   FROM df_products_for_hire AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_view_product_availability
           WHERE (available_yn = 1)) AS RHS
        WHERE (LHS.product_id = RHS.product_id) ))
ORDER BY product_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/products_for_hire/0003,"summarise(input0, 'sumamount_paid = sum(amount_paid)', ""'amount_paid_in_full_yn','customer_id'""), limit(line0, 'desc(sumamount_paid)')","SELECT customer_id,
       sumamount_paid AS sum_amount_paid_
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT amount_paid_in_full_yn,
                customer_id,
                SUM(amount_paid) AS sumamount_paid
         FROM df_payments
         GROUP BY amount_paid_in_full_yn,
                  customer_id)
      ORDER BY sumamount_paid DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/products_for_hire/0013,df_payments,"SELECT DISTINCT payment_type_code
FROM df_payments
ORDER BY payment_type_code;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/products_for_hire/0006,"natural_join(input0, input1), filter(line0, 'booked_amount <= 102.76')","SELECT product_description
FROM
  (SELECT LHS.product_id AS product_id,
          LHS.product_type_code AS product_type_code,
          LHS.daily_hire_cost AS daily_hire_cost,
          LHS.product_name AS product_name,
          LHS.product_description AS product_description,
          RHS.booking_id AS booking_id,
          RHS.returned_yn AS returned_yn,
          RHS.returned_late_yn AS returned_late_yn,
          RHS.booked_count AS booked_count,
          RHS.booked_amount AS booked_amount
   FROM df_products_for_hire AS LHS
   INNER JOIN df_products_booked AS RHS ON (LHS.product_id = RHS.product_id))
WHERE (booked_amount <= 102.76)
ORDER BY product_description;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/products_for_hire/0004,"mutate(input1, 'n = n()'), inner_join(input0, line0, ""'booking_id' = 'n'""), semi_join(line1, input0)","SELECT DISTINCT booking_id,
                amount_of_refund
FROM
  (SELECT *
   FROM
     (SELECT booking_id,
             customer_id,
             booking_status_code,
             returned_damaged_yn,
             booking_start_date,
             booking_end_date,
             count_hired,
             amount_payable,
             amount_of_discount,
             amount_outstanding,
             amount_of_refund,
             payment_id,
             booking_id_other,
             customer_id_other,
             payment_type_code,
             amount_paid_in_full_yn,
             payment_date,
             amount_due,
             amount_paid,
             booking_id AS n
      FROM
        (SELECT LHS.booking_id AS booking_id,
                LHS.customer_id AS customer_id,
                LHS.booking_status_code AS booking_status_code,
                LHS.returned_damaged_yn AS returned_damaged_yn,
                LHS.booking_start_date AS booking_start_date,
                LHS.booking_end_date AS booking_end_date,
                LHS.count_hired AS count_hired,
                LHS.amount_payable AS amount_payable,
                LHS.amount_of_discount AS amount_of_discount,
                LHS.amount_outstanding AS amount_outstanding,
                LHS.amount_of_refund AS amount_of_refund,
                RHS.payment_id AS payment_id,
                RHS.booking_id AS booking_id_other,
                RHS.customer_id AS customer_id_other,
                RHS.payment_type_code AS payment_type_code,
                RHS.amount_paid_in_full_yn AS amount_paid_in_full_yn,
                RHS.payment_date AS payment_date,
                RHS.amount_due AS amount_due,
                RHS.amount_paid AS amount_paid
         FROM df_bookings AS LHS
         INNER JOIN
           (SELECT payment_id,
                   booking_id,
                   customer_id,
                   payment_type_code,
                   amount_paid_in_full_yn,
                   payment_date,
                   amount_due,
                   amount_paid,
                   COUNT(*) OVER () AS n
            FROM df_payments) AS RHS ON (LHS.booking_id = RHS.n))) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_bookings AS RHS
        WHERE (LHS.booking_id = RHS.booking_id
               AND LHS.customer_id = RHS.customer_id
               AND LHS.booking_status_code = RHS.booking_status_code
               AND LHS.returned_damaged_yn = RHS.returned_damaged_yn
               AND LHS.booking_start_date = RHS.booking_start_date
               AND LHS.booking_end_date = RHS.booking_end_date
               AND LHS.count_hired = RHS.count_hired
               AND LHS.amount_payable = RHS.amount_payable
               AND LHS.amount_of_discount = RHS.amount_of_discount
               AND LHS.amount_outstanding = RHS.amount_outstanding
               AND LHS.amount_of_refund = RHS.amount_of_refund) ))
ORDER BY booking_id;",3,18,6,1,6,1,2,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0
spider/products_for_hire/0012,"mutate(input0, 'maxbooked_count = max(booked_count)'), mutate(line0, 'meanbooked_count = mean(booked_count, na.rm = T)'), mutate(line1, 'minbooked_count = min(booked_count)')","SELECT DISTINCT maxbooked_count AS max_booked_count_,
                MIN(booked_count) OVER () AS min_booked_count_,
                                       meanbooked_count AS avg_booked_count_
FROM
  (SELECT booking_id,
          product_id,
          returned_yn,
          returned_late_yn,
          booked_count,
          booked_amount,
          maxbooked_count,
          AVG(booked_count) OVER () AS meanbooked_count
   FROM
     (SELECT booking_id,
             product_id,
             returned_yn,
             returned_late_yn,
             booked_count,
             booked_amount,
             MAX(booked_count) OVER () AS maxbooked_count
      FROM df_products_booked))
ORDER BY max_booked_count_;",3,10,3,1,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0
spider/products_for_hire/0015,"filter(input0, 'product_id != 200L'), summarise(line0, 'n_distinct = n_distinct(product_id)', ""'product_id','product_type_code'""), left_join(line1, input1)","SELECT DISTINCT n_distinct AS count___
FROM
  (SELECT LHS.product_id AS product_id,
          LHS.product_type_code AS product_type_code,
          LHS.n_distinct AS n_distinct,
          RHS.booking_id AS booking_id,
          RHS.returned_yn AS returned_yn,
          RHS.returned_late_yn AS returned_late_yn,
          RHS.booked_count AS booked_count,
          RHS.booked_amount AS booked_amount
   FROM
     (SELECT product_id,
             product_type_code,
             COUNT(DISTINCT product_id) AS n_distinct
      FROM df_products_for_hire
      WHERE (product_id != 200)
      GROUP BY product_id,
               product_type_code) AS LHS
   LEFT JOIN df_products_booked AS RHS ON (LHS.product_id = RHS.product_id))
ORDER BY count___;",3,10,3,2,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/products_for_hire/0005,"summarise(input0, 'n = n()', ""'product_id','returned_yn'""), filter(line0, 'n == 3L'), intersect(input0, line1, 'product_id')","SELECT product_id
FROM
  (SELECT product_id
   FROM df_products_booked INTERSECT SELECT product_id
   FROM
     (SELECT product_id,
             returned_yn,
             COUNT() AS n
      FROM df_products_booked
      GROUP BY product_id,
               returned_yn)
   WHERE (n = 3))
ORDER BY product_id;",3,10,4,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0
spider/products_for_hire/0018,"filter(input0, ""product_type_code != 'Cutlery' | daily_hire_cost >= 20""), anti_join(input0, line0, ""'daily_hire_cost','product_type_code'"")","SELECT `product_name`,
       `product_description`
FROM
  (SELECT *
   FROM `df_products_for_hire` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_products_for_hire`
           WHERE (`product_type_code` != 'Cutlery'
                  OR daily_hire_cost >= 20.0)) AS RHS
        WHERE (LHS.daily_hire_cost = RHS.daily_hire_cost
               AND LHS.product_type_code = RHS.product_type_code) ))
ORDER BY product_name;",2,14,4,0,4,0,3,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/products_for_hire/0007,"filter(input1, ""product_name == 'Book collection A'""), natural_join3(input0, input2, line0)","SELECT `booking_start_date`,
       `booking_end_date`
FROM
  (SELECT `LHS`.`booking_id` AS `booking_id`,
          `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`booking_status_code` AS `booking_status_code`,
          `LHS`.`returned_damaged_yn` AS `returned_damaged_yn`,
          `LHS`.`booking_start_date` AS `booking_start_date`,
          `LHS`.`booking_end_date` AS `booking_end_date`,
          `LHS`.`count_hired` AS `count_hired`,
          `LHS`.`amount_payable` AS `amount_payable`,
          `LHS`.`amount_of_discount` AS `amount_of_discount`,
          `LHS`.`amount_outstanding` AS `amount_outstanding`,
          `LHS`.`amount_of_refund` AS `amount_of_refund`,
          `LHS`.`product_id` AS `product_id`,
          `LHS`.`returned_yn` AS `returned_yn`,
          `LHS`.`returned_late_yn` AS `returned_late_yn`,
          `LHS`.`booked_count` AS `booked_count`,
          `LHS`.`booked_amount` AS `booked_amount`,
          `RHS`.`product_type_code` AS `product_type_code`,
          `RHS`.`daily_hire_cost` AS `daily_hire_cost`,
          `RHS`.`product_name` AS `product_name`,
          `RHS`.`product_description` AS `product_description`
   FROM
     (SELECT `LHS`.`booking_id` AS `booking_id`,
             `LHS`.`customer_id` AS `customer_id`,
             `LHS`.`booking_status_code` AS `booking_status_code`,
             `LHS`.`returned_damaged_yn` AS `returned_damaged_yn`,
             `LHS`.`booking_start_date` AS `booking_start_date`,
             `LHS`.`booking_end_date` AS `booking_end_date`,
             `LHS`.`count_hired` AS `count_hired`,
             `LHS`.`amount_payable` AS `amount_payable`,
             `LHS`.`amount_of_discount` AS `amount_of_discount`,
             `LHS`.`amount_outstanding` AS `amount_outstanding`,
             `LHS`.`amount_of_refund` AS `amount_of_refund`,
             `RHS`.`product_id` AS `product_id`,
             `RHS`.`returned_yn` AS `returned_yn`,
             `RHS`.`returned_late_yn` AS `returned_late_yn`,
             `RHS`.`booked_count` AS `booked_count`,
             `RHS`.`booked_amount` AS `booked_amount`
      FROM `df_bookings` AS `LHS`
      INNER JOIN `df_products_booked` AS `RHS` ON (`LHS`.`booking_id` = `RHS`.`booking_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_products_for_hire`
      WHERE (`product_name` = 'Book collection A')) AS RHS ON (LHS.product_id = RHS.product_id))
ORDER BY booking_start_date;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/products_for_hire/0001,"natural_join(input0, input1), filter(line0, 'coupon_amount == 500')","SELECT good_or_bad_customer
FROM
  (SELECT LHS.coupon_id AS coupon_id,
          LHS.date_issued AS date_issued,
          LHS.coupon_amount AS coupon_amount,
          RHS.customer_id AS customer_id,
          RHS.good_or_bad_customer AS good_or_bad_customer,
          RHS.first_name AS first_name,
          RHS.last_name AS last_name,
          RHS.gender_mf AS gender_mf,
          RHS.date_became_customer AS date_became_customer,
          RHS.date_last_hire AS date_last_hire
   FROM df_discount_coupons AS LHS
   INNER JOIN df_customers AS RHS ON (LHS.coupon_id = RHS.coupon_id))
WHERE (coupon_amount = 500.0)
ORDER BY good_or_bad_customer;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/products_for_hire/0009,"summarise(input0, 'n_distinct = n_distinct(product_type_code)', ""'product_id','product_type_code'""), mutate(line0, 'n_distinct = n_distinct(product_type_code)')","SELECT DISTINCT COUNT(DISTINCT product_type_code) OVER () AS count_distinct_product_type_code_
FROM
  (SELECT product_id,
          product_type_code,
          COUNT(DISTINCT product_type_code) AS n_distinct
   FROM df_products_for_hire
   GROUP BY product_id,
            product_type_code)
ORDER BY count_distinct_product_type_code_;",2,8,2,3,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/products_for_hire/0011,"summarise(input0, 'meanamount_due = mean(amount_due, na.rm = T)', '')","SELECT meanamount_due AS avg_amount_due_
FROM
  (SELECT AVG(amount_due) AS meanamount_due
   FROM df_payments)
ORDER BY avg_amount_due_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/products_for_hire/0010,"filter(input0, ""good_or_bad_customer == 'good'""), semi_join(input0, line0)","SELECT `first_name`,
       `last_name`,
       `gender_mf`
FROM
  (SELECT *
   FROM `df_customers` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customers`
           WHERE (`good_or_bad_customer` = 'good')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id
               AND LHS.coupon_id = RHS.coupon_id
               AND LHS.good_or_bad_customer = RHS.good_or_bad_customer
               AND LHS.first_name = RHS.first_name
               AND LHS.last_name = RHS.last_name
               AND LHS.gender_mf = RHS.gender_mf
               AND LHS.date_became_customer = RHS.date_became_customer
               AND LHS.date_last_hire = RHS.date_last_hire) ))
ORDER BY first_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/protein_institute/0002,df_building,"SELECT name,
       street_address,
       floors
FROM df_building
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/protein_institute/0017,"filter(input0, ""type != 'Private' | founded > 1880""), natural_join(input1, line0), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM
  (SELECT `LHS`.`common_name` AS `common_name`,
          `LHS`.`protein_name` AS `protein_name`,
          `LHS`.`divergence_from_human_lineage` AS `divergence_from_human_lineage`,
          `LHS`.`accession_number` AS `accession_number`,
          `LHS`.`sequence_length` AS `sequence_length`,
          `LHS`.`sequence_identity_to_human_protein` AS `sequence_identity_to_human_protein`,
          `LHS`.`institution_id` AS `institution_id`,
          `RHS`.`institution` AS `institution`,
          `RHS`.`location` AS `location`,
          `RHS`.`founded` AS `founded`,
          `RHS`.`type` AS `type`,
          `RHS`.`enrollment` AS `enrollment`,
          `RHS`.`team` AS `team`,
          `RHS`.`primary_conference` AS `primary_conference`,
          `RHS`.`building_id` AS `building_id`
   FROM `df_protein` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_institution`
      WHERE (`type` != 'Private'
             OR founded > 1880.0)) AS RHS ON (LHS.institution_id = RHS.institution_id))
ORDER BY count___;",3,11,3,1,3,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/protein_institute/0003,"limit(input0, 'street_address')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_building
      ORDER BY street_address)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/protein_institute/0013,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'building_id','name'"")","SELECT name,
       n AS count___
FROM
  (SELECT building_id,
          name,
          COUNT() AS n
   FROM
     (SELECT LHS.building_id AS building_id,
             LHS.name AS name,
             LHS.street_address AS street_address,
             LHS.years_as_tallest AS years_as_tallest,
             LHS.height_feet AS height_feet,
             LHS.floors AS floors,
             RHS.institution_id AS institution_id,
             RHS.institution AS institution,
             RHS.location AS LOCATION,
             RHS.founded AS founded,
             RHS.type AS TYPE,
             RHS.enrollment AS enrollment,
             RHS.team AS team,
             RHS.primary_conference AS primary_conference
      FROM df_building AS LHS
      INNER JOIN df_institution AS RHS ON (LHS.building_id = RHS.building_id))
   GROUP BY building_id,
            name)
ORDER BY name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/protein_institute/0006,"filter(input0, 'floors >= 200L | floors > 20L')","SELECT name
FROM df_building
WHERE (floors >= 200
       OR floors > 20)
ORDER BY name;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/protein_institute/0004,"mutate(input0, 'meanfloors = mean(floors, na.rm = T)'), mutate(line0, 'minfloors = min(floors)'), mutate(line1, 'maxfloors = max(floors)')","SELECT DISTINCT meanfloors AS avg_floors_,
                MAX(floors) OVER () AS max_floors_,
                                 minfloors AS min_floors_
FROM
  (SELECT building_id,
          name,
          street_address,
          years_as_tallest,
          height_feet,
          floors,
          meanfloors,
          MIN(floors) OVER () AS minfloors
   FROM
     (SELECT building_id,
             name,
             street_address,
             years_as_tallest,
             height_feet,
             floors,
             AVG(floors) OVER () AS meanfloors
      FROM df_building))
ORDER BY avg_floors_;",3,10,3,1,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0
spider/protein_institute/0012,"filter(input1, 'founded == 2003'), anti_join(input0, line0, ""'building_id'"")","SELECT name
FROM
  (SELECT *
   FROM df_building AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_institution
           WHERE (founded = 2003.0)) AS RHS
        WHERE (LHS.building_id = RHS.building_id) ))
ORDER BY name;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/protein_institute/0015,"intersect(input0, input0, 'type')","SELECT TYPE
FROM
  (SELECT TYPE
   FROM df_institution INTERSECT SELECT TYPE
   FROM df_institution)
ORDER BY TYPE;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/protein_institute/0016,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'enrollment','institution'"")","SELECT institution,
       n AS count___
FROM
  (SELECT enrollment,
          institution,
          COUNT() AS n
   FROM
     (SELECT LHS.institution_id AS institution_id,
             LHS.institution AS institution,
             LHS.location AS LOCATION,
             LHS.founded AS founded,
             LHS.type AS TYPE,
             LHS.enrollment AS enrollment,
             LHS.team AS team,
             LHS.primary_conference AS primary_conference,
             LHS.building_id AS building_id,
             RHS.common_name AS common_name,
             RHS.protein_name AS protein_name,
             RHS.divergence_from_human_lineage AS divergence_from_human_lineage,
             RHS.accession_number AS accession_number,
             RHS.sequence_length AS sequence_length,
             RHS.sequence_identity_to_human_protein AS sequence_identity_to_human_protein
      FROM df_institution AS LHS
      INNER JOIN df_protein AS RHS ON (LHS.institution_id = RHS.institution_id))
   GROUP BY enrollment,
            institution)
ORDER BY institution;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/protein_institute/0018,"left_join(input1, input0), natural_join(input1, line0)","SELECT protein_name,
       institution
FROM
  (SELECT LHS.common_name AS common_name,
          LHS.protein_name AS protein_name,
          LHS.divergence_from_human_lineage AS divergence_from_human_lineage,
          LHS.accession_number AS accession_number,
          LHS.sequence_length AS sequence_length,
          LHS.sequence_identity_to_human_protein AS sequence_identity_to_human_protein,
          LHS.institution_id AS institution_id,
          RHS.institution AS institution,
          RHS.location AS LOCATION,
          RHS.founded AS founded,
          RHS.type AS TYPE,
          RHS.enrollment AS enrollment,
          RHS.team AS team,
          RHS.primary_conference AS primary_conference,
          RHS.building_id AS building_id
   FROM df_protein AS LHS
   INNER JOIN
     (SELECT LHS.common_name AS common_name,
             LHS.protein_name AS protein_name,
             LHS.divergence_from_human_lineage AS divergence_from_human_lineage,
             LHS.accession_number AS accession_number,
             LHS.sequence_length AS sequence_length,
             LHS.sequence_identity_to_human_protein AS sequence_identity_to_human_protein,
             LHS.institution_id AS institution_id,
             RHS.institution AS institution,
             RHS.location AS LOCATION,
             RHS.founded AS founded,
             RHS.type AS TYPE,
             RHS.enrollment AS enrollment,
             RHS.team AS team,
             RHS.primary_conference AS primary_conference,
             RHS.building_id AS building_id
      FROM df_protein AS LHS
      LEFT JOIN df_institution AS RHS ON (LHS.institution_id = RHS.institution_id)) AS RHS ON (LHS.common_name = RHS.common_name
                                                                                               AND LHS.protein_name = RHS.protein_name
                                                                                               AND LHS.divergence_from_human_lineage = RHS.divergence_from_human_lineage
                                                                                               AND LHS.accession_number = RHS.accession_number
                                                                                               AND LHS.sequence_length = RHS.sequence_length
                                                                                               AND LHS.sequence_identity_to_human_protein = RHS.sequence_identity_to_human_protein
                                                                                               AND LHS.institution_id = RHS.institution_id))
ORDER BY protein_name;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
spider/protein_institute/0020,"anti_join(input0, input1, ''), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT *
   FROM df_institution AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_protein AS RHS
        WHERE (LHS.institution_id = RHS.institution_id) ))
ORDER BY count___;",2,12,3,1,3,0,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
spider/protein_institute/0019,"filter(input0, 'floors > 20L'), natural_join3(input1, input2, line0), summarise(line1, 'n_distinct = n_distinct(floors)', '')","SELECT n_distinct AS count___
FROM
  (SELECT COUNT(DISTINCT floors) AS n_distinct
   FROM
     (SELECT LHS.institution_id AS institution_id,
             LHS.institution AS institution,
             LHS.location AS LOCATION,
             LHS.founded AS founded,
             LHS.type AS TYPE,
             LHS.enrollment AS enrollment,
             LHS.team AS team,
             LHS.primary_conference AS primary_conference,
             LHS.building_id AS building_id,
             LHS.common_name AS common_name,
             LHS.protein_name AS protein_name,
             LHS.divergence_from_human_lineage AS divergence_from_human_lineage,
             LHS.accession_number AS accession_number,
             LHS.sequence_length AS sequence_length,
             LHS.sequence_identity_to_human_protein AS sequence_identity_to_human_protein,
             RHS.name AS name,
             RHS.street_address AS street_address,
             RHS.years_as_tallest AS years_as_tallest,
             RHS.height_feet AS height_feet,
             RHS.floors AS floors
      FROM
        (SELECT LHS.institution_id AS institution_id,
                LHS.institution AS institution,
                LHS.location AS LOCATION,
                LHS.founded AS founded,
                LHS.type AS TYPE,
                LHS.enrollment AS enrollment,
                LHS.team AS team,
                LHS.primary_conference AS primary_conference,
                LHS.building_id AS building_id,
                RHS.common_name AS common_name,
                RHS.protein_name AS protein_name,
                RHS.divergence_from_human_lineage AS divergence_from_human_lineage,
                RHS.accession_number AS accession_number,
                RHS.sequence_length AS sequence_length,
                RHS.sequence_identity_to_human_protein AS sequence_identity_to_human_protein
         FROM df_institution AS LHS
         INNER JOIN df_protein AS RHS ON (LHS.institution_id = RHS.institution_id)) AS LHS
      INNER JOIN
        (SELECT *
         FROM df_building
         WHERE (floors > 20)) AS RHS ON (LHS.building_id = RHS.building_id)))
ORDER BY count___;",3,14,5,1,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/protein_institute/0007,"filter(input0, ""type == 'Private' & founded > 1990""), semi_join(input0, line0)","SELECT `institution`,
       `location`
FROM
  (SELECT *
   FROM `df_institution` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_institution`
           WHERE (`type` = 'Private'
                  AND founded > 1990.0)) AS RHS
        WHERE (LHS.institution_id = RHS.institution_id
               AND LHS.institution = RHS.institution
               AND LHS.location = RHS.location
               AND LHS.founded = RHS.founded
               AND LHS.type = RHS.type
               AND LHS.enrollment = RHS.enrollment
               AND LHS.team = RHS.team
               AND LHS.primary_conference = RHS.primary_conference
               AND LHS.building_id = RHS.building_id) ))
ORDER BY institution;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/protein_institute/0001,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_building)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/protein_institute/0009,"summarise(input0, 'n = n()', ""'founded','type'""), filter(line0, 'n != 1L')","SELECT TYPE
FROM
  (SELECT founded,
          TYPE,
          COUNT() AS n
   FROM df_institution
   GROUP BY founded,
            TYPE)
WHERE (n != 1)
ORDER BY TYPE;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/protein_institute/0011,"anti_join(input0, input1, ""'building_id'"")","SELECT name
FROM
  (SELECT *
   FROM df_building AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_institution AS RHS
        WHERE (LHS.building_id = RHS.building_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/protein_institute/0010,"filter(input0, 'founded >= 1990 | founded < 1000')","SELECT TYPE
FROM df_institution
WHERE (founded >= 1990.0
       OR founded < 1000.0)
ORDER BY TYPE;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/restaurant_1/0002,"filter(input0, ""resname == 'Subway'""), intersect(line0, line0, 'address')","SELECT `address`
FROM
  (SELECT `address`
   FROM `df_restaurant`
   WHERE (`resname` = 'Subway') INTERSECT
     SELECT `address`
     FROM `df_restaurant` WHERE (`resname` = 'Subway'))
ORDER BY address;",2,9,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/restaurant_1/0017,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'address','resname'"")","SELECT DISTINCT n AS count___
FROM
  (SELECT address,
          resname,
          COUNT() AS n
   FROM
     (SELECT LHS.resid AS resid,
             LHS.resname AS resname,
             LHS.address AS address,
             LHS.rating AS rating,
             LHS.restypeid AS restypeid,
             RHS.restypename AS restypename,
             RHS.restypedescription AS restypedescription
      FROM
        (SELECT LHS.resid AS resid,
                LHS.resname AS resname,
                LHS.address AS address,
                LHS.rating AS rating,
                RHS.restypeid AS restypeid
         FROM df_restaurant AS LHS
         INNER JOIN df_type_of_restaurant AS RHS ON (LHS.resid = RHS.resid)) AS LHS
      INNER JOIN df_restaurant_type AS RHS ON (LHS.restypeid = RHS.restypeid))
   GROUP BY address,
            resname)
ORDER BY count___;",2,11,4,1,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
spider/restaurant_1/0008,"filter(input0, ""fname != 'Linda' & lname == 'Smith'""), natural_join(input0, line0)","SELECT `sex`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`
   FROM `df_student` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_student`
      WHERE (`fname` != 'Linda'
             AND `lname` = 'Smith')) AS RHS ON (LHS.stuid = RHS.stuid
                                                AND LHS.lname = RHS.lname
                                                AND LHS.fname = RHS.fname
                                                AND LHS.age = RHS.age
                                                AND LHS.sex = RHS.sex
                                                AND LHS.major = RHS.major
                                                AND LHS.advisor = RHS.advisor
                                                AND LHS.city_code = RHS.city_code))
ORDER BY sex;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/restaurant_1/0003,"filter(input0, ""resname == 'Subway'""), intersect(line0, line0, 'rating')","SELECT `rating`
FROM
  (SELECT `rating`
   FROM `df_restaurant`
   WHERE (`resname` = 'Subway') INTERSECT
     SELECT `rating`
     FROM `df_restaurant` WHERE (`resname` = 'Subway'))
ORDER BY rating;",2,9,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/restaurant_1/0022,"summarise(input0, 'n = n()', ""'fname'""), filter(line0, 'n > 1L'), natural_join4(input0, input1, line0, line1)","SELECT fname,
       lname
FROM
  (SELECT LHS.stuid AS stuid,
          LHS.lname AS lname,
          LHS.fname AS fname,
          LHS.age AS age,
          LHS.sex AS sex,
          LHS.major AS major,
          LHS.advisor AS advisor,
          LHS.city_code AS city_code,
          LHS.resid AS resid,
          LHS.time AS TIME,
          LHS.spent AS spent,
          LHS.n AS n
   FROM
     (SELECT LHS.stuid AS stuid,
             LHS.lname AS lname,
             LHS.fname AS fname,
             LHS.age AS age,
             LHS.sex AS sex,
             LHS.major AS major,
             LHS.advisor AS advisor,
             LHS.city_code AS city_code,
             LHS.resid AS resid,
             LHS.time AS TIME,
             LHS.spent AS spent,
             RHS.n AS n
      FROM
        (SELECT LHS.stuid AS stuid,
                LHS.lname AS lname,
                LHS.fname AS fname,
                LHS.age AS age,
                LHS.sex AS sex,
                LHS.major AS major,
                LHS.advisor AS advisor,
                LHS.city_code AS city_code,
                RHS.resid AS resid,
                RHS.time AS TIME,
                RHS.spent AS spent
         FROM df_student AS LHS
         INNER JOIN df_visits_restaurant AS RHS ON (LHS.stuid = RHS.stuid)) AS LHS
      INNER JOIN
        (SELECT fname,
                COUNT() AS n
         FROM df_student
         GROUP BY fname) AS RHS ON (LHS.fname = RHS.fname)) AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT fname,
                COUNT() AS n
         FROM df_student
         GROUP BY fname)
      WHERE (n > 1)) AS RHS ON (LHS.fname = RHS.fname
                                AND LHS.n = RHS.n))
ORDER BY fname;",3,21,7,0,7,3,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
spider/restaurant_1/0013,"summarise(input0, 'n = n()', ""'major'""), limit(line0, 'n')","SELECT major,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT major,
                COUNT() AS n
         FROM df_student
         GROUP BY major)
      ORDER BY n)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/restaurant_1/0006,"limit(input0, 'resname')","SELECT resname,
       rating
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_restaurant
      ORDER BY resname)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/restaurant_1/0004,df_restaurant_type,"SELECT restypename
FROM df_restaurant_type
ORDER BY restypename;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/restaurant_1/0012,"summarise(input0, 'n = n()', ""'advisor','sex'""), limit(line0, 'desc(n)')","SELECT advisor,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT advisor,
                sex,
                COUNT() AS n
         FROM df_student
         GROUP BY advisor,
                  sex)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/restaurant_1/0015,"filter(input0, 'age > 18L & major == 600L'), semi_join(line0, input0)","SELECT fname,
       lname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_student
      WHERE (age > 18
             AND major = 600)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_student AS RHS
        WHERE (LHS.stuid = RHS.stuid
               AND LHS.lname = RHS.lname
               AND LHS.fname = RHS.fname
               AND LHS.age = RHS.age
               AND LHS.sex = RHS.sex
               AND LHS.major = RHS.major
               AND LHS.advisor = RHS.advisor
               AND LHS.city_code = RHS.city_code) ))
ORDER BY fname;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/restaurant_1/0005,"filter(input0, ""restypename == 'Sandwich'"")","SELECT `restypedescription`
FROM `df_restaurant_type`
WHERE (`restypename` = 'Sandwich')
ORDER BY restypedescription;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/restaurant_1/0016,"filter(input0, ""sex == 'F' & age != 18L""), filter(line0, 'age != 600L & major != 600L')","SELECT `fname`,
       `lname`
FROM
  (SELECT *
   FROM `df_student`
   WHERE (`sex` = 'F'
          AND age != 18))
WHERE (age != 600
       AND major != 600)
ORDER BY fname;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/restaurant_1/0018,"filter(input0, ""fname == 'Linda' & lname == 'Smith'""), summarise(input1, 'sumspent = sum(spent)', ""'stuid','time'""), left_join(line0, line1)","SELECT `sumspent` AS `sum_spent_`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `RHS`.`time` AS `time`,
          `RHS`.`sumspent` AS `sumspent`
   FROM
     (SELECT *
      FROM `df_student`
      WHERE (`fname` = 'Linda'
             AND `lname` = 'Smith')) AS LHS
   LEFT JOIN
     (SELECT stuid,
             TIME,
             SUM(spent) AS sumspent
      FROM df_visits_restaurant
      GROUP BY stuid,
               TIME) AS RHS ON (LHS.stuid = RHS.stuid))
ORDER BY sum_spent_;",3,12,4,0,4,1,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/restaurant_1/0020,"filter(input1, ""resname == 'Subway'""), filter(input0, ""fname == 'Linda' & lname == 'Smith'""), natural_join3(input2, line0, line1)","SELECT `time`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`resid` AS `resid`,
          `LHS`.`time` AS `time`,
          `LHS`.`spent` AS `spent`,
          `LHS`.`resname` AS `resname`,
          `LHS`.`address` AS `address`,
          `LHS`.`rating` AS `rating`,
          `RHS`.`lname` AS `lname`,
          `RHS`.`fname` AS `fname`,
          `RHS`.`age` AS `age`,
          `RHS`.`sex` AS `sex`,
          `RHS`.`major` AS `major`,
          `RHS`.`advisor` AS `advisor`,
          `RHS`.`city_code` AS `city_code`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`resid` AS `resid`,
             `LHS`.`time` AS `time`,
             `LHS`.`spent` AS `spent`,
             `RHS`.`resname` AS `resname`,
             `RHS`.`address` AS `address`,
             `RHS`.`rating` AS `rating`
      FROM `df_visits_restaurant` AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_restaurant`
         WHERE (`resname` = 'Subway')) AS `RHS` ON (`LHS`.`resid` = `RHS`.`resid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_student`
      WHERE (`fname` = 'Linda'
             AND `lname` = 'Smith')) AS RHS ON (LHS.stuid = RHS.stuid))
ORDER BY TIME;",3,15,5,0,5,2,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0
spider/restaurant_1/0019,"filter(input0, ""fname == 'Linda' & lname == 'Smith'""), mutate(input0, 'n_distinct = n_distinct(lname)'), natural_join4(input1, input2, line0, line1), filter(line2, ""lname == 'Smith' | resname != 'Subway'"")","SELECT `resid` AS `count___`
FROM
  (SELECT `LHS`.`resid` AS `resid`,
          `LHS`.`resname` AS `resname`,
          `LHS`.`address` AS `address`,
          `LHS`.`rating` AS `rating`,
          `LHS`.`stuid` AS `stuid`,
          `LHS`.`time` AS `time`,
          `LHS`.`spent` AS `spent`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `RHS`.`n_distinct` AS `n_distinct`
   FROM
     (SELECT `LHS`.`resid` AS `resid`,
             `LHS`.`resname` AS `resname`,
             `LHS`.`address` AS `address`,
             `LHS`.`rating` AS `rating`,
             `LHS`.`stuid` AS `stuid`,
             `LHS`.`time` AS `time`,
             `LHS`.`spent` AS `spent`,
             `RHS`.`lname` AS `lname`,
             `RHS`.`fname` AS `fname`,
             `RHS`.`age` AS `age`,
             `RHS`.`sex` AS `sex`,
             `RHS`.`major` AS `major`,
             `RHS`.`advisor` AS `advisor`,
             `RHS`.`city_code` AS `city_code`
      FROM
        (SELECT `LHS`.`resid` AS `resid`,
                `LHS`.`resname` AS `resname`,
                `LHS`.`address` AS `address`,
                `LHS`.`rating` AS `rating`,
                `RHS`.`stuid` AS `stuid`,
                `RHS`.`time` AS `time`,
                `RHS`.`spent` AS `spent`
         FROM `df_restaurant` AS `LHS`
         INNER JOIN `df_visits_restaurant` AS `RHS` ON (`LHS`.`resid` = `RHS`.`resid`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_student`
         WHERE (`fname` = 'Linda'
                AND `lname` = 'Smith')) AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`)) AS `LHS`
   INNER JOIN
     (SELECT `stuid`,
             `lname`,
             `fname`,
             `age`,
             `sex`,
             `major`,
             `advisor`,
             `city_code`,
             COUNT(DISTINCT `lname`) OVER () AS `n_distinct`
      FROM `df_student`) AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`
                                      AND `LHS`.`lname` = `RHS`.`lname`
                                      AND `LHS`.`fname` = `RHS`.`fname`
                                      AND `LHS`.`age` = `RHS`.`age`
                                      AND `LHS`.`sex` = `RHS`.`sex`
                                      AND `LHS`.`major` = `RHS`.`major`
                                      AND `LHS`.`advisor` = `RHS`.`advisor`
                                      AND `LHS`.`city_code` = `RHS`.`city_code`))
WHERE (`lname` = 'Smith'
       OR `resname` != 'Subway')
ORDER BY count___;",4,20,6,1,6,3,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,1,0,0
spider/restaurant_1/0007,"filter(input0, ""fname == 'Linda'""), filter(line0, ""fname != 'Linda' | lname == 'Smith'"")","SELECT `age`
FROM
  (SELECT *
   FROM `df_student`
   WHERE (`fname` = 'Linda'))
WHERE (`fname` != 'Linda'
       OR `lname` = 'Smith')
ORDER BY age;",2,7,2,0,2,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/restaurant_1/0021,"summarise(input1, 'sumspent = sum(spent)', ""'spent','time'""), cross_join(line0, line0, 'sumspent < sumspent.other | spent.other > sumspent.other'), natural_join3(input0, input1, line1)","SELECT resname,
       spent AS sum_visits_restaurant_spent_
FROM
  (SELECT LHS.resid AS resid,
          LHS.resname AS resname,
          LHS.address AS address,
          LHS.rating AS rating,
          LHS.stuid AS stuid,
          LHS.time AS TIME,
          LHS.spent AS spent,
          RHS.sumspent AS sumspent,
          RHS.spent_other AS spent_other,
          RHS.time_other AS time_other,
          RHS.sumspent_other AS sumspent_other
   FROM
     (SELECT LHS.resid AS resid,
             LHS.resname AS resname,
             LHS.address AS address,
             LHS.rating AS rating,
             RHS.stuid AS stuid,
             RHS.time AS TIME,
             RHS.spent AS spent
      FROM df_restaurant AS LHS
      INNER JOIN df_visits_restaurant AS RHS ON (LHS.resid = RHS.resid)) AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT LHS.spent AS spent,
                LHS.time AS TIME,
                LHS.sumspent AS sumspent,
                RHS.spent AS spent_other,
                RHS.time AS time_other,
                RHS.sumspent AS sumspent_other
         FROM
           (SELECT spent,
                   TIME,
                   SUM(spent) AS sumspent
            FROM df_visits_restaurant
            GROUP BY spent,
                     TIME) AS LHS
         CROSS JOIN
           (SELECT spent,
                   TIME,
                   SUM(spent) AS sumspent
            FROM df_visits_restaurant
            GROUP BY spent,
                     TIME) AS RHS)
      WHERE (sumspent < sumspent_other
             OR spent_other > sumspent_other)) AS RHS ON (LHS.time = RHS.time
                                                          AND LHS.spent = RHS.spent))
ORDER BY resname;",3,25,7,0,7,2,1,0,0,0,1,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0
spider/restaurant_1/0001,"intersect(input0, input0, 'resname')","SELECT resname
FROM
  (SELECT resname
   FROM df_restaurant INTERSECT SELECT resname
   FROM df_restaurant)
ORDER BY resname;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/restaurant_1/0014,"filter(input0, 'major <= 2L | major != 30L'), summarise(line0, 'n = n()', ""'major'""), cross_join(line1, line1, 'n > n.other')","SELECT DISTINCT major,
                n AS count___
FROM
  (SELECT LHS.major AS major,
          LHS.n AS n,
          RHS.major AS major_other,
          RHS.n AS n_other
   FROM
     (SELECT major,
             COUNT() AS n
      FROM df_student
      WHERE (major <= 2
             OR major != 30)
      GROUP BY major) AS LHS
   CROSS JOIN
     (SELECT major,
             COUNT() AS n
      FROM df_student
      WHERE (major <= 2
             OR major != 30)
      GROUP BY major) AS RHS)
WHERE (n > n_other)
ORDER BY major;",3,14,4,1,4,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0
spider/restaurant_1/0009,"filter(input0, 'major >= 600L')","SELECT fname,
       lname
FROM df_student
WHERE (major >= 600)
ORDER BY fname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/restaurant_1/0011,"summarise(input0, 'n = n()', ""'advisor'""), filter(line0, 'advisor <= 1121L | n == 1121L')","SELECT n AS count___
FROM
  (SELECT advisor,
          COUNT() AS n
   FROM df_student
   GROUP BY advisor)
WHERE (advisor <= 1121
       OR n = 1121)
ORDER BY count___;",2,6,2,0,2,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/restaurant_1/0010,"filter(input0, ""fname == 'Linda' & lname == 'Smith'""), filter(line0, ""fname == 'Linda' | lname != 'Smith'"")","SELECT `city_code`
FROM
  (SELECT *
   FROM `df_student`
   WHERE (`fname` = 'Linda'
          AND `lname` = 'Smith'))
WHERE (`fname` = 'Linda'
       OR `lname` != 'Smith')
ORDER BY city_code;",2,7,2,0,2,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/insurance_fnol/0002,"filter(input0, ""policy_type_code == 'Life Insurance'"")","SELECT `customer_phone`
FROM `df_available_policies`
WHERE (`policy_type_code` = 'Life Insurance')
ORDER BY customer_phone;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/insurance_fnol/0008,"summarise(input1, 'sumsettlement_amount = sum(settlement_amount)', ""'settlement_id'""), inner_join(input0, line0, ""'claim_id' = 'settlement_id'"")","SELECT effective_date
FROM
  (SELECT LHS.claim_id AS claim_id,
          LHS.fnol_id AS fnol_id,
          LHS.effective_date AS effective_date,
          RHS.sumsettlement_amount AS sumsettlement_amount
   FROM df_claims AS LHS
   INNER JOIN
     (SELECT settlement_id,
             SUM(settlement_amount) AS sumsettlement_amount
      FROM df_settlements
      GROUP BY settlement_id) AS RHS ON (LHS.claim_id = RHS.settlement_id))
ORDER BY effective_date;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/insurance_fnol/0003,"summarise(input0, 'n = n()', ""'policy_id','policy_type_code'""), limit(line0, 'desc(policy_id)')","SELECT policy_type_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT policy_id,
                policy_type_code,
                COUNT() AS n
         FROM df_available_policies
         GROUP BY policy_id,
                  policy_type_code)
      ORDER BY policy_id DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/insurance_fnol/0013,"intersect(input0, input0, 'service_name')","SELECT service_name
FROM
  (SELECT service_name
   FROM df_services INTERSECT SELECT service_name
   FROM df_services)
ORDER BY service_name;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/insurance_fnol/0006,"mutate(input0, 'sumsettlement_amount = sum(settlement_amount)'), mutate(line0, 'meansettlement_amount = mean(settlement_amount, na.rm = T)')","SELECT DISTINCT sumsettlement_amount AS sum_settlement_amount_,
                AVG(settlement_amount) OVER () AS avg_settlement_amount_
FROM
  (SELECT settlement_id,
          claim_id,
          effective_date,
          settlement_amount,
          SUM(settlement_amount) OVER () AS sumsettlement_amount
   FROM df_settlements)
ORDER BY sum_settlement_amount_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/insurance_fnol/0012,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'customer_id','policy_type_code'""), filter(line1, 'n != 1L')","SELECT DISTINCT policy_type_code
FROM
  (SELECT customer_id,
          policy_type_code,
          COUNT() AS n
   FROM
     (SELECT LHS.customer_id AS customer_id,
             LHS.customer_name AS customer_name,
             LHS.policy_id AS policy_id,
             LHS.policy_type_code AS policy_type_code,
             LHS.customer_phone AS customer_phone,
             RHS.date_opened AS date_opened,
             RHS.date_closed AS date_closed
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.customer_name AS customer_name,
                RHS.policy_id AS policy_id,
                RHS.policy_type_code AS policy_type_code,
                RHS.customer_phone AS customer_phone
         FROM df_customers AS LHS
         CROSS JOIN df_available_policies AS RHS) AS LHS
      INNER JOIN df_customers_policies AS RHS ON (LHS.customer_id = RHS.customer_id
                                                  AND LHS.policy_id = RHS.policy_id))
   GROUP BY customer_id,
            policy_type_code)
WHERE (n != 1)
ORDER BY policy_type_code;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/insurance_fnol/0015,"anti_join(input0, input1, ""'customer_id'"")","SELECT customer_name
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_first_notification_of_loss AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/insurance_fnol/0005,"summarise(input0, 'n = n()', ""'policy_type_code'""), filter(line0, 'n > 4L')","SELECT policy_type_code
FROM
  (SELECT policy_type_code,
          COUNT() AS n
   FROM df_available_policies
   GROUP BY policy_type_code)
WHERE (n > 4)
ORDER BY policy_type_code;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/insurance_fnol/0016,"natural_join3(input0, input1, input2), filter(line0, ""service_name == 'Close a policy' | service_name == 'Upgrade a policy'"")","SELECT `customer_name`
FROM
  (SELECT `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`customer_name` AS `customer_name`,
          `LHS`.`service_id` AS `service_id`,
          `LHS`.`service_name` AS `service_name`,
          `RHS`.`fnol_id` AS `fnol_id`,
          `RHS`.`policy_id` AS `policy_id`
   FROM
     (SELECT `LHS`.`customer_id` AS `customer_id`,
             `LHS`.`customer_name` AS `customer_name`,
             `RHS`.`service_id` AS `service_id`,
             `RHS`.`service_name` AS `service_name`
      FROM `df_customers` AS `LHS`
      CROSS JOIN `df_services` AS `RHS`) AS `LHS`
   INNER JOIN `df_first_notification_of_loss` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`
                                                           AND `LHS`.`service_id` = `RHS`.`service_id`))
WHERE (`service_name` = 'Close a policy'
       OR `service_name` = 'Upgrade a policy')
ORDER BY customer_name;",2,9,3,0,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/insurance_fnol/0020,df_customers,"SELECT customer_id,
       customer_name
FROM df_customers
ORDER BY customer_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/insurance_fnol/0019,"mutate(input0, 'maxsettlement_amount = max(settlement_amount)'), mutate(line0, 'minsettlement_amount = min(settlement_amount)')","SELECT DISTINCT maxsettlement_amount AS max_settlement_amount_,
                MIN(settlement_amount) OVER () AS min_settlement_amount_
FROM
  (SELECT settlement_id,
          claim_id,
          effective_date,
          settlement_amount,
          MAX(settlement_amount) OVER () AS maxsettlement_amount
   FROM df_settlements)
ORDER BY max_settlement_amount_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/insurance_fnol/0007,"left_join(input0, input1), summarise(line0, 'n = n()', ""'service_id','service_name'""), filter(line1, 'n > 2L')","SELECT service_name
FROM
  (SELECT service_id,
          service_name,
          COUNT() AS n
   FROM
     (SELECT LHS.service_id AS service_id,
             LHS.service_name AS service_name,
             RHS.fnol_id AS fnol_id,
             RHS.customer_id AS customer_id,
             RHS.policy_id AS policy_id
      FROM df_services AS LHS
      LEFT JOIN df_first_notification_of_loss AS RHS ON (LHS.service_id = RHS.service_id))
   GROUP BY service_id,
            service_name)
WHERE (n > 2)
ORDER BY service_name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/insurance_fnol/0001,"intersect(input0, input0, 'customer_phone')","SELECT customer_phone
FROM
  (SELECT customer_phone
   FROM df_available_policies INTERSECT SELECT customer_phone
   FROM df_available_policies)
ORDER BY customer_phone;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/insurance_fnol/0014,"summarise(input0, 'n = n()', ""'service_id','service_name'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT service_id,
             service_name,
             COUNT() AS n
      FROM df_services
      GROUP BY service_id,
               service_name))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/insurance_fnol/0009,"filter(input0, ""customer_name == 'Dayana Robel'""), summarise(input1, 'n = n()', ""'customer_id'""), left_join(line0, line1)","SELECT `n` AS `count___`
FROM
  (SELECT `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`customer_name` AS `customer_name`,
          `RHS`.`n` AS `n`
   FROM
     (SELECT *
      FROM `df_customers`
      WHERE (`customer_name` = 'Dayana Robel')) AS LHS
   LEFT JOIN
     (SELECT customer_id,
             COUNT() AS n
      FROM df_customers_policies
      GROUP BY customer_id) AS RHS ON (LHS.customer_id = RHS.customer_id))
ORDER BY count___;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/insurance_fnol/0011,"filter(input0, ""customer_name == 'Dayana Robel'""), natural_join3(input1, input2, line0)","SELECT DISTINCT `policy_type_code`
FROM
  (SELECT `LHS`.`policy_id` AS `policy_id`,
          `LHS`.`policy_type_code` AS `policy_type_code`,
          `LHS`.`customer_phone` AS `customer_phone`,
          `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`date_opened` AS `date_opened`,
          `LHS`.`date_closed` AS `date_closed`,
          `RHS`.`customer_name` AS `customer_name`
   FROM
     (SELECT `LHS`.`policy_id` AS `policy_id`,
             `LHS`.`policy_type_code` AS `policy_type_code`,
             `LHS`.`customer_phone` AS `customer_phone`,
             `RHS`.`customer_id` AS `customer_id`,
             `RHS`.`date_opened` AS `date_opened`,
             `RHS`.`date_closed` AS `date_closed`
      FROM `df_available_policies` AS `LHS`
      INNER JOIN `df_customers_policies` AS `RHS` ON (`LHS`.`policy_id` = `RHS`.`policy_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_customers`
      WHERE (`customer_name` = 'Dayana Robel')) AS RHS ON (LHS.customer_id = RHS.customer_id))
ORDER BY policy_type_code;",2,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/insurance_fnol/0010,"inner_join(input1, input0, ""'customer_id'""), mutate(line0, 'n = n()'), limit(line1, 'desc(date_closed)')","SELECT customer_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT customer_id,
                policy_id,
                date_opened,
                date_closed,
                customer_name,
                COUNT(*) OVER () AS n
         FROM
           (SELECT LHS.customer_id AS customer_id,
                   LHS.policy_id AS policy_id,
                   LHS.date_opened AS date_opened,
                   LHS.date_closed AS date_closed,
                   RHS.customer_name AS customer_name
            FROM df_customers_policies AS LHS
            INNER JOIN df_customers AS RHS ON (LHS.customer_id = RHS.customer_id)))
      ORDER BY date_closed DESC)
   LIMIT 1);",2,14,5,0,5,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/icfp_1/0033,"intersect(input0, input0, 'fname'), inner_join(line0, input0, ""'fname'"")","SELECT fname,
       lname
FROM
  (SELECT LHS.fname AS fname,
          RHS.authid AS authid,
          RHS.lname AS lname
   FROM
     (SELECT fname
      FROM df_authors INTERSECT SELECT fname
      FROM df_authors) AS LHS
   INNER JOIN df_authors AS RHS ON (LHS.fname = RHS.fname))
ORDER BY fname;",2,10,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0
spider/icfp_1/0002,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_inst)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/icfp_1/0017,"filter(input0, ""fname == 'Olin' & lname == 'Shivers'""), natural_join3(input1, input2, line0)","SELECT `title`
FROM
  (SELECT `LHS`.`paperid` AS `paperid`,
          `LHS`.`title` AS `title`,
          `LHS`.`authid` AS `authid`,
          `LHS`.`instid` AS `instid`,
          `LHS`.`authorder` AS `authorder`,
          `RHS`.`lname` AS `lname`,
          `RHS`.`fname` AS `fname`
   FROM
     (SELECT `LHS`.`paperid` AS `paperid`,
             `LHS`.`title` AS `title`,
             `RHS`.`authid` AS `authid`,
             `RHS`.`instid` AS `instid`,
             `RHS`.`authorder` AS `authorder`
      FROM `df_papers` AS `LHS`
      INNER JOIN `df_authorship` AS `RHS` ON (`LHS`.`paperid` = `RHS`.`paperid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_authors`
      WHERE (`fname` = 'Olin'
             AND `lname` = 'Shivers')) AS RHS ON (LHS.authid = RHS.authid))
ORDER BY title;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/icfp_1/0008,"filter(input1, ""fname == 'Katsuhiro' & lname == 'Ueno'""), natural_join3(input0, input2, line0)","SELECT `name`
FROM
  (SELECT `LHS`.`instid` AS `instid`,
          `LHS`.`name` AS `name`,
          `LHS`.`country` AS `country`,
          `LHS`.`authid` AS `authid`,
          `LHS`.`paperid` AS `paperid`,
          `LHS`.`authorder` AS `authorder`,
          `RHS`.`lname` AS `lname`,
          `RHS`.`fname` AS `fname`
   FROM
     (SELECT `LHS`.`instid` AS `instid`,
             `LHS`.`name` AS `name`,
             `LHS`.`country` AS `country`,
             `RHS`.`authid` AS `authid`,
             `RHS`.`paperid` AS `paperid`,
             `RHS`.`authorder` AS `authorder`
      FROM `df_inst` AS `LHS`
      INNER JOIN `df_authorship` AS `RHS` ON (`LHS`.`instid` = `RHS`.`instid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_authors`
      WHERE (`fname` = 'Katsuhiro'
             AND `lname` = 'Ueno')) AS RHS ON (LHS.authid = RHS.authid))
ORDER BY name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/icfp_1/0003,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_papers)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/icfp_1/0022,"natural_join(input0, input1), mutate(line0, 'n = n()'), inner_join(input2, line1, ""'instid' = 'instid','authid' = 'n'"")","SELECT DISTINCT country
FROM
  (SELECT LHS.authid AS authid,
          LHS.instid AS instid,
          LHS.paperid AS paperid,
          LHS.authorder AS authorder,
          RHS.name AS name,
          RHS.country AS country,
          RHS.paperid AS paperid_other,
          RHS.title AS title
   FROM df_authorship AS LHS
   INNER JOIN
     (SELECT instid,
             name,
             country,
             paperid,
             title,
             COUNT(*) OVER () AS n
      FROM
        (SELECT LHS.instid AS instid,
                LHS.name AS name,
                LHS.country AS country,
                RHS.paperid AS paperid,
                RHS.title AS title
         FROM df_inst AS LHS
         CROSS JOIN df_papers AS RHS)) AS RHS ON (LHS.instid = RHS.instid
                                                  AND LHS.authid = RHS.n))
ORDER BY country;",3,11,4,1,4,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0
spider/icfp_1/0030,"filter(input0, ""fname == 'Amal'""), intersect(line0, input0, 'lname')","SELECT `lname`
FROM
  (SELECT `lname`
   FROM `df_authors`
   WHERE (`fname` = 'Amal') INTERSECT
     SELECT lname
     FROM df_authors)
ORDER BY lname;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/icfp_1/0013,"filter(input0, ""name == 'Indiana University'""), natural_join4(input0, input1, input2, line0)","SELECT `title`
FROM
  (SELECT `LHS`.`instid` AS `instid`,
          `LHS`.`name` AS `name`,
          `LHS`.`country` AS `country`,
          `LHS`.`paperid` AS `paperid`,
          `LHS`.`title` AS `title`,
          `LHS`.`authid` AS `authid`,
          `LHS`.`authorder` AS `authorder`
   FROM
     (SELECT `LHS`.`instid` AS `instid`,
             `LHS`.`name` AS `name`,
             `LHS`.`country` AS `country`,
             `LHS`.`paperid` AS `paperid`,
             `LHS`.`title` AS `title`,
             `RHS`.`authid` AS `authid`,
             `RHS`.`authorder` AS `authorder`
      FROM
        (SELECT `LHS`.`instid` AS `instid`,
                `LHS`.`name` AS `name`,
                `LHS`.`country` AS `country`,
                `RHS`.`paperid` AS `paperid`,
                `RHS`.`title` AS `title`
         FROM `df_inst` AS `LHS`
         CROSS JOIN `df_papers` AS `RHS`) AS `LHS`
      INNER JOIN `df_authorship` AS `RHS` ON (`LHS`.`instid` = `RHS`.`instid`
                                              AND `LHS`.`paperid` = `RHS`.`paperid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_inst`
      WHERE (`name` = 'Indiana University')) AS RHS ON (LHS.instid = RHS.instid
                                                        AND LHS.name = RHS.name
                                                        AND LHS.country = RHS.country))
ORDER BY title;",2,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
spider/icfp_1/0006,"filter(input0, ""fname != 'Atsushi' | lname == 'Ohori'""), natural_join4(input0, input1, input2, line0), summarise(line1, 'n_distinct = n_distinct(lname)', ""'authid','authorder'"")","SELECT DISTINCT `n_distinct` AS `count___`
FROM
  (SELECT `authid`,
          `authorder`,
          COUNT(DISTINCT `lname`) AS `n_distinct`
   FROM
     (SELECT `LHS`.`authid` AS `authid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`paperid` AS `paperid`,
             `LHS`.`title` AS `title`,
             `LHS`.`instid` AS `instid`,
             `LHS`.`authorder` AS `authorder`
      FROM
        (SELECT `LHS`.`authid` AS `authid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`paperid` AS `paperid`,
                `LHS`.`title` AS `title`,
                `RHS`.`instid` AS `instid`,
                `RHS`.`authorder` AS `authorder`
         FROM
           (SELECT `LHS`.`authid` AS `authid`,
                   `LHS`.`lname` AS `lname`,
                   `LHS`.`fname` AS `fname`,
                   `RHS`.`paperid` AS `paperid`,
                   `RHS`.`title` AS `title`
            FROM `df_authors` AS `LHS`
            CROSS JOIN `df_papers` AS `RHS`) AS `LHS`
         INNER JOIN `df_authorship` AS `RHS` ON (`LHS`.`authid` = `RHS`.`authid`
                                                 AND `LHS`.`paperid` = `RHS`.`paperid`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_authors`
         WHERE (`fname` != 'Atsushi'
                OR `lname` = 'Ohori')) AS RHS ON (LHS.authid = RHS.authid
                                                  AND LHS.lname = RHS.lname
                                                  AND LHS.fname = RHS.fname))
   GROUP BY authid,
            authorder)
ORDER BY count___;",3,18,6,2,6,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
spider/icfp_1/0004,"filter(input0, ""fname == 'Jeremy' & lname == 'Gibbons'""), natural_join4(input0, input1, input2, line0)","SELECT `title`
FROM
  (SELECT `LHS`.`authid` AS `authid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`paperid` AS `paperid`,
          `LHS`.`title` AS `title`,
          `LHS`.`instid` AS `instid`,
          `LHS`.`authorder` AS `authorder`
   FROM
     (SELECT `LHS`.`authid` AS `authid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`paperid` AS `paperid`,
             `LHS`.`title` AS `title`,
             `RHS`.`instid` AS `instid`,
             `RHS`.`authorder` AS `authorder`
      FROM
        (SELECT `LHS`.`authid` AS `authid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `RHS`.`paperid` AS `paperid`,
                `RHS`.`title` AS `title`
         FROM `df_authors` AS `LHS`
         CROSS JOIN `df_papers` AS `RHS`) AS `LHS`
      INNER JOIN `df_authorship` AS `RHS` ON (`LHS`.`authid` = `RHS`.`authid`
                                              AND `LHS`.`paperid` = `RHS`.`paperid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_authors`
      WHERE (`fname` = 'Jeremy'
             AND `lname` = 'Gibbons')) AS RHS ON (LHS.authid = RHS.authid
                                                  AND LHS.lname = RHS.lname
                                                  AND LHS.fname = RHS.fname))
ORDER BY title;",2,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
spider/icfp_1/0015,"natural_join(input0, input2), inner_join(input1, line0, ""'paperid' = 'authid','title' = 'country'""), summarise(line1, 'n_distinct = n_distinct(name)', '')","SELECT n_distinct AS count_distinct_t1_title_
FROM
  (SELECT COUNT(DISTINCT name) AS n_distinct
   FROM
     (SELECT paperid,
             title,
             instid,
             name,
             paperid_other,
             authorder,
             authid,
             title AS country
      FROM
        (SELECT paperid,
                title,
                instid,
                name,
                paperid_other,
                authorder,
                paperid AS authid
         FROM
           (SELECT LHS.paperid AS paperid,
                   LHS.title AS title,
                   RHS.instid AS instid,
                   RHS.name AS name,
                   RHS.paperid AS paperid_other,
                   RHS.authorder AS authorder
            FROM df_papers AS LHS
            INNER JOIN
              (SELECT LHS.instid AS instid,
                      LHS.name AS name,
                      LHS.country AS country,
                      RHS.authid AS authid,
                      RHS.paperid AS paperid,
                      RHS.authorder AS authorder
               FROM df_inst AS LHS
               INNER JOIN df_authorship AS RHS ON (LHS.instid = RHS.instid)) AS RHS ON (LHS.paperid = RHS.authid
                                                                                        AND LHS.title = RHS.country)))))
ORDER BY count_distinct_t1_title_;",3,15,6,1,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0
spider/icfp_1/0005,"filter(input0, ""fname == 'Aaron' & lname == 'Turon'""), natural_join3(input1, input2, line0)","SELECT `title`
FROM
  (SELECT `LHS`.`paperid` AS `paperid`,
          `LHS`.`title` AS `title`,
          `LHS`.`authid` AS `authid`,
          `LHS`.`instid` AS `instid`,
          `LHS`.`authorder` AS `authorder`,
          `RHS`.`lname` AS `lname`,
          `RHS`.`fname` AS `fname`
   FROM
     (SELECT `LHS`.`paperid` AS `paperid`,
             `LHS`.`title` AS `title`,
             `RHS`.`authid` AS `authid`,
             `RHS`.`instid` AS `instid`,
             `RHS`.`authorder` AS `authorder`
      FROM `df_papers` AS `LHS`
      INNER JOIN `df_authorship` AS `RHS` ON (`LHS`.`paperid` = `RHS`.`paperid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_authors`
      WHERE (`fname` = 'Aaron'
             AND `lname` = 'Turon')) AS RHS ON (LHS.authid = RHS.authid))
ORDER BY title;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/icfp_1/0016,"filter(input0, ""name == 'University of Pennsylvania'""), natural_join4(input0, input1, input2, line0), mutate(line1, 'n_distinct = n_distinct(name)')","SELECT DISTINCT COUNT(DISTINCT `name`) OVER () AS `count_distinct_t1_title_`
FROM
  (SELECT `LHS`.`instid` AS `instid`,
          `LHS`.`name` AS `name`,
          `LHS`.`country` AS `country`,
          `LHS`.`paperid` AS `paperid`,
          `LHS`.`title` AS `title`,
          `LHS`.`authid` AS `authid`,
          `LHS`.`authorder` AS `authorder`
   FROM
     (SELECT `LHS`.`instid` AS `instid`,
             `LHS`.`name` AS `name`,
             `LHS`.`country` AS `country`,
             `LHS`.`paperid` AS `paperid`,
             `LHS`.`title` AS `title`,
             `RHS`.`authid` AS `authid`,
             `RHS`.`authorder` AS `authorder`
      FROM
        (SELECT `LHS`.`instid` AS `instid`,
                `LHS`.`name` AS `name`,
                `LHS`.`country` AS `country`,
                `RHS`.`paperid` AS `paperid`,
                `RHS`.`title` AS `title`
         FROM `df_inst` AS `LHS`
         CROSS JOIN `df_papers` AS `RHS`) AS `LHS`
      INNER JOIN `df_authorship` AS `RHS` ON (`LHS`.`instid` = `RHS`.`instid`
                                              AND `LHS`.`paperid` = `RHS`.`paperid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_inst`
      WHERE (`name` = 'University of Pennsylvania')) AS RHS ON (LHS.instid = RHS.instid
                                                                AND LHS.name = RHS.name
                                                                AND LHS.country = RHS.country))
ORDER BY count_distinct_t1_title_;",3,16,5,2,5,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0
spider/icfp_1/0032,df_authors,"SELECT lname
FROM df_authors
ORDER BY lname;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/icfp_1/0018,"filter(input0, ""fname == 'Stephanie' | lname == 'Weirich'""), natural_join4(input0, input1, input2, line0)","SELECT `title`
FROM
  (SELECT `LHS`.`authid` AS `authid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`paperid` AS `paperid`,
          `LHS`.`title` AS `title`,
          `LHS`.`instid` AS `instid`,
          `LHS`.`authorder` AS `authorder`
   FROM
     (SELECT `LHS`.`authid` AS `authid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`paperid` AS `paperid`,
             `LHS`.`title` AS `title`,
             `RHS`.`instid` AS `instid`,
             `RHS`.`authorder` AS `authorder`
      FROM
        (SELECT `LHS`.`authid` AS `authid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `RHS`.`paperid` AS `paperid`,
                `RHS`.`title` AS `title`
         FROM `df_authors` AS `LHS`
         CROSS JOIN `df_papers` AS `RHS`) AS `LHS`
      INNER JOIN `df_authorship` AS `RHS` ON (`LHS`.`authid` = `RHS`.`authid`
                                              AND `LHS`.`paperid` = `RHS`.`paperid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_authors`
      WHERE (`fname` = 'Stephanie'
             OR `lname` = 'Weirich')) AS RHS ON (LHS.authid = RHS.authid
                                                 AND LHS.lname = RHS.lname
                                                 AND LHS.fname = RHS.fname))
ORDER BY title;",2,14,5,0,5,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
spider/icfp_1/0020,"natural_join4(input0, input1, input2, input3), filter(line0, ""country == 'Japan' & lname == 'Ohori'""), natural_join(input0, line1)","SELECT `title`
FROM
  (SELECT `LHS`.`instid` AS `instid`,
          `LHS`.`name` AS `name`,
          `LHS`.`country` AS `country`,
          `RHS`.`authid` AS `authid`,
          `RHS`.`lname` AS `lname`,
          `RHS`.`fname` AS `fname`,
          `RHS`.`paperid` AS `paperid`,
          `RHS`.`title` AS `title`,
          `RHS`.`authorder` AS `authorder`
   FROM `df_inst` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM
        (SELECT `LHS`.`instid` AS `instid`,
                `LHS`.`name` AS `name`,
                `LHS`.`country` AS `country`,
                `LHS`.`authid` AS `authid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`paperid` AS `paperid`,
                `LHS`.`title` AS `title`,
                `RHS`.`authorder` AS `authorder`
         FROM
           (SELECT `LHS`.`instid` AS `instid`,
                   `LHS`.`name` AS `name`,
                   `LHS`.`country` AS `country`,
                   `LHS`.`authid` AS `authid`,
                   `LHS`.`lname` AS `lname`,
                   `LHS`.`fname` AS `fname`,
                   `RHS`.`paperid` AS `paperid`,
                   `RHS`.`title` AS `title`
            FROM
              (SELECT `LHS`.`instid` AS `instid`,
                      `LHS`.`name` AS `name`,
                      `LHS`.`country` AS `country`,
                      `RHS`.`authid` AS `authid`,
                      `RHS`.`lname` AS `lname`,
                      `RHS`.`fname` AS `fname`
               FROM `df_inst` AS `LHS`
               CROSS JOIN `df_authors` AS `RHS`) AS `LHS`
            CROSS JOIN `df_papers` AS `RHS`) AS `LHS`
         INNER JOIN `df_authorship` AS `RHS` ON (`LHS`.`instid` = `RHS`.`instid`
                                                 AND `LHS`.`authid` = `RHS`.`authid`
                                                 AND `LHS`.`paperid` = `RHS`.`paperid`))
      WHERE (`country` = 'Japan'
             AND `lname` = 'Ohori')) AS RHS ON (LHS.instid = RHS.instid
                                                AND LHS.name = RHS.name
                                                AND LHS.country = RHS.country))
ORDER BY title;",3,15,6,0,6,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0
spider/icfp_1/0019,"natural_join4(input0, input1, input2, input3), filter(line0, 'authorder <= 2L'), filter(line1, ""country == 'USA' & lname == 'Turon'"")","SELECT `title`
FROM
  (SELECT *
   FROM
     (SELECT `LHS`.`instid` AS `instid`,
             `LHS`.`name` AS `name`,
             `LHS`.`country` AS `country`,
             `LHS`.`authid` AS `authid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`paperid` AS `paperid`,
             `LHS`.`title` AS `title`,
             `RHS`.`authorder` AS `authorder`
      FROM
        (SELECT `LHS`.`instid` AS `instid`,
                `LHS`.`name` AS `name`,
                `LHS`.`country` AS `country`,
                `LHS`.`authid` AS `authid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `RHS`.`paperid` AS `paperid`,
                `RHS`.`title` AS `title`
         FROM
           (SELECT `LHS`.`instid` AS `instid`,
                   `LHS`.`name` AS `name`,
                   `LHS`.`country` AS `country`,
                   `RHS`.`authid` AS `authid`,
                   `RHS`.`lname` AS `lname`,
                   `RHS`.`fname` AS `fname`
            FROM `df_inst` AS `LHS`
            CROSS JOIN `df_authors` AS `RHS`) AS `LHS`
         CROSS JOIN `df_papers` AS `RHS`) AS `LHS`
      INNER JOIN `df_authorship` AS `RHS` ON (`LHS`.`instid` = `RHS`.`instid`
                                              AND `LHS`.`authid` = `RHS`.`authid`
                                              AND `LHS`.`paperid` = `RHS`.`paperid`))
   WHERE (`authorder` <= 2))
WHERE (`country` = 'USA'
       AND `lname` = 'Turon')
ORDER BY title;",3,13,5,0,5,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0
spider/icfp_1/0007,"natural_join3(input0, input1, input2), filter(line0, ""fname == 'Matthias' & lname == 'Blume'"")","SELECT `name`
FROM
  (SELECT `LHS`.`instid` AS `instid`,
          `LHS`.`name` AS `name`,
          `LHS`.`country` AS `country`,
          `LHS`.`authid` AS `authid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `RHS`.`paperid` AS `paperid`,
          `RHS`.`authorder` AS `authorder`
   FROM
     (SELECT `LHS`.`instid` AS `instid`,
             `LHS`.`name` AS `name`,
             `LHS`.`country` AS `country`,
             `RHS`.`authid` AS `authid`,
             `RHS`.`lname` AS `lname`,
             `RHS`.`fname` AS `fname`
      FROM `df_inst` AS `LHS`
      CROSS JOIN `df_authors` AS `RHS`) AS `LHS`
   INNER JOIN `df_authorship` AS `RHS` ON (`LHS`.`instid` = `RHS`.`instid`
                                           AND `LHS`.`authid` = `RHS`.`authid`))
WHERE (`fname` = 'Matthias'
       AND `lname` = 'Blume')
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/icfp_1/0021,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'lname'""), cross_join(line1, line1, 'n > n.other')","SELECT DISTINCT lname
FROM
  (SELECT LHS.lname AS lname,
          LHS.n AS n,
          RHS.lname AS lname_other,
          RHS.n AS n_other
   FROM
     (SELECT lname,
             COUNT() AS n
      FROM
        (SELECT LHS.authid AS authid,
                LHS.lname AS lname,
                LHS.fname AS fname,
                LHS.paperid AS paperid,
                LHS.title AS title,
                RHS.instid AS instid,
                RHS.authorder AS authorder
         FROM
           (SELECT LHS.authid AS authid,
                   LHS.lname AS lname,
                   LHS.fname AS fname,
                   RHS.paperid AS paperid,
                   RHS.title AS title
            FROM df_authors AS LHS
            CROSS JOIN df_papers AS RHS) AS LHS
         INNER JOIN df_authorship AS RHS ON (LHS.authid = RHS.authid
                                             AND LHS.paperid = RHS.paperid))
      GROUP BY lname) AS LHS
   CROSS JOIN
     (SELECT lname,
             COUNT() AS n
      FROM
        (SELECT LHS.authid AS authid,
                LHS.lname AS lname,
                LHS.fname AS fname,
                LHS.paperid AS paperid,
                LHS.title AS title,
                RHS.instid AS instid,
                RHS.authorder AS authorder
         FROM
           (SELECT LHS.authid AS authid,
                   LHS.lname AS lname,
                   LHS.fname AS fname,
                   RHS.paperid AS paperid,
                   RHS.title AS title
            FROM df_authors AS LHS
            CROSS JOIN df_papers AS RHS) AS LHS
         INNER JOIN df_authorship AS RHS ON (LHS.authid = RHS.authid
                                             AND LHS.paperid = RHS.paperid))
      GROUP BY lname) AS RHS)
WHERE (n > n_other)
ORDER BY lname;",3,20,8,1,8,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0
spider/icfp_1/0023,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'authorder','name'""), cross_join(line1, line1, 'n < n.other')","SELECT DISTINCT name_other AS name
FROM
  (SELECT LHS.authorder AS authorder,
          LHS.name AS name,
          LHS.n AS n,
          RHS.authorder AS authorder_other,
          RHS.name AS name_other,
          RHS.n AS n_other
   FROM
     (SELECT authorder,
             name,
             COUNT() AS n
      FROM
        (SELECT LHS.instid AS instid,
                LHS.name AS name,
                LHS.country AS country,
                LHS.paperid AS paperid,
                LHS.title AS title,
                RHS.authid AS authid,
                RHS.authorder AS authorder
         FROM
           (SELECT LHS.instid AS instid,
                   LHS.name AS name,
                   LHS.country AS country,
                   RHS.paperid AS paperid,
                   RHS.title AS title
            FROM df_inst AS LHS
            CROSS JOIN df_papers AS RHS) AS LHS
         INNER JOIN df_authorship AS RHS ON (LHS.instid = RHS.instid
                                             AND LHS.paperid = RHS.paperid))
      GROUP BY authorder,
               name) AS LHS
   CROSS JOIN
     (SELECT authorder,
             name,
             COUNT() AS n
      FROM
        (SELECT LHS.instid AS instid,
                LHS.name AS name,
                LHS.country AS country,
                LHS.paperid AS paperid,
                LHS.title AS title,
                RHS.authid AS authid,
                RHS.authorder AS authorder
         FROM
           (SELECT LHS.instid AS instid,
                   LHS.name AS name,
                   LHS.country AS country,
                   RHS.paperid AS paperid,
                   RHS.title AS title
            FROM df_inst AS LHS
            CROSS JOIN df_papers AS RHS) AS LHS
         INNER JOIN df_authorship AS RHS ON (LHS.instid = RHS.instid
                                             AND LHS.paperid = RHS.paperid))
      GROUP BY authorder,
               name) AS RHS)
WHERE (n < n_other)
ORDER BY name;",3,20,8,1,8,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0
spider/icfp_1/0001,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_authors)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/icfp_1/0014,"filter(input0, ""name == 'Google'""), natural_join3(input1, input2, line0)","SELECT `title`
FROM
  (SELECT `LHS`.`paperid` AS `paperid`,
          `LHS`.`title` AS `title`,
          `LHS`.`authid` AS `authid`,
          `LHS`.`instid` AS `instid`,
          `LHS`.`authorder` AS `authorder`,
          `RHS`.`name` AS `name`,
          `RHS`.`country` AS `country`
   FROM
     (SELECT `LHS`.`paperid` AS `paperid`,
             `LHS`.`title` AS `title`,
             `RHS`.`authid` AS `authid`,
             `RHS`.`instid` AS `instid`,
             `RHS`.`authorder` AS `authorder`
      FROM `df_papers` AS `LHS`
      INNER JOIN `df_authorship` AS `RHS` ON (`LHS`.`paperid` = `RHS`.`paperid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_inst`
      WHERE (`name` = 'Google')) AS RHS ON (LHS.instid = RHS.instid))
ORDER BY title;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/icfp_1/0009,"filter(input0, ""name == 'University of Oxford'""), natural_join3(input1, input2, line0)","SELECT DISTINCT `fname`,
                `lname`
FROM
  (SELECT `LHS`.`authid` AS `authid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`instid` AS `instid`,
          `LHS`.`paperid` AS `paperid`,
          `LHS`.`authorder` AS `authorder`,
          `RHS`.`name` AS `name`,
          `RHS`.`country` AS `country`
   FROM
     (SELECT `LHS`.`authid` AS `authid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `RHS`.`instid` AS `instid`,
             `RHS`.`paperid` AS `paperid`,
             `RHS`.`authorder` AS `authorder`
      FROM `df_authors` AS `LHS`
      INNER JOIN `df_authorship` AS `RHS` ON (`LHS`.`authid` = `RHS`.`authid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_inst`
      WHERE (`name` = 'University of Oxford')) AS RHS ON (LHS.instid = RHS.instid))
ORDER BY fname;",2,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/icfp_1/0011,"natural_join3(input0, input1, input2), filter(line0, ""title == 'Binders Unbound'"")","SELECT `lname`
FROM
  (SELECT `LHS`.`authid` AS `authid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`paperid` AS `paperid`,
          `LHS`.`title` AS `title`,
          `RHS`.`instid` AS `instid`,
          `RHS`.`authorder` AS `authorder`
   FROM
     (SELECT `LHS`.`authid` AS `authid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `RHS`.`paperid` AS `paperid`,
             `RHS`.`title` AS `title`
      FROM `df_authors` AS `LHS`
      CROSS JOIN `df_papers` AS `RHS`) AS `LHS`
   INNER JOIN `df_authorship` AS `RHS` ON (`LHS`.`authid` = `RHS`.`authid`
                                           AND `LHS`.`paperid` = `RHS`.`paperid`))
WHERE (`title` = 'Binders Unbound')
ORDER BY lname;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/icfp_1/0029,"filter(input0, ""lname == 'Ueno'"")","SELECT `fname`
FROM `df_authors`
WHERE (`lname` = 'Ueno')
ORDER BY fname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/icfp_1/0010,"filter(input0, ""name == 'Google'""), natural_join3(input1, input2, line0)","SELECT `fname`,
       `lname`
FROM
  (SELECT `LHS`.`authid` AS `authid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`instid` AS `instid`,
          `LHS`.`paperid` AS `paperid`,
          `LHS`.`authorder` AS `authorder`,
          `RHS`.`name` AS `name`,
          `RHS`.`country` AS `country`
   FROM
     (SELECT `LHS`.`authid` AS `authid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `RHS`.`instid` AS `instid`,
             `RHS`.`paperid` AS `paperid`,
             `RHS`.`authorder` AS `authorder`
      FROM `df_authors` AS `LHS`
      INNER JOIN `df_authorship` AS `RHS` ON (`LHS`.`authid` = `RHS`.`authid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_inst`
      WHERE (`name` = 'Google')) AS RHS ON (LHS.instid = RHS.instid))
ORDER BY fname;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/icfp_1/0028,"mutate(input1, 'authorder = max(authorder)'), natural_join3(input0, input1, line0)","SELECT title
FROM
  (SELECT LHS.paperid AS paperid,
          LHS.title AS title,
          LHS.authid AS authid,
          LHS.instid AS instid,
          LHS.authorder AS authorder
   FROM
     (SELECT LHS.paperid AS paperid,
             LHS.title AS title,
             RHS.authid AS authid,
             RHS.instid AS instid,
             RHS.authorder AS authorder
      FROM df_papers AS LHS
      INNER JOIN df_authorship AS RHS ON (LHS.paperid = RHS.paperid)) AS LHS
   INNER JOIN
     (SELECT authid,
             instid,
             paperid,
             MAX(authorder) OVER () AS authorder
      FROM df_authorship) AS RHS ON (LHS.paperid = RHS.paperid
                                     AND LHS.authid = RHS.authid
                                     AND LHS.instid = RHS.instid
                                     AND LHS.authorder = RHS.authorder))
ORDER BY title;",2,11,4,0,4,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
spider/icfp_1/0031,df_authors,"SELECT fname
FROM df_authors
ORDER BY fname;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/climbing/0002,df_climber,"SELECT name
FROM df_climber
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/climbing/0017,"anti_join(input0, input1, ""'mountain_id'"")","SELECT name
FROM
  (SELECT *
   FROM df_mountain AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_climber AS RHS
        WHERE (LHS.mountain_id = RHS.mountain_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/climbing/0008,"limit(input0, 'mountain_id')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_mountain
      ORDER BY mountain_id)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/climbing/0003,"filter(input0, ""country != 'Switzerland'"")","SELECT `name`
FROM `df_climber`
WHERE (`country` != 'Switzerland')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/climbing/0013,"inner_join(input1, input0, ""'mountain_id'""), filter(line0, ""country == 'West Germany'"")","SELECT DISTINCT `name_other` AS `name`
FROM
  (SELECT `LHS`.`climber_id` AS `climber_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`country` AS `country`,
          `LHS`.`time` AS `time`,
          `LHS`.`points` AS `points`,
          `LHS`.`mountain_id` AS `mountain_id`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`height` AS `height`,
          `RHS`.`prominence` AS `prominence`,
          `RHS`.`range` AS `range`,
          `RHS`.`country` AS `country_other`
   FROM `df_climber` AS `LHS`
   INNER JOIN `df_mountain` AS `RHS` ON (`LHS`.`mountain_id` = `RHS`.`mountain_id`))
WHERE (`country` = 'West Germany')
ORDER BY name;",2,7,2,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/climbing/0006,df_mountain,"SELECT name
FROM df_mountain
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/climbing/0004,"filter(input0, ""country == 'United Kingdom'""), summarise(line0, 'points = max(points)', '')","SELECT `points` AS `max_points_`
FROM
  (SELECT MAX(`points`) AS `points`
   FROM
     (SELECT *
      FROM `df_climber`
      WHERE (`country` = 'United Kingdom')))
ORDER BY max_points_;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/climbing/0012,"anti_join(input0, input1, ""'mountain_id','name'""), limit(line0, 'mountain_id')","SELECT height
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM df_mountain AS LHS
         WHERE NOT EXISTS
             (SELECT 1
              FROM df_climber AS RHS
              WHERE (LHS.mountain_id = RHS.mountain_id
                     AND LHS.name = RHS.name) ))
      ORDER BY mountain_id)
   LIMIT 1);",1,15,5,0,5,0,2,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/climbing/0015,"summarise(input0, 'n = n()', ""'country'""), semi_join(line0, input0)","SELECT country,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT country,
             COUNT() AS n
      FROM df_climber
      GROUP BY country) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_climber AS RHS
        WHERE (LHS.country = RHS.country) ))
ORDER BY country;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/climbing/0005,"mutate(input0, 'n_distinct = n_distinct(country)')","SELECT DISTINCT COUNT(DISTINCT country) OVER () AS count_distinct_country_
FROM df_climber
ORDER BY count_distinct_country_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/climbing/0016,"summarise(input0, 'n = n()', ""'country'""), filter(line0, 'n > 1L'), mutate(line1, 'n = n()')","SELECT country
FROM
  (SELECT country,
          COUNT() AS n
   FROM df_mountain
   GROUP BY country)
WHERE (n > 1)
ORDER BY country;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/climbing/0018,"filter(input0, 'height > 5600 & height != 5200'), intersect(input0, line0, 'country')","SELECT country
FROM
  (SELECT country
   FROM df_mountain INTERSECT SELECT country
   FROM df_mountain
   WHERE (height > 5600.0
          AND height != 5200.0))
ORDER BY country;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/climbing/0020,"filter(input0, 'height > 5000 | prominence == 1000')","SELECT name
FROM df_mountain
WHERE (height > 5000.0
       OR prominence = 1000.0)
ORDER BY name;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/climbing/0019,"summarise(input0, 'n = n()', ""'height','range'""), limit(line0, 'n')","SELECT RANGE
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT height,
                RANGE,
                COUNT() AS n
         FROM df_mountain
         GROUP BY height,
                  RANGE)
      ORDER BY n)
   LIMIT 1);",1,12,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/climbing/0007,"filter(input0, 'height >= 5000')","SELECT country
FROM df_mountain
WHERE (height >= 5000.0)
ORDER BY country;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/climbing/0001,"summarise(input0, 'n = n()', ""'points','time'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT points,
          TIME,
          COUNT() AS n
   FROM df_climber
   GROUP BY points,
            TIME)
ORDER BY count___;",2,8,2,1,2,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/climbing/0014,"filter(input0, ""country != 'Uganda'""), anti_join(input1, line0, ""'mountain_id'""), filter(line1, ""country != 'Uganda'"")","SELECT `time`
FROM
  (SELECT *
   FROM `df_climber` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_mountain`
           WHERE (`country` != 'Uganda')) AS `RHS`
        WHERE (`LHS`.`mountain_id` = `RHS`.`mountain_id`) ))
WHERE (`country` != 'Uganda')
ORDER BY TIME;",3,15,4,0,4,0,4,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0
spider/climbing/0009,"intersect(input0, input0, 'range')","SELECT RANGE
FROM
  (SELECT RANGE
   FROM df_mountain INTERSECT SELECT RANGE
   FROM df_mountain)
ORDER BY RANGE;",1,11,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/climbing/0011,"inner_join(input1, input0, ""'mountain_id'"")","SELECT name,
       height
FROM
  (SELECT LHS.climber_id AS climber_id,
          LHS.name AS name,
          LHS.country AS country,
          LHS.time AS TIME,
          LHS.points AS points,
          LHS.mountain_id AS mountain_id,
          RHS.name AS name_other,
          RHS.height AS height,
          RHS.prominence AS prominence,
          RHS.range AS RANGE,
          RHS.country AS country_other
   FROM df_climber AS LHS
   INNER JOIN df_mountain AS RHS ON (LHS.mountain_id = RHS.mountain_id))
ORDER BY name;",1,7,2,0,2,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/climbing/0010,"inner_join(input1, input0, ""'mountain_id'"")","SELECT name AS name___1,
       name_other AS name___2
FROM
  (SELECT LHS.climber_id AS climber_id,
          LHS.name AS name,
          LHS.country AS country,
          LHS.time AS TIME,
          LHS.points AS points,
          LHS.mountain_id AS mountain_id,
          RHS.name AS name_other,
          RHS.height AS height,
          RHS.prominence AS prominence,
          RHS.range AS RANGE,
          RHS.country AS country_other
   FROM df_climber AS LHS
   INNER JOIN df_mountain AS RHS ON (LHS.mountain_id = RHS.mountain_id))
ORDER BY name___1;",1,7,2,0,2,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/customers_and_addresses/0042,"natural_join3(input0, input2, input3), filter(line0, ""product_details == 'Latte'""), anti_join(input1, line1, '')","SELECT `customer_name`
FROM
  (SELECT *
   FROM `df_customers` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT `LHS`.`product_id` AS `product_id`,
                     `LHS`.`product_details` AS `product_details`,
                     `LHS`.`order_id` AS `order_id`,
                     `LHS`.`customer_id` AS `customer_id`,
                     `LHS`.`order_status` AS `order_status`,
                     `LHS`.`order_date` AS `order_date`,
                     `LHS`.`order_details` AS `order_details`,
                     `RHS`.`order_quantity` AS `order_quantity`
              FROM
                (SELECT `LHS`.`product_id` AS `product_id`,
                        `LHS`.`product_details` AS `product_details`,
                        `RHS`.`order_id` AS `order_id`,
                        `RHS`.`customer_id` AS `customer_id`,
                        `RHS`.`order_status` AS `order_status`,
                        `RHS`.`order_date` AS `order_date`,
                        `RHS`.`order_details` AS `order_details`
                 FROM `df_products` AS `LHS`
                 CROSS JOIN `df_customer_orders` AS `RHS`) AS `LHS`
              INNER JOIN `df_order_items` AS `RHS` ON (`LHS`.`product_id` = `RHS`.`product_id`
                                                       AND `LHS`.`order_id` = `RHS`.`order_id`))
           WHERE (`product_details` = 'Latte')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_name;",3,18,6,0,6,1,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0
spider/customers_and_addresses/0033,"filter(input0, ""order_details == 'Second time'""), summarise(line0, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_customer_orders`
      WHERE (`order_details` = 'Second time')))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/customers_and_addresses/0037,"natural_join(input0, input1), limit(line0, 'desc(order_date)')","SELECT customer_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.payment_method AS payment_method,
                LHS.customer_name AS customer_name,
                LHS.date_became_customer AS date_became_customer,
                LHS.other_customer_details AS other_customer_details,
                RHS.order_id AS order_id,
                RHS.order_status AS order_status,
                RHS.order_date AS order_date,
                RHS.order_details AS order_details
         FROM df_customers AS LHS
         INNER JOIN df_customer_orders AS RHS ON (LHS.customer_id = RHS.customer_id))
      ORDER BY order_date DESC)
   LIMIT 1);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/customers_and_addresses/0002,"summarise(input0, 'n = n()', ""'customer_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT customer_id,
          COUNT() AS n
   FROM df_customers
   GROUP BY customer_id)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/customers_and_addresses/0017,df_addresses,"SELECT city
FROM df_addresses
ORDER BY city;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_and_addresses/0008,"intersect(input0, input0, 'payment_method')","SELECT payment_method
FROM
  (SELECT payment_method
   FROM df_customers INTERSECT SELECT payment_method
   FROM df_customers)
ORDER BY payment_method;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/customers_and_addresses/0039,"natural_join(input0, input1), limit(line0, 'desc(order_quantity)')","SELECT product_details,
       product_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.product_id AS product_id,
                LHS.product_details AS product_details,
                RHS.order_id AS order_id,
                RHS.order_quantity AS order_quantity
         FROM df_products AS LHS
         INNER JOIN df_order_items AS RHS ON (LHS.product_id = RHS.product_id))
      ORDER BY order_quantity DESC)
   LIMIT 1);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/customers_and_addresses/0038,"inner_join(input0, input1, ""'product_id' = 'order_id'""), mutate(line0, 'n = n()')","SELECT product_details
FROM
  (SELECT product_id,
          product_details,
          product_id_other,
          order_quantity,
          product_id AS order_id
   FROM
     (SELECT LHS.product_id AS product_id,
             LHS.product_details AS product_details,
             RHS.product_id AS product_id_other,
             RHS.order_quantity AS order_quantity
      FROM df_products AS LHS
      INNER JOIN df_order_items AS RHS ON (LHS.product_id = RHS.order_id)))
ORDER BY product_details;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/customers_and_addresses/0027,"summarise(input2, 'order_quantity = max(order_quantity)', ''), natural_join4(input0, input1, input2, line0)","SELECT customer_name
FROM
  (SELECT LHS.customer_id AS customer_id,
          LHS.payment_method AS payment_method,
          LHS.customer_name AS customer_name,
          LHS.date_became_customer AS date_became_customer,
          LHS.other_customer_details AS other_customer_details,
          LHS.order_id AS order_id,
          LHS.order_status AS order_status,
          LHS.order_date AS order_date,
          LHS.order_details AS order_details,
          LHS.product_id AS product_id,
          LHS.order_quantity AS order_quantity
   FROM
     (SELECT LHS.customer_id AS customer_id,
             LHS.payment_method AS payment_method,
             LHS.customer_name AS customer_name,
             LHS.date_became_customer AS date_became_customer,
             LHS.other_customer_details AS other_customer_details,
             LHS.order_id AS order_id,
             LHS.order_status AS order_status,
             LHS.order_date AS order_date,
             LHS.order_details AS order_details,
             RHS.product_id AS product_id,
             RHS.order_quantity AS order_quantity
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.payment_method AS payment_method,
                LHS.customer_name AS customer_name,
                LHS.date_became_customer AS date_became_customer,
                LHS.other_customer_details AS other_customer_details,
                RHS.order_id AS order_id,
                RHS.order_status AS order_status,
                RHS.order_date AS order_date,
                RHS.order_details AS order_details
         FROM df_customers AS LHS
         INNER JOIN df_customer_orders AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
      INNER JOIN df_order_items AS RHS ON (LHS.order_id = RHS.order_id)) AS LHS
   INNER JOIN
     (SELECT MAX(order_quantity) AS order_quantity
      FROM df_order_items) AS RHS ON (LHS.order_quantity = RHS.order_quantity))
ORDER BY customer_name;",2,13,5,0,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
spider/customers_and_addresses/0022,"filter(input0, ""customer_name == 'Tillman Ernser'""), semi_join(input1, line0)","SELECT DISTINCT `channel_code`
FROM
  (SELECT *
   FROM `df_customer_contact_channels` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customers`
           WHERE (`customer_name` = 'Tillman Ernser')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY channel_code;",2,13,4,1,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/customers_and_addresses/0030,"filter(input0, ""customer_name == 'Rodrick Heaney'""), natural_join3(input1, input2, line0), mutate(line1, 'n_distinct = n_distinct(product_id)')","SELECT DISTINCT COUNT(DISTINCT `product_id`) OVER () AS `count_distinct_t3_product_id_`
FROM
  (SELECT `LHS`.`order_id` AS `order_id`,
          `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`order_status` AS `order_status`,
          `LHS`.`order_date` AS `order_date`,
          `LHS`.`order_details` AS `order_details`,
          `LHS`.`product_id` AS `product_id`,
          `LHS`.`order_quantity` AS `order_quantity`,
          `RHS`.`payment_method` AS `payment_method`,
          `RHS`.`customer_name` AS `customer_name`,
          `RHS`.`date_became_customer` AS `date_became_customer`,
          `RHS`.`other_customer_details` AS `other_customer_details`
   FROM
     (SELECT `LHS`.`order_id` AS `order_id`,
             `LHS`.`customer_id` AS `customer_id`,
             `LHS`.`order_status` AS `order_status`,
             `LHS`.`order_date` AS `order_date`,
             `LHS`.`order_details` AS `order_details`,
             `RHS`.`product_id` AS `product_id`,
             `RHS`.`order_quantity` AS `order_quantity`
      FROM `df_customer_orders` AS `LHS`
      INNER JOIN `df_order_items` AS `RHS` ON (`LHS`.`order_id` = `RHS`.`order_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_customers`
      WHERE (`customer_name` = 'Rodrick Heaney')) AS RHS ON (LHS.customer_id = RHS.customer_id))
ORDER BY count_distinct_t3_product_id_;",3,14,4,2,4,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0
spider/customers_and_addresses/0013,"natural_join3(input0, input1, input2), filter(line0, ""city == 'Lake Geovannyton'""), summarise(line1, 'n = n()', ""'address_content','address_id'"")","SELECT `n` AS `count___`
FROM
  (SELECT `address_content`,
          `address_id`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`address_id` AS `address_id`,
                `LHS`.`address_content` AS `address_content`,
                `LHS`.`city` AS `city`,
                `LHS`.`zip_postcode` AS `zip_postcode`,
                `LHS`.`state_province_county` AS `state_province_county`,
                `LHS`.`country` AS `country`,
                `LHS`.`other_address_details` AS `other_address_details`,
                `LHS`.`customer_id` AS `customer_id`,
                `LHS`.`payment_method` AS `payment_method`,
                `LHS`.`customer_name` AS `customer_name`,
                `LHS`.`date_became_customer` AS `date_became_customer`,
                `LHS`.`other_customer_details` AS `other_customer_details`,
                `RHS`.`date_address_from` AS `date_address_from`,
                `RHS`.`address_type` AS `address_type`,
                `RHS`.`date_address_to` AS `date_address_to`
         FROM
           (SELECT `LHS`.`address_id` AS `address_id`,
                   `LHS`.`address_content` AS `address_content`,
                   `LHS`.`city` AS `city`,
                   `LHS`.`zip_postcode` AS `zip_postcode`,
                   `LHS`.`state_province_county` AS `state_province_county`,
                   `LHS`.`country` AS `country`,
                   `LHS`.`other_address_details` AS `other_address_details`,
                   `RHS`.`customer_id` AS `customer_id`,
                   `RHS`.`payment_method` AS `payment_method`,
                   `RHS`.`customer_name` AS `customer_name`,
                   `RHS`.`date_became_customer` AS `date_became_customer`,
                   `RHS`.`other_customer_details` AS `other_customer_details`
            FROM `df_addresses` AS `LHS`
            CROSS JOIN `df_customers` AS `RHS`) AS `LHS`
         INNER JOIN `df_customer_addresses` AS `RHS` ON (`LHS`.`address_id` = `RHS`.`address_id`
                                                         AND `LHS`.`customer_id` = `RHS`.`customer_id`))
      WHERE (`city` = 'Lake Geovannyton'))
   GROUP BY address_content,
            address_id)
ORDER BY count___;",3,12,5,0,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/customers_and_addresses/0006,"summarise(input0, 'n = n()', ""'customer_name','payment_method'""), limit(line0, 'desc(n)')","SELECT payment_method
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT customer_name,
                payment_method,
                COUNT() AS n
         FROM df_customers
         GROUP BY customer_name,
                  payment_method)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_and_addresses/0004,"filter(input0, ""payment_method == 'Cash'""), intersect(input0, line0, 'customer_name')","SELECT `customer_name`
FROM
  (SELECT `customer_name`
   FROM `df_customers` INTERSECT SELECT `customer_name`
   FROM `df_customers`
   WHERE (`payment_method` = 'Cash'))
ORDER BY customer_name;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/customers_and_addresses/0012,"filter(input1, ""customer_name == 'Maudie Kertzmann'""), natural_join3(input0, input2, line0)","SELECT `address_content`
FROM
  (SELECT `LHS`.`address_id` AS `address_id`,
          `LHS`.`address_content` AS `address_content`,
          `LHS`.`city` AS `city`,
          `LHS`.`zip_postcode` AS `zip_postcode`,
          `LHS`.`state_province_county` AS `state_province_county`,
          `LHS`.`country` AS `country`,
          `LHS`.`other_address_details` AS `other_address_details`,
          `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`date_address_from` AS `date_address_from`,
          `LHS`.`address_type` AS `address_type`,
          `LHS`.`date_address_to` AS `date_address_to`,
          `RHS`.`payment_method` AS `payment_method`,
          `RHS`.`customer_name` AS `customer_name`,
          `RHS`.`date_became_customer` AS `date_became_customer`,
          `RHS`.`other_customer_details` AS `other_customer_details`
   FROM
     (SELECT `LHS`.`address_id` AS `address_id`,
             `LHS`.`address_content` AS `address_content`,
             `LHS`.`city` AS `city`,
             `LHS`.`zip_postcode` AS `zip_postcode`,
             `LHS`.`state_province_county` AS `state_province_county`,
             `LHS`.`country` AS `country`,
             `LHS`.`other_address_details` AS `other_address_details`,
             `RHS`.`customer_id` AS `customer_id`,
             `RHS`.`date_address_from` AS `date_address_from`,
             `RHS`.`address_type` AS `address_type`,
             `RHS`.`date_address_to` AS `date_address_to`
      FROM `df_addresses` AS `LHS`
      INNER JOIN `df_customer_addresses` AS `RHS` ON (`LHS`.`address_id` = `RHS`.`address_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_customers`
      WHERE (`customer_name` = 'Maudie Kertzmann')) AS RHS ON (LHS.customer_id = RHS.customer_id))
ORDER BY address_content;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/customers_and_addresses/0026,"filter(input1, ""channel_code == 'Email'""), natural_join3(input0, input1, line0)","SELECT `customer_name`,
       `active_from_date`
FROM
  (SELECT `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`payment_method` AS `payment_method`,
          `LHS`.`customer_name` AS `customer_name`,
          `LHS`.`date_became_customer` AS `date_became_customer`,
          `LHS`.`other_customer_details` AS `other_customer_details`,
          `LHS`.`channel_code` AS `channel_code`,
          `LHS`.`active_from_date` AS `active_from_date`,
          `LHS`.`active_to_date` AS `active_to_date`,
          `LHS`.`contact_number` AS `contact_number`
   FROM
     (SELECT `LHS`.`customer_id` AS `customer_id`,
             `LHS`.`payment_method` AS `payment_method`,
             `LHS`.`customer_name` AS `customer_name`,
             `LHS`.`date_became_customer` AS `date_became_customer`,
             `LHS`.`other_customer_details` AS `other_customer_details`,
             `RHS`.`channel_code` AS `channel_code`,
             `RHS`.`active_from_date` AS `active_from_date`,
             `RHS`.`active_to_date` AS `active_to_date`,
             `RHS`.`contact_number` AS `contact_number`
      FROM `df_customers` AS `LHS`
      INNER JOIN `df_customer_contact_channels` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_customer_contact_channels`
      WHERE (`channel_code` = 'Email')) AS RHS ON (LHS.customer_id = RHS.customer_id
                                                   AND LHS.channel_code = RHS.channel_code
                                                   AND LHS.active_from_date = RHS.active_from_date
                                                   AND LHS.active_to_date = RHS.active_to_date
                                                   AND LHS.contact_number = RHS.contact_number))
ORDER BY customer_name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/customers_and_addresses/0015,"left_join(input2, input1), anti_join(input0, line0, '')","SELECT city
FROM
  (SELECT *
   FROM df_addresses AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT LHS.customer_id AS customer_id,
                  LHS.address_id AS address_id,
                  LHS.date_address_from AS date_address_from,
                  LHS.address_type AS address_type,
                  LHS.date_address_to AS date_address_to,
                  RHS.payment_method AS payment_method,
                  RHS.customer_name AS customer_name,
                  RHS.date_became_customer AS date_became_customer,
                  RHS.other_customer_details AS other_customer_details
           FROM df_customer_addresses AS LHS
           LEFT JOIN df_customers AS RHS ON (LHS.customer_id = RHS.customer_id)) AS RHS
        WHERE (LHS.address_id = RHS.address_id) ))
ORDER BY city;",2,13,4,0,4,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0
spider/customers_and_addresses/0005,"filter(input0, 'customer_id >= 10L & customer_id <= 20L'), intersect(line0, input0, 'date_became_customer')","SELECT date_became_customer
FROM
  (SELECT date_became_customer
   FROM df_customers
   WHERE (customer_id >= 10
          AND customer_id <= 20) INTERSECT
     SELECT date_became_customer
     FROM df_customers)
ORDER BY date_became_customer;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/customers_and_addresses/0016,"summarise(input2, 'n = n()', ""'customer_id','date_address_from'""), natural_join4(input0, input1, input2, line0), limit(line1, 'desc(customer_name)')","SELECT city
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.address_id AS address_id,
                LHS.address_content AS address_content,
                LHS.city AS city,
                LHS.zip_postcode AS zip_postcode,
                LHS.state_province_county AS state_province_county,
                LHS.country AS country,
                LHS.other_address_details AS other_address_details,
                LHS.customer_id AS customer_id,
                LHS.payment_method AS payment_method,
                LHS.customer_name AS customer_name,
                LHS.date_became_customer AS date_became_customer,
                LHS.other_customer_details AS other_customer_details,
                LHS.date_address_from AS date_address_from,
                LHS.address_type AS address_type,
                LHS.date_address_to AS date_address_to,
                RHS.n AS n
         FROM
           (SELECT LHS.address_id AS address_id,
                   LHS.address_content AS address_content,
                   LHS.city AS city,
                   LHS.zip_postcode AS zip_postcode,
                   LHS.state_province_county AS state_province_county,
                   LHS.country AS country,
                   LHS.other_address_details AS other_address_details,
                   LHS.customer_id AS customer_id,
                   LHS.payment_method AS payment_method,
                   LHS.customer_name AS customer_name,
                   LHS.date_became_customer AS date_became_customer,
                   LHS.other_customer_details AS other_customer_details,
                   RHS.date_address_from AS date_address_from,
                   RHS.address_type AS address_type,
                   RHS.date_address_to AS date_address_to
            FROM
              (SELECT LHS.address_id AS address_id,
                      LHS.address_content AS address_content,
                      LHS.city AS city,
                      LHS.zip_postcode AS zip_postcode,
                      LHS.state_province_county AS state_province_county,
                      LHS.country AS country,
                      LHS.other_address_details AS other_address_details,
                      RHS.customer_id AS customer_id,
                      RHS.payment_method AS payment_method,
                      RHS.customer_name AS customer_name,
                      RHS.date_became_customer AS date_became_customer,
                      RHS.other_customer_details AS other_customer_details
               FROM df_addresses AS LHS
               CROSS JOIN df_customers AS RHS) AS LHS
            INNER JOIN df_customer_addresses AS RHS ON (LHS.address_id = RHS.address_id
                                                        AND LHS.customer_id = RHS.customer_id)) AS LHS
         INNER JOIN
           (SELECT customer_id,
                   date_address_from,
                   COUNT() AS n
            FROM df_customer_addresses
            GROUP BY customer_id,
                     date_address_from) AS RHS ON (LHS.customer_id = RHS.customer_id
                                                   AND LHS.date_address_from = RHS.date_address_from))
      ORDER BY customer_name DESC)
   LIMIT 1);",2,18,7,0,7,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
spider/customers_and_addresses/0032,"filter(input0, ""order_status == 'Cancelled'""), mutate(line0, 'n_distinct = n_distinct(customer_id)')","SELECT DISTINCT COUNT(DISTINCT `customer_id`) OVER () AS `count_distinct_customer_id_`
FROM `df_customer_orders`
WHERE (`order_status` = 'Cancelled')
ORDER BY count_distinct_customer_id_;",2,6,1,2,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/customers_and_addresses/0018,"filter(input0, 'zip_postcode == 255L'), intersect(line0, input0, 'city')","SELECT city
FROM
  (SELECT city
   FROM df_addresses
   WHERE (zip_postcode = 255) INTERSECT
     SELECT city
     FROM df_addresses)
ORDER BY city;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/customers_and_addresses/0041,"filter(input0, ""payment_method != 'Cash'""), intersect(input0, line0, 'customer_name')","SELECT `customer_name`
FROM
  (SELECT `customer_name`
   FROM `df_customers` INTERSECT SELECT `customer_name`
   FROM `df_customers`
   WHERE (`payment_method` != 'Cash'))
ORDER BY customer_name;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/customers_and_addresses/0020,"mutate(input0, 'n_distinct = n_distinct(address_id)'), filter(line0, 'address_id <= 4L | n_distinct < address_id')","SELECT DISTINCT country
FROM
  (SELECT address_id,
          address_content,
          city,
          zip_postcode,
          state_province_county,
          country,
          other_address_details,
          COUNT(DISTINCT address_id) OVER () AS n_distinct
   FROM df_addresses)
WHERE (address_id <= 4
       OR n_distinct < address_id)
ORDER BY country;",2,9,2,2,2,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/customers_and_addresses/0034,"natural_join(input0, input1), filter(line0, ""order_status == 'Delivered'"")","SELECT `customer_name`,
       `order_date`
FROM
  (SELECT `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`payment_method` AS `payment_method`,
          `LHS`.`customer_name` AS `customer_name`,
          `LHS`.`date_became_customer` AS `date_became_customer`,
          `LHS`.`other_customer_details` AS `other_customer_details`,
          `RHS`.`order_id` AS `order_id`,
          `RHS`.`order_status` AS `order_status`,
          `RHS`.`order_date` AS `order_date`,
          `RHS`.`order_details` AS `order_details`
   FROM `df_customers` AS `LHS`
   INNER JOIN `df_customer_orders` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`))
WHERE (`order_status` = 'Delivered')
ORDER BY customer_name;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/customers_and_addresses/0021,"filter(input0, 'customer_id > 5L'), summarise(line0, 'n = n()', ""'channel_code'""), filter(line1, 'n != 5L')","SELECT channel_code
FROM
  (SELECT channel_code,
          COUNT() AS n
   FROM
     (SELECT *
      FROM df_customer_contact_channels
      WHERE (customer_id > 5))
   GROUP BY channel_code)
WHERE (n != 5)
ORDER BY channel_code;",3,8,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0
spider/customers_and_addresses/0023,"filter(input0, ""customer_name != 'Tillman Ernser'""), anti_join(input1, line0, ""'customer_id'""), mutate(line1, 'maxactive_to_date = max(active_to_date)')","SELECT DISTINCT MAX(`active_to_date`) OVER () AS `max_t2_active_to_date_`
FROM
  (SELECT *
   FROM `df_customer_contact_channels` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customers`
           WHERE (`customer_name` != 'Tillman Ernser')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY max_t2_active_to_date_;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/customers_and_addresses/0001,"intersect(input0, input0, 'customer_name')","SELECT customer_name
FROM
  (SELECT customer_name
   FROM df_customers INTERSECT SELECT customer_name
   FROM df_customers)
ORDER BY customer_name;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/customers_and_addresses/0043,"anti_join(input0, input1, ""'customer_id'"")","SELECT customer_name
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_customer_orders AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY customer_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/customers_and_addresses/0014,"filter(input0, ""state_province_county == 'Colorado'""), natural_join3(input1, input2, line0)","SELECT `customer_name`
FROM
  (SELECT `LHS`.`customer_id` AS `customer_id`,
          `LHS`.`payment_method` AS `payment_method`,
          `LHS`.`customer_name` AS `customer_name`,
          `LHS`.`date_became_customer` AS `date_became_customer`,
          `LHS`.`other_customer_details` AS `other_customer_details`,
          `LHS`.`address_id` AS `address_id`,
          `LHS`.`date_address_from` AS `date_address_from`,
          `LHS`.`address_type` AS `address_type`,
          `LHS`.`date_address_to` AS `date_address_to`,
          `RHS`.`address_content` AS `address_content`,
          `RHS`.`city` AS `city`,
          `RHS`.`zip_postcode` AS `zip_postcode`,
          `RHS`.`state_province_county` AS `state_province_county`,
          `RHS`.`country` AS `country`,
          `RHS`.`other_address_details` AS `other_address_details`
   FROM
     (SELECT `LHS`.`customer_id` AS `customer_id`,
             `LHS`.`payment_method` AS `payment_method`,
             `LHS`.`customer_name` AS `customer_name`,
             `LHS`.`date_became_customer` AS `date_became_customer`,
             `LHS`.`other_customer_details` AS `other_customer_details`,
             `RHS`.`address_id` AS `address_id`,
             `RHS`.`date_address_from` AS `date_address_from`,
             `RHS`.`address_type` AS `address_type`,
             `RHS`.`date_address_to` AS `date_address_to`
      FROM `df_customers` AS `LHS`
      INNER JOIN `df_customer_addresses` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_addresses`
      WHERE (`state_province_county` = 'Colorado')) AS RHS ON (LHS.address_id = RHS.address_id))
ORDER BY customer_name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/customers_and_addresses/0009,df_products,"SELECT product_details
FROM df_products
ORDER BY product_details;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customers_and_addresses/0029,"natural_join3(input0, input1, input2), semi_join(line0, input0)","SELECT payment_method
FROM
  (SELECT *
   FROM
     (SELECT LHS.customer_id AS customer_id,
             LHS.payment_method AS payment_method,
             LHS.customer_name AS customer_name,
             LHS.date_became_customer AS date_became_customer,
             LHS.other_customer_details AS other_customer_details,
             LHS.order_id AS order_id,
             LHS.order_status AS order_status,
             LHS.order_date AS order_date,
             LHS.order_details AS order_details,
             RHS.product_id AS product_id,
             RHS.order_quantity AS order_quantity
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.payment_method AS payment_method,
                LHS.customer_name AS customer_name,
                LHS.date_became_customer AS date_became_customer,
                LHS.other_customer_details AS other_customer_details,
                RHS.order_id AS order_id,
                RHS.order_status AS order_status,
                RHS.order_date AS order_date,
                RHS.order_details AS order_details
         FROM df_customers AS LHS
         INNER JOIN df_customer_orders AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
      INNER JOIN df_order_items AS RHS ON (LHS.order_id = RHS.order_id)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_customers AS RHS
        WHERE (LHS.customer_id = RHS.customer_id
               AND LHS.payment_method = RHS.payment_method
               AND LHS.customer_name = RHS.customer_name
               AND LHS.date_became_customer = RHS.date_became_customer
               AND LHS.other_customer_details = RHS.other_customer_details) ))
ORDER BY payment_method;",2,15,5,0,5,2,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0
spider/customers_and_addresses/0044,"natural_join4(input0, input1, input2, input3), filter(line0, ""product_details == 'Latte' & product_details != 'Americano'""), anti_join(line1, input2, ""'order_date','order_details'"")","SELECT DISTINCT `customer_name`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`product_id` AS `product_id`,
                `LHS`.`product_details` AS `product_details`,
                `LHS`.`customer_id` AS `customer_id`,
                `LHS`.`payment_method` AS `payment_method`,
                `LHS`.`customer_name` AS `customer_name`,
                `LHS`.`date_became_customer` AS `date_became_customer`,
                `LHS`.`other_customer_details` AS `other_customer_details`,
                `LHS`.`order_id` AS `order_id`,
                `LHS`.`order_status` AS `order_status`,
                `LHS`.`order_date` AS `order_date`,
                `LHS`.`order_details` AS `order_details`,
                `RHS`.`order_quantity` AS `order_quantity`
         FROM
           (SELECT `LHS`.`product_id` AS `product_id`,
                   `LHS`.`product_details` AS `product_details`,
                   `LHS`.`customer_id` AS `customer_id`,
                   `LHS`.`payment_method` AS `payment_method`,
                   `LHS`.`customer_name` AS `customer_name`,
                   `LHS`.`date_became_customer` AS `date_became_customer`,
                   `LHS`.`other_customer_details` AS `other_customer_details`,
                   `RHS`.`order_id` AS `order_id`,
                   `RHS`.`order_status` AS `order_status`,
                   `RHS`.`order_date` AS `order_date`,
                   `RHS`.`order_details` AS `order_details`
            FROM
              (SELECT `LHS`.`product_id` AS `product_id`,
                      `LHS`.`product_details` AS `product_details`,
                      `RHS`.`customer_id` AS `customer_id`,
                      `RHS`.`payment_method` AS `payment_method`,
                      `RHS`.`customer_name` AS `customer_name`,
                      `RHS`.`date_became_customer` AS `date_became_customer`,
                      `RHS`.`other_customer_details` AS `other_customer_details`
               FROM `df_products` AS `LHS`
               CROSS JOIN `df_customers` AS `RHS`) AS `LHS`
            INNER JOIN `df_customer_orders` AS `RHS` ON (`LHS`.`customer_id` = `RHS`.`customer_id`)) AS `LHS`
         INNER JOIN `df_order_items` AS `RHS` ON (`LHS`.`product_id` = `RHS`.`product_id`
                                                  AND `LHS`.`order_id` = `RHS`.`order_id`))
      WHERE (`product_details` = 'Latte'
             AND `product_details` != 'Americano')) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_customer_orders AS RHS
        WHERE (LHS.order_date = RHS.order_date
               AND LHS.order_details = RHS.order_details) ))
ORDER BY customer_name;",3,22,7,1,7,2,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0
spider/customers_and_addresses/0040,"filter(input0, ""state_province_county == 'Texas' & state_province_county == 'Arizona'""), anti_join(input0, line0, ""'state_province_county','zip_postcode'""), filter(line1, ""city == 'East Julianaside' | city == 'Gleasonmouth'"")","SELECT `address_content`
FROM
  (SELECT *
   FROM `df_addresses` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_addresses`
           WHERE (`state_province_county` = 'Texas'
                  AND `state_province_county` = 'Arizona')) AS `RHS`
        WHERE (`LHS`.`state_province_county` = `RHS`.`state_province_county`
               AND `LHS`.`zip_postcode` = `RHS`.`zip_postcode`) ))
WHERE (`city` = 'East Julianaside'
       OR `city` = 'Gleasonmouth')
ORDER BY address_content;",3,15,4,0,4,0,4,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0
spider/customers_and_addresses/0028,"natural_join3(input0, input1, input2), limit(line0, 'customer_name')","SELECT customer_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.payment_method AS payment_method,
                LHS.customer_name AS customer_name,
                LHS.date_became_customer AS date_became_customer,
                LHS.other_customer_details AS other_customer_details,
                LHS.order_id AS order_id,
                LHS.order_status AS order_status,
                LHS.order_date AS order_date,
                LHS.order_details AS order_details,
                RHS.product_id AS product_id,
                RHS.order_quantity AS order_quantity
         FROM
           (SELECT LHS.customer_id AS customer_id,
                   LHS.payment_method AS payment_method,
                   LHS.customer_name AS customer_name,
                   LHS.date_became_customer AS date_became_customer,
                   LHS.other_customer_details AS other_customer_details,
                   RHS.order_id AS order_id,
                   RHS.order_status AS order_status,
                   RHS.order_date AS order_date,
                   RHS.order_details AS order_details
            FROM df_customers AS LHS
            INNER JOIN df_customer_orders AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
         INNER JOIN df_order_items AS RHS ON (LHS.order_id = RHS.order_id))
      ORDER BY customer_name)
   LIMIT 1);",1,13,5,0,5,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
spider/musical/0002,df_actor,"SELECT name
FROM df_actor
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/musical/0017,"summarise(input0, 'n = n()', ""'nominee','year'""), filter(line0, 'n != 2L')","SELECT nominee
FROM
  (SELECT nominee,
          YEAR,
          COUNT() AS n
   FROM df_musical
   GROUP BY nominee,
            YEAR)
WHERE (n != 2)
ORDER BY nominee;",2,7,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/musical/0008,"filter(input0, ""award != 'Tony Award'""), intersect(input0, line0, 'nominee')","SELECT `nominee`
FROM
  (SELECT `nominee`
   FROM `df_musical` INTERSECT SELECT `nominee`
   FROM `df_musical`
   WHERE (`award` != 'Tony Award'))
ORDER BY nominee;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/musical/0003,df_actor,"SELECT CHARACTER,
       duration
FROM df_actor
ORDER BY CHARACTER;",0,4,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/musical/0013,"summarise(input1, 'n = n()', ""'musical_id'""), left_join(input0, line0), filter(line1, 'n >= 3L')","SELECT name
FROM
  (SELECT LHS.musical_id AS musical_id,
          LHS.name AS name,
          LHS.year AS YEAR,
          LHS.award AS award,
          LHS.category AS category,
          LHS.nominee AS nominee,
          LHS.result AS RESULT,
          RHS.n AS n
   FROM df_musical AS LHS
   LEFT JOIN
     (SELECT musical_id,
             COUNT() AS n
      FROM df_actor
      GROUP BY musical_id) AS RHS ON (LHS.musical_id = RHS.musical_id))
WHERE (n >= 3)
ORDER BY name;",3,10,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/musical/0006,"limit(input0, 'character')","SELECT duration
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_actor
      ORDER BY CHARACTER)
   LIMIT 1);",0,8,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/musical/0004,"filter(input0, 'age != 20L')","SELECT name
FROM df_actor
WHERE (age != 20)
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/musical/0012,"summarise(input1, 'n = n()', ""'musical_id'""), left_join(line0, input0)","SELECT name,
       n AS count___
FROM
  (SELECT LHS.musical_id AS musical_id,
          LHS.n AS n,
          RHS.name AS name,
          RHS.year AS YEAR,
          RHS.award AS award,
          RHS.category AS category,
          RHS.nominee AS nominee,
          RHS.result AS RESULT
   FROM
     (SELECT musical_id,
             COUNT() AS n
      FROM df_actor
      GROUP BY musical_id) AS LHS
   LEFT JOIN df_musical AS RHS ON (LHS.musical_id = RHS.musical_id))
ORDER BY name;",2,9,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/musical/0015,"summarise(input0, 'n = n()', ""'name','nominee'""), limit(line0, 'desc(n)')","SELECT nominee
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT name,
                nominee,
                COUNT() AS n
         FROM df_musical
         GROUP BY name,
                  nominee)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/musical/0005,df_actor,"SELECT CHARACTER
FROM df_actor
ORDER BY CHARACTER;",0,4,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/musical/0016,"summarise(input0, 'n = n()', ""'award','result'""), limit(line0, 'award')","SELECT RESULT
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT award,
                RESULT,
                COUNT() AS n
         FROM df_musical
         GROUP BY award,
                  RESULT)
      ORDER BY award)
   LIMIT 1);",1,12,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/musical/0018,"anti_join(input0, input1, ""'musical_id'"")","SELECT name
FROM
  (SELECT *
   FROM df_musical AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_actor AS RHS
        WHERE (LHS.musical_id = RHS.musical_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/musical/0020,"filter(input0, ""award == 'Tony Award'"")","SELECT `nominee`
FROM `df_musical`
WHERE (`award` = 'Tony Award')
ORDER BY nominee;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/musical/0019,"filter(input0, ""award != 'Tony Award' | award != 'Drama Desk Award'""), intersect(input0, line0, 'nominee')","SELECT `nominee`
FROM
  (SELECT `nominee`
   FROM `df_musical` INTERSECT SELECT `nominee`
   FROM `df_musical`
   WHERE (`award` != 'Tony Award'
          OR `award` != 'Drama Desk Award'))
ORDER BY nominee;",2,9,3,0,3,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/musical/0007,"filter(input0, ""nominee == 'Bob Fosse'"")","SELECT `name`
FROM `df_musical`
WHERE (`nominee` = 'Bob Fosse')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/musical/0001,"summarise(input0, 'n = n()', ""'musical_id','name'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT musical_id,
          name,
          COUNT() AS n
   FROM df_actor
   GROUP BY musical_id,
            name)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/musical/0014,"summarise(input0, 'n = n()', ""'nominee'"")","SELECT nominee,
       n AS count___
FROM
  (SELECT nominee,
          COUNT() AS n
   FROM df_musical
   GROUP BY nominee)
ORDER BY nominee;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/musical/0009,"inner_join(input1, input0, ""'musical_id'"")","SELECT name AS name___1,
       name_other AS name___2
FROM
  (SELECT LHS.actor_id AS actor_id,
          LHS.name AS name,
          LHS.musical_id AS musical_id,
          LHS.character AS CHARACTER,
          LHS.duration AS duration,
          LHS.age AS age,
          RHS.name AS name_other,
          RHS.year AS YEAR,
          RHS.award AS award,
          RHS.category AS category,
          RHS.nominee AS nominee,
          RHS.result AS RESULT
   FROM df_actor AS LHS
   INNER JOIN df_musical AS RHS ON (LHS.musical_id = RHS.musical_id))
ORDER BY name___1;",1,8,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/musical/0011,df_actor,"SELECT name
FROM df_actor
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/musical/0010,"filter(input0, ""name != 'The Phantom of the Opera'""), anti_join(input1, line0, ""'musical_id'"")","SELECT `name`
FROM
  (SELECT *
   FROM `df_actor` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_musical`
           WHERE (`name` != 'The Phantom of the Opera')) AS RHS
        WHERE (LHS.musical_id = RHS.musical_id) ))
ORDER BY name;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/college_2/0042,"summarise(input0, 'n = n()', ""'building','room_number'""), natural_join(input0, line0), limit(line1, 'desc(n)')","SELECT YEAR
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.course_id AS course_id,
                LHS.sec_id AS sec_id,
                LHS.semester AS semester,
                LHS.year AS YEAR,
                LHS.building AS building,
                LHS.room_number AS room_number,
                LHS.time_slot_id AS time_slot_id,
                RHS.n AS n
         FROM df_section AS LHS
         INNER JOIN
           (SELECT building,
                   room_number,
                   COUNT() AS n
            FROM df_section
            GROUP BY building,
                     room_number) AS RHS ON (LHS.building = RHS.building
                                             AND LHS.room_number = RHS.room_number))
      ORDER BY n DESC)
   LIMIT 1);",2,15,5,0,5,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0033,"filter(input2, 'year == 2008'), natural_join4(input0, input1, input2, line0)","SELECT title,
       name
FROM
  (SELECT LHS.course_id AS course_id,
          LHS.title AS title,
          LHS.dept_name AS dept_name,
          LHS.credits AS credits,
          LHS.id AS id,
          LHS.name AS name,
          LHS.salary AS salary,
          LHS.sec_id AS sec_id,
          LHS.semester AS semester,
          LHS.year AS YEAR
   FROM
     (SELECT LHS.course_id AS course_id,
             LHS.title AS title,
             LHS.dept_name AS dept_name,
             LHS.credits AS credits,
             LHS.id AS id,
             LHS.name AS name,
             LHS.salary AS salary,
             RHS.sec_id AS sec_id,
             RHS.semester AS semester,
             RHS.year AS YEAR
      FROM
        (SELECT LHS.course_id AS course_id,
                LHS.title AS title,
                LHS.dept_name AS dept_name,
                LHS.credits AS credits,
                RHS.id AS id,
                RHS.name AS name,
                RHS.salary AS salary
         FROM df_course AS LHS
         INNER JOIN df_instructor AS RHS ON (LHS.dept_name = RHS.dept_name)) AS LHS
      INNER JOIN df_teaches AS RHS ON (LHS.course_id = RHS.course_id
                                       AND LHS.id = RHS.id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_teaches
      WHERE (YEAR = 2008.0)) AS RHS ON (LHS.course_id = RHS.course_id
                                        AND LHS.id = RHS.id
                                        AND LHS.sec_id = RHS.sec_id
                                        AND LHS.semester = RHS.semester
                                        AND LHS.year = RHS.year))
ORDER BY title;",2,17,5,0,5,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
spider/college_2/0037,"summarise(input0, 'meancapacity = mean(capacity, na.rm = T)', ""'building'""), summarise(input0, 'capacity = max(capacity)', ""'building'""), natural_join3(input0, line0, line1)","SELECT DISTINCT capacity AS max_capacity_,
                meancapacity AS avg_capacity_,
                building
FROM
  (SELECT LHS.building AS building,
          LHS.room_number AS room_number,
          LHS.capacity AS capacity,
          LHS.meancapacity AS meancapacity
   FROM
     (SELECT LHS.building AS building,
             LHS.room_number AS room_number,
             LHS.capacity AS capacity,
             RHS.meancapacity AS meancapacity
      FROM df_classroom AS LHS
      INNER JOIN
        (SELECT building,
                AVG(capacity) AS meancapacity
         FROM df_classroom
         GROUP BY building) AS RHS ON (LHS.building = RHS.building)) AS LHS
   INNER JOIN
     (SELECT building,
             MAX(capacity) AS capacity
      FROM df_classroom
      GROUP BY building) AS RHS ON (LHS.building = RHS.building
                                    AND LHS.capacity = RHS.capacity))
ORDER BY max_capacity_;",3,13,5,1,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,0,0
spider/college_2/0002,"filter(input0, ""building != 'Lamberton'""), summarise(line0, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_classroom`
      WHERE (`building` != 'Lamberton')))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_2/0036,"filter(input0, 'capacity > 50'), summarise(line0, 'n_distinct = n_distinct(capacity)', ""'building'"")","SELECT n_distinct AS count___,
       building
FROM
  (SELECT building,
          COUNT(DISTINCT capacity) AS n_distinct
   FROM
     (SELECT *
      FROM df_classroom
      WHERE (capacity > 50.0))
   GROUP BY building)
ORDER BY count___;",2,8,3,1,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_2/0057,"filter(input0, ""title == 'Mobile Computing'""), semi_join(input1, line0), inner_join(input0, line1, ""'course_id' = 'prereq_id'"")","SELECT `title`
FROM
  (SELECT `LHS`.`course_id` AS `course_id`,
          `LHS`.`title` AS `title`,
          `LHS`.`dept_name` AS `dept_name`,
          `LHS`.`credits` AS `credits`,
          `RHS`.`course_id` AS `course_id_other`
   FROM `df_course` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_prereq` AS `LHS`
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_course`
              WHERE (`title` = 'Mobile Computing')) AS RHS
           WHERE (LHS.course_id = RHS.course_id) )) AS RHS ON (LHS.course_id = RHS.prereq_id))
ORDER BY title;",3,15,5,0,5,1,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0
spider/college_2/0052,"filter(input1, ""semester == 'Fall' & year == 2003""), semi_join(input0, line0)","SELECT `name`
FROM
  (SELECT *
   FROM `df_student` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_takes`
           WHERE (`semester` = 'Fall'
                  AND YEAR = 2003.0)) AS RHS
        WHERE (LHS.id = RHS.id) ))
ORDER BY name;",2,13,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/college_2/0008,"mutate(input0, 'n_distinct = n_distinct(s_id)')","SELECT DISTINCT COUNT(DISTINCT s_id) OVER () AS count_distinct_s_id_
FROM df_advisor
ORDER BY count_distinct_s_id_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/college_2/0039,"summarise(input0, 'sumcredits = sum(credits)', ""'dept_name'"")","SELECT sumcredits AS sum_credits_,
       dept_name
FROM
  (SELECT dept_name,
          SUM(credits) AS sumcredits
   FROM df_course
   GROUP BY dept_name)
ORDER BY sum_credits_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0038,"summarise(input0, 'n = n()', ""'title'""), filter(line0, 'n != 1L'), mutate(line1, 'n = n()')","SELECT title
FROM
  (SELECT title,
          COUNT() AS n
   FROM df_course
   GROUP BY title)
WHERE (n != 1)
ORDER BY title;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/college_2/0076,df_instructor,"SELECT name
FROM df_instructor
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0003,"mutate(input0, 'meanbudget = mean(budget, na.rm = T)'), filter(line0, 'meanbudget < budget')","SELECT dept_name,
       building
FROM
  (SELECT dept_name,
          building,
          budget,
          AVG(budget) OVER () AS meanbudget
   FROM df_department)
WHERE (meanbudget < budget)
ORDER BY dept_name;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/college_2/0027,df_course,"SELECT title
FROM df_course
ORDER BY title;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0022,"filter(input0, ""dept_name == 'Psychology'""), anti_join(input0, line0, ""'title'""), filter(line1, ""dept_name == 'Statistics'"")","SELECT DISTINCT `title`
FROM
  (SELECT *
   FROM `df_course` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_course`
           WHERE (`dept_name` = 'Psychology')) AS `RHS`
        WHERE (`LHS`.`title` = `RHS`.`title`) ))
WHERE (`dept_name` = 'Statistics')
ORDER BY title;",3,15,4,1,4,0,4,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0
spider/college_2/0053,"natural_join(input0, input1), filter(line0, ""semester == 'Fall' & year == 2010""), filter(line1, ""building == 'Chandler'"")","SELECT `title`
FROM
  (SELECT *
   FROM
     (SELECT `LHS`.`course_id` AS `course_id`,
             `LHS`.`title` AS `title`,
             `LHS`.`dept_name` AS `dept_name`,
             `LHS`.`credits` AS `credits`,
             `RHS`.`sec_id` AS `sec_id`,
             `RHS`.`semester` AS `semester`,
             `RHS`.`year` AS `year`,
             `RHS`.`building` AS `building`,
             `RHS`.`room_number` AS `room_number`,
             `RHS`.`time_slot_id` AS `time_slot_id`
      FROM `df_course` AS `LHS`
      INNER JOIN `df_section` AS `RHS` ON (`LHS`.`course_id` = `RHS`.`course_id`))
   WHERE (`semester` = 'Fall'
          AND `year` = 2010.0))
WHERE (`building` = 'Chandler')
ORDER BY title;",3,9,3,0,3,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0
spider/college_2/0072,"filter(input0, ""dept_name == 'Comp. Sci.' & salary != 80000""), semi_join(line0, input0)","SELECT `name`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_instructor`
      WHERE (`dept_name` = 'Comp. Sci.'
             AND salary != 80000.0)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_instructor AS RHS
        WHERE (LHS.id = RHS.id
               AND LHS.name = RHS.name
               AND LHS.dept_name = RHS.dept_name
               AND LHS.salary = RHS.salary) ))
ORDER BY name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/college_2/0030,"limit(input0, 'desc(salary)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_instructor
      ORDER BY salary DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0013,"anti_join(input0, input1, ""'course_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT *
   FROM df_course AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_prereq AS RHS
        WHERE (LHS.course_id = RHS.course_id) ))
ORDER BY count___;",2,12,3,1,3,0,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
spider/college_2/0006,"filter(input0, ""dept_name == 'History'""), limit(line0, 'desc(tot_cred)')","SELECT `name`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM `df_student`
         WHERE (`dept_name` = 'History'))
      ORDER BY tot_cred DESC)
   LIMIT 1);",1,11,4,0,4,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_2/0065,"filter(input0, ""dept_name == 'Biology'""), semi_join(input2, line0), anti_join(input1, line1, ""'id'"")","SELECT `name`
FROM
  (SELECT *
   FROM `df_student` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_takes` AS `LHS`
           WHERE EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM `df_course`
                   WHERE (`dept_name` = 'Biology')) AS RHS
                WHERE (LHS.course_id = RHS.course_id) )) AS RHS
        WHERE (LHS.id = RHS.id) ))
ORDER BY name;",3,20,6,0,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/college_2/0064,"mutate(input0, 'capacity = max(capacity)'), natural_join4(input0, input1, input2, line0)","SELECT title,
       credits
FROM
  (SELECT LHS.building AS building,
          LHS.room_number AS room_number,
          LHS.capacity AS capacity,
          LHS.course_id AS course_id,
          LHS.title AS title,
          LHS.dept_name AS dept_name,
          LHS.credits AS credits,
          LHS.sec_id AS sec_id,
          LHS.semester AS semester,
          LHS.year AS YEAR,
          LHS.time_slot_id AS time_slot_id
   FROM
     (SELECT LHS.building AS building,
             LHS.room_number AS room_number,
             LHS.capacity AS capacity,
             LHS.course_id AS course_id,
             LHS.title AS title,
             LHS.dept_name AS dept_name,
             LHS.credits AS credits,
             RHS.sec_id AS sec_id,
             RHS.semester AS semester,
             RHS.year AS YEAR,
             RHS.time_slot_id AS time_slot_id
      FROM
        (SELECT LHS.building AS building,
                LHS.room_number AS room_number,
                LHS.capacity AS capacity,
                RHS.course_id AS course_id,
                RHS.title AS title,
                RHS.dept_name AS dept_name,
                RHS.credits AS credits
         FROM df_classroom AS LHS
         CROSS JOIN df_course AS RHS) AS LHS
      INNER JOIN df_section AS RHS ON (LHS.building = RHS.building
                                       AND LHS.room_number = RHS.room_number
                                       AND LHS.course_id = RHS.course_id)) AS LHS
   INNER JOIN
     (SELECT building,
             room_number,
             MAX(capacity) OVER () AS capacity
      FROM df_classroom) AS RHS ON (LHS.building = RHS.building
                                    AND LHS.room_number = RHS.room_number
                                    AND LHS.capacity = RHS.capacity))
ORDER BY title;",2,15,5,0,5,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0
spider/college_2/0004,"filter(input0, 'capacity <= 50 | capacity <= 100'), filter(line0, 'capacity >= 50 & capacity <= 100')","SELECT building,
       room_number
FROM
  (SELECT *
   FROM df_classroom
   WHERE (capacity <= 50.0
          OR capacity <= 100.0))
WHERE (capacity >= 50.0
       AND capacity <= 100.0)
ORDER BY building;",2,7,2,0,2,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/college_2/0012,"summarise(input1, 'n = n()', ""'course_id'""), natural_join(input0, line0), filter(line1, 'n != 1L')","SELECT title,
       credits,
       dept_name
FROM
  (SELECT LHS.course_id AS course_id,
          LHS.title AS title,
          LHS.dept_name AS dept_name,
          LHS.credits AS credits,
          RHS.n AS n
   FROM df_course AS LHS
   INNER JOIN
     (SELECT course_id,
             COUNT() AS n
      FROM df_prereq
      GROUP BY course_id) AS RHS ON (LHS.course_id = RHS.course_id))
WHERE (n != 1)
ORDER BY title;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/college_2/0026,"summarise(input0, 'sumcredits = sum(credits)', ""'credits','dept_name'""), limit(line0, 'desc(sumcredits)')","SELECT dept_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT credits,
                dept_name,
                SUM(credits) AS sumcredits
         FROM df_course
         GROUP BY credits,
                  dept_name)
      ORDER BY sumcredits DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0071,"filter(input0, ""dept_name == 'Comp. Sci.'"")","SELECT `name`
FROM `df_instructor`
WHERE (`dept_name` = 'Comp. Sci.')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_2/0015,"mutate(input0, 'n_distinct = n_distinct(id)')","SELECT DISTINCT COUNT(DISTINCT id) OVER () AS count__distinct_id_
FROM df_teaches
ORDER BY count__distinct_id_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/college_2/0005,"limit(input0, 'desc(budget)')","SELECT dept_name,
       building
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_department
      ORDER BY budget DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0016,"filter(input0, ""dept_name == 'Marketing' | dept_name == 'Finance'""), summarise(line0, 'sumbudget = sum(budget)', '')","SELECT `sumbudget` AS `sum_budget_`
FROM
  (SELECT SUM(`budget`) AS `sumbudget`
   FROM
     (SELECT *
      FROM `df_department`
      WHERE (`dept_name` = 'Marketing'
             OR `dept_name` = 'Finance')))
ORDER BY sum_budget_;",2,8,3,0,3,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_2/0062,"summarise(input0, 'meansalary = mean(salary, na.rm = T)', ""'dept_name'""), limit(line0, 'desc(meansalary)')","SELECT dept_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT dept_name,
                AVG(salary) AS meansalary
         FROM df_instructor
         GROUP BY dept_name)
      ORDER BY meansalary DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0050,"filter(input0, ""title == 'International Finance'""), left_join(line0, input1), inner_join(input0, line1, ""'course_id' = 'prereq_id'"")","SELECT `title`
FROM
  (SELECT `LHS`.`course_id` AS `course_id`,
          `LHS`.`title` AS `title`,
          `LHS`.`dept_name` AS `dept_name`,
          `LHS`.`credits` AS `credits`,
          `RHS`.`course_id` AS `course_id_other`,
          `RHS`.`title` AS `title_other`,
          `RHS`.`dept_name` AS `dept_name_other`,
          `RHS`.`credits` AS `credits_other`
   FROM `df_course` AS `LHS`
   INNER JOIN
     (SELECT `LHS`.`course_id` AS `course_id`,
             `LHS`.`title` AS `title`,
             `LHS`.`dept_name` AS `dept_name`,
             `LHS`.`credits` AS `credits`,
             `RHS`.`prereq_id` AS `prereq_id`
      FROM
        (SELECT *
         FROM `df_course`
         WHERE (`title` = 'International Finance')) AS LHS
      LEFT JOIN df_prereq AS RHS ON (LHS.course_id = RHS.course_id)) AS RHS ON (LHS.course_id = RHS.prereq_id))
ORDER BY title;",3,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0
spider/college_2/0068,"filter(input0, ""dept_name == 'Physics'""), mutate(line0, 'meansalary = mean(salary, na.rm = T)'), cross_join(line1, input0, 'salary > salary.other & meansalary > salary.other')","SELECT DISTINCT `name_other` AS `name`,
                `salary_other` AS `salary`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `LHS`.`dept_name` AS `dept_name`,
          `LHS`.`salary` AS `salary`,
          `LHS`.`meansalary` AS `meansalary`,
          `RHS`.`id` AS `id_other`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`dept_name` AS `dept_name_other`,
          `RHS`.`salary` AS `salary_other`
   FROM
     (SELECT `id`,
             `name`,
             `dept_name`,
             `salary`,
             AVG(`salary`) OVER () AS `meansalary`
      FROM `df_instructor`
      WHERE (`dept_name` = 'Physics')) AS LHS
   CROSS JOIN df_instructor AS RHS)
WHERE (salary > salary_other
       AND meansalary > salary_other)
ORDER BY name;",3,10,3,1,3,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0
spider/college_2/0059,"anti_join(input0, input1, '')","SELECT name
FROM
  (SELECT *
   FROM df_instructor AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_teaches AS RHS
        WHERE (LHS.id = RHS.id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/college_2/0032,df_student,"SELECT name,
       dept_name
FROM df_student
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0045,"summarise(input0, 'n = n()', ""'dept_name'"")","SELECT n AS count___,
       dept_name
FROM
  (SELECT dept_name,
          COUNT() AS n
   FROM df_student
   GROUP BY dept_name)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0063,"natural_join(input0, input1), mutate(line0, 'meansalary = mean(salary, na.rm = T)'), mutate(line1, 'n_distinct = n_distinct(salary)')","SELECT DISTINCT meansalary AS avg_t1_salary_,
                COUNT(DISTINCT salary) OVER () AS count___
FROM
  (SELECT dept_name,
          building,
          budget,
          id,
          name,
          salary,
          AVG(salary) OVER () AS meansalary
   FROM
     (SELECT LHS.dept_name AS dept_name,
             LHS.building AS building,
             LHS.budget AS budget,
             RHS.id AS id,
             RHS.name AS name,
             RHS.salary AS salary
      FROM df_department AS LHS
      INNER JOIN df_instructor AS RHS ON (LHS.dept_name = RHS.dept_name)))
ORDER BY avg_t1_salary_;",3,11,3,2,3,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0
spider/college_2/0018,"summarise(input0, 'n = n()', ""'building','capacity'""), filter(line0, ""building == 'Lamberton' & n <= 50L"")","SELECT `n` AS `count___`
FROM
  (SELECT `building`,
          `capacity`,
          COUNT() AS `n`
   FROM `df_classroom`
   GROUP BY `building`,
            `capacity`)
WHERE (`building` = 'Lamberton'
       AND n <= 50)
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_2/0041,"summarise(input0, 'n = n()', ""'semester','year'"")","SELECT n AS count___,
       semester,
       YEAR
FROM
  (SELECT semester,
          YEAR,
          COUNT() AS n
   FROM df_section
   GROUP BY semester,
            YEAR)
ORDER BY count___;",1,7,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0051,"filter(input0, ""title == 'Differential Geometry'""), left_join(input0, input1), inner_join(line0, line1, ""'course_id' = 'prereq_id'"")","SELECT `title_other` AS `title`
FROM
  (SELECT `LHS`.`course_id` AS `course_id`,
          `LHS`.`title` AS `title`,
          `LHS`.`dept_name` AS `dept_name`,
          `LHS`.`credits` AS `credits`,
          `RHS`.`course_id` AS `course_id_other`,
          `RHS`.`title` AS `title_other`,
          `RHS`.`dept_name` AS `dept_name_other`,
          `RHS`.`credits` AS `credits_other`
   FROM
     (SELECT *
      FROM `df_course`
      WHERE (`title` = 'Differential Geometry')) AS LHS
   INNER JOIN
     (SELECT LHS.course_id AS course_id,
             LHS.title AS title,
             LHS.dept_name AS dept_name,
             LHS.credits AS credits,
             RHS.prereq_id AS prereq_id
      FROM df_course AS LHS
      LEFT JOIN df_prereq AS RHS ON (LHS.course_id = RHS.course_id)) AS RHS ON (LHS.course_id = RHS.prereq_id))
ORDER BY title;",3,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0
spider/college_2/0020,"filter(input0, ""dept_name == 'Statistics'""), limit(line0, 'salary')","SELECT `name`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM `df_instructor`
         WHERE (`dept_name` = 'Statistics'))
      ORDER BY salary)
   LIMIT 1);",1,10,4,0,4,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_2/0019,"mutate(input0, 'meanbudget = mean(budget, na.rm = T)'), filter(line0, 'meanbudget <= budget')","SELECT dept_name,
       budget
FROM
  (SELECT dept_name,
          building,
          budget,
          AVG(budget) OVER () AS meanbudget
   FROM df_department)
WHERE (meanbudget <= budget)
ORDER BY dept_name;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/college_2/0007,"filter(input0, ""building == 'Lamberton'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM `df_classroom`
WHERE (`building` = 'Lamberton')
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/college_2/0084,"filter(input0, ""dept_name == 'Biology'""), summarise(line0, 'salary = max(salary)', ""'dept_name'""), cross_join(input0, line1, 'dept_name != dept_name.other & salary > salary.other')","SELECT `name`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `LHS`.`dept_name` AS `dept_name`,
          `LHS`.`salary` AS `salary`,
          `RHS`.`dept_name` AS `dept_name_other`,
          `RHS`.`salary` AS `salary_other`
   FROM `df_instructor` AS `LHS`
   CROSS JOIN
     (SELECT `dept_name`,
             MAX(`salary`) AS `salary`
      FROM `df_instructor`
      WHERE (`dept_name` = 'Biology')
      GROUP BY dept_name) AS RHS)
WHERE (dept_name != dept_name_other
       AND salary > salary_other)
ORDER BY name;",3,8,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0
spider/college_2/0061,"filter(input1, ""semester == 'Spring'""), anti_join(input0, line0, ""'id'"")","SELECT `name`
FROM
  (SELECT *
   FROM `df_instructor` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_teaches`
           WHERE (`semester` = 'Spring')) AS RHS
        WHERE (LHS.id = RHS.id) ))
ORDER BY name;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/college_2/0034,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'id','name'""), filter(line1, 'n >= 1L')","SELECT name
FROM
  (SELECT id,
          name,
          COUNT() AS n
   FROM
     (SELECT LHS.id AS id,
             LHS.name AS name,
             LHS.dept_name AS dept_name,
             LHS.salary AS salary,
             RHS.s_id AS s_id,
             RHS.i_id AS i_id
      FROM df_instructor AS LHS
      CROSS JOIN df_advisor AS RHS)
   GROUP BY id,
            name)
WHERE (n >= 1)
ORDER BY name;",3,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/college_2/0024,"filter(input1, 'year == 2009 | year == 2010'), natural_join3(input0, input1, line0)","SELECT DISTINCT name
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.dept_name AS dept_name,
          LHS.tot_cred AS tot_cred,
          LHS.course_id AS course_id,
          LHS.sec_id AS sec_id,
          LHS.semester AS semester,
          LHS.year AS YEAR,
          LHS.grade AS grade
   FROM
     (SELECT LHS.id AS id,
             LHS.name AS name,
             LHS.dept_name AS dept_name,
             LHS.tot_cred AS tot_cred,
             RHS.course_id AS course_id,
             RHS.sec_id AS sec_id,
             RHS.semester AS semester,
             RHS.year AS YEAR,
             RHS.grade AS grade
      FROM df_student AS LHS
      INNER JOIN df_takes AS RHS ON (LHS.id = RHS.id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_takes
      WHERE (YEAR = 2009.0
             OR YEAR = 2010.0)) AS RHS ON (LHS.id = RHS.id
                                           AND LHS.course_id = RHS.course_id
                                           AND LHS.sec_id = RHS.sec_id
                                           AND LHS.semester = RHS.semester
                                           AND LHS.year = RHS.year
                                           AND LHS.grade = RHS.grade))
ORDER BY name;",2,17,4,1,4,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/college_2/0021,"filter(input0, ""dept_name == 'Psychology'""), filter(input0, ""dept_name == 'Statistics'""), intersect(line0, line1, 'title')","SELECT `title`
FROM
  (SELECT `title`
   FROM `df_course`
   WHERE (`dept_name` = 'Psychology') INTERSECT
     SELECT `title`
     FROM `df_course` WHERE (`dept_name` = 'Statistics'))
ORDER BY title;",3,9,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0
spider/college_2/0069,"filter(input0, ""dept_name == 'Statistics'""), semi_join(input2, line0), natural_join(input1, line1)","SELECT `name`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `LHS`.`dept_name` AS `dept_name`,
          `LHS`.`tot_cred` AS `tot_cred`,
          `RHS`.`course_id` AS `course_id`,
          `RHS`.`sec_id` AS `sec_id`,
          `RHS`.`semester` AS `semester`,
          `RHS`.`year` AS `year`,
          `RHS`.`grade` AS `grade`
   FROM `df_student` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_takes` AS `LHS`
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_course`
              WHERE (`dept_name` = 'Statistics')) AS RHS
           WHERE (LHS.course_id = RHS.course_id) )) AS RHS ON (LHS.id = RHS.id))
ORDER BY name;",3,15,5,0,5,1,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0
spider/college_2/0001,"filter(input0, 'capacity >= 50'), semi_join(line0, input0)","SELECT DISTINCT building
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_classroom
      WHERE (capacity >= 50.0)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_classroom AS RHS
        WHERE (LHS.building = RHS.building
               AND LHS.room_number = RHS.room_number
               AND LHS.capacity = RHS.capacity) ))
ORDER BY building;",2,13,4,1,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/college_2/0043,"summarise(input0, 'n = n()', ""'semester','year'""), limit(line0, 'desc(n)')","SELECT semester,
       YEAR
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT semester,
                YEAR,
                COUNT() AS n
         FROM df_section
         GROUP BY semester,
                  YEAR)
      ORDER BY n DESC)
   LIMIT 1);",1,13,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0046,"summarise(input0, 'n = n()', ""'semester','year'""), limit(line0, 'n')","SELECT semester,
       YEAR
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT semester,
                YEAR,
                COUNT() AS n
         FROM df_takes
         GROUP BY semester,
                  YEAR)
      ORDER BY n)
   LIMIT 1);",1,12,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0077,"filter(input0, ""semester == 'Spring' | year == 2009""), natural_join(input0, line0), filter(line1, ""semester == 'Fall' | year >= 2010"")","SELECT `course_id`
FROM
  (SELECT `LHS`.`course_id` AS `course_id`,
          `LHS`.`sec_id` AS `sec_id`,
          `LHS`.`semester` AS `semester`,
          `LHS`.`year` AS `year`,
          `LHS`.`building` AS `building`,
          `LHS`.`room_number` AS `room_number`,
          `LHS`.`time_slot_id` AS `time_slot_id`
   FROM `df_section` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_section`
      WHERE (`semester` = 'Spring'
             OR `year` = 2009.0)) AS `RHS` ON (`LHS`.`course_id` = `RHS`.`course_id`
                                               AND `LHS`.`sec_id` = `RHS`.`sec_id`
                                               AND `LHS`.`semester` = `RHS`.`semester`
                                               AND `LHS`.`year` = `RHS`.`year`
                                               AND `LHS`.`building` = `RHS`.`building`
                                               AND `LHS`.`room_number` = `RHS`.`room_number`
                                               AND `LHS`.`time_slot_id` = `RHS`.`time_slot_id`))
WHERE (`semester` = 'Fall'
       OR YEAR >= 2010.0)
ORDER BY course_id;",3,12,3,0,3,1,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0
spider/college_2/0082,"filter(input0, 'salary != 42000'), summarise(line0, 'meansalary = mean(salary, na.rm = T)', ""'dept_name'"")","SELECT dept_name,
       meansalary AS avg__salary_
FROM
  (SELECT dept_name,
          AVG(salary) AS meansalary
   FROM
     (SELECT *
      FROM df_instructor
      WHERE (salary != 42000.0))
   GROUP BY dept_name)
ORDER BY dept_name;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_2/0047,"filter(input0, ""dept_name == 'History'""), inner_join(line0, input1, ""'id' = 's_id'"")","SELECT `i_id`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `LHS`.`dept_name` AS `dept_name`,
          `LHS`.`tot_cred` AS `tot_cred`,
          `RHS`.`i_id` AS `i_id`
   FROM
     (SELECT *
      FROM `df_student`
      WHERE (`dept_name` = 'History')) AS LHS
   INNER JOIN df_advisor AS RHS ON (LHS.id = RHS.s_id))
ORDER BY i_id;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/college_2/0083,"filter(input0, ""dept_name == 'Biology'""), mutate(line0, 'minsalary = min(salary)'), cross_join(line1, input0, 'salary >= minsalary & minsalary < salary.other')","SELECT DISTINCT `name_other` AS `name`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `LHS`.`dept_name` AS `dept_name`,
          `LHS`.`salary` AS `salary`,
          `LHS`.`minsalary` AS `minsalary`,
          `RHS`.`id` AS `id_other`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`dept_name` AS `dept_name_other`,
          `RHS`.`salary` AS `salary_other`
   FROM
     (SELECT `id`,
             `name`,
             `dept_name`,
             `salary`,
             MIN(`salary`) OVER () AS `minsalary`
      FROM `df_instructor`
      WHERE (`dept_name` = 'Biology')) AS LHS
   CROSS JOIN df_instructor AS RHS)
WHERE (salary >= minsalary
       AND minsalary < salary_other)
ORDER BY name;",3,10,3,1,3,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0
spider/college_2/0080,"summarise(input0, 'salary = max(salary)', ''), anti_join(input0, line0, '')","SELECT salary
FROM
  (SELECT *
   FROM df_instructor AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT MAX(salary) AS salary
           FROM df_instructor) AS RHS
        WHERE (LHS.salary = RHS.salary) ))
ORDER BY salary;",2,12,4,0,4,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
spider/college_2/0081,"filter(input0, ""semester == 'Spring' & year >= 2010""), mutate(line0, 'n_distinct = n_distinct(id)')","SELECT DISTINCT COUNT(DISTINCT `id`) OVER () AS `count__distinct_id_`
FROM `df_teaches`
WHERE (`semester` = 'Spring'
       AND YEAR >= 2010.0)
ORDER BY count__distinct_id_;",2,7,1,2,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/college_2/0014,"anti_join(input0, input1, ""'course_id'"")","SELECT title
FROM
  (SELECT *
   FROM df_course AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_prereq AS RHS
        WHERE (LHS.course_id = RHS.course_id) ))
ORDER BY title;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/college_2/0009,"summarise(input0, 'n_distinct = n_distinct(dept_name)', '')","SELECT n_distinct AS count_distinct_dept_name_
FROM
  (SELECT COUNT(DISTINCT dept_name) AS n_distinct
   FROM df_course)
ORDER BY count_distinct_dept_name_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0025,"summarise(input0, 'n = n()', ""'dept_name'""), limit(line0, 'desc(n)')","SELECT dept_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT dept_name,
                COUNT() AS n
         FROM df_course
         GROUP BY dept_name)
      ORDER BY n DESC)
   LIMIT 3);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0011,"summarise(input1, 'n = n()', ""'course_id'""), filter(line0, 'n == 2L'), semi_join(input0, line1)","SELECT title
FROM
  (SELECT *
   FROM df_course AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT course_id,
                     COUNT() AS n
              FROM df_prereq
              GROUP BY course_id)
           WHERE (n = 2)) AS RHS
        WHERE (LHS.course_id = RHS.course_id) ))
ORDER BY title;",3,14,5,0,5,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0
spider/college_2/0060,"anti_join(input0, input1, '')","SELECT id
FROM
  (SELECT *
   FROM df_instructor AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_teaches AS RHS
        WHERE (LHS.id = RHS.id) ))
ORDER BY id;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/college_2/0079,"filter(input0, ""semester != 'Spring' | year > 2010""), filter(line0, ""semester != 'Fall' | year == 2009"")","SELECT `course_id`
FROM
  (SELECT *
   FROM `df_section`
   WHERE (`semester` != 'Spring'
          OR `year` > 2010.0))
WHERE (`semester` != 'Fall'
       OR YEAR = 2009.0)
ORDER BY course_id;",2,9,2,0,2,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/college_2/0029,df_department,"SELECT dept_name,
       building
FROM df_department
ORDER BY dept_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0010,"summarise(input0, 'n = n()', ""'dept_name'""), filter(line0, ""dept_name == 'Physics'"")","SELECT `n` AS `count_distinct_course_id_`
FROM
  (SELECT `dept_name`,
          COUNT() AS `n`
   FROM `df_course`
   GROUP BY `dept_name`)
WHERE (`dept_name` = 'Physics')
ORDER BY count_distinct_course_id_;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_2/0044,"summarise(input0, 'n = n()', ""'dept_name','tot_cred'""), limit(line0, 'desc(n)')","SELECT dept_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT dept_name,
                tot_cred,
                COUNT() AS n
         FROM df_student
         GROUP BY dept_name,
                  tot_cred)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0073,"natural_join(input0, input1), semi_join(line0, input0)","SELECT name,
       course_id
FROM
  (SELECT *
   FROM
     (SELECT LHS.id AS id,
             LHS.name AS name,
             LHS.dept_name AS dept_name,
             LHS.salary AS salary,
             RHS.course_id AS course_id,
             RHS.sec_id AS sec_id,
             RHS.semester AS semester,
             RHS.year AS YEAR
      FROM df_instructor AS LHS
      INNER JOIN df_teaches AS RHS ON (LHS.id = RHS.id)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_instructor AS RHS
        WHERE (LHS.id = RHS.id
               AND LHS.name = RHS.name
               AND LHS.dept_name = RHS.dept_name
               AND LHS.salary = RHS.salary) ))
ORDER BY name;",2,13,4,0,4,1,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0
spider/college_2/0070,"filter(input0, ""dept_name != 'Psychology'""), anti_join(input1, line0, ""'course_id'"")","SELECT `building`,
       `room_number`,
       `semester`,
       `year`
FROM
  (SELECT *
   FROM `df_section` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_course`
           WHERE (`dept_name` != 'Psychology')) AS RHS
        WHERE (LHS.course_id = RHS.course_id) ))
ORDER BY building;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/college_2/0028,"limit(input0, 'budget')","SELECT dept_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_department
      ORDER BY budget)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_2/0049,"anti_join(input0, input1, ""'course_id'"")","SELECT course_id
FROM
  (SELECT *
   FROM df_course AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_prereq AS RHS
        WHERE (LHS.course_id = RHS.course_id) ))
ORDER BY course_id;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/college_2/0031,df_instructor,"SELECT id,
       name,
       dept_name,
       salary
FROM df_instructor
ORDER BY id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/document_management/0002,"limit(input0, 'desc(access_count)')","SELECT document_name,
       access_count
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_documents
      ORDER BY access_count DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/document_management/0017,"summarise(input0, 'n = n()', ""'role_code'""), limit(line0, 'n')","SELECT n AS count___
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT role_code,
                COUNT() AS n
         FROM df_users
         GROUP BY role_code)
      ORDER BY n)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/document_management/0003,"summarise(input0, 'n = n()', ""'document_type_code'""), filter(line0, 'n > 4L'), mutate(line1, 'n = n()')","SELECT document_type_code
FROM
  (SELECT document_type_code,
          COUNT() AS n
   FROM df_documents
   GROUP BY document_type_code)
WHERE (n > 4)
ORDER BY document_type_code;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/document_management/0022,"mutate(input0, 'n = n()'), filter(line0, 'n != 2L')","SELECT DISTINCT document_type_code
FROM
  (SELECT document_code,
          document_structure_code,
          document_type_code,
          access_count,
          document_name,
          COUNT(*) OVER () AS n
   FROM df_documents)
WHERE (n != 2)
ORDER BY document_type_code;",2,7,2,1,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/document_management/0013,"natural_join3(input0, input1, input2), filter(line0, ""functional_area_description == 'Acknowledgement'""), mutate(line1, 'meanaccess_count = mean(access_count, na.rm = T)')","SELECT DISTINCT AVG(`access_count`) OVER () AS `avg_t1_access_count_`
FROM
  (SELECT `LHS`.`functional_area_code` AS `functional_area_code`,
          `LHS`.`parent_functional_area_code` AS `parent_functional_area_code`,
          `LHS`.`functional_area_description` AS `functional_area_description`,
          `LHS`.`document_code` AS `document_code`,
          `LHS`.`document_structure_code` AS `document_structure_code`,
          `LHS`.`document_type_code` AS `document_type_code`,
          `LHS`.`access_count` AS `access_count`,
          `LHS`.`document_name` AS `document_name`
   FROM
     (SELECT `LHS`.`functional_area_code` AS `functional_area_code`,
             `LHS`.`parent_functional_area_code` AS `parent_functional_area_code`,
             `LHS`.`functional_area_description` AS `functional_area_description`,
             `RHS`.`document_code` AS `document_code`,
             `RHS`.`document_structure_code` AS `document_structure_code`,
             `RHS`.`document_type_code` AS `document_type_code`,
             `RHS`.`access_count` AS `access_count`,
             `RHS`.`document_name` AS `document_name`
      FROM `df_functional_areas` AS `LHS`
      CROSS JOIN `df_documents` AS `RHS`) AS `LHS`
   INNER JOIN `df_document_functional_areas` AS `RHS` ON (`LHS`.`functional_area_code` = `RHS`.`functional_area_code`
                                                          AND `LHS`.`document_code` = `RHS`.`document_code`))
WHERE (`functional_area_description` = 'Acknowledgement')
ORDER BY avg_t1_access_count_;",3,10,3,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0
spider/document_management/0006,"mutate(input0, 'n = n()'), natural_join3(input0, input1, line0), limit(line1, 'desc(parent_document_structure_code)')","SELECT document_structure_description
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.document_structure_code AS document_structure_code,
                LHS.parent_document_structure_code AS parent_document_structure_code,
                LHS.document_structure_description AS document_structure_description,
                LHS.document_code AS document_code,
                LHS.document_type_code AS document_type_code,
                LHS.access_count AS access_count,
                LHS.document_name AS document_name,
                RHS.n AS n
         FROM
           (SELECT LHS.document_structure_code AS document_structure_code,
                   LHS.parent_document_structure_code AS parent_document_structure_code,
                   LHS.document_structure_description AS document_structure_description,
                   RHS.document_code AS document_code,
                   RHS.document_type_code AS document_type_code,
                   RHS.access_count AS access_count,
                   RHS.document_name AS document_name
            FROM df_document_structures AS LHS
            INNER JOIN df_documents AS RHS ON (LHS.document_structure_code = RHS.document_structure_code)) AS LHS
         INNER JOIN
           (SELECT document_structure_code,
                   parent_document_structure_code,
                   document_structure_description,
                   COUNT(*) OVER () AS n
            FROM df_document_structures) AS RHS ON (LHS.document_structure_code = RHS.document_structure_code
                                                    AND LHS.parent_document_structure_code = RHS.parent_document_structure_code
                                                    AND LHS.document_structure_description = RHS.document_structure_description))
      ORDER BY parent_document_structure_code DESC)
   LIMIT 1);",2,17,6,0,6,2,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
spider/document_management/0004,"summarise(input0, 'n = n()', ""'access_count','document_type_code'""), summarise(line0, 'sumaccess_count = sum(access_count)', ""'document_type_code'""), limit(line1, 'sumaccess_count')","SELECT sumaccess_count AS sum_access_count_
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT document_type_code,
                SUM(access_count) AS sumaccess_count
         FROM
           (SELECT access_count,
                   document_type_code,
                   COUNT() AS n
            FROM df_documents
            GROUP BY access_count,
                     document_type_code)
         GROUP BY document_type_code)
      ORDER BY sumaccess_count)
   LIMIT 1);",2,11,5,0,5,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/document_management/0012,"mutate(input0, 'n = n()'), limit(line0, 'role_code')","SELECT user_name,
       password
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT user_id,
                role_code,
                user_name,
                user_login,
                password,
                COUNT(*) OVER () AS n
         FROM df_users)
      ORDER BY role_code)
   LIMIT 1);",1,10,4,0,4,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/document_management/0015,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'document_name','document_structure_code'""), limit(line1, 'desc(n)')","SELECT document_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT document_name,
                document_structure_code,
                COUNT() AS n
         FROM
           (SELECT LHS.document_code AS document_code,
                   LHS.document_structure_code AS document_structure_code,
                   LHS.document_type_code AS document_type_code,
                   LHS.access_count AS access_count,
                   LHS.document_name AS document_name,
                   RHS.section_id AS section_id,
                   RHS.section_sequence AS section_sequence,
                   RHS.section_code AS section_code,
                   RHS.section_title AS section_title
            FROM df_documents AS LHS
            INNER JOIN df_document_sections AS RHS ON (LHS.document_code = RHS.document_code))
         GROUP BY document_name,
                  document_structure_code)
      ORDER BY n DESC)
   LIMIT 1);",2,13,5,0,5,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/document_management/0005,"summarise(input0, 'meanaccess_count = mean(access_count, na.rm = T)', ""'access_count','document_code'""), summarise(line0, 'meanaccess_count = mean(access_count, na.rm = T)', '')","SELECT meanaccess_count AS avg_access_count_
FROM
  (SELECT AVG(access_count) AS meanaccess_count
   FROM
     (SELECT access_count,
             document_code,
             AVG(access_count) AS meanaccess_count
      FROM df_documents
      GROUP BY access_count,
               document_code))
ORDER BY avg_access_count_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/document_management/0018,"mutate(input0, 'n_distinct = n_distinct(role_code)'), inner_join(line0, input1, ""'n_distinct' = 'user_id','role_code' = 'role_code'"")","SELECT role_description
FROM
  (SELECT LHS.role_code AS role_code,
          LHS.role_description AS role_description,
          LHS.n_distinct AS n_distinct,
          RHS.user_name AS user_name,
          RHS.user_login AS user_login,
          RHS.password AS password
   FROM
     (SELECT role_code,
             role_description,
             COUNT(DISTINCT role_code) OVER () AS n_distinct
      FROM df_roles) AS LHS
   INNER JOIN df_users AS RHS ON (LHS.n_distinct = RHS.user_id
                                  AND LHS.role_code = RHS.role_code))
ORDER BY role_description;",2,9,3,1,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/document_management/0019,"summarise(input0, 'n = n()', ""'access_count','document_structure_code'""), summarise(line0, 'meanaccess_count = mean(access_count, na.rm = T)', ""'document_structure_code'""), limit(line1, 'document_structure_code')","SELECT meanaccess_count AS avg_access_count_
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT document_structure_code,
                AVG(access_count) AS meanaccess_count
         FROM
           (SELECT access_count,
                   document_structure_code,
                   COUNT() AS n
            FROM df_documents
            GROUP BY access_count,
                     document_structure_code)
         GROUP BY document_structure_code)
      ORDER BY document_structure_code)
   LIMIT 1);",2,11,5,0,5,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/document_management/0007,"filter(input0, ""document_name == 'David CV'"")","SELECT `document_type_code`
FROM `df_documents`
WHERE (`document_name` = 'David CV')
ORDER BY document_type_code;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/document_management/0021,"summarise(input0, 'n = n()', ""'role_code'""), semi_join(line0, input0)","SELECT n AS count___,
       role_code
FROM
  (SELECT *
   FROM
     (SELECT role_code,
             COUNT() AS n
      FROM df_users
      GROUP BY role_code) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_users AS RHS
        WHERE (LHS.role_code = RHS.role_code) ))
ORDER BY count___;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/document_management/0001,"intersect(input0, input0, 'document_name'), left_join(line0, input0)","SELECT document_name,
       access_count
FROM
  (SELECT LHS.document_name AS document_name,
          RHS.document_code AS document_code,
          RHS.document_structure_code AS document_structure_code,
          RHS.document_type_code AS document_type_code,
          RHS.access_count AS access_count
   FROM
     (SELECT document_name
      FROM df_documents INTERSECT SELECT document_name
      FROM df_documents) AS LHS
   LEFT JOIN df_documents AS RHS ON (LHS.document_name = RHS.document_name))
ORDER BY document_name;",2,10,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0
spider/document_management/0014,"semi_join(input1, input2), anti_join(input0, line0, ""'document_code'"")","SELECT document_name
FROM
  (SELECT *
   FROM df_documents AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_document_sections AS LHS
           WHERE EXISTS
               (SELECT 1
                FROM df_document_sections_images AS RHS
                WHERE (LHS.section_id = RHS.section_id) )) AS RHS
        WHERE (LHS.document_code = RHS.document_code) ))
ORDER BY document_name;",2,17,5,0,5,0,4,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
spider/document_management/0009,"mutate(input0, 'sumaccess_count = sum(access_count)'), filter(line0, 'sumaccess_count > 10000L | sumaccess_count == access_count')","SELECT DISTINCT document_type_code
FROM
  (SELECT document_code,
          document_structure_code,
          document_type_code,
          access_count,
          document_name,
          SUM(access_count) OVER () AS sumaccess_count
   FROM df_documents)
WHERE (sumaccess_count > 10000
       OR sumaccess_count = access_count)
ORDER BY document_type_code;",2,8,2,1,2,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/document_management/0011,"anti_join(input0, input1, ""'document_code'"")","SELECT document_name
FROM
  (SELECT *
   FROM df_documents AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_document_sections AS RHS
        WHERE (LHS.document_code = RHS.document_code) ))
ORDER BY document_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/document_management/0010,"filter(input0, ""document_name == 'David CV'""), semi_join(input1, line0)","SELECT `section_title`
FROM
  (SELECT *
   FROM `df_document_sections` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_documents`
           WHERE (`document_name` = 'David CV')) AS RHS
        WHERE (LHS.document_code = RHS.document_code) ))
ORDER BY section_title;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/behavior_monitoring/0033,"filter(input0, ""state_province_county == 'Texas'""), natural_join(input1, line0)","SELECT `monthly_rental`
FROM
  (SELECT `LHS`.`student_id` AS `student_id`,
          `LHS`.`address_id` AS `address_id`,
          `LHS`.`date_address_from` AS `date_address_from`,
          `LHS`.`date_address_to` AS `date_address_to`,
          `LHS`.`monthly_rental` AS `monthly_rental`,
          `LHS`.`other_details` AS `other_details`,
          `RHS`.`line_1` AS `line_1`,
          `RHS`.`line_2` AS `line_2`,
          `RHS`.`line_3` AS `line_3`,
          `RHS`.`city` AS `city`,
          `RHS`.`zip_postcode` AS `zip_postcode`,
          `RHS`.`state_province_county` AS `state_province_county`,
          `RHS`.`country` AS `country`,
          `RHS`.`other_address_details` AS `other_address_details`
   FROM `df_student_addresses` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_addresses`
      WHERE (`state_province_county` = 'Texas')) AS RHS ON (LHS.address_id = RHS.address_id))
ORDER BY monthly_rental;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0037,"filter(input0, 'zip_postcode == 918L'), semi_join(input1, line0)","SELECT email_address
FROM
  (SELECT *
   FROM df_teachers AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_addresses
           WHERE (zip_postcode = 918)) AS RHS
        WHERE (LHS.address_id = RHS.address_id) ))
ORDER BY email_address;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/behavior_monitoring/0002,"intersect(input0, input0, 'date_of_notes')","SELECT date_of_notes
FROM
  (SELECT date_of_notes
   FROM df_assessment_notes INTERSECT SELECT date_of_notes
   FROM df_assessment_notes)
ORDER BY date_of_notes;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/behavior_monitoring/0036,"filter(input1, ""first_name == 'Lyla'""), semi_join(input0, line0)","SELECT `zip_postcode`
FROM
  (SELECT *
   FROM `df_addresses` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_teachers`
           WHERE (`first_name` = 'Lyla')) AS RHS
        WHERE (LHS.address_id = RHS.address_id) ))
ORDER BY zip_postcode;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/behavior_monitoring/0017,df_teachers,"SELECT first_name,
       last_name
FROM df_teachers
ORDER BY first_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0008,"intersect(input0, input0, 'cell_mobile_number'), semi_join(input0, line0)","SELECT cell_mobile_number,
       email_address
FROM
  (SELECT *
   FROM df_students AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT cell_mobile_number
           FROM df_students INTERSECT SELECT cell_mobile_number
           FROM df_students) AS RHS
        WHERE (LHS.cell_mobile_number = RHS.cell_mobile_number) ))
ORDER BY cell_mobile_number;",2,14,5,0,5,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0
spider/behavior_monitoring/0039,"anti_join(input0, input1, ""'teacher_id'"")","SELECT DISTINCT last_name
FROM
  (SELECT *
   FROM df_teachers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_detention AS RHS
        WHERE (LHS.teacher_id = RHS.teacher_id) ))
ORDER BY last_name;",1,11,3,1,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/behavior_monitoring/0038,"anti_join(input0, input1, ""'student_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT *
   FROM df_students AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_behavior_incident AS RHS
        WHERE (LHS.student_id = RHS.student_id) ))
ORDER BY count___;",2,12,3,1,3,0,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
spider/behavior_monitoring/0003,"summarise(input0, 'n = n()', ""'city','line_3'""), filter(line0, 'n < 197L')","SELECT DISTINCT n AS count___
FROM
  (SELECT city,
          line_3,
          COUNT() AS n
   FROM df_addresses
   GROUP BY city,
            line_3)
WHERE (n < 197)
ORDER BY count___;",2,6,2,1,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0027,"filter(input0, ""first_name == 'Fanny'""), semi_join(input1, line0)","SELECT `date_of_notes`
FROM
  (SELECT *
   FROM `df_assessment_notes` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_students`
           WHERE (`first_name` = 'Fanny')) AS RHS
        WHERE (LHS.student_id = RHS.student_id) ))
ORDER BY date_of_notes;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/behavior_monitoring/0022,"summarise(input1, 'n = n()', ""'detention_type_code','teacher_id'""), inner_join(input0, line0, ""'teacher_id'""), filter(line1, ""detention_type_code == 'AFTER' & n > 1L"")","SELECT `teacher_id`,
       `last_name`
FROM
  (SELECT `LHS`.`teacher_id` AS `teacher_id`,
          `LHS`.`address_id` AS `address_id`,
          `LHS`.`first_name` AS `first_name`,
          `LHS`.`middle_name` AS `middle_name`,
          `LHS`.`last_name` AS `last_name`,
          `LHS`.`gender` AS `gender`,
          `LHS`.`cell_mobile_number` AS `cell_mobile_number`,
          `LHS`.`email_address` AS `email_address`,
          `LHS`.`other_details` AS `other_details`,
          `RHS`.`detention_type_code` AS `detention_type_code`,
          `RHS`.`n` AS `n`
   FROM `df_teachers` AS `LHS`
   INNER JOIN
     (SELECT `detention_type_code`,
             `teacher_id`,
             COUNT() AS `n`
      FROM `df_detention`
      GROUP BY `detention_type_code`,
               `teacher_id`) AS `RHS` ON (`LHS`.`teacher_id` = `RHS`.`teacher_id`))
WHERE (`detention_type_code` = 'AFTER'
       AND n > 1)
ORDER BY teacher_id;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0030,"filter(input0, ""last_name != 'Schultz'""), anti_join(input1, line0, ""'teacher_id'"")","SELECT `datetime_detention_start`,
       `datetime_detention_end`
FROM
  (SELECT *
   FROM `df_detention` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_teachers`
           WHERE (`last_name` != 'Schultz')) AS RHS
        WHERE (LHS.teacher_id = RHS.teacher_id) ))
ORDER BY datetime_detention_start;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/behavior_monitoring/0013,"mutate(input0, 'minmonthly_rental = min(monthly_rental)'), mutate(line0, 'monthly_rental = max(monthly_rental)')","SELECT DISTINCT MAX(monthly_rental) OVER () AS max_monthly_rental_,
                                         minmonthly_rental AS min_monthly_rental_
FROM
  (SELECT student_id,
          address_id,
          date_address_from,
          date_address_to,
          monthly_rental,
          other_details,
          MIN(monthly_rental) OVER () AS minmonthly_rental
   FROM df_student_addresses)
ORDER BY max_monthly_rental_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0006,"filter(input0, ""incident_type_code == 'NOISE'""), filter(line0, ""incident_type_code == 'NOISE'"")","SELECT `date_incident_start`,
       `date_incident_end`
FROM
  (SELECT *
   FROM `df_behavior_incident`
   WHERE (`incident_type_code` = 'NOISE'))
WHERE (`incident_type_code` = 'NOISE')
ORDER BY date_incident_start;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0004,"summarise(input0, 'n_distinct = n_distinct(incident_type_code)', ""'incident_type_code'""), mutate(line0, 'n_distinct = n_distinct(incident_type_code)')","SELECT DISTINCT COUNT(DISTINCT incident_type_code) OVER () AS count_distinct_incident_type_code_
FROM
  (SELECT incident_type_code,
          COUNT(DISTINCT incident_type_code) AS n_distinct
   FROM df_behavior_incident
   GROUP BY incident_type_code)
ORDER BY count_distinct_incident_type_code_;",2,8,2,3,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0012,"filter(input0, ""incident_type_code == 'VIOLENCE'"")","SELECT `incident_type_description`
FROM `df_ref_incident_type`
WHERE (`incident_type_code` = 'VIOLENCE')
ORDER BY incident_type_description;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0026,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'detention_type_code'""), inner_join(line1, line0, ""'n' = 'teacher_id','detention_type_code' = 'detention_type_code'"")","SELECT detention_type_code,
       detention_type_description
FROM
  (SELECT LHS.detention_type_code AS detention_type_code,
          LHS.n AS n,
          RHS.detention_type_description AS detention_type_description,
          RHS.detention_id AS detention_id,
          RHS.datetime_detention_start AS datetime_detention_start,
          RHS.datetime_detention_end AS datetime_detention_end,
          RHS.detention_summary AS detention_summary,
          RHS.other_details AS other_details
   FROM
     (SELECT detention_type_code,
             COUNT() AS n
      FROM
        (SELECT LHS.detention_type_code AS detention_type_code,
                LHS.detention_type_description AS detention_type_description,
                RHS.detention_id AS detention_id,
                RHS.teacher_id AS teacher_id,
                RHS.datetime_detention_start AS datetime_detention_start,
                RHS.datetime_detention_end AS datetime_detention_end,
                RHS.detention_summary AS detention_summary,
                RHS.other_details AS other_details
         FROM df_ref_detention_type AS LHS
         INNER JOIN df_detention AS RHS ON (LHS.detention_type_code = RHS.detention_type_code))
      GROUP BY detention_type_code) AS LHS
   INNER JOIN
     (SELECT LHS.detention_type_code AS detention_type_code,
             LHS.detention_type_description AS detention_type_description,
             RHS.detention_id AS detention_id,
             RHS.teacher_id AS teacher_id,
             RHS.datetime_detention_start AS datetime_detention_start,
             RHS.datetime_detention_end AS datetime_detention_end,
             RHS.detention_summary AS detention_summary,
             RHS.other_details AS other_details
      FROM df_ref_detention_type AS LHS
      INNER JOIN df_detention AS RHS ON (LHS.detention_type_code = RHS.detention_type_code)) AS RHS ON (LHS.n = RHS.teacher_id
                                                                                                        AND LHS.detention_type_code = RHS.detention_type_code))
ORDER BY detention_type_code;",3,13,5,0,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0015,df_assessment_notes,"SELECT notes_id,
       student_id,
       teacher_id,
       date_of_notes,
       text_of_notes,
       other_details
FROM df_assessment_notes
ORDER BY notes_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0005,df_detention,"SELECT DISTINCT detention_type_code
FROM df_detention
ORDER BY detention_type_code;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0016,"intersect(input0, input0, 'city')","SELECT city
FROM
  (SELECT city
   FROM df_addresses INTERSECT SELECT city
   FROM df_addresses)
ORDER BY city;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/behavior_monitoring/0032,"anti_join(input0, input1, ''), limit(line0, 'first_name')","SELECT cell_mobile_number
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM df_students AS LHS
         WHERE NOT EXISTS
             (SELECT 1
              FROM df_student_addresses AS RHS
              WHERE (LHS.student_id = RHS.student_id
                     AND LHS.address_id = RHS.address_id) ))
      ORDER BY first_name)
   LIMIT 1);",1,15,5,0,5,0,2,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/behavior_monitoring/0018,df_student_addresses,"SELECT student_id,
       address_id,
       date_address_from,
       date_address_to,
       monthly_rental,
       other_details
FROM df_student_addresses
ORDER BY student_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0035,"natural_join(input0, input1), summarise(line0, 'meanmonthly_rental = mean(monthly_rental, na.rm = T)', ""'line_1','zip_postcode'"")","SELECT line_1,
       meanmonthly_rental AS avg_t2_monthly_rental_
FROM
  (SELECT line_1,
          zip_postcode,
          AVG(monthly_rental) AS meanmonthly_rental
   FROM
     (SELECT LHS.address_id AS address_id,
             LHS.line_1 AS line_1,
             LHS.line_2 AS line_2,
             LHS.line_3 AS line_3,
             LHS.city AS city,
             LHS.zip_postcode AS zip_postcode,
             LHS.state_province_county AS state_province_county,
             LHS.country AS country,
             LHS.other_address_details AS other_address_details,
             RHS.student_id AS student_id,
             RHS.date_address_from AS date_address_from,
             RHS.date_address_to AS date_address_to,
             RHS.monthly_rental AS monthly_rental,
             RHS.other_details AS other_details
      FROM df_addresses AS LHS
      INNER JOIN df_student_addresses AS RHS ON (LHS.address_id = RHS.address_id))
   GROUP BY line_1,
            zip_postcode)
ORDER BY line_1;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0019,"summarise(input1, 'n = n()', ""'student_id','teacher_id'""), filter(line0, 'n == 1L'), inner_join(input0, line1, ""'student_id' = 'student_id','address_id' = 'n'"")","SELECT DISTINCT student_id,
                first_name
FROM
  (SELECT LHS.student_id AS student_id,
          LHS.address_id AS address_id,
          LHS.first_name AS first_name,
          LHS.middle_name AS middle_name,
          LHS.last_name AS last_name,
          LHS.cell_mobile_number AS cell_mobile_number,
          LHS.email_address AS email_address,
          LHS.date_first_rental AS date_first_rental,
          LHS.date_left_university AS date_left_university,
          LHS.other_student_details AS other_student_details,
          RHS.teacher_id AS teacher_id
   FROM df_students AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT student_id,
                teacher_id,
                COUNT() AS n
         FROM df_assessment_notes
         GROUP BY student_id,
                  teacher_id)
      WHERE (n = 1)) AS RHS ON (LHS.student_id = RHS.student_id
                                AND LHS.address_id = RHS.n))
ORDER BY student_id;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0007,df_detention,"SELECT detention_summary
FROM df_detention
ORDER BY detention_summary;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0034,"filter(input0, ""state_province_county == 'Wisconsin'""), semi_join(input1, line0)","SELECT `first_name`,
       `last_name`
FROM
  (SELECT *
   FROM `df_students` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_addresses`
           WHERE (`state_province_county` = 'Wisconsin')) AS RHS
        WHERE (LHS.address_id = RHS.address_id) ))
ORDER BY first_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/behavior_monitoring/0021,"summarise(input1, 'n = n()', ""'date_incident_start','student_id'""), inner_join(input0, line0, ""'student_id' = 'n'"")","SELECT DISTINCT student_id,
                last_name
FROM
  (SELECT LHS.student_id AS student_id,
          LHS.address_id AS address_id,
          LHS.first_name AS first_name,
          LHS.middle_name AS middle_name,
          LHS.last_name AS last_name,
          LHS.cell_mobile_number AS cell_mobile_number,
          LHS.email_address AS email_address,
          LHS.date_first_rental AS date_first_rental,
          LHS.date_left_university AS date_left_university,
          LHS.other_student_details AS other_student_details,
          RHS.date_incident_start AS date_incident_start,
          RHS.student_id AS student_id_other
   FROM df_students AS LHS
   INNER JOIN
     (SELECT date_incident_start,
             student_id,
             COUNT() AS n
      FROM df_behavior_incident
      GROUP BY date_incident_start,
               student_id) AS RHS ON (LHS.student_id = RHS.n))
ORDER BY student_id;",2,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0001,"summarise(input0, 'n = n()', ""'other_details'"")","SELECT n AS count___
FROM
  (SELECT other_details,
          COUNT() AS n
   FROM df_assessment_notes
   GROUP BY other_details)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0009,"filter(input0, ""first_name == 'Emma' & last_name == 'Rohan'"")","SELECT `email_address`
FROM `df_students`
WHERE (`first_name` = 'Emma'
       AND `last_name` = 'Rohan')
ORDER BY email_address;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0025,"mutate(input0, 'n = n()'), inner_join(input1, line0, ""'incident_id' = 'n','incident_type_code' = 'incident_type_code'"")","SELECT incident_type_code,
       incident_type_description
FROM
  (SELECT LHS.incident_id AS incident_id,
          LHS.incident_type_code AS incident_type_code,
          LHS.student_id AS student_id,
          LHS.date_incident_start AS date_incident_start,
          LHS.date_incident_end AS date_incident_end,
          LHS.incident_summary AS incident_summary,
          LHS.recommendations AS recommendations,
          LHS.other_details AS other_details,
          RHS.incident_type_description AS incident_type_description
   FROM df_behavior_incident AS LHS
   INNER JOIN
     (SELECT incident_type_code,
             incident_type_description,
             COUNT(*) OVER () AS n
      FROM df_ref_incident_type) AS RHS ON (LHS.incident_id = RHS.n
                                            AND LHS.incident_type_code = RHS.incident_type_code))
ORDER BY incident_type_code;",2,8,3,0,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0011,"filter(input0, ""last_name == 'Medhurst'"")","SELECT `gender`
FROM `df_teachers`
WHERE (`last_name` = 'Medhurst')
ORDER BY gender;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0029,"filter(input0, ""last_name == 'Fahey'""), semi_join(input1, line0)","SELECT `date_incident_start`,
       `date_incident_end`
FROM
  (SELECT *
   FROM `df_behavior_incident` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_students`
           WHERE (`last_name` = 'Fahey')) AS RHS
        WHERE (LHS.student_id = RHS.student_id) ))
ORDER BY date_incident_start;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/behavior_monitoring/0010,"summarise(input0, 'n_distinct = n_distinct(student_id)', '')","SELECT n_distinct AS count_distinct_student_id_
FROM
  (SELECT COUNT(DISTINCT student_id) AS n_distinct
   FROM df_students_in_detention)
ORDER BY count_distinct_student_id_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/behavior_monitoring/0040,"semi_join(input0, input1), semi_join(line0, input2)","SELECT line_1
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_addresses AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM df_students AS RHS
           WHERE (LHS.address_id = RHS.address_id) )) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_teachers AS RHS
        WHERE (LHS.address_id = RHS.address_id) ))
ORDER BY line_1;",2,16,5,0,5,0,4,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0
spider/behavior_monitoring/0028,"filter(input0, ""last_name != 'Schuster'""), anti_join(input1, line0, ""'teacher_id'"")","SELECT `text_of_notes`
FROM
  (SELECT *
   FROM `df_assessment_notes` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_teachers`
           WHERE (`last_name` != 'Schuster')) AS RHS
        WHERE (LHS.teacher_id = RHS.teacher_id) ))
ORDER BY text_of_notes;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/behavior_monitoring/0031,"natural_join(input0, input1), limit(line0, 'desc(date_address_from)')","SELECT address_id,
       zip_postcode
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.address_id AS address_id,
                LHS.line_1 AS line_1,
                LHS.line_2 AS line_2,
                LHS.line_3 AS line_3,
                LHS.city AS city,
                LHS.zip_postcode AS zip_postcode,
                LHS.state_province_county AS state_province_county,
                LHS.country AS country,
                LHS.other_address_details AS other_address_details,
                RHS.student_id AS student_id,
                RHS.date_address_from AS date_address_from,
                RHS.date_address_to AS date_address_to,
                RHS.monthly_rental AS monthly_rental,
                RHS.other_details AS other_details
         FROM df_addresses AS LHS
         INNER JOIN df_student_addresses AS RHS ON (LHS.address_id = RHS.address_id))
      ORDER BY date_address_from DESC)
   LIMIT 1);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/station_weather/0002,df_train,"SELECT train_number,
       name
FROM df_train
ORDER BY train_number;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/station_weather/0008,"inner_join(input0, input1, ""'id' = 'station_id'""), summarise(line0, 'n = n()', ""'network_name','services'"")","SELECT n AS count___,
       network_name,
       services
FROM
  (SELECT network_name,
          services,
          COUNT() AS n
   FROM
     (SELECT id,
             network_name,
             services,
             local_authority,
             train_id,
             id AS station_id
      FROM
        (SELECT LHS.id AS id,
                LHS.network_name AS network_name,
                LHS.services AS services,
                LHS.local_authority AS local_authority,
                RHS.train_id AS train_id
         FROM df_station AS LHS
         INNER JOIN df_route AS RHS ON (LHS.id = RHS.station_id)))
   GROUP BY network_name,
            services)
ORDER BY count___;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/station_weather/0003,"filter(input0, ""destination == 'Chennai'"")","SELECT `time`,
       `train_number`
FROM `df_train`
WHERE (`destination` = 'Chennai')
ORDER BY TIME;",1,4,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/station_weather/0006,"summarise(input0, 'n = n()', ""'origin'"")","SELECT origin,
       n AS count___
FROM
  (SELECT origin,
          COUNT() AS n
   FROM df_train
   GROUP BY origin)
ORDER BY origin;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/station_weather/0012,"summarise(input0, 'n_distinct = n_distinct(services)', '')","SELECT n_distinct AS count_distinct_services_
FROM
  (SELECT COUNT(DISTINCT services) AS n_distinct
   FROM df_station)
ORDER BY count_distinct_services_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/station_weather/0015,"mutate(input0, 'wind_speed_mph = max(wind_speed_mph)'), mutate(line0, 'minlow_temperature = min(low_temperature)')","SELECT DISTINCT MIN(low_temperature) OVER () AS min_low_temperature_,
                                          wind_speed_mph AS max_wind_speed_mph_
FROM
  (SELECT station_id,
          day_of_week,
          high_temperature,
          low_temperature,
          precipitation,
          MAX(wind_speed_mph) OVER () AS wind_speed_mph
   FROM df_weekly_weather)
ORDER BY min_low_temperature_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/station_weather/0005,"filter(input0, ""destination != 'Chennai' & destination == 'Guruvayur'""), natural_join(input0, line0)","SELECT `train_number`,
       `time`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`train_number` AS `train_number`,
          `LHS`.`name` AS `name`,
          `LHS`.`origin` AS `origin`,
          `LHS`.`destination` AS `destination`,
          `LHS`.`time` AS `time`,
          `LHS`.`interval` AS `interval`
   FROM `df_train` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_train`
      WHERE (`destination` != 'Chennai'
             AND `destination` = 'Guruvayur')) AS RHS ON (LHS.id = RHS.id
                                                          AND LHS.train_number = RHS.train_number
                                                          AND LHS.name = RHS.name
                                                          AND LHS.origin = RHS.origin
                                                          AND LHS.destination = RHS.destination
                                                          AND LHS.time = RHS.time
                                                          AND LHS.interval = RHS.interval))
ORDER BY train_number;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/station_weather/0016,"summarise(input0, 'n = n()', ""'interval','origin'""), filter(line0, 'n > 1L'), mutate(line1, 'n = n()')","SELECT origin
FROM
  (SELECT interval, origin,
                    COUNT() AS n
   FROM df_train
   GROUP BY interval, origin)
WHERE (n > 1)
ORDER BY origin;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/station_weather/0007,"mutate(input0, 'n = n()'), natural_join3(input0, input1, line0), limit(line1, 'desc(n)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.id AS id,
                LHS.train_number AS train_number,
                LHS.name AS name,
                LHS.origin AS origin,
                LHS.destination AS destination,
                LHS.time AS TIME,
                LHS.interval AS interval,
                LHS.train_id AS train_id,
                LHS.station_id AS station_id,
                RHS.n AS n
         FROM
           (SELECT LHS.id AS id,
                   LHS.train_number AS train_number,
                   LHS.name AS name,
                   LHS.origin AS origin,
                   LHS.destination AS destination,
                   LHS.time AS TIME,
                   LHS.interval AS interval,
                   RHS.train_id AS train_id,
                   RHS.station_id AS station_id
            FROM df_train AS LHS
            CROSS JOIN df_route AS RHS) AS LHS
         INNER JOIN
           (SELECT id,
                   train_number,
                   name,
                   origin,
                   destination,
                   TIME, interval, COUNT(*) OVER () AS n
            FROM df_train) AS RHS ON (LHS.id = RHS.id
                                      AND LHS.train_number = RHS.train_number
                                      AND LHS.name = RHS.name
                                      AND LHS.origin = RHS.origin
                                      AND LHS.destination = RHS.destination
                                      AND LHS.time = RHS.time
                                      AND LHS.interval = RHS.interval))
      ORDER BY n DESC)
   LIMIT 1);",2,19,6,0,6,1,0,1,1,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
spider/station_weather/0001,df_station,"SELECT local_authority,
       services
FROM df_station
ORDER BY local_authority;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/station_weather/0014,"filter(input1, 'precipitation > 50'), summarise(line0, 'precipitation = max(precipitation)', ""'station_id','wind_speed_mph'""), inner_join(input0, line1, ""'id' = 'station_id'"")","SELECT DISTINCT id,
                local_authority
FROM
  (SELECT LHS.id AS id,
          LHS.network_name AS network_name,
          LHS.services AS services,
          LHS.local_authority AS local_authority,
          RHS.wind_speed_mph AS wind_speed_mph,
          RHS.precipitation AS precipitation
   FROM df_station AS LHS
   INNER JOIN
     (SELECT station_id,
             wind_speed_mph,
             MAX(precipitation) AS precipitation
      FROM df_weekly_weather
      WHERE (precipitation > 50.0)
      GROUP BY station_id,
               wind_speed_mph) AS RHS ON (LHS.id = RHS.station_id))
ORDER BY id;",3,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/station_weather/0009,"summarise(input0, 'meanhigh_temperature = mean(high_temperature, na.rm = T)', ""'day_of_week'"")","SELECT meanhigh_temperature AS avg_high_temperature_,
       day_of_week
FROM
  (SELECT day_of_week,
          AVG(high_temperature) AS meanhigh_temperature
   FROM df_weekly_weather
   GROUP BY day_of_week)
ORDER BY avg_high_temperature_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/local_govt_and_lot/0002,"filter(input0, ""organization_details == 'Denesik and Sons Party'""), natural_join(input1, line0)","SELECT DISTINCT `service_type_code`
FROM
  (SELECT `LHS`.`service_id` AS `service_id`,
          `LHS`.`organization_id` AS `organization_id`,
          `LHS`.`service_type_code` AS `service_type_code`,
          `LHS`.`service_details` AS `service_details`,
          `RHS`.`parent_organization_id` AS `parent_organization_id`,
          `RHS`.`organization_details` AS `organization_details`
   FROM `df_services` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_organizations`
      WHERE (`organization_details` = 'Denesik and Sons Party')) AS RHS ON (LHS.organization_id = RHS.organization_id))
ORDER BY service_type_code;",2,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/local_govt_and_lot/0017,"intersect(input0, input0, 'date_moved_in')","SELECT date_moved_in
FROM
  (SELECT date_moved_in
   FROM df_residents INTERSECT SELECT date_moved_in
   FROM df_residents)
ORDER BY date_moved_in;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/local_govt_and_lot/0008,"summarise(input1, 'n = n()', ""'customer_event_id','customer_event_note_id'""), filter(line0, 'n == 1L | n >= 3L'), semi_join(input0, line1)","SELECT customer_event_id,
       property_id
FROM
  (SELECT *
   FROM df_customer_events AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT customer_event_id,
                     customer_event_note_id,
                     COUNT() AS n
              FROM df_customer_event_notes
              GROUP BY customer_event_id,
                       customer_event_note_id)
           WHERE (n = 1
                  OR n >= 3)) AS RHS
        WHERE (LHS.customer_event_id = RHS.customer_event_id) ))
ORDER BY customer_event_id;",3,15,5,0,5,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0
spider/local_govt_and_lot/0003,"summarise(input1, 'n = n()', ""'date_requested','resident_id'""), natural_join(input0, line0)","SELECT resident_id,
       other_details,
       n AS count___
FROM
  (SELECT LHS.resident_id AS resident_id,
          LHS.property_id AS property_id,
          LHS.date_moved_in AS date_moved_in,
          LHS.date_moved_out AS date_moved_out,
          LHS.other_details AS other_details,
          RHS.date_requested AS date_requested,
          RHS.n AS n
   FROM df_residents AS LHS
   INNER JOIN
     (SELECT date_requested,
             resident_id,
             COUNT() AS n
      FROM df_residents_services
      GROUP BY date_requested,
               resident_id) AS RHS ON (LHS.resident_id = RHS.resident_id))
ORDER BY resident_id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/local_govt_and_lot/0013,"summarise(input0, 'maxdate_moved_in = max(date_moved_in)', ""'date_moved_in','date_moved_out'""), summarise(line0, 'maxdate_moved_in = max(date_moved_in)', '')","SELECT maxdate_moved_in AS max_date_moved_in_
FROM
  (SELECT MAX(date_moved_in) AS maxdate_moved_in
   FROM
     (SELECT date_moved_in,
             date_moved_out,
             MAX(date_moved_in) AS maxdate_moved_in
      FROM df_residents
      GROUP BY date_moved_in,
               date_moved_out))
ORDER BY max_date_moved_in_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/local_govt_and_lot/0006,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'customer_details','customer_id'""), filter(line1, 'n >= 3L')","SELECT customer_id,
       customer_details
FROM
  (SELECT customer_details,
          customer_id,
          COUNT() AS n
   FROM
     (SELECT LHS.customer_id AS customer_id,
             LHS.customer_details AS customer_details,
             RHS.customer_event_id AS customer_event_id,
             RHS.date_moved_in AS date_moved_in,
             RHS.property_id AS property_id,
             RHS.resident_id AS resident_id,
             RHS.thing_id AS thing_id
      FROM df_customers AS LHS
      INNER JOIN df_customer_events AS RHS ON (LHS.customer_id = RHS.customer_id))
   GROUP BY customer_details,
            customer_id)
WHERE (n >= 3)
ORDER BY customer_id;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/local_govt_and_lot/0004,"left_join(input1, input0), summarise(line0, 'n = n()', ""'service_details','service_id'""), limit(line1, 'desc(service_details)')","SELECT service_id,
       service_details,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT service_details,
                service_id,
                COUNT() AS n
         FROM
           (SELECT LHS.resident_id AS resident_id,
                   LHS.service_id AS service_id,
                   LHS.date_moved_in AS date_moved_in,
                   LHS.property_id AS property_id,
                   LHS.date_requested AS date_requested,
                   LHS.date_provided AS date_provided,
                   LHS.other_details AS other_details,
                   RHS.organization_id AS organization_id,
                   RHS.service_type_code AS service_type_code,
                   RHS.service_details AS service_details
            FROM df_residents_services AS LHS
            LEFT JOIN df_services AS RHS ON (LHS.service_id = RHS.service_id))
         GROUP BY service_details,
                  service_id)
      ORDER BY service_details DESC)
   LIMIT 1);",2,13,5,0,5,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/local_govt_and_lot/0012,"inner_join(input0, input0, ""'organization_id' = 'parent_organization_id','organization_details' = 'organization_details'""), anti_join(input0, line0, ""'parent_organization_id'"")","SELECT organization_id
FROM
  (SELECT *
   FROM df_organizations AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT organization_id,
                  organization_id AS parent_organization_id,
                  organization_details,
                  organization_id_other
           FROM
             (SELECT LHS.organization_id AS organization_id,
                     LHS.parent_organization_id AS parent_organization_id,
                     LHS.organization_details AS organization_details,
                     RHS.organization_id AS organization_id_other
              FROM df_organizations AS LHS
              INNER JOIN df_organizations AS RHS ON (LHS.organization_id = RHS.parent_organization_id
                                                     AND LHS.organization_details = RHS.organization_details))) AS RHS
        WHERE (LHS.parent_organization_id = RHS.parent_organization_id) ))
ORDER BY organization_id;",2,15,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
spider/local_govt_and_lot/0015,df_customer_events,"SELECT customer_event_id,
       date_moved_in,
       property_id
FROM df_customer_events
ORDER BY customer_event_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/local_govt_and_lot/0005,"natural_join(input0, input1), left_join(input1, line0)","SELECT thing_id,
       type_of_thing_code,
       organization_details
FROM
  (SELECT LHS.thing_id AS thing_id,
          LHS.organization_id AS organization_id,
          LHS.type_of_thing_code AS type_of_thing_code,
          LHS.service_type_code AS service_type_code,
          LHS.service_details AS service_details,
          RHS.parent_organization_id AS parent_organization_id,
          RHS.organization_details AS organization_details
   FROM df_things AS LHS
   LEFT JOIN
     (SELECT LHS.organization_id AS organization_id,
             LHS.parent_organization_id AS parent_organization_id,
             LHS.organization_details AS organization_details,
             RHS.thing_id AS thing_id,
             RHS.type_of_thing_code AS type_of_thing_code,
             RHS.service_type_code AS service_type_code,
             RHS.service_details AS service_details
      FROM df_organizations AS LHS
      INNER JOIN df_things AS RHS ON (LHS.organization_id = RHS.organization_id)) AS RHS ON (LHS.thing_id = RHS.thing_id
                                                                                             AND LHS.organization_id = RHS.organization_id
                                                                                             AND LHS.type_of_thing_code = RHS.type_of_thing_code
                                                                                             AND LHS.service_type_code = RHS.service_type_code
                                                                                             AND LHS.service_details = RHS.service_details))
ORDER BY thing_id;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
spider/local_govt_and_lot/0016,"anti_join(input0, input1, ""'customer_id'""), mutate(line0, 'n_distinct = n_distinct(customer_id)')","SELECT DISTINCT COUNT(DISTINCT customer_id) OVER () AS count___
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_customer_events AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY count___;",2,13,3,2,3,0,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
spider/local_govt_and_lot/0007,"inner_join(input1, input0, ""'customer_id'"")","SELECT date_moved_in,
       customer_id,
       customer_details
FROM
  (SELECT LHS.customer_event_id AS customer_event_id,
          LHS.customer_id AS customer_id,
          LHS.date_moved_in AS date_moved_in,
          LHS.property_id AS property_id,
          LHS.resident_id AS resident_id,
          LHS.thing_id AS thing_id,
          RHS.customer_details AS customer_details
   FROM df_customer_events AS LHS
   INNER JOIN df_customers AS RHS ON (LHS.customer_id = RHS.customer_id))
ORDER BY date_moved_in;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/local_govt_and_lot/0001,"summarise(input1, 'n = n()', ""'property_id'""), semi_join(line0, input0)","SELECT property_id,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT property_id,
             COUNT() AS n
      FROM df_residents
      GROUP BY property_id) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_properties AS RHS
        WHERE (LHS.property_id = RHS.property_id) ))
ORDER BY property_id;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/local_govt_and_lot/0009,"inner_join(input0, input1, ""'thing_id'""), filter(line0, ""status_of_thing_code == 'Close' | date_and_date < parse_datetime('2017-06-19 02:59:21')"")","SELECT DISTINCT `thing_id`,
                `type_of_thing_code`
FROM
  (SELECT `LHS`.`thing_id` AS `thing_id`,
          `LHS`.`organization_id` AS `organization_id`,
          `LHS`.`type_of_thing_code` AS `type_of_thing_code`,
          `LHS`.`service_type_code` AS `service_type_code`,
          `LHS`.`service_details` AS `service_details`,
          `RHS`.`date_and_date` AS `date_and_date`,
          `RHS`.`status_of_thing_code` AS `status_of_thing_code`
   FROM `df_things` AS `LHS`
   INNER JOIN `df_timed_status_of_things` AS `RHS` ON (`LHS`.`thing_id` = `RHS`.`thing_id`))
WHERE (`status_of_thing_code` = 'Close'
       OR `date_and_date` < parse_datetime('2017-06-19 02:59:21'))
ORDER BY thing_id;",2,8,2,1,2,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/local_govt_and_lot/0011,"mutate(input0, 'n_distinct = n_distinct(status_of_thing_code)')","SELECT DISTINCT COUNT(DISTINCT status_of_thing_code) OVER () AS count_distinct_status_of_thing_code_
FROM df_timed_status_of_things
ORDER BY count_distinct_status_of_thing_code_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/local_govt_and_lot/0010,"filter(input0, ""service_details != 'Unsatisfied'""), anti_join(input1, line0, ""'thing_id'""), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count_distinct_t2_location_code_`
FROM
  (SELECT *
   FROM `df_timed_locations_of_things` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_things`
           WHERE (`service_details` != 'Unsatisfied')) AS RHS
        WHERE (LHS.thing_id = RHS.thing_id) ))
ORDER BY count_distinct_t2_location_code_;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/program_share/0002,df_channel,"SELECT name
FROM df_channel
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/program_share/0017,"filter(input0, ""origin != 'Beijing'"")","SELECT `name`
FROM `df_program`
WHERE (`origin` != 'Beijing')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/program_share/0008,"summarise(input0, 'sumshare_in_percent = sum(share_in_percent)', ""'owner'""), left_join(input0, line0), filter(line1, 'sumshare_in_percent != share_in_percent')","SELECT DISTINCT sumshare_in_percent AS sum_share_in_percent_
FROM
  (SELECT LHS.channel_id AS channel_id,
          LHS.name AS name,
          LHS.owner AS OWNER,
          LHS.share_in_percent AS share_in_percent,
          LHS.rating_in_percent AS rating_in_percent,
          RHS.sumshare_in_percent AS sumshare_in_percent
   FROM df_channel AS LHS
   LEFT JOIN
     (SELECT OWNER,
             SUM(share_in_percent) AS sumshare_in_percent
      FROM df_channel
      GROUP BY OWNER) AS RHS ON (LHS.owner = RHS.owner))
WHERE (sumshare_in_percent != share_in_percent)
ORDER BY sum_share_in_percent_;",3,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/program_share/0003,"limit(input0, 'desc(share_in_percent)')","SELECT OWNER
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_channel
      ORDER BY share_in_percent DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/program_share/0013,"filter(input1, ""time_of_day != 'Morning'""), anti_join(input0, line0, '')","SELECT `name`
FROM
  (SELECT *
   FROM `df_program` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_broadcast`
           WHERE (`time_of_day` != 'Morning')) AS RHS
        WHERE (LHS.program_id = RHS.program_id) ))
ORDER BY name;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/program_share/0004,"summarise(input0, 'n = n()', ""'name','owner'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT name,
          OWNER,
          COUNT() AS n
   FROM df_program
   GROUP BY name,
            OWNER)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/program_share/0012,"mutate(input0, 'n_distinct = n_distinct(time_of_day)'), filter(line0, ""time_of_day != 'Night' | n_distinct > program_id"")","SELECT DISTINCT `n_distinct` AS `count_distinct_program_id_`
FROM
  (SELECT `channel_id`,
          `program_id`,
          `time_of_day`,
          COUNT(DISTINCT `time_of_day`) OVER () AS `n_distinct`
   FROM `df_broadcast`)
WHERE (`time_of_day` != 'Night'
       OR n_distinct > program_id)
ORDER BY count_distinct_program_id_;",2,9,2,2,2,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/program_share/0015,"intersect(input0, input0, 'origin')","SELECT origin
FROM
  (SELECT origin
   FROM df_program INTERSECT SELECT origin
   FROM df_program)
ORDER BY origin;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/program_share/0005,df_program,"SELECT name
FROM df_program
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/program_share/0016,"summarise(input0, 'n = n()', ""'owner'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count_distinct_owner_
FROM
  (SELECT OWNER,
          COUNT() AS n
   FROM df_channel
   GROUP BY OWNER)
ORDER BY count_distinct_owner_;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/program_share/0019,"summarise(input0, 'sumrating_in_percent = sum(rating_in_percent)', ""'owner'"")","SELECT sumrating_in_percent AS sum_rating_in_percent_,
       OWNER
FROM
  (SELECT OWNER,
          SUM(rating_in_percent) AS sumrating_in_percent
   FROM df_channel
   GROUP BY OWNER)
ORDER BY sum_rating_in_percent_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/program_share/0007,"limit(input0, 'desc(program_id)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_program
      ORDER BY program_id DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/program_share/0014,"filter(input1, ""time_of_day != 'Morning' & time_of_day == 'Night'""), semi_join(input0, line0)","SELECT `owner`
FROM
  (SELECT *
   FROM `df_program` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_broadcast`
           WHERE (`time_of_day` != 'Morning'
                  AND `time_of_day` = 'Night')) AS RHS
        WHERE (LHS.program_id = RHS.program_id) ))
ORDER BY OWNER;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/program_share/0009,"filter(input1, ""time_of_day == 'Morning'""), natural_join3(input0, input1, line0)","SELECT `name`
FROM
  (SELECT `LHS`.`channel_id` AS `channel_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`owner` AS `owner`,
          `LHS`.`share_in_percent` AS `share_in_percent`,
          `LHS`.`rating_in_percent` AS `rating_in_percent`,
          `LHS`.`program_id` AS `program_id`,
          `LHS`.`time_of_day` AS `time_of_day`
   FROM
     (SELECT `LHS`.`channel_id` AS `channel_id`,
             `LHS`.`name` AS `name`,
             `LHS`.`owner` AS `owner`,
             `LHS`.`share_in_percent` AS `share_in_percent`,
             `LHS`.`rating_in_percent` AS `rating_in_percent`,
             `RHS`.`program_id` AS `program_id`,
             `RHS`.`time_of_day` AS `time_of_day`
      FROM `df_channel` AS `LHS`
      INNER JOIN `df_broadcast` AS `RHS` ON (`LHS`.`channel_id` = `RHS`.`channel_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_broadcast`
      WHERE (`time_of_day` = 'Morning')) AS RHS ON (LHS.channel_id = RHS.channel_id
                                                    AND LHS.program_id = RHS.program_id
                                                    AND LHS.time_of_day = RHS.time_of_day))
ORDER BY name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/program_share/0011,"summarise(input0, 'n = n()', ""'channel_id','time_of_day'""), summarise(line0, 'n = n()', ""'time_of_day'"")","SELECT n AS count___,
       time_of_day
FROM
  (SELECT time_of_day,
          COUNT() AS n
   FROM
     (SELECT channel_id,
             time_of_day,
             COUNT() AS n
      FROM df_broadcast
      GROUP BY channel_id,
               time_of_day)
   GROUP BY time_of_day)
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/program_share/0010,"filter(input1, ""time_of_day == 'Morning' & time_of_day != 'Night'""), natural_join(input0, line0), inner_join(line1, line1, ""'program_id' = 'channel_id','name' = 'name'"")","SELECT `name`
FROM
  (SELECT `LHS`.`channel_id` AS `channel_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`owner` AS `owner`,
          `LHS`.`share_in_percent` AS `share_in_percent`,
          `LHS`.`rating_in_percent` AS `rating_in_percent`,
          `LHS`.`program_id` AS `program_id`,
          `LHS`.`time_of_day` AS `time_of_day`,
          `RHS`.`owner` AS `owner_other`,
          `RHS`.`share_in_percent` AS `share_in_percent_other`,
          `RHS`.`rating_in_percent` AS `rating_in_percent_other`,
          `RHS`.`program_id` AS `program_id_other`,
          `RHS`.`time_of_day` AS `time_of_day_other`
   FROM
     (SELECT `LHS`.`channel_id` AS `channel_id`,
             `LHS`.`name` AS `name`,
             `LHS`.`owner` AS `owner`,
             `LHS`.`share_in_percent` AS `share_in_percent`,
             `LHS`.`rating_in_percent` AS `rating_in_percent`,
             `RHS`.`program_id` AS `program_id`,
             `RHS`.`time_of_day` AS `time_of_day`
      FROM `df_channel` AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_broadcast`
         WHERE (`time_of_day` = 'Morning'
                AND `time_of_day` != 'Night')) AS `RHS` ON (`LHS`.`channel_id` = `RHS`.`channel_id`)) AS `LHS`
   INNER JOIN
     (SELECT `LHS`.`channel_id` AS `channel_id`,
             `LHS`.`name` AS `name`,
             `LHS`.`owner` AS `owner`,
             `LHS`.`share_in_percent` AS `share_in_percent`,
             `LHS`.`rating_in_percent` AS `rating_in_percent`,
             `RHS`.`program_id` AS `program_id`,
             `RHS`.`time_of_day` AS `time_of_day`
      FROM `df_channel` AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_broadcast`
         WHERE (`time_of_day` = 'Morning'
                AND `time_of_day` != 'Night')) AS RHS ON (LHS.channel_id = RHS.channel_id)) AS RHS ON (LHS.program_id = RHS.channel_id
                                                                                                       AND LHS.name = RHS.name))
ORDER BY name;",3,17,6,0,6,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0
spider/allergy_1/0042,"filter(input2, ""fname == 'Lisa'""), natural_join3(input0, input1, input2), natural_join4(input0, input2, line0, line1)","SELECT `allergy`,
       `allergytype`
FROM
  (SELECT `LHS`.`allergy` AS `allergy`,
          `LHS`.`allergytype` AS `allergytype`,
          `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`
   FROM
     (SELECT `LHS`.`allergy` AS `allergy`,
             `LHS`.`allergytype` AS `allergytype`,
             `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`
      FROM
        (SELECT `LHS`.`allergy` AS `allergy`,
                `LHS`.`allergytype` AS `allergytype`,
                `RHS`.`stuid` AS `stuid`,
                `RHS`.`lname` AS `lname`,
                `RHS`.`fname` AS `fname`,
                `RHS`.`age` AS `age`,
                `RHS`.`sex` AS `sex`,
                `RHS`.`major` AS `major`,
                `RHS`.`advisor` AS `advisor`,
                `RHS`.`city_code` AS `city_code`
         FROM `df_allergy_type` AS `LHS`
         CROSS JOIN `df_student` AS `RHS`) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_student`
         WHERE (`fname` = 'Lisa')) AS RHS ON (LHS.stuid = RHS.stuid
                                              AND LHS.lname = RHS.lname
                                              AND LHS.fname = RHS.fname
                                              AND LHS.age = RHS.age
                                              AND LHS.sex = RHS.sex
                                              AND LHS.major = RHS.major
                                              AND LHS.advisor = RHS.advisor
                                              AND LHS.city_code = RHS.city_code)) AS LHS
   INNER JOIN
     (SELECT LHS.allergy AS allergy,
             LHS.allergytype AS allergytype,
             LHS.stuid AS stuid,
             RHS.lname AS lname,
             RHS.fname AS fname,
             RHS.age AS age,
             RHS.sex AS sex,
             RHS.major AS major,
             RHS.advisor AS advisor,
             RHS.city_code AS city_code
      FROM
        (SELECT LHS.allergy AS allergy,
                LHS.allergytype AS allergytype,
                RHS.stuid AS stuid
         FROM df_allergy_type AS LHS
         INNER JOIN df_has_allergy AS RHS ON (LHS.allergy = RHS.allergy)) AS LHS
      INNER JOIN df_student AS RHS ON (LHS.stuid = RHS.stuid)) AS RHS ON (LHS.allergy = RHS.allergy
                                                                          AND LHS.allergytype = RHS.allergytype
                                                                          AND LHS.stuid = RHS.stuid
                                                                          AND LHS.lname = RHS.lname
                                                                          AND LHS.fname = RHS.fname
                                                                          AND LHS.age = RHS.age
                                                                          AND LHS.sex = RHS.sex
                                                                          AND LHS.major = RHS.major
                                                                          AND LHS.advisor = RHS.advisor
                                                                          AND LHS.city_code = RHS.city_code))
ORDER BY allergy;",3,19,7,0,7,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0
spider/allergy_1/0033,"summarise(input0, 'n = n()', ""'allergy'""), filter(line0, ""allergy == 'Cat'"")","SELECT `n` AS `count___`
FROM
  (SELECT `allergy`,
          COUNT() AS `n`
   FROM `df_has_allergy`
   GROUP BY `allergy`)
WHERE (`allergy` = 'Cat')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0037,"filter(input0, ""allergytype == 'food'""), natural_join(input1, line0), mutate(line1, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`allergy` AS `allergy`,
          `RHS`.`allergytype` AS `allergytype`
   FROM `df_has_allergy` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_allergy_type`
      WHERE (`allergytype` = 'food')) AS RHS ON (LHS.allergy = RHS.allergy))
ORDER BY count___;",3,10,3,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/allergy_1/0002,"summarise(input0, 'n_distinct = n_distinct(allergytype)', '')","SELECT n_distinct AS count_distinct_allergytype_
FROM
  (SELECT COUNT(DISTINCT allergytype) AS n_distinct
   FROM df_allergy_type)
ORDER BY count_distinct_allergytype_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0036,"filter(input1, ""sex != 'F'""), semi_join(input0, line0), filter(line1, ""allergy == 'Milk' | allergy == 'Eggs'""), mutate(line2, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM
  (SELECT *
   FROM `df_has_allergy` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_student`
           WHERE (`sex` != 'F')) AS `RHS`
        WHERE (`LHS`.`stuid` = `RHS`.`stuid`) ))
WHERE (`allergy` = 'Milk'
       OR `allergy` = 'Eggs')
ORDER BY count___;",4,16,4,1,4,0,4,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,1,0,0,0
spider/allergy_1/0017,"filter(input0, ""sex == 'M'"")","SELECT `stuid`
FROM `df_student`
WHERE (`sex` = 'M')
ORDER BY stuid;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0008,"summarise(input0, 'n = n()', ""'allergy','allergytype'""), summarise(line0, 'n = n()', ""'allergytype'"")","SELECT allergytype,
       n AS count___
FROM
  (SELECT allergytype,
          COUNT() AS n
   FROM
     (SELECT allergy,
             allergytype,
             COUNT() AS n
      FROM df_allergy_type
      GROUP BY allergy,
               allergytype)
   GROUP BY allergytype)
ORDER BY allergytype;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0039,"summarise(input0, 'n = n()', ""'allergy'"")","SELECT allergy,
       n AS count___
FROM
  (SELECT allergy,
          COUNT() AS n
   FROM df_has_allergy
   GROUP BY allergy)
ORDER BY allergy;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0038,"summarise(input0, 'n = n()', ""'allergy'""), limit(line0, 'desc(allergy)')","SELECT allergy
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT allergy,
                COUNT() AS n
         FROM df_has_allergy
         GROUP BY allergy)
      ORDER BY allergy DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0003,df_allergy_type,"SELECT DISTINCT allergytype
FROM df_allergy_type
ORDER BY allergytype;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0027,"summarise(input0, 'n = n()', ""'fname','major'""), limit(line0, 'fname')","SELECT major
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT fname,
                major,
                COUNT() AS n
         FROM df_student
         GROUP BY fname,
                  major)
      ORDER BY fname)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0048,"filter(input0, ""allergytype != 'food' & allergytype != 'animal'""), natural_join4(input0, input1, input2, line0), filter(line1, 'stuid != 18L & age != 18L'), mutate(line2, 'n_distinct = n_distinct(stuid)')","SELECT DISTINCT COUNT(DISTINCT `stuid`) OVER () AS `count___`
FROM
  (SELECT `LHS`.`allergy` AS `allergy`,
          `LHS`.`allergytype` AS `allergytype`,
          `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`
   FROM
     (SELECT `LHS`.`allergy` AS `allergy`,
             `LHS`.`allergytype` AS `allergytype`,
             `LHS`.`stuid` AS `stuid`,
             `RHS`.`lname` AS `lname`,
             `RHS`.`fname` AS `fname`,
             `RHS`.`age` AS `age`,
             `RHS`.`sex` AS `sex`,
             `RHS`.`major` AS `major`,
             `RHS`.`advisor` AS `advisor`,
             `RHS`.`city_code` AS `city_code`
      FROM
        (SELECT `LHS`.`allergy` AS `allergy`,
                `LHS`.`allergytype` AS `allergytype`,
                `RHS`.`stuid` AS `stuid`
         FROM `df_allergy_type` AS `LHS`
         INNER JOIN `df_has_allergy` AS `RHS` ON (`LHS`.`allergy` = `RHS`.`allergy`)) AS `LHS`
      INNER JOIN `df_student` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_allergy_type`
      WHERE (`allergytype` != 'food'
             AND `allergytype` != 'animal')) AS RHS ON (LHS.allergy = RHS.allergy
                                                        AND LHS.allergytype = RHS.allergytype))
WHERE (stuid != 18
       AND age != 18)
ORDER BY count___;",4,18,5,2,5,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,1,0,0
spider/allergy_1/0022,"filter(input0, ""city_code == 'HKG' | city_code == 'CHI'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM `df_student`
WHERE (`city_code` = 'HKG'
       OR `city_code` = 'CHI')
ORDER BY count___;",2,6,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/allergy_1/0030,"summarise(input0, 'n = n()', ""'city_code'"")","SELECT city_code,
       n AS count___
FROM
  (SELECT city_code,
          COUNT() AS n
   FROM df_student
   GROUP BY city_code)
ORDER BY city_code;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0013,"summarise(input0, 'n = n()', ""'advisor','major'""), summarise(line0, 'n_distinct = n_distinct(advisor)', '')","SELECT n_distinct AS count_distinct_advisor_
FROM
  (SELECT COUNT(DISTINCT advisor) AS n_distinct
   FROM
     (SELECT advisor,
             major,
             COUNT() AS n
      FROM df_student
      GROUP BY advisor,
               major))
ORDER BY count_distinct_advisor_;",2,7,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0006,"cross_join(input0, input0, 'allergy == allergy.other'), filter(line0, ""allergy == 'Cat'"")","SELECT `allergytype`
FROM
  (SELECT *
   FROM
     (SELECT `LHS`.`allergy` AS `allergy`,
             `LHS`.`allergytype` AS `allergytype`,
             `RHS`.`allergy` AS `allergy_other`,
             `RHS`.`allergytype` AS `allergytype_other`
      FROM `df_allergy_type` AS `LHS`
      CROSS JOIN `df_allergy_type` AS `RHS`)
   WHERE (`allergy` = `allergy_other`))
WHERE (`allergy` = 'Cat')
ORDER BY allergytype;",2,8,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
spider/allergy_1/0004,df_allergy_type,"SELECT allergy,
       allergytype
FROM df_allergy_type
ORDER BY allergy;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0012,df_student,"SELECT fname,
       lname
FROM df_student
ORDER BY fname;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0026,"summarise(input0, 'n = n()', ""'major'"")","SELECT major,
       n AS count___
FROM
  (SELECT major,
          COUNT() AS n
   FROM df_student
   GROUP BY major)
ORDER BY major;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0015,"intersect(input0, input0, 'city_code')","SELECT city_code
FROM
  (SELECT city_code
   FROM df_student INTERSECT SELECT city_code
   FROM df_student)
ORDER BY city_code;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/allergy_1/0005,"filter(input0, ""allergytype == 'food'"")","SELECT `allergy`
FROM `df_allergy_type`
WHERE (`allergytype` = 'food')
ORDER BY allergy;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0016,"filter(input0, ""sex == 'F'""), semi_join(input0, line0)","SELECT `fname`,
       `lname`,
       `age`
FROM
  (SELECT *
   FROM `df_student` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_student`
           WHERE (`sex` = 'F')) AS RHS
        WHERE (LHS.stuid = RHS.stuid
               AND LHS.lname = RHS.lname
               AND LHS.fname = RHS.fname
               AND LHS.age = RHS.age
               AND LHS.sex = RHS.sex
               AND LHS.major = RHS.major
               AND LHS.advisor = RHS.advisor
               AND LHS.city_code = RHS.city_code) ))
ORDER BY fname;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/allergy_1/0032,"summarise(input0, 'n = n()', ""'advisor','age'""), limit(line0, 'desc(n)')","SELECT advisor
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT advisor,
                age,
                COUNT() AS n
         FROM df_student
         GROUP BY advisor,
                  age)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0045,"filter(input0, ""allergytype == 'food'""), semi_join(input1, line0), anti_join(input2, line1, ""'stuid'"")","SELECT `fname`,
       `lname`
FROM
  (SELECT *
   FROM `df_student` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_has_allergy` AS `LHS`
           WHERE EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM `df_allergy_type`
                   WHERE (`allergytype` = 'food')) AS RHS
                WHERE (LHS.allergy = RHS.allergy) )) AS RHS
        WHERE (LHS.stuid = RHS.stuid) ))
ORDER BY fname;",3,20,6,0,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/allergy_1/0018,"filter(input0, 'age == 18L'), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_student
WHERE (age = 18)
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/allergy_1/0035,"anti_join(input1, input0, ""'stuid'"")","SELECT stuid
FROM
  (SELECT *
   FROM df_student AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_has_allergy AS RHS
        WHERE (LHS.stuid = RHS.stuid) ))
ORDER BY stuid;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/allergy_1/0020,"filter(input0, ""lname == 'Kim'""), intersect(input0, line0, 'city_code')","SELECT `city_code`
FROM
  (SELECT `city_code`
   FROM `df_student` INTERSECT SELECT `city_code`
   FROM `df_student`
   WHERE (`lname` = 'Kim'))
ORDER BY city_code;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/allergy_1/0019,"filter(input0, 'age > 20L'), filter(line0, 'age >= 20L')","SELECT stuid
FROM
  (SELECT *
   FROM df_student
   WHERE (age > 20))
WHERE (age >= 20)
ORDER BY stuid;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0007,"summarise(input0, 'n = n()', ""'allergytype'""), filter(line0, ""allergytype == 'animal'"")","SELECT `n` AS `count___`
FROM
  (SELECT `allergytype`,
          COUNT() AS `n`
   FROM `df_allergy_type`
   GROUP BY `allergytype`)
WHERE (`allergytype` = 'animal')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0034,"summarise(input0, 'n = n()', ""'stuid'""), filter(line0, 'n >= 2L')","SELECT stuid
FROM
  (SELECT stuid,
          COUNT() AS n
   FROM df_has_allergy
   GROUP BY stuid)
WHERE (n >= 2)
ORDER BY stuid;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0024,"summarise(input0, 'age = min(age)', ""'lname','major'""), anti_join(input0, line0, '')","SELECT lname
FROM
  (SELECT *
   FROM df_student AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT lname,
                  major,
                  MIN(age) AS age
           FROM df_student
           GROUP BY lname,
                    major) AS RHS
        WHERE (LHS.lname = RHS.lname
               AND LHS.age = RHS.age
               AND LHS.major = RHS.major) ))
ORDER BY lname;",2,12,4,0,4,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
spider/allergy_1/0021,"filter(input0, 'stuid == 1004L')","SELECT advisor
FROM df_student
WHERE (stuid = 1004)
ORDER BY advisor;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0023,"mutate(input0, 'maxage = max(age)'), mutate(line0, 'minage = min(age)'), mutate(line1, 'meanage = mean(age, na.rm = T)')","SELECT DISTINCT minage AS min_age_,
                AVG(age) OVER () AS avg_age_,
                              maxage AS max_age_
FROM
  (SELECT stuid,
          lname,
          fname,
          age,
          sex,
          major,
          advisor,
          city_code,
          maxage,
          MIN(age) OVER () AS minage
   FROM
     (SELECT stuid,
             lname,
             fname,
             age,
             sex,
             major,
             advisor,
             city_code,
             MAX(age) OVER () AS maxage
      FROM df_student))
ORDER BY min_age_;",3,10,3,1,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0
spider/allergy_1/0001,"summarise(input0, 'n_distinct = n_distinct(allergy)', '')","SELECT n_distinct AS count_distinct_allergy_
FROM
  (SELECT COUNT(DISTINCT allergy) AS n_distinct
   FROM df_allergy_type)
ORDER BY count_distinct_allergy_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0046,"natural_join3(input0, input1, input2), summarise(line0, 'n_distinct = n_distinct(stuid)', ""'allergytype','sex'""), filter(line1, ""sex == 'M' & allergytype == 'food'"")","SELECT `n_distinct` AS `count___`
FROM
  (SELECT `allergytype`,
          `sex`,
          COUNT(DISTINCT `stuid`) AS `n_distinct`
   FROM
     (SELECT `LHS`.`allergy` AS `allergy`,
             `LHS`.`allergytype` AS `allergytype`,
             `LHS`.`stuid` AS `stuid`,
             `RHS`.`lname` AS `lname`,
             `RHS`.`fname` AS `fname`,
             `RHS`.`age` AS `age`,
             `RHS`.`sex` AS `sex`,
             `RHS`.`major` AS `major`,
             `RHS`.`advisor` AS `advisor`,
             `RHS`.`city_code` AS `city_code`
      FROM
        (SELECT `LHS`.`allergy` AS `allergy`,
                `LHS`.`allergytype` AS `allergytype`,
                `RHS`.`stuid` AS `stuid`
         FROM `df_allergy_type` AS `LHS`
         INNER JOIN `df_has_allergy` AS `RHS` ON (`LHS`.`allergy` = `RHS`.`allergy`)) AS `LHS`
      INNER JOIN `df_student` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`))
   GROUP BY `allergytype`,
            `sex`)
WHERE (`sex` = 'M'
       AND `allergytype` = 'food')
ORDER BY count___;",3,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/allergy_1/0047,"filter(input0, ""allergy == 'Milk' | allergy == 'Cat'""), natural_join(input1, line0)","SELECT DISTINCT `fname`,
                `city_code`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `RHS`.`allergy` AS `allergy`
   FROM `df_student` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_has_allergy`
      WHERE (`allergy` = 'Milk'
             OR `allergy` = 'Cat')) AS RHS ON (LHS.stuid = RHS.stuid))
ORDER BY fname;",2,10,3,1,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0014,"intersect(input0, input0, 'major')","SELECT major
FROM
  (SELECT major
   FROM df_student INTERSECT SELECT major
   FROM df_student)
ORDER BY major;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/allergy_1/0009,"summarise(input0, 'n = n()', ""'allergy','allergytype'""), limit(line0, 'desc(allergytype)')","SELECT allergytype
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT allergy,
                allergytype,
                COUNT() AS n
         FROM df_allergy_type
         GROUP BY allergy,
                  allergytype)
      ORDER BY allergytype DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0025,"summarise(input0, 'age = max(age)', ''), natural_join(input0, line0)","SELECT stuid
FROM
  (SELECT LHS.stuid AS stuid,
          LHS.lname AS lname,
          LHS.fname AS fname,
          LHS.age AS age,
          LHS.sex AS sex,
          LHS.major AS major,
          LHS.advisor AS advisor,
          LHS.city_code AS city_code
   FROM df_student AS LHS
   INNER JOIN
     (SELECT MAX(age) AS age
      FROM df_student) AS RHS ON (LHS.age = RHS.age))
ORDER BY stuid;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0011,"summarise(input0, 'n = n()', ""'age','stuid'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT age,
          stuid,
          COUNT() AS n
   FROM df_student
   GROUP BY age,
            stuid)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/allergy_1/0029,"summarise(input0, 'meanage = mean(age, na.rm = T)', ""'sex'"")","SELECT meanage AS avg_age_,
       sex
FROM
  (SELECT sex,
          AVG(age) AS meanage
   FROM df_student
   GROUP BY sex)
ORDER BY avg_age_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0010,"summarise(input0, 'n = n()', ""'allergytype'""), limit(line0, 'n')","SELECT allergytype
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT allergytype,
                COUNT() AS n
         FROM df_allergy_type
         GROUP BY allergytype)
      ORDER BY n)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0040,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'allergytype'"")","SELECT allergytype,
       n AS count___
FROM
  (SELECT allergytype,
          COUNT() AS n
   FROM
     (SELECT LHS.allergy AS allergy,
             LHS.allergytype AS allergytype,
             RHS.stuid AS stuid
      FROM df_allergy_type AS LHS
      INNER JOIN df_has_allergy AS RHS ON (LHS.allergy = RHS.allergy))
   GROUP BY allergytype)
ORDER BY allergytype;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0028,"summarise(input0, 'n = n()', ""'age'"")","SELECT age,
       n AS count___
FROM
  (SELECT age,
          COUNT() AS n
   FROM df_student
   GROUP BY age)
ORDER BY age;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/allergy_1/0049,"filter(input0, ""allergy == 'Soy'""), anti_join(input1, line0, ""'stuid'"")","SELECT `fname`,
       `major`
FROM
  (SELECT *
   FROM `df_student` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_has_allergy`
           WHERE (`allergy` = 'Soy')) AS RHS
        WHERE (LHS.stuid = RHS.stuid) ))
ORDER BY fname;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/allergy_1/0031,"summarise(input0, 'n = n()', ""'advisor'""), semi_join(line0, input0)","SELECT advisor,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT advisor,
             COUNT() AS n
      FROM df_student
      GROUP BY advisor) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_student AS RHS
        WHERE (LHS.advisor = RHS.advisor) ))
ORDER BY advisor;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/e_learning/0033,"filter(input0, ""personal_name == 'Karson'""), semi_join(input1, line0)","SELECT `date_of_enrolment`,
       `date_of_completion`
FROM
  (SELECT *
   FROM `df_student_course_enrolment` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_students`
           WHERE (`personal_name` = 'Karson')) AS RHS
        WHERE (LHS.student_id = RHS.student_id) ))
ORDER BY date_of_enrolment;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/e_learning/0037,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'middle_name','student_id'""), filter(line1, 'n <= 2L')","SELECT student_id,
       middle_name
FROM
  (SELECT middle_name,
          student_id,
          COUNT() AS n
   FROM
     (SELECT LHS.student_id AS student_id,
             LHS.date_of_registration AS date_of_registration,
             LHS.date_of_latest_logon AS date_of_latest_logon,
             LHS.login_name AS login_name,
             LHS.password AS password,
             LHS.personal_name AS personal_name,
             LHS.middle_name AS middle_name,
             LHS.family_name AS family_name,
             RHS.registration_id AS registration_id,
             RHS.course_id AS course_id,
             RHS.date_of_enrolment AS date_of_enrolment,
             RHS.date_of_completion AS date_of_completion
      FROM df_students AS LHS
      INNER JOIN df_student_course_enrolment AS RHS ON (LHS.student_id = RHS.student_id))
   GROUP BY middle_name,
            student_id)
WHERE (n <= 2)
ORDER BY student_id;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/e_learning/0002,"filter(input0, ""course_name == 'database'""), intersect(line0, line0, 'course_description')","SELECT `course_description`
FROM
  (SELECT `course_description`
   FROM `df_courses`
   WHERE (`course_name` = 'database') INTERSECT
     SELECT `course_description`
     FROM `df_courses` WHERE (`course_name` = 'database'))
ORDER BY course_description;",2,9,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/e_learning/0036,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'personal_name','student_id'""), filter(line1, 'n >= 2L')","SELECT student_id,
       personal_name
FROM
  (SELECT personal_name,
          student_id,
          COUNT() AS n
   FROM
     (SELECT LHS.student_id AS student_id,
             LHS.date_of_registration AS date_of_registration,
             LHS.date_of_latest_logon AS date_of_latest_logon,
             LHS.login_name AS login_name,
             LHS.password AS password,
             LHS.personal_name AS personal_name,
             LHS.middle_name AS middle_name,
             LHS.family_name AS family_name,
             RHS.registration_id AS registration_id,
             RHS.course_id AS course_id,
             RHS.date_of_enrolment AS date_of_enrolment,
             RHS.date_of_completion AS date_of_completion
      FROM df_students AS LHS
      INNER JOIN df_student_course_enrolment AS RHS ON (LHS.student_id = RHS.student_id))
   GROUP BY personal_name,
            student_id)
WHERE (n >= 2)
ORDER BY student_id;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/e_learning/0017,"summarise(input0, 'n = n()', ""'test_result'"")","SELECT test_result,
       n AS count___
FROM
  (SELECT test_result,
          COUNT() AS n
   FROM df_student_tests_taken
   GROUP BY test_result)
ORDER BY test_result;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/e_learning/0008,"mutate(input0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count_course_id_
FROM df_student_course_enrolment
ORDER BY count_course_id_;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/e_learning/0039,"anti_join(input0, input1, ""'student_id'""), mutate(line0, 'n_distinct = n_distinct(student_id)')","SELECT DISTINCT COUNT(DISTINCT student_id) OVER () AS count___
FROM
  (SELECT *
   FROM df_students AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_student_course_enrolment AS RHS
        WHERE (LHS.student_id = RHS.student_id) ))
ORDER BY count___;",2,13,3,2,3,0,2,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
spider/e_learning/0038,"anti_join(input0, input1, ""'student_id'"")","SELECT personal_name
FROM
  (SELECT *
   FROM df_students AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_student_course_enrolment AS RHS
        WHERE (LHS.student_id = RHS.student_id) ))
ORDER BY personal_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/e_learning/0003,"filter(input0, ""personal_name == 'Cathrine'"")","SELECT `address_line_1`
FROM `df_course_authors_and_tutors`
WHERE (`personal_name` = 'Cathrine')
ORDER BY address_line_1;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/e_learning/0027,"inner_join(input0, input1, ""'author_id' = 'course_id','subject_id' = 'registration_id'""), summarise(line0, 'n = n()', ""'course_name','student_id'"")","SELECT course_name
FROM
  (SELECT course_name,
          student_id,
          COUNT() AS n
   FROM
     (SELECT course_id,
             author_id,
             subject_id,
             course_name,
             course_description,
             student_id,
             date_of_enrolment,
             date_of_completion,
             subject_id AS registration_id
      FROM
        (SELECT author_id AS course_id,
                author_id,
                subject_id,
                course_name,
                course_description,
                student_id,
                date_of_enrolment,
                date_of_completion
         FROM
           (SELECT LHS.course_id AS course_id,
                   LHS.author_id AS author_id,
                   LHS.subject_id AS subject_id,
                   LHS.course_name AS course_name,
                   LHS.course_description AS course_description,
                   RHS.student_id AS student_id,
                   RHS.date_of_enrolment AS date_of_enrolment,
                   RHS.date_of_completion AS date_of_completion
            FROM df_courses AS LHS
            INNER JOIN df_student_course_enrolment AS RHS ON (LHS.author_id = RHS.course_id
                                                              AND LHS.subject_id = RHS.registration_id))))
   GROUP BY course_name,
            student_id)
ORDER BY course_name;",2,11,5,0,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/e_learning/0022,"filter(input0, ""personal_name == 'Julio'""), semi_join(input1, line0)","SELECT `course_name`
FROM
  (SELECT *
   FROM `df_courses` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_course_authors_and_tutors`
           WHERE (`personal_name` = 'Julio')) AS RHS
        WHERE (LHS.author_id = RHS.author_id) ))
ORDER BY course_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/e_learning/0030,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'author_id','course_description'"")","SELECT course_description AS course_name,
       n AS count___
FROM
  (SELECT author_id,
          course_description,
          COUNT() AS n
   FROM
     (SELECT LHS.course_id AS course_id,
             LHS.author_id AS author_id,
             LHS.subject_id AS subject_id,
             LHS.course_name AS course_name,
             LHS.course_description AS course_description,
             RHS.registration_id AS registration_id,
             RHS.student_id AS student_id,
             RHS.date_of_enrolment AS date_of_enrolment,
             RHS.date_of_completion AS date_of_completion
      FROM df_courses AS LHS
      INNER JOIN df_student_course_enrolment AS RHS ON (LHS.course_id = RHS.course_id))
   GROUP BY author_id,
            course_description)
ORDER BY course_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/e_learning/0006,"intersect(input0, input0, 'date_of_enrolment'), left_join(line0, input0)","SELECT date_of_enrolment,
       date_of_completion
FROM
  (SELECT LHS.date_of_enrolment AS date_of_enrolment,
          RHS.registration_id AS registration_id,
          RHS.student_id AS student_id,
          RHS.course_id AS course_id,
          RHS.date_of_completion AS date_of_completion
   FROM
     (SELECT date_of_enrolment
      FROM df_student_course_enrolment INTERSECT SELECT date_of_enrolment
      FROM df_student_course_enrolment) AS LHS
   LEFT JOIN df_student_course_enrolment AS RHS ON (LHS.date_of_enrolment = RHS.date_of_enrolment))
ORDER BY date_of_enrolment;",2,10,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0
spider/e_learning/0004,"intersect(input0, input0, 'address_line_1')","SELECT address_line_1
FROM
  (SELECT address_line_1
   FROM df_course_authors_and_tutors INTERSECT SELECT address_line_1
   FROM df_course_authors_and_tutors)
ORDER BY address_line_1;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/e_learning/0012,"filter(input0, ""family_name == 'Jaskolski' | family_name == 'Langosh'"")","SELECT `date_of_latest_logon`
FROM `df_students`
WHERE (`family_name` = 'Jaskolski'
       OR `family_name` = 'Langosh')
ORDER BY date_of_latest_logon;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/e_learning/0026,"filter(input0, ""course_name == 'Spanish'""), semi_join(input1, line0)","SELECT `date_of_enrolment`
FROM
  (SELECT *
   FROM `df_student_course_enrolment` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_courses`
           WHERE (`course_name` = 'Spanish')) AS RHS
        WHERE (LHS.course_id = RHS.course_id) ))
ORDER BY date_of_enrolment;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/e_learning/0015,df_course_authors_and_tutors,"SELECT author_id,
       author_tutor_atb,
       login_name,
       password,
       personal_name,
       middle_name,
       family_name,
       gender_mf,
       address_line_1
FROM df_course_authors_and_tutors
ORDER BY author_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/e_learning/0005,df_course_authors_and_tutors,"SELECT login_name,
       family_name
FROM df_course_authors_and_tutors
ORDER BY login_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/e_learning/0016,df_students,"SELECT personal_name,
       family_name
FROM df_students
ORDER BY personal_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/e_learning/0032,"filter(input1, ""test_result == 'Fail'""), natural_join3(input0, input1, line0)","SELECT `date_of_completion`
FROM
  (SELECT `LHS`.`registration_id` AS `registration_id`,
          `LHS`.`student_id` AS `student_id`,
          `LHS`.`course_id` AS `course_id`,
          `LHS`.`date_of_enrolment` AS `date_of_enrolment`,
          `LHS`.`date_of_completion` AS `date_of_completion`,
          `LHS`.`date_test_taken` AS `date_test_taken`,
          `LHS`.`test_result` AS `test_result`
   FROM
     (SELECT `LHS`.`registration_id` AS `registration_id`,
             `LHS`.`student_id` AS `student_id`,
             `LHS`.`course_id` AS `course_id`,
             `LHS`.`date_of_enrolment` AS `date_of_enrolment`,
             `LHS`.`date_of_completion` AS `date_of_completion`,
             `RHS`.`date_test_taken` AS `date_test_taken`,
             `RHS`.`test_result` AS `test_result`
      FROM `df_student_course_enrolment` AS `LHS`
      INNER JOIN `df_student_tests_taken` AS `RHS` ON (`LHS`.`registration_id` = `RHS`.`registration_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_student_tests_taken`
      WHERE (`test_result` = 'Fail')) AS RHS ON (LHS.registration_id = RHS.registration_id
                                                 AND LHS.date_test_taken = RHS.date_test_taken
                                                 AND LHS.test_result = RHS.test_result))
ORDER BY date_of_completion;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/e_learning/0018,"filter(input1, ""course_name == 'advanced database'""), semi_join(input0, line0)","SELECT `login_name`
FROM
  (SELECT *
   FROM `df_course_authors_and_tutors` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_courses`
           WHERE (`course_name` = 'advanced database')) AS RHS
        WHERE (LHS.author_id = RHS.author_id) ))
ORDER BY login_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/e_learning/0035,"mutate(input0, 'n = n()'), inner_join(input1, line0, ""'student_id' = 'student_id','course_id' = 'n'"")","SELECT student_id,
       login_name
FROM
  (SELECT LHS.registration_id AS registration_id,
          LHS.student_id AS student_id,
          LHS.course_id AS course_id,
          LHS.date_of_enrolment AS date_of_enrolment,
          LHS.date_of_completion AS date_of_completion,
          RHS.date_of_registration AS date_of_registration,
          RHS.date_of_latest_logon AS date_of_latest_logon,
          RHS.login_name AS login_name,
          RHS.password AS password,
          RHS.personal_name AS personal_name,
          RHS.middle_name AS middle_name,
          RHS.family_name AS family_name
   FROM df_student_course_enrolment AS LHS
   INNER JOIN
     (SELECT student_id,
             date_of_registration,
             date_of_latest_logon,
             login_name,
             password,
             personal_name,
             middle_name,
             family_name,
             COUNT(*) OVER () AS n
      FROM df_students) AS RHS ON (LHS.student_id = RHS.student_id
                                   AND LHS.course_id = RHS.n))
ORDER BY student_id;",2,8,3,0,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/e_learning/0020,"mutate(input0, 'n = n()'), inner_join(input1, line0, ""'author_id' = 'author_id','course_id' = 'n'"")","SELECT personal_name,
       family_name,
       author_id
FROM
  (SELECT LHS.course_id AS course_id,
          LHS.author_id AS author_id,
          LHS.subject_id AS subject_id,
          LHS.course_name AS course_name,
          LHS.course_description AS course_description,
          RHS.author_tutor_atb AS author_tutor_atb,
          RHS.login_name AS login_name,
          RHS.password AS password,
          RHS.personal_name AS personal_name,
          RHS.middle_name AS middle_name,
          RHS.family_name AS family_name,
          RHS.gender_mf AS gender_mf,
          RHS.address_line_1 AS address_line_1
   FROM df_courses AS LHS
   INNER JOIN
     (SELECT author_id,
             author_tutor_atb,
             login_name,
             password,
             personal_name,
             middle_name,
             family_name,
             gender_mf,
             address_line_1,
             COUNT(*) OVER () AS n
      FROM df_course_authors_and_tutors) AS RHS ON (LHS.author_id = RHS.author_id
                                                    AND LHS.course_id = RHS.n))
ORDER BY personal_name;",2,8,3,0,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/e_learning/0019,"filter(input1, ""course_name == 'operating system' | course_name == 'data structure'""), semi_join(input0, line0)","SELECT `address_line_1`
FROM
  (SELECT *
   FROM `df_course_authors_and_tutors` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_courses`
           WHERE (`course_name` = 'operating system'
                  OR `course_name` = 'data structure')) AS RHS
        WHERE (LHS.author_id = RHS.author_id) ))
ORDER BY address_line_1;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/e_learning/0007,"mutate(input0, 'n_distinct = n_distinct(student_id)')","SELECT DISTINCT COUNT(DISTINCT student_id) OVER () AS count_distinct_student_id_
FROM df_student_course_enrolment
ORDER BY count_distinct_student_id_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/e_learning/0034,"filter(input0, ""family_name == 'Zieme' & personal_name == 'Bernie'""), semi_join(input1, line0)","SELECT `date_of_enrolment`,
       `date_of_completion`
FROM
  (SELECT *
   FROM `df_student_course_enrolment` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_students`
           WHERE (`family_name` = 'Zieme'
                  AND `personal_name` = 'Bernie')) AS RHS
        WHERE (LHS.student_id = RHS.student_id) ))
ORDER BY date_of_enrolment;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/e_learning/0024,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'subject_id','subject_name'"")","SELECT subject_id,
       subject_name,
       n AS count___
FROM
  (SELECT subject_id,
          subject_name,
          COUNT() AS n
   FROM
     (SELECT LHS.subject_id AS subject_id,
             LHS.subject_name AS subject_name,
             RHS.course_id AS course_id,
             RHS.author_id AS author_id,
             RHS.course_name AS course_name,
             RHS.course_description AS course_description
      FROM df_subjects AS LHS
      INNER JOIN df_courses AS RHS ON (LHS.subject_id = RHS.subject_id))
   GROUP BY subject_id,
            subject_name)
ORDER BY subject_id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/e_learning/0021,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'address_line_1','author_id'""), filter(line1, 'n == 2L')","SELECT address_line_1,
       author_id
FROM
  (SELECT address_line_1,
          author_id,
          COUNT() AS n
   FROM
     (SELECT LHS.author_id AS author_id,
             LHS.author_tutor_atb AS author_tutor_atb,
             LHS.login_name AS login_name,
             LHS.password AS password,
             LHS.personal_name AS personal_name,
             LHS.middle_name AS middle_name,
             LHS.family_name AS family_name,
             LHS.gender_mf AS gender_mf,
             LHS.address_line_1 AS address_line_1,
             RHS.course_id AS course_id,
             RHS.subject_id AS subject_id,
             RHS.course_name AS course_name,
             RHS.course_description AS course_description
      FROM df_course_authors_and_tutors AS LHS
      INNER JOIN df_courses AS RHS ON (LHS.author_id = RHS.author_id))
   GROUP BY address_line_1,
            author_id)
WHERE (n = 2)
ORDER BY address_line_1;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/e_learning/0023,"filter(input0, ""subject_name == 'Computer Science'""), semi_join(input1, line0)","SELECT `course_name`,
       `course_description`
FROM
  (SELECT *
   FROM `df_courses` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_subjects`
           WHERE (`subject_name` = 'Computer Science')) AS RHS
        WHERE (LHS.subject_id = RHS.subject_id) ))
ORDER BY course_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/e_learning/0014,df_subjects,"SELECT subject_name
FROM df_subjects
ORDER BY subject_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/e_learning/0009,"filter(input0, ""test_result == 'Pass'""), inner_join(line0, input0, ""'date_test_taken','registration_id'"")","SELECT `date_test_taken`
FROM
  (SELECT `LHS`.`registration_id` AS `registration_id`,
          `LHS`.`date_test_taken` AS `date_test_taken`,
          `LHS`.`test_result` AS `test_result`,
          `RHS`.`test_result` AS `test_result_other`
   FROM
     (SELECT *
      FROM `df_student_tests_taken`
      WHERE (`test_result` = 'Pass')) AS LHS
   INNER JOIN df_student_tests_taken AS RHS ON (LHS.date_test_taken = RHS.date_test_taken
                                                AND LHS.registration_id = RHS.registration_id))
ORDER BY date_test_taken;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/e_learning/0025,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'subject_id','subject_name'"")","SELECT subject_id,
       subject_name,
       n AS count___
FROM
  (SELECT subject_id,
          subject_name,
          COUNT() AS n
   FROM
     (SELECT LHS.subject_id AS subject_id,
             LHS.subject_name AS subject_name,
             RHS.course_id AS course_id,
             RHS.author_id AS author_id,
             RHS.course_name AS course_name,
             RHS.course_description AS course_description
      FROM df_subjects AS LHS
      INNER JOIN df_courses AS RHS ON (LHS.subject_id = RHS.subject_id))
   GROUP BY subject_id,
            subject_name)
ORDER BY subject_id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/e_learning/0011,"filter(input0, ""family_name == 'Ward'""), intersect(line0, input0, 'login_name')","SELECT `login_name`
FROM
  (SELECT `login_name`
   FROM `df_students`
   WHERE (`family_name` = 'Ward') INTERSECT
     SELECT login_name
     FROM df_students)
ORDER BY login_name;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/e_learning/0029,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'course_description','course_name'""), filter(line1, 'n > 2L')","SELECT course_description,
       course_name
FROM
  (SELECT course_description,
          course_name,
          COUNT() AS n
   FROM
     (SELECT LHS.course_id AS course_id,
             LHS.author_id AS author_id,
             LHS.subject_id AS subject_id,
             LHS.course_name AS course_name,
             LHS.course_description AS course_description,
             RHS.registration_id AS registration_id,
             RHS.student_id AS student_id,
             RHS.date_of_enrolment AS date_of_enrolment,
             RHS.date_of_completion AS date_of_completion
      FROM df_courses AS LHS
      INNER JOIN df_student_course_enrolment AS RHS ON (LHS.course_id = RHS.course_id))
   GROUP BY course_description,
            course_name)
WHERE (n > 2)
ORDER BY course_description;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/e_learning/0010,"filter(input0, ""test_result == 'Fail'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM `df_student_tests_taken`
WHERE (`test_result` = 'Fail')
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/e_learning/0028,"mutate(input0, 'n = n()'), inner_join(line0, input1, ""'course_id' = 'student_id','n' = 'course_id'"")","SELECT course_name
FROM
  (SELECT course_id,
          author_id,
          subject_id,
          course_name,
          course_description,
          n,
          registration_id,
          date_of_enrolment,
          date_of_completion,
          course_id AS student_id
   FROM
     (SELECT LHS.course_id AS course_id,
             LHS.author_id AS author_id,
             LHS.subject_id AS subject_id,
             LHS.course_name AS course_name,
             LHS.course_description AS course_description,
             LHS.n AS n,
             RHS.registration_id AS registration_id,
             RHS.date_of_enrolment AS date_of_enrolment,
             RHS.date_of_completion AS date_of_completion
      FROM
        (SELECT course_id,
                author_id,
                subject_id,
                course_name,
                course_description,
                COUNT(*) OVER () AS n
         FROM df_courses) AS LHS
      INNER JOIN df_student_course_enrolment AS RHS ON (LHS.course_id = RHS.student_id
                                                        AND LHS.n = RHS.course_id)))
ORDER BY course_name;",2,10,4,0,4,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/e_learning/0031,"filter(input1, ""test_result == 'Pass'""), natural_join3(input0, input1, line0)","SELECT `date_of_enrolment`
FROM
  (SELECT `LHS`.`registration_id` AS `registration_id`,
          `LHS`.`student_id` AS `student_id`,
          `LHS`.`course_id` AS `course_id`,
          `LHS`.`date_of_enrolment` AS `date_of_enrolment`,
          `LHS`.`date_of_completion` AS `date_of_completion`,
          `LHS`.`date_test_taken` AS `date_test_taken`,
          `LHS`.`test_result` AS `test_result`
   FROM
     (SELECT `LHS`.`registration_id` AS `registration_id`,
             `LHS`.`student_id` AS `student_id`,
             `LHS`.`course_id` AS `course_id`,
             `LHS`.`date_of_enrolment` AS `date_of_enrolment`,
             `LHS`.`date_of_completion` AS `date_of_completion`,
             `RHS`.`date_test_taken` AS `date_test_taken`,
             `RHS`.`test_result` AS `test_result`
      FROM `df_student_course_enrolment` AS `LHS`
      INNER JOIN `df_student_tests_taken` AS `RHS` ON (`LHS`.`registration_id` = `RHS`.`registration_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_student_tests_taken`
      WHERE (`test_result` = 'Pass')) AS RHS ON (LHS.registration_id = RHS.registration_id
                                                 AND LHS.date_test_taken = RHS.date_test_taken
                                                 AND LHS.test_result = RHS.test_result))
ORDER BY date_of_enrolment;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/aircraft/0002,df_aircraft,"SELECT description
FROM df_aircraft
ORDER BY description;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/aircraft/0017,"summarise(input1, 'n = n()', ''), natural_join(input0, line0), limit(line1, 'max_gross_weight')","SELECT aircraft
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.aircraft_id AS aircraft_id,
                LHS.aircraft AS aircraft,
                LHS.description AS description,
                LHS.max_gross_weight AS max_gross_weight,
                LHS.total_disk_area AS total_disk_area,
                LHS.max_disk_loading AS max_disk_loading,
                RHS.n AS n
         FROM df_aircraft AS LHS
         CROSS JOIN
           (SELECT COUNT() AS n
            FROM df_match) AS RHS)
      ORDER BY max_gross_weight)
   LIMIT 2);",2,11,5,0,5,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/aircraft/0008,df_pilot,"SELECT name
FROM df_pilot
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/aircraft/0003,"summarise(input0, 'meaninternational_passengers = mean(international_passengers, na.rm = T)', ""'airport_id','international_passengers'""), summarise(line0, 'meaninternational_passengers = mean(international_passengers, na.rm = T)', '')","SELECT meaninternational_passengers AS avg_international_passengers_
FROM
  (SELECT AVG(international_passengers) AS meaninternational_passengers
   FROM
     (SELECT airport_id,
             international_passengers,
             AVG(international_passengers) AS meaninternational_passengers
      FROM df_airport
      GROUP BY airport_id,
               international_passengers))
ORDER BY avg_international_passengers_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/aircraft/0022,"natural_join(input0, input1), limit(line0, 'age')","SELECT name,
       age
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.pilot_id AS pilot_id,
                LHS.name AS name,
                LHS.age AS age,
                RHS.round AS round,
                RHS.location AS LOCATION,
                RHS.country AS country,
                RHS.date AS date,
                RHS.fastest_qualifying AS fastest_qualifying,
                RHS.winning_pilot AS winning_pilot,
                RHS.winning_aircraft AS winning_aircraft
         FROM df_pilot AS LHS
         CROSS JOIN df_match AS RHS)
      ORDER BY age)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/aircraft/0006,"mutate(input0, 'mintransit_passengers = min(transit_passengers)'), mutate(line0, 'transit_passengers = max(transit_passengers)')","SELECT DISTINCT MAX(transit_passengers) OVER () AS max_transit_passengers_,
                                             mintransit_passengers AS min_transit_passengers_
FROM
  (SELECT airport_id,
          airport_name,
          total_passengers,
          col___change_2007,
          international_passengers,
          domestic_passengers,
          transit_passengers,
          aircraft_movements,
          freight_metric_tonnes,
          MIN(transit_passengers) OVER () AS mintransit_passengers
   FROM df_airport)
ORDER BY max_transit_passengers_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/aircraft/0004,"filter(input0, ""airport_name == 'London Heathrow'""), semi_join(input0, line0)","SELECT `international_passengers`,
       `domestic_passengers`
FROM
  (SELECT *
   FROM `df_airport` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_airport`
           WHERE (`airport_name` = 'London Heathrow')) AS RHS
        WHERE (LHS.airport_id = RHS.airport_id
               AND LHS.airport_name = RHS.airport_name
               AND LHS.total_passengers = RHS.total_passengers
               AND LHS.col___change_2007 = RHS.col___change_2007
               AND LHS.international_passengers = RHS.international_passengers
               AND LHS.domestic_passengers = RHS.domestic_passengers
               AND LHS.transit_passengers = RHS.transit_passengers
               AND LHS.aircraft_movements = RHS.aircraft_movements
               AND LHS.freight_metric_tonnes = RHS.freight_metric_tonnes) ))
ORDER BY international_passengers;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/aircraft/0012,"filter(input0, ""aircraft == 'Robinson R-22'""), natural_join4(input0, input1, input2, line0), summarise(line1, 'meantotal_passengers = mean(total_passengers, na.rm = T)', ""'domestic_passengers','international_passengers'"")","SELECT `meantotal_passengers` AS `avg_t3_total_passengers_`
FROM
  (SELECT `domestic_passengers`,
          `international_passengers`,
          AVG(`total_passengers`) AS `meantotal_passengers`
   FROM
     (SELECT `LHS`.`aircraft_id` AS `aircraft_id`,
             `LHS`.`aircraft` AS `aircraft`,
             `LHS`.`description` AS `description`,
             `LHS`.`max_gross_weight` AS `max_gross_weight`,
             `LHS`.`total_disk_area` AS `total_disk_area`,
             `LHS`.`max_disk_loading` AS `max_disk_loading`,
             `LHS`.`airport_id` AS `airport_id`,
             `LHS`.`airport_name` AS `airport_name`,
             `LHS`.`total_passengers` AS `total_passengers`,
             `LHS`.`col___change_2007` AS `col___change_2007`,
             `LHS`.`international_passengers` AS `international_passengers`,
             `LHS`.`domestic_passengers` AS `domestic_passengers`,
             `LHS`.`transit_passengers` AS `transit_passengers`,
             `LHS`.`aircraft_movements` AS `aircraft_movements`,
             `LHS`.`freight_metric_tonnes` AS `freight_metric_tonnes`,
             `LHS`.`id` AS `id`
      FROM
        (SELECT `LHS`.`aircraft_id` AS `aircraft_id`,
                `LHS`.`aircraft` AS `aircraft`,
                `LHS`.`description` AS `description`,
                `LHS`.`max_gross_weight` AS `max_gross_weight`,
                `LHS`.`total_disk_area` AS `total_disk_area`,
                `LHS`.`max_disk_loading` AS `max_disk_loading`,
                `LHS`.`airport_id` AS `airport_id`,
                `LHS`.`airport_name` AS `airport_name`,
                `LHS`.`total_passengers` AS `total_passengers`,
                `LHS`.`col___change_2007` AS `col___change_2007`,
                `LHS`.`international_passengers` AS `international_passengers`,
                `LHS`.`domestic_passengers` AS `domestic_passengers`,
                `LHS`.`transit_passengers` AS `transit_passengers`,
                `LHS`.`aircraft_movements` AS `aircraft_movements`,
                `LHS`.`freight_metric_tonnes` AS `freight_metric_tonnes`,
                `RHS`.`id` AS `id`
         FROM
           (SELECT `LHS`.`aircraft_id` AS `aircraft_id`,
                   `LHS`.`aircraft` AS `aircraft`,
                   `LHS`.`description` AS `description`,
                   `LHS`.`max_gross_weight` AS `max_gross_weight`,
                   `LHS`.`total_disk_area` AS `total_disk_area`,
                   `LHS`.`max_disk_loading` AS `max_disk_loading`,
                   `RHS`.`airport_id` AS `airport_id`,
                   `RHS`.`airport_name` AS `airport_name`,
                   `RHS`.`total_passengers` AS `total_passengers`,
                   `RHS`.`col___change_2007` AS `col___change_2007`,
                   `RHS`.`international_passengers` AS `international_passengers`,
                   `RHS`.`domestic_passengers` AS `domestic_passengers`,
                   `RHS`.`transit_passengers` AS `transit_passengers`,
                   `RHS`.`aircraft_movements` AS `aircraft_movements`,
                   `RHS`.`freight_metric_tonnes` AS `freight_metric_tonnes`
            FROM `df_aircraft` AS `LHS`
            CROSS JOIN `df_airport` AS `RHS`) AS `LHS`
         INNER JOIN `df_airport_aircraft` AS `RHS` ON (`LHS`.`aircraft_id` = `RHS`.`aircraft_id`
                                                       AND `LHS`.`airport_id` = `RHS`.`airport_id`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_aircraft`
         WHERE (`aircraft` = 'Robinson R-22')) AS RHS ON (LHS.aircraft_id = RHS.aircraft_id
                                                          AND LHS.aircraft = RHS.aircraft
                                                          AND LHS.description = RHS.description
                                                          AND LHS.max_gross_weight = RHS.max_gross_weight
                                                          AND LHS.total_disk_area = RHS.total_disk_area
                                                          AND LHS.max_disk_loading = RHS.max_disk_loading))
   GROUP BY domestic_passengers,
            international_passengers)
ORDER BY avg_t3_total_passengers_;",3,15,6,0,6,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
spider/aircraft/0016,df_pilot,"SELECT name
FROM df_pilot
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/aircraft/0020,"limit(input0, 'desc(international_passengers)')","SELECT airport_id,
       airport_name,
       total_passengers,
       col___change_2007,
       international_passengers,
       domestic_passengers,
       transit_passengers,
       aircraft_movements,
       freight_metric_tonnes
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_airport
      ORDER BY international_passengers DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/aircraft/0007,"filter(input0, 'age >= 25L'), intersect(input0, line0, 'name')","SELECT name
FROM
  (SELECT name
   FROM df_pilot INTERSECT SELECT name
   FROM df_pilot
   WHERE (age >= 25))
ORDER BY name;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/aircraft/0001,"summarise(input0, 'n = n()', ""'aircraft_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT aircraft_id,
          COUNT() AS n
   FROM df_aircraft
   GROUP BY aircraft_id)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/aircraft/0014,"mutate(input1, 'n = n()'), natural_join3(input0, input1, line0), limit(line1, 'max_disk_loading')","SELECT aircraft
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.aircraft_id AS aircraft_id,
                LHS.aircraft AS aircraft,
                LHS.description AS description,
                LHS.max_gross_weight AS max_gross_weight,
                LHS.total_disk_area AS total_disk_area,
                LHS.max_disk_loading AS max_disk_loading,
                LHS.round AS round,
                LHS.location AS LOCATION,
                LHS.country AS country,
                LHS.date AS date,
                LHS.fastest_qualifying AS fastest_qualifying,
                LHS.winning_pilot AS winning_pilot,
                LHS.winning_aircraft AS winning_aircraft,
                RHS.n AS n
         FROM
           (SELECT LHS.aircraft_id AS aircraft_id,
                   LHS.aircraft AS aircraft,
                   LHS.description AS description,
                   LHS.max_gross_weight AS max_gross_weight,
                   LHS.total_disk_area AS total_disk_area,
                   LHS.max_disk_loading AS max_disk_loading,
                   RHS.round AS round,
                   RHS.location AS LOCATION,
                   RHS.country AS country,
                   RHS.date AS date,
                   RHS.fastest_qualifying AS fastest_qualifying,
                   RHS.winning_pilot AS winning_pilot,
                   RHS.winning_aircraft AS winning_aircraft
            FROM df_aircraft AS LHS
            CROSS JOIN df_match AS RHS) AS LHS
         INNER JOIN
           (SELECT round,
                   LOCATION,
                   country, date, fastest_qualifying,
                                  winning_pilot,
                                  winning_aircraft,
                                  COUNT(*) OVER () AS n
            FROM df_match) AS RHS ON (LHS.round = RHS.round
                                      AND LHS.location = RHS.location
                                      AND LHS.country = RHS.country
                                      AND LHS.date = RHS.date
                                      AND LHS.fastest_qualifying = RHS.fastest_qualifying
                                      AND LHS.winning_pilot = RHS.winning_pilot
                                      AND LHS.winning_aircraft = RHS.winning_aircraft))
      ORDER BY max_disk_loading)
   LIMIT 1);",2,15,6,0,6,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
spider/aircraft/0009,"filter(input0, 'age <= 30L')","SELECT name
FROM df_pilot
WHERE (age <= 30)
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/aircraft/0011,"filter(input1, 'total_passengers >= 10000000'), natural_join3(input0, input2, line0)","SELECT aircraft,
       description
FROM
  (SELECT LHS.aircraft_id AS aircraft_id,
          LHS.aircraft AS aircraft,
          LHS.description AS description,
          LHS.max_gross_weight AS max_gross_weight,
          LHS.total_disk_area AS total_disk_area,
          LHS.max_disk_loading AS max_disk_loading,
          LHS.id AS id,
          LHS.airport_id AS airport_id,
          RHS.airport_name AS airport_name,
          RHS.total_passengers AS total_passengers,
          RHS.col___change_2007 AS col___change_2007,
          RHS.international_passengers AS international_passengers,
          RHS.domestic_passengers AS domestic_passengers,
          RHS.transit_passengers AS transit_passengers,
          RHS.aircraft_movements AS aircraft_movements,
          RHS.freight_metric_tonnes AS freight_metric_tonnes
   FROM
     (SELECT LHS.aircraft_id AS aircraft_id,
             LHS.aircraft AS aircraft,
             LHS.description AS description,
             LHS.max_gross_weight AS max_gross_weight,
             LHS.total_disk_area AS total_disk_area,
             LHS.max_disk_loading AS max_disk_loading,
             RHS.id AS id,
             RHS.airport_id AS airport_id
      FROM df_aircraft AS LHS
      INNER JOIN df_airport_aircraft AS RHS ON (LHS.aircraft_id = RHS.aircraft_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_airport
      WHERE (total_passengers >= 10000000.0)) AS RHS ON (LHS.airport_id = RHS.airport_id))
ORDER BY aircraft;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/aircraft/0010,"filter(input1, ""airport_name == 'London Gatwick'""), natural_join3(input0, input2, line0)","SELECT `aircraft`
FROM
  (SELECT `LHS`.`aircraft_id` AS `aircraft_id`,
          `LHS`.`aircraft` AS `aircraft`,
          `LHS`.`description` AS `description`,
          `LHS`.`max_gross_weight` AS `max_gross_weight`,
          `LHS`.`total_disk_area` AS `total_disk_area`,
          `LHS`.`max_disk_loading` AS `max_disk_loading`,
          `LHS`.`id` AS `id`,
          `LHS`.`airport_id` AS `airport_id`,
          `RHS`.`airport_name` AS `airport_name`,
          `RHS`.`total_passengers` AS `total_passengers`,
          `RHS`.`col___change_2007` AS `col___change_2007`,
          `RHS`.`international_passengers` AS `international_passengers`,
          `RHS`.`domestic_passengers` AS `domestic_passengers`,
          `RHS`.`transit_passengers` AS `transit_passengers`,
          `RHS`.`aircraft_movements` AS `aircraft_movements`,
          `RHS`.`freight_metric_tonnes` AS `freight_metric_tonnes`
   FROM
     (SELECT `LHS`.`aircraft_id` AS `aircraft_id`,
             `LHS`.`aircraft` AS `aircraft`,
             `LHS`.`description` AS `description`,
             `LHS`.`max_gross_weight` AS `max_gross_weight`,
             `LHS`.`total_disk_area` AS `total_disk_area`,
             `LHS`.`max_disk_loading` AS `max_disk_loading`,
             `RHS`.`id` AS `id`,
             `RHS`.`airport_id` AS `airport_id`
      FROM `df_aircraft` AS `LHS`
      INNER JOIN `df_airport_aircraft` AS `RHS` ON (`LHS`.`aircraft_id` = `RHS`.`aircraft_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_airport`
      WHERE (`airport_name` = 'London Gatwick')) AS RHS ON (LHS.airport_id = RHS.airport_id))
ORDER BY aircraft;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/sports_competition/0002,df_club,"SELECT region
FROM df_club
ORDER BY region;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/sports_competition/0017,"summarise(input0, 'n = n()', ""'competition_type'""), filter(line0, 'n <= 5L'), mutate(line1, 'n = n()')","SELECT competition_type
FROM
  (SELECT competition_type,
          COUNT() AS n
   FROM df_competition
   GROUP BY competition_type)
WHERE (n <= 5)
ORDER BY competition_type;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/sports_competition/0008,df_club,"SELECT name
FROM df_club
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/sports_competition/0003,"summarise(input0, 'meangold = mean(gold, na.rm = T)', ""'gold','silver'""), summarise(line0, 'meangold = mean(gold, na.rm = T)', '')","SELECT meangold AS avg_gold_
FROM
  (SELECT AVG(gold) AS meangold
   FROM
     (SELECT gold,
             silver,
             AVG(gold) AS meangold
      FROM df_club_rank
      GROUP BY gold,
               silver))
ORDER BY avg_gold_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/sports_competition/0022,"mutate(input0, 'meanpoints = mean(points, na.rm = T)'), filter(line0, 'meanpoints < points')","SELECT name
FROM
  (SELECT player_id,
          name,
          POSITION,
          club_id,
          apps,
          tries,
          goals,
          points,
          AVG(points) OVER () AS meanpoints
   FROM df_player)
WHERE (meanpoints < points)
ORDER BY name;",2,7,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/sports_competition/0013,"summarise(input0, 'meanpoints = mean(points, na.rm = T)', ""'position'""), semi_join(line0, input0)","SELECT POSITION,
       meanpoints AS avg_points_
FROM
  (SELECT *
   FROM
     (SELECT POSITION,
             AVG(points) AS meanpoints
      FROM df_player
      GROUP BY POSITION) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_player AS RHS
        WHERE (LHS.position = RHS.position) ))
ORDER BY POSITION;",2,15,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/sports_competition/0006,"summarise(input0, 'silver = min(silver)', ""'total'""), mutate(line0, 'silver = max(silver)'), natural_join(input0, line1)","SELECT gold AS max_silver_,
       rank AS min_silver_
FROM
  (SELECT LHS.rank AS rank,
          LHS.club_id AS club_id,
          LHS.gold AS gold,
          LHS.silver AS silver,
          LHS.bronze AS bronze,
          LHS.total AS total
   FROM df_club_rank AS LHS
   INNER JOIN
     (SELECT total,
             MAX(silver) OVER () AS silver
      FROM
        (SELECT total,
                MIN(silver) AS silver
         FROM df_club_rank
         GROUP BY total)) AS RHS ON (LHS.silver = RHS.silver
                                     AND LHS.total = RHS.total))
ORDER BY max_silver_;",3,10,4,0,4,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0
spider/sports_competition/0004,"intersect(input0, input0, 'competition_type'), inner_join(line0, input0, ""'competition_type'"")","SELECT competition_type,
       country
FROM
  (SELECT LHS.competition_type AS competition_type,
          RHS.competition_id AS competition_id,
          RHS.year AS YEAR,
          RHS.country AS country
   FROM
     (SELECT competition_type
      FROM df_competition INTERSECT SELECT competition_type
      FROM df_competition) AS LHS
   INNER JOIN df_competition AS RHS ON (LHS.competition_type = RHS.competition_type))
ORDER BY competition_type;",2,11,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0
spider/sports_competition/0012,"filter(input0, ""name != 'AIB'""), anti_join(input1, line0, ""'club_id'""), mutate(line1, 'meanpoints = mean(points, na.rm = T)')","SELECT DISTINCT AVG(`points`) OVER () AS `avg_t2_points_`
FROM
  (SELECT *
   FROM `df_player` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_club`
           WHERE (`name` != 'AIB')) AS RHS
        WHERE (LHS.club_id = RHS.club_id) ))
ORDER BY avg_t2_points_;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/sports_competition/0026,"filter(input0, ""competition_type == 'Friendly'""), semi_join(line0, input0), anti_join(input0, line1, ""'country','year'"")","SELECT DISTINCT `country`
FROM
  (SELECT *
   FROM `df_competition` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT *
              FROM `df_competition`
              WHERE (`competition_type` = 'Friendly')) AS LHS
           WHERE EXISTS
               (SELECT 1
                FROM df_competition AS RHS
                WHERE (LHS.competition_id = RHS.competition_id
                       AND LHS.year = RHS.year
                       AND LHS.competition_type = RHS.competition_type
                       AND LHS.country = RHS.country) )) AS RHS
        WHERE (LHS.country = RHS.country
               AND LHS.year = RHS.year) ))
ORDER BY country;",3,21,6,1,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/sports_competition/0015,"summarise(input0, 'n = n()', ""'competition_type'"")","SELECT competition_type,
       n AS count___
FROM
  (SELECT competition_type,
          COUNT() AS n
   FROM df_competition
   GROUP BY competition_type)
ORDER BY competition_type;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/sports_competition/0005,"filter(input0, ""competition_type != 'Tournament'"")","SELECT DISTINCT `year`
FROM `df_competition`
WHERE (`competition_type` != 'Tournament')
ORDER BY YEAR;",1,5,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/sports_competition/0016,"summarise(input0, 'n = n()', ""'competition_type','country'""), limit(line0, 'competition_type')","SELECT competition_type
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT competition_type,
                country,
                COUNT() AS n
         FROM df_competition
         GROUP BY competition_type,
                  country)
      ORDER BY competition_type)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/sports_competition/0018,"anti_join(input0, input1, ""'club_id'"")","SELECT name
FROM
  (SELECT *
   FROM df_club AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_player AS RHS
        WHERE (LHS.club_id = RHS.club_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/sports_competition/0020,"summarise(input0, 'sumpoints = sum(points)', '')","SELECT sumpoints AS sum_points_
FROM
  (SELECT SUM(points) AS sumpoints
   FROM df_player)
ORDER BY sum_points_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/sports_competition/0019,"filter(input0, 'points != 20 & points > 10'), inner_join(input0, line0, ""'position' = 'position','points' = 'tries'"")","SELECT POSITION
FROM
  (SELECT LHS.player_id AS player_id,
          LHS.name AS name,
          LHS.position AS POSITION,
          LHS.club_id AS club_id,
          LHS.apps AS apps,
          LHS.tries AS tries,
          LHS.goals AS goals,
          LHS.points AS points,
          RHS.player_id AS player_id_other,
          RHS.name AS name_other,
          RHS.club_id AS club_id_other,
          RHS.apps AS apps_other,
          RHS.goals AS goals_other,
          RHS.points AS points_other
   FROM df_player AS LHS
   INNER JOIN
     (SELECT *
      FROM df_player
      WHERE (points != 20.0
             AND points > 10.0)) AS RHS ON (LHS.position = RHS.position
                                            AND LHS.points = RHS.tries))
ORDER BY POSITION;",2,11,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/sports_competition/0007,"filter(input0, 'total < 10'), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_club_rank
WHERE (total < 10.0)
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/sports_competition/0024,"summarise(input0, 'n = n()', ""'competition_type','country'""), filter(line0, ""competition_type == 'Tournament' & n > 1L"")","SELECT `country`
FROM
  (SELECT `competition_type`,
          `country`,
          COUNT() AS `n`
   FROM `df_competition`
   GROUP BY `competition_type`,
            `country`)
WHERE (`competition_type` = 'Tournament'
       AND n > 1)
ORDER BY country;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/sports_competition/0021,"summarise(input0, 'n_distinct = n_distinct(position)', ""'points','tries'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count_distinct_position_
FROM
  (SELECT points,
          tries,
          COUNT(DISTINCT POSITION) AS n_distinct
   FROM df_player
   GROUP BY points,
            tries)
ORDER BY count_distinct_position_;",2,8,2,2,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/sports_competition/0023,"filter(input0, 'points < 30'), summarise(line0, 'n = n()', ""'apps','position'""), summarise(line1, 'n = n()', ""'position'"")","SELECT n AS count___,
       POSITION
FROM
  (SELECT POSITION,
          COUNT() AS n
   FROM
     (SELECT apps,
             POSITION,
             COUNT() AS n
      FROM
        (SELECT *
         FROM df_player
         WHERE (points < 30.0))
      GROUP BY apps,
               POSITION)
   GROUP BY POSITION)
ORDER BY count___;",3,14,4,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0
spider/sports_competition/0001,"summarise(input0, 'n = n()', ""'club_id','start_year'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT club_id,
             start_year,
             COUNT() AS n
      FROM df_club
      GROUP BY club_id,
               start_year))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/sports_competition/0014,"filter(input0, 'points >= 20'), summarise(line0, 'meanpoints = mean(points, na.rm = T)', ""'apps','position'"")","SELECT POSITION
FROM
  (SELECT apps,
          POSITION,
          AVG(points) AS meanpoints
   FROM
     (SELECT *
      FROM df_player
      WHERE (points >= 20.0))
   GROUP BY apps,
            POSITION)
ORDER BY POSITION;",2,11,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/sports_competition/0009,df_club,"SELECT name
FROM df_club
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/sports_competition/0025,"filter(input0, ""competition_type != 'Friendly' & competition_type == 'Tournament'""), anti_join(input0, line0, ""'competition_id'""), inner_join(line1, line0, ""'country','year'"")","SELECT `country`
FROM
  (SELECT `LHS`.`competition_id` AS `competition_id`,
          `LHS`.`year` AS `year`,
          `LHS`.`competition_type` AS `competition_type`,
          `LHS`.`country` AS `country`,
          `RHS`.`competition_id` AS `competition_id_other`,
          `RHS`.`competition_type` AS `competition_type_other`
   FROM
     (SELECT *
      FROM `df_competition` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_competition`
              WHERE (`competition_type` != 'Friendly'
                     AND `competition_type` = 'Tournament')) AS `RHS`
           WHERE (`LHS`.`competition_id` = `RHS`.`competition_id`) )) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_competition`
      WHERE (`competition_type` != 'Friendly'
             AND `competition_type` = 'Tournament')) AS RHS ON (LHS.country = RHS.country
                                                                AND LHS.year = RHS.year))
ORDER BY country;",3,19,6,0,6,1,4,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0
spider/sports_competition/0011,"filter(input1, ""position == 'Right Wing'""), inner_join(input0, line0, ""'club_id' = 'player_id'"")","SELECT `name`
FROM
  (SELECT `LHS`.`club_id` AS `club_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`region` AS `region`,
          `LHS`.`start_year` AS `start_year`,
          `RHS`.`name` AS `name_other`,
          `RHS`.`position` AS `position`,
          `RHS`.`club_id` AS `club_id_other`,
          `RHS`.`apps` AS `apps`,
          `RHS`.`tries` AS `tries`,
          `RHS`.`goals` AS `goals`,
          `RHS`.`points` AS `points`
   FROM `df_club` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_player`
      WHERE (`position` = 'Right Wing')) AS RHS ON (LHS.club_id = RHS.player_id))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/sports_competition/0010,"inner_join(input1, input0, ""'club_id'"")","SELECT name_other AS name,
       player_id
FROM
  (SELECT LHS.player_id AS player_id,
          LHS.name AS name,
          LHS.position AS POSITION,
          LHS.club_id AS club_id,
          LHS.apps AS apps,
          LHS.tries AS tries,
          LHS.goals AS goals,
          LHS.points AS points,
          RHS.name AS name_other,
          RHS.region AS region,
          RHS.start_year AS start_year
   FROM df_player AS LHS
   INNER JOIN df_club AS RHS ON (LHS.club_id = RHS.club_id))
ORDER BY name;",1,6,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/dorm_1/0042,"filter(input0, ""dorm_name == 'Smith Hall'""), natural_join4(input0, input1, input2, line0)","SELECT `amenity_name`
FROM
  (SELECT `LHS`.`dormid` AS `dormid`,
          `LHS`.`dorm_name` AS `dorm_name`,
          `LHS`.`student_capacity` AS `student_capacity`,
          `LHS`.`gender` AS `gender`,
          `LHS`.`amenid` AS `amenid`,
          `LHS`.`amenity_name` AS `amenity_name`
   FROM
     (SELECT `LHS`.`dormid` AS `dormid`,
             `LHS`.`dorm_name` AS `dorm_name`,
             `LHS`.`student_capacity` AS `student_capacity`,
             `LHS`.`gender` AS `gender`,
             `LHS`.`amenid` AS `amenid`,
             `LHS`.`amenity_name` AS `amenity_name`
      FROM
        (SELECT `LHS`.`dormid` AS `dormid`,
                `LHS`.`dorm_name` AS `dorm_name`,
                `LHS`.`student_capacity` AS `student_capacity`,
                `LHS`.`gender` AS `gender`,
                `RHS`.`amenid` AS `amenid`,
                `RHS`.`amenity_name` AS `amenity_name`
         FROM `df_dorm` AS `LHS`
         CROSS JOIN `df_dorm_amenity` AS `RHS`) AS `LHS`
      INNER JOIN `df_has_amenity` AS `RHS` ON (`LHS`.`dormid` = `RHS`.`dormid`
                                               AND `LHS`.`amenid` = `RHS`.`amenid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_dorm`
      WHERE (`dorm_name` = 'Smith Hall')) AS RHS ON (LHS.dormid = RHS.dormid
                                                     AND LHS.dorm_name = RHS.dorm_name
                                                     AND LHS.student_capacity = RHS.student_capacity
                                                     AND LHS.gender = RHS.gender))
ORDER BY amenity_name;",2,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
spider/dorm_1/0033,"filter(input0, 'major >= 1L'), cross_join(line0, input0, 'major > major.other'), mutate(line1, 'n_distinct = n_distinct(major)')","SELECT DISTINCT fname_other AS fname,
                lname_other AS lname
FROM
  (SELECT LHS.stuid AS stuid,
          LHS.lname AS lname,
          LHS.fname AS fname,
          LHS.age AS age,
          LHS.sex AS sex,
          LHS.major AS major,
          LHS.advisor AS advisor,
          LHS.city_code AS city_code,
          RHS.stuid AS stuid_other,
          RHS.lname AS lname_other,
          RHS.fname AS fname_other,
          RHS.age AS age_other,
          RHS.sex AS sex_other,
          RHS.major AS major_other,
          RHS.advisor AS advisor_other,
          RHS.city_code AS city_code_other
   FROM
     (SELECT *
      FROM df_student
      WHERE (major >= 1)) AS LHS
   CROSS JOIN df_student AS RHS)
WHERE (major > major_other)
ORDER BY fname;",3,9,3,1,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0
spider/dorm_1/0037,"filter(input0, 'age > 20L'), natural_join4(input0, input1, input2, line0), summarise(line1, 'n_distinct = n_distinct(age)', ""'dorm_name','dormid'"")","SELECT n_distinct AS count___,
       dorm_name
FROM
  (SELECT dorm_name,
          dormid,
          COUNT(DISTINCT age) AS n_distinct
   FROM
     (SELECT LHS.stuid AS stuid,
             LHS.lname AS lname,
             LHS.fname AS fname,
             LHS.age AS age,
             LHS.sex AS sex,
             LHS.major AS major,
             LHS.advisor AS advisor,
             LHS.city_code AS city_code,
             LHS.dormid AS dormid,
             LHS.dorm_name AS dorm_name,
             LHS.student_capacity AS student_capacity,
             LHS.gender AS gender,
             LHS.room_number AS room_number
      FROM
        (SELECT LHS.stuid AS stuid,
                LHS.lname AS lname,
                LHS.fname AS fname,
                LHS.age AS age,
                LHS.sex AS sex,
                LHS.major AS major,
                LHS.advisor AS advisor,
                LHS.city_code AS city_code,
                LHS.dormid AS dormid,
                LHS.dorm_name AS dorm_name,
                LHS.student_capacity AS student_capacity,
                LHS.gender AS gender,
                RHS.room_number AS room_number
         FROM
           (SELECT LHS.stuid AS stuid,
                   LHS.lname AS lname,
                   LHS.fname AS fname,
                   LHS.age AS age,
                   LHS.sex AS sex,
                   LHS.major AS major,
                   LHS.advisor AS advisor,
                   LHS.city_code AS city_code,
                   RHS.dormid AS dormid,
                   RHS.dorm_name AS dorm_name,
                   RHS.student_capacity AS student_capacity,
                   RHS.gender AS gender
            FROM df_student AS LHS
            CROSS JOIN df_dorm AS RHS) AS LHS
         INNER JOIN df_lives_in AS RHS ON (LHS.stuid = RHS.stuid
                                           AND LHS.dormid = RHS.dormid)) AS LHS
      INNER JOIN
        (SELECT *
         FROM df_student
         WHERE (age > 20)) AS RHS ON (LHS.stuid = RHS.stuid
                                      AND LHS.lname = RHS.lname
                                      AND LHS.fname = RHS.fname
                                      AND LHS.age = RHS.age
                                      AND LHS.sex = RHS.sex
                                      AND LHS.major = RHS.major
                                      AND LHS.advisor = RHS.advisor
                                      AND LHS.city_code = RHS.city_code))
   GROUP BY dorm_name,
            dormid)
ORDER BY count___;",3,16,6,1,6,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
spider/dorm_1/0002,"filter(input0, 'student_capacity >= 300L')","SELECT dorm_name
FROM df_dorm
WHERE (student_capacity >= 300)
ORDER BY dorm_name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/dorm_1/0036,"filter(input0, 'student_capacity > 100L'), natural_join3(input0, input1, line0), summarise(line1, 'n = n()', ""'dormid'"")","SELECT n AS count___,
       dormid
FROM
  (SELECT dormid,
          COUNT() AS n
   FROM
     (SELECT LHS.dormid AS dormid,
             LHS.dorm_name AS dorm_name,
             LHS.student_capacity AS student_capacity,
             LHS.gender AS gender,
             LHS.amenid AS amenid
      FROM
        (SELECT LHS.dormid AS dormid,
                LHS.dorm_name AS dorm_name,
                LHS.student_capacity AS student_capacity,
                LHS.gender AS gender,
                RHS.amenid AS amenid
         FROM df_dorm AS LHS
         INNER JOIN df_has_amenity AS RHS ON (LHS.dormid = RHS.dormid)) AS LHS
      INNER JOIN
        (SELECT *
         FROM df_dorm
         WHERE (student_capacity > 100)) AS RHS ON (LHS.dormid = RHS.dormid
                                                    AND LHS.dorm_name = RHS.dorm_name
                                                    AND LHS.student_capacity = RHS.student_capacity
                                                    AND LHS.gender = RHS.gender))
   GROUP BY dormid)
ORDER BY count___;",3,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/dorm_1/0008,"summarise(input0, 'sumstudent_capacity = sum(student_capacity)', ""'dormid','student_capacity'""), summarise(line0, 'sumstudent_capacity = sum(student_capacity)', '')","SELECT sumstudent_capacity AS sum_student_capacity_
FROM
  (SELECT SUM(student_capacity) AS sumstudent_capacity
   FROM
     (SELECT dormid,
             student_capacity,
             SUM(student_capacity) AS sumstudent_capacity
      FROM df_dorm
      GROUP BY dormid,
               student_capacity))
ORDER BY sum_student_capacity_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/dorm_1/0039,"summarise(input1, 'student_capacity = max(student_capacity)', ''), natural_join4(input0, input1, input2, line0), mutate(line1, 'meanage = mean(age, na.rm = T)')","SELECT DISTINCT AVG(age) OVER () AS avg_t1_age_
FROM
  (SELECT LHS.stuid AS stuid,
          LHS.lname AS lname,
          LHS.fname AS fname,
          LHS.age AS age,
          LHS.sex AS sex,
          LHS.major AS major,
          LHS.advisor AS advisor,
          LHS.city_code AS city_code,
          LHS.dormid AS dormid,
          LHS.dorm_name AS dorm_name,
          LHS.student_capacity AS student_capacity,
          LHS.gender AS gender,
          LHS.room_number AS room_number
   FROM
     (SELECT LHS.stuid AS stuid,
             LHS.lname AS lname,
             LHS.fname AS fname,
             LHS.age AS age,
             LHS.sex AS sex,
             LHS.major AS major,
             LHS.advisor AS advisor,
             LHS.city_code AS city_code,
             LHS.dormid AS dormid,
             LHS.dorm_name AS dorm_name,
             LHS.student_capacity AS student_capacity,
             LHS.gender AS gender,
             RHS.room_number AS room_number
      FROM
        (SELECT LHS.stuid AS stuid,
                LHS.lname AS lname,
                LHS.fname AS fname,
                LHS.age AS age,
                LHS.sex AS sex,
                LHS.major AS major,
                LHS.advisor AS advisor,
                LHS.city_code AS city_code,
                RHS.dormid AS dormid,
                RHS.dorm_name AS dorm_name,
                RHS.student_capacity AS student_capacity,
                RHS.gender AS gender
         FROM df_student AS LHS
         CROSS JOIN df_dorm AS RHS) AS LHS
      INNER JOIN df_lives_in AS RHS ON (LHS.stuid = RHS.stuid
                                        AND LHS.dormid = RHS.dormid)) AS LHS
   INNER JOIN
     (SELECT MAX(student_capacity) AS student_capacity
      FROM df_dorm) AS RHS ON (LHS.student_capacity = RHS.student_capacity))
ORDER BY avg_t1_age_;",3,14,5,1,5,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0
spider/dorm_1/0038,"filter(input1, ""dorm_name == 'Smith Hall'""), natural_join3(input0, input2, line0)","SELECT `fname`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `LHS`.`dormid` AS `dormid`,
          `LHS`.`room_number` AS `room_number`,
          `RHS`.`dorm_name` AS `dorm_name`,
          `RHS`.`student_capacity` AS `student_capacity`,
          `RHS`.`gender` AS `gender`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `RHS`.`dormid` AS `dormid`,
             `RHS`.`room_number` AS `room_number`
      FROM `df_student` AS `LHS`
      INNER JOIN `df_lives_in` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_dorm`
      WHERE (`dorm_name` = 'Smith Hall')) AS RHS ON (LHS.dormid = RHS.dormid))
ORDER BY fname;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/dorm_1/0003,"mutate(input0, 'n_distinct = n_distinct(age)'), filter(line0, ""sex == 'F' | age > 25L"")","SELECT DISTINCT `n_distinct` AS `count___`
FROM
  (SELECT `stuid`,
          `lname`,
          `fname`,
          `age`,
          `sex`,
          `major`,
          `advisor`,
          `city_code`,
          COUNT(DISTINCT `age`) OVER () AS `n_distinct`
   FROM `df_student`)
WHERE (`sex` = 'F'
       OR age > 25)
ORDER BY count___;",2,9,2,2,2,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/dorm_1/0027,"summarise(input0, 'n_distinct = n_distinct(student_capacity)', ""'gender'""), summarise(input0, 'sumstudent_capacity = sum(student_capacity)', ""'gender'""), left_join(line1, line0)","SELECT n_distinct AS count___,
       sumstudent_capacity AS sum_student_capacity_,
       gender
FROM
  (SELECT LHS.gender AS gender,
          LHS.sumstudent_capacity AS sumstudent_capacity,
          RHS.n_distinct AS n_distinct
   FROM
     (SELECT gender,
             SUM(student_capacity) AS sumstudent_capacity
      FROM df_dorm
      GROUP BY gender) AS LHS
   LEFT JOIN
     (SELECT gender,
             COUNT(DISTINCT student_capacity) AS n_distinct
      FROM df_dorm
      GROUP BY gender) AS RHS ON (LHS.gender = RHS.gender))
ORDER BY count___;",3,10,4,1,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0
spider/dorm_1/0048,"natural_join4(input0, input1, input2, input3), filter(line0, ""amenity_name == 'TV Lounge'"")","SELECT `fname`,
       `lname`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `LHS`.`amenid` AS `amenid`,
          `LHS`.`amenity_name` AS `amenity_name`,
          `LHS`.`dormid` AS `dormid`,
          `RHS`.`room_number` AS `room_number`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `LHS`.`amenid` AS `amenid`,
             `LHS`.`amenity_name` AS `amenity_name`,
             `RHS`.`dormid` AS `dormid`
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `RHS`.`amenid` AS `amenid`,
                `RHS`.`amenity_name` AS `amenity_name`
         FROM `df_student` AS `LHS`
         CROSS JOIN `df_dorm_amenity` AS `RHS`) AS `LHS`
      INNER JOIN `df_has_amenity` AS `RHS` ON (`LHS`.`amenid` = `RHS`.`amenid`)) AS `LHS`
   INNER JOIN `df_lives_in` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`
                                         AND `LHS`.`dormid` = `RHS`.`dormid`))
WHERE (`amenity_name` = 'TV Lounge')
ORDER BY fname;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
spider/dorm_1/0022,df_dorm_amenity,"SELECT amenity_name
FROM df_dorm_amenity
ORDER BY amenity_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/dorm_1/0030,"summarise(input0, 'meanage = mean(age, na.rm = T)', ""'city_code'""), summarise(input0, 'n = n()', ""'city_code'""), inner_join(line0, line1, ""'city_code'"")","SELECT n AS count___,
       meanage AS avg_age_,
       city_code
FROM
  (SELECT LHS.city_code AS city_code,
          LHS.meanage AS meanage,
          RHS.n AS n
   FROM
     (SELECT city_code,
             AVG(age) AS meanage
      FROM df_student
      GROUP BY city_code) AS LHS
   INNER JOIN
     (SELECT city_code,
             COUNT() AS n
      FROM df_student
      GROUP BY city_code) AS RHS ON (LHS.city_code = RHS.city_code))
ORDER BY count___;",3,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0
spider/dorm_1/0006,"summarise(input0, 'n = n()', ""'dorm_name','student_capacity'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT dorm_name,
          student_capacity,
          COUNT() AS n
   FROM df_dorm
   GROUP BY dorm_name,
            student_capacity)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/dorm_1/0004,"filter(input0, 'age > 20L'), natural_join(input0, line0)","SELECT fname
FROM
  (SELECT LHS.stuid AS stuid,
          LHS.lname AS lname,
          LHS.fname AS fname,
          LHS.age AS age,
          LHS.sex AS sex,
          LHS.major AS major,
          LHS.advisor AS advisor,
          LHS.city_code AS city_code
   FROM df_student AS LHS
   INNER JOIN
     (SELECT *
      FROM df_student
      WHERE (age > 20)) AS RHS ON (LHS.stuid = RHS.stuid
                                   AND LHS.lname = RHS.lname
                                   AND LHS.fname = RHS.fname
                                   AND LHS.age = RHS.age
                                   AND LHS.sex = RHS.sex
                                   AND LHS.major = RHS.major
                                   AND LHS.advisor = RHS.advisor
                                   AND LHS.city_code = RHS.city_code))
ORDER BY fname;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/dorm_1/0012,"summarise(input0, 'n_distinct = n_distinct(dormid)', '')","SELECT n_distinct AS count_distinct_dormid_
FROM
  (SELECT COUNT(DISTINCT dormid) AS n_distinct
   FROM df_has_amenity)
ORDER BY count_distinct_dormid_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/dorm_1/0026,"filter(input0, ""dorm_name == 'Anonymous Donor Hall'""), natural_join3(input1, input2, line0)","SELECT `amenity_name`
FROM
  (SELECT `LHS`.`amenid` AS `amenid`,
          `LHS`.`amenity_name` AS `amenity_name`,
          `LHS`.`dormid` AS `dormid`,
          `RHS`.`dorm_name` AS `dorm_name`,
          `RHS`.`student_capacity` AS `student_capacity`,
          `RHS`.`gender` AS `gender`
   FROM
     (SELECT `LHS`.`amenid` AS `amenid`,
             `LHS`.`amenity_name` AS `amenity_name`,
             `RHS`.`dormid` AS `dormid`
      FROM `df_dorm_amenity` AS `LHS`
      INNER JOIN `df_has_amenity` AS `RHS` ON (`LHS`.`amenid` = `RHS`.`amenid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_dorm`
      WHERE (`dorm_name` = 'Anonymous Donor Hall')) AS RHS ON (LHS.dormid = RHS.dormid))
ORDER BY amenity_name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/dorm_1/0005,"filter(input0, 'age >= 20L & age <= 25L'), filter(line0, ""city_code == 'PHL'"")","SELECT `fname`
FROM
  (SELECT *
   FROM `df_student`
   WHERE (`age` >= 20
          AND `age` <= 25))
WHERE (`city_code` = 'PHL')
ORDER BY fname;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/dorm_1/0016,"filter(input0, 'student_capacity >= 300L | student_capacity <= 100L')","SELECT dorm_name,
       gender
FROM df_dorm
WHERE (student_capacity >= 300
       OR student_capacity <= 100)
ORDER BY dorm_name;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/dorm_1/0050,"natural_join(input0, input1), natural_join4(input2, input3, input4, line0), filter(line1, ""lname == 'Smith'"")","SELECT `amenity_name`
FROM
  (SELECT `LHS`.`amenid` AS `amenid`,
          `LHS`.`amenity_name` AS `amenity_name`,
          `LHS`.`dormid` AS `dormid`,
          `LHS`.`stuid` AS `stuid`,
          `LHS`.`room_number` AS `room_number`,
          `RHS`.`lname` AS `lname`,
          `RHS`.`fname` AS `fname`,
          `RHS`.`age` AS `age`,
          `RHS`.`sex` AS `sex`,
          `RHS`.`major` AS `major`,
          `RHS`.`advisor` AS `advisor`,
          `RHS`.`city_code` AS `city_code`,
          `RHS`.`dorm_name` AS `dorm_name`,
          `RHS`.`student_capacity` AS `student_capacity`,
          `RHS`.`gender` AS `gender`
   FROM
     (SELECT `LHS`.`amenid` AS `amenid`,
             `LHS`.`amenity_name` AS `amenity_name`,
             `LHS`.`dormid` AS `dormid`,
             `RHS`.`stuid` AS `stuid`,
             `RHS`.`room_number` AS `room_number`
      FROM
        (SELECT `LHS`.`amenid` AS `amenid`,
                `LHS`.`amenity_name` AS `amenity_name`,
                `RHS`.`dormid` AS `dormid`
         FROM `df_dorm_amenity` AS `LHS`
         INNER JOIN `df_has_amenity` AS `RHS` ON (`LHS`.`amenid` = `RHS`.`amenid`)) AS `LHS`
      INNER JOIN `df_lives_in` AS `RHS` ON (`LHS`.`dormid` = `RHS`.`dormid`)) AS `LHS`
   INNER JOIN
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `RHS`.`dormid` AS `dormid`,
             `RHS`.`dorm_name` AS `dorm_name`,
             `RHS`.`student_capacity` AS `student_capacity`,
             `RHS`.`gender` AS `gender`
      FROM `df_student` AS `LHS`
      CROSS JOIN `df_dorm` AS `RHS`) AS `RHS` ON (`LHS`.`dormid` = `RHS`.`dormid`
                                                  AND `LHS`.`stuid` = `RHS`.`stuid`))
WHERE (`lname` = 'Smith')
ORDER BY amenity_name;",3,14,5,0,5,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0
spider/dorm_1/0032,"summarise(input0, 'n = n()', ""'city_code'""), filter(line0, 'n != 1L')","SELECT n AS count___,
       city_code
FROM
  (SELECT city_code,
          COUNT() AS n
   FROM df_student
   GROUP BY city_code)
WHERE (n != 1)
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/dorm_1/0045,"filter(input3, 'dormid >= 1L'), natural_join4(input1, input2, input4, line0), mutate(input0, 'n = n()'), semi_join(line2, line1)","SELECT fname
FROM
  (SELECT *
   FROM
     (SELECT stuid,
             lname,
             fname,
             age,
             sex,
             major,
             advisor,
             city_code,
             COUNT(*) OVER () AS n
      FROM df_student) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT LHS.dormid AS dormid,
                  LHS.dorm_name AS dorm_name,
                  LHS.student_capacity AS student_capacity,
                  LHS.gender AS gender,
                  LHS.amenid AS amenid,
                  LHS.amenity_name AS amenity_name,
                  LHS.stuid AS stuid,
                  LHS.room_number AS room_number
           FROM
             (SELECT LHS.dormid AS dormid,
                     LHS.dorm_name AS dorm_name,
                     LHS.student_capacity AS student_capacity,
                     LHS.gender AS gender,
                     LHS.amenid AS amenid,
                     LHS.amenity_name AS amenity_name,
                     RHS.stuid AS stuid,
                     RHS.room_number AS room_number
              FROM
                (SELECT LHS.dormid AS dormid,
                        LHS.dorm_name AS dorm_name,
                        LHS.student_capacity AS student_capacity,
                        LHS.gender AS gender,
                        RHS.amenid AS amenid,
                        RHS.amenity_name AS amenity_name
                 FROM df_dorm AS LHS
                 CROSS JOIN df_dorm_amenity AS RHS) AS LHS
              INNER JOIN df_lives_in AS RHS ON (LHS.dormid = RHS.dormid)) AS LHS
           INNER JOIN
             (SELECT *
              FROM df_has_amenity
              WHERE (dormid >= 1)) AS RHS ON (LHS.dormid = RHS.dormid
                                              AND LHS.amenid = RHS.amenid)) AS RHS
        WHERE (LHS.stuid = RHS.stuid) ))
ORDER BY fname;",4,23,8,0,8,2,3,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0
spider/dorm_1/0041,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'dorm_name','sex'""), filter(line1, ""dorm_name == 'Smith Hall' & sex == 'F'"")","SELECT `n` AS `count___`
FROM
  (SELECT `dorm_name`,
          `sex`,
          COUNT() AS `n`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `LHS`.`dormid` AS `dormid`,
             `LHS`.`dorm_name` AS `dorm_name`,
             `LHS`.`student_capacity` AS `student_capacity`,
             `LHS`.`gender` AS `gender`,
             `RHS`.`room_number` AS `room_number`
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `RHS`.`dormid` AS `dormid`,
                `RHS`.`dorm_name` AS `dorm_name`,
                `RHS`.`student_capacity` AS `student_capacity`,
                `RHS`.`gender` AS `gender`
         FROM `df_student` AS `LHS`
         CROSS JOIN `df_dorm` AS `RHS`) AS `LHS`
      INNER JOIN `df_lives_in` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`
                                            AND `LHS`.`dormid` = `RHS`.`dormid`))
   GROUP BY `dorm_name`,
            `sex`)
WHERE (`dorm_name` = 'Smith Hall'
       AND `sex` = 'F')
ORDER BY count___;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/dorm_1/0035,"natural_join3(input0, input1, input2), summarise(line0, 'meanage = mean(age, na.rm = T)', ""'dorm_name'"")","SELECT meanage AS avg_t1_age_,
       dorm_name
FROM
  (SELECT dorm_name,
          AVG(age) AS meanage
   FROM
     (SELECT LHS.stuid AS stuid,
             LHS.lname AS lname,
             LHS.fname AS fname,
             LHS.age AS age,
             LHS.sex AS sex,
             LHS.major AS major,
             LHS.advisor AS advisor,
             LHS.city_code AS city_code,
             LHS.dormid AS dormid,
             LHS.dorm_name AS dorm_name,
             LHS.student_capacity AS student_capacity,
             LHS.gender AS gender,
             RHS.room_number AS room_number
      FROM
        (SELECT LHS.stuid AS stuid,
                LHS.lname AS lname,
                LHS.fname AS fname,
                LHS.age AS age,
                LHS.sex AS sex,
                LHS.major AS major,
                LHS.advisor AS advisor,
                LHS.city_code AS city_code,
                RHS.dormid AS dormid,
                RHS.dorm_name AS dorm_name,
                RHS.student_capacity AS student_capacity,
                RHS.gender AS gender
         FROM df_student AS LHS
         CROSS JOIN df_dorm AS RHS) AS LHS
      INNER JOIN df_lives_in AS RHS ON (LHS.stuid = RHS.stuid
                                        AND LHS.dormid = RHS.dormid))
   GROUP BY dorm_name)
ORDER BY avg_t1_age_;",2,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
spider/dorm_1/0020,"filter(input0, ""sex == 'F' | age < 20L""), filter(line0, ""city_code == 'BAL' | sex == 'M'"")","SELECT DISTINCT `lname`
FROM
  (SELECT *
   FROM `df_student`
   WHERE (`sex` = 'F'
          OR `age` < 20))
WHERE (`city_code` = 'BAL'
       OR `sex` = 'M')
ORDER BY lname;",2,9,2,1,2,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/dorm_1/0007,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_dorm_amenity)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/dorm_1/0034,"mutate(input0, 'meanage = mean(age, na.rm = T)'), filter(line0, 'meanage <= age'), summarise(line1, 'n = n()', ""'sex'"")","SELECT n AS count___,
       sex
FROM
  (SELECT sex,
          COUNT() AS n
   FROM
     (SELECT *
      FROM
        (SELECT stuid,
                lname,
                fname,
                age,
                sex,
                major,
                advisor,
                city_code,
                AVG(age) OVER () AS meanage
         FROM df_student)
      WHERE (meanage <= age))
   GROUP BY sex)
ORDER BY count___;",3,10,4,0,4,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/dorm_1/0024,"mutate(input0, 'meanage = mean(age, na.rm = T)'), filter(line0, 'meanage > age')","SELECT fname,
       lname
FROM
  (SELECT stuid,
          lname,
          fname,
          age,
          sex,
          major,
          advisor,
          city_code,
          AVG(age) OVER () AS meanage
   FROM df_student)
WHERE (meanage > age)
ORDER BY fname;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/dorm_1/0021,"limit(input0, 'desc(student_capacity)')","SELECT dorm_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_dorm
      ORDER BY student_capacity DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/dorm_1/0023,"summarise(input0, 'n = n()', ""'lname'""), left_join(line0, input0), limit(line1, 'sex')","SELECT city_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.lname AS lname,
                LHS.n AS n,
                RHS.stuid AS stuid,
                RHS.fname AS fname,
                RHS.age AS age,
                RHS.sex AS sex,
                RHS.major AS major,
                RHS.advisor AS advisor,
                RHS.city_code AS city_code
         FROM
           (SELECT lname,
                   COUNT() AS n
            FROM df_student
            GROUP BY lname) AS LHS
         LEFT JOIN df_student AS RHS ON (LHS.lname = RHS.lname))
      ORDER BY sex)
   LIMIT 1);",2,12,5,0,5,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/dorm_1/0001,"filter(input0, ""gender == 'F'""), intersect(line0, input0, 'dorm_name')","SELECT `dorm_name`
FROM
  (SELECT `dorm_name`
   FROM `df_dorm`
   WHERE (`gender` = 'F') INTERSECT
     SELECT dorm_name
     FROM df_dorm)
ORDER BY dorm_name;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/dorm_1/0043,"filter(input0, ""dorm_name == 'Smith Hall'""), natural_join3(input1, input2, line0)","SELECT `amenity_name`
FROM
  (SELECT `LHS`.`amenid` AS `amenid`,
          `LHS`.`amenity_name` AS `amenity_name`,
          `LHS`.`dormid` AS `dormid`,
          `RHS`.`dorm_name` AS `dorm_name`,
          `RHS`.`student_capacity` AS `student_capacity`,
          `RHS`.`gender` AS `gender`
   FROM
     (SELECT `LHS`.`amenid` AS `amenid`,
             `LHS`.`amenity_name` AS `amenity_name`,
             `RHS`.`dormid` AS `dormid`
      FROM `df_dorm_amenity` AS `LHS`
      INNER JOIN `df_has_amenity` AS `RHS` ON (`LHS`.`amenid` = `RHS`.`amenid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_dorm`
      WHERE (`dorm_name` = 'Smith Hall')) AS RHS ON (LHS.dormid = RHS.dormid))
ORDER BY amenity_name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/dorm_1/0046,"natural_join(input1, input2), summarise(line0, 'n = n()', ''), inner_join(input0, line1, ""'student_capacity' = 'n'"")","SELECT dorm_name,
       student_capacity
FROM
  (SELECT LHS.dormid AS dormid,
          LHS.dorm_name AS dorm_name,
          LHS.student_capacity AS student_capacity,
          LHS.gender AS gender
   FROM df_dorm AS LHS
   INNER JOIN
     (SELECT COUNT() AS n
      FROM
        (SELECT LHS.amenid AS amenid,
                LHS.amenity_name AS amenity_name,
                RHS.dormid AS dormid
         FROM df_dorm_amenity AS LHS
         INNER JOIN df_has_amenity AS RHS ON (LHS.amenid = RHS.amenid))) AS RHS ON (LHS.student_capacity = RHS.n))
ORDER BY dorm_name;",3,10,4,0,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0
spider/dorm_1/0047,"filter(input1, ""amenity_name == 'TV Lounge'""), semi_join(input2, line0), anti_join(input0, line1, ""'dormid'"")","SELECT `dorm_name`
FROM
  (SELECT *
   FROM `df_dorm` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_has_amenity` AS `LHS`
           WHERE EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM `df_dorm_amenity`
                   WHERE (`amenity_name` = 'TV Lounge')) AS RHS
                WHERE (LHS.amenid = RHS.amenid) )) AS RHS
        WHERE (LHS.dormid = RHS.dormid) ))
ORDER BY dorm_name;",3,20,6,0,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/dorm_1/0014,"summarise(input0, 'n_distinct = n_distinct(gender)', '')","SELECT n_distinct AS count_distinct_gender_
FROM
  (SELECT COUNT(DISTINCT gender) AS n_distinct
   FROM df_dorm)
ORDER BY count_distinct_gender_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/dorm_1/0009,"summarise(input0, 'n = n()', ""'age','stuid'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT age,
          stuid,
          COUNT() AS n
   FROM df_student
   GROUP BY age,
            stuid)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/dorm_1/0025,"filter(input0, ""city_code != 'HKG'"")","SELECT `fname`,
       `lname`
FROM `df_student`
WHERE (`city_code` != 'HKG')
ORDER BY fname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/dorm_1/0011,"filter(input0, ""gender == 'X'""), mutate(line0, 'sumstudent_capacity = sum(student_capacity)'), mutate(line1, 'meanstudent_capacity = mean(student_capacity, na.rm = T)')","SELECT DISTINCT AVG(`student_capacity`) OVER () AS `avg_student_capacity_`,
                                             `sumstudent_capacity` AS `sum_student_capacity_`
FROM
  (SELECT `dormid`,
          `dorm_name`,
          `student_capacity`,
          `gender`,
          SUM(`student_capacity`) OVER () AS `sumstudent_capacity`
   FROM
     (SELECT *
      FROM `df_dorm`
      WHERE (`gender` = 'X')))
ORDER BY avg_student_capacity_;",3,10,3,1,3,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0
spider/dorm_1/0029,"summarise(input0, 'n = n()', ""'major'"")","SELECT n AS count___,
       major
FROM
  (SELECT major,
          COUNT() AS n
   FROM df_student
   GROUP BY major)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/dorm_1/0010,"summarise(input0, 'meanage = mean(age, na.rm = T)', ""'city_code'"")","SELECT meanage AS avg_age_,
       city_code
FROM
  (SELECT city_code,
          AVG(age) AS meanage
   FROM df_student
   GROUP BY city_code)
ORDER BY avg_age_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/dorm_1/0044,"summarise(input1, 'n = n()', ""'amenid'""), left_join(line0, input0), limit(line1, 'desc(n)')","SELECT amenity_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.amenid AS amenid,
                LHS.n AS n,
                RHS.amenity_name AS amenity_name
         FROM
           (SELECT amenid,
                   COUNT() AS n
            FROM df_has_amenity
            GROUP BY amenid) AS LHS
         LEFT JOIN df_dorm_amenity AS RHS ON (LHS.amenid = RHS.amenid))
      ORDER BY n DESC)
   LIMIT 1);",2,13,5,0,5,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/dorm_1/0040,"filter(input1, ""gender != 'M'""), natural_join4(input0, input1, input2, line0), summarise(line1, 'n = n()', ""'dorm_name','stuid'"")","SELECT DISTINCT `n` AS `count___`
FROM
  (SELECT `dorm_name`,
          `stuid`,
          COUNT() AS `n`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `LHS`.`dormid` AS `dormid`,
             `LHS`.`dorm_name` AS `dorm_name`,
             `LHS`.`student_capacity` AS `student_capacity`,
             `LHS`.`gender` AS `gender`,
             `LHS`.`room_number` AS `room_number`
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `LHS`.`dormid` AS `dormid`,
                `LHS`.`dorm_name` AS `dorm_name`,
                `LHS`.`student_capacity` AS `student_capacity`,
                `LHS`.`gender` AS `gender`,
                `RHS`.`room_number` AS `room_number`
         FROM
           (SELECT `LHS`.`stuid` AS `stuid`,
                   `LHS`.`lname` AS `lname`,
                   `LHS`.`fname` AS `fname`,
                   `LHS`.`age` AS `age`,
                   `LHS`.`sex` AS `sex`,
                   `LHS`.`major` AS `major`,
                   `LHS`.`advisor` AS `advisor`,
                   `LHS`.`city_code` AS `city_code`,
                   `RHS`.`dormid` AS `dormid`,
                   `RHS`.`dorm_name` AS `dorm_name`,
                   `RHS`.`student_capacity` AS `student_capacity`,
                   `RHS`.`gender` AS `gender`
            FROM `df_student` AS `LHS`
            CROSS JOIN `df_dorm` AS `RHS`) AS `LHS`
         INNER JOIN `df_lives_in` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`
                                               AND `LHS`.`dormid` = `RHS`.`dormid`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_dorm`
         WHERE (`gender` != 'M')) AS RHS ON (LHS.dormid = RHS.dormid
                                             AND LHS.dorm_name = RHS.dorm_name
                                             AND LHS.student_capacity = RHS.student_capacity
                                             AND LHS.gender = RHS.gender))
   GROUP BY dorm_name,
            stuid)
ORDER BY count___;",3,16,6,1,6,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
spider/dorm_1/0028,"summarise(input0, 'age = max(age)', ""'sex'""), summarise(input0, 'meanage = mean(age, na.rm = T)', ""'sex'""), inner_join(line0, line1, ""'sex'"")","SELECT meanage AS avg_age_,
       age AS max_age_,
       sex
FROM
  (SELECT LHS.sex AS sex,
          LHS.age AS age,
          RHS.meanage AS meanage
   FROM
     (SELECT sex,
             MAX(age) AS age
      FROM df_student
      GROUP BY sex) AS LHS
   INNER JOIN
     (SELECT sex,
             AVG(age) AS meanage
      FROM df_student
      GROUP BY sex) AS RHS ON (LHS.sex = RHS.sex))
ORDER BY avg_age_;",3,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0
spider/dorm_1/0049,"natural_join3(input0, input1, input3), filter(line0, ""amenity_name == 'TV Lounge'""), anti_join(line1, input2, '')","SELECT `fname`,
       `age`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `LHS`.`amenid` AS `amenid`,
                `LHS`.`amenity_name` AS `amenity_name`,
                `RHS`.`dormid` AS `dormid`,
                `RHS`.`room_number` AS `room_number`
         FROM
           (SELECT `LHS`.`stuid` AS `stuid`,
                   `LHS`.`lname` AS `lname`,
                   `LHS`.`fname` AS `fname`,
                   `LHS`.`age` AS `age`,
                   `LHS`.`sex` AS `sex`,
                   `LHS`.`major` AS `major`,
                   `LHS`.`advisor` AS `advisor`,
                   `LHS`.`city_code` AS `city_code`,
                   `RHS`.`amenid` AS `amenid`,
                   `RHS`.`amenity_name` AS `amenity_name`
            FROM `df_student` AS `LHS`
            CROSS JOIN `df_dorm_amenity` AS `RHS`) AS `LHS`
         INNER JOIN `df_lives_in` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`))
      WHERE (`amenity_name` = 'TV Lounge')) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_has_amenity AS RHS
        WHERE (LHS.amenid = RHS.amenid
               AND LHS.dormid = RHS.dormid) ))
ORDER BY fname;",3,18,6,0,6,1,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0
spider/school_finance/0002,df_school,"SELECT school_name
FROM df_school
ORDER BY school_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_finance/0008,"summarise(input0, 'n_distinct = n_distinct(enrollment)', ""'county'""), summarise(input0, 'sumenrollment = sum(enrollment)', ""'county'""), left_join(line0, line1)","SELECT county,
       n_distinct AS count___,
       sumenrollment AS sum_enrollment_
FROM
  (SELECT LHS.county AS county,
          LHS.n_distinct AS n_distinct,
          RHS.sumenrollment AS sumenrollment
   FROM
     (SELECT county,
             COUNT(DISTINCT enrollment) AS n_distinct
      FROM df_school
      GROUP BY county) AS LHS
   LEFT JOIN
     (SELECT county,
             SUM(enrollment) AS sumenrollment
      FROM df_school
      GROUP BY county) AS RHS ON (LHS.county = RHS.county))
ORDER BY county;",3,10,4,1,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0
spider/school_finance/0003,df_school,"SELECT school_name,
       LOCATION,
       mascot
FROM df_school
ORDER BY school_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_finance/0006,"limit(input0, 'mascot')","SELECT school_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_school
      ORDER BY mascot)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_finance/0004,"summarise(input0, 'sumenrollment = sum(enrollment)', ""'enrollment','school_id'""), mutate(line0, 'meanenrollment = mean(enrollment, na.rm = T)'), mutate(line1, 'sumenrollment = sum(enrollment)')","SELECT DISTINCT SUM(enrollment) OVER () AS sum_enrollment_,
                                     meanenrollment AS avg_enrollment_
FROM
  (SELECT enrollment,
          school_id,
          sumenrollment,
          AVG(enrollment) OVER () AS meanenrollment
   FROM
     (SELECT enrollment,
             school_id,
             SUM(enrollment) AS sumenrollment
      FROM df_school
      GROUP BY enrollment,
               school_id))
ORDER BY sum_enrollment_;",3,9,3,1,3,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0
spider/school_finance/0015,"limit(input0, 'desc(amount)')","SELECT amount,
       donator_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_endowment
      ORDER BY amount DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/school_finance/0005,"mutate(input0, 'meanenrollment = mean(enrollment, na.rm = T)'), filter(line0, 'meanenrollment < enrollment')","SELECT mascot
FROM
  (SELECT school_id,
          school_name,
          LOCATION,
          mascot,
          enrollment,
          ihsaa_class,
          ihsaa_football_class,
          county,
          AVG(enrollment) OVER () AS meanenrollment
   FROM df_school)
WHERE (meanenrollment < enrollment)
ORDER BY mascot;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/school_finance/0016,"filter(input0, 'budgeted == 3000L | year <= 2001L'), mutate(line0, 'n_distinct = n_distinct(year)')","SELECT DISTINCT COUNT(DISTINCT YEAR) OVER () AS count___
FROM df_budget
WHERE (budgeted = 3000
       OR YEAR <= 2001)
ORDER BY count___;",2,9,1,2,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/school_finance/0018,"intersect(input0, input0, 'donator_name')","SELECT donator_name
FROM
  (SELECT donator_name
   FROM df_endowment INTERSECT SELECT donator_name
   FROM df_endowment)
ORDER BY donator_name;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/school_finance/0020,"summarise(input1, 'sumbudgeted = sum(budgeted)', ""'budgeted','total_budget_percent_budgeted'""), natural_join(input0, line0), filter(line1, ""school_name == 'Glenn' & sumbudgeted != budgeted"")","SELECT `budgeted` AS `sum_t1_budgeted_`
FROM
  (SELECT `LHS`.`school_id` AS `school_id`,
          `LHS`.`school_name` AS `school_name`,
          `LHS`.`location` AS `location`,
          `LHS`.`mascot` AS `mascot`,
          `LHS`.`enrollment` AS `enrollment`,
          `LHS`.`ihsaa_class` AS `ihsaa_class`,
          `LHS`.`ihsaa_football_class` AS `ihsaa_football_class`,
          `LHS`.`county` AS `county`,
          `RHS`.`budgeted` AS `budgeted`,
          `RHS`.`total_budget_percent_budgeted` AS `total_budget_percent_budgeted`,
          `RHS`.`sumbudgeted` AS `sumbudgeted`
   FROM `df_school` AS `LHS`
   CROSS JOIN
     (SELECT `budgeted`,
             `total_budget_percent_budgeted`,
             SUM(`budgeted`) AS `sumbudgeted`
      FROM `df_budget`
      GROUP BY `budgeted`,
               `total_budget_percent_budgeted`) AS `RHS`)
WHERE (`school_name` = 'Glenn'
       AND sumbudgeted != budgeted)
ORDER BY sum_t1_budgeted_;",3,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/school_finance/0019,"filter(input0, 'invested > budgeted'), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_budget
WHERE (invested > budgeted)
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/school_finance/0007,"mutate(input0, 'minenrollment = min(enrollment)'), mutate(line0, 'meanenrollment = mean(enrollment, na.rm = T)'), mutate(line1, 'enrollment = max(enrollment)')","SELECT DISTINCT meanenrollment AS avg_enrollment_,
                MAX(enrollment) OVER () AS max_enrollment_,
                                     minenrollment AS min_enrollment_
FROM
  (SELECT school_id,
          school_name,
          LOCATION,
          mascot,
          enrollment,
          ihsaa_class,
          ihsaa_football_class,
          county,
          minenrollment,
          AVG(enrollment) OVER () AS meanenrollment
   FROM
     (SELECT school_id,
             school_name,
             LOCATION,
             mascot,
             enrollment,
             ihsaa_class,
             ihsaa_football_class,
             county,
             MIN(enrollment) OVER () AS minenrollment
      FROM df_school))
ORDER BY avg_enrollment_;",3,10,3,1,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0
spider/school_finance/0023,"filter(input0, ""amount <= '8.5'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM `df_endowment`
WHERE (`amount` <= '8.5')
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/school_finance/0001,"mutate(input0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_school
ORDER BY count___;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/school_finance/0014,"filter(input0, 'amount > 9'), inner_join(input0, line0, ""'amount'"")","SELECT donator_name
FROM
  (SELECT LHS.endowment_id AS endowment_id,
          LHS.school_id AS school_id,
          LHS.donator_name AS donator_name,
          LHS.amount AS amount,
          RHS.endowment_id AS endowment_id_other,
          RHS.school_id AS school_id_other,
          RHS.donator_name AS donator_name_other
   FROM df_endowment AS LHS
   INNER JOIN
     (SELECT *
      FROM df_endowment
      WHERE (amount > 9.0)) AS RHS ON (LHS.amount = RHS.amount))
ORDER BY donator_name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/school_finance/0009,"summarise(input0, 'n_distinct = n_distinct(school_name)', ""'ihsaa_class','ihsaa_football_class'""), filter(input0, ""school_name == 'Glenn'""), summarise(line1, 'n = n()', ""'county','ihsaa_football_class'""), natural_join3(input1, line0, line2)","SELECT DISTINCT `n_distinct` AS `count_distinct_t1_donator_name_`
FROM
  (SELECT `LHS`.`endowment_id` AS `endowment_id`,
          `LHS`.`school_id` AS `school_id`,
          `LHS`.`donator_name` AS `donator_name`,
          `LHS`.`amount` AS `amount`,
          `LHS`.`ihsaa_class` AS `ihsaa_class`,
          `LHS`.`ihsaa_football_class` AS `ihsaa_football_class`,
          `LHS`.`n_distinct` AS `n_distinct`,
          `RHS`.`county` AS `county`,
          `RHS`.`n` AS `n`
   FROM
     (SELECT `LHS`.`endowment_id` AS `endowment_id`,
             `LHS`.`school_id` AS `school_id`,
             `LHS`.`donator_name` AS `donator_name`,
             `LHS`.`amount` AS `amount`,
             `RHS`.`ihsaa_class` AS `ihsaa_class`,
             `RHS`.`ihsaa_football_class` AS `ihsaa_football_class`,
             `RHS`.`n_distinct` AS `n_distinct`
      FROM `df_endowment` AS `LHS`
      CROSS JOIN
        (SELECT `ihsaa_class`,
                `ihsaa_football_class`,
                COUNT(DISTINCT `school_name`) AS `n_distinct`
         FROM `df_school`
         GROUP BY `ihsaa_class`,
                  `ihsaa_football_class`) AS `RHS`) AS `LHS`
   INNER JOIN
     (SELECT `county`,
             `ihsaa_football_class`,
             COUNT() AS `n`
      FROM `df_school`
      WHERE (`school_name` = 'Glenn')
      GROUP BY county,
               ihsaa_football_class) AS RHS ON (LHS.ihsaa_football_class = RHS.ihsaa_football_class))
ORDER BY count_distinct_t1_donator_name_;",4,14,5,2,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,1,0,0,0,0,0,0
spider/school_finance/0010,"summarise(input0, 'sumamount = sum(amount)', ""'donator_name','endowment_id'"")","SELECT donator_name,
       sumamount AS sum_amount_
FROM
  (SELECT donator_name,
          endowment_id,
          SUM(amount) AS sumamount
   FROM df_endowment
   GROUP BY donator_name,
            endowment_id)
ORDER BY donator_name;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/voter_2/0033,"summarise(input0, 'n = n()', ""'major'""), limit(line0, 'desc(n)')","SELECT major
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT major,
                COUNT() AS n
         FROM df_student
         GROUP BY major)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/voter_2/0002,"summarise(input0, 'n = n()', ""'election_cycle','stuid'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT election_cycle,
          stuid,
          COUNT() AS n
   FROM df_voting_record
   GROUP BY election_cycle,
            stuid)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/voter_2/0036,"summarise(input0, 'n = n()', ""'advisor'""), semi_join(line0, input0), filter(line1, 'n > 2L')","SELECT advisor
FROM
  (SELECT *
   FROM
     (SELECT advisor,
             COUNT() AS n
      FROM df_student
      GROUP BY advisor) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_student AS RHS
        WHERE (LHS.advisor = RHS.advisor) ))
WHERE (n > 2)
ORDER BY advisor;",3,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0
spider/voter_2/0017,"filter(input1, ""election_cycle == 'Fall'""), inner_join(input0, line0, ""'stuid' = 'secretary_vote'"")","SELECT DISTINCT `age`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `RHS`.`stuid` AS `stuid_other`,
          `RHS`.`registration_date` AS `registration_date`,
          `RHS`.`election_cycle` AS `election_cycle`,
          `RHS`.`president_vote` AS `president_vote`,
          `RHS`.`vice_president_vote` AS `vice_president_vote`,
          `RHS`.`treasurer_vote` AS `treasurer_vote`,
          `RHS`.`class_president_vote` AS `class_president_vote`,
          `RHS`.`class_senator_vote` AS `class_senator_vote`
   FROM `df_student` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_voting_record`
      WHERE (`election_cycle` = 'Fall')) AS RHS ON (LHS.stuid = RHS.secretary_vote))
ORDER BY age;",2,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/voter_2/0008,"filter(input0, ""sex == 'F'""), summarise(line0, 'meanage = mean(age, na.rm = T)', '')","SELECT `meanage` AS `avg_age_`
FROM
  (SELECT AVG(`age`) AS `meanage`
   FROM
     (SELECT *
      FROM `df_student`
      WHERE (`sex` = 'F')))
ORDER BY avg_age_;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/voter_2/0003,"summarise(input0, 'n = n()', ""'president_vote'""), summarise(line0, 'n_distinct = n_distinct(president_vote)', '')","SELECT n_distinct AS count_distinct_president_vote_
FROM
  (SELECT COUNT(DISTINCT president_vote) AS n_distinct
   FROM
     (SELECT president_vote,
             COUNT() AS n
      FROM df_voting_record
      GROUP BY president_vote))
ORDER BY count_distinct_president_vote_;",2,7,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/voter_2/0027,"filter(input0, 'advisor > 2192L'), inner_join(line0, input1, ""'stuid' = 'president_vote'"")","SELECT DISTINCT lname
FROM
  (SELECT LHS.stuid AS stuid,
          LHS.lname AS lname,
          LHS.fname AS fname,
          LHS.age AS age,
          LHS.sex AS sex,
          LHS.major AS major,
          LHS.advisor AS advisor,
          LHS.city_code AS city_code,
          RHS.stuid AS stuid_other,
          RHS.registration_date AS registration_date,
          RHS.election_cycle AS election_cycle,
          RHS.vice_president_vote AS vice_president_vote,
          RHS.secretary_vote AS secretary_vote,
          RHS.treasurer_vote AS treasurer_vote,
          RHS.class_president_vote AS class_president_vote,
          RHS.class_senator_vote AS class_senator_vote
   FROM
     (SELECT *
      FROM df_student
      WHERE (advisor > 2192)) AS LHS
   INNER JOIN df_voting_record AS RHS ON (LHS.stuid = RHS.president_vote))
ORDER BY lname;",2,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/voter_2/0022,"summarise(input1, 'n = n()', ""'election_cycle','treasurer_vote'""), natural_join3(input0, input1, line0), filter(line1, ""sex == 'M' & election_cycle == 'Fall'"")","SELECT DISTINCT `n` AS `count___`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `LHS`.`registration_date` AS `registration_date`,
          `LHS`.`election_cycle` AS `election_cycle`,
          `LHS`.`president_vote` AS `president_vote`,
          `LHS`.`vice_president_vote` AS `vice_president_vote`,
          `LHS`.`secretary_vote` AS `secretary_vote`,
          `LHS`.`treasurer_vote` AS `treasurer_vote`,
          `LHS`.`class_president_vote` AS `class_president_vote`,
          `LHS`.`class_senator_vote` AS `class_senator_vote`,
          `RHS`.`n` AS `n`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `RHS`.`registration_date` AS `registration_date`,
             `RHS`.`election_cycle` AS `election_cycle`,
             `RHS`.`president_vote` AS `president_vote`,
             `RHS`.`vice_president_vote` AS `vice_president_vote`,
             `RHS`.`secretary_vote` AS `secretary_vote`,
             `RHS`.`treasurer_vote` AS `treasurer_vote`,
             `RHS`.`class_president_vote` AS `class_president_vote`,
             `RHS`.`class_senator_vote` AS `class_senator_vote`
      FROM `df_student` AS `LHS`
      INNER JOIN `df_voting_record` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`)) AS `LHS`
   INNER JOIN
     (SELECT `election_cycle`,
             `treasurer_vote`,
             COUNT() AS `n`
      FROM `df_voting_record`
      GROUP BY `election_cycle`,
               `treasurer_vote`) AS `RHS` ON (`LHS`.`election_cycle` = `RHS`.`election_cycle`
                                              AND `LHS`.`treasurer_vote` = `RHS`.`treasurer_vote`))
WHERE (`sex` = 'M'
       AND `election_cycle` = 'Fall')
ORDER BY count___;",3,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/voter_2/0030,"summarise(input0, 'n = n()', ""'advisor'""), filter(line0, 'n > 2L')","SELECT advisor
FROM
  (SELECT advisor,
          COUNT() AS n
   FROM df_student
   GROUP BY advisor)
WHERE (n > 2)
ORDER BY advisor;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/voter_2/0013,df_voting_record,"SELECT DISTINCT registration_date,
                election_cycle
FROM df_voting_record
ORDER BY registration_date;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/voter_2/0006,"filter(input0, 'age > 22L'), natural_join(input0, line0)","SELECT fname
FROM
  (SELECT LHS.stuid AS stuid,
          LHS.lname AS lname,
          LHS.fname AS fname,
          LHS.age AS age,
          LHS.sex AS sex,
          LHS.major AS major,
          LHS.advisor AS advisor,
          LHS.city_code AS city_code
   FROM df_student AS LHS
   INNER JOIN
     (SELECT *
      FROM df_student
      WHERE (age > 22)) AS RHS ON (LHS.stuid = RHS.stuid
                                   AND LHS.lname = RHS.lname
                                   AND LHS.fname = RHS.fname
                                   AND LHS.age = RHS.age
                                   AND LHS.sex = RHS.sex
                                   AND LHS.major = RHS.major
                                   AND LHS.advisor = RHS.advisor
                                   AND LHS.city_code = RHS.city_code))
ORDER BY fname;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/voter_2/0004,"summarise(input0, 'age = max(age)', ''), intersect(line0, input0, 'age')","SELECT age AS max_age_
FROM
  (SELECT age
   FROM
     (SELECT MAX(age) AS age
      FROM df_student) INTERSECT SELECT age
   FROM df_student)
ORDER BY max_age_;",2,9,4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
spider/voter_2/0012,"filter(input0, ""registration_date == '08/30/2015'""), semi_join(input0, line0)","SELECT DISTINCT `president_vote`
FROM
  (SELECT *
   FROM `df_voting_record` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_voting_record`
           WHERE (`registration_date` = '08/30/2015')) AS RHS
        WHERE (LHS.stuid = RHS.stuid
               AND LHS.registration_date = RHS.registration_date
               AND LHS.election_cycle = RHS.election_cycle
               AND LHS.president_vote = RHS.president_vote
               AND LHS.vice_president_vote = RHS.vice_president_vote
               AND LHS.secretary_vote = RHS.secretary_vote
               AND LHS.treasurer_vote = RHS.treasurer_vote
               AND LHS.class_president_vote = RHS.class_president_vote
               AND LHS.class_senator_vote = RHS.class_senator_vote) ))
ORDER BY president_vote;",2,13,4,1,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/voter_2/0026,"filter(input0, ""city_code != 'PIT'""), intersect(input1, input1, 'vice_president_vote'), inner_join(line0, line1, ""'stuid' = 'vice_president_vote'"")","SELECT `fname`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`
   FROM
     (SELECT *
      FROM `df_student`
      WHERE (`city_code` != 'PIT')) AS LHS
   INNER JOIN
     (SELECT vice_president_vote
      FROM df_voting_record INTERSECT SELECT vice_president_vote
      FROM df_voting_record) AS RHS ON (LHS.stuid = RHS.vice_president_vote))
ORDER BY fname;",3,13,5,0,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0
spider/voter_2/0015,"inner_join(input0, input1, ""'stuid' = 'class_president_vote'"")","SELECT DISTINCT lname
FROM
  (SELECT LHS.stuid AS stuid,
          LHS.lname AS lname,
          LHS.fname AS fname,
          LHS.age AS age,
          LHS.sex AS sex,
          LHS.major AS major,
          LHS.advisor AS advisor,
          LHS.city_code AS city_code,
          RHS.stuid AS stuid_other,
          RHS.registration_date AS registration_date,
          RHS.election_cycle AS election_cycle,
          RHS.president_vote AS president_vote,
          RHS.vice_president_vote AS vice_president_vote,
          RHS.secretary_vote AS secretary_vote,
          RHS.treasurer_vote AS treasurer_vote,
          RHS.class_senator_vote AS class_senator_vote
   FROM df_student AS LHS
   INNER JOIN df_voting_record AS RHS ON (LHS.stuid = RHS.class_president_vote))
ORDER BY lname;",1,6,2,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/voter_2/0005,"filter(input0, 'major <= 50L'), semi_join(input0, line0)","SELECT lname
FROM
  (SELECT *
   FROM df_student AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_student
           WHERE (major <= 50)) AS RHS
        WHERE (LHS.stuid = RHS.stuid
               AND LHS.lname = RHS.lname
               AND LHS.fname = RHS.fname
               AND LHS.age = RHS.age
               AND LHS.sex = RHS.sex
               AND LHS.major = RHS.major
               AND LHS.advisor = RHS.advisor
               AND LHS.city_code = RHS.city_code) ))
ORDER BY lname;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/voter_2/0016,"inner_join(input0, input1, ""'stuid' = 'class_senator_vote'"")","SELECT DISTINCT fname
FROM
  (SELECT LHS.stuid AS stuid,
          LHS.lname AS lname,
          LHS.fname AS fname,
          LHS.age AS age,
          LHS.sex AS sex,
          LHS.major AS major,
          LHS.advisor AS advisor,
          LHS.city_code AS city_code,
          RHS.stuid AS stuid_other,
          RHS.registration_date AS registration_date,
          RHS.election_cycle AS election_cycle,
          RHS.president_vote AS president_vote,
          RHS.vice_president_vote AS vice_president_vote,
          RHS.secretary_vote AS secretary_vote,
          RHS.treasurer_vote AS treasurer_vote,
          RHS.class_president_vote AS class_president_vote
   FROM df_student AS LHS
   INNER JOIN df_voting_record AS RHS ON (LHS.stuid = RHS.class_senator_vote))
ORDER BY fname;",1,6,2,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/voter_2/0032,"summarise(input0, 'n = n()', ""'election_cycle','secretary_vote'""), mutate(line0, 'n = n()')","SELECT DISTINCT election_cycle,
                COUNT(*) OVER () AS count___
FROM
  (SELECT election_cycle,
          secretary_vote,
          COUNT() AS n
   FROM df_voting_record
   GROUP BY election_cycle,
            secretary_vote)
ORDER BY election_cycle;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/voter_2/0018,"filter(input1, ""election_cycle == 'Spring'""), intersect(input1, line0, 'treasurer_vote'), inner_join(input0, line1, ""'stuid' = 'treasurer_vote'"")","SELECT `advisor`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`
   FROM `df_student` AS `LHS`
   INNER JOIN
     (SELECT `treasurer_vote`
      FROM `df_voting_record` INTERSECT SELECT `treasurer_vote`
      FROM `df_voting_record`
      WHERE (`election_cycle` = 'Spring')) AS RHS ON (LHS.stuid = RHS.treasurer_vote))
ORDER BY advisor;",3,11,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0
spider/voter_2/0035,"summarise(input0, 'n = n()', ""'advisor','fname'""), left_join(line0, input0), limit(line1, 'desc(sex)')","SELECT city_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.advisor AS advisor,
                LHS.fname AS fname,
                LHS.n AS n,
                RHS.stuid AS stuid,
                RHS.lname AS lname,
                RHS.age AS age,
                RHS.sex AS sex,
                RHS.major AS major,
                RHS.city_code AS city_code
         FROM
           (SELECT advisor,
                   fname,
                   COUNT() AS n
            FROM df_student
            GROUP BY advisor,
                     fname) AS LHS
         LEFT JOIN df_student AS RHS ON (LHS.advisor = RHS.advisor
                                         AND LHS.fname = RHS.fname))
      ORDER BY sex DESC)
   LIMIT 1);",2,13,5,0,5,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/voter_2/0020,"filter(input0, ""sex == 'F'""), inner_join(line0, input1, ""'stuid' = 'president_vote'"")","SELECT DISTINCT `fname`,
                `lname`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `RHS`.`stuid` AS `stuid_other`,
          `RHS`.`registration_date` AS `registration_date`,
          `RHS`.`election_cycle` AS `election_cycle`,
          `RHS`.`vice_president_vote` AS `vice_president_vote`,
          `RHS`.`secretary_vote` AS `secretary_vote`,
          `RHS`.`treasurer_vote` AS `treasurer_vote`,
          `RHS`.`class_president_vote` AS `class_president_vote`,
          `RHS`.`class_senator_vote` AS `class_senator_vote`
   FROM
     (SELECT *
      FROM `df_student`
      WHERE (`sex` = 'F')) AS LHS
   INNER JOIN df_voting_record AS RHS ON (LHS.stuid = RHS.president_vote))
ORDER BY fname;",2,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/voter_2/0019,"inner_join(input0, input1, ""'stuid' = 'treasurer_vote'"")","SELECT DISTINCT major
FROM
  (SELECT LHS.stuid AS stuid,
          LHS.lname AS lname,
          LHS.fname AS fname,
          LHS.age AS age,
          LHS.sex AS sex,
          LHS.major AS major,
          LHS.advisor AS advisor,
          LHS.city_code AS city_code,
          RHS.stuid AS stuid_other,
          RHS.registration_date AS registration_date,
          RHS.election_cycle AS election_cycle,
          RHS.president_vote AS president_vote,
          RHS.vice_president_vote AS vice_president_vote,
          RHS.secretary_vote AS secretary_vote,
          RHS.class_president_vote AS class_president_vote,
          RHS.class_senator_vote AS class_senator_vote
   FROM df_student AS LHS
   INNER JOIN df_voting_record AS RHS ON (LHS.stuid = RHS.treasurer_vote))
ORDER BY major;",1,6,2,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/voter_2/0007,"filter(input0, ""sex == 'M'""), filter(line0, ""sex == 'M'"")","SELECT `major`
FROM
  (SELECT *
   FROM `df_student`
   WHERE (`sex` = 'M'))
WHERE (`sex` = 'M')
ORDER BY major;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/voter_2/0034,"filter(input0, ""sex == 'F'""), summarise(line0, 'n = n()', ""'major','stuid'""), limit(line1, 'stuid')","SELECT `major`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT `major`,
                `stuid`,
                COUNT() AS `n`
         FROM
           (SELECT *
            FROM `df_student`
            WHERE (`sex` = 'F'))
         GROUP BY major,
                  stuid)
      ORDER BY stuid)
   LIMIT 1);",2,12,5,0,5,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/voter_2/0024,"inner_join(input0, input1, ""'stuid' = 'secretary_vote'""), filter(line0, ""city_code == 'NYC' & election_cycle != 'Spring'""), mutate(line1, 'meanage = mean(age, na.rm = T)')","SELECT DISTINCT `age` AS `avg_t1_age_`
FROM
  (SELECT `stuid`,
          `lname`,
          `fname`,
          `age`,
          `sex`,
          `major`,
          `advisor`,
          `city_code`,
          `stuid_other`,
          `registration_date`,
          `election_cycle`,
          `president_vote`,
          `vice_president_vote`,
          `treasurer_vote`,
          `class_president_vote`,
          `class_senator_vote`,
          `stuid` AS `secretary_vote`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`lname` AS `lname`,
             `LHS`.`fname` AS `fname`,
             `LHS`.`age` AS `age`,
             `LHS`.`sex` AS `sex`,
             `LHS`.`major` AS `major`,
             `LHS`.`advisor` AS `advisor`,
             `LHS`.`city_code` AS `city_code`,
             `RHS`.`stuid` AS `stuid_other`,
             `RHS`.`registration_date` AS `registration_date`,
             `RHS`.`election_cycle` AS `election_cycle`,
             `RHS`.`president_vote` AS `president_vote`,
             `RHS`.`vice_president_vote` AS `vice_president_vote`,
             `RHS`.`treasurer_vote` AS `treasurer_vote`,
             `RHS`.`class_president_vote` AS `class_president_vote`,
             `RHS`.`class_senator_vote` AS `class_senator_vote`
      FROM `df_student` AS `LHS`
      INNER JOIN `df_voting_record` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`secretary_vote`)))
WHERE (`city_code` = 'NYC'
       AND `election_cycle` != 'Spring')
ORDER BY avg_t1_age_;",3,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0
spider/voter_2/0021,"filter(input0, 'age == 18L'), inner_join(line0, input1, ""'stuid' = 'vice_president_vote'"")","SELECT DISTINCT fname,
                lname
FROM
  (SELECT LHS.stuid AS stuid,
          LHS.lname AS lname,
          LHS.fname AS fname,
          LHS.age AS age,
          LHS.sex AS sex,
          LHS.major AS major,
          LHS.advisor AS advisor,
          LHS.city_code AS city_code,
          RHS.stuid AS stuid_other,
          RHS.registration_date AS registration_date,
          RHS.election_cycle AS election_cycle,
          RHS.president_vote AS president_vote,
          RHS.secretary_vote AS secretary_vote,
          RHS.treasurer_vote AS treasurer_vote,
          RHS.class_president_vote AS class_president_vote,
          RHS.class_senator_vote AS class_senator_vote
   FROM
     (SELECT *
      FROM df_student
      WHERE (age = 18)) AS LHS
   INNER JOIN df_voting_record AS RHS ON (LHS.stuid = RHS.vice_president_vote))
ORDER BY fname;",2,9,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/voter_2/0023,"left_join(input0, input1), filter(line0, ""city_code == 'NYC' & election_cycle == 'Spring'""), summarise(line1, 'n_distinct = n_distinct(election_cycle)', '')","SELECT `n_distinct` AS `count___`
FROM
  (SELECT COUNT(DISTINCT `election_cycle`) AS `n_distinct`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `RHS`.`registration_date` AS `registration_date`,
                `RHS`.`election_cycle` AS `election_cycle`,
                `RHS`.`president_vote` AS `president_vote`,
                `RHS`.`vice_president_vote` AS `vice_president_vote`,
                `RHS`.`secretary_vote` AS `secretary_vote`,
                `RHS`.`treasurer_vote` AS `treasurer_vote`,
                `RHS`.`class_president_vote` AS `class_president_vote`,
                `RHS`.`class_senator_vote` AS `class_senator_vote`
         FROM `df_student` AS `LHS`
         LEFT JOIN `df_voting_record` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`))
      WHERE (`city_code` = 'NYC'
             AND `election_cycle` = 'Spring')))
ORDER BY count___;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/voter_2/0001,"summarise(input0, 'n = n()', ""'age','stuid'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT age,
          stuid,
          COUNT() AS n
   FROM df_student
   GROUP BY age,
            stuid)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/voter_2/0014,df_voting_record,"SELECT DISTINCT president_vote,
                vice_president_vote
FROM df_voting_record
ORDER BY president_vote;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/voter_2/0025,"inner_join(input0, input1, ""'stuid' = 'secretary_vote'""), summarise(line0, 'meanage = mean(age, na.rm = T)', ""'election_cycle','sex'""), filter(line1, ""sex == 'F' & election_cycle == 'Spring'"")","SELECT `meanage` AS `avg_t1_age_`
FROM
  (SELECT `election_cycle`,
          `sex`,
          AVG(`age`) AS `meanage`
   FROM
     (SELECT `stuid`,
             `lname`,
             `fname`,
             `age`,
             `sex`,
             `major`,
             `advisor`,
             `city_code`,
             `stuid_other`,
             `registration_date`,
             `election_cycle`,
             `president_vote`,
             `vice_president_vote`,
             `treasurer_vote`,
             `class_president_vote`,
             `class_senator_vote`,
             `stuid` AS `secretary_vote`
      FROM
        (SELECT `LHS`.`stuid` AS `stuid`,
                `LHS`.`lname` AS `lname`,
                `LHS`.`fname` AS `fname`,
                `LHS`.`age` AS `age`,
                `LHS`.`sex` AS `sex`,
                `LHS`.`major` AS `major`,
                `LHS`.`advisor` AS `advisor`,
                `LHS`.`city_code` AS `city_code`,
                `RHS`.`stuid` AS `stuid_other`,
                `RHS`.`registration_date` AS `registration_date`,
                `RHS`.`election_cycle` AS `election_cycle`,
                `RHS`.`president_vote` AS `president_vote`,
                `RHS`.`vice_president_vote` AS `vice_president_vote`,
                `RHS`.`treasurer_vote` AS `treasurer_vote`,
                `RHS`.`class_president_vote` AS `class_president_vote`,
                `RHS`.`class_senator_vote` AS `class_senator_vote`
         FROM `df_student` AS `LHS`
         INNER JOIN `df_voting_record` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`secretary_vote`)))
   GROUP BY `election_cycle`,
            `sex`)
WHERE (`sex` = 'F'
       AND `election_cycle` = 'Spring')
ORDER BY avg_t1_age_;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/voter_2/0011,"filter(input0, ""election_cycle == 'Fall'"")","SELECT DISTINCT `secretary_vote`
FROM `df_voting_record`
WHERE (`election_cycle` = 'Fall')
ORDER BY secretary_vote;",1,4,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/voter_2/0029,"summarise(input0, 'n = n()', ""'advisor'""), semi_join(line0, input0)","SELECT advisor,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT advisor,
             COUNT() AS n
      FROM df_student
      GROUP BY advisor) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_student AS RHS
        WHERE (LHS.advisor = RHS.advisor) ))
ORDER BY advisor;",2,11,4,0,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/voter_2/0010,"filter(input0, ""city_code == 'BAL'""), semi_join(input0, line0)","SELECT `advisor`
FROM
  (SELECT *
   FROM `df_student` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_student`
           WHERE (`city_code` = 'BAL')) AS RHS
        WHERE (LHS.stuid = RHS.stuid
               AND LHS.lname = RHS.lname
               AND LHS.fname = RHS.fname
               AND LHS.age = RHS.age
               AND LHS.sex = RHS.sex
               AND LHS.major = RHS.major
               AND LHS.advisor = RHS.advisor
               AND LHS.city_code = RHS.city_code) ))
ORDER BY advisor;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/voter_2/0028,"filter(input0, 'advisor == 8741L'), left_join(line0, input1)","SELECT lname
FROM
  (SELECT LHS.stuid AS stuid,
          LHS.lname AS lname,
          LHS.fname AS fname,
          LHS.age AS age,
          LHS.sex AS sex,
          LHS.major AS major,
          LHS.advisor AS advisor,
          LHS.city_code AS city_code,
          RHS.registration_date AS registration_date,
          RHS.election_cycle AS election_cycle,
          RHS.president_vote AS president_vote,
          RHS.vice_president_vote AS vice_president_vote,
          RHS.secretary_vote AS secretary_vote,
          RHS.treasurer_vote AS treasurer_vote,
          RHS.class_president_vote AS class_president_vote,
          RHS.class_senator_vote AS class_senator_vote
   FROM
     (SELECT *
      FROM df_student
      WHERE (advisor = 8741)) AS LHS
   LEFT JOIN df_voting_record AS RHS ON (LHS.stuid = RHS.stuid))
ORDER BY lname;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
spider/voter_2/0031,"summarise(input0, 'n = n()', ""'major'""), limit(line0, 'n')","SELECT major
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT major,
                COUNT() AS n
         FROM df_student
         GROUP BY major)
      ORDER BY n)
   LIMIT 3);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/gas_company/0002,df_company,"SELECT company,
       rank
FROM df_company
ORDER BY company;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/gas_company/0017,"anti_join(input0, input1, ""'company_id'"")","SELECT company,
       main_industry
FROM
  (SELECT *
   FROM df_company AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_station_company AS RHS
        WHERE (LHS.company_id = RHS.company_id) ))
ORDER BY company;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/gas_company/0008,"summarise(input0, 'summarket_value = sum(market_value)', ""'main_industry'"")","SELECT main_industry,
       summarket_value AS sum_market_value_
FROM
  (SELECT main_industry,
          SUM(market_value) AS summarket_value
   FROM df_company
   GROUP BY main_industry)
ORDER BY main_industry;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/gas_company/0003,"filter(input0, ""headquarters != 'USA'""), filter(line0, ""headquarters != 'USA'"")","SELECT `company`,
       `main_industry`
FROM
  (SELECT *
   FROM `df_company`
   WHERE (`headquarters` != 'USA'))
WHERE (`headquarters` != 'USA')
ORDER BY company;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/gas_company/0022,"filter(input0, ""main_industry == 'Banking'""), semi_join(input0, line0)","SELECT `rank`,
       `company`,
       `market_value`
FROM
  (SELECT *
   FROM `df_company` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_company`
           WHERE (`main_industry` = 'Banking')) AS RHS
        WHERE (LHS.company_id = RHS.company_id
               AND LHS.rank = RHS.rank
               AND LHS.company = RHS.company
               AND LHS.headquarters = RHS.headquarters
               AND LHS.main_industry = RHS.main_industry
               AND LHS.sales_billion = RHS.sales_billion
               AND LHS.profits_billion = RHS.profits_billion
               AND LHS.assets_billion = RHS.assets_billion
               AND LHS.market_value = RHS.market_value) ))
ORDER BY rank;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/gas_company/0013,"summarise(input0, 'n = n()', ""'location','manager_name'"")","SELECT LOCATION,
       n AS count___
FROM
  (SELECT LOCATION,
          manager_name,
          COUNT() AS n
   FROM df_gas_station
   GROUP BY LOCATION,
            manager_name)
ORDER BY LOCATION;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/gas_company/0006,df_company,"SELECT DISTINCT main_industry
FROM df_company
ORDER BY main_industry;",1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
spider/gas_company/0004,df_company,"SELECT company,
       headquarters
FROM df_company
ORDER BY company;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/gas_company/0012,"filter(input0, 'open_year > 2000L & open_year >= 2005L'), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT *
      FROM df_gas_station
      WHERE (open_year > 2000
             AND open_year >= 2005)))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/gas_company/0015,"filter(input0, ""main_industry == 'Banking'""), anti_join(input0, line0, ""'headquarters'"")","SELECT `headquarters`
FROM
  (SELECT *
   FROM `df_company` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_company`
           WHERE (`main_industry` = 'Banking')) AS RHS
        WHERE (LHS.headquarters = RHS.headquarters) ))
ORDER BY headquarters;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/gas_company/0005,"mutate(input0, 'minmarket_value = min(market_value)'), mutate(line0, 'maxmarket_value = max(market_value)'), mutate(line1, 'meanmarket_value = mean(market_value, na.rm = T)')","SELECT DISTINCT minmarket_value AS min_market_value_,
                maxmarket_value AS max_market_value_,
                AVG(market_value) OVER () AS avg_market_value_
FROM
  (SELECT company_id,
          rank,
          company,
          headquarters,
          main_industry,
          sales_billion,
          profits_billion,
          assets_billion,
          market_value,
          minmarket_value,
          MAX(market_value) OVER () AS maxmarket_value
   FROM
     (SELECT company_id,
             rank,
             company,
             headquarters,
             main_industry,
             sales_billion,
             profits_billion,
             assets_billion,
             market_value,
             MIN(market_value) OVER () AS minmarket_value
      FROM df_company))
ORDER BY min_market_value_;",3,10,3,1,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0
spider/gas_company/0016,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'company','market_value'"")","SELECT company,
       n AS count___
FROM
  (SELECT company,
          market_value,
          COUNT() AS n
   FROM
     (SELECT LHS.company_id AS company_id,
             LHS.rank AS rank,
             LHS.company AS company,
             LHS.headquarters AS headquarters,
             LHS.main_industry AS main_industry,
             LHS.sales_billion AS sales_billion,
             LHS.profits_billion AS profits_billion,
             LHS.assets_billion AS assets_billion,
             LHS.market_value AS market_value,
             RHS.station_id AS station_id,
             RHS.rank_of_the_year AS rank_of_the_year
      FROM df_company AS LHS
      INNER JOIN df_station_company AS RHS ON (LHS.company_id = RHS.company_id))
   GROUP BY company,
            market_value)
ORDER BY company;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/gas_company/0018,"filter(input0, ""company == 'ExxonMobil'""), natural_join3(input1, input2, line0)","SELECT `manager_name`
FROM
  (SELECT `LHS`.`station_id` AS `station_id`,
          `LHS`.`open_year` AS `open_year`,
          `LHS`.`location` AS `location`,
          `LHS`.`manager_name` AS `manager_name`,
          `LHS`.`vice_manager_name` AS `vice_manager_name`,
          `LHS`.`representative_name` AS `representative_name`,
          `LHS`.`company_id` AS `company_id`,
          `LHS`.`rank_of_the_year` AS `rank_of_the_year`,
          `RHS`.`rank` AS `rank`,
          `RHS`.`company` AS `company`,
          `RHS`.`headquarters` AS `headquarters`,
          `RHS`.`main_industry` AS `main_industry`,
          `RHS`.`sales_billion` AS `sales_billion`,
          `RHS`.`profits_billion` AS `profits_billion`,
          `RHS`.`assets_billion` AS `assets_billion`,
          `RHS`.`market_value` AS `market_value`
   FROM
     (SELECT `LHS`.`station_id` AS `station_id`,
             `LHS`.`open_year` AS `open_year`,
             `LHS`.`location` AS `location`,
             `LHS`.`manager_name` AS `manager_name`,
             `LHS`.`vice_manager_name` AS `vice_manager_name`,
             `LHS`.`representative_name` AS `representative_name`,
             `RHS`.`company_id` AS `company_id`,
             `RHS`.`rank_of_the_year` AS `rank_of_the_year`
      FROM `df_gas_station` AS `LHS`
      INNER JOIN `df_station_company` AS `RHS` ON (`LHS`.`station_id` = `RHS`.`station_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_company`
      WHERE (`company` = 'ExxonMobil')) AS RHS ON (LHS.company_id = RHS.company_id))
ORDER BY manager_name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/gas_company/0020,"summarise(input0, 'n = n()', ""'manager_name'""), filter(line0, 'n > 2000L | n != 1L')","SELECT manager_name
FROM
  (SELECT manager_name,
          COUNT() AS n
   FROM df_gas_station
   GROUP BY manager_name)
WHERE (n > 2000
       OR n != 1)
ORDER BY manager_name;",2,6,2,0,2,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/gas_company/0019,"filter(input0, 'market_value > 100'), natural_join3(input1, input2, line0)","SELECT LOCATION
FROM
  (SELECT LHS.station_id AS station_id,
          LHS.open_year AS open_year,
          LHS.location AS LOCATION,
          LHS.manager_name AS manager_name,
          LHS.vice_manager_name AS vice_manager_name,
          LHS.representative_name AS representative_name,
          LHS.company_id AS company_id,
          LHS.rank_of_the_year AS rank_of_the_year,
          RHS.rank AS rank,
          RHS.company AS company,
          RHS.headquarters AS headquarters,
          RHS.main_industry AS main_industry,
          RHS.sales_billion AS sales_billion,
          RHS.profits_billion AS profits_billion,
          RHS.assets_billion AS assets_billion,
          RHS.market_value AS market_value
   FROM
     (SELECT LHS.station_id AS station_id,
             LHS.open_year AS open_year,
             LHS.location AS LOCATION,
             LHS.manager_name AS manager_name,
             LHS.vice_manager_name AS vice_manager_name,
             LHS.representative_name AS representative_name,
             RHS.company_id AS company_id,
             RHS.rank_of_the_year AS rank_of_the_year
      FROM df_gas_station AS LHS
      INNER JOIN df_station_company AS RHS ON (LHS.station_id = RHS.station_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_company
      WHERE (market_value > 100.0)) AS RHS ON (LHS.company_id = RHS.company_id))
ORDER BY LOCATION;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/gas_company/0007,"summarise(input0, 'n = n()', ""'headquarters'"")","SELECT headquarters,
       n AS count___
FROM
  (SELECT headquarters,
          COUNT() AS n
   FROM df_company
   GROUP BY headquarters)
ORDER BY headquarters;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/gas_company/0021,df_gas_station,"SELECT LOCATION
FROM df_gas_station
ORDER BY LOCATION;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/gas_company/0023,"natural_join3(input0, input1, input2), limit(line0, 'company_id')","SELECT LOCATION,
       representative_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.company_id AS company_id,
                LHS.rank AS rank,
                LHS.company AS company,
                LHS.headquarters AS headquarters,
                LHS.main_industry AS main_industry,
                LHS.sales_billion AS sales_billion,
                LHS.profits_billion AS profits_billion,
                LHS.assets_billion AS assets_billion,
                LHS.market_value AS market_value,
                LHS.station_id AS station_id,
                LHS.open_year AS open_year,
                LHS.location AS LOCATION,
                LHS.manager_name AS manager_name,
                LHS.vice_manager_name AS vice_manager_name,
                LHS.representative_name AS representative_name,
                RHS.rank_of_the_year AS rank_of_the_year
         FROM
           (SELECT LHS.company_id AS company_id,
                   LHS.rank AS rank,
                   LHS.company AS company,
                   LHS.headquarters AS headquarters,
                   LHS.main_industry AS main_industry,
                   LHS.sales_billion AS sales_billion,
                   LHS.profits_billion AS profits_billion,
                   LHS.assets_billion AS assets_billion,
                   LHS.market_value AS market_value,
                   RHS.station_id AS station_id,
                   RHS.open_year AS open_year,
                   RHS.location AS LOCATION,
                   RHS.manager_name AS manager_name,
                   RHS.vice_manager_name AS vice_manager_name,
                   RHS.representative_name AS representative_name
            FROM df_company AS LHS
            CROSS JOIN df_gas_station AS RHS) AS LHS
         INNER JOIN df_station_company AS RHS ON (LHS.company_id = RHS.company_id
                                                  AND LHS.station_id = RHS.station_id))
      ORDER BY company_id)
   LIMIT 3);",1,12,5,0,5,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
spider/gas_company/0001,"summarise(input0, 'n = n()', ""'company','market_value'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT company,
          market_value,
          COUNT() AS n
   FROM df_company
   GROUP BY company,
            market_value)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/gas_company/0014,"filter(input0, ""main_industry == 'Banking'""), filter(line0, ""main_industry != 'Oil and gas'"")","SELECT `headquarters`
FROM
  (SELECT *
   FROM `df_company`
   WHERE (`main_industry` = 'Banking'))
WHERE (`main_industry` != 'Oil and gas')
ORDER BY headquarters;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/gas_company/0009,"summarise(input0, 'summarket_value = sum(market_value)', ""'main_industry','market_value'""), summarise(line0, 'n_distinct = n_distinct(market_value)', ""'main_industry'""), limit(line1, 'desc(n_distinct)')","SELECT main_industry,
       n_distinct AS count___
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT main_industry,
                COUNT(DISTINCT market_value) AS n_distinct
         FROM
           (SELECT main_industry,
                   market_value,
                   SUM(market_value) AS summarket_value
            FROM df_company
            GROUP BY main_industry,
                     market_value)
         GROUP BY main_industry)
      ORDER BY n_distinct DESC)
   LIMIT 1);",2,13,5,1,5,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/gas_company/0011,df_gas_station,"SELECT station_id,
       LOCATION,
       manager_name
FROM df_gas_station
ORDER BY station_id;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/solvency_ii/0002,df_products,"SELECT product_name
FROM df_products
ORDER BY product_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/solvency_ii/0008,"summarise(input0, 'n = n()', ""'product_id','product_type_code'""), limit(line0, 'desc(product_type_code)')","SELECT product_type_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT product_id,
                product_type_code,
                COUNT() AS n
         FROM df_products
         GROUP BY product_id,
                  product_type_code)
      ORDER BY product_type_code DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/solvency_ii/0003,"intersect(input0, input0, 'product_name'), inner_join(line0, input0, ""'product_name'"")","SELECT product_name,
       product_type_code
FROM
  (SELECT LHS.product_name AS product_name,
          RHS.product_id AS product_id,
          RHS.product_type_code AS product_type_code,
          RHS.product_price AS product_price
   FROM
     (SELECT product_name
      FROM df_products INTERSECT SELECT product_name
      FROM df_products) AS LHS
   INNER JOIN df_products AS RHS ON (LHS.product_name = RHS.product_name))
ORDER BY product_name;",2,10,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0
spider/solvency_ii/0013,"summarise(input1, 'n = n()', ""'product_id'""), inner_join(input0, line0, ""'product_id'""), filter(line1, 'n >= 2L')","SELECT product_name
FROM
  (SELECT LHS.product_id AS product_id,
          LHS.product_type_code AS product_type_code,
          LHS.product_name AS product_name,
          LHS.product_price AS product_price,
          RHS.n AS n
   FROM df_products AS LHS
   INNER JOIN
     (SELECT product_id,
             COUNT() AS n
      FROM df_products_in_events
      GROUP BY product_id) AS RHS ON (LHS.product_id = RHS.product_id))
WHERE (n >= 2)
ORDER BY product_name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/solvency_ii/0006,"limit(input0, 'desc(product_price)')","SELECT product_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_products
      ORDER BY product_price DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/solvency_ii/0004,"filter(input0, ""product_name == 'Trading Policy'""), intersect(line0, input0, 'product_price')","SELECT `product_price`
FROM
  (SELECT `product_price`
   FROM `df_products`
   WHERE (`product_name` = 'Trading Policy') INTERSECT
     SELECT product_price
     FROM df_products)
ORDER BY product_price;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/solvency_ii/0012,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'product_name'"")","SELECT product_name,
       n AS count___
FROM
  (SELECT product_name,
          COUNT() AS n
   FROM
     (SELECT LHS.product_id AS product_id,
             LHS.product_type_code AS product_type_code,
             LHS.product_name AS product_name,
             LHS.product_price AS product_price,
             RHS.product_in_event_id AS product_in_event_id,
             RHS.event_id AS event_id
      FROM df_products AS LHS
      INNER JOIN df_products_in_events AS RHS ON (LHS.product_id = RHS.product_id))
   GROUP BY product_name)
ORDER BY product_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/solvency_ii/0015,"anti_join(input0, input1, '')","SELECT product_name
FROM
  (SELECT *
   FROM df_products AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_products_in_events AS RHS
        WHERE (LHS.product_id = RHS.product_id) ))
ORDER BY product_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/solvency_ii/0005,"summarise(input0, 'meanproduct_price = mean(product_price, na.rm = T)', ""'product_price','product_type_code'""), summarise(line0, 'meanproduct_price = mean(product_price, na.rm = T)', '')","SELECT meanproduct_price AS avg_product_price_
FROM
  (SELECT AVG(product_price) AS meanproduct_price
   FROM
     (SELECT product_price,
             product_type_code,
             AVG(product_price) AS meanproduct_price
      FROM df_products
      GROUP BY product_price,
               product_type_code))
ORDER BY avg_product_price_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/solvency_ii/0007,"summarise(input0, 'n = n()', ""'product_type_code'"")","SELECT product_type_code,
       n AS count___
FROM
  (SELECT product_type_code,
          COUNT() AS n
   FROM df_products
   GROUP BY product_type_code)
ORDER BY product_type_code;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/solvency_ii/0001,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_products)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/solvency_ii/0014,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'event_id','product_name'""), filter(line1, 'n >= 2L')","SELECT product_name
FROM
  (SELECT event_id,
          product_name,
          COUNT() AS n
   FROM
     (SELECT LHS.product_id AS product_id,
             LHS.product_type_code AS product_type_code,
             LHS.product_name AS product_name,
             LHS.product_price AS product_price,
             RHS.product_in_event_id AS product_in_event_id,
             RHS.event_id AS event_id
      FROM df_products AS LHS
      INNER JOIN df_products_in_events AS RHS ON (LHS.product_id = RHS.product_id))
   GROUP BY event_id,
            product_name)
WHERE (n >= 2)
ORDER BY product_name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/solvency_ii/0009,"mutate(input0, 'n = n()'), filter(line0, 'n >= 2L')","SELECT DISTINCT product_type_code
FROM
  (SELECT product_id,
          product_type_code,
          product_name,
          product_price,
          COUNT(*) OVER () AS n
   FROM df_products)
WHERE (n >= 2)
ORDER BY product_type_code;",2,7,2,1,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/solvency_ii/0011,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'product_name'"")","SELECT product_name,
       n AS count___
FROM
  (SELECT product_name,
          COUNT() AS n
   FROM
     (SELECT LHS.product_id AS product_id,
             LHS.product_type_code AS product_type_code,
             LHS.product_name AS product_name,
             LHS.product_price AS product_price,
             RHS.product_in_event_id AS product_in_event_id,
             RHS.event_id AS event_id
      FROM df_products AS LHS
      INNER JOIN df_products_in_events AS RHS ON (LHS.product_id = RHS.product_id))
   GROUP BY product_name)
ORDER BY product_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/solvency_ii/0010,"cross_join(input0, input0, 'product_price > product_price.other'), filter(line0, 'product_price > 4500 & product_price >= 3000')","SELECT DISTINCT product_type_code
FROM
  (SELECT *
   FROM
     (SELECT LHS.product_id AS product_id,
             LHS.product_type_code AS product_type_code,
             LHS.product_name AS product_name,
             LHS.product_price AS product_price,
             RHS.product_id AS product_id_other,
             RHS.product_type_code AS product_type_code_other,
             RHS.product_name AS product_name_other,
             RHS.product_price AS product_price_other
      FROM df_products AS LHS
      CROSS JOIN df_products AS RHS)
   WHERE (product_price > product_price_other))
WHERE (product_price > 4500.0
       AND product_price >= 3000.0)
ORDER BY product_type_code;",2,9,3,1,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
spider/college_3/0033,"filter(input0, ""lname == 'Smith'""), inner_join(input1, input2, ""'grade' = 'lettergrade'""), semi_join(line1, line0), summarise(line2, 'meangradepoint = mean(gradepoint, na.rm = T)', '')","SELECT `meangradepoint` AS `avg_t2_gradepoint_`
FROM
  (SELECT AVG(`gradepoint`) AS `meangradepoint`
   FROM
     (SELECT *
      FROM
        (SELECT `stuid`,
                `cid`,
                `grade`,
                `gradepoint`,
                `grade` AS `lettergrade`
         FROM
           (SELECT `LHS`.`stuid` AS `stuid`,
                   `LHS`.`cid` AS `cid`,
                   `LHS`.`grade` AS `grade`,
                   `RHS`.`gradepoint` AS `gradepoint`
            FROM `df_enrolled_in` AS `LHS`
            INNER JOIN `df_gradeconversion` AS `RHS` ON (`LHS`.`grade` = `RHS`.`lettergrade`))) AS `LHS`
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_student`
              WHERE (`lname` = 'Smith')) AS RHS
           WHERE (LHS.stuid = RHS.stuid) )))
ORDER BY avg_t2_gradepoint_;",4,19,7,0,7,1,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0
spider/college_3/0002,"filter(input0, 'credits > 2L'), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_course
WHERE (credits > 2)
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/college_3/0036,"filter(input0, ""division != 'AS' | division != 'EN'""), filter(line0, ""division == 'AS' | building == 'NEB'"")","SELECT `dname`
FROM
  (SELECT *
   FROM `df_department`
   WHERE (`division` != 'AS'
          OR `division` != 'EN'))
WHERE (`division` = 'AS'
       OR `building` = 'NEB')
ORDER BY dname;",2,8,2,0,2,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/college_3/0017,"filter(input0, ""building == 'Barton'"")","SELECT `lname`
FROM `df_faculty`
WHERE (`building` = 'Barton')
ORDER BY lname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_3/0008,"mutate(input0, 'maxgradepoint = max(gradepoint)'), mutate(line0, 'gradepoint = min(gradepoint)')","SELECT DISTINCT maxgradepoint AS max_gradepoint_,
                MIN(gradepoint) OVER () AS min_gradepoint_
FROM
  (SELECT lettergrade,
          gradepoint,
          MAX(gradepoint) OVER () AS maxgradepoint
   FROM df_gradeconversion)
ORDER BY max_gradepoint_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/college_3/0003,"filter(input0, 'credits == 1L')","SELECT cname
FROM df_course
WHERE (credits = 1)
ORDER BY cname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_3/0027,"filter(input1, ""cname == 'INTRODUCTION TO COMPUTER SCIENCE'""), semi_join(input0, line0)","SELECT `dname`,
       `room`
FROM
  (SELECT *
   FROM `df_department` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_course`
           WHERE (`cname` = 'INTRODUCTION TO COMPUTER SCIENCE')) AS RHS
        WHERE (LHS.dno = RHS.dno) ))
ORDER BY dname;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/college_3/0022,"summarise(input0, 'n = n()', ""'phone','rank'""), limit(line0, 'phone')","SELECT rank
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT phone,
                rank,
                COUNT() AS n
         FROM df_faculty
         GROUP BY phone,
                  rank)
      ORDER BY phone)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_3/0030,"filter(input1, 'dno == 520L'), semi_join(input0, line0)","SELECT fname,
       lname
FROM
  (SELECT *
   FROM df_faculty AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_member_of
           WHERE (dno = 520)) AS RHS
        WHERE (LHS.facid = RHS.facid) ))
ORDER BY fname;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/college_3/0013,df_course,"SELECT cid,
       cname,
       credits,
       instructor,
       days,
       hours,
       dno
FROM df_course
ORDER BY cid;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_3/0006,"filter(input0, 'room == 268L'), intersect(line0, input0, 'dphone')","SELECT dphone
FROM
  (SELECT dphone
   FROM df_department
   WHERE (room = 268) INTERSECT
     SELECT dphone
     FROM df_department)
ORDER BY dphone;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/college_3/0004,"filter(input0, ""days == 'MTW'"")","SELECT `cname`
FROM `df_course`
WHERE (`days` = 'MTW')
ORDER BY cname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_3/0012,"filter(input0, ""building == 'Mergenthaler'"")","SELECT `dname`
FROM `df_department`
WHERE (`building` = 'Mergenthaler')
ORDER BY dname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_3/0026,"filter(input1, ""cname == 'COMPUTER LITERACY'""), semi_join(input1, line0), inner_join(input0, line1, ""'facid' = 'instructor'"")","SELECT `fname`,
       `lname`
FROM
  (SELECT `LHS`.`facid` AS `facid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`rank` AS `rank`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`phone` AS `phone`,
          `LHS`.`room` AS `room`,
          `LHS`.`building` AS `building`,
          `RHS`.`cid` AS `cid`,
          `RHS`.`cname` AS `cname`,
          `RHS`.`credits` AS `credits`,
          `RHS`.`days` AS `days`,
          `RHS`.`hours` AS `hours`,
          `RHS`.`dno` AS `dno`
   FROM `df_faculty` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_course` AS `LHS`
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_course`
              WHERE (`cname` = 'COMPUTER LITERACY')) AS RHS
           WHERE (LHS.cid = RHS.cid
                  AND LHS.cname = RHS.cname
                  AND LHS.credits = RHS.credits
                  AND LHS.instructor = RHS.instructor
                  AND LHS.days = RHS.days
                  AND LHS.hours = RHS.hours
                  AND LHS.dno = RHS.dno) )) AS RHS ON (LHS.facid = RHS.instructor))
ORDER BY fname;",3,15,5,0,5,1,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0
spider/college_3/0015,df_student,"SELECT fname
FROM df_student
ORDER BY fname;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_3/0005,"summarise(input0, 'n = n()', ""'division'""), filter(line0, ""division == 'AS'"")","SELECT `n` AS `count___`
FROM
  (SELECT `division`,
          COUNT() AS `n`
   FROM `df_department`
   GROUP BY `division`)
WHERE (`division` = 'AS')
ORDER BY count___;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_3/0016,"filter(input0, ""sex == 'F'"")","SELECT `lname`
FROM `df_student`
WHERE (`sex` = 'F')
ORDER BY lname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_3/0032,"filter(input1, ""dname != 'Computer Science'""), anti_join(input2, line0, ""'dno'""), natural_join(input0, line1)","SELECT `lname`
FROM
  (SELECT `LHS`.`facid` AS `facid`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`rank` AS `rank`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`phone` AS `phone`,
          `LHS`.`room` AS `room`,
          `LHS`.`building` AS `building`,
          `RHS`.`dno` AS `dno`,
          `RHS`.`appt_type` AS `appt_type`
   FROM `df_faculty` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_member_of` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_department`
              WHERE (`dname` != 'Computer Science')) AS RHS
           WHERE (LHS.dno = RHS.dno) )) AS RHS ON (LHS.facid = RHS.facid))
ORDER BY lname;",3,16,5,0,5,1,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0
spider/college_3/0018,"filter(input0, ""rank == 'Professor'"")","SELECT `fname`
FROM `df_faculty`
WHERE (`rank` = 'Professor')
ORDER BY fname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/college_3/0035,"filter(input0, 'hours == 4L | credits >= 1L'), filter(line0, 'credits != 1L | credits < 4L'), filter(line1, 'hours == 4L | credits == 3L')","SELECT DISTINCT cname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_course
      WHERE (hours = 4
             OR credits >= 1))
   WHERE (credits != 1
          OR credits < 4))
WHERE (hours = 4
       OR credits = 3)
ORDER BY cname;",3,13,3,1,3,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0
spider/college_3/0020,"anti_join(input0, input1, ""'dno'"")","SELECT dname
FROM
  (SELECT *
   FROM df_department AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_minor_in AS RHS
        WHERE (LHS.dno = RHS.dno) ))
ORDER BY dname;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/college_3/0019,"mutate(input1, 'n = n()'), natural_join3(input0, input1, line0), limit(line1, 'desc(dno)')","SELECT dname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.dno AS dno,
                LHS.division AS division,
                LHS.dname AS dname,
                LHS.room AS room,
                LHS.building AS building,
                LHS.dphone AS dphone,
                LHS.stuid AS stuid,
                RHS.n AS n
         FROM
           (SELECT LHS.dno AS dno,
                   LHS.division AS division,
                   LHS.dname AS dname,
                   LHS.room AS room,
                   LHS.building AS building,
                   LHS.dphone AS dphone,
                   RHS.stuid AS stuid
            FROM df_department AS LHS
            INNER JOIN df_minor_in AS RHS ON (LHS.dno = RHS.dno)) AS LHS
         INNER JOIN
           (SELECT stuid,
                   dno,
                   COUNT(*) OVER () AS n
            FROM df_minor_in) AS RHS ON (LHS.dno = RHS.dno
                                         AND LHS.stuid = RHS.stuid))
      ORDER BY dno DESC)
   LIMIT 1);",2,17,6,0,6,2,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
spider/college_3/0007,"filter(input0, ""grade == 'B'""), mutate(line0, 'n_distinct = n_distinct(stuid)')","SELECT DISTINCT COUNT(DISTINCT `stuid`) OVER () AS `count_distinct_stuid_`
FROM `df_enrolled_in`
WHERE (`grade` = 'B')
ORDER BY count_distinct_stuid_;",2,6,1,2,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/college_3/0024,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'building','hours'""), limit(line1, 'desc(n)')","SELECT building
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT building,
                hours,
                COUNT() AS n
         FROM
           (SELECT LHS.facid AS facid,
                   LHS.lname AS lname,
                   LHS.fname AS fname,
                   LHS.rank AS rank,
                   LHS.sex AS sex,
                   LHS.phone AS phone,
                   LHS.room AS room,
                   LHS.building AS building,
                   RHS.cid AS cid,
                   RHS.cname AS cname,
                   RHS.credits AS credits,
                   RHS.instructor AS instructor,
                   RHS.days AS days,
                   RHS.hours AS hours,
                   RHS.dno AS dno
            FROM df_faculty AS LHS
            CROSS JOIN df_course AS RHS)
         GROUP BY building,
                  hours)
      ORDER BY n DESC)
   LIMIT 1);",2,12,5,0,5,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/college_3/0021,"mutate(input0, 'n = n()'), natural_join3(input0, input1, line0), limit(line1, 'division')","SELECT dname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.dno AS dno,
                LHS.division AS division,
                LHS.dname AS dname,
                LHS.room AS room,
                LHS.building AS building,
                LHS.dphone AS dphone,
                LHS.facid AS facid,
                LHS.appt_type AS appt_type,
                RHS.n AS n
         FROM
           (SELECT LHS.dno AS dno,
                   LHS.division AS division,
                   LHS.dname AS dname,
                   LHS.room AS room,
                   LHS.building AS building,
                   LHS.dphone AS dphone,
                   RHS.facid AS facid,
                   RHS.appt_type AS appt_type
            FROM df_department AS LHS
            INNER JOIN df_member_of AS RHS ON (LHS.dno = RHS.dno)) AS LHS
         INNER JOIN
           (SELECT dno,
                   division,
                   dname,
                   room,
                   building,
                   dphone,
                   COUNT(*) OVER () AS n
            FROM df_department) AS RHS ON (LHS.dno = RHS.dno
                                           AND LHS.division = RHS.division
                                           AND LHS.dname = RHS.dname
                                           AND LHS.room = RHS.room
                                           AND LHS.building = RHS.building
                                           AND LHS.dphone = RHS.dphone))
      ORDER BY division)
   LIMIT 1);",2,16,6,0,6,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
spider/college_3/0023,"summarise(input1, 'n = n()', ""'instructor'""), filter(line0, 'n > 3L'), inner_join(input0, line1, ""'facid' = 'instructor'"")","SELECT fname,
       lname
FROM
  (SELECT LHS.facid AS facid,
          LHS.lname AS lname,
          LHS.fname AS fname,
          LHS.rank AS rank,
          LHS.sex AS sex,
          LHS.phone AS phone,
          LHS.room AS room,
          LHS.building AS building,
          RHS.n AS n
   FROM df_faculty AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT instructor,
                COUNT() AS n
         FROM df_course
         GROUP BY instructor)
      WHERE (n > 3)) AS RHS ON (LHS.facid = RHS.instructor))
ORDER BY fname;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
spider/college_3/0001,"mutate(input0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_course
ORDER BY count___;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/college_3/0014,df_course,"SELECT cname
FROM df_course
ORDER BY cname;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/college_3/0025,"summarise(input1, 'n = n()', ""'cid'""), left_join(line0, input0), filter(line1, 'n >= 5L')","SELECT cname
FROM
  (SELECT LHS.cid AS cid,
          LHS.n AS n,
          RHS.cname AS cname,
          RHS.credits AS credits,
          RHS.instructor AS instructor,
          RHS.days AS days,
          RHS.hours AS hours,
          RHS.dno AS dno
   FROM
     (SELECT cid,
             COUNT() AS n
      FROM df_enrolled_in
      GROUP BY cid) AS LHS
   LEFT JOIN df_course AS RHS ON (LHS.cid = RHS.cid))
WHERE (n >= 5)
ORDER BY cname;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/college_3/0011,"filter(input0, ""rank == 'Professor' & building == 'NEB'""), filter(line0, ""rank == 'Professor'"")","SELECT `room`
FROM
  (SELECT *
   FROM `df_faculty`
   WHERE (`rank` = 'Professor'
          AND `building` = 'NEB'))
WHERE (`rank` = 'Professor')
ORDER BY room;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/college_3/0029,"filter(input2, ""gradepoint > '3.8'""), left_join(input1, input0), inner_join(line1, line0, ""'grade' = 'lettergrade'"")","SELECT DISTINCT `fname`
FROM
  (SELECT `LHS`.`stuid` AS `stuid`,
          `LHS`.`cid` AS `cid`,
          `LHS`.`grade` AS `grade`,
          `LHS`.`lname` AS `lname`,
          `LHS`.`fname` AS `fname`,
          `LHS`.`age` AS `age`,
          `LHS`.`sex` AS `sex`,
          `LHS`.`major` AS `major`,
          `LHS`.`advisor` AS `advisor`,
          `LHS`.`city_code` AS `city_code`,
          `RHS`.`gradepoint` AS `gradepoint`
   FROM
     (SELECT `LHS`.`stuid` AS `stuid`,
             `LHS`.`cid` AS `cid`,
             `LHS`.`grade` AS `grade`,
             `RHS`.`lname` AS `lname`,
             `RHS`.`fname` AS `fname`,
             `RHS`.`age` AS `age`,
             `RHS`.`sex` AS `sex`,
             `RHS`.`major` AS `major`,
             `RHS`.`advisor` AS `advisor`,
             `RHS`.`city_code` AS `city_code`
      FROM `df_enrolled_in` AS `LHS`
      LEFT JOIN `df_student` AS `RHS` ON (`LHS`.`stuid` = `RHS`.`stuid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_gradeconversion`
      WHERE (`gradepoint` > '3.8')) AS RHS ON (LHS.grade = RHS.lettergrade))
ORDER BY fname;",3,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0
spider/college_3/0010,"filter(input0, ""building == 'NEB'""), filter(line0, ""sex == 'M'"")","SELECT `fname`,
       `lname`
FROM
  (SELECT *
   FROM `df_faculty`
   WHERE (`building` = 'NEB'))
WHERE (`sex` = 'M')
ORDER BY fname;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/college_3/0028,"natural_join(input0, input1), inner_join(line0, input2, ""'grade' = 'lettergrade'"")","SELECT fname,
       lname,
       gradepoint
FROM
  (SELECT LHS.stuid AS stuid,
          LHS.lname AS lname,
          LHS.fname AS fname,
          LHS.age AS age,
          LHS.sex AS sex,
          LHS.major AS major,
          LHS.advisor AS advisor,
          LHS.city_code AS city_code,
          LHS.cid AS cid,
          LHS.grade AS grade,
          RHS.gradepoint AS gradepoint
   FROM
     (SELECT LHS.stuid AS stuid,
             LHS.lname AS lname,
             LHS.fname AS fname,
             LHS.age AS age,
             LHS.sex AS sex,
             LHS.major AS major,
             LHS.advisor AS advisor,
             LHS.city_code AS city_code,
             RHS.cid AS cid,
             RHS.grade AS grade
      FROM df_student AS LHS
      INNER JOIN df_enrolled_in AS RHS ON (LHS.stuid = RHS.stuid)) AS LHS
   INNER JOIN df_gradeconversion AS RHS ON (LHS.grade = RHS.lettergrade))
ORDER BY fname;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0
spider/college_3/0031,"filter(input1, 'dno == 140L'), semi_join(input0, line0)","SELECT fname,
       lname
FROM
  (SELECT *
   FROM df_student AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_minor_in
           WHERE (dno = 140)) AS RHS
        WHERE (LHS.stuid = RHS.stuid) ))
ORDER BY fname;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/workshop_paper/0002,df_submission,"SELECT author
FROM df_submission
ORDER BY author;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/workshop_paper/0008,"summarise(input0, 'n = n()', ""'author','college'""), limit(line0, 'desc(college)')","SELECT college
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT author,
                college,
                COUNT() AS n
         FROM df_submission
         GROUP BY author,
                  college)
      ORDER BY college DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/workshop_paper/0003,df_submission,"SELECT author,
       college
FROM df_submission
ORDER BY author;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/workshop_paper/0013,"summarise(input1, 'n = n()', ''), natural_join3(input0, input1, line0), limit(line1, 'desc(result)')","SELECT author
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.submission_id AS submission_id,
                LHS.scores AS scores,
                LHS.author AS author,
                LHS.college AS college,
                LHS.workshop_id AS workshop_id,
                LHS.result AS RESULT,
                RHS.n AS n
         FROM
           (SELECT LHS.submission_id AS submission_id,
                   LHS.scores AS scores,
                   LHS.author AS author,
                   LHS.college AS college,
                   RHS.workshop_id AS workshop_id,
                   RHS.result AS RESULT
            FROM df_submission AS LHS
            INNER JOIN df_acceptance AS RHS ON (LHS.submission_id = RHS.submission_id)) AS LHS
         CROSS JOIN
           (SELECT COUNT() AS n
            FROM df_acceptance) AS RHS)
      ORDER BY RESULT DESC)
   LIMIT 1);",2,18,6,0,6,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
spider/workshop_paper/0006,"limit(input0, 'desc(scores)')","SELECT author
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_submission
      ORDER BY scores DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/workshop_paper/0004,"filter(input0, ""college == 'Florida' | college == 'Temple'"")","SELECT `author`
FROM `df_submission`
WHERE (`college` = 'Florida'
       OR `college` = 'Temple')
ORDER BY author;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/workshop_paper/0012,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'author'"")","SELECT author,
       n AS count_distinct_t1_workshop_id_
FROM
  (SELECT author,
          COUNT() AS n
   FROM
     (SELECT LHS.submission_id AS submission_id,
             LHS.scores AS scores,
             LHS.author AS author,
             LHS.college AS college,
             RHS.workshop_id AS workshop_id,
             RHS.result AS RESULT
      FROM df_submission AS LHS
      INNER JOIN df_acceptance AS RHS ON (LHS.submission_id = RHS.submission_id))
   GROUP BY author)
ORDER BY author;",2,8,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/workshop_paper/0015,"anti_join(input0, input1, '')","SELECT author
FROM
  (SELECT *
   FROM df_submission AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_acceptance AS RHS
        WHERE (LHS.submission_id = RHS.submission_id) ))
ORDER BY author;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/workshop_paper/0005,"mutate(input0, 'meanscores = mean(scores, na.rm = T)')","SELECT DISTINCT AVG(scores) OVER () AS avg_scores_
FROM df_submission
ORDER BY avg_scores_;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/workshop_paper/0007,"summarise(input0, 'n = n()', ""'college'"")","SELECT college,
       n AS count___
FROM
  (SELECT college,
          COUNT() AS n
   FROM df_submission
   GROUP BY college)
ORDER BY college;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/workshop_paper/0001,"mutate(input0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_submission
ORDER BY count___;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/workshop_paper/0014,df_workshop,"SELECT date, venue
FROM df_workshop
ORDER BY date;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/workshop_paper/0011,"natural_join(input0, input1), limit(line0, 'author')","SELECT RESULT
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.submission_id AS submission_id,
                LHS.scores AS scores,
                LHS.author AS author,
                LHS.college AS college,
                RHS.workshop_id AS workshop_id,
                RHS.result AS RESULT
         FROM df_submission AS LHS
         INNER JOIN df_acceptance AS RHS ON (LHS.submission_id = RHS.submission_id))
      ORDER BY author)
   LIMIT 1);",1,12,4,0,4,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/workshop_paper/0010,"natural_join(input0, input1)","SELECT author,
       RESULT
FROM
  (SELECT LHS.submission_id AS submission_id,
          LHS.scores AS scores,
          LHS.author AS author,
          LHS.college AS college,
          RHS.workshop_id AS workshop_id,
          RHS.result AS RESULT
   FROM df_submission AS LHS
   INNER JOIN df_acceptance AS RHS ON (LHS.submission_id = RHS.submission_id))
ORDER BY author;",1,7,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/film_rank/0002,df_film,"SELECT director
FROM df_film
ORDER BY director;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/film_rank/0017,"summarise(input0, 'n = n()', ""'studio'""), filter(line0, 'n == 2L'), mutate(line1, 'n = n()')","SELECT studio
FROM
  (SELECT studio,
          COUNT() AS n
   FROM df_film
   GROUP BY studio)
WHERE (n = 2)
ORDER BY studio;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/film_rank/0008,df_market,"SELECT country
FROM df_market
ORDER BY country;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/film_rank/0003,"summarise(input0, 'meangross_in_dollar = mean(gross_in_dollar, na.rm = T)', ""'gross_in_dollar','title'""), summarise(line0, 'meangross_in_dollar = mean(gross_in_dollar, na.rm = T)', '')","SELECT meangross_in_dollar AS avg_gross_in_dollar_
FROM
  (SELECT AVG(gross_in_dollar) AS meangross_in_dollar
   FROM
     (SELECT gross_in_dollar,
             title,
             AVG(gross_in_dollar) AS meangross_in_dollar
      FROM df_film
      GROUP BY gross_in_dollar,
               title))
ORDER BY avg_gross_in_dollar_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/film_rank/0022,"filter(input0, 'gross_in_dollar > 4500000L'), summarise(line0, 'meangross_in_dollar = mean(gross_in_dollar, na.rm = T)', ""'studio','title'"")","SELECT DISTINCT studio
FROM
  (SELECT studio,
          title,
          AVG(gross_in_dollar) AS meangross_in_dollar
   FROM
     (SELECT *
      FROM df_film
      WHERE (gross_in_dollar > 4500000))
   GROUP BY studio,
            title)
ORDER BY studio;",2,8,3,1,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/film_rank/0013,"natural_join(input0, input1)","SELECT country,
       YEAR
FROM
  (SELECT LHS.market_id AS market_id,
          LHS.country AS country,
          LHS.number_cities AS number_cities,
          RHS.estimation_id AS estimation_id,
          RHS.low_estimate AS low_estimate,
          RHS.high_estimate AS high_estimate,
          RHS.film_id AS film_id,
          RHS.type AS TYPE,
          RHS.year AS YEAR
   FROM df_market AS LHS
   INNER JOIN df_film_market_estimation AS RHS ON (LHS.market_id = RHS.market_id))
ORDER BY country;",1,7,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/film_rank/0006,"mutate(input0, 'minnumber_cities = min(number_cities)'), mutate(line0, 'number_cities = max(number_cities)')","SELECT DISTINCT MAX(number_cities) OVER () AS max_number_cities_,
                                        minnumber_cities AS min_number_cities_
FROM
  (SELECT market_id,
          country,
          number_cities,
          MIN(number_cities) OVER () AS minnumber_cities
   FROM df_market)
ORDER BY max_number_cities_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/film_rank/0004,df_film_market_estimation,"SELECT low_estimate,
       high_estimate
FROM df_film_market_estimation
ORDER BY low_estimate;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/film_rank/0012,"filter(input1, 'low_estimate > 10000'), natural_join3(input0, input1, line0), summarise(line1, 'meannumber_cities = mean(number_cities, na.rm = T)', ""'estimation_id'"")","SELECT meannumber_cities AS avg_t2_number_cities_
FROM
  (SELECT estimation_id,
          AVG(number_cities) AS meannumber_cities
   FROM
     (SELECT LHS.market_id AS market_id,
             LHS.country AS country,
             LHS.number_cities AS number_cities,
             LHS.estimation_id AS estimation_id,
             LHS.low_estimate AS low_estimate,
             LHS.high_estimate AS high_estimate,
             LHS.film_id AS film_id,
             LHS.type AS TYPE,
             LHS.year AS YEAR
      FROM
        (SELECT LHS.market_id AS market_id,
                LHS.country AS country,
                LHS.number_cities AS number_cities,
                RHS.estimation_id AS estimation_id,
                RHS.low_estimate AS low_estimate,
                RHS.high_estimate AS high_estimate,
                RHS.film_id AS film_id,
                RHS.type AS TYPE,
                RHS.year AS YEAR
         FROM df_market AS LHS
         INNER JOIN df_film_market_estimation AS RHS ON (LHS.market_id = RHS.market_id)) AS LHS
      INNER JOIN
        (SELECT *
         FROM df_film_market_estimation
         WHERE (low_estimate > 10000.0)) AS RHS ON (LHS.market_id = RHS.market_id
                                                    AND LHS.estimation_id = RHS.estimation_id
                                                    AND LHS.low_estimate = RHS.low_estimate
                                                    AND LHS.high_estimate = RHS.high_estimate
                                                    AND LHS.film_id = RHS.film_id
                                                    AND LHS.type = RHS.type
                                                    AND LHS.year = RHS.year))
   GROUP BY estimation_id)
ORDER BY avg_t2_number_cities_;",3,15,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
spider/film_rank/0015,"summarise(input0, 'n = n()', ""'film_id','studio'""), summarise(line0, 'n = n()', ""'studio'"")","SELECT studio,
       n AS count___
FROM
  (SELECT studio,
          COUNT() AS n
   FROM
     (SELECT film_id,
             studio,
             COUNT() AS n
      FROM df_film
      GROUP BY film_id,
               studio)
   GROUP BY studio)
ORDER BY studio;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/film_rank/0005,"filter(input0, 'year == 1995L')","SELECT TYPE
FROM df_film_market_estimation
WHERE (YEAR = 1995)
ORDER BY TYPE;",1,4,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/film_rank/0016,"summarise(input0, 'n = n()', ""'studio','title'""), limit(line0, 'title')","SELECT studio
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT studio,
                title,
                COUNT() AS n
         FROM df_film
         GROUP BY studio,
                  title)
      ORDER BY title)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/film_rank/0018,"anti_join(input0, input1, '')","SELECT title
FROM
  (SELECT *
   FROM df_film AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_film_market_estimation AS RHS
        WHERE (LHS.film_id = RHS.film_id) ))
ORDER BY title;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/film_rank/0019,"filter(input0, ""director != 'Nicholas Meyer'""), filter(line0, ""director == 'Walter Hill'"")","SELECT `studio`
FROM
  (SELECT *
   FROM `df_film`
   WHERE (`director` != 'Nicholas Meyer'))
WHERE (`director` = 'Walter Hill')
ORDER BY studio;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/film_rank/0007,"filter(input0, 'number_cities <= 300L'), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT *
      FROM df_market
      WHERE (number_cities <= 300)))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/film_rank/0024,"filter(input1, ""country == 'China'""), semi_join(input2, line0), anti_join(input0, line1, ""'film_id'"")","SELECT `title`,
       `director`
FROM
  (SELECT *
   FROM `df_film` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_film_market_estimation` AS `LHS`
           WHERE EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM `df_market`
                   WHERE (`country` = 'China')) AS RHS
                WHERE (LHS.market_id = RHS.market_id) )) AS RHS
        WHERE (LHS.film_id = RHS.film_id) ))
ORDER BY title;",3,20,6,0,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/film_rank/0021,"filter(input0, ""director == 'Walter Hill'""), anti_join(input0, line0, ""'studio'""), semi_join(input0, line1)","SELECT DISTINCT `studio`
FROM
  (SELECT *
   FROM `df_film` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_film` AS `LHS`
           WHERE NOT EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM `df_film`
                   WHERE (`director` = 'Walter Hill')) AS RHS
                WHERE (LHS.studio = RHS.studio) )) AS RHS
        WHERE (LHS.film_id = RHS.film_id
               AND LHS.title = RHS.title
               AND LHS.studio = RHS.studio
               AND LHS.director = RHS.director
               AND LHS.gross_in_dollar = RHS.gross_in_dollar) ))
ORDER BY studio;",3,21,6,1,6,0,5,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0
spider/film_rank/0023,"natural_join(input0, input1), limit(line0, 'director')","SELECT title
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.film_id AS film_id,
                LHS.title AS title,
                LHS.studio AS studio,
                LHS.director AS director,
                LHS.gross_in_dollar AS gross_in_dollar,
                RHS.estimation_id AS estimation_id,
                RHS.low_estimate AS low_estimate,
                RHS.high_estimate AS high_estimate,
                RHS.type AS TYPE,
                RHS.market_id AS market_id,
                RHS.year AS YEAR
         FROM df_film AS LHS
         INNER JOIN df_film_market_estimation AS RHS ON (LHS.film_id = RHS.film_id))
      ORDER BY director)
   LIMIT 1);",1,11,4,0,4,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/film_rank/0001,"summarise(input0, 'n = n()', ""'director'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT director,
          COUNT() AS n
   FROM df_film
   GROUP BY director)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/film_rank/0014,"filter(input0, ""country == 'Japan'""), natural_join(input1, line0)","SELECT `year`
FROM
  (SELECT `LHS`.`estimation_id` AS `estimation_id`,
          `LHS`.`low_estimate` AS `low_estimate`,
          `LHS`.`high_estimate` AS `high_estimate`,
          `LHS`.`film_id` AS `film_id`,
          `LHS`.`type` AS `type`,
          `LHS`.`market_id` AS `market_id`,
          `LHS`.`year` AS `year`,
          `RHS`.`country` AS `country`,
          `RHS`.`number_cities` AS `number_cities`
   FROM `df_film_market_estimation` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_market`
      WHERE (`country` = 'Japan')) AS RHS ON (LHS.market_id = RHS.market_id))
ORDER BY YEAR;",2,9,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/film_rank/0009,"intersect(input0, input0, 'country')","SELECT country
FROM
  (SELECT country
   FROM df_market INTERSECT SELECT country
   FROM df_market)
ORDER BY country;",1,7,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
spider/film_rank/0011,"filter(input1, 'year == 1995L'), semi_join(input0, line0)","SELECT director
FROM
  (SELECT *
   FROM df_film AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_film_market_estimation
           WHERE (YEAR = 1995)) AS RHS
        WHERE (LHS.film_id = RHS.film_id) ))
ORDER BY director;",2,13,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/film_rank/0010,"natural_join(input0, input1)","SELECT title,
       TYPE
FROM
  (SELECT LHS.film_id AS film_id,
          LHS.title AS title,
          LHS.studio AS studio,
          LHS.director AS director,
          LHS.gross_in_dollar AS gross_in_dollar,
          RHS.estimation_id AS estimation_id,
          RHS.low_estimate AS low_estimate,
          RHS.high_estimate AS high_estimate,
          RHS.type AS TYPE,
          RHS.market_id AS market_id,
          RHS.year AS YEAR
   FROM df_film AS LHS
   INNER JOIN df_film_market_estimation AS RHS ON (LHS.film_id = RHS.film_id))
ORDER BY title;",1,6,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/ship_mission/0002,df_ship,"SELECT name
FROM df_ship
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/ship_mission/0008,"summarise(input0, 'n = n()', ""'nationality','type'""), limit(line0, 'desc(n)')","SELECT TYPE
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT nationality,
                TYPE,
                COUNT() AS n
         FROM df_ship
         GROUP BY nationality,
                  TYPE)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/ship_mission/0003,df_ship,"SELECT TYPE,
       nationality
FROM df_ship
ORDER BY TYPE;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/ship_mission/0013,"filter(input1, ""nationality == 'United States'""), semi_join(input0, line0)","SELECT `fate`
FROM
  (SELECT *
   FROM `df_mission` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_ship`
           WHERE (`nationality` = 'United States')) AS RHS
        WHERE (LHS.ship_id = RHS.ship_id) ))
ORDER BY fate;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/ship_mission/0006,"limit(input0, 'name')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_ship
      ORDER BY name)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/ship_mission/0004,"filter(input0, ""nationality != 'United States'"")","SELECT `name`
FROM `df_ship`
WHERE (`nationality` != 'United States')
ORDER BY name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/ship_mission/0012,"filter(input0, 'launched_year >= 1928L'), natural_join(input1, line0)","SELECT name
FROM
  (SELECT LHS.ship_id AS ship_id,
          LHS.name AS name,
          LHS.type AS TYPE,
          LHS.nationality AS nationality,
          LHS.tonnage AS tonnage,
          RHS.mission_id AS mission_id,
          RHS.code AS code,
          RHS.launched_year AS launched_year,
          RHS.location AS LOCATION,
          RHS.speed_knots AS speed_knots,
          RHS.fate AS fate
   FROM df_ship AS LHS
   INNER JOIN
     (SELECT *
      FROM df_mission
      WHERE (launched_year >= 1928)) AS RHS ON (LHS.ship_id = RHS.ship_id))
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/ship_mission/0015,"filter(input0, 'tonnage > 6000L & tonnage > 4000L')","SELECT TYPE
FROM df_ship
WHERE (tonnage > 6000
       AND tonnage > 4000)
ORDER BY TYPE;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/ship_mission/0005,"filter(input0, ""nationality == 'United States' | nationality == 'United Kingdom'"")","SELECT `name`
FROM `df_ship`
WHERE (`nationality` = 'United States'
       OR `nationality` = 'United Kingdom')
ORDER BY name;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/ship_mission/0007,"summarise(input0, 'n = n()', ""'type'"")","SELECT TYPE,
       n AS count___
FROM
  (SELECT TYPE,
          COUNT() AS n
   FROM df_ship
   GROUP BY TYPE)
ORDER BY TYPE;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/ship_mission/0001,"summarise(input0, 'n = n()', ""'name'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT name,
          COUNT() AS n
   FROM df_ship
   GROUP BY name)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/ship_mission/0014,"anti_join(input1, input0, '')","SELECT name
FROM
  (SELECT *
   FROM df_ship AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_mission AS RHS
        WHERE (LHS.ship_id = RHS.ship_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/ship_mission/0009,"summarise(input0, 'n = n()', ""'name','nationality'""), semi_join(line0, input0)","SELECT DISTINCT nationality
FROM
  (SELECT *
   FROM
     (SELECT name,
             nationality,
             COUNT() AS n
      FROM df_ship
      GROUP BY name,
               nationality) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_ship AS RHS
        WHERE (LHS.name = RHS.name
               AND LHS.nationality = RHS.nationality) ))
ORDER BY nationality;",2,12,4,1,4,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
spider/ship_mission/0011,"semi_join(input0, input1), natural_join3(input0, input1, line0)","SELECT code,
       fate,
       name
FROM
  (SELECT LHS.mission_id AS mission_id,
          LHS.ship_id AS ship_id,
          LHS.code AS code,
          LHS.launched_year AS launched_year,
          LHS.location AS LOCATION,
          LHS.speed_knots AS speed_knots,
          LHS.fate AS fate,
          LHS.name AS name,
          LHS.type AS TYPE,
          LHS.nationality AS nationality,
          LHS.tonnage AS tonnage
   FROM
     (SELECT LHS.mission_id AS mission_id,
             LHS.ship_id AS ship_id,
             LHS.code AS code,
             LHS.launched_year AS launched_year,
             LHS.location AS LOCATION,
             LHS.speed_knots AS speed_knots,
             LHS.fate AS fate,
             RHS.name AS name,
             RHS.type AS TYPE,
             RHS.nationality AS nationality,
             RHS.tonnage AS tonnage
      FROM df_mission AS LHS
      INNER JOIN df_ship AS RHS ON (LHS.ship_id = RHS.ship_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_mission AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM df_ship AS RHS
           WHERE (LHS.ship_id = RHS.ship_id) )) AS RHS ON (LHS.mission_id = RHS.mission_id
                                                           AND LHS.ship_id = RHS.ship_id
                                                           AND LHS.code = RHS.code
                                                           AND LHS.launched_year = RHS.launched_year
                                                           AND LHS.location = RHS.location
                                                           AND LHS.speed_knots = RHS.speed_knots
                                                           AND LHS.fate = RHS.fate))
ORDER BY code;",2,15,5,0,5,2,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0
spider/ship_mission/0010,"summarise(input0, 'meantonnage = mean(tonnage, na.rm = T)', ""'type'"")","SELECT TYPE,
       meantonnage AS avg_tonnage_
FROM
  (SELECT TYPE,
          AVG(tonnage) AS meantonnage
   FROM df_ship
   GROUP BY TYPE)
ORDER BY TYPE;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/product_catalog/0002,"mutate(input0, 'n = n()'), filter(line0, 'n >= 3L')","SELECT DISTINCT attribute_data_type
FROM
  (SELECT attribute_id,
          attribute_name,
          attribute_data_type,
          COUNT(*) OVER () AS n
   FROM df_attribute_definitions)
WHERE (n >= 3)
ORDER BY attribute_data_type;",2,7,2,1,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/product_catalog/0017,"filter(input1, 'attribute_value == 0L'), natural_join(input0, line0)","SELECT attribute_name,
       attribute_id
FROM
  (SELECT LHS.attribute_id AS attribute_id,
          LHS.attribute_name AS attribute_name,
          LHS.attribute_data_type AS attribute_data_type,
          RHS.catalog_entry_id AS catalog_entry_id,
          RHS.catalog_level_number AS catalog_level_number,
          RHS.attribute_value AS attribute_value
   FROM df_attribute_definitions AS LHS
   INNER JOIN
     (SELECT *
      FROM df_catalog_contents_additional_attributes
      WHERE (attribute_value = 0)) AS RHS ON (LHS.attribute_id = RHS.attribute_id))
ORDER BY attribute_name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/product_catalog/0008,"filter(input1, 'attribute_value != 1L'), summarise(input0, 'n = n()', ""'catalog_entry_id','catalog_entry_name'""), left_join(line0, line1)","SELECT catalog_entry_name
FROM
  (SELECT LHS.catalog_entry_id AS catalog_entry_id,
          LHS.catalog_level_number AS catalog_level_number,
          LHS.attribute_id AS attribute_id,
          LHS.attribute_value AS attribute_value,
          RHS.catalog_entry_name AS catalog_entry_name,
          RHS.n AS n
   FROM
     (SELECT *
      FROM df_catalog_contents_additional_attributes
      WHERE (attribute_value != 1)) AS LHS
   LEFT JOIN
     (SELECT catalog_entry_id,
             catalog_entry_name,
             COUNT() AS n
      FROM df_catalog_contents
      GROUP BY catalog_entry_id,
               catalog_entry_name) AS RHS ON (LHS.catalog_entry_id = RHS.catalog_entry_id))
ORDER BY catalog_entry_name;",3,10,4,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/product_catalog/0003,"filter(input0, ""attribute_name != 'Green'""), intersect(line0, input0, 'attribute_data_type')","SELECT `attribute_data_type`
FROM
  (SELECT `attribute_data_type`
   FROM `df_attribute_definitions`
   WHERE (`attribute_name` != 'Green') INTERSECT
     SELECT attribute_data_type
     FROM df_attribute_definitions)
ORDER BY attribute_data_type;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/product_catalog/0013,"limit(input0, 'desc(height)')","SELECT catalog_entry_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_catalog_contents
      ORDER BY height DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/product_catalog/0006,"summarise(input0, 'n = n()', ""'catalog_publisher','date_of_latest_revision'""), limit(line0, 'desc(date_of_latest_revision)')","SELECT catalog_publisher
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT catalog_publisher,
                date_of_latest_revision,
                COUNT() AS n
         FROM df_catalogs
         GROUP BY catalog_publisher,
                  date_of_latest_revision)
      ORDER BY date_of_latest_revision DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/product_catalog/0004,"filter(input0, 'catalog_level_number <= 5L | catalog_level_number > 10L'), anti_join(input0, line0, ""'catalog_level_name','catalog_level_number'"")","SELECT catalog_level_name,
       catalog_level_number
FROM
  (SELECT *
   FROM df_catalog_structure AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_catalog_structure
           WHERE (catalog_level_number <= 5
                  OR catalog_level_number > 10)) AS RHS
        WHERE (LHS.catalog_level_name = RHS.catalog_level_name
               AND LHS.catalog_level_number = RHS.catalog_level_number) ))
ORDER BY catalog_level_name;",2,14,4,0,4,0,3,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/product_catalog/0012,"limit(input0, 'desc(height)')","SELECT catalog_entry_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_catalog_contents
      ORDER BY height DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/product_catalog/0015,"inner_join(input1, input0, ""'catalog_entry_id'""), filter(line0, 'catalog_level_number == 8L')","SELECT catalog_entry_name
FROM
  (SELECT LHS.catalog_entry_id AS catalog_entry_id,
          LHS.catalog_level_number AS catalog_level_number,
          LHS.attribute_id AS attribute_id,
          LHS.attribute_value AS attribute_value,
          RHS.catalog_level_number AS catalog_level_number_other,
          RHS.parent_entry_id AS parent_entry_id,
          RHS.previous_entry_id AS previous_entry_id,
          RHS.next_entry_id AS next_entry_id,
          RHS.catalog_entry_name AS catalog_entry_name,
          RHS.product_stock_number AS product_stock_number,
          RHS.price_in_dollars AS price_in_dollars,
          RHS.price_in_euros AS price_in_euros,
          RHS.price_in_pounds AS price_in_pounds,
          RHS.capacity AS capacity,
          RHS.length AS LENGTH,
          RHS.height AS height,
          RHS.width AS width
   FROM df_catalog_contents_additional_attributes AS LHS
   INNER JOIN df_catalog_contents AS RHS ON (LHS.catalog_entry_id = RHS.catalog_entry_id))
WHERE (catalog_level_number = 8)
ORDER BY catalog_entry_name;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/product_catalog/0016,"filter(input0, 'width == 3L | width != 5L'), natural_join(input0, line0), cross_join(line1, line0, 'width == length.other')","SELECT DISTINCT catalog_entry_name
FROM
  (SELECT LHS.catalog_entry_id AS catalog_entry_id,
          LHS.catalog_level_number AS catalog_level_number,
          LHS.parent_entry_id AS parent_entry_id,
          LHS.previous_entry_id AS previous_entry_id,
          LHS.next_entry_id AS next_entry_id,
          LHS.catalog_entry_name AS catalog_entry_name,
          LHS.product_stock_number AS product_stock_number,
          LHS.price_in_dollars AS price_in_dollars,
          LHS.price_in_euros AS price_in_euros,
          LHS.price_in_pounds AS price_in_pounds,
          LHS.capacity AS capacity,
          LHS.length AS LENGTH,
          LHS.height AS height,
          LHS.width AS width,
          RHS.catalog_entry_id AS catalog_entry_id_other,
          RHS.catalog_level_number AS catalog_level_number_other,
          RHS.parent_entry_id AS parent_entry_id_other,
          RHS.previous_entry_id AS previous_entry_id_other,
          RHS.next_entry_id AS next_entry_id_other,
          RHS.catalog_entry_name AS catalog_entry_name_other,
          RHS.product_stock_number AS product_stock_number_other,
          RHS.price_in_dollars AS price_in_dollars_other,
          RHS.price_in_euros AS price_in_euros_other,
          RHS.price_in_pounds AS price_in_pounds_other,
          RHS.capacity AS capacity_other,
          RHS.length AS length_other,
          RHS.height AS height_other,
          RHS.width AS width_other
   FROM
     (SELECT LHS.catalog_entry_id AS catalog_entry_id,
             LHS.catalog_level_number AS catalog_level_number,
             LHS.parent_entry_id AS parent_entry_id,
             LHS.previous_entry_id AS previous_entry_id,
             LHS.next_entry_id AS next_entry_id,
             LHS.catalog_entry_name AS catalog_entry_name,
             LHS.product_stock_number AS product_stock_number,
             LHS.price_in_dollars AS price_in_dollars,
             LHS.price_in_euros AS price_in_euros,
             LHS.price_in_pounds AS price_in_pounds,
             LHS.capacity AS capacity,
             LHS.length AS LENGTH,
             LHS.height AS height,
             LHS.width AS width
      FROM df_catalog_contents AS LHS
      INNER JOIN
        (SELECT *
         FROM df_catalog_contents
         WHERE (width = 3
                OR width != 5)) AS RHS ON (LHS.catalog_entry_id = RHS.catalog_entry_id
                                           AND LHS.catalog_level_number = RHS.catalog_level_number
                                           AND LHS.parent_entry_id = RHS.parent_entry_id
                                           AND LHS.previous_entry_id = RHS.previous_entry_id
                                           AND LHS.next_entry_id = RHS.next_entry_id
                                           AND LHS.catalog_entry_name = RHS.catalog_entry_name
                                           AND LHS.product_stock_number = RHS.product_stock_number
                                           AND LHS.price_in_dollars = RHS.price_in_dollars
                                           AND LHS.price_in_euros = RHS.price_in_euros
                                           AND LHS.price_in_pounds = RHS.price_in_pounds
                                           AND LHS.capacity = RHS.capacity
                                           AND LHS.length = RHS.length
                                           AND LHS.height = RHS.height
                                           AND LHS.width = RHS.width)) AS LHS
   CROSS JOIN
     (SELECT *
      FROM df_catalog_contents
      WHERE (width = 3
             OR width != 5)) AS RHS)
WHERE (width = length_other)
ORDER BY catalog_entry_name;",3,17,5,1,5,1,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0
spider/product_catalog/0018,"filter(input0, 'price_in_dollars > 700')","SELECT catalog_entry_name,
       capacity
FROM df_catalog_contents
WHERE (price_in_dollars > 700.0)
ORDER BY catalog_entry_name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/product_catalog/0020,"summarise(input0, 'n = n()', ""'catalog_entry_name','height'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT catalog_entry_name,
          height,
          COUNT() AS n
   FROM df_catalog_contents
   GROUP BY catalog_entry_name,
            height)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/product_catalog/0019,"mutate(input0, 'n = n()'), filter(line0, 'n >= 1L')","SELECT DISTINCT date_of_latest_revision
FROM
  (SELECT catalog_id,
          CATALOG_NAME,
          catalog_publisher,
          date_of_publication,
          date_of_latest_revision,
          COUNT(*) OVER () AS n
   FROM df_catalogs)
WHERE (n >= 1)
ORDER BY date_of_latest_revision;",2,7,2,1,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/product_catalog/0007,"filter(input1, 'catalog_level_number >= 5L'), semi_join(input0, line0)","SELECT CATALOG_NAME,
       date_of_publication
FROM
  (SELECT *
   FROM df_catalogs AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_catalog_structure
           WHERE (catalog_level_number >= 5)) AS RHS
        WHERE (LHS.catalog_id = RHS.catalog_id) ))
ORDER BY CATALOG_NAME;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/product_catalog/0021,"filter(input0, 'next_entry_id > 8L')","SELECT catalog_entry_name
FROM df_catalog_contents
WHERE (next_entry_id > 8)
ORDER BY catalog_entry_name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/product_catalog/0001,df_catalog_contents,"SELECT catalog_entry_name
FROM df_catalog_contents
ORDER BY catalog_entry_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/product_catalog/0014,"limit(input0, 'height')","SELECT catalog_entry_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_catalog_contents
      ORDER BY height)
   LIMIT 2);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/product_catalog/0009,"limit(input0, 'desc(next_entry_id)')","SELECT catalog_entry_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_catalog_contents
      ORDER BY next_entry_id DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/product_catalog/0011,"mutate(input0, 'minprice_in_euros = min(price_in_euros)'), mutate(line0, 'meanprice_in_euros = mean(price_in_euros, na.rm = T)')","SELECT DISTINCT AVG(price_in_euros) OVER () AS avg_price_in_euros_,
                                         minprice_in_euros AS min_price_in_euros_
FROM
  (SELECT catalog_entry_id,
          catalog_level_number,
          parent_entry_id,
          previous_entry_id,
          next_entry_id,
          catalog_entry_name,
          product_stock_number,
          price_in_dollars,
          price_in_euros,
          price_in_pounds,
          capacity,
          LENGTH,
          height,
          width,
          MIN(price_in_euros) OVER () AS minprice_in_euros
   FROM df_catalog_contents)
ORDER BY avg_price_in_euros_;",2,7,2,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0
spider/product_catalog/0010,"natural_join(input0, input1), limit(line0, 'desc(catalog_entry_id)')","SELECT catalog_level_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.catalog_level_number AS catalog_level_number,
                LHS.catalog_id AS catalog_id,
                LHS.catalog_level_name AS catalog_level_name,
                RHS.catalog_entry_id AS catalog_entry_id,
                RHS.parent_entry_id AS parent_entry_id,
                RHS.previous_entry_id AS previous_entry_id,
                RHS.next_entry_id AS next_entry_id,
                RHS.catalog_entry_name AS catalog_entry_name,
                RHS.product_stock_number AS product_stock_number,
                RHS.price_in_dollars AS price_in_dollars,
                RHS.price_in_euros AS price_in_euros,
                RHS.price_in_pounds AS price_in_pounds,
                RHS.capacity AS capacity,
                RHS.length AS LENGTH,
                RHS.height AS height,
                RHS.width AS width
         FROM df_catalog_structure AS LHS
         INNER JOIN df_catalog_contents AS RHS ON (LHS.catalog_level_number = RHS.catalog_level_number))
      ORDER BY catalog_entry_id DESC)
   LIMIT 1);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/news_report/0002,df_journalist,"SELECT name
FROM df_journalist
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/news_report/0008,"summarise(input0, 'n = n()', ""'name','nationality'""), limit(line0, 'desc(n)')","SELECT nationality
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT name,
                nationality,
                COUNT() AS n
         FROM df_journalist
         GROUP BY name,
                  nationality)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/news_report/0003,df_journalist,"SELECT nationality,
       age
FROM df_journalist
ORDER BY nationality;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/news_report/0013,"natural_join(input1, input2), summarise(line0, 'n = n()', ""'name','years_working'""), anti_join(line1, input0, ""'name'"")","SELECT name,
       n AS count___
FROM
  (SELECT *
   FROM
     (SELECT name,
             years_working,
             COUNT() AS n
      FROM
        (SELECT LHS.journalist_id AS journalist_id,
                LHS.name AS name,
                LHS.nationality AS nationality,
                LHS.age AS age,
                LHS.years_working AS years_working,
                RHS.event_id AS event_id,
                RHS.work_type AS work_type
         FROM df_journalist AS LHS
         INNER JOIN df_news_report AS RHS ON (LHS.journalist_id = RHS.journalist_id))
      GROUP BY name,
               years_working) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_event AS RHS
        WHERE (LHS.name = RHS.name) ))
ORDER BY name;",3,15,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0
spider/news_report/0006,"inner_join(input0, input0, ""'journalist_id' = 'years_working','name' = 'name'"")","SELECT nationality
FROM
  (SELECT LHS.journalist_id AS journalist_id,
          LHS.name AS name,
          LHS.nationality AS nationality,
          LHS.age AS age,
          LHS.years_working AS years_working,
          RHS.journalist_id AS journalist_id_other,
          RHS.nationality AS nationality_other,
          RHS.age AS age_other
   FROM df_journalist AS LHS
   INNER JOIN df_journalist AS RHS ON (LHS.journalist_id = RHS.years_working
                                       AND LHS.name = RHS.name))
ORDER BY nationality;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/news_report/0004,"filter(input0, ""nationality == 'England' | nationality == 'Wales'"")","SELECT `name`
FROM `df_journalist`
WHERE (`nationality` = 'England'
       OR `nationality` = 'Wales')
ORDER BY name;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/news_report/0012,"natural_join(input1, input2), inner_join(line0, input0, ""'event_id'"")","SELECT name AS name___1,
       name_other AS name___2
FROM
  (SELECT LHS.journalist_id AS journalist_id,
          LHS.name AS name,
          LHS.nationality AS nationality,
          LHS.age AS age,
          LHS.years_working AS years_working,
          LHS.event_id AS event_id,
          LHS.work_type AS work_type,
          RHS.date AS date,
          RHS.venue AS venue,
          RHS.name AS name_other,
          RHS.event_attendance AS event_attendance
   FROM
     (SELECT LHS.journalist_id AS journalist_id,
             LHS.name AS name,
             LHS.nationality AS nationality,
             LHS.age AS age,
             LHS.years_working AS years_working,
             RHS.event_id AS event_id,
             RHS.work_type AS work_type
      FROM df_journalist AS LHS
      INNER JOIN df_news_report AS RHS ON (LHS.journalist_id = RHS.journalist_id)) AS LHS
   INNER JOIN df_event AS RHS ON (LHS.event_id = RHS.event_id))
ORDER BY name___1;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0
spider/news_report/0015,"anti_join(input0, input1, ""'journalist_id'"")","SELECT name
FROM
  (SELECT *
   FROM df_journalist AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_news_report AS RHS
        WHERE (LHS.journalist_id = RHS.journalist_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/news_report/0005,"mutate(input0, 'meanyears_working = mean(years_working, na.rm = T)')","SELECT DISTINCT AVG(years_working) OVER () AS avg_years_working_
FROM df_journalist
ORDER BY avg_years_working_;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/news_report/0016,"summarise(input0, 'meanevent_attendance = mean(event_attendance, na.rm = T)', ''), mutate(input0, 'event_attendance = max(event_attendance)'), natural_join(line0, line1)","SELECT DISTINCT meanevent_attendance AS avg_event_attendance_,
                event_attendance AS max_event_attendance_
FROM
  (SELECT LHS.meanevent_attendance AS meanevent_attendance,
          RHS.event_id AS event_id,
          RHS.date AS date,
          RHS.venue AS venue,
          RHS.name AS name,
          RHS.event_attendance AS event_attendance
   FROM
     (SELECT AVG(event_attendance) AS meanevent_attendance
      FROM df_event) AS LHS
   CROSS JOIN
     (SELECT event_id, date, venue,
                             name,
                             MAX(event_attendance) OVER () AS event_attendance
      FROM df_event) AS RHS)
ORDER BY avg_event_attendance_;",3,10,4,1,4,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0
spider/news_report/0018,"limit(input0, 'desc(event_attendance)')","SELECT venue,
       name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_event
      ORDER BY event_attendance DESC)
   LIMIT 2);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/news_report/0007,"summarise(input0, 'n = n()', ""'journalist_id','nationality'""), summarise(line0, 'n = n()', ""'nationality'"")","SELECT nationality,
       n AS count___
FROM
  (SELECT nationality,
          COUNT() AS n
   FROM
     (SELECT journalist_id,
             nationality,
             COUNT() AS n
      FROM df_journalist
      GROUP BY journalist_id,
               nationality)
   GROUP BY nationality)
ORDER BY nationality;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/news_report/0001,"summarise(input0, 'n = n()', ""'age','years_working'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT age,
             years_working,
             COUNT() AS n
      FROM df_journalist
      GROUP BY age,
               years_working))
ORDER BY count___;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/news_report/0014,"summarise(input0, 'n = n()', ""'event_id','venue'""), natural_join3(input1, input2, line0), limit(line1, 'desc(venue)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.journalist_id AS journalist_id,
                LHS.name AS name,
                LHS.nationality AS nationality,
                LHS.age AS age,
                LHS.years_working AS years_working,
                LHS.event_id AS event_id,
                LHS.work_type AS work_type,
                RHS.venue AS venue,
                RHS.n AS n
         FROM
           (SELECT LHS.journalist_id AS journalist_id,
                   LHS.name AS name,
                   LHS.nationality AS nationality,
                   LHS.age AS age,
                   LHS.years_working AS years_working,
                   RHS.event_id AS event_id,
                   RHS.work_type AS work_type
            FROM df_journalist AS LHS
            INNER JOIN df_news_report AS RHS ON (LHS.journalist_id = RHS.journalist_id)) AS LHS
         INNER JOIN
           (SELECT event_id,
                   venue,
                   COUNT() AS n
            FROM df_event
            GROUP BY event_id,
                     venue) AS RHS ON (LHS.event_id = RHS.event_id))
      ORDER BY venue DESC)
   LIMIT 1);",2,16,6,0,6,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
spider/news_report/0009,"filter(input0, 'years_working != 10L & years_working < 3L')","SELECT nationality
FROM df_journalist
WHERE (years_working != 10
       AND years_working < 3)
ORDER BY nationality;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/news_report/0011,"natural_join(input1, input2), inner_join(line0, input0, ""'event_id'"")","SELECT name, date
FROM
  (SELECT LHS.journalist_id AS journalist_id,
          LHS.name AS name,
          LHS.nationality AS nationality,
          LHS.age AS age,
          LHS.years_working AS years_working,
          LHS.event_id AS event_id,
          LHS.work_type AS work_type,
          RHS.date AS date,
          RHS.venue AS venue,
          RHS.name AS name_other,
          RHS.event_attendance AS event_attendance
   FROM
     (SELECT LHS.journalist_id AS journalist_id,
             LHS.name AS name,
             LHS.nationality AS nationality,
             LHS.age AS age,
             LHS.years_working AS years_working,
             RHS.event_id AS event_id,
             RHS.work_type AS work_type
      FROM df_journalist AS LHS
      INNER JOIN df_news_report AS RHS ON (LHS.journalist_id = RHS.journalist_id)) AS LHS
   INNER JOIN df_event AS RHS ON (LHS.event_id = RHS.event_id))
ORDER BY name;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0
spider/railway/0002,df_railway,"SELECT builder
FROM df_railway
ORDER BY builder;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/railway/0017,"anti_join(input0, input1, '')","SELECT objectnumber
FROM
  (SELECT *
   FROM df_railway AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_train AS RHS
        WHERE (LHS.railway_id = RHS.railway_id) ))
ORDER BY objectnumber;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/railway/0008,"limit(input0, 'desc(name)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_manager
      ORDER BY name DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/railway/0013,"summarise(input0, 'n = n()', ""'builder'"")","SELECT builder,
       n AS count___
FROM
  (SELECT builder,
          COUNT() AS n
   FROM df_railway
   GROUP BY builder)
ORDER BY builder;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/railway/0006,df_manager,"SELECT name
FROM df_manager
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/railway/0015,"summarise(input0, 'n = n()', ""'location'"")","SELECT LOCATION,
       n AS count___
FROM
  (SELECT LOCATION,
          COUNT() AS n
   FROM df_railway
   GROUP BY LOCATION)
ORDER BY LOCATION;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/railway/0005,"mutate(input0, 'meanage = mean(age, na.rm = T)')","SELECT DISTINCT AVG(age) OVER () AS avg_age_
FROM df_manager
ORDER BY avg_age_;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/railway/0016,"summarise(input0, 'n = n()', ""'location'""), filter(line0, 'n > 1L'), intersect(input0, line1, 'location')","SELECT LOCATION
FROM
  (SELECT LOCATION
   FROM df_railway INTERSECT SELECT LOCATION
   FROM
     (SELECT LOCATION,
             COUNT() AS n
      FROM df_railway
      GROUP BY LOCATION)
   WHERE (n > 1))
ORDER BY LOCATION;",3,10,4,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0
spider/railway/0018,"filter(input0, 'age == 50L | age == 46L'), cross_join(input0, line0, 'age < age.other')","SELECT country
FROM
  (SELECT LHS.manager_id AS manager_id,
          LHS.name AS name,
          LHS.country AS country,
          LHS.working_year_starts AS working_year_starts,
          LHS.age AS age,
          LHS.level AS LEVEL,
          RHS.manager_id AS manager_id_other,
          RHS.name AS name_other,
          RHS.country AS country_other,
          RHS.working_year_starts AS working_year_starts_other,
          RHS.age AS age_other,
          RHS.level AS level_other
   FROM df_manager AS LHS
   CROSS JOIN
     (SELECT *
      FROM df_manager
      WHERE (age = 50
             OR age = 46)) AS RHS)
WHERE (age < age_other)
ORDER BY country;",2,9,3,0,3,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
spider/railway/0020,df_manager,"SELECT working_year_starts
FROM df_manager
ORDER BY working_year_starts;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/railway/0019,df_manager,"SELECT DISTINCT country
FROM df_manager
ORDER BY country;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/railway/0021,"cross_join(input0, input0, 'age == age.other'), filter(line0, 'age > 50L | age < 46L')","SELECT country
FROM
  (SELECT *
   FROM
     (SELECT LHS.manager_id AS manager_id,
             LHS.name AS name,
             LHS.country AS country,
             LHS.working_year_starts AS working_year_starts,
             LHS.age AS age,
             LHS.level AS LEVEL,
             RHS.manager_id AS manager_id_other,
             RHS.name AS name_other,
             RHS.country AS country_other,
             RHS.working_year_starts AS working_year_starts_other,
             RHS.age AS age_other,
             RHS.level AS level_other
      FROM df_manager AS LHS
      CROSS JOIN df_manager AS RHS)
   WHERE (age = age_other))
WHERE (age > 50
       OR age < 46)
ORDER BY country;",2,9,3,0,3,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
spider/railway/0001,"summarise(input0, 'n = n()', ""'objectnumber','railway_id'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT objectnumber,
          railway_id,
          COUNT() AS n
   FROM df_railway
   GROUP BY objectnumber,
            railway_id)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/railway/0014,"summarise(input0, 'n = n()', ""'builder'""), limit(line0, 'desc(n)')","SELECT builder
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT builder,
                COUNT() AS n
         FROM df_railway
         GROUP BY builder)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/railway/0009,"natural_join(input0, input1), left_join(input1, line0)","SELECT name,
       LOCATION
FROM
  (SELECT LHS.train_id AS train_id,
          LHS.train_num AS train_num,
          LHS.name AS name,
          LHS.
   FROM AS
   FROM,
           LHS.arrival AS arrival,
           LHS.railway_id AS railway_id,
           RHS.railway AS railway,
           RHS.builder AS builder,
           RHS.built AS built,
           RHS.wheels AS wheels,
           RHS.location AS LOCATION,
           RHS.objectnumber AS objectnumber
   FROM df_train AS LHS
   LEFT JOIN
     (SELECT LHS.railway_id AS railway_id,
             LHS.railway AS railway,
             LHS.builder AS builder,
             LHS.built AS built,
             LHS.wheels AS wheels,
             LHS.location AS LOCATION,
             LHS.objectnumber AS objectnumber,
             RHS.train_id AS train_id,
             RHS.train_num AS train_num,
             RHS.name AS name,
             RHS.
      FROM AS
      FROM,
              RHS.arrival AS arrival
      FROM df_railway AS LHS
      INNER JOIN df_train AS RHS ON (LHS.railway_id = RHS.railway_id)) AS RHS ON (LHS.train_id = RHS.train_id
                                                                                  AND LHS.train_num = RHS.train_num
                                                                                  AND LHS.name = RHS.name
                                                                                  AND LHS.
                                                                                  FROM = RHS.
                                                                                  FROM
                                                                                  AND LHS.arrival = RHS.arrival
                                                                                  AND LHS.railway_id = RHS.railway_id))
ORDER BY name;",2,14,3,0,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
spider/railway/0011,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'location','railway_id'""), filter(line1, 'n > 1L')","SELECT railway_id,
       LOCATION
FROM
  (SELECT LOCATION,
          railway_id,
          COUNT() AS n
   FROM
     (SELECT LHS.railway_id AS railway_id,
             LHS.railway AS railway,
             LHS.builder AS builder,
             LHS.built AS built,
             LHS.wheels AS wheels,
             LHS.location AS LOCATION,
             LHS.objectnumber AS objectnumber,
             RHS.train_id AS train_id,
             RHS.train_num AS train_num,
             RHS.name AS name,
             RHS.
      FROM AS
      FROM,
              RHS.arrival AS arrival
      FROM df_railway AS LHS
      INNER JOIN df_train AS RHS ON (LHS.railway_id = RHS.railway_id))
   GROUP BY LOCATION,
            railway_id)
WHERE (n > 1)
ORDER BY railway_id;",3,10,3,0,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/railway/0010,"filter(input1, ""name == 'Andaman Exp'""), semi_join(input0, line0)","SELECT `builder`
FROM
  (SELECT *
   FROM `df_railway` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_train`
           WHERE (`name` = 'Andaman Exp')) AS RHS
        WHERE (LHS.railway_id = RHS.railway_id) ))
ORDER BY builder;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/music_1/0042,"summarise(input1, 'n = n()', ""'artist_name','rating'""), left_join(line0, input0), limit(line1, 'artist_name')","SELECT country
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.artist_name AS artist_name,
                LHS.rating AS rating,
                LHS.n AS n,
                RHS.country AS country,
                RHS.gender AS gender,
                RHS.preferred_genre AS preferred_genre
         FROM
           (SELECT artist_name,
                   rating,
                   COUNT() AS n
            FROM df_song
            GROUP BY artist_name,
                     rating) AS LHS
         LEFT JOIN df_artist AS RHS ON (LHS.artist_name = RHS.artist_name))
      ORDER BY artist_name)
   LIMIT 1);",2,12,5,0,5,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
spider/music_1/0033,"natural_join(input0, input1), filter(line0, ""formats == 'mp3' & resolution <= 1000"")","SELECT `song_name`
FROM
  (SELECT `LHS`.`f_id` AS `f_id`,
          `LHS`.`artist_name` AS `artist_name`,
          `LHS`.`file_size` AS `file_size`,
          `LHS`.`duration` AS `duration`,
          `LHS`.`formats` AS `formats`,
          `RHS`.`song_name` AS `song_name`,
          `RHS`.`country` AS `country`,
          `RHS`.`genre_is` AS `genre_is`,
          `RHS`.`rating` AS `rating`,
          `RHS`.`languages` AS `languages`,
          `RHS`.`releasedate` AS `releasedate`,
          `RHS`.`resolution` AS `resolution`
   FROM `df_files` AS `LHS`
   INNER JOIN `df_song` AS `RHS` ON (`LHS`.`f_id` = `RHS`.`f_id`
                                     AND `LHS`.`artist_name` = `RHS`.`artist_name`))
WHERE (`formats` = 'mp3'
       AND resolution <= 1000.0)
ORDER BY song_name;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/music_1/0002,"limit(input0, 'desc(duration)')","SELECT f_id
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_files
      ORDER BY duration DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_1/0017,"summarise(input0, 'n = n()', ""'gender'"")","SELECT n AS count___,
       gender
FROM
  (SELECT gender,
          COUNT() AS n
   FROM df_artist
   GROUP BY gender)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_1/0008,"natural_join(input0, input1), limit(line0, 'desc(rating)')","SELECT artist_name,
       country
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.artist_name AS artist_name,
                LHS.country AS country,
                LHS.gender AS gender,
                LHS.preferred_genre AS preferred_genre,
                RHS.song_name AS song_name,
                RHS.f_id AS f_id,
                RHS.genre_is AS genre_is,
                RHS.rating AS rating,
                RHS.languages AS languages,
                RHS.releasedate AS releasedate,
                RHS.resolution AS resolution
         FROM df_artist AS LHS
         INNER JOIN df_song AS RHS ON (LHS.artist_name = RHS.artist_name
                                       AND LHS.country = RHS.country))
      ORDER BY rating DESC)
   LIMIT 3);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/music_1/0039,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'artist_name','languages'""), filter(line1, ""languages == 'english' | n > 1L"")","SELECT `artist_name`,
       `n` AS `count___`
FROM
  (SELECT `artist_name`,
          `languages`,
          COUNT() AS `n`
   FROM
     (SELECT `LHS`.`artist_name` AS `artist_name`,
             `LHS`.`country` AS `country`,
             `LHS`.`gender` AS `gender`,
             `LHS`.`preferred_genre` AS `preferred_genre`,
             `RHS`.`song_name` AS `song_name`,
             `RHS`.`f_id` AS `f_id`,
             `RHS`.`genre_is` AS `genre_is`,
             `RHS`.`rating` AS `rating`,
             `RHS`.`languages` AS `languages`,
             `RHS`.`releasedate` AS `releasedate`,
             `RHS`.`resolution` AS `resolution`
      FROM `df_artist` AS `LHS`
      INNER JOIN `df_song` AS `RHS` ON (`LHS`.`artist_name` = `RHS`.`artist_name`
                                        AND `LHS`.`country` = `RHS`.`country`))
   GROUP BY `artist_name`,
            `languages`)
WHERE (`languages` = 'english'
       OR n > 1)
ORDER BY artist_name;",3,9,3,0,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/music_1/0038,"natural_join(input0, input1), summarise(line0, 'rating = min(rating)', ""'duration','genre_is'"")","SELECT duration AS min_t1_duration_,
       rating AS min_t2_rating_,
       genre_is
FROM
  (SELECT duration,
          genre_is,
          MIN(rating) AS rating
   FROM
     (SELECT LHS.f_id AS f_id,
             LHS.artist_name AS artist_name,
             LHS.file_size AS file_size,
             LHS.duration AS duration,
             LHS.formats AS formats,
             RHS.song_name AS song_name,
             RHS.country AS country,
             RHS.genre_is AS genre_is,
             RHS.rating AS rating,
             RHS.languages AS languages,
             RHS.releasedate AS releasedate,
             RHS.resolution AS resolution
      FROM df_files AS LHS
      INNER JOIN df_song AS RHS ON (LHS.f_id = RHS.f_id
                                    AND LHS.artist_name = RHS.artist_name))
   GROUP BY duration,
            genre_is)
ORDER BY min_t1_duration_;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/music_1/0003,"filter(input0, ""languages == 'english'"")","SELECT `song_name`
FROM `df_song`
WHERE (`languages` = 'english')
ORDER BY song_name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/music_1/0027,"natural_join(input0, input1), filter(line0, ""formats == 'mp4' | resolution > 720"")","SELECT `f_id`
FROM
  (SELECT `LHS`.`f_id` AS `f_id`,
          `LHS`.`artist_name` AS `artist_name`,
          `LHS`.`file_size` AS `file_size`,
          `LHS`.`duration` AS `duration`,
          `LHS`.`formats` AS `formats`,
          `RHS`.`song_name` AS `song_name`,
          `RHS`.`country` AS `country`,
          `RHS`.`genre_is` AS `genre_is`,
          `RHS`.`rating` AS `rating`,
          `RHS`.`languages` AS `languages`,
          `RHS`.`releasedate` AS `releasedate`,
          `RHS`.`resolution` AS `resolution`
   FROM `df_files` AS `LHS`
   INNER JOIN `df_song` AS `RHS` ON (`LHS`.`f_id` = `RHS`.`f_id`
                                     AND `LHS`.`artist_name` = `RHS`.`artist_name`))
WHERE (`formats` = 'mp4'
       OR resolution > 720.0)
ORDER BY f_id;",2,7,2,0,2,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/music_1/0048,"filter(input1, ""genre_is == 'pop'""), semi_join(input0, line0)","SELECT `duration`,
       `file_size`,
       `formats`
FROM
  (SELECT *
   FROM `df_files` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_song`
           WHERE (`genre_is` = 'pop')) AS RHS
        WHERE (LHS.f_id = RHS.f_id
               AND LHS.artist_name = RHS.artist_name) ))
ORDER BY duration;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/music_1/0022,"mutate(input0, 'maxrating = max(rating)'), filter(line0, ""genre_is == 'blues'""), cross_join(line1, line0, 'rating > rating.other & rating.other <= maxrating.other')","SELECT `song_name_other` AS `song_name`
FROM
  (SELECT `LHS`.`song_name` AS `song_name`,
          `LHS`.`artist_name` AS `artist_name`,
          `LHS`.`country` AS `country`,
          `LHS`.`f_id` AS `f_id`,
          `LHS`.`genre_is` AS `genre_is`,
          `LHS`.`rating` AS `rating`,
          `LHS`.`languages` AS `languages`,
          `LHS`.`releasedate` AS `releasedate`,
          `LHS`.`resolution` AS `resolution`,
          `LHS`.`maxrating` AS `maxrating`,
          `RHS`.`song_name` AS `song_name_other`,
          `RHS`.`artist_name` AS `artist_name_other`,
          `RHS`.`country` AS `country_other`,
          `RHS`.`f_id` AS `f_id_other`,
          `RHS`.`genre_is` AS `genre_is_other`,
          `RHS`.`rating` AS `rating_other`,
          `RHS`.`languages` AS `languages_other`,
          `RHS`.`releasedate` AS `releasedate_other`,
          `RHS`.`resolution` AS `resolution_other`,
          `RHS`.`maxrating` AS `maxrating_other`
   FROM
     (SELECT *
      FROM
        (SELECT `song_name`,
                `artist_name`,
                `country`,
                `f_id`,
                `genre_is`,
                `rating`,
                `languages`,
                `releasedate`,
                `resolution`,
                MAX(`rating`) OVER () AS `maxrating`
         FROM `df_song`)
      WHERE (`genre_is` = 'blues')) AS LHS
   CROSS JOIN
     (SELECT song_name,
             artist_name,
             country,
             f_id,
             genre_is,
             rating,
             languages,
             releasedate,
             resolution,
             MAX(rating) OVER () AS maxrating
      FROM df_song) AS RHS)
WHERE (rating > rating_other
       AND rating_other <= maxrating_other)
ORDER BY song_name;",3,14,5,0,5,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0
spider/music_1/0013,"filter(input1, ""country == 'UK' & languages == 'english'""), semi_join(input0, line0)","SELECT `artist_name`
FROM
  (SELECT *
   FROM `df_artist` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_song`
           WHERE (`country` = 'UK'
                  AND `languages` = 'english')) AS RHS
        WHERE (LHS.artist_name = RHS.artist_name
               AND LHS.country = RHS.country) ))
ORDER BY artist_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/music_1/0006,"filter(input1, 'resolution >= 800'), anti_join(input0, line0, ""'artist_name','f_id'"")","SELECT file_size,
       formats
FROM
  (SELECT *
   FROM df_files AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_song
           WHERE (resolution >= 800.0)) AS RHS
        WHERE (LHS.artist_name = RHS.artist_name
               AND LHS.f_id = RHS.f_id) ))
ORDER BY file_size;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/music_1/0004,"filter(input0, ""formats == 'mp3'"")","SELECT `f_id`
FROM `df_files`
WHERE (`formats` = 'mp3')
ORDER BY f_id;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/music_1/0012,"summarise(input0, 'n = n()', ""'duration','formats'""), limit(line0, 'desc(formats)')","SELECT formats
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT duration,
                formats,
                COUNT() AS n
         FROM df_files
         GROUP BY duration,
                  formats)
      ORDER BY formats DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_1/0026,df_song,"SELECT song_name
FROM df_song
ORDER BY song_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_1/0015,"natural_join(input0, input1), filter(line0, ""gender == 'Female' & languages == 'bangla'"")","SELECT `country`
FROM
  (SELECT `LHS`.`artist_name` AS `artist_name`,
          `LHS`.`country` AS `country`,
          `LHS`.`gender` AS `gender`,
          `LHS`.`preferred_genre` AS `preferred_genre`,
          `RHS`.`song_name` AS `song_name`,
          `RHS`.`f_id` AS `f_id`,
          `RHS`.`genre_is` AS `genre_is`,
          `RHS`.`rating` AS `rating`,
          `RHS`.`languages` AS `languages`,
          `RHS`.`releasedate` AS `releasedate`,
          `RHS`.`resolution` AS `resolution`
   FROM `df_artist` AS `LHS`
   INNER JOIN `df_song` AS `RHS` ON (`LHS`.`artist_name` = `RHS`.`artist_name`
                                     AND `LHS`.`country` = `RHS`.`country`))
WHERE (`gender` = 'Female'
       AND `languages` = 'bangla')
ORDER BY country;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/music_1/0005,"filter(input1, 'rating > 9'), natural_join(input0, line0)","SELECT artist_name,
       country
FROM
  (SELECT LHS.artist_name AS artist_name,
          LHS.country AS country,
          LHS.gender AS gender,
          LHS.preferred_genre AS preferred_genre,
          RHS.song_name AS song_name,
          RHS.f_id AS f_id,
          RHS.genre_is AS genre_is,
          RHS.rating AS rating,
          RHS.languages AS languages,
          RHS.releasedate AS releasedate,
          RHS.resolution AS resolution
   FROM df_artist AS LHS
   INNER JOIN
     (SELECT *
      FROM df_song
      WHERE (rating > 9.0)) AS RHS ON (LHS.artist_name = RHS.artist_name
                                       AND LHS.country = RHS.country))
ORDER BY artist_name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/music_1/0050,"semi_join(input1, input0), filter(line0, ""country == 'Bangladesh' & rating <= 7"")","SELECT `artist_name`
FROM
  (SELECT *
   FROM `df_song` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM `df_artist` AS `RHS`
        WHERE (`LHS`.`artist_name` = `RHS`.`artist_name`
               AND `LHS`.`country` = `RHS`.`country`) ))
WHERE (`country` = 'Bangladesh'
       AND rating <= 7.0)
ORDER BY artist_name;",2,10,3,0,3,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/music_1/0032,"filter(input0, ""genre_is == 'modern' | languages == 'english'"")","SELECT `song_name`
FROM `df_song`
WHERE (`genre_is` = 'modern'
       OR `languages` = 'english')
ORDER BY song_name;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/music_1/0045,"filter(input0, ""genre_is == 'modern'""), summarise(line0, 'meanresolution = mean(resolution, na.rm = T)', ""'genre_is','resolution'""), cross_join(line1, input0, 'resolution < meanresolution | meanresolution < resolution.other')","SELECT `f_id`
FROM
  (SELECT `LHS`.`genre_is` AS `genre_is`,
          `LHS`.`resolution` AS `resolution`,
          `LHS`.`meanresolution` AS `meanresolution`,
          `RHS`.`song_name` AS `song_name`,
          `RHS`.`artist_name` AS `artist_name`,
          `RHS`.`country` AS `country`,
          `RHS`.`f_id` AS `f_id`,
          `RHS`.`genre_is` AS `genre_is_other`,
          `RHS`.`rating` AS `rating`,
          `RHS`.`languages` AS `languages`,
          `RHS`.`releasedate` AS `releasedate`,
          `RHS`.`resolution` AS `resolution_other`
   FROM
     (SELECT `genre_is`,
             `resolution`,
             AVG(`resolution`) AS `meanresolution`
      FROM `df_song`
      WHERE (`genre_is` = 'modern')
      GROUP BY genre_is,
               resolution) AS LHS
   CROSS JOIN df_song AS RHS)
WHERE (resolution < meanresolution
       OR meanresolution < resolution_other)
ORDER BY f_id;",3,9,3,0,3,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0
spider/music_1/0035,"filter(input0, ""languages == 'bangla'""), mutate(line0, 'meanresolution = mean(resolution, na.rm = T)'), mutate(line1, 'meanrating = mean(rating, na.rm = T)')","SELECT DISTINCT AVG(`rating`) OVER () AS `avg_rating_`,
                                   `meanresolution` AS `avg_resolution_`
FROM
  (SELECT `song_name`,
          `artist_name`,
          `country`,
          `f_id`,
          `genre_is`,
          `rating`,
          `languages`,
          `releasedate`,
          `resolution`,
          AVG(`resolution`) OVER () AS `meanresolution`
   FROM
     (SELECT *
      FROM `df_song`
      WHERE (`languages` = 'bangla')))
ORDER BY avg_rating_;",3,10,3,1,3,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0
spider/music_1/0020,"summarise(input0, 'n = n()', ""'formats'"")","SELECT n AS count___,
       formats
FROM
  (SELECT formats,
          COUNT() AS n
   FROM df_files
   GROUP BY formats)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_1/0019,"natural_join(input0, input1), limit(line0, 'resolution')","SELECT gender,
       artist_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.artist_name AS artist_name,
                LHS.country AS country,
                LHS.gender AS gender,
                LHS.preferred_genre AS preferred_genre,
                RHS.song_name AS song_name,
                RHS.f_id AS f_id,
                RHS.genre_is AS genre_is,
                RHS.rating AS rating,
                RHS.languages AS languages,
                RHS.releasedate AS releasedate,
                RHS.resolution AS resolution
         FROM df_artist AS LHS
         INNER JOIN df_song AS RHS ON (LHS.artist_name = RHS.artist_name
                                       AND LHS.country = RHS.country))
      ORDER BY resolution)
   LIMIT 1);",1,10,4,0,4,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/music_1/0007,"natural_join(input0, input1), limit(line0, 'duration')","SELECT artist_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.f_id AS f_id,
                LHS.artist_name AS artist_name,
                LHS.file_size AS file_size,
                LHS.duration AS duration,
                LHS.formats AS formats,
                RHS.song_name AS song_name,
                RHS.country AS country,
                RHS.genre_is AS genre_is,
                RHS.rating AS rating,
                RHS.languages AS languages,
                RHS.releasedate AS releasedate,
                RHS.resolution AS resolution
         FROM df_files AS LHS
         INNER JOIN df_song AS RHS ON (LHS.f_id = RHS.f_id
                                       AND LHS.artist_name = RHS.artist_name))
      ORDER BY duration)
   LIMIT 1);",1,10,4,0,4,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/music_1/0034,"filter(input1, ""country == 'UK' & languages == 'english'""), semi_join(input0, line0)","SELECT `artist_name`
FROM
  (SELECT *
   FROM `df_artist` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_song`
           WHERE (`country` = 'UK'
                  AND `languages` = 'english')) AS RHS
        WHERE (LHS.artist_name = RHS.artist_name
               AND LHS.country = RHS.country) ))
ORDER BY artist_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/music_1/0024,"inner_join(input1, input1, ""'f_id' = 'rating'""), semi_join(input0, line0)","SELECT artist_name,
       gender
FROM
  (SELECT *
   FROM df_artist AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT song_name,
                  artist_name,
                  country,
                  f_id,
                  genre_is,
                  f_id AS rating,
                  languages,
                  releasedate,
                  resolution,
                  song_name_other,
                  artist_name_other,
                  country_other,
                  f_id_other,
                  genre_is_other,
                  languages_other,
                  releasedate_other,
                  resolution_other
           FROM
             (SELECT LHS.song_name AS song_name,
                     LHS.artist_name AS artist_name,
                     LHS.country AS country,
                     LHS.f_id AS f_id,
                     LHS.genre_is AS genre_is,
                     LHS.rating AS rating,
                     LHS.languages AS languages,
                     LHS.releasedate AS releasedate,
                     LHS.resolution AS resolution,
                     RHS.song_name AS song_name_other,
                     RHS.artist_name AS artist_name_other,
                     RHS.country AS country_other,
                     RHS.f_id AS f_id_other,
                     RHS.genre_is AS genre_is_other,
                     RHS.languages AS languages_other,
                     RHS.releasedate AS releasedate_other,
                     RHS.resolution AS resolution_other
              FROM df_song AS LHS
              INNER JOIN df_song AS RHS ON (LHS.f_id = RHS.rating))) AS RHS
        WHERE (LHS.artist_name = RHS.artist_name
               AND LHS.country = RHS.country) ))
ORDER BY artist_name;",2,14,5,0,5,1,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0
spider/music_1/0021,"filter(input0, ""languages == 'english'""), summarise(line0, 'minresolution = min(resolution)', ""'languages','resolution'""), cross_join(line1, input0, 'resolution <= resolution.other & minresolution < resolution.other')","SELECT `song_name`
FROM
  (SELECT `LHS`.`languages` AS `languages`,
          `LHS`.`resolution` AS `resolution`,
          `LHS`.`minresolution` AS `minresolution`,
          `RHS`.`song_name` AS `song_name`,
          `RHS`.`artist_name` AS `artist_name`,
          `RHS`.`country` AS `country`,
          `RHS`.`f_id` AS `f_id`,
          `RHS`.`genre_is` AS `genre_is`,
          `RHS`.`rating` AS `rating`,
          `RHS`.`languages` AS `languages_other`,
          `RHS`.`releasedate` AS `releasedate`,
          `RHS`.`resolution` AS `resolution_other`
   FROM
     (SELECT `languages`,
             `resolution`,
             MIN(`resolution`) AS `minresolution`
      FROM `df_song`
      WHERE (`languages` = 'english')
      GROUP BY languages,
               resolution) AS LHS
   CROSS JOIN df_song AS RHS)
WHERE (resolution <= resolution_other
       AND minresolution < resolution_other)
ORDER BY song_name;",3,8,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0
spider/music_1/0001,"limit(input0, 'resolution')","SELECT song_name,
       releasedate
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_song
      ORDER BY resolution)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_1/0043,"mutate(input0, 'minrating = min(rating)'), filter(line0, ""languages != 'english' & minrating >= rating"")","SELECT `song_name`
FROM
  (SELECT `song_name`,
          `artist_name`,
          `country`,
          `f_id`,
          `genre_is`,
          `rating`,
          `languages`,
          `releasedate`,
          `resolution`,
          MIN(`rating`) OVER () AS `minrating`
   FROM `df_song`)
WHERE (`languages` != 'english'
       AND minrating >= rating)
ORDER BY song_name;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/music_1/0047,"filter(input0, ""languages == 'english'"")","SELECT `f_id`,
       `genre_is`,
       `artist_name`
FROM `df_song`
WHERE (`languages` = 'english')
ORDER BY f_id;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/music_1/0014,"natural_join(input0, input1), filter(line0, ""formats == 'mp4' & resolution <= 1000"")","SELECT `f_id`
FROM
  (SELECT `LHS`.`f_id` AS `f_id`,
          `LHS`.`artist_name` AS `artist_name`,
          `LHS`.`file_size` AS `file_size`,
          `LHS`.`duration` AS `duration`,
          `LHS`.`formats` AS `formats`,
          `RHS`.`song_name` AS `song_name`,
          `RHS`.`country` AS `country`,
          `RHS`.`genre_is` AS `genre_is`,
          `RHS`.`rating` AS `rating`,
          `RHS`.`languages` AS `languages`,
          `RHS`.`releasedate` AS `releasedate`,
          `RHS`.`resolution` AS `resolution`
   FROM `df_files` AS `LHS`
   INNER JOIN `df_song` AS `RHS` ON (`LHS`.`f_id` = `RHS`.`f_id`
                                     AND `LHS`.`artist_name` = `RHS`.`artist_name`))
WHERE (`formats` = 'mp4'
       AND resolution <= 1000.0)
ORDER BY f_id;",2,6,2,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/music_1/0025,df_genre,"SELECT g_name,
       rating
FROM df_genre
ORDER BY g_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_1/0011,"filter(input0, ""gender == 'Female'""), anti_join(input1, line0, ""'artist_name'""), mutate(line1, 'meanrating = mean(rating, na.rm = T)')","SELECT DISTINCT AVG(`rating`) OVER () AS `avg_t2_rating_`
FROM
  (SELECT *
   FROM `df_song` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_artist`
           WHERE (`gender` = 'Female')) AS RHS
        WHERE (LHS.artist_name = RHS.artist_name) ))
ORDER BY avg_t2_rating_;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/music_1/0029,"summarise(input0, 'n = n()', ""'languages'""), limit(line0, 'desc(n)')","SELECT languages
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT languages,
                COUNT() AS n
         FROM df_song
         GROUP BY languages)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/music_1/0010,"filter(input0, ""country == 'Bangladesh'""), summarise(line0, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_artist`
      WHERE (`country` = 'Bangladesh')))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/music_1/0040,"natural_join(input0, input1), filter(line0, 'resolution >= 900 | resolution <= 1'), mutate(line1, 'n = n()')","SELECT artist_name,
       country
FROM
  (SELECT LHS.artist_name AS artist_name,
          LHS.country AS country,
          LHS.gender AS gender,
          LHS.preferred_genre AS preferred_genre,
          RHS.song_name AS song_name,
          RHS.f_id AS f_id,
          RHS.genre_is AS genre_is,
          RHS.rating AS rating,
          RHS.languages AS languages,
          RHS.releasedate AS releasedate,
          RHS.resolution AS resolution
   FROM df_artist AS LHS
   INNER JOIN df_song AS RHS ON (LHS.artist_name = RHS.artist_name
                                 AND LHS.country = RHS.country))
WHERE (resolution >= 900.0
       OR resolution <= 1.0)
ORDER BY artist_name;",3,7,2,0,2,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/music_1/0049,"filter(input0, ""languages == 'english' & rating <= 8"")","SELECT `artist_name`
FROM `df_song`
WHERE (`languages` = 'english'
       AND rating <= 8.0)
ORDER BY artist_name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/music_1/0031,"filter(input0, ""country == 'UK' & gender == 'Male'"")","SELECT `artist_name`
FROM `df_artist`
WHERE (`country` = 'UK'
       AND `gender` = 'Male')
ORDER BY artist_name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0042,df_documents_to_be_destroyed,"SELECT DISTINCT destruction_authorised_by_employee_id
FROM df_documents_to_be_destroyed
ORDER BY destruction_authorised_by_employee_id;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0033,"filter(input0, ""document_name != 'Robin CV'""), anti_join(input1, line0, '')","SELECT `date_in_location_from`,
       `date_in_locaton_to`
FROM
  (SELECT *
   FROM `df_document_locations` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_all_documents`
           WHERE (`document_name` != 'Robin CV')) AS RHS
        WHERE (LHS.document_id = RHS.document_id) ))
ORDER BY date_in_location_from;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/cre_Doc_Tracking_DB/0037,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'location_code','location_name'""), filter(line1, 'n <= 1L')","SELECT location_name,
       location_code
FROM
  (SELECT location_code,
          location_name,
          COUNT() AS n
   FROM
     (SELECT LHS.location_code AS location_code,
             LHS.location_name AS location_name,
             LHS.location_description AS location_description,
             RHS.document_id AS document_id,
             RHS.date_in_location_from AS date_in_location_from,
             RHS.date_in_locaton_to AS date_in_locaton_to
      FROM df_ref_locations AS LHS
      INNER JOIN df_document_locations AS RHS ON (LHS.location_code = RHS.location_code))
   GROUP BY location_code,
            location_name)
WHERE (n <= 1)
ORDER BY location_name;",3,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0002,df_ref_calendar,"SELECT calendar_date,
       day_number
FROM df_ref_calendar
ORDER BY calendar_date;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0036,"summarise(input0, 'n = n()', ""'date_in_locaton_to','location_code'""), limit(line0, 'date_in_locaton_to')","SELECT location_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT date_in_locaton_to,
                location_code,
                COUNT() AS n
         FROM df_document_locations
         GROUP BY date_in_locaton_to,
                  location_code)
      ORDER BY date_in_locaton_to)
   LIMIT 3);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0017,"filter(input0, ""role_code == 'MG'"")","SELECT `role_name`,
       `role_description`
FROM `df_roles`
WHERE (`role_code` = 'MG')
ORDER BY role_name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0008,"filter(input0, ""document_name == 'Marry CV'"")","SELECT `date_stored`
FROM `df_all_documents`
WHERE (`document_name` = 'Marry CV')
ORDER BY date_stored;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0039,"summarise(input0, 'n = n()', ""'destruction_authorised_by_employee_id'"")","SELECT destruction_authorised_by_employee_id,
       n AS count___
FROM
  (SELECT destruction_authorised_by_employee_id,
          COUNT() AS n
   FROM df_documents_to_be_destroyed
   GROUP BY destruction_authorised_by_employee_id)
ORDER BY destruction_authorised_by_employee_id;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0038,"inner_join(input0, input1, ""'employee_id' = 'destroyed_by_employee_id'""), inner_join(input0, line0, ""'employee_id' = 'destruction_authorised_by_employee_id'"")","SELECT employee_name AS employee_name___1,
       employee_name_other AS employee_name___2
FROM
  (SELECT LHS.employee_id AS employee_id,
          LHS.role_code AS role_code,
          LHS.employee_name AS employee_name,
          LHS.gender_mfu AS gender_mfu,
          LHS.date_of_birth AS date_of_birth,
          LHS.other_details AS other_details,
          RHS.employee_id AS employee_id_other,
          RHS.role_code AS role_code_other,
          RHS.employee_name AS employee_name_other,
          RHS.gender_mfu AS gender_mfu_other,
          RHS.date_of_birth AS date_of_birth_other,
          RHS.other_details AS other_details_other,
          RHS.document_id AS document_id,
          RHS.planned_destruction_date AS planned_destruction_date,
          RHS.actual_destruction_date AS actual_destruction_date,
          RHS.other_details_other AS other_details_other_other,
          RHS.destroyed_by_employee_id AS destroyed_by_employee_id
   FROM df_employees AS LHS
   INNER JOIN
     (SELECT employee_id,
             role_code,
             employee_name,
             gender_mfu,
             date_of_birth,
             other_details,
             document_id,
             destruction_authorised_by_employee_id,
             planned_destruction_date,
             actual_destruction_date,
             other_details_other,
             employee_id AS destroyed_by_employee_id
      FROM
        (SELECT LHS.employee_id AS employee_id,
                LHS.role_code AS role_code,
                LHS.employee_name AS employee_name,
                LHS.gender_mfu AS gender_mfu,
                LHS.date_of_birth AS date_of_birth,
                LHS.other_details AS other_details,
                RHS.document_id AS document_id,
                RHS.destruction_authorised_by_employee_id AS destruction_authorised_by_employee_id,
                RHS.planned_destruction_date AS planned_destruction_date,
                RHS.actual_destruction_date AS actual_destruction_date,
                RHS.other_details AS other_details_other
         FROM df_employees AS LHS
         INNER JOIN df_documents_to_be_destroyed AS RHS ON (LHS.employee_id = RHS.destroyed_by_employee_id))) AS RHS ON (LHS.employee_id = RHS.destruction_authorised_by_employee_id))
ORDER BY employee_name___1;",2,10,4,0,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0003,"summarise(input0, 'n = n()', ""'document_type_description'"")","SELECT n AS count___
FROM
  (SELECT document_type_description,
          COUNT() AS n
   FROM df_ref_document_types
   GROUP BY document_type_description)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0027,"filter(input1, ""employee_name == 'Ebba'""), semi_join(input0, line0)","SELECT `role_name`,
       `role_description`
FROM
  (SELECT *
   FROM `df_roles` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_employees`
           WHERE (`employee_name` = 'Ebba')) AS RHS
        WHERE (LHS.role_code = RHS.role_code) ))
ORDER BY role_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/cre_Doc_Tracking_DB/0022,"filter(input0, ""role_code == 'HR'"")","SELECT `employee_name`
FROM `df_employees`
WHERE (`role_code` = 'HR')
ORDER BY employee_name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0030,df_document_locations,"SELECT DISTINCT location_code
FROM df_document_locations
ORDER BY location_code;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0013,"filter(input0, ""location_code == 'x'"")","SELECT `location_name`,
       `location_description`
FROM `df_ref_locations`
WHERE (`location_code` = 'x')
ORDER BY location_name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0006,"filter(input0, ""document_type_name == 'Paper'"")","SELECT `document_type_code`
FROM `df_ref_document_types`
WHERE (`document_type_name` = 'Paper')
ORDER BY document_type_code;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0004,df_ref_document_types,"SELECT document_type_code,
       document_type_name
FROM df_ref_document_types
ORDER BY document_type_code;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0012,df_ref_locations,"SELECT location_code,
       location_name
FROM df_ref_locations
ORDER BY location_code;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0026,"summarise(input0, 'n = n()', ""'gender_mfu','role_code'""), limit(line0, 'n')","SELECT role_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT gender_mfu,
                role_code,
                COUNT() AS n
         FROM df_employees
         GROUP BY gender_mfu,
                  role_code)
      ORDER BY n)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0015,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_roles)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0005,"filter(input0, ""document_type_code == 'RV'"")","SELECT `document_type_name`,
       `document_type_description`
FROM `df_ref_document_types`
WHERE (`document_type_code` = 'RV')
ORDER BY document_type_name;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0016,df_roles,"SELECT role_code,
       role_name,
       role_description
FROM df_roles
ORDER BY role_code;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0032,df_document_locations,"SELECT location_code,
       date_in_location_from,
       date_in_locaton_to
FROM df_document_locations
ORDER BY location_code;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0018,"filter(input0, ""role_name == 'Proof Reader'"")","SELECT `role_description`
FROM `df_roles`
WHERE (`role_name` = 'Proof Reader')
ORDER BY role_description;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0041,"inner_join(input0, input1, ""'employee_id' = 'destruction_authorised_by_employee_id'""), anti_join(input0, line0, ""'date_of_birth','employee_id'"")","SELECT employee_id
FROM
  (SELECT *
   FROM df_employees AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT employee_id,
                  role_code,
                  employee_name,
                  gender_mfu,
                  date_of_birth,
                  other_details,
                  document_id,
                  destroyed_by_employee_id,
                  planned_destruction_date,
                  actual_destruction_date,
                  other_details_other,
                  employee_id AS destruction_authorised_by_employee_id
           FROM
             (SELECT LHS.employee_id AS employee_id,
                     LHS.role_code AS role_code,
                     LHS.employee_name AS employee_name,
                     LHS.gender_mfu AS gender_mfu,
                     LHS.date_of_birth AS date_of_birth,
                     LHS.other_details AS other_details,
                     RHS.document_id AS document_id,
                     RHS.destroyed_by_employee_id AS destroyed_by_employee_id,
                     RHS.planned_destruction_date AS planned_destruction_date,
                     RHS.actual_destruction_date AS actual_destruction_date,
                     RHS.other_details AS other_details_other
              FROM df_employees AS LHS
              INNER JOIN df_documents_to_be_destroyed AS RHS ON (LHS.employee_id = RHS.destruction_authorised_by_employee_id))) AS RHS
        WHERE (LHS.date_of_birth = RHS.date_of_birth
               AND LHS.employee_id = RHS.employee_id) ))
ORDER BY employee_id;",2,15,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
spider/cre_Doc_Tracking_DB/0035,"summarise(input0, 'n = n()', ""'date_in_locaton_to','location_code'""), limit(line0, 'date_in_locaton_to')","SELECT location_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT date_in_locaton_to,
                location_code,
                COUNT() AS n
         FROM df_document_locations
         GROUP BY date_in_locaton_to,
                  location_code)
      ORDER BY date_in_locaton_to)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0020,"filter(input0, ""employee_name == 'Armani'""), filter(line0, ""employee_name == 'Armani'"")","SELECT `employee_name`,
       `role_code`,
       `date_of_birth`
FROM
  (SELECT *
   FROM `df_employees`
   WHERE (`employee_name` = 'Armani'))
WHERE (`employee_name` = 'Armani')
ORDER BY employee_name;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0019,"summarise(input0, 'n = n()', ""'employee_id','role_code'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT employee_id,
          role_code,
          COUNT() AS n
   FROM df_employees
   GROUP BY employee_id,
            role_code)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0007,"filter(input0, ""document_type_code == 'CV' | document_type_code == 'BK'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM `df_all_documents`
WHERE (`document_type_code` = 'CV'
       OR `document_type_code` = 'BK')
ORDER BY count___;",2,6,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0034,"summarise(input0, 'n = n()', ""'location_code'"")","SELECT location_code,
       n AS count___
FROM
  (SELECT location_code,
          COUNT() AS n
   FROM df_document_locations
   GROUP BY location_code)
ORDER BY location_code;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0024,"summarise(input0, 'n = n()', ""'date_of_birth','role_code'""), limit(line0, 'role_code')","SELECT role_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT date_of_birth,
                role_code,
                COUNT() AS n
         FROM df_employees
         GROUP BY date_of_birth,
                  role_code)
      ORDER BY role_code)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0021,"filter(input0, ""employee_name == 'Ebba'"")","SELECT `employee_id`
FROM `df_employees`
WHERE (`employee_name` = 'Ebba')
ORDER BY employee_id;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0023,"summarise(input0, 'n = n()', ""'employee_id','role_code'""), summarise(line0, 'n = n()', ""'role_code'"")","SELECT role_code,
       n AS count___
FROM
  (SELECT role_code,
          COUNT() AS n
   FROM
     (SELECT employee_id,
             role_code,
             COUNT() AS n
      FROM df_employees
      GROUP BY employee_id,
               role_code)
   GROUP BY role_code)
ORDER BY role_code;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0001,"inner_join(input0, input0, ""'calendar_date'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT LHS.calendar_date AS calendar_date,
             LHS.day_number AS day_number,
             RHS.day_number AS day_number_other
      FROM df_ref_calendar AS LHS
      INNER JOIN df_ref_calendar AS RHS ON (LHS.calendar_date = RHS.calendar_date)))
ORDER BY count___;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0043,df_documents_to_be_destroyed,"SELECT DISTINCT destroyed_by_employee_id
FROM df_documents_to_be_destroyed
ORDER BY destroyed_by_employee_id;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0014,"filter(input0, ""location_name == 'Canada'"")","SELECT `location_code`
FROM `df_ref_locations`
WHERE (`location_name` = 'Canada')
ORDER BY location_code;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0009,"inner_join(input0, input1, ""'calendar_date' = 'date_stored'"")","SELECT day_number,
       calendar_date AS date_stored
FROM
  (SELECT LHS.calendar_date AS calendar_date,
          LHS.day_number AS day_number,
          RHS.document_id AS document_id,
          RHS.document_type_code AS document_type_code,
          RHS.document_name AS document_name,
          RHS.document_description AS document_description,
          RHS.other_details AS other_details
   FROM df_ref_calendar AS LHS
   INNER JOIN df_all_documents AS RHS ON (LHS.calendar_date = RHS.date_stored))
ORDER BY day_number;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0025,"summarise(input0, 'n = n()', ""'other_details','role_code'""), filter(line0, 'n > 3L'), mutate(line1, 'n = n()')","SELECT role_code
FROM
  (SELECT other_details,
          role_code,
          COUNT() AS n
   FROM df_employees
   GROUP BY other_details,
            role_code)
WHERE (n > 3)
ORDER BY role_code;",3,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0011,"summarise(input0, 'n = n()', ""'location_code','location_name'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT location_code,
          location_name,
          COUNT() AS n
   FROM df_ref_locations
   GROUP BY location_code,
            location_name)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0029,"filter(input0, ""role_name == 'Human Resource' | role_name == 'Manager'""), semi_join(input1, line0)","SELECT `employee_id`
FROM
  (SELECT *
   FROM `df_employees` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_roles`
           WHERE (`role_name` = 'Human Resource'
                  OR `role_name` = 'Manager')) AS RHS
        WHERE (LHS.role_code = RHS.role_code) ))
ORDER BY employee_id;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/cre_Doc_Tracking_DB/0010,"filter(input1, ""document_name == 'How to read a book'""), semi_join(input0, line0)","SELECT `document_type_name`
FROM
  (SELECT *
   FROM `df_ref_document_types` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_all_documents`
           WHERE (`document_name` = 'How to read a book')) AS RHS
        WHERE (LHS.document_type_code = RHS.document_type_code) ))
ORDER BY document_type_name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/cre_Doc_Tracking_DB/0044,"inner_join(input0, input1, ""'employee_id' = 'destroyed_by_employee_id'""), anti_join(input0, line0, ""'employee_name'"")","SELECT employee_id
FROM
  (SELECT *
   FROM df_employees AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT employee_id,
                  role_code,
                  employee_name,
                  gender_mfu,
                  date_of_birth,
                  other_details,
                  document_id,
                  destruction_authorised_by_employee_id,
                  planned_destruction_date,
                  actual_destruction_date,
                  other_details_other,
                  employee_id AS destroyed_by_employee_id
           FROM
             (SELECT LHS.employee_id AS employee_id,
                     LHS.role_code AS role_code,
                     LHS.employee_name AS employee_name,
                     LHS.gender_mfu AS gender_mfu,
                     LHS.date_of_birth AS date_of_birth,
                     LHS.other_details AS other_details,
                     RHS.document_id AS document_id,
                     RHS.destruction_authorised_by_employee_id AS destruction_authorised_by_employee_id,
                     RHS.planned_destruction_date AS planned_destruction_date,
                     RHS.actual_destruction_date AS actual_destruction_date,
                     RHS.other_details AS other_details_other
              FROM df_employees AS LHS
              INNER JOIN df_documents_to_be_destroyed AS RHS ON (LHS.employee_id = RHS.destroyed_by_employee_id))) AS RHS
        WHERE (LHS.employee_name = RHS.employee_name) ))
ORDER BY employee_id;",2,15,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
spider/cre_Doc_Tracking_DB/0040,"summarise(input0, 'n = n()', ""'destroyed_by_employee_id','other_details'"")","SELECT destroyed_by_employee_id,
       n AS count___
FROM
  (SELECT destroyed_by_employee_id,
          other_details,
          COUNT() AS n
   FROM df_documents_to_be_destroyed
   GROUP BY destroyed_by_employee_id,
            other_details)
ORDER BY destroyed_by_employee_id;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0028,"filter(input0, ""role_name == 'Editor'""), natural_join(input1, line0)","SELECT `employee_name`
FROM
  (SELECT `LHS`.`employee_id` AS `employee_id`,
          `LHS`.`role_code` AS `role_code`,
          `LHS`.`employee_name` AS `employee_name`,
          `LHS`.`gender_mfu` AS `gender_mfu`,
          `LHS`.`date_of_birth` AS `date_of_birth`,
          `LHS`.`other_details` AS `other_details`,
          `RHS`.`role_name` AS `role_name`,
          `RHS`.`role_description` AS `role_description`
   FROM `df_employees` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_roles`
      WHERE (`role_name` = 'Editor')) AS RHS ON (LHS.role_code = RHS.role_code))
ORDER BY employee_name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/cre_Doc_Tracking_DB/0031,"filter(input1, ""document_name == 'Robin CV'""), natural_join3(input0, input2, line0)","SELECT `location_name`
FROM
  (SELECT `LHS`.`location_code` AS `location_code`,
          `LHS`.`location_name` AS `location_name`,
          `LHS`.`location_description` AS `location_description`,
          `LHS`.`document_id` AS `document_id`,
          `LHS`.`date_in_location_from` AS `date_in_location_from`,
          `LHS`.`date_in_locaton_to` AS `date_in_locaton_to`,
          `RHS`.`date_stored` AS `date_stored`,
          `RHS`.`document_type_code` AS `document_type_code`,
          `RHS`.`document_name` AS `document_name`,
          `RHS`.`document_description` AS `document_description`,
          `RHS`.`other_details` AS `other_details`
   FROM
     (SELECT `LHS`.`location_code` AS `location_code`,
             `LHS`.`location_name` AS `location_name`,
             `LHS`.`location_description` AS `location_description`,
             `RHS`.`document_id` AS `document_id`,
             `RHS`.`date_in_location_from` AS `date_in_location_from`,
             `RHS`.`date_in_locaton_to` AS `date_in_locaton_to`
      FROM `df_ref_locations` AS `LHS`
      INNER JOIN `df_document_locations` AS `RHS` ON (`LHS`.`location_code` = `RHS`.`location_code`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_all_documents`
      WHERE (`document_name` = 'Robin CV')) AS RHS ON (LHS.document_id = RHS.document_id))
ORDER BY location_name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/storm_record/0002,df_region,"SELECT region_code,
       region_name
FROM df_region
ORDER BY region_code;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/storm_record/0017,"summarise(input1, 'n = n()', ""'storm_id'""), filter(line0, 'n >= 2L'), anti_join(input0, line1, ""'storm_id'"")","SELECT name
FROM
  (SELECT *
   FROM df_storm AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT storm_id,
                     COUNT() AS n
              FROM df_affected_region
              GROUP BY storm_id)
           WHERE (n >= 2)) AS RHS
        WHERE (LHS.storm_id = RHS.storm_id) ))
ORDER BY name;",3,15,5,0,5,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0
spider/storm_record/0003,"intersect(input0, input0, 'region_name'), inner_join(line0, line0, ""'region_name'"")","SELECT region_name
FROM
  (SELECT LHS.region_name AS region_name
   FROM
     (SELECT region_name
      FROM df_region INTERSECT SELECT region_name
      FROM df_region) AS LHS
   INNER JOIN
     (SELECT region_name
      FROM df_region INTERSECT SELECT region_name
      FROM df_region) AS RHS ON (LHS.region_name = RHS.region_name))
ORDER BY region_name;",2,15,6,0,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0
spider/storm_record/0022,"filter(input1, ""region_name == 'Afghanistan' | region_name == 'Albania'""), natural_join(input0, input2), inner_join(line1, line0, ""'storm_id' = 'region_id'"")","SELECT DISTINCT `name`
FROM
  (SELECT `LHS`.`storm_id` AS `storm_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`dates_active` AS `dates_active`,
          `LHS`.`max_speed` AS `max_speed`,
          `LHS`.`damage_millions_usd` AS `damage_millions_usd`,
          `LHS`.`number_deaths` AS `number_deaths`,
          `LHS`.`region_id` AS `region_id`,
          `LHS`.`number_city_affected` AS `number_city_affected`,
          `RHS`.`region_code` AS `region_code`,
          `RHS`.`region_name` AS `region_name`
   FROM
     (SELECT `LHS`.`storm_id` AS `storm_id`,
             `LHS`.`name` AS `name`,
             `LHS`.`dates_active` AS `dates_active`,
             `LHS`.`max_speed` AS `max_speed`,
             `LHS`.`damage_millions_usd` AS `damage_millions_usd`,
             `LHS`.`number_deaths` AS `number_deaths`,
             `RHS`.`region_id` AS `region_id`,
             `RHS`.`number_city_affected` AS `number_city_affected`
      FROM `df_storm` AS `LHS`
      INNER JOIN `df_affected_region` AS `RHS` ON (`LHS`.`storm_id` = `RHS`.`storm_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_region`
      WHERE (`region_name` = 'Afghanistan'
             OR `region_name` = 'Albania')) AS RHS ON (LHS.storm_id = RHS.region_id))
ORDER BY name;",3,13,4,1,4,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0
spider/storm_record/0013,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'max_speed','name'"")","SELECT name,
       n AS count___
FROM
  (SELECT max_speed,
          name,
          COUNT() AS n
   FROM
     (SELECT LHS.storm_id AS storm_id,
             LHS.name AS name,
             LHS.dates_active AS dates_active,
             LHS.max_speed AS max_speed,
             LHS.damage_millions_usd AS damage_millions_usd,
             LHS.number_deaths AS number_deaths,
             RHS.region_id AS region_id,
             RHS.number_city_affected AS number_city_affected
      FROM df_storm AS LHS
      INNER JOIN df_affected_region AS RHS ON (LHS.storm_id = RHS.storm_id))
   GROUP BY max_speed,
            name)
ORDER BY name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/storm_record/0006,"filter(input0, 'number_deaths >= 1L'), semi_join(line0, input0)","SELECT name,
       dates_active,
       number_deaths
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_storm
      WHERE (number_deaths >= 1)) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_storm AS RHS
        WHERE (LHS.storm_id = RHS.storm_id
               AND LHS.name = RHS.name
               AND LHS.dates_active = RHS.dates_active
               AND LHS.max_speed = RHS.max_speed
               AND LHS.damage_millions_usd = RHS.damage_millions_usd
               AND LHS.number_deaths = RHS.number_deaths) ))
ORDER BY name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/storm_record/0004,"filter(input0, ""region_name != 'Denmark'""), intersect(line0, input0, 'region_name')","SELECT `region_name`
FROM
  (SELECT `region_name`
   FROM `df_region`
   WHERE (`region_name` != 'Denmark') INTERSECT
     SELECT region_name
     FROM df_region)
ORDER BY region_name;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/storm_record/0012,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'region_name'"")","SELECT region_name,
       n AS count___
FROM
  (SELECT region_name,
          COUNT() AS n
   FROM
     (SELECT LHS.region_id AS region_id,
             LHS.region_code AS region_code,
             LHS.region_name AS region_name,
             RHS.storm_id AS storm_id,
             RHS.number_city_affected AS number_city_affected
      FROM df_region AS LHS
      INNER JOIN df_affected_region AS RHS ON (LHS.region_id = RHS.region_id))
   GROUP BY region_name)
ORDER BY region_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/storm_record/0015,"anti_join(input0, input1, '')","SELECT name
FROM
  (SELECT *
   FROM df_storm AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_affected_region AS RHS
        WHERE (LHS.storm_id = RHS.storm_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/storm_record/0005,"filter(input0, 'number_deaths != 0L'), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_storm
WHERE (number_deaths != 0)
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/storm_record/0018,"filter(input0, 'number_deaths > 10L'), natural_join3(input1, input2, line0)","SELECT region_name
FROM
  (SELECT LHS.region_id AS region_id,
          LHS.region_code AS region_code,
          LHS.region_name AS region_name,
          LHS.storm_id AS storm_id,
          LHS.number_city_affected AS number_city_affected,
          RHS.name AS name,
          RHS.dates_active AS dates_active,
          RHS.max_speed AS max_speed,
          RHS.damage_millions_usd AS damage_millions_usd,
          RHS.number_deaths AS number_deaths
   FROM
     (SELECT LHS.region_id AS region_id,
             LHS.region_code AS region_code,
             LHS.region_name AS region_name,
             RHS.storm_id AS storm_id,
             RHS.number_city_affected AS number_city_affected
      FROM df_region AS LHS
      INNER JOIN df_affected_region AS RHS ON (LHS.region_id = RHS.region_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_storm
      WHERE (number_deaths > 10)) AS RHS ON (LHS.storm_id = RHS.storm_id))
ORDER BY region_name;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/storm_record/0020,"summarise(input0, 'n = n()', ""'region_id','region_name'""), inner_join(line0, input1, ""'region_id' = 'region_id','n' = 'storm_id'"")","SELECT region_name
FROM
  (SELECT LHS.region_id AS region_id,
          LHS.region_name AS region_name,
          LHS.n AS n,
          RHS.number_city_affected AS number_city_affected
   FROM
     (SELECT region_id,
             region_name,
             COUNT() AS n
      FROM df_region
      GROUP BY region_id,
               region_name) AS LHS
   INNER JOIN df_affected_region AS RHS ON (LHS.region_id = RHS.region_id
                                            AND LHS.n = RHS.storm_id))
ORDER BY region_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/storm_record/0019,"natural_join3(input0, input1, input2), filter(line0, ""region_name == 'Denmark'"")","SELECT `name`
FROM
  (SELECT `LHS`.`storm_id` AS `storm_id`,
          `LHS`.`name` AS `name`,
          `LHS`.`dates_active` AS `dates_active`,
          `LHS`.`max_speed` AS `max_speed`,
          `LHS`.`damage_millions_usd` AS `damage_millions_usd`,
          `LHS`.`number_deaths` AS `number_deaths`,
          `LHS`.`region_id` AS `region_id`,
          `LHS`.`region_code` AS `region_code`,
          `LHS`.`region_name` AS `region_name`,
          `RHS`.`number_city_affected` AS `number_city_affected`
   FROM
     (SELECT `LHS`.`storm_id` AS `storm_id`,
             `LHS`.`name` AS `name`,
             `LHS`.`dates_active` AS `dates_active`,
             `LHS`.`max_speed` AS `max_speed`,
             `LHS`.`damage_millions_usd` AS `damage_millions_usd`,
             `LHS`.`number_deaths` AS `number_deaths`,
             `RHS`.`region_id` AS `region_id`,
             `RHS`.`region_code` AS `region_code`,
             `RHS`.`region_name` AS `region_name`
      FROM `df_storm` AS `LHS`
      CROSS JOIN `df_region` AS `RHS`) AS `LHS`
   INNER JOIN `df_affected_region` AS `RHS` ON (`LHS`.`storm_id` = `RHS`.`storm_id`
                                                AND `LHS`.`region_id` = `RHS`.`region_id`))
WHERE (`region_name` = 'Denmark')
ORDER BY name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/storm_record/0021,"natural_join3(input0, input1, input2), limit(line0, 'desc(region_code)')","SELECT region_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.storm_id AS storm_id,
                LHS.name AS name,
                LHS.dates_active AS dates_active,
                LHS.max_speed AS max_speed,
                LHS.damage_millions_usd AS damage_millions_usd,
                LHS.number_deaths AS number_deaths,
                LHS.region_id AS region_id,
                LHS.region_code AS region_code,
                LHS.region_name AS region_name,
                RHS.number_city_affected AS number_city_affected
         FROM
           (SELECT LHS.storm_id AS storm_id,
                   LHS.name AS name,
                   LHS.dates_active AS dates_active,
                   LHS.max_speed AS max_speed,
                   LHS.damage_millions_usd AS damage_millions_usd,
                   LHS.number_deaths AS number_deaths,
                   RHS.region_id AS region_id,
                   RHS.region_code AS region_code,
                   RHS.region_name AS region_name
            FROM df_storm AS LHS
            CROSS JOIN df_region AS RHS) AS LHS
         INNER JOIN df_affected_region AS RHS ON (LHS.storm_id = RHS.storm_id
                                                  AND LHS.region_id = RHS.region_id))
      ORDER BY region_code DESC)
   LIMIT 1);",1,13,5,0,5,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
spider/storm_record/0001,"summarise(input0, 'n = n()', ""'region_code','region_name'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT region_code,
          region_name,
          COUNT() AS n
   FROM df_region
   GROUP BY region_code,
            region_name)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/storm_record/0014,"mutate(input1, 'n = n()'), inner_join(line0, input0, ""'storm_id' = 'number_deaths'"")","SELECT name,
       max_speed
FROM
  (SELECT LHS.region_id AS region_id,
          LHS.storm_id AS storm_id,
          LHS.number_city_affected AS number_city_affected,
          LHS.n AS n,
          RHS.storm_id AS storm_id_other,
          RHS.name AS name,
          RHS.dates_active AS dates_active,
          RHS.max_speed AS max_speed,
          RHS.damage_millions_usd AS damage_millions_usd
   FROM
     (SELECT region_id,
             storm_id,
             number_city_affected,
             COUNT(*) OVER () AS n
      FROM df_affected_region) AS LHS
   INNER JOIN df_storm AS RHS ON (LHS.storm_id = RHS.number_deaths))
ORDER BY name;",2,8,3,0,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
spider/storm_record/0009,df_storm,"SELECT name,
       damage_millions_usd
FROM df_storm
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/storm_record/0011,"anti_join(input0, input1, '')","SELECT region_name
FROM
  (SELECT *
   FROM df_region AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_affected_region AS RHS
        WHERE (LHS.region_id = RHS.region_id) ))
ORDER BY region_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/storm_record/0010,"summarise(input0, 'n = n()', ""'region_id','storm_id'""), summarise(line0, 'n_distinct = n_distinct(region_id)', '')","SELECT n_distinct AS count_distinct_region_id_
FROM
  (SELECT COUNT(DISTINCT region_id) AS n_distinct
   FROM
     (SELECT region_id,
             storm_id,
             COUNT() AS n
      FROM df_affected_region
      GROUP BY region_id,
               storm_id))
ORDER BY count_distinct_region_id_;",2,7,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/game_injury/0002,df_game,"SELECT date
FROM df_game
ORDER BY date;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/game_injury/0017,"summarise(input1, 'n = n()', ""'stadium_id'""), natural_join(input0, line0)","SELECT DISTINCT stadium_id AS id,
                n AS count___
FROM
  (SELECT LHS.id AS id,
          LHS.name AS name,
          LHS.home_games AS home_games,
          LHS.average_attendance AS average_attendance,
          LHS.total_attendance AS total_attendance,
          LHS.capacity_percentage AS capacity_percentage,
          RHS.stadium_id AS stadium_id,
          RHS.n AS n
   FROM df_stadium AS LHS
   CROSS JOIN
     (SELECT stadium_id,
             COUNT() AS n
      FROM df_game
      GROUP BY stadium_id) AS RHS)
ORDER BY id;",2,7,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/game_injury/0003,df_game,"SELECT season,
       home_team,
       away_team
FROM df_game
ORDER BY season;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/game_injury/0013,"filter(input0, 'season < 2010L'), summarise(input1, 'n = n()', ""'id'""), left_join(line1, line0)","SELECT DISTINCT n AS count_distinct_t1_injury_
FROM
  (SELECT LHS.id AS id,
          LHS.n AS n,
          RHS.stadium_id AS stadium_id,
          RHS.season AS season,
          RHS.date AS date,
          RHS.home_team AS home_team,
          RHS.away_team AS away_team,
          RHS.score AS score,
          RHS.competition AS competition
   FROM
     (SELECT id,
             COUNT() AS n
      FROM df_injury_accident
      GROUP BY id) AS LHS
   LEFT JOIN
     (SELECT *
      FROM df_game
      WHERE (season < 2010)) AS RHS ON (LHS.id = RHS.id))
ORDER BY count_distinct_t1_injury_;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/game_injury/0006,"filter(input0, ""injury == 'Knee problem'""), anti_join(input0, line0, '')","SELECT `player`,
       `number_of_matches`,
       `source`
FROM
  (SELECT *
   FROM `df_injury_accident` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_injury_accident`
           WHERE (`injury` = 'Knee problem')) AS RHS
        WHERE (LHS.game_id = RHS.game_id
               AND LHS.id = RHS.id
               AND LHS.player = RHS.player
               AND LHS.injury = RHS.injury
               AND LHS.number_of_matches = RHS.number_of_matches
               AND LHS.source = RHS.source) ))
ORDER BY player;",2,13,4,0,4,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/game_injury/0004,"summarise(input0, 'meanhome_games = mean(home_games, na.rm = T)', ""'home_games'""), summarise(line0, 'minhome_games = min(home_games)', ""'home_games'""), mutate(line1, 'maxhome_games = max(home_games)')","SELECT home_games AS max_home_games_,
       minhome_games AS min_home_games_,
       MAX(home_games) OVER () AS avg_home_games_
FROM
  (SELECT home_games,
          MIN(home_games) AS minhome_games
   FROM
     (SELECT home_games,
             AVG(home_games) AS meanhome_games
      FROM df_stadium
      GROUP BY home_games)
   GROUP BY home_games)
ORDER BY max_home_games_;",3,7,3,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0
spider/game_injury/0005,"filter(input0, 'capacity_percentage > 100'), intersect(line0, line0, 'average_attendance')","SELECT average_attendance
FROM
  (SELECT average_attendance
   FROM df_stadium
   WHERE (capacity_percentage > 100.0) INTERSECT
     SELECT average_attendance
     FROM df_stadium WHERE (capacity_percentage > 100.0))
ORDER BY average_attendance;",2,9,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/game_injury/0018,"semi_join(input0, input1), inner_join(line0, input1, ""'id' = 'game_id'"")","SELECT date, player
FROM
  (SELECT LHS.stadium_id AS stadium_id,
          LHS.id AS id,
          LHS.season AS season,
          LHS.date AS date,
          LHS.home_team AS home_team,
          LHS.away_team AS away_team,
          LHS.score AS score,
          LHS.competition AS competition,
          RHS.id AS id_other,
          RHS.player AS player,
          RHS.injury AS injury,
          RHS.number_of_matches AS number_of_matches,
          RHS.source AS SOURCE
   FROM
     (SELECT *
      FROM df_game AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM df_injury_accident AS RHS
           WHERE (LHS.id = RHS.id) )) AS LHS
   INNER JOIN df_injury_accident AS RHS ON (LHS.id = RHS.game_id))
ORDER BY date;",2,12,4,0,4,1,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0
spider/game_injury/0007,"inner_join(input0, input1, ""'id' = 'game_id'""), filter(line0, ""player == 'Walter Samuel'"")","SELECT `season`
FROM
  (SELECT `stadium_id`,
          `id`,
          `season`,
          `date`,
          `home_team`,
          `away_team`,
          `score`,
          `competition`,
          `id_other`,
          `player`,
          `injury`,
          `number_of_matches`,
          `source`,
          `id` AS `game_id`
   FROM
     (SELECT `LHS`.`stadium_id` AS `stadium_id`,
             `LHS`.`id` AS `id`,
             `LHS`.`season` AS `season`,
             `LHS`.`date` AS `date`,
             `LHS`.`home_team` AS `home_team`,
             `LHS`.`away_team` AS `away_team`,
             `LHS`.`score` AS `score`,
             `LHS`.`competition` AS `competition`,
             `RHS`.`id` AS `id_other`,
             `RHS`.`player` AS `player`,
             `RHS`.`injury` AS `injury`,
             `RHS`.`number_of_matches` AS `number_of_matches`,
             `RHS`.`source` AS `source`
      FROM `df_game` AS `LHS`
      INNER JOIN `df_injury_accident` AS `RHS` ON (`LHS`.`id` = `RHS`.`game_id`)))
WHERE (`player` = 'Walter Samuel')
ORDER BY season;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/game_injury/0001,"filter(input0, 'season > 2007L'), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM df_game
WHERE (season > 2007)
ORDER BY count___;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/game_injury/0014,"natural_join(input1, input2), filter(line0, ""player != 'Walter Samuel' & player == 'Thiago Motta'""), inner_join(input0, line1, ""'id' = 'game_id'"")","SELECT `name`
FROM
  (SELECT `LHS`.`id` AS `id`,
          `LHS`.`name` AS `name`,
          `LHS`.`home_games` AS `home_games`,
          `LHS`.`average_attendance` AS `average_attendance`,
          `LHS`.`total_attendance` AS `total_attendance`,
          `LHS`.`capacity_percentage` AS `capacity_percentage`,
          `RHS`.`stadium_id` AS `stadium_id`,
          `RHS`.`id` AS `id_other`,
          `RHS`.`season` AS `season`,
          `RHS`.`date` AS `date`,
          `RHS`.`home_team` AS `home_team`,
          `RHS`.`away_team` AS `away_team`,
          `RHS`.`score` AS `score`,
          `RHS`.`competition` AS `competition`,
          `RHS`.`player` AS `player`,
          `RHS`.`injury` AS `injury`,
          `RHS`.`number_of_matches` AS `number_of_matches`,
          `RHS`.`source` AS `source`
   FROM `df_stadium` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM
        (SELECT `LHS`.`stadium_id` AS `stadium_id`,
                `LHS`.`id` AS `id`,
                `LHS`.`season` AS `season`,
                `LHS`.`date` AS `date`,
                `LHS`.`home_team` AS `home_team`,
                `LHS`.`away_team` AS `away_team`,
                `LHS`.`score` AS `score`,
                `LHS`.`competition` AS `competition`,
                `RHS`.`game_id` AS `game_id`,
                `RHS`.`player` AS `player`,
                `RHS`.`injury` AS `injury`,
                `RHS`.`number_of_matches` AS `number_of_matches`,
                `RHS`.`source` AS `source`
         FROM `df_game` AS `LHS`
         INNER JOIN `df_injury_accident` AS `RHS` ON (`LHS`.`id` = `RHS`.`id`))
      WHERE (`player` != 'Walter Samuel'
             AND `player` = 'Thiago Motta')) AS RHS ON (LHS.id = RHS.game_id))
ORDER BY name;",3,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0
spider/game_injury/0009,"semi_join(input0, input1), inner_join(input2, line0, ""'id' = 'id','game_id' = 'home_games'""), mutate(line1, 'n = n()')","SELECT id,
       name
FROM
  (SELECT game_id,
          id,
          player,
          injury,
          number_of_matches,
          SOURCE,
          name,
          average_attendance,
          total_attendance,
          capacity_percentage,
          game_id AS home_games
   FROM
     (SELECT LHS.game_id AS game_id,
             LHS.id AS id,
             LHS.player AS player,
             LHS.injury AS injury,
             LHS.number_of_matches AS number_of_matches,
             LHS.source AS SOURCE,
             RHS.name AS name,
             RHS.average_attendance AS average_attendance,
             RHS.total_attendance AS total_attendance,
             RHS.capacity_percentage AS capacity_percentage
      FROM df_injury_accident AS LHS
      INNER JOIN
        (SELECT *
         FROM df_stadium AS LHS
         WHERE EXISTS
             (SELECT 1
              FROM df_game AS RHS
              WHERE (LHS.id = RHS.id) )) AS RHS ON (LHS.id = RHS.id
                                                    AND LHS.game_id = RHS.home_games)))
ORDER BY id;",3,14,5,0,5,1,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0
spider/game_injury/0011,"summarise(input0, 'n = n()', ""'id'"")","SELECT DISTINCT n AS count_distinct_source_
FROM
  (SELECT id,
          COUNT() AS n
   FROM df_injury_accident
   GROUP BY id)
ORDER BY count_distinct_source_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0033,"summarise(input1, 'n = n()', ""'room'""), inner_join(input0, line0, ""'roomid' = 'room'"")","SELECT roomname,
       n AS count___,
       roomid AS room
FROM
  (SELECT LHS.roomid AS roomid,
          LHS.roomname AS roomname,
          LHS.beds AS beds,
          LHS.bedtype AS bedtype,
          LHS.maxoccupancy AS maxoccupancy,
          LHS.baseprice AS baseprice,
          LHS.decor AS decor,
          RHS.n AS n
   FROM df_rooms AS LHS
   INNER JOIN
     (SELECT room,
             COUNT() AS n
      FROM df_reservations
      GROUP BY room) AS RHS ON (LHS.roomid = RHS.room))
ORDER BY roomname;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/inn_1/0002,"filter(input0, 'baseprice <= 160L | baseprice >= maxoccupancy'), filter(line0, 'baseprice >= 160L & maxoccupancy >= 2L')","SELECT roomname,
       roomid
FROM
  (SELECT *
   FROM df_rooms
   WHERE (baseprice <= 160
          OR baseprice >= maxoccupancy))
WHERE (baseprice >= 160
       AND maxoccupancy >= 2)
ORDER BY roomname;",2,7,2,0,2,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0027,"filter(input0, 'baseprice >= 120L'), summarise(line0, 'n = n()', ""'decor'"")","SELECT decor,
       n AS count___
FROM
  (SELECT decor,
          COUNT() AS n
   FROM
     (SELECT *
      FROM df_rooms
      WHERE (baseprice >= 120))
   GROUP BY decor)
ORDER BY decor;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0022,"limit(input0, 'desc(baseprice)')","SELECT roomid,
       roomname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_rooms
      ORDER BY baseprice DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0030,"limit(input0, 'roomname')","SELECT roomid,
       roomname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_rooms
      ORDER BY roomname)
   LIMIT 3);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0013,"summarise(input0, 'meanbaseprice = mean(baseprice, na.rm = T)', ""'bedtype'"")","SELECT bedtype,
       meanbaseprice AS avg_baseprice_
FROM
  (SELECT bedtype,
          AVG(baseprice) AS meanbaseprice
   FROM df_rooms
   GROUP BY bedtype)
ORDER BY bedtype;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0004,"filter(input0, ""firstname == 'ROY' | lastname == 'SWEAZY'""), semi_join(line0, input0)","SELECT `kids`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_reservations`
      WHERE (`firstname` = 'ROY'
             OR `lastname` = 'SWEAZY')) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_reservations AS RHS
        WHERE (LHS.code = RHS.code
               AND LHS.room = RHS.room
               AND LHS.checkin = RHS.checkin
               AND LHS.checkout = RHS.checkout
               AND LHS.rate = RHS.rate
               AND LHS.lastname = RHS.lastname
               AND LHS.firstname = RHS.firstname
               AND LHS.adults = RHS.adults
               AND LHS.kids = RHS.kids) ))
ORDER BY kids;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/inn_1/0012,"filter(input0, ""roomname == 'Recluse and defiance'""), intersect(line0, input0, 'decor')","SELECT `decor`
FROM
  (SELECT `decor`
   FROM `df_rooms`
   WHERE (`roomname` = 'Recluse and defiance') INTERSECT
     SELECT decor
     FROM df_rooms)
ORDER BY decor;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
spider/inn_1/0026,df_rooms,"SELECT roomname
FROM df_rooms
ORDER BY roomname;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0015,"summarise(input0, 'n = n()', ""'decor'""), inner_join(input1, line0, ""'kids' = 'n'"")","SELECT DISTINCT decor
FROM
  (SELECT LHS.code AS code,
          LHS.room AS room,
          LHS.checkin AS checkin,
          LHS.checkout AS checkout,
          LHS.rate AS rate,
          LHS.lastname AS lastname,
          LHS.firstname AS firstname,
          LHS.adults AS adults,
          LHS.kids AS kids,
          RHS.decor AS decor
   FROM df_reservations AS LHS
   INNER JOIN
     (SELECT decor,
             COUNT() AS n
      FROM df_rooms
      GROUP BY decor) AS RHS ON (LHS.kids = RHS.n))
ORDER BY decor;",2,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/inn_1/0005,"filter(input0, ""firstname == 'ROY' | lastname == 'SWEAZY'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS `count___`
FROM `df_reservations`
WHERE (`firstname` = 'ROY'
       OR `lastname` = 'SWEAZY')
ORDER BY count___;",2,6,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/inn_1/0032,"inner_join(input0, input1, ""'roomid' = 'checkout','roomname' = 'lastname'""), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT roomid,
             roomname,
             beds,
             bedtype,
             maxoccupancy,
             baseprice,
             decor,
             code,
             room,
             checkin,
             rate,
             firstname,
             adults,
             kids,
             checkout,
             roomname AS lastname
      FROM
        (SELECT roomid,
                roomname,
                beds,
                bedtype,
                maxoccupancy,
                baseprice,
                decor,
                code,
                room,
                checkin,
                rate,
                firstname,
                adults,
                kids,
                roomid AS checkout
         FROM
           (SELECT LHS.roomid AS roomid,
                   LHS.roomname AS roomname,
                   LHS.beds AS beds,
                   LHS.bedtype AS bedtype,
                   LHS.maxoccupancy AS maxoccupancy,
                   LHS.baseprice AS baseprice,
                   LHS.decor AS decor,
                   RHS.code AS code,
                   RHS.room AS room,
                   RHS.checkin AS checkin,
                   RHS.rate AS rate,
                   RHS.firstname AS firstname,
                   RHS.adults AS adults,
                   RHS.kids AS kids
            FROM df_rooms AS LHS
            INNER JOIN df_reservations AS RHS ON (LHS.roomid = RHS.checkout
                                                  AND LHS.roomname = RHS.lastname)))))
ORDER BY count___;",2,11,5,0,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/inn_1/0018,"summarise(input0, 'n = n()', ""'decor','roomid'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT decor,
          roomid,
          COUNT() AS n
   FROM df_rooms
   GROUP BY decor,
            roomid)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/inn_1/0035,"filter(input0, 'baseprice > 120L & baseprice <= 150L'), semi_join(input0, line0)","SELECT roomname
FROM
  (SELECT *
   FROM df_rooms AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM df_rooms
           WHERE (baseprice > 120
                  AND baseprice <= 150)) AS RHS
        WHERE (LHS.roomid = RHS.roomid
               AND LHS.roomname = RHS.roomname
               AND LHS.beds = RHS.beds
               AND LHS.bedtype = RHS.bedtype
               AND LHS.maxoccupancy = RHS.maxoccupancy
               AND LHS.baseprice = RHS.baseprice
               AND LHS.decor = RHS.decor) ))
ORDER BY roomname;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/inn_1/0020,"summarise(input0, 'n = n()', ""'bedtype'"")","SELECT bedtype,
       n AS count___
FROM
  (SELECT bedtype,
          COUNT() AS n
   FROM df_rooms
   GROUP BY bedtype)
ORDER BY bedtype;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0019,"filter(input0, ""bedtype == 'King'""), summarise(line0, 'n = n()', '')","SELECT `n` AS `count___`
FROM
  (SELECT COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_rooms`
      WHERE (`bedtype` = 'King')))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0024,"filter(input0, ""bedtype == 'King'""), summarise(line0, 'n = n()', ""'decor'"")","SELECT `decor`,
       `n` AS `count___`
FROM
  (SELECT `decor`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM `df_rooms`
      WHERE (`bedtype` = 'King'))
   GROUP BY decor)
ORDER BY decor;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0021,"limit(input0, 'desc(bedtype)')","SELECT roomname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_rooms
      ORDER BY bedtype DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0023,"filter(input0, ""decor == 'traditional'"")","SELECT `roomname`,
       `bedtype`
FROM `df_rooms`
WHERE (`decor` = 'traditional')
ORDER BY roomname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0001,"filter(input0, ""decor == 'modern' & beds == 2L""), filter(line0, 'beds <= 160L')","SELECT `roomname`
FROM
  (SELECT *
   FROM `df_rooms`
   WHERE (`decor` = 'modern'
          AND beds = 2))
WHERE (beds <= 160)
ORDER BY roomname;",2,6,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0014,"summarise(input0, 'summaxoccupancy = sum(maxoccupancy)', ""'decor'""), filter(line0, ""decor == 'modern'"")","SELECT `summaxoccupancy` AS `sum_maxoccupancy_`
FROM
  (SELECT `decor`,
          SUM(`maxoccupancy`) AS `summaxoccupancy`
   FROM `df_rooms`
   GROUP BY `decor`)
WHERE (`decor` = 'modern')
ORDER BY sum_maxoccupancy_;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0009,"filter(input0, ""bedtype == 'King'""), mutate(line0, 'sumbeds = sum(beds)')","SELECT DISTINCT SUM(`beds`) OVER () AS `sum_beds_`
FROM `df_rooms`
WHERE (`bedtype` = 'King')
ORDER BY sum_beds_;",2,5,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/inn_1/0025,"summarise(input0, 'meanbaseprice = mean(baseprice, na.rm = T)', ""'decor'""), summarise(input0, 'minbaseprice = min(baseprice)', ""'decor'""), left_join(line1, line0)","SELECT decor,
       meanbaseprice AS avg_baseprice_,
       minbaseprice AS min_baseprice_
FROM
  (SELECT LHS.decor AS decor,
          LHS.minbaseprice AS minbaseprice,
          RHS.meanbaseprice AS meanbaseprice
   FROM
     (SELECT decor,
             MIN(baseprice) AS minbaseprice
      FROM df_rooms
      GROUP BY decor) AS LHS
   LEFT JOIN
     (SELECT decor,
             AVG(baseprice) AS meanbaseprice
      FROM df_rooms
      GROUP BY decor) AS RHS ON (LHS.decor = RHS.decor))
ORDER BY decor;",3,9,4,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0
spider/inn_1/0011,"limit(input0, 'desc(roomname)')","SELECT roomname,
       baseprice
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_rooms
      ORDER BY roomname DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0029,"summarise(input0, 'n = n()', ""'beds','bedtype'""), summarise(line0, 'n_distinct = n_distinct(bedtype)', '')","SELECT n_distinct AS count_distinct_bedtype_
FROM
  (SELECT COUNT(DISTINCT bedtype) AS n_distinct
   FROM
     (SELECT beds,
             bedtype,
             COUNT() AS n
      FROM df_rooms
      GROUP BY beds,
               bedtype))
ORDER BY count_distinct_bedtype_;",2,7,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0010,"filter(input0, ""bedtype == 'King'"")","SELECT `roomname`,
       `decor`
FROM `df_rooms`
WHERE (`bedtype` = 'King')
ORDER BY roomname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0028,"filter(input0, ""bedtype == 'King' | bedtype == 'Queen'"")","SELECT `roomname`
FROM `df_rooms`
WHERE (`bedtype` = 'King'
       OR `bedtype` = 'Queen')
ORDER BY roomname;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/inn_1/0031,"mutate(input0, 'meanbaseprice = mean(baseprice, na.rm = T)'), filter(line0, 'meanbaseprice <= baseprice')","SELECT roomname
FROM
  (SELECT roomid,
          roomname,
          beds,
          bedtype,
          maxoccupancy,
          baseprice,
          decor,
          AVG(baseprice) OVER () AS meanbaseprice
   FROM df_rooms)
WHERE (meanbaseprice <= baseprice)
ORDER BY roomname;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/entrepreneur/0002,df_entrepreneur,"SELECT company
FROM df_entrepreneur
ORDER BY company;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/entrepreneur/0017,"anti_join(input1, input0, '')","SELECT name
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_entrepreneur AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/entrepreneur/0008,"limit(input0, 'height')","SELECT weight
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_people
      ORDER BY height)
   LIMIT 1);",0,7,3,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/entrepreneur/0003,df_entrepreneur,"SELECT company,
       investor
FROM df_entrepreneur
ORDER BY company;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/entrepreneur/0013,"summarise(input0, 'n = n()', ""'investor'"")","SELECT investor,
       n AS count___
FROM
  (SELECT investor,
          COUNT() AS n
   FROM df_entrepreneur
   GROUP BY investor)
ORDER BY investor;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/entrepreneur/0006,"semi_join(input1, input0)","SELECT name
FROM
  (SELECT *
   FROM df_people AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_entrepreneur AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY name;",1,9,3,0,3,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
spider/entrepreneur/0004,"summarise(input0, 'meanmoney_requested = mean(money_requested, na.rm = T)', ""'company','money_requested'""), summarise(line0, 'meanmoney_requested = mean(money_requested, na.rm = T)', '')","SELECT meanmoney_requested AS avg_money_requested_
FROM
  (SELECT AVG(money_requested) AS meanmoney_requested
   FROM
     (SELECT company,
             money_requested,
             AVG(money_requested) AS meanmoney_requested
      FROM df_entrepreneur
      GROUP BY company,
               money_requested))
ORDER BY avg_money_requested_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/entrepreneur/0012,"natural_join(input0, input1), intersect(line0, line0, 'weight')","SELECT weight
FROM
  (SELECT weight
   FROM
     (SELECT LHS.entrepreneur_id AS entrepreneur_id,
             LHS.people_id AS people_id,
             LHS.company AS company,
             LHS.money_requested AS money_requested,
             LHS.investor AS investor,
             RHS.name AS name,
             RHS.height AS height,
             RHS.weight AS weight,
             RHS.date_of_birth AS date_of_birth
      FROM df_entrepreneur AS LHS
      INNER JOIN df_people AS RHS ON (LHS.people_id = RHS.people_id)) INTERSECT SELECT weight
   FROM
     (SELECT LHS.entrepreneur_id AS entrepreneur_id,
             LHS.people_id AS people_id,
             LHS.company AS company,
             LHS.money_requested AS money_requested,
             LHS.investor AS investor,
             RHS.name AS name,
             RHS.height AS height,
             RHS.weight AS weight,
             RHS.date_of_birth AS date_of_birth
      FROM df_entrepreneur AS LHS
      INNER JOIN df_people AS RHS ON (LHS.people_id = RHS.people_id)))
ORDER BY weight;",2,13,5,0,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
spider/entrepreneur/0015,"summarise(input0, 'n = n()', ""'investor'""), filter(line0, 'n >= 2L'), summarise(line1, 'n = n()', ""'investor'"")","SELECT investor
FROM
  (SELECT investor,
          COUNT() AS n
   FROM
     (SELECT *
      FROM
        (SELECT investor,
                COUNT() AS n
         FROM df_entrepreneur
         GROUP BY investor)
      WHERE (n >= 2))
   GROUP BY investor)
ORDER BY investor;",3,9,4,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0
spider/entrepreneur/0005,df_people,"SELECT name
FROM df_people
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/entrepreneur/0016,"inner_join(input1, input0, ""'people_id'"")","SELECT name,
       company
FROM
  (SELECT LHS.people_id AS people_id,
          LHS.name AS name,
          LHS.height AS height,
          LHS.weight AS weight,
          LHS.date_of_birth AS date_of_birth,
          RHS.entrepreneur_id AS entrepreneur_id,
          RHS.company AS company,
          RHS.money_requested AS money_requested,
          RHS.investor AS investor
   FROM df_people AS LHS
   INNER JOIN df_entrepreneur AS RHS ON (LHS.people_id = RHS.people_id))
ORDER BY name;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
spider/entrepreneur/0018,"filter(input0, 'money_requested > 140000 & money_requested > 120000')","SELECT investor
FROM df_entrepreneur
WHERE (money_requested > 140000.0
       AND money_requested > 120000.0)
ORDER BY investor;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/entrepreneur/0020,"natural_join(input0, input1), limit(line0, 'desc(entrepreneur_id)')","SELECT company
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.entrepreneur_id AS entrepreneur_id,
                LHS.people_id AS people_id,
                LHS.company AS company,
                LHS.money_requested AS money_requested,
                LHS.investor AS investor,
                RHS.name AS name,
                RHS.height AS height,
                RHS.weight AS weight,
                RHS.date_of_birth AS date_of_birth
         FROM df_entrepreneur AS LHS
         INNER JOIN df_people AS RHS ON (LHS.people_id = RHS.people_id))
      ORDER BY entrepreneur_id DESC)
   LIMIT 1);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/entrepreneur/0019,"mutate(input0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count_distinct_company_
FROM df_entrepreneur
ORDER BY count_distinct_company_;",1,4,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/entrepreneur/0007,"filter(input0, ""investor != 'Rachel Elnaugh'""), semi_join(input1, line0)","SELECT `name`
FROM
  (SELECT *
   FROM `df_people` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_entrepreneur`
           WHERE (`investor` != 'Rachel Elnaugh')) AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY name;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/entrepreneur/0014,"summarise(input0, 'n = n()', ""'entrepreneur_id','investor'""), limit(line0, 'desc(n)')","SELECT investor
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT entrepreneur_id,
                investor,
                COUNT() AS n
         FROM df_entrepreneur
         GROUP BY entrepreneur_id,
                  investor)
      ORDER BY n DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/entrepreneur/0009,"natural_join(input0, input1), limit(line0, 'desc(date_of_birth)')","SELECT name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.entrepreneur_id AS entrepreneur_id,
                LHS.people_id AS people_id,
                LHS.company AS company,
                LHS.money_requested AS money_requested,
                LHS.investor AS investor,
                RHS.name AS name,
                RHS.height AS height,
                RHS.weight AS weight,
                RHS.date_of_birth AS date_of_birth
         FROM df_entrepreneur AS LHS
         INNER JOIN df_people AS RHS ON (LHS.people_id = RHS.people_id))
      ORDER BY date_of_birth DESC)
   LIMIT 1);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/entrepreneur/0011,"filter(input0, ""investor == 'Simon Woodroffe' | investor == 'Peter Jones'""), semi_join(input1, line0)","SELECT `date_of_birth`
FROM
  (SELECT *
   FROM `df_people` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_entrepreneur`
           WHERE (`investor` = 'Simon Woodroffe'
                  OR `investor` = 'Peter Jones')) AS RHS
        WHERE (LHS.people_id = RHS.people_id) ))
ORDER BY date_of_birth;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/entrepreneur/0010,"filter(input1, ""height >= '1.85'""), natural_join(input0, line0), mutate(line1, 'summoney_requested = sum(money_requested)')","SELECT DISTINCT SUM(`money_requested`) OVER () AS `sum_t1_money_requested_`
FROM
  (SELECT `LHS`.`entrepreneur_id` AS `entrepreneur_id`,
          `LHS`.`people_id` AS `people_id`,
          `LHS`.`company` AS `company`,
          `LHS`.`money_requested` AS `money_requested`,
          `LHS`.`investor` AS `investor`,
          `RHS`.`name` AS `name`,
          `RHS`.`height` AS `height`,
          `RHS`.`weight` AS `weight`,
          `RHS`.`date_of_birth` AS `date_of_birth`
   FROM `df_entrepreneur` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_people`
      WHERE (`height` >= '1.85')) AS RHS ON (LHS.people_id = RHS.people_id))
ORDER BY sum_t1_money_requested_;",3,10,3,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/riding_club/0002,df_player,"SELECT player_name
FROM df_player
ORDER BY player_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/riding_club/0017,"summarise(input0, 'n = n()', ""'coach_name','gender'""), inner_join(input1, line0, ""'rank' = 'n'"")","SELECT DISTINCT rank AS club_id,
                gold
FROM
  (SELECT LHS.rank AS rank,
          LHS.club_id AS club_id,
          LHS.gold AS gold,
          LHS.big_silver AS big_silver,
          LHS.small_silver AS small_silver,
          LHS.bronze AS bronze,
          LHS.points AS points,
          RHS.coach_name AS coach_name,
          RHS.gender AS gender
   FROM df_match_result AS LHS
   INNER JOIN
     (SELECT coach_name,
             gender,
             COUNT() AS n
      FROM df_coach
      GROUP BY coach_name,
               gender) AS RHS ON (LHS.rank = RHS.n))
ORDER BY club_id;",2,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/riding_club/0008,"summarise(input0, 'n = n()', ""'occupation','sponsor_name'""), limit(line0, 'desc(sponsor_name)')","SELECT occupation
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT occupation,
                sponsor_name,
                COUNT() AS n
         FROM df_player
         GROUP BY occupation,
                  sponsor_name)
      ORDER BY sponsor_name DESC)
   LIMIT 1);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/riding_club/0003,df_player,"SELECT gender,
       occupation
FROM df_player
ORDER BY gender;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/riding_club/0013,"left_join(input2, input1), inner_join(input0, line0, ""'player_id'"")","SELECT player_name,
       coach_name
FROM
  (SELECT LHS.player_id AS player_id,
          LHS.sponsor_name AS sponsor_name,
          LHS.player_name AS player_name,
          LHS.gender AS gender,
          LHS.residence AS residence,
          LHS.occupation AS occupation,
          LHS.votes AS votes,
          LHS.rank AS rank,
          RHS.coach_id AS coach_id,
          RHS.starting_year AS starting_year,
          RHS.coach_name AS coach_name,
          RHS.gender AS gender_other,
          RHS.club_id AS club_id,
          RHS.rank AS rank_other
   FROM df_player AS LHS
   INNER JOIN
     (SELECT LHS.player_id AS player_id,
             LHS.coach_id AS coach_id,
             LHS.starting_year AS starting_year,
             RHS.coach_name AS coach_name,
             RHS.gender AS gender,
             RHS.club_id AS club_id,
             RHS.rank AS rank
      FROM df_player_coach AS LHS
      LEFT JOIN df_coach AS RHS ON (LHS.coach_id = RHS.coach_id)) AS RHS ON (LHS.player_id = RHS.player_id))
ORDER BY player_name;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
spider/riding_club/0006,"limit(input0, 'desc(votes)')","SELECT player_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_player
      ORDER BY votes DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/riding_club/0004,"filter(input0, ""occupation != 'Researcher'""), natural_join(input0, line0)","SELECT `player_name`,
       `residence`
FROM
  (SELECT `LHS`.`player_id` AS `player_id`,
          `LHS`.`sponsor_name` AS `sponsor_name`,
          `LHS`.`player_name` AS `player_name`,
          `LHS`.`gender` AS `gender`,
          `LHS`.`residence` AS `residence`,
          `LHS`.`occupation` AS `occupation`,
          `LHS`.`votes` AS `votes`,
          `LHS`.`rank` AS `rank`
   FROM `df_player` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_player`
      WHERE (`occupation` != 'Researcher')) AS RHS ON (LHS.player_id = RHS.player_id
                                                       AND LHS.sponsor_name = RHS.sponsor_name
                                                       AND LHS.player_name = RHS.player_name
                                                       AND LHS.gender = RHS.gender
                                                       AND LHS.residence = RHS.residence
                                                       AND LHS.occupation = RHS.occupation
                                                       AND LHS.votes = RHS.votes
                                                       AND LHS.rank = RHS.rank))
ORDER BY player_name;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/riding_club/0012,"filter(input2, 'starting_year > 2011L'), semi_join(line0, input1), semi_join(input0, line1)","SELECT player_name,
       gender
FROM
  (SELECT *
   FROM df_player AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT *
              FROM df_player_coach
              WHERE (starting_year > 2011)) AS LHS
           WHERE EXISTS
               (SELECT 1
                FROM df_coach AS RHS
                WHERE (LHS.coach_id = RHS.coach_id) )) AS RHS
        WHERE (LHS.player_id = RHS.player_id) ))
ORDER BY player_name;",3,19,6,0,6,0,5,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,0,0,0
spider/riding_club/0015,"filter(input0, ""gender != 'M' | gender == 'F'""), intersect(line0, input0, 'rank'), anti_join(input0, line1, '')","SELECT `residence`
FROM
  (SELECT *
   FROM `df_player` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT `rank`
           FROM `df_player`
           WHERE (`gender` != 'M'
                  OR `gender` = 'F') INTERSECT
             SELECT rank
             FROM df_player) AS RHS
        WHERE (LHS.rank = RHS.rank) ))
ORDER BY residence;",3,17,5,0,5,0,3,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0
spider/riding_club/0005,"filter(input0, ""residence == 'Brandon' | residence == 'Birtle'""), semi_join(input0, line0)","SELECT `sponsor_name`
FROM
  (SELECT *
   FROM `df_player` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_player`
           WHERE (`residence` = 'Brandon'
                  OR `residence` = 'Birtle')) AS RHS
        WHERE (LHS.player_id = RHS.player_id
               AND LHS.sponsor_name = RHS.sponsor_name
               AND LHS.player_name = RHS.player_name
               AND LHS.gender = RHS.gender
               AND LHS.residence = RHS.residence
               AND LHS.occupation = RHS.occupation
               AND LHS.votes = RHS.votes
               AND LHS.rank = RHS.rank) ))
ORDER BY sponsor_name;",2,13,4,0,4,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/riding_club/0016,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'club_id','club_name'"")","SELECT club_id,
       club_name,
       n AS count___
FROM
  (SELECT club_id,
          club_name,
          COUNT() AS n
   FROM
     (SELECT LHS.club_id AS club_id,
             LHS.club_name AS club_name,
             LHS.region AS region,
             LHS.start_year AS start_year,
             RHS.coach_id AS coach_id,
             RHS.coach_name AS coach_name,
             RHS.gender AS gender,
             RHS.rank AS rank
      FROM df_club AS LHS
      INNER JOIN df_coach AS RHS ON (LHS.club_id = RHS.club_id))
   GROUP BY club_id,
            club_name)
ORDER BY club_id;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/riding_club/0007,"summarise(input0, 'n = n()', ""'occupation','rank'"")","SELECT occupation,
       n AS count___
FROM
  (SELECT occupation,
          rank,
          COUNT() AS n
   FROM df_player
   GROUP BY occupation,
            rank)
ORDER BY occupation;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/riding_club/0001,"summarise(input0, 'n = n()', ""'occupation','votes'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT occupation,
          votes,
          COUNT() AS n
   FROM df_player
   GROUP BY occupation,
            votes)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/riding_club/0014,"anti_join(input0, input1, ""'player_id'"")","SELECT player_name
FROM
  (SELECT *
   FROM df_player AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_player_coach AS RHS
        WHERE (LHS.player_id = RHS.player_id) ))
ORDER BY player_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/riding_club/0009,"summarise(input0, 'n = n()', ""'gender','residence'""), semi_join(line0, input0), filter(line1, 'n > 2L')","SELECT DISTINCT residence
FROM
  (SELECT *
   FROM
     (SELECT gender,
             residence,
             COUNT() AS n
      FROM df_player
      GROUP BY gender,
               residence) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM df_player AS RHS
        WHERE (LHS.gender = RHS.gender
               AND LHS.residence = RHS.residence) ))
WHERE (n > 2)
ORDER BY residence;",3,13,4,1,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0
spider/riding_club/0011,"filter(input1, 'rank == 1L'), semi_join(input2, line0), natural_join3(input0, input2, line1)","SELECT player_name
FROM
  (SELECT LHS.player_id AS player_id,
          LHS.sponsor_name AS sponsor_name,
          LHS.player_name AS player_name,
          LHS.gender AS gender,
          LHS.residence AS residence,
          LHS.occupation AS occupation,
          LHS.votes AS votes,
          LHS.rank AS rank,
          LHS.coach_id AS coach_id,
          LHS.starting_year AS starting_year
   FROM
     (SELECT LHS.player_id AS player_id,
             LHS.sponsor_name AS sponsor_name,
             LHS.player_name AS player_name,
             LHS.gender AS gender,
             LHS.residence AS residence,
             LHS.occupation AS occupation,
             LHS.votes AS votes,
             LHS.rank AS rank,
             RHS.coach_id AS coach_id,
             RHS.starting_year AS starting_year
      FROM df_player AS LHS
      INNER JOIN df_player_coach AS RHS ON (LHS.player_id = RHS.player_id)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_player_coach AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM df_coach
              WHERE (rank = 1)) AS RHS
           WHERE (LHS.coach_id = RHS.coach_id) )) AS RHS ON (LHS.player_id = RHS.player_id
                                                             AND LHS.coach_id = RHS.coach_id
                                                             AND LHS.starting_year = RHS.starting_year))
ORDER BY player_name;",3,18,6,0,6,2,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0
spider/riding_club/0010,"left_join(input2, input1), inner_join(input0, line0, ""'player_id'"")","SELECT player_name,
       coach_name
FROM
  (SELECT LHS.player_id AS player_id,
          LHS.sponsor_name AS sponsor_name,
          LHS.player_name AS player_name,
          LHS.gender AS gender,
          LHS.residence AS residence,
          LHS.occupation AS occupation,
          LHS.votes AS votes,
          LHS.rank AS rank,
          RHS.coach_id AS coach_id,
          RHS.starting_year AS starting_year,
          RHS.coach_name AS coach_name,
          RHS.gender AS gender_other,
          RHS.club_id AS club_id,
          RHS.rank AS rank_other
   FROM df_player AS LHS
   INNER JOIN
     (SELECT LHS.player_id AS player_id,
             LHS.coach_id AS coach_id,
             LHS.starting_year AS starting_year,
             RHS.coach_name AS coach_name,
             RHS.gender AS gender,
             RHS.club_id AS club_id,
             RHS.rank AS rank
      FROM df_player_coach AS LHS
      LEFT JOIN df_coach AS RHS ON (LHS.coach_id = RHS.coach_id)) AS RHS ON (LHS.player_id = RHS.player_id))
ORDER BY player_name;",2,8,3,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
spider/match_season/0002,df_country,"SELECT country_name,
       capital
FROM df_country
ORDER BY country_name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/match_season/0017,"inner_join(input0, input1, ""'team_id' = 'team'""), filter(line0, ""name == 'Ryley Goldner'"")","SELECT `position`
FROM
  (SELECT `team_id`,
          `name`,
          `season`,
          `player`,
          `position`,
          `country`,
          `draft_pick_number`,
          `draft_class`,
          `college`,
          `team_id` AS `team`
   FROM
     (SELECT `LHS`.`team_id` AS `team_id`,
             `LHS`.`name` AS `name`,
             `RHS`.`season` AS `season`,
             `RHS`.`player` AS `player`,
             `RHS`.`position` AS `position`,
             `RHS`.`country` AS `country`,
             `RHS`.`draft_pick_number` AS `draft_pick_number`,
             `RHS`.`draft_class` AS `draft_class`,
             `RHS`.`college` AS `college`
      FROM `df_team` AS `LHS`
      INNER JOIN `df_match_season` AS `RHS` ON (`LHS`.`team_id` = `RHS`.`team`)))
WHERE (`name` = 'Ryley Goldner')
ORDER BY POSITION;",2,9,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/match_season/0008,"mutate(input0, 'n_distinct = n_distinct(team)')","SELECT DISTINCT COUNT(DISTINCT team) OVER () AS count_distinct_team_
FROM df_match_season
ORDER BY count_distinct_team_;",1,5,1,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/match_season/0027,"inner_join(input0, input1, ""'team_id' = 'team'""), anti_join(input0, line0, '')","SELECT name
FROM
  (SELECT *
   FROM df_team AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT team_id,
                  name,
                  season,
                  player,
                  POSITION,
                  country,
                  draft_pick_number,
                  draft_class,
                  college,
                  team_id AS team
           FROM
             (SELECT LHS.team_id AS team_id,
                     LHS.name AS name,
                     RHS.season AS season,
                     RHS.player AS player,
                     RHS.position AS POSITION,
                     RHS.country AS country,
                     RHS.draft_pick_number AS draft_pick_number,
                     RHS.draft_class AS draft_class,
                     RHS.college AS college
              FROM df_team AS LHS
              INNER JOIN df_match_season AS RHS ON (LHS.team_id = RHS.team))) AS RHS
        WHERE (LHS.team_id = RHS.team_id
               AND LHS.name = RHS.name) ))
ORDER BY name;",2,17,5,0,5,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
spider/match_season/0022,df_match_season,"SELECT player
FROM df_match_season
ORDER BY player;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/match_season/0013,"filter(input0, ""capital == 'Dublin'""), inner_join(line0, input1, ""'country_id' = 'country'"")","SELECT DISTINCT `position`
FROM
  (SELECT `LHS`.`country_id` AS `country_id`,
          `LHS`.`country_name` AS `country_name`,
          `LHS`.`capital` AS `capital`,
          `LHS`.`official_native_language` AS `official_native_language`,
          `RHS`.`season` AS `season`,
          `RHS`.`player` AS `player`,
          `RHS`.`position` AS `position`,
          `RHS`.`team` AS `team`,
          `RHS`.`draft_pick_number` AS `draft_pick_number`,
          `RHS`.`draft_class` AS `draft_class`,
          `RHS`.`college` AS `college`
   FROM
     (SELECT *
      FROM `df_country`
      WHERE (`capital` = 'Dublin')) AS LHS
   INNER JOIN df_match_season AS RHS ON (LHS.country_id = RHS.country))
ORDER BY POSITION;",2,10,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/match_season/0006,"filter(input0, ""college != 'Duke'""), filter(line0, ""college == 'UCLA'"")","SELECT DISTINCT `position`
FROM
  (SELECT *
   FROM `df_match_season`
   WHERE (`college` != 'Duke'))
WHERE (`college` = 'UCLA')
ORDER BY POSITION;",2,8,2,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/match_season/0004,df_match_season,"SELECT DISTINCT POSITION
FROM df_match_season
ORDER BY POSITION;",0,5,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/match_season/0012,"filter(input0, ""country_name == 'Indonesia'""), natural_join(input2, line0), inner_join(line1, input1, ""'country_id' = 'country'"")","SELECT DISTINCT `player_other` AS `player`
FROM
  (SELECT `LHS`.`player_id` AS `player_id`,
          `LHS`.`player` AS `player`,
          `LHS`.`years_played` AS `years_played`,
          `LHS`.`total_wl` AS `total_wl`,
          `LHS`.`singles_wl` AS `singles_wl`,
          `LHS`.`doubles_wl` AS `doubles_wl`,
          `LHS`.`team` AS `team`,
          `LHS`.`country_id` AS `country_id`,
          `LHS`.`country_name` AS `country_name`,
          `LHS`.`capital` AS `capital`,
          `LHS`.`official_native_language` AS `official_native_language`,
          `RHS`.`season` AS `season`,
          `RHS`.`player` AS `player_other`,
          `RHS`.`position` AS `position`,
          `RHS`.`team` AS `team_other`,
          `RHS`.`draft_pick_number` AS `draft_pick_number`,
          `RHS`.`draft_class` AS `draft_class`,
          `RHS`.`college` AS `college`
   FROM
     (SELECT `LHS`.`player_id` AS `player_id`,
             `LHS`.`player` AS `player`,
             `LHS`.`years_played` AS `years_played`,
             `LHS`.`total_wl` AS `total_wl`,
             `LHS`.`singles_wl` AS `singles_wl`,
             `LHS`.`doubles_wl` AS `doubles_wl`,
             `LHS`.`team` AS `team`,
             `RHS`.`country_id` AS `country_id`,
             `RHS`.`country_name` AS `country_name`,
             `RHS`.`capital` AS `capital`,
             `RHS`.`official_native_language` AS `official_native_language`
      FROM `df_player` AS `LHS`
      CROSS JOIN
        (SELECT *
         FROM `df_country`
         WHERE (`country_name` = 'Indonesia')) AS RHS) AS LHS
   INNER JOIN df_match_season AS RHS ON (LHS.country_id = RHS.country))
ORDER BY player;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0
spider/match_season/0026,"summarise(input0, 'n = n()', ""'college','draft_pick_number'""), summarise(line0, 'n = n()', ""'college'""), filter(line1, 'n >= 2L')","SELECT college
FROM
  (SELECT college,
          COUNT() AS n
   FROM
     (SELECT college,
             draft_pick_number,
             COUNT() AS n
      FROM df_match_season
      GROUP BY college,
               draft_pick_number)
   GROUP BY college)
WHERE (n >= 2)
ORDER BY college;",3,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0
spider/match_season/0015,"filter(input1, ""position != 'Defender'""), natural_join(input0, line0), mutate(line1, 'n_distinct = n_distinct(position)')","SELECT DISTINCT COUNT(DISTINCT `position`) OVER () AS `count_distinct_t1_official_native_language_`
FROM
  (SELECT `LHS`.`country_id` AS `country_id`,
          `LHS`.`country_name` AS `country_name`,
          `LHS`.`capital` AS `capital`,
          `LHS`.`official_native_language` AS `official_native_language`,
          `RHS`.`season` AS `season`,
          `RHS`.`player` AS `player`,
          `RHS`.`position` AS `position`,
          `RHS`.`country` AS `country`,
          `RHS`.`team` AS `team`,
          `RHS`.`draft_pick_number` AS `draft_pick_number`,
          `RHS`.`draft_class` AS `draft_class`,
          `RHS`.`college` AS `college`
   FROM `df_country` AS `LHS`
   CROSS JOIN
     (SELECT *
      FROM `df_match_season`
      WHERE (`position` != 'Defender')) AS RHS)
ORDER BY count_distinct_t1_official_native_language_;",3,10,3,2,3,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/match_season/0005,"anti_join(input0, input1, ""'team'""), filter(line0, ""college == 'UCLA'"")","SELECT `player`
FROM
  (SELECT *
   FROM `df_match_season` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM `df_player` AS `RHS`
        WHERE (`LHS`.`team` = `RHS`.`team`) ))
WHERE (`college` = 'UCLA')
ORDER BY player;",2,11,3,0,3,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/match_season/0016,"anti_join(input1, input2, ''), inner_join(input0, line0, ""'team_id' = 'team'"")","SELECT season,
       player,
       name
FROM
  (SELECT LHS.team_id AS team_id,
          LHS.name AS name,
          RHS.season AS season,
          RHS.player AS player,
          RHS.position AS POSITION,
          RHS.country AS country,
          RHS.draft_pick_number AS draft_pick_number,
          RHS.draft_class AS draft_class,
          RHS.college AS college
   FROM df_team AS LHS
   INNER JOIN
     (SELECT *
      FROM df_match_season AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM df_player AS RHS
           WHERE (LHS.player = RHS.player
                  AND LHS.team = RHS.team) )) AS RHS ON (LHS.team_id = RHS.team))
ORDER BY season;",2,14,4,0,4,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
spider/match_season/0018,"natural_join(input0, input1), filter(line0, ""name == 'Columbus Crew'""), mutate(line1, 'n_distinct = n_distinct(name)')","SELECT DISTINCT `team_id` AS `count_distinct_t1_college_`
FROM
  (SELECT `LHS`.`team_id` AS `team_id`,
          `LHS`.`name` AS `name`,
          `RHS`.`season` AS `season`,
          `RHS`.`player` AS `player`,
          `RHS`.`position` AS `position`,
          `RHS`.`country` AS `country`,
          `RHS`.`team` AS `team`,
          `RHS`.`draft_pick_number` AS `draft_pick_number`,
          `RHS`.`draft_class` AS `draft_class`,
          `RHS`.`college` AS `college`
   FROM `df_team` AS `LHS`
   CROSS JOIN `df_match_season` AS `RHS`)
WHERE (`name` = 'Columbus Crew')
ORDER BY count_distinct_t1_college_;",3,6,2,1,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/match_season/0020,"summarise(input0, 'n = n()', ""'position'"")","SELECT POSITION,
       n AS count___
FROM
  (SELECT POSITION,
          COUNT() AS n
   FROM df_match_season
   GROUP BY POSITION)
ORDER BY POSITION;",1,8,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/match_season/0019,"inner_join(input0, input1, ""'team_id' = 'team'""), filter(line0, ""name == 'Columbus Crew'"")","SELECT `player`,
       `years_played`
FROM
  (SELECT `team_id`,
          `name`,
          `player_id`,
          `player`,
          `years_played`,
          `total_wl`,
          `singles_wl`,
          `doubles_wl`,
          `team_id` AS `team`
   FROM
     (SELECT `LHS`.`team_id` AS `team_id`,
             `LHS`.`name` AS `name`,
             `RHS`.`player_id` AS `player_id`,
             `RHS`.`player` AS `player`,
             `RHS`.`years_played` AS `years_played`,
             `RHS`.`total_wl` AS `total_wl`,
             `RHS`.`singles_wl` AS `singles_wl`,
             `RHS`.`doubles_wl` AS `doubles_wl`
      FROM `df_team` AS `LHS`
      INNER JOIN `df_player` AS `RHS` ON (`LHS`.`team_id` = `RHS`.`team`)))
WHERE (`name` = 'Columbus Crew')
ORDER BY player;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/match_season/0007,"filter(input0, ""position == 'Defender'""), semi_join(input0, line0)","SELECT `draft_pick_number`,
       `draft_class`
FROM
  (SELECT *
   FROM `df_match_season` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_match_season`
           WHERE (`position` = 'Defender')) AS RHS
        WHERE (LHS.season = RHS.season
               AND LHS.player = RHS.player
               AND LHS.position = RHS.position
               AND LHS.country = RHS.country
               AND LHS.team = RHS.team
               AND LHS.draft_pick_number = RHS.draft_pick_number
               AND LHS.draft_class = RHS.draft_class
               AND LHS.college = RHS.college) ))
ORDER BY draft_pick_number;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/match_season/0024,"summarise(input0, 'n = n()', ""'college'""), limit(line0, 'desc(n)')","SELECT college
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT college,
                COUNT() AS n
         FROM df_match_season
         GROUP BY college)
      ORDER BY n DESC)
   LIMIT 3);",1,10,4,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/match_season/0021,"summarise(input1, 'n = n()', ""'country'""), inner_join(input0, line0, ""'country_id' = 'country'"")","SELECT country_name,
       n AS count___
FROM
  (SELECT LHS.country_id AS country_id,
          LHS.country_name AS country_name,
          LHS.capital AS capital,
          LHS.official_native_language AS official_native_language,
          RHS.n AS n
   FROM df_country AS LHS
   INNER JOIN
     (SELECT country,
             COUNT() AS n
      FROM df_match_season
      GROUP BY country) AS RHS ON (LHS.country_id = RHS.country))
ORDER BY country_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0
spider/match_season/0023,"summarise(input0, 'n = n()', ""'position','team'""), limit(line0, 'n')","SELECT POSITION
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT POSITION,
                team,
                COUNT() AS n
         FROM df_match_season
         GROUP BY POSITION,
                  team)
      ORDER BY n)
   LIMIT 1);",1,12,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/match_season/0001,"summarise(input0, 'n = n()', ""'capital','official_native_language'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT capital,
          official_native_language,
          COUNT() AS n
   FROM df_country
   GROUP BY capital,
            official_native_language)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/match_season/0014,"filter(input1, ""college == 'Maryland' | college == 'Duke'""), inner_join(input0, line0, ""'country_id' = 'country'"")","SELECT `official_native_language`
FROM
  (SELECT `LHS`.`country_id` AS `country_id`,
          `LHS`.`country_name` AS `country_name`,
          `LHS`.`capital` AS `capital`,
          `LHS`.`official_native_language` AS `official_native_language`,
          `RHS`.`season` AS `season`,
          `RHS`.`player` AS `player`,
          `RHS`.`position` AS `position`,
          `RHS`.`team` AS `team`,
          `RHS`.`draft_pick_number` AS `draft_pick_number`,
          `RHS`.`draft_class` AS `draft_class`,
          `RHS`.`college` AS `college`
   FROM `df_country` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_match_season`
      WHERE (`college` = 'Maryland'
             OR `college` = 'Duke')) AS RHS ON (LHS.country_id = RHS.country))
ORDER BY official_native_language;",2,9,3,0,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
spider/match_season/0009,df_player,"SELECT player,
       years_played
FROM df_player
ORDER BY player;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/match_season/0025,"summarise(input0, 'n = n()', ""'college'""), filter(line0, 'n >= 2L')","SELECT college
FROM
  (SELECT college,
          COUNT() AS n
   FROM df_match_season
   GROUP BY college)
WHERE (n >= 2)
ORDER BY college;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/match_season/0011,"anti_join(input1, input2, ''), inner_join(input0, line0, ""'country_id' = 'country'"")","SELECT season,
       player,
       country_name
FROM
  (SELECT LHS.country_id AS country_id,
          LHS.country_name AS country_name,
          LHS.capital AS capital,
          LHS.official_native_language AS official_native_language,
          RHS.season AS season,
          RHS.player AS player,
          RHS.position AS POSITION,
          RHS.team AS team,
          RHS.draft_pick_number AS draft_pick_number,
          RHS.draft_class AS draft_class,
          RHS.college AS college
   FROM df_country AS LHS
   INNER JOIN
     (SELECT *
      FROM df_match_season AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM df_player AS RHS
           WHERE (LHS.player = RHS.player
                  AND LHS.team = RHS.team) )) AS RHS ON (LHS.country_id = RHS.country))
ORDER BY season;",2,14,4,0,4,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
spider/match_season/0029,"filter(input0, ""position != 'Midfielder' | position == 'Defender'""), anti_join(input0, line0, ""'college','draft_pick_number'""), intersect(line0, line1, 'college')","SELECT `college`
FROM
  (SELECT `college`
   FROM `df_match_season`
   WHERE (`position` != 'Midfielder'
          OR `position` = 'Defender') INTERSECT
     SELECT `college`
     FROM
       (SELECT *
        FROM `df_match_season` AS `LHS`
        WHERE NOT EXISTS
            (SELECT 1
             FROM
               (SELECT *
                FROM `df_match_season`
                WHERE (`position` != 'Midfielder'
                       OR `position` = 'Defender')) AS RHS
             WHERE (LHS.college = RHS.college
                    AND LHS.draft_pick_number = RHS.draft_pick_number) )))
ORDER BY college;",3,21,6,0,6,0,4,0,0,0,2,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0
spider/match_season/0010,df_team,"SELECT name
FROM df_team
ORDER BY name;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/match_season/0028,"filter(input1, ""position != 'Forward' & position != 'Defender'""), natural_join(input0, input1), inner_join(line0, line1, ""'team' = 'country','draft_pick_number' = 'country_id'"")","SELECT DISTINCT `country_name`
FROM
  (SELECT `season`,
          `player`,
          `position`,
          `team` AS `country`,
          `team`,
          `draft_pick_number`,
          `draft_class`,
          `college`,
          `country_name`,
          `capital`,
          `official_native_language`,
          `season_other`,
          `player_other`,
          `position_other`,
          `team_other`,
          `draft_pick_number_other`,
          `draft_class_other`,
          `college_other`
   FROM
     (SELECT `LHS`.`season` AS `season`,
             `LHS`.`player` AS `player`,
             `LHS`.`position` AS `position`,
             `LHS`.`country` AS `country`,
             `LHS`.`team` AS `team`,
             `LHS`.`draft_pick_number` AS `draft_pick_number`,
             `LHS`.`draft_class` AS `draft_class`,
             `LHS`.`college` AS `college`,
             `RHS`.`country_name` AS `country_name`,
             `RHS`.`capital` AS `capital`,
             `RHS`.`official_native_language` AS `official_native_language`,
             `RHS`.`season` AS `season_other`,
             `RHS`.`player` AS `player_other`,
             `RHS`.`position` AS `position_other`,
             `RHS`.`team` AS `team_other`,
             `RHS`.`draft_pick_number` AS `draft_pick_number_other`,
             `RHS`.`draft_class` AS `draft_class_other`,
             `RHS`.`college` AS `college_other`
      FROM
        (SELECT *
         FROM `df_match_season`
         WHERE (`position` != 'Forward'
                AND `position` != 'Defender')) AS LHS
      INNER JOIN
        (SELECT LHS.country_id AS country_id,
                LHS.country_name AS country_name,
                LHS.capital AS capital,
                LHS.official_native_language AS official_native_language,
                RHS.season AS season,
                RHS.player AS player,
                RHS.position AS POSITION,
                RHS.country AS country,
                RHS.team AS team,
                RHS.draft_pick_number AS draft_pick_number,
                RHS.draft_class AS draft_class,
                RHS.college AS college
         FROM df_country AS LHS
         CROSS JOIN df_match_season AS RHS) AS RHS ON (LHS.team = RHS.country
                                                       AND LHS.draft_pick_number = RHS.country_id)))
ORDER BY country_name;",3,14,5,1,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0
spider/soccer_2/0042,"filter(input0, ""ppos == 'mid'""), filter(input0, ""ppos == 'goalie'""), intersect(line0, line1, 'cname')","SELECT `cname`
FROM
  (SELECT `cname`
   FROM `df_tryout`
   WHERE (`ppos` = 'mid') INTERSECT
     SELECT `cname`
     FROM `df_tryout` WHERE (`ppos` = 'goalie'))
ORDER BY cname;",3,9,3,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0
spider/soccer_2/0033,"filter(input1, ""pname == 'Charles'""), natural_join3(input0, input2, line0)","SELECT `state`
FROM
  (SELECT `LHS`.`cname` AS `cname`,
          `LHS`.`state` AS `state`,
          `LHS`.`enr` AS `enr`,
          `LHS`.`pid` AS `pid`,
          `LHS`.`ppos` AS `ppos`,
          `LHS`.`decision` AS `decision`,
          `RHS`.`pname` AS `pname`,
          `RHS`.`ycard` AS `ycard`,
          `RHS`.`hs` AS `hs`
   FROM
     (SELECT `LHS`.`cname` AS `cname`,
             `LHS`.`state` AS `state`,
             `LHS`.`enr` AS `enr`,
             `RHS`.`pid` AS `pid`,
             `RHS`.`ppos` AS `ppos`,
             `RHS`.`decision` AS `decision`
      FROM `df_college` AS `LHS`
      INNER JOIN `df_tryout` AS `RHS` ON (`LHS`.`cname` = `RHS`.`cname`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_player`
      WHERE (`pname` = 'Charles')) AS RHS ON (LHS.pid = RHS.pid))
ORDER BY state;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/soccer_2/0002,"summarise(input0, 'meanenr = mean(enr, na.rm = T)', ""'enr'""), summarise(line0, 'meanenr = mean(enr, na.rm = T)', '')","SELECT meanenr AS avg_enr_
FROM
  (SELECT AVG(enr) AS meanenr
   FROM
     (SELECT enr,
             AVG(enr) AS meanenr
      FROM df_college
      GROUP BY enr))
ORDER BY avg_enr_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0036,"natural_join(input0, input1), filter(line0, 'hs >= 1000'), mutate(line1, 'hs = max(hs)')","SELECT DISTINCT MAX(hs) OVER () AS max_t1_hs_,
                             ppos
FROM
  (SELECT LHS.pid AS pid,
          LHS.pname AS pname,
          LHS.ycard AS ycard,
          LHS.hs AS hs,
          RHS.cname AS cname,
          RHS.ppos AS ppos,
          RHS.decision AS decision
   FROM df_player AS LHS
   INNER JOIN df_tryout AS RHS ON (LHS.pid = RHS.pid))
WHERE (hs >= 1000.0)
ORDER BY max_t1_hs_;",3,8,2,1,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/soccer_2/0017,df_college,"SELECT cname,
       state,
       enr
FROM df_college
ORDER BY cname;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0052,"summarise(input0, 'meanenr = mean(enr, na.rm = T)', ""'enr','state'""), cross_join(line0, input0, 'enr > enr.other | meanenr > enr.other'), mutate(line1, 'n_distinct = n_distinct(enr)')","SELECT DISTINCT COUNT(DISTINCT enr) OVER () AS count_distinct_state_
FROM
  (SELECT LHS.enr AS enr,
          LHS.state AS state,
          LHS.meanenr AS meanenr,
          RHS.cname AS cname,
          RHS.state AS state_other,
          RHS.enr AS enr_other
   FROM
     (SELECT enr,
             state,
             AVG(enr) AS meanenr
      FROM df_college
      GROUP BY enr,
               state) AS LHS
   CROSS JOIN df_college AS RHS)
WHERE (enr > enr_other
       OR meanenr > enr_other)
ORDER BY count_distinct_state_;",3,11,3,2,3,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0
spider/soccer_2/0008,"summarise(input0, 'n_distinct = n_distinct(cname)', '')","SELECT n_distinct AS count_distinct_cname_
FROM
  (SELECT COUNT(DISTINCT cname) AS n_distinct
   FROM df_tryout)
ORDER BY count_distinct_cname_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0039,"natural_join3(input0, input1, input2), limit(line0, 'desc(state)')","SELECT pname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.cname AS cname,
                LHS.state AS state,
                LHS.enr AS enr,
                LHS.pid AS pid,
                LHS.pname AS pname,
                LHS.ycard AS ycard,
                LHS.hs AS hs,
                RHS.ppos AS ppos,
                RHS.decision AS decision
         FROM
           (SELECT LHS.cname AS cname,
                   LHS.state AS state,
                   LHS.enr AS enr,
                   RHS.pid AS pid,
                   RHS.pname AS pname,
                   RHS.ycard AS ycard,
                   RHS.hs AS hs
            FROM df_college AS LHS
            CROSS JOIN df_player AS RHS) AS LHS
         INNER JOIN df_tryout AS RHS ON (LHS.cname = RHS.cname
                                         AND LHS.pid = RHS.pid))
      ORDER BY state DESC)
   LIMIT 1);",1,13,5,0,5,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
spider/soccer_2/0038,"filter(input0, ""decision == 'yes' & ppos == 'goalie'"")","SELECT `cname`
FROM `df_tryout`
WHERE (`decision` = 'yes'
       AND `ppos` = 'goalie')
ORDER BY cname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0003,"summarise(input0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM df_college)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0027,"filter(input1, ""decision == 'yes'""), natural_join3(input0, input1, line0)","SELECT `state`
FROM
  (SELECT `LHS`.`cname` AS `cname`,
          `LHS`.`state` AS `state`,
          `LHS`.`enr` AS `enr`,
          `LHS`.`pid` AS `pid`,
          `LHS`.`ppos` AS `ppos`,
          `LHS`.`decision` AS `decision`
   FROM
     (SELECT `LHS`.`cname` AS `cname`,
             `LHS`.`state` AS `state`,
             `LHS`.`enr` AS `enr`,
             `RHS`.`pid` AS `pid`,
             `RHS`.`ppos` AS `ppos`,
             `RHS`.`decision` AS `decision`
      FROM `df_college` AS `LHS`
      INNER JOIN `df_tryout` AS `RHS` ON (`LHS`.`cname` = `RHS`.`cname`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_tryout`
      WHERE (`decision` = 'yes')) AS RHS ON (LHS.cname = RHS.cname
                                             AND LHS.pid = RHS.pid
                                             AND LHS.ppos = RHS.ppos
                                             AND LHS.decision = RHS.decision))
ORDER BY state;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/soccer_2/0048,"summarise(input0, 'enr = max(enr)', ''), anti_join(input0, line0, '')","SELECT state
FROM
  (SELECT *
   FROM df_college AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT MAX(enr) AS enr
           FROM df_college) AS RHS
        WHERE (LHS.enr = RHS.enr) ))
ORDER BY state;",2,12,4,0,4,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
spider/soccer_2/0022,"summarise(input0, 'n = n()', ""'cname'"")","SELECT n AS count___,
       cname
FROM
  (SELECT cname,
          COUNT() AS n
   FROM df_tryout
   GROUP BY cname)
ORDER BY count___;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0053,"summarise(input0, 'meanenr = mean(enr, na.rm = T)', ""'enr'""), summarise(line0, 'n = n()', ""'enr'"")","SELECT DISTINCT n AS count_distinct_state_
FROM
  (SELECT enr,
          COUNT() AS n
   FROM
     (SELECT enr,
             AVG(enr) AS meanenr
      FROM df_college
      GROUP BY enr)
   GROUP BY enr)
ORDER BY count_distinct_state_;",2,7,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0030,"filter(input1, ""decision == 'yes'""), semi_join(input0, line0)","SELECT `pname`,
       `hs`
FROM
  (SELECT *
   FROM `df_player` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_tryout`
           WHERE (`decision` = 'yes')) AS RHS
        WHERE (LHS.pid = RHS.pid) ))
ORDER BY pname;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/soccer_2/0013,"filter(input0, ""state == 'FL'""), mutate(line0, 'meanenr = mean(enr, na.rm = T)')","SELECT `enr` AS `avg_enr_`
FROM `df_college`
WHERE (`state` = 'FL')
ORDER BY avg_enr_;",2,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/soccer_2/0006,"summarise(input0, 'meanhs = mean(hs, na.rm = T)', '')","SELECT meanhs AS avg_hs_
FROM
  (SELECT AVG(hs) AS meanhs
   FROM df_player)
ORDER BY avg_hs_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0004,"filter(input0, 'hs >= 1000'), summarise(line0, 'n = n()', '')","SELECT n AS count___
FROM
  (SELECT COUNT() AS n
   FROM
     (SELECT *
      FROM df_player
      WHERE (hs >= 1000.0)))
ORDER BY count___;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0012,"mutate(input0, 'minhs = min(hs)'), mutate(line0, 'maxhs = max(hs)'), mutate(line1, 'meanhs = mean(hs, na.rm = T)')","SELECT DISTINCT AVG(hs) OVER () AS avg_hs_,
                             maxhs AS max_hs_,
                             minhs AS min_hs_
FROM
  (SELECT pid,
          pname,
          ycard,
          hs,
          minhs,
          MAX(hs) OVER () AS maxhs
   FROM
     (SELECT pid,
             pname,
             ycard,
             hs,
             MIN(hs) OVER () AS minhs
      FROM df_player))
ORDER BY avg_hs_;",3,10,3,1,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0
spider/soccer_2/0026,df_college,"SELECT state
FROM df_college
ORDER BY state;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0005,"filter(input0, 'enr >= 15000'), summarise(line0, 'n_distinct = n_distinct(enr)', '')","SELECT n_distinct AS count___
FROM
  (SELECT COUNT(DISTINCT enr) AS n_distinct
   FROM
     (SELECT *
      FROM df_college
      WHERE (enr >= 15000.0)))
ORDER BY count___;",2,8,3,1,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0016,"filter(input0, ""state == 'LA' | enr == 10000"")","SELECT `cname`,
       `enr`
FROM `df_college`
WHERE (`state` = 'LA'
       OR enr = 10000.0)
ORDER BY cname;",1,4,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0050,"mutate(input0, 'maxenr = max(enr)'), filter(line0, ""state != 'FL' & maxenr == enr"")","SELECT `cname`
FROM
  (SELECT `cname`,
          `state`,
          `enr`,
          MAX(`enr`) OVER () AS `maxenr`
   FROM `df_college`)
WHERE (`state` != 'FL'
       AND maxenr = enr)
ORDER BY cname;",2,6,2,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/soccer_2/0032,"filter(input1, ""decision == 'yes' & ppos == 'striker'""), natural_join(input0, line0)","SELECT `pname`
FROM
  (SELECT `LHS`.`pid` AS `pid`,
          `LHS`.`pname` AS `pname`,
          `LHS`.`ycard` AS `ycard`,
          `LHS`.`hs` AS `hs`,
          `RHS`.`cname` AS `cname`,
          `RHS`.`ppos` AS `ppos`,
          `RHS`.`decision` AS `decision`
   FROM `df_player` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_tryout`
      WHERE (`decision` = 'yes'
             AND `ppos` = 'striker')) AS RHS ON (LHS.pid = RHS.pid))
ORDER BY pname;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0045,"filter(input0, ""ppos != 'mid' | ppos == 'goalie'""), cross_join(line0, input0, 'ppos != ppos.other'), anti_join(input0, line1, ""'cname'"")","SELECT `cname`
FROM
  (SELECT *
   FROM `df_tryout` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT `LHS`.`pid` AS `pid`,
                     `LHS`.`cname` AS `cname`,
                     `LHS`.`ppos` AS `ppos`,
                     `LHS`.`decision` AS `decision`,
                     `RHS`.`pid` AS `pid_other`,
                     `RHS`.`cname` AS `cname_other`,
                     `RHS`.`ppos` AS `ppos_other`,
                     `RHS`.`decision` AS `decision_other`
              FROM
                (SELECT *
                 FROM `df_tryout`
                 WHERE (`ppos` != 'mid'
                        OR `ppos` = 'goalie')) AS LHS
              CROSS JOIN df_tryout AS RHS)
           WHERE (ppos != ppos_other)) AS RHS
        WHERE (LHS.cname = RHS.cname) ))
ORDER BY cname;",3,19,6,0,6,0,4,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0
spider/soccer_2/0018,"filter(input0, 'enr > 18000'), natural_join(input0, line0)","SELECT cname
FROM
  (SELECT LHS.cname AS cname,
          LHS.state AS state,
          LHS.enr AS enr
   FROM df_college AS LHS
   INNER JOIN
     (SELECT *
      FROM df_college
      WHERE (enr > 18000.0)) AS RHS ON (LHS.cname = RHS.cname
                                        AND LHS.state = RHS.state
                                        AND LHS.enr = RHS.enr))
ORDER BY cname;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0041,"filter(input0, ""state != 'AZ' | enr < 15000""), filter(line0, ""state == 'LA' | enr <= 13000"")","SELECT `cname`
FROM
  (SELECT *
   FROM `df_college`
   WHERE (`state` != 'AZ'
          OR `enr` < 15000.0))
WHERE (`state` = 'LA'
       OR enr <= 13000.0)
ORDER BY cname;",2,8,2,0,2,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0051,"filter(input1, ""ppos == 'goalie'""), anti_join(input0, line0, ""'cname'""), mutate(line1, 'sumenr = sum(enr)')","SELECT DISTINCT SUM(`enr`) OVER () AS `sum_enr_`
FROM
  (SELECT *
   FROM `df_college` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_tryout`
           WHERE (`ppos` = 'goalie')) AS RHS
        WHERE (LHS.cname = RHS.cname) ))
ORDER BY sum_enr_;",3,15,4,1,4,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
spider/soccer_2/0035,"filter(input1, ""decision == 'no'""), natural_join(input0, line0), mutate(line1, 'meanhs = mean(hs, na.rm = T)')","SELECT DISTINCT AVG(`hs`) OVER () AS `avg_t1_hs_`
FROM
  (SELECT `LHS`.`pid` AS `pid`,
          `LHS`.`pname` AS `pname`,
          `LHS`.`ycard` AS `ycard`,
          `LHS`.`hs` AS `hs`,
          `RHS`.`cname` AS `cname`,
          `RHS`.`ppos` AS `ppos`,
          `RHS`.`decision` AS `decision`
   FROM `df_player` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_tryout`
      WHERE (`decision` = 'no')) AS RHS ON (LHS.pid = RHS.pid))
ORDER BY avg_t1_hs_;",3,10,3,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0
spider/soccer_2/0020,df_tryout,"SELECT DISTINCT cname
FROM df_tryout
ORDER BY cname;",0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0019,"filter(input0, ""ycard == 'yes'"")","SELECT `pname`
FROM `df_player`
WHERE (`ycard` = 'yes')
ORDER BY pname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0007,"filter(input0, 'hs <= 1500')","SELECT pname,
       hs
FROM df_player
WHERE (hs <= 1500.0)
ORDER BY pname;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0034,"filter(input1, ""decision == 'yes'""), semi_join(input0, line0), mutate(line1, 'meanhs = mean(hs, na.rm = T)'), mutate(line2, 'maxhs = max(hs)')","SELECT DISTINCT `meanhs` AS `avg_t1_hs_`,
                MAX(`hs`) OVER () AS `max_t1_hs_`
FROM
  (SELECT `pid`,
          `pname`,
          `ycard`,
          `hs`,
          AVG(`hs`) OVER () AS `meanhs`
   FROM
     (SELECT *
      FROM `df_player` AS `LHS`
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_tryout`
              WHERE (`decision` = 'yes')) AS RHS
           WHERE (LHS.pid = RHS.pid) )))
ORDER BY avg_t1_hs_;",4,17,5,1,5,0,3,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,1,0,0,0
spider/soccer_2/0024,"limit(input0, 'desc(state)')","SELECT cname
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_college
      ORDER BY state DESC)
   LIMIT 3);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0021,"summarise(input0, 'n = n()', ""'decision','ppos'""), limit(line0, 'decision')","SELECT ppos
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT decision,
                ppos,
                COUNT() AS n
         FROM df_tryout
         GROUP BY decision,
                  ppos)
      ORDER BY decision)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0023,"natural_join(input0, input1), summarise(line0, 'minhs = min(hs)', ""'decision','ppos'"")","SELECT DISTINCT minhs AS min_t2_hs_,
                ppos
FROM
  (SELECT decision,
          ppos,
          MIN(hs) AS minhs
   FROM
     (SELECT LHS.pid AS pid,
             LHS.pname AS pname,
             LHS.ycard AS ycard,
             LHS.hs AS hs,
             RHS.cname AS cname,
             RHS.ppos AS ppos,
             RHS.decision AS decision
      FROM df_player AS LHS
      INNER JOIN df_tryout AS RHS ON (LHS.pid = RHS.pid))
   GROUP BY decision,
            ppos)
ORDER BY min_t2_hs_;",2,8,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0001,"summarise(input0, 'sumenr = sum(enr)', '')","SELECT sumenr AS sum_enr_
FROM
  (SELECT SUM(enr) AS sumenr
   FROM df_college)
ORDER BY sum_enr_;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0043,"filter(input1, ""ppos == 'goalie' & ppos != 'mid'""), semi_join(input0, line0), anti_join(input1, line0, ""'pid'""), semi_join(line1, line2)","SELECT `state`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM `df_college` AS `LHS`
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_tryout`
              WHERE (`ppos` = 'goalie'
                     AND `ppos` != 'mid')) AS `RHS`
           WHERE (`LHS`.`cname` = `RHS`.`cname`) )) AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_tryout` AS `LHS`
           WHERE NOT EXISTS
               (SELECT 1
                FROM
                  (SELECT *
                   FROM `df_tryout`
                   WHERE (`ppos` = 'goalie'
                          AND `ppos` != 'mid')) AS RHS
                WHERE (LHS.pid = RHS.pid) )) AS RHS
        WHERE (LHS.cname = RHS.cname) ))
ORDER BY state;",4,30,9,0,9,0,8,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,2,0,0,0
spider/soccer_2/0046,"filter(input1, ""ppos != 'mid' | ppos == 'goalie'""), anti_join(input0, line0, '')","SELECT `state`
FROM
  (SELECT *
   FROM `df_college` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_tryout`
           WHERE (`ppos` != 'mid'
                  OR `ppos` = 'goalie')) AS RHS
        WHERE (LHS.cname = RHS.cname) ))
ORDER BY state;",2,14,4,0,4,0,3,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
spider/soccer_2/0047,"filter(input1, ""ppos != 'mid' & ppos != 'goalie'""), summarise(input0, 'n = n()', ""'cname','enr'""), left_join(line1, line0)","SELECT DISTINCT `n` AS `count___`
FROM
  (SELECT `LHS`.`cname` AS `cname`,
          `LHS`.`enr` AS `enr`,
          `LHS`.`n` AS `n`,
          `RHS`.`pid` AS `pid`,
          `RHS`.`ppos` AS `ppos`,
          `RHS`.`decision` AS `decision`
   FROM
     (SELECT `cname`,
             `enr`,
             COUNT() AS `n`
      FROM `df_college`
      GROUP BY `cname`,
               `enr`) AS `LHS`
   LEFT JOIN
     (SELECT *
      FROM `df_tryout`
      WHERE (`ppos` != 'mid'
             AND `ppos` != 'goalie')) AS RHS ON (LHS.cname = RHS.cname))
ORDER BY count___;",3,11,4,1,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0
spider/soccer_2/0014,"filter(input0, 'hs >= 500 & hs <= 1500'), natural_join(input0, line0)","SELECT pname
FROM
  (SELECT LHS.pid AS pid,
          LHS.pname AS pname,
          LHS.ycard AS ycard,
          LHS.hs AS hs
   FROM df_player AS LHS
   INNER JOIN
     (SELECT *
      FROM df_player
      WHERE (hs >= 500.0
             AND hs <= 1500.0)) AS RHS ON (LHS.pid = RHS.pid
                                           AND LHS.pname = RHS.pname
                                           AND LHS.ycard = RHS.ycard
                                           AND LHS.hs = RHS.hs))
ORDER BY pname;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0009,"summarise(input0, 'n_distinct = n_distinct(ppos)', '')","SELECT n_distinct AS count_distinct_ppos_
FROM
  (SELECT COUNT(DISTINCT ppos) AS n_distinct
   FROM df_tryout)
ORDER BY count_distinct_ppos_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0025,"mutate(input0, 'minenr = min(enr)')","SELECT cname,
       state,
       enr AS min_enr_
FROM df_college
ORDER BY cname;",1,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
spider/soccer_2/0011,"mutate(input0, 'n_distinct = n_distinct(ppos)'), filter(line0, ""ppos == 'goalie'"")","SELECT DISTINCT `n_distinct` AS `count___`
FROM
  (SELECT `pid`,
          `cname`,
          `ppos`,
          `decision`,
          COUNT(DISTINCT `ppos`) OVER () AS `n_distinct`
   FROM `df_tryout`)
WHERE (`ppos` = 'goalie')
ORDER BY count___;",2,8,2,2,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/soccer_2/0029,"natural_join(input0, input1)","SELECT pname
FROM
  (SELECT LHS.pid AS pid,
          LHS.pname AS pname,
          LHS.ycard AS ycard,
          LHS.hs AS hs,
          RHS.cname AS cname,
          RHS.ppos AS ppos,
          RHS.decision AS decision
   FROM df_player AS LHS
   INNER JOIN df_tryout AS RHS ON (LHS.pid = RHS.pid))
ORDER BY pname;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0010,"mutate(input0, 'n_distinct = n_distinct(decision)'), filter(line0, ""decision != 'yes'"")","SELECT DISTINCT `n_distinct` AS `count___`
FROM
  (SELECT `pid`,
          `cname`,
          `ppos`,
          `decision`,
          COUNT(DISTINCT `decision`) OVER () AS `n_distinct`
   FROM `df_tryout`)
WHERE (`decision` != 'yes')
ORDER BY count___;",2,8,2,2,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
spider/soccer_2/0044,"filter(input0, ""ppos != 'goalie' & ppos == 'mid'""), summarise(line0, 'n_distinct = n_distinct(ppos)', ""'cname','decision'"")","SELECT DISTINCT `n_distinct` AS `count___`
FROM
  (SELECT `cname`,
          `decision`,
          COUNT(DISTINCT `ppos`) AS `n_distinct`
   FROM
     (SELECT *
      FROM `df_tryout`
      WHERE (`ppos` != 'goalie'
             AND `ppos` = 'mid'))
   GROUP BY cname,
            decision)
ORDER BY count___;",2,9,3,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/soccer_2/0040,"filter(input1, ""decision == 'yes'""), semi_join(input0, line0)","SELECT `state`,
       `enr`
FROM
  (SELECT *
   FROM `df_college` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_tryout`
           WHERE (`decision` = 'yes')) AS RHS
        WHERE (LHS.cname = RHS.cname) ))
ORDER BY state;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/soccer_2/0028,"filter(input1, ""decision == 'yes'""), natural_join3(input0, input1, line0)","SELECT `pname`,
       `cname`
FROM
  (SELECT `LHS`.`pid` AS `pid`,
          `LHS`.`pname` AS `pname`,
          `LHS`.`ycard` AS `ycard`,
          `LHS`.`hs` AS `hs`,
          `LHS`.`cname` AS `cname`,
          `LHS`.`ppos` AS `ppos`,
          `LHS`.`decision` AS `decision`
   FROM
     (SELECT `LHS`.`pid` AS `pid`,
             `LHS`.`pname` AS `pname`,
             `LHS`.`ycard` AS `ycard`,
             `LHS`.`hs` AS `hs`,
             `RHS`.`cname` AS `cname`,
             `RHS`.`ppos` AS `ppos`,
             `RHS`.`decision` AS `decision`
      FROM `df_player` AS `LHS`
      INNER JOIN `df_tryout` AS `RHS` ON (`LHS`.`pid` = `RHS`.`pid`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_tryout`
      WHERE (`decision` = 'yes')) AS RHS ON (LHS.pid = RHS.pid
                                             AND LHS.cname = RHS.cname
                                             AND LHS.ppos = RHS.ppos
                                             AND LHS.decision = RHS.decision))
ORDER BY pname;",2,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
spider/soccer_2/0049,"filter(input0, ""state == 'FL'""), mutate(line0, 'minenr = min(enr)'), cross_join(line1, input0, 'enr < enr.other | minenr < enr.other')","SELECT `cname_other` AS `cname`
FROM
  (SELECT `LHS`.`cname` AS `cname`,
          `LHS`.`state` AS `state`,
          `LHS`.`enr` AS `enr`,
          `LHS`.`minenr` AS `minenr`,
          `RHS`.`cname` AS `cname_other`,
          `RHS`.`state` AS `state_other`,
          `RHS`.`enr` AS `enr_other`
   FROM
     (SELECT `cname`,
             `state`,
             `enr`,
             MIN(`enr`) OVER () AS `minenr`
      FROM `df_college`
      WHERE (`state` = 'FL')) AS LHS
   CROSS JOIN df_college AS RHS)
WHERE (enr < enr_other
       OR minenr < enr_other)
ORDER BY cname;",3,10,3,0,3,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0
spider/soccer_2/0031,"filter(input1, ""ppos == 'striker'""), natural_join(input0, line0)","SELECT `state`
FROM
  (SELECT `LHS`.`cname` AS `cname`,
          `LHS`.`state` AS `state`,
          `LHS`.`enr` AS `enr`,
          `RHS`.`pid` AS `pid`,
          `RHS`.`ppos` AS `ppos`,
          `RHS`.`decision` AS `decision`
   FROM `df_college` AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_tryout`
      WHERE (`ppos` = 'striker')) AS RHS ON (LHS.cname = RHS.cname))
ORDER BY state;",2,8,3,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
spider/customer_complaints/0002,df_customers,"SELECT email_address,
       phone_number
FROM df_customers
ORDER BY email_address;",0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customer_complaints/0017,"summarise(input0, 'n = n()', ""'customer_type_code'""), cross_join(line0, line0, 'n > n.other')","SELECT n AS count___
FROM
  (SELECT LHS.customer_type_code AS customer_type_code,
          LHS.n AS n,
          RHS.customer_type_code AS customer_type_code_other,
          RHS.n AS n_other
   FROM
     (SELECT customer_type_code,
             COUNT() AS n
      FROM df_customers
      GROUP BY customer_type_code) AS LHS
   CROSS JOIN
     (SELECT customer_type_code,
             COUNT() AS n
      FROM df_customers
      GROUP BY customer_type_code) AS RHS)
WHERE (n > n_other)
ORDER BY count___;",2,9,4,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
spider/customer_complaints/0008,"anti_join(input0, input1, ""'customer_id'"")","SELECT email_address,
       phone_number
FROM
  (SELECT *
   FROM df_customers AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_complaints AS RHS
        WHERE (LHS.customer_id = RHS.customer_id) ))
ORDER BY email_address;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
spider/customer_complaints/0003,"filter(input0, ""customer_type_code == 'Good Credit Rating'""), summarise(line0, 'n_distinct = n_distinct(customer_type_code)', ""'town_city'""), limit(line1, 'desc(n_distinct)')","SELECT `town_city`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT `town_city`,
                COUNT(DISTINCT `customer_type_code`) AS `n_distinct`
         FROM
           (SELECT *
            FROM `df_customers`
            WHERE (`customer_type_code` = 'Good Credit Rating'))
         GROUP BY town_city)
      ORDER BY n_distinct DESC)
   LIMIT 1);",2,14,5,1,5,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/customer_complaints/0013,"summarise(input0, 'meanproduct_price = mean(product_price, na.rm = T)', ""'product_category_code','product_price'""), summarise(line0, 'meanproduct_price = mean(product_price, na.rm = T)', ""'product_category_code'"")","SELECT meanproduct_price AS avg_product_price_,
       product_category_code
FROM
  (SELECT product_category_code,
          AVG(product_price) AS meanproduct_price
   FROM
     (SELECT product_category_code,
             product_price,
             AVG(product_price) AS meanproduct_price
      FROM df_products
      GROUP BY product_category_code,
               product_price)
   GROUP BY product_category_code)
ORDER BY avg_product_price_;",2,6,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
spider/customer_complaints/0006,"summarise(input2, 'n = n()', ""'complaint_type_code','staff_id'""), natural_join4(input0, input1, input2, line0), inner_join(line0, line1, ""'staff_id' = 'staff_id','n' = 'parent_product_id'"")","SELECT DISTINCT product_name
FROM
  (SELECT LHS.complaint_type_code AS complaint_type_code,
          LHS.staff_id AS staff_id,
          LHS.n AS n,
          RHS.customer_id AS customer_id,
          RHS.customer_type_code AS customer_type_code,
          RHS.address_line_1 AS address_line_1,
          RHS.address_line_2 AS address_line_2,
          RHS.town_city AS town_city,
          RHS.state AS state,
          RHS.email_address AS email_address,
          RHS.phone_number AS phone_number,
          RHS.product_id AS product_id,
          RHS.product_category_code AS product_category_code,
          RHS.date_product_first_available AS date_product_first_available,
          RHS.date_product_discontinued AS date_product_discontinued,
          RHS.product_name AS product_name,
          RHS.product_description AS product_description,
          RHS.product_price AS product_price,
          RHS.complaint_id AS complaint_id,
          RHS.complaint_outcome_code AS complaint_outcome_code,
          RHS.complaint_status_code AS complaint_status_code,
          RHS.complaint_type_code AS complaint_type_code_other,
          RHS.date_complaint_raised AS date_complaint_raised,
          RHS.date_complaint_closed AS date_complaint_closed,
          RHS.n AS n_other
   FROM
     (SELECT complaint_type_code,
             staff_id,
             COUNT() AS n
      FROM df_complaints
      GROUP BY complaint_type_code,
               staff_id) AS LHS
   INNER JOIN
     (SELECT LHS.customer_id AS customer_id,
             LHS.customer_type_code AS customer_type_code,
             LHS.address_line_1 AS address_line_1,
             LHS.address_line_2 AS address_line_2,
             LHS.town_city AS town_city,
             LHS.state AS state,
             LHS.email_address AS email_address,
             LHS.phone_number AS phone_number,
             LHS.product_id AS product_id,
             LHS.parent_product_id AS parent_product_id,
             LHS.product_category_code AS product_category_code,
             LHS.date_product_first_available AS date_product_first_available,
             LHS.date_product_discontinued AS date_product_discontinued,
             LHS.product_name AS product_name,
             LHS.product_description AS product_description,
             LHS.product_price AS product_price,
             LHS.complaint_id AS complaint_id,
             LHS.complaint_outcome_code AS complaint_outcome_code,
             LHS.complaint_status_code AS complaint_status_code,
             LHS.complaint_type_code AS complaint_type_code,
             LHS.date_complaint_raised AS date_complaint_raised,
             LHS.date_complaint_closed AS date_complaint_closed,
             LHS.staff_id AS staff_id,
             RHS.n AS n
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.customer_type_code AS customer_type_code,
                LHS.address_line_1 AS address_line_1,
                LHS.address_line_2 AS address_line_2,
                LHS.town_city AS town_city,
                LHS.state AS state,
                LHS.email_address AS email_address,
                LHS.phone_number AS phone_number,
                LHS.product_id AS product_id,
                LHS.parent_product_id AS parent_product_id,
                LHS.product_category_code AS product_category_code,
                LHS.date_product_first_available AS date_product_first_available,
                LHS.date_product_discontinued AS date_product_discontinued,
                LHS.product_name AS product_name,
                LHS.product_description AS product_description,
                LHS.product_price AS product_price,
                RHS.complaint_id AS complaint_id,
                RHS.complaint_outcome_code AS complaint_outcome_code,
                RHS.complaint_status_code AS complaint_status_code,
                RHS.complaint_type_code AS complaint_type_code,
                RHS.date_complaint_raised AS date_complaint_raised,
                RHS.date_complaint_closed AS date_complaint_closed,
                RHS.staff_id AS staff_id
         FROM
           (SELECT LHS.customer_id AS customer_id,
                   LHS.customer_type_code AS customer_type_code,
                   LHS.address_line_1 AS address_line_1,
                   LHS.address_line_2 AS address_line_2,
                   LHS.town_city AS town_city,
                   LHS.state AS state,
                   LHS.email_address AS email_address,
                   LHS.phone_number AS phone_number,
                   RHS.product_id AS product_id,
                   RHS.parent_product_id AS parent_product_id,
                   RHS.product_category_code AS product_category_code,
                   RHS.date_product_first_available AS date_product_first_available,
                   RHS.date_product_discontinued AS date_product_discontinued,
                   RHS.product_name AS product_name,
                   RHS.product_description AS product_description,
                   RHS.product_price AS product_price
            FROM df_customers AS LHS
            CROSS JOIN df_products AS RHS) AS LHS
         INNER JOIN df_complaints AS RHS ON (LHS.customer_id = RHS.customer_id
                                             AND LHS.product_id = RHS.product_id)) AS LHS
      INNER JOIN
        (SELECT complaint_type_code,
                staff_id,
                COUNT() AS n
         FROM df_complaints
         GROUP BY complaint_type_code,
                  staff_id) AS RHS ON (LHS.complaint_type_code = RHS.complaint_type_code
                                       AND LHS.staff_id = RHS.staff_id)) AS RHS ON (LHS.staff_id = RHS.staff_id
                                                                                    AND LHS.n = RHS.parent_product_id))
ORDER BY product_name;",3,18,7,1,7,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0
spider/customer_complaints/0004,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'product_category_code','product_name'"")","SELECT product_name,
       n AS count___
FROM
  (SELECT product_category_code,
          product_name,
          COUNT() AS n
   FROM
     (SELECT LHS.product_id AS product_id,
             LHS.parent_product_id AS parent_product_id,
             LHS.product_category_code AS product_category_code,
             LHS.date_product_first_available AS date_product_first_available,
             LHS.date_product_discontinued AS date_product_discontinued,
             LHS.product_name AS product_name,
             LHS.product_description AS product_description,
             LHS.product_price AS product_price,
             RHS.complaint_id AS complaint_id,
             RHS.customer_id AS customer_id,
             RHS.complaint_outcome_code AS complaint_outcome_code,
             RHS.complaint_status_code AS complaint_status_code,
             RHS.complaint_type_code AS complaint_type_code,
             RHS.date_complaint_raised AS date_complaint_raised,
             RHS.date_complaint_closed AS date_complaint_closed,
             RHS.staff_id AS staff_id
      FROM df_products AS LHS
      INNER JOIN df_complaints AS RHS ON (LHS.product_id = RHS.product_id))
   GROUP BY product_category_code,
            product_name)
ORDER BY product_name;",2,7,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
spider/customer_complaints/0015,"summarise(input0, 'n = n()', ""'complaint_status_code'""), filter(line0, 'n > 3L')","SELECT complaint_status_code
FROM
  (SELECT complaint_status_code,
          COUNT() AS n
   FROM df_complaints
   GROUP BY complaint_status_code)
WHERE (n > 3)
ORDER BY complaint_status_code;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/customer_complaints/0005,"left_join(input0, input1), summarise(line0, 'n = n()', ""'complaint_outcome_code','staff_id'""), inner_join(line0, line1, ""'complaint_id' = 'n','staff_id' = 'staff_id'"")","SELECT email_address
FROM
  (SELECT LHS.customer_id AS customer_id,
          LHS.customer_type_code AS customer_type_code,
          LHS.address_line_1 AS address_line_1,
          LHS.address_line_2 AS address_line_2,
          LHS.town_city AS town_city,
          LHS.state AS state,
          LHS.email_address AS email_address,
          LHS.phone_number AS phone_number,
          LHS.complaint_id AS complaint_id,
          LHS.product_id AS product_id,
          LHS.complaint_outcome_code AS complaint_outcome_code,
          LHS.complaint_status_code AS complaint_status_code,
          LHS.complaint_type_code AS complaint_type_code,
          LHS.date_complaint_raised AS date_complaint_raised,
          LHS.date_complaint_closed AS date_complaint_closed,
          LHS.staff_id AS staff_id,
          RHS.complaint_outcome_code AS complaint_outcome_code_other
   FROM
     (SELECT LHS.customer_id AS customer_id,
             LHS.customer_type_code AS customer_type_code,
             LHS.address_line_1 AS address_line_1,
             LHS.address_line_2 AS address_line_2,
             LHS.town_city AS town_city,
             LHS.state AS state,
             LHS.email_address AS email_address,
             LHS.phone_number AS phone_number,
             RHS.complaint_id AS complaint_id,
             RHS.product_id AS product_id,
             RHS.complaint_outcome_code AS complaint_outcome_code,
             RHS.complaint_status_code AS complaint_status_code,
             RHS.complaint_type_code AS complaint_type_code,
             RHS.date_complaint_raised AS date_complaint_raised,
             RHS.date_complaint_closed AS date_complaint_closed,
             RHS.staff_id AS staff_id
      FROM df_customers AS LHS
      LEFT JOIN df_complaints AS RHS ON (LHS.customer_id = RHS.customer_id)) AS LHS
   INNER JOIN
     (SELECT complaint_outcome_code,
             staff_id,
             COUNT() AS n
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.customer_type_code AS customer_type_code,
                LHS.address_line_1 AS address_line_1,
                LHS.address_line_2 AS address_line_2,
                LHS.town_city AS town_city,
                LHS.state AS state,
                LHS.email_address AS email_address,
                LHS.phone_number AS phone_number,
                RHS.complaint_id AS complaint_id,
                RHS.product_id AS product_id,
                RHS.complaint_outcome_code AS complaint_outcome_code,
                RHS.complaint_status_code AS complaint_status_code,
                RHS.complaint_type_code AS complaint_type_code,
                RHS.date_complaint_raised AS date_complaint_raised,
                RHS.date_complaint_closed AS date_complaint_closed,
                RHS.staff_id AS staff_id
         FROM df_customers AS LHS
         LEFT JOIN df_complaints AS RHS ON (LHS.customer_id = RHS.customer_id))
      GROUP BY complaint_outcome_code,
               staff_id) AS RHS ON (LHS.complaint_id = RHS.n
                                    AND LHS.staff_id = RHS.staff_id))
ORDER BY email_address;",3,13,5,0,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0
spider/customer_complaints/0018,"natural_join(input0, input1), limit(line0, 'desc(staff_id)')","SELECT last_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.staff_id AS staff_id,
                LHS.gender AS gender,
                LHS.first_name AS first_name,
                LHS.last_name AS last_name,
                LHS.email_address AS email_address,
                LHS.phone_number AS phone_number,
                RHS.complaint_id AS complaint_id,
                RHS.product_id AS product_id,
                RHS.customer_id AS customer_id,
                RHS.complaint_outcome_code AS complaint_outcome_code,
                RHS.complaint_status_code AS complaint_status_code,
                RHS.complaint_type_code AS complaint_type_code,
                RHS.date_complaint_raised AS date_complaint_raised,
                RHS.date_complaint_closed AS date_complaint_closed
         FROM df_staff AS LHS
         INNER JOIN df_complaints AS RHS ON (LHS.staff_id = RHS.staff_id))
      ORDER BY staff_id DESC)
   LIMIT 1);",1,11,4,0,4,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/customer_complaints/0020,"filter(input0, ""email_address == 'vbogisich@example.org'""), semi_join(input0, line0)","SELECT `address_line_1`,
       `address_line_2`
FROM
  (SELECT *
   FROM `df_customers` AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM `df_customers`
           WHERE (`email_address` = 'vbogisich@example.org')) AS RHS
        WHERE (LHS.customer_id = RHS.customer_id
               AND LHS.customer_type_code = RHS.customer_type_code
               AND LHS.address_line_1 = RHS.address_line_1
               AND LHS.address_line_2 = RHS.address_line_2
               AND LHS.town_city = RHS.town_city
               AND LHS.state = RHS.state
               AND LHS.email_address = RHS.email_address
               AND LHS.phone_number = RHS.phone_number) ))
ORDER BY address_line_1;",2,12,4,0,4,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
spider/customer_complaints/0019,"summarise(input0, 'n_distinct = n_distinct(complaint_type_code)', '')","SELECT n_distinct AS count_distinct_complaint_type_code_
FROM
  (SELECT COUNT(DISTINCT complaint_type_code) AS n_distinct
   FROM df_complaints)
ORDER BY count_distinct_complaint_type_code_;",1,5,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customer_complaints/0007,"natural_join(input0, input1), limit(line0, 'customer_type_code')","SELECT phone_number
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.customer_id AS customer_id,
                LHS.customer_type_code AS customer_type_code,
                LHS.address_line_1 AS address_line_1,
                LHS.address_line_2 AS address_line_2,
                LHS.town_city AS town_city,
                LHS.state AS state,
                LHS.email_address AS email_address,
                LHS.phone_number AS phone_number,
                RHS.complaint_id AS complaint_id,
                RHS.product_id AS product_id,
                RHS.complaint_outcome_code AS complaint_outcome_code,
                RHS.complaint_status_code AS complaint_status_code,
                RHS.complaint_type_code AS complaint_type_code,
                RHS.date_complaint_raised AS date_complaint_raised,
                RHS.date_complaint_closed AS date_complaint_closed,
                RHS.staff_id AS staff_id
         FROM df_customers AS LHS
         INNER JOIN df_complaints AS RHS ON (LHS.customer_id = RHS.customer_id))
      ORDER BY customer_type_code)
   LIMIT 1);",1,10,4,0,4,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
spider/customer_complaints/0021,"summarise(input0, 'n_distinct = n_distinct(complaint_type_code)', ""'complaint_status_code','complaint_type_code'""), filter(line0, ""complaint_type_code == 'Product Failure'"")","SELECT `complaint_status_code`,
       `n_distinct` AS `count___`
FROM
  (SELECT `complaint_status_code`,
          `complaint_type_code`,
          COUNT(DISTINCT `complaint_type_code`) AS `n_distinct`
   FROM `df_complaints`
   GROUP BY `complaint_status_code`,
            `complaint_type_code`)
WHERE (`complaint_type_code` = 'Product Failure')
ORDER BY complaint_status_code;",2,6,2,1,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
spider/customer_complaints/0023,"summarise(input0, 'n = n()', ""'customer_type_code','state'""), limit(line0, 'customer_type_code')","SELECT state
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT customer_type_code,
                state,
                COUNT() AS n
         FROM df_customers
         GROUP BY customer_type_code,
                  state)
      ORDER BY customer_type_code)
   LIMIT 1);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
spider/customer_complaints/0001,"summarise(input0, 'n = n()', ""'address_line_2','town_city'""), mutate(line0, 'n = n()')","SELECT DISTINCT COUNT(*) OVER () AS count___
FROM
  (SELECT address_line_2,
          town_city,
          COUNT() AS n
   FROM df_customers
   GROUP BY address_line_2,
            town_city)
ORDER BY count___;",2,6,2,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
spider/customer_complaints/0014,"natural_join3(input0, input1, input2), limit(line0, 'desc(parent_product_id)')","SELECT last_name
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT LHS.staff_id AS staff_id,
                LHS.gender AS gender,
                LHS.first_name AS first_name,
                LHS.last_name AS last_name,
                LHS.email_address AS email_address,
                LHS.phone_number AS phone_number,
                LHS.product_id AS product_id,
                LHS.parent_product_id AS parent_product_id,
                LHS.product_category_code AS product_category_code,
                LHS.date_product_first_available AS date_product_first_available,
                LHS.date_product_discontinued AS date_product_discontinued,
                LHS.product_name AS product_name,
                LHS.product_description AS product_description,
                LHS.product_price AS product_price,
                RHS.complaint_id AS complaint_id,
                RHS.customer_id AS customer_id,
                RHS.complaint_outcome_code AS complaint_outcome_code,
                RHS.complaint_status_code AS complaint_status_code,
                RHS.complaint_type_code AS complaint_type_code,
                RHS.date_complaint_raised AS date_complaint_raised,
                RHS.date_complaint_closed AS date_complaint_closed
         FROM
           (SELECT LHS.staff_id AS staff_id,
                   LHS.gender AS gender,
                   LHS.first_name AS first_name,
                   LHS.last_name AS last_name,
                   LHS.email_address AS email_address,
                   LHS.phone_number AS phone_number,
                   RHS.product_id AS product_id,
                   RHS.parent_product_id AS parent_product_id,
                   RHS.product_category_code AS product_category_code,
                   RHS.date_product_first_available AS date_product_first_available,
                   RHS.date_product_discontinued AS date_product_discontinued,
                   RHS.product_name AS product_name,
                   RHS.product_description AS product_description,
                   RHS.product_price AS product_price
            FROM df_staff AS LHS
            CROSS JOIN df_products AS RHS) AS LHS
         INNER JOIN df_complaints AS RHS ON (LHS.staff_id = RHS.staff_id
                                             AND LHS.product_id = RHS.product_id))
      ORDER BY parent_product_id DESC)
   LIMIT 1);",1,13,5,0,5,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
spider/customer_complaints/0011,"limit(input0, 'desc(date_product_discontinued)')","SELECT product_name,
       product_category_code
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_products
      ORDER BY date_product_discontinued DESC)
   LIMIT 1);",0,8,3,0,3,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
spider/customer_complaints/0010,"filter(input0, ""product_name == 'Chocolate'""), intersect(line0, input0, 'product_description')","SELECT `product_description`
FROM
  (SELECT `product_description`
   FROM `df_products`
   WHERE (`product_name` = 'Chocolate') INTERSECT
     SELECT product_description
     FROM df_products)
ORDER BY product_description;",2,8,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
textbook/1,"natural_join4(input0, input1, input2, input3), filter(line0, ""f_name == 'faculty1' & level == 'JR'"")","SELECT `s_name`
FROM
  (SELECT `LHS`.`c_name` AS `c_name`,
          `LHS`.`f_key` AS `f_key`,
          `LHS`.`s_key` AS `s_key`,
          `LHS`.`f_name` AS `f_name`,
          `RHS`.`s_name` AS `s_name`,
          `RHS`.`level` AS `level`
   FROM
     (SELECT `LHS`.`c_name` AS `c_name`,
             `LHS`.`f_key` AS `f_key`,
             `LHS`.`s_key` AS `s_key`,
             `RHS`.`f_name` AS `f_name`
      FROM
        (SELECT `LHS`.`c_name` AS `c_name`,
                `LHS`.`f_key` AS `f_key`,
                `RHS`.`s_key` AS `s_key`
         FROM `df_1_1` AS `LHS`
         INNER JOIN `df_1_2` AS `RHS` ON (`LHS`.`c_name` = `RHS`.`c_name`)) AS `LHS`
      INNER JOIN `df_1_3` AS `RHS` ON (`LHS`.`f_key` = `RHS`.`f_key`)) AS `LHS`
   INNER JOIN `df_1_4` AS `RHS` ON (`LHS`.`s_key` = `RHS`.`s_key`))
WHERE (`f_name` = 'faculty1'
       AND `level` = 'JR')
ORDER BY s_name;",2,12,4,0,4,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
textbook/12,"summarise(input0, 'n = n()', ""'age','level'""), filter(line0, 'age != max(n) | n != max(n)'), summarise(line0, 'n = n()', ""'age'""), left_join(line2, line1)","SELECT age,
       LEVEL
FROM
  (SELECT LHS.age AS age,
          LHS.n AS n,
          RHS.level AS LEVEL
   FROM
     (SELECT age,
             COUNT() AS n
      FROM
        (SELECT age,
                LEVEL,
                COUNT() AS n
         FROM df_12_1
         GROUP BY age,
                  LEVEL)
      GROUP BY age) AS LHS
   LEFT JOIN
     (SELECT age,
             LEVEL,
             n
      FROM
        (SELECT age,
                LEVEL,
                n,
                MAX(n) OVER () AS zzz2,
                            MAX(n) OVER () AS zzz3
         FROM
           (SELECT age,
                   LEVEL,
                   COUNT() AS n
            FROM df_12_1
            GROUP BY age,
                     LEVEL))
      WHERE (age != zzz2
             OR n != zzz3)) AS RHS ON (LHS.age = RHS.age
                                       AND LHS.n = RHS.n))
ORDER BY age;",4,19,7,0,7,1,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,1,0,0,0,0,0,0,0
textbook/24,"filter(input1, 'salary != 80000'), natural_join3(input0, input2, line0)","SELECT DISTINCT aname
FROM
  (SELECT LHS.aid AS aid,
          LHS.aname AS aname,
          LHS.crusingrange AS crusingrange,
          LHS.eid AS eid,
          RHS.ename AS ename,
          RHS.salary AS salary
   FROM
     (SELECT LHS.aid AS aid,
             LHS.aname AS aname,
             LHS.crusingrange AS crusingrange,
             RHS.eid AS eid
      FROM df_aircraft AS LHS
      INNER JOIN df_certified AS RHS ON (LHS.aid = RHS.aid)) AS LHS
   INNER JOIN
     (SELECT *
      FROM df_employees
      WHERE (salary != 80000.0)) AS RHS ON (LHS.eid = RHS.eid))
ORDER BY aname;",2,12,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
textbook/14,"summarise(input0, 'n = n()', ""'s_key'""), filter(line0, 'n == max(n)'), natural_join4(input1, input2, line0, line1)","SELECT DISTINCT s_name
FROM
  (SELECT LHS.p_id AS p_id,
          LHS.color AS color,
          LHS.s_key AS s_key,
          LHS.s_name AS s_name,
          LHS.n AS n
   FROM
     (SELECT LHS.p_id AS p_id,
             LHS.color AS color,
             LHS.s_key AS s_key,
             LHS.s_name AS s_name,
             RHS.n AS n
      FROM
        (SELECT LHS.p_id AS p_id,
                LHS.color AS color,
                RHS.s_key AS s_key,
                RHS.s_name AS s_name
         FROM df_14_2 AS LHS
         CROSS JOIN df_14_3 AS RHS) AS LHS
      INNER JOIN
        (SELECT s_key,
                COUNT() AS n
         FROM df_14_1
         GROUP BY s_key) AS RHS ON (LHS.s_key = RHS.s_key)) AS LHS
   INNER JOIN
     (SELECT s_key,
             n
      FROM
        (SELECT s_key,
                n,
                MAX(n) OVER () AS zzz4
         FROM
           (SELECT s_key,
                   COUNT() AS n
            FROM df_14_1
            GROUP BY s_key))
      WHERE (n = zzz4)) AS RHS ON (LHS.s_key = RHS.s_key
                                   AND LHS.n = RHS.n))
ORDER BY s_name;",3,21,8,1,8,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0
textbook/4,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'meets_at','s_name'""), filter(line1, 'n == 2L')","SELECT s_name
FROM
  (SELECT meets_at,
          s_name,
          COUNT() AS n
   FROM
     (SELECT LHS.c_name AS c_name,
             LHS.meets_at AS meets_at,
             LHS.s_key AS s_key,
             RHS.s_name AS s_name
      FROM
        (SELECT LHS.c_name AS c_name,
                LHS.meets_at AS meets_at,
                RHS.s_key AS s_key
         FROM df_4_1 AS LHS
         INNER JOIN df_4_2 AS RHS ON (LHS.c_name = RHS.c_name)) AS LHS
      INNER JOIN df_4_3 AS RHS ON (LHS.s_key = RHS.s_key))
   GROUP BY meets_at,
            s_name)
WHERE (n = 2)
ORDER BY s_name;",3,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
textbook/20,"filter(input1, ""color != 'red' | color == 'green'""), anti_join(input0, line0, ''), semi_join(input2, line1), natural_join4(input0, input2, line0, line2)","SELECT DISTINCT `s_name`
FROM
  (SELECT `LHS`.`s_key` AS `s_key`,
          `LHS`.`p_id` AS `p_id`,
          `LHS`.`s_name` AS `s_name`,
          `LHS`.`color` AS `color`
   FROM
     (SELECT `LHS`.`s_key` AS `s_key`,
             `LHS`.`p_id` AS `p_id`,
             `LHS`.`s_name` AS `s_name`,
             `RHS`.`color` AS `color`
      FROM
        (SELECT `LHS`.`s_key` AS `s_key`,
                `LHS`.`p_id` AS `p_id`,
                `RHS`.`s_name` AS `s_name`
         FROM `df_20_1` AS `LHS`
         INNER JOIN `df_20_3` AS `RHS` ON (`LHS`.`s_key` = `RHS`.`s_key`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_20_2`
         WHERE (`color` != 'red'
                OR `color` = 'green')) AS `RHS` ON (`LHS`.`p_id` = `RHS`.`p_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_20_3` AS `LHS`
      WHERE EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM `df_20_1` AS `LHS`
              WHERE NOT EXISTS
                  (SELECT 1
                   FROM
                     (SELECT *
                      FROM `df_20_2`
                      WHERE (`color` != 'red'
                             OR `color` = 'green')) AS RHS
                   WHERE (LHS.p_id = RHS.p_id) )) AS RHS
           WHERE (LHS.s_key = RHS.s_key) )) AS RHS ON (LHS.s_key = RHS.s_key
                                                       AND LHS.s_name = RHS.s_name))
ORDER BY s_name;",4,35,10,1,10,3,6,0,0,0,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0
textbook/8,"filter(input0, ""level != 'JR'""), summarise(line0, 'meanage = mean(age, na.rm = T)', ""'level'"")","SELECT `level`,
       `meanage`
FROM
  (SELECT `level`,
          AVG(`age`) AS `meanage`
   FROM
     (SELECT *
      FROM `df_8_1`
      WHERE (`level` != 'JR'))
   GROUP BY LEVEL)
ORDER BY LEVEL;",2,7,3,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
textbook/35,"semi_join(input2, input1), natural_join4(input0, input1, input2, line0), filter(line1, 'crusingrange < 1000L'), anti_join(line0, line2, '')","SELECT ename
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM df_employees AS LHS
      WHERE EXISTS
          (SELECT 1
           FROM df_certified AS RHS
           WHERE (LHS.eid = RHS.eid) )) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT LHS.aid AS aid,
                     LHS.aname AS aname,
                     LHS.crusingrange AS crusingrange,
                     LHS.eid AS eid,
                     LHS.ename AS ename,
                     LHS.salary AS salary
              FROM
                (SELECT LHS.aid AS aid,
                        LHS.aname AS aname,
                        LHS.crusingrange AS crusingrange,
                        LHS.eid AS eid,
                        RHS.ename AS ename,
                        RHS.salary AS salary
                 FROM
                   (SELECT LHS.aid AS aid,
                           LHS.aname AS aname,
                           LHS.crusingrange AS crusingrange,
                           RHS.eid AS eid
                    FROM df_aircraft AS LHS
                    INNER JOIN df_certified AS RHS ON (LHS.aid = RHS.aid)) AS LHS
                 INNER JOIN df_employees AS RHS ON (LHS.eid = RHS.eid)) AS LHS
              INNER JOIN
                (SELECT *
                 FROM df_employees AS LHS
                 WHERE EXISTS
                     (SELECT 1
                      FROM df_certified AS RHS
                      WHERE (LHS.eid = RHS.eid) )) AS RHS ON (LHS.eid = RHS.eid
                                                              AND LHS.ename = RHS.ename
                                                              AND LHS.salary = RHS.salary))
           WHERE (crusingrange < 1000)) AS RHS
        WHERE (LHS.eid = RHS.eid
               AND LHS.ename = RHS.ename
               AND LHS.salary = RHS.salary) ))
ORDER BY ename;",4,36,11,0,11,3,7,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0
textbook/16,"natural_join3(input0, input1, input2), filter(line0, ""s_name != 'AWS'""), summarise(line1, 'n = n()', ""'p_id','s_key'""), anti_join(input1, line2, '')","SELECT `p_name`
FROM
  (SELECT *
   FROM `df_16_2` AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT `p_id`,
                  `s_key`,
                  COUNT() AS `n`
           FROM
             (SELECT `LHS`.`s_key` AS `s_key`,
                     `LHS`.`p_id` AS `p_id`,
                     `LHS`.`p_name` AS `p_name`,
                     `RHS`.`s_name` AS `s_name`
              FROM
                (SELECT `LHS`.`s_key` AS `s_key`,
                        `LHS`.`p_id` AS `p_id`,
                        `RHS`.`p_name` AS `p_name`
                 FROM `df_16_1` AS `LHS`
                 INNER JOIN `df_16_2` AS `RHS` ON (`LHS`.`p_id` = `RHS`.`p_id`)) AS `LHS`
              INNER JOIN `df_16_3` AS `RHS` ON (`LHS`.`s_key` = `RHS`.`s_key`))
           WHERE (`s_name` != 'AWS')
           GROUP BY p_id,
                    s_key) AS RHS
        WHERE (LHS.p_id = RHS.p_id) ))
ORDER BY p_name;",4,19,6,0,6,2,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0
textbook/10,"summarise(input0, 'n = n()', ""'s_key'""), filter(line0, 'n == max(n)'), inner_join(line1, input1, ""'s_key'"")","SELECT s_name
FROM
  (SELECT LHS.s_key AS s_key,
          LHS.n AS n,
          RHS.s_name AS s_name
   FROM
     (SELECT s_key,
             n
      FROM
        (SELECT s_key,
                n,
                MAX(n) OVER () AS zzz3
         FROM
           (SELECT s_key,
                   COUNT() AS n
            FROM df_10_1
            GROUP BY s_key))
      WHERE (n = zzz3)) AS LHS
   INNER JOIN df_10_2 AS RHS ON (LHS.s_key = RHS.s_key))
ORDER BY s_name;",3,13,5,0,5,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
textbook/21,"filter(input1, ""color == 'red' | color == 'green'""), natural_join3(input0, input2, line0)","SELECT DISTINCT `s_name`
FROM
  (SELECT `LHS`.`s_key` AS `s_key`,
          `LHS`.`p_id` AS `p_id`,
          `LHS`.`s_name` AS `s_name`,
          `RHS`.`color` AS `color`
   FROM
     (SELECT `LHS`.`s_key` AS `s_key`,
             `LHS`.`p_id` AS `p_id`,
             `RHS`.`s_name` AS `s_name`
      FROM `df_21_1` AS `LHS`
      INNER JOIN `df_21_3` AS `RHS` ON (`LHS`.`s_key` = `RHS`.`s_key`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `df_21_2`
      WHERE (`color` = 'red'
             OR `color` = 'green')) AS RHS ON (LHS.p_id = RHS.p_id))
ORDER BY s_name;",2,13,4,1,4,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
textbook/18,"summarise(input0, 'cost = max(cost)', ""'p_id'""), natural_join3(input0, input1, line0)","SELECT p_id,
       s_name
FROM
  (SELECT LHS.s_key AS s_key,
          LHS.p_id AS p_id,
          LHS.cost AS cost,
          LHS.s_name AS s_name
   FROM
     (SELECT LHS.s_key AS s_key,
             LHS.p_id AS p_id,
             LHS.cost AS cost,
             RHS.s_name AS s_name
      FROM df_18_1 AS LHS
      INNER JOIN df_18_3 AS RHS ON (LHS.s_key = RHS.s_key)) AS LHS
   INNER JOIN
     (SELECT p_id,
             MAX(cost) AS cost
      FROM df_18_1
      GROUP BY p_id) AS RHS ON (LHS.p_id = RHS.p_id
                                AND LHS.cost = RHS.cost))
ORDER BY p_id;",2,10,4,0,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
textbook/3,"inner_join(input1, input0, ""'id_key'""), summarise(line0, 'n = n()', ""'id_key','room'""), filter(line1, ""room == 'R128' | n > 4L"")","SELECT `id_key`
FROM
  (SELECT `id_key`,
          `room`,
          COUNT() AS `n`
   FROM
     (SELECT `LHS`.`id_key_student` AS `id_key_student`,
             `LHS`.`id_key` AS `id_key`,
             `RHS`.`room` AS `room`
      FROM `df_3_2` AS `LHS`
      INNER JOIN `df_3_1` AS `RHS` ON (`LHS`.`id_key` = `RHS`.`id_key`))
   GROUP BY `id_key`,
            `room`)
WHERE (`room` = 'R128'
       OR n > 4)
ORDER BY id_key;",3,9,3,0,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0
textbook/6,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'f_name'""), filter(line1, 'n <= 5L')","SELECT f_name
FROM
  (SELECT f_name,
          COUNT() AS n
   FROM
     (SELECT LHS.s_key AS s_key,
             LHS.c_name AS c_name,
             LHS.f_key AS f_key,
             RHS.f_name AS f_name
      FROM
        (SELECT LHS.s_key AS s_key,
                LHS.c_name AS c_name,
                RHS.f_key AS f_key
         FROM df_6_1 AS LHS
         INNER JOIN df_6_2 AS RHS ON (LHS.c_name = RHS.c_name)) AS LHS
      INNER JOIN df_6_3 AS RHS ON (LHS.f_key = RHS.f_key))
   GROUP BY f_name)
WHERE (n <= 5)
ORDER BY f_name;",3,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
textbook/11,"anti_join(input0, input1, ""'s_key'"")","SELECT s_name
FROM
  (SELECT *
   FROM df_11_1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_11_2 AS RHS
        WHERE (LHS.s_key = RHS.s_key) ))
ORDER BY s_name;",1,10,3,0,3,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
textbook/7,"summarise(input0, 'meanage = mean(age, na.rm = T)', ""'level'"")","SELECT LEVEL,
       meanage
FROM
  (SELECT LEVEL,
          AVG(age) AS meanage
   FROM df_7_1
   GROUP BY LEVEL)
ORDER BY LEVEL;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
textbook/5,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'f_name'""), filter(line1, 'n == max(n)')","SELECT f_name
FROM
  (SELECT f_name,
          n
   FROM
     (SELECT f_name,
             n,
             MAX(n) OVER () AS zzz3
      FROM
        (SELECT f_name,
                COUNT() AS n
         FROM
           (SELECT LHS.c_name AS c_name,
                   LHS.f_key AS f_key,
                   LHS.room AS room,
                   RHS.f_name AS f_name
            FROM df_5_1 AS LHS
            INNER JOIN df_5_2 AS RHS ON (LHS.f_key = RHS.f_key))
         GROUP BY f_name))
   WHERE (n = zzz3))
ORDER BY f_name;",3,13,5,0,5,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
textbook/13,"left_join(input0, input1)","SELECT p_name
FROM
  (SELECT LHS.s_key AS s_key,
          LHS.p_id AS p_id,
          RHS.p_name AS p_name
   FROM df_13_1 AS LHS
   LEFT JOIN df_13_2 AS RHS ON (LHS.p_id = RHS.p_id))
ORDER BY p_name;",1,5,2,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
textbook/34,"mutate(input1, 'meansalary = mean(salary, na.rm = T)'), filter(line0, 'meansalary <= salary'), anti_join(line1, input0, ""'eid'"")","SELECT ename,
       salary
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT eid,
                ename,
                salary,
                AVG(salary) OVER () AS meansalary
         FROM df_employees)
      WHERE (meansalary <= salary)) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM df_certified AS RHS
        WHERE (LHS.eid = RHS.eid) ))
ORDER BY ename;",3,16,5,0,5,0,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0
textbook/26,"filter(input1, ""destination != 'Los Angeles' | destination == 'Honolulu'""), mutate(input0, 'salary = min(salary)'), natural_join4(input0, input1, line0, line1)","SELECT DISTINCT `ename`
FROM
  (SELECT `LHS`.`eid` AS `eid`,
          `LHS`.`ename` AS `ename`,
          `LHS`.`salary` AS `salary`,
          `LHS`.`flno` AS `flno`,
          `LHS`.`origin` AS `origin`,
          `LHS`.`destination` AS `destination`,
          `LHS`.`distance` AS `distance`,
          `LHS`.`departs` AS `departs`,
          `LHS`.`arrives` AS `arrives`,
          `LHS`.`price` AS `price`
   FROM
     (SELECT `LHS`.`eid` AS `eid`,
             `LHS`.`ename` AS `ename`,
             `LHS`.`salary` AS `salary`,
             `LHS`.`flno` AS `flno`,
             `LHS`.`origin` AS `origin`,
             `LHS`.`destination` AS `destination`,
             `LHS`.`distance` AS `distance`,
             `LHS`.`departs` AS `departs`,
             `LHS`.`arrives` AS `arrives`,
             `LHS`.`price` AS `price`
      FROM
        (SELECT `LHS`.`eid` AS `eid`,
                `LHS`.`ename` AS `ename`,
                `LHS`.`salary` AS `salary`,
                `RHS`.`flno` AS `flno`,
                `RHS`.`origin` AS `origin`,
                `RHS`.`destination` AS `destination`,
                `RHS`.`distance` AS `distance`,
                `RHS`.`departs` AS `departs`,
                `RHS`.`arrives` AS `arrives`,
                `RHS`.`price` AS `price`
         FROM `df_employees` AS `LHS`
         CROSS JOIN `df_flights` AS `RHS`) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `df_flights`
         WHERE (`destination` != 'Los Angeles'
                OR `destination` = 'Honolulu')) AS RHS ON (LHS.flno = RHS.flno
                                                           AND LHS.origin = RHS.origin
                                                           AND LHS.destination = RHS.destination
                                                           AND LHS.distance = RHS.distance
                                                           AND LHS.departs = RHS.departs
                                                           AND LHS.arrives = RHS.arrives
                                                           AND LHS.price = RHS.price)) AS LHS
   INNER JOIN
     (SELECT eid,
             ename,
             MIN(salary) OVER () AS salary
      FROM df_employees) AS RHS ON (LHS.eid = RHS.eid
                                    AND LHS.ename = RHS.ename
                                    AND LHS.salary = RHS.salary))
ORDER BY ename;",3,18,6,1,6,2,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0
textbook/2,"natural_join4(input0, input1, input2, input3), filter(line0, ""f_name == 'faculty1' | major == 'History'""), mutate(line1, 'age = max(age)')","SELECT DISTINCT MAX(`age`) OVER () AS `maxage`
FROM
  (SELECT `LHS`.`c_name` AS `c_name`,
          `LHS`.`f_key` AS `f_key`,
          `LHS`.`s_key` AS `s_key`,
          `LHS`.`f_name` AS `f_name`,
          `RHS`.`major` AS `major`,
          `RHS`.`age` AS `age`
   FROM
     (SELECT `LHS`.`c_name` AS `c_name`,
             `LHS`.`f_key` AS `f_key`,
             `LHS`.`s_key` AS `s_key`,
             `RHS`.`f_name` AS `f_name`
      FROM
        (SELECT `LHS`.`c_name` AS `c_name`,
                `LHS`.`f_key` AS `f_key`,
                `RHS`.`s_key` AS `s_key`
         FROM `df_2_1` AS `LHS`
         INNER JOIN `df_2_2` AS `RHS` ON (`LHS`.`c_name` = `RHS`.`c_name`)) AS `LHS`
      INNER JOIN `df_2_3` AS `RHS` ON (`LHS`.`f_key` = `RHS`.`f_key`)) AS `LHS`
   INNER JOIN `df_2_4` AS `RHS` ON (`LHS`.`s_key` = `RHS`.`s_key`))
WHERE (`f_name` = 'faculty1'
       OR `major` = 'History')
ORDER BY maxage;",3,15,4,1,4,3,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0
textbook/17,"summarise(input0, 'meancost = mean(cost, na.rm = T)', ""'p_id'""), natural_join3(input0, input1, line0), filter(line1, 'meancost < cost')","SELECT p_id,
       s_name
FROM
  (SELECT LHS.s_key AS s_key,
          LHS.p_id AS p_id,
          LHS.cost AS cost,
          LHS.s_name AS s_name,
          RHS.meancost AS meancost
   FROM
     (SELECT LHS.s_key AS s_key,
             LHS.p_id AS p_id,
             LHS.cost AS cost,
             RHS.s_name AS s_name
      FROM df_17_1 AS LHS
      INNER JOIN df_17_3 AS RHS ON (LHS.s_key = RHS.s_key)) AS LHS
   INNER JOIN
     (SELECT p_id,
             AVG(cost) AS meancost
      FROM df_17_1
      GROUP BY p_id) AS RHS ON (LHS.p_id = RHS.p_id))
WHERE (meancost < cost)
ORDER BY p_id;",3,11,4,0,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
textbook/19,"natural_join3(input0, input1, input2), filter(line0, ""color != 'red'""), anti_join(input2, line1, ""'s_key','s_name'""), inner_join(line2, line0, ""'s_key','s_name'"")","SELECT `s_name`
FROM
  (SELECT `LHS`.`s_key` AS `s_key`,
          `LHS`.`s_name` AS `s_name`,
          `RHS`.`p_id` AS `p_id`,
          `RHS`.`color` AS `color`
   FROM
     (SELECT *
      FROM `df_19_3` AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM
                (SELECT `LHS`.`s_key` AS `s_key`,
                        `LHS`.`p_id` AS `p_id`,
                        `LHS`.`color` AS `color`,
                        `RHS`.`s_name` AS `s_name`
                 FROM
                   (SELECT `LHS`.`s_key` AS `s_key`,
                           `LHS`.`p_id` AS `p_id`,
                           `RHS`.`color` AS `color`
                    FROM `df_19_1` AS `LHS`
                    INNER JOIN `df_19_2` AS `RHS` ON (`LHS`.`p_id` = `RHS`.`p_id`)) AS `LHS`
                 INNER JOIN `df_19_3` AS `RHS` ON (`LHS`.`s_key` = `RHS`.`s_key`))
              WHERE (`color` != 'red')) AS RHS
           WHERE (LHS.s_key = RHS.s_key
                  AND LHS.s_name = RHS.s_name) )) AS LHS
   INNER JOIN
     (SELECT LHS.s_key AS s_key,
             LHS.p_id AS p_id,
             LHS.color AS color,
             RHS.s_name AS s_name
      FROM
        (SELECT LHS.s_key AS s_key,
                LHS.p_id AS p_id,
                RHS.color AS color
         FROM df_19_1 AS LHS
         INNER JOIN df_19_2 AS RHS ON (LHS.p_id = RHS.p_id)) AS LHS
      INNER JOIN df_19_3 AS RHS ON (LHS.s_key = RHS.s_key)) AS RHS ON (LHS.s_key = RHS.s_key
                                                                       AND LHS.s_name = RHS.s_name))
ORDER BY s_name;",4,28,9,0,9,5,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0
textbook/15,"natural_join3(input0, input1, input2), summarise(line0, 'n = n()', ""'color','s_name'""), filter(line1, ""color == 'red' & n == max(n)"")","SELECT `s_name`
FROM
  (SELECT `color`,
          `s_name`,
          `n`
   FROM
     (SELECT `color`,
             `s_name`,
             `n`,
             MAX(`n`) OVER () AS `zzz4`
      FROM
        (SELECT `color`,
                `s_name`,
                COUNT() AS `n`
         FROM
           (SELECT `LHS`.`s_key` AS `s_key`,
                   `LHS`.`p_id` AS `p_id`,
                   `LHS`.`color` AS `color`,
                   `RHS`.`s_name` AS `s_name`
            FROM
              (SELECT `LHS`.`s_key` AS `s_key`,
                      `LHS`.`p_id` AS `p_id`,
                      `RHS`.`color` AS `color`
               FROM `df_15_1` AS `LHS`
               INNER JOIN `df_15_2` AS `RHS` ON (`LHS`.`p_id` = `RHS`.`p_id`)) AS `LHS`
            INNER JOIN `df_15_3` AS `RHS` ON (`LHS`.`s_key` = `RHS`.`s_key`))
         GROUP BY `color`,
                  `s_name`))
   WHERE (`color` = 'red'
          AND n = zzz4))
ORDER BY s_name;",3,16,6,0,6,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0
textbook/9,"summarise(input0, 'n = n()', ""'id_key'""), filter(input0, ""room == 'R128'""), summarise(line1, 'n = n()', ""'id_key','room'""), natural_join3(input1, line0, line2)","SELECT `f_name`,
       `n`
FROM
  (SELECT `LHS`.`id_key` AS `id_key`,
          `LHS`.`f_name` AS `f_name`,
          `LHS`.`n` AS `n`,
          `RHS`.`room` AS `room`
   FROM
     (SELECT `LHS`.`id_key` AS `id_key`,
             `LHS`.`f_name` AS `f_name`,
             `RHS`.`n` AS `n`
      FROM `df_9_2` AS `LHS`
      INNER JOIN
        (SELECT `id_key`,
                COUNT() AS `n`
         FROM `df_9_1`
         GROUP BY `id_key`) AS `RHS` ON (`LHS`.`id_key` = `RHS`.`id_key`)) AS `LHS`
   INNER JOIN
     (SELECT `id_key`,
             `room`,
             COUNT() AS `n`
      FROM `df_9_1`
      WHERE (`room` = 'R128')
      GROUP BY id_key,
               room) AS RHS ON (LHS.id_key = RHS.id_key
                                AND LHS.n = RHS.n))
ORDER BY f_name;",4,13,5,0,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,1,0,0,0,0,0,0
kaggle/1_2_X_3,"filter(input0, 'value == 0'), limit(line0, 'country')","SELECT LOCATION,
       city,
       country,
       pollutant,
       value,
       TIMESTAMP,
       unit,
       source_name,
       latitude,
       longitude,
       averaged_over_in_hours
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM df_global_air_quality_3
         WHERE (value = 0.0))
      ORDER BY country)
   LIMIT 3);",1,10,4,0,4,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
kaggle/1_2_T_1,"filter(input0, ""country == 'US'"")","SELECT `city`
FROM `df_global_air_quality`
WHERE (`country` = 'US')
ORDER BY city;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
kaggle/1_2_X_1,"filter(input0, ""unit == 'ppm'"")","SELECT `country`
FROM `df_global_air_quality_2`
WHERE (`unit` = 'ppm')
ORDER BY country;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
kaggle/1_3_T_1,"summarise(input0, 'n = n()', ""'parent'""), filter(line0, 'n > 10L')","SELECT parent,
       n AS COUNT
FROM
  (SELECT parent,
          COUNT() AS n
   FROM df_comments
   GROUP BY parent)
WHERE (n > 10)
ORDER BY parent;",2,6,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
kaggle/1_3_T_2,"summarise(input0, 'n = n()', ""'parent'""), filter(line0, 'n > 10L')","SELECT parent,
       n AS numposts
FROM
  (SELECT parent,
          COUNT() AS n
   FROM df_comments
   GROUP BY parent)
WHERE (n > 10)
ORDER BY parent;",2,5,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
kaggle/1_5_T_1,"summarise(input0, 'n = n()', ""'block_timestamp','outputs'"")","SELECT n AS transactions,
       block_timestamp AS trans_date
FROM
  (SELECT block_timestamp,
          outputs,
          COUNT() AS n
   FROM df_transactions
   GROUP BY block_timestamp,
            outputs)
ORDER BY transactions;",1,4,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
kaggle/1_2_X_2,"filter(input0, ""unit == 'ppm'"")","SELECT DISTINCT `country`
FROM `df_global_air_quality_2`
WHERE (`unit` = 'ppm')
ORDER BY country;",1,4,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
kaggle/1_2_T_3,"filter(input0, ""country == 'US'"")","SELECT `location`,
       `city`,
       `country`,
       `pollutant`,
       `value`,
       `timestamp`,
       `unit`,
       `source_name`,
       `latitude`,
       `longitude`,
       `averaged_over_in_hours`
FROM `df_global_air_quality`
WHERE (`country` = 'US')
ORDER BY LOCATION;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
kaggle/1_6_T_1,"natural_join(input0, input1), summarise(line0, 'n = n()', ""'license','ref'"")","SELECT license,
       n AS number_of_files
FROM
  (SELECT license,
          REF,
          COUNT() AS n
   FROM
     (SELECT LHS.repo_name AS repo_name,
             LHS.ref AS REF,
             LHS.path AS PATH,
             LHS.mode AS MODE,
             LHS.id AS id,
             LHS.symlink_target AS symlink_target,
             RHS.license AS license
      FROM df_sample_files AS LHS
      INNER JOIN df_licenses AS RHS ON (LHS.repo_name = RHS.repo_name))
   GROUP BY license,
            REF)
ORDER BY license;",2,10,3,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,1,0,0,0,0,0,0,0,0,0,0,0
kaggle/1_2_T_2,"filter(input0, ""country == 'US'""), limit(line0, 'timestamp')","SELECT `city`,
       `country`
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM `df_global_air_quality`
         WHERE (`country` = 'US'))
      ORDER BY TIMESTAMP)
   LIMIT 2);",1,10,4,0,4,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
kaggle/1_4_X_1,"filter(input0, ""indicator_code == 'SE.XPD.TOTL.GD.ZS' & year <= 2017L""), filter(line0, 'year >= 2010L | value > 2010'), summarise(line1, 'meanvalue = mean(value, na.rm = T)', ""'country_name','indicator_name'"")","SELECT `country_name`,
       `meanvalue` AS `avg_ed_spending_pct`
FROM
  (SELECT `country_name`,
          `indicator_name`,
          AVG(`value`) AS `meanvalue`
   FROM
     (SELECT *
      FROM
        (SELECT *
         FROM `df_international_education`
         WHERE (`indicator_code` = 'SE.XPD.TOTL.GD.ZS'
                AND YEAR <= 2017))
      WHERE (YEAR >= 2010
             OR value > 2010.0))
   GROUP BY country_name,
            indicator_name)
ORDER BY country_name;",3,13,4,0,4,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0
kaggle/1_4_X_2,"filter(input0, 'year > 5L & year < 2016L'), anti_join(input0, line0, ""'indicator_code','value'""), summarise(line1, 'n = n()', ""'indicator_code'"")","SELECT indicator_code,
       n AS num_rows
FROM
  (SELECT indicator_code,
          COUNT() AS n
   FROM
     (SELECT *
      FROM df_international_education_2 AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT *
              FROM df_international_education_2
              WHERE (YEAR > 5
                     AND YEAR < 2016)) AS RHS
           WHERE (LHS.indicator_code = RHS.indicator_code
                  AND LHS.value = RHS.value) ))
   GROUP BY indicator_code)
ORDER BY indicator_code;",3,17,5,0,5,0,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0
kaggle/1_4_T_1,"summarise(input0, 'n = n()', ""'day_of_week','manner_of_collision_name'""), limit(line0, 'manner_of_collision_name')","SELECT n AS num_accidents,
       day_of_week
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM
        (SELECT day_of_week,
                manner_of_collision_name,
                COUNT() AS n
         FROM df_comments_4
         GROUP BY day_of_week,
                  manner_of_collision_name)
      ORDER BY manner_of_collision_name)
   LIMIT 6);",1,9,4,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
kaggle/1_2_T_4,"filter(input0, ""type == 'job'"")","SELECT `score`,
       `title`
FROM `df_hacker_news_full`
WHERE (`type` = 'job')
ORDER BY score;",1,3,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
kaggle/2_1_T_1,"summarise(input0, 'n = n()', ""'parent'""), anti_join(input1, input0, ""'author','time_ts'""), inner_join(line1, line0, ""'id' = 'parent'"")","SELECT id AS story_id,
       BY,
       title,
       n AS num_comments
FROM
  (SELECT LHS.id AS id,
          LHS.by AS BY,
          LHS.score AS score,
          LHS.time AS TIME,
          LHS.time_ts AS time_ts,
          LHS.title AS title,
          LHS.url AS url,
          LHS.text AS text,
          LHS.deleted AS deleted,
          LHS.dead AS dead,
          LHS.descendants AS descendants,
          LHS.author AS author,
          RHS.n AS n
   FROM
     (SELECT *
      FROM df_stories AS LHS
      WHERE NOT EXISTS
          (SELECT 1
           FROM df_comments_5 AS RHS
           WHERE (LHS.author = RHS.author
                  AND LHS.time_ts = RHS.time_ts) )) AS LHS
   INNER JOIN
     (SELECT parent,
             COUNT() AS n
      FROM df_comments_5
      GROUP BY parent) AS RHS ON (LHS.id = RHS.parent))
ORDER BY story_id;",3,18,5,0,5,1,2,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,1,0,0,0,1,0,0,0,0
