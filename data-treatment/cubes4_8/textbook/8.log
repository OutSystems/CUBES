[     3.367][MainProcess][INFO] Parsing specification...
[     3.372][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.372][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.372][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.373][MainProcess][DEBUG] Reading input files...
[     3.382][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/8-1.txt: ['string', 'string', 'int64']
[     3.388][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/8.out: ['string', 'int64']
[     3.417][MainProcess][DEBUG] Generating DSL...
[     3.459][MainProcess][INFO] Creating 8 processes
[     3.490][MainProcess][DEBUG] Increasing generator loc to 3
[     3.526][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.530][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.534][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.535][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.538][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.539][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.542][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.549][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     4.650][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     4.659][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     4.696][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     4.730][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     5.135][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     5.296][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     5.304][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     5.307][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     5.310][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     5.313][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     5.316][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     5.317][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     5.319][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     5.322][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     5.326][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     5.333][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     5.334][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     5.340][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     5.344][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     5.347][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     5.350][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     5.379][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[     5.386][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = natural_join4())
[     5.391][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = summarise())
[     5.459][cube-solver-1][DEBUG] Found solution with cube (l0 = filter(), l1 = summarise())
[     5.460][MainProcess][INFO] Statistics:
[     5.460][MainProcess][INFO] 	Generated cubes: 24
[     5.461][MainProcess][INFO] 	Attempted programs: 14
[     5.461][MainProcess][INFO] 		Rejected: 13
[     5.461][MainProcess][INFO] 		Failed: 0
[     5.461][MainProcess][INFO] 	Blacklist clauses: 1
[     5.461][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     5.462][MainProcess][DEBUG] 	0: Counter({'filter': 141, 'mutate': 107, 'summarise': 24})
[     5.463][MainProcess][DEBUG] 	1: Counter({'filter': 131, 'summarise': 93, 'mutate': 48})
[     5.463][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     5.463][MainProcess][DEBUG] 	0: Counter({'summarise': 17})
[     5.463][MainProcess][DEBUG] 	1: Counter({'natural_join': 12, 'filter': 5})
[     5.463][MainProcess][DEBUG] 	2: Counter({'filter': 12, 'natural_join': 5})
[     5.464][MainProcess][INFO] Solution found: summarise(filter(@param0, level != 'JR'), meanage = mean(age), level)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/8-1.txt", col_types = cols(S_key = col_character(),level = col_character(),age = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/textbook/tables/8.out", col_types = cols(level = col_character(),meanage = col_integer()))

df2 <- input1 %>% filter(level != 'JR')
df3 <- df2 %>% group_by(level) %>% summarise(meanage = mean(age)) %>% ungroup()
out <- df3 %>% select(level, meanage) %>% arrange(level)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `level`,
       `meanage`
FROM
  (SELECT `level`,
          AVG(`age`) AS `meanage`
   FROM
     (SELECT *
      FROM `input1`
      WHERE (`level` != 'JR'))
   GROUP BY LEVEL)
ORDER BY LEVEL
