[     3.222][MainProcess][INFO] Parsing specification...
[     3.228][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.228][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.229][MainProcess][DEBUG] Reading input files...
[     3.240][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-1.txt: ['string', 'string']
[     3.246][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-2.txt: ['string', 'string']
[     3.252][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-3.txt: ['string', 'string']
[     3.257][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19.out: ['string']
[     3.297][MainProcess][DEBUG] Generating DSL...
[     3.321][MainProcess][INFO] Creating 8 processes
[     3.352][MainProcess][DEBUG] Increasing generator loc to 2
[     3.372][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.373][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.381][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.384][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.385][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.389][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.392][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.395][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.530][cube-solver-0][WARNING] There is no solution for current loc (1).
[     3.532][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     3.535][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.650][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     3.650][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     3.655][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     3.659][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     3.659][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     3.662][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     3.666][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = semi_join())
[     3.667][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     3.669][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     3.669][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = inner_join())
[     3.671][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = filter())
[     3.671][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = filter())
[     3.673][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     3.673][cube-solver-1][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     3.674][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     3.675][cube-solver-1][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     3.675][cube-solver-4][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     3.676][MainProcess][DEBUG] Increasing generator loc to 3
[     3.676][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.676][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.681][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     3.685][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.687][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     3.692][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     3.694][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.862][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = anti_join())
[     3.866][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.183][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = natural_join())
[     4.193][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = natural_join3([2]))
[     4.211][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = filter([4]))
[     4.217][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = left_join())
[     4.224][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = natural_join4())
[     4.228][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.326][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = anti_join())
[     4.437][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     4.644][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = union())
[     4.896][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = intersect())
[     5.435][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = semi_join())
[     5.489][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = cross_join())
[     5.752][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = inner_join())
[     6.187][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([4]))
[     6.191][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = filter([4]))
[     6.374][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     6.830][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = filter([4]))
[     6.873][cube-solver-6][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union(), l2 = filter([4]))
[     7.044][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([4]))
[     7.108][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join(), l2 = filter([4]))
[     7.474][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join(), l2 = filter([4]))
[     7.836][cube-solver-6][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]), l2 = filter([4]))
[     7.982][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3([2]), l2 = filter([4]))
[     7.988][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join4(), l2 = filter([4]))
[     7.994][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = natural_join([2]))
[     8.085][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = natural_join3([2]))
[     8.799][cube-solver-6][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = natural_join4())
[     9.953][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = filter([4]))
[     9.982][cube-solver-7][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = anti_join())
[    10.900][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = left_join())
[    11.017][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = union())
[    11.497][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = intersect())
[    14.638][cube-solver-7][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = anti_join())
[    14.639][MainProcess][INFO] Statistics:
[    14.640][MainProcess][INFO] 	Generated cubes: 51
[    14.640][MainProcess][INFO] 	Attempted programs: 1846
[    14.640][MainProcess][INFO] 		Rejected: 430
[    14.640][MainProcess][INFO] 		Failed: 1415
[    14.640][MainProcess][INFO] 	Blacklist clauses: 8
[    14.640][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    14.641][MainProcess][DEBUG] 	0: Counter({'filter': 288, 'natural_join3': 64})
[    14.641][MainProcess][DEBUG] 	1: Counter({'natural_join4': 224, 'filter': 64, 'natural_join3': 64})
[    14.641][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    14.644][MainProcess][DEBUG] 	0: Counter({'natural_join3': 3515, 'natural_join': 2999})
[    14.647][MainProcess][DEBUG] 	1: Counter({'filter': 5565, 'inner_join': 525, 'left_join': 128, 'union': 128, 'natural_join': 128, 'semi_join': 40})
[    14.650][MainProcess][DEBUG] 	2: Counter({'natural_join4': 1368, 'natural_join3': 1136, 'filter': 1077, 'left_join': 623, 'union': 603, 'anti_join': 551, 'inner_join': 546, 'natural_join': 512, 'semi_join': 80, 'intersect': 18})
[    14.650][MainProcess][INFO] Solution found: anti_join(natural_join3(@param2, @param0, @param1), filter(natural_join3(@param2, @param0, @param1), color != 'red'), 'S_key')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/19.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input3, input1) %>% inner_join(input2)
df5 <- df4 %>% filter(color != 'red')
df6 <- anti_join(df4, df5, by=c('S_key'))
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT *
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`S_name` AS `S_name`,
             `LHS`.`P_id` AS `P_id`,
             `RHS`.`color` AS `color`
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`S_name` AS `S_name`,
                `RHS`.`P_id` AS `P_id`
         FROM `input3` AS `LHS`
         INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT `LHS`.`S_key` AS `S_key`,
                     `LHS`.`S_name` AS `S_name`,
                     `LHS`.`P_id` AS `P_id`,
                     `RHS`.`color` AS `color`
              FROM
                (SELECT `LHS`.`S_key` AS `S_key`,
                        `LHS`.`S_name` AS `S_name`,
                        `RHS`.`P_id` AS `P_id`
                 FROM `input3` AS `LHS`
                 INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
              INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
           WHERE (`color` != 'red')) AS RHS
        WHERE (LHS.S_key = RHS.S_key) ))
ORDER BY S_name
