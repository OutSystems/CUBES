[     1.673][MainProcess][INFO] Parsing specification...
[     1.676][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.676][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.677][MainProcess][DEBUG] Reading input files...
[     1.686][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/18-1.txt: ['string', 'string', 'int64']
[     1.691][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/18-3.txt: ['string', 'string']
[     1.696][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/18.out: ['string', 'string']
[     1.723][MainProcess][DEBUG] Generating DSL...
[     1.897][MainProcess][INFO] Creating 8 processes
[     1.925][MainProcess][DEBUG] Increasing generator loc to 2
[     2.070][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     2.082][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     2.087][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.091][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     2.092][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     2.096][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.100][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     2.106][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     4.878][cube-solver-1][WARNING] There is no solution for current loc (1).
[     4.880][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     4.896][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     4.943][cube-solver-0][WARNING] There is no solution for current loc (1).
[     4.944][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.952][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.608][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     7.657][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     7.676][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     7.694][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     7.703][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     7.723][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     7.739][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     7.788][cube-solver-5][DEBUG] Solving cube (l0 = summarise([1]), l1 = left_join())
[     7.880][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([5]))
[     7.888][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([5]))
[     7.892][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     7.923][cube-solver-6][DEBUG] Solving cube (l0 = summarise([7]), l1 = union())
[     7.926][cube-solver-7][DEBUG] Solving cube (l0 = summarise([7]), l1 = intersect())
[     8.700][cube-solver-3][DEBUG] Solving cube (l0 = summarise([23]), l1 = semi_join())
[     9.628][cube-solver-3][DEBUG] Solving cube (l0 = summarise([31]), l1 = cross_join())
[    10.135][cube-solver-5][DEBUG] Solving cube (l0 = summarise([31]), l1 = mutate())
[    10.168][cube-solver-5][DEBUG] Solving cube (l0 = summarise([31]), l1 = inner_join())
[    10.324][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = summarise([31]))
[    10.350][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    10.364][cube-solver-2][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([31]))
[    10.605][cube-solver-1][DEBUG] Solving cube (l0 = summarise([31]), l1 = natural_join())
[    10.883][cube-solver-0][DEBUG] Solving cube (l0 = summarise([31]), l1 = natural_join3())
[    11.485][cube-solver-6][DEBUG] Solving cube (l0 = anti_join([18]), l1 = mutate())
[    11.875][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([31]))
[    12.073][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[    12.352][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = summarise([31]))
[    12.952][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[    13.818][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([31]))
[    14.265][cube-solver-7][DEBUG] Solving cube (l0 = intersect([5]), l1 = mutate())
[    14.412][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([31]))
[    14.494][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([31]), l1 = natural_join3())
[    14.496][MainProcess][INFO] Statistics:
[    14.497][MainProcess][INFO] 	Generated cubes: 32
[    14.497][MainProcess][INFO] 	Attempted programs: 582
[    14.497][MainProcess][INFO] 		Rejected: 145
[    14.497][MainProcess][INFO] 		Failed: 436
[    14.498][MainProcess][INFO] 	Blacklist clauses: 57
[    14.498][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    14.501][MainProcess][DEBUG] 	0: Counter({'summarise': 1910, 'natural_join': 400, 'left_join': 400, 'union': 380, 'anti_join': 172, 'semi_join': 7})
[    14.503][MainProcess][DEBUG] 	1: Counter({'summarise': 904, 'natural_join3': 509, 'mutate': 456, 'inner_join': 450, 'union': 416, 'left_join': 192, 'natural_join': 192, 'anti_join': 88, 'semi_join': 64})
[    14.504][MainProcess][INFO] Solution found: natural_join3(summarise(@param0, cost = max(cost), P_id), @param0, @param1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/18-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/18-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/18.out", col_types = cols(P_id = col_character(),S_name = col_character()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = max(cost)) %>% ungroup()
df4 <- inner_join(df3, input1) %>% inner_join(input2)
out <- df4 %>% select(P_id, S_name) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_id,
       S_name
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.cost AS cost,
          LHS.S_key AS S_key,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.cost AS cost,
             RHS.S_key AS S_key
      FROM
        (SELECT P_id,
                MAX(cost) AS cost
         FROM input1
         GROUP BY P_id) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id
                                   AND LHS.cost = RHS.cost)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY P_id
