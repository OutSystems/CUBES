[     1.587][MainProcess][INFO] Parsing specification...
[     1.590][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.590][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.591][MainProcess][DEBUG] Reading input files...
[     1.598][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.602][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     1.607][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/employees.txt: ['int64', 'string', 'float64']
[     1.611][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/35.out: ['string']
[     1.641][MainProcess][DEBUG] Generating DSL...
[     1.660][MainProcess][INFO] Creating 8 processes
[     1.692][MainProcess][DEBUG] Increasing generator loc to 2
[     1.706][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.709][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.713][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.718][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.738][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.868][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.868][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     1.869][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.073][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     2.078][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     2.085][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     2.085][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     2.084][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.087][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     2.089][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     2.089][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = semi_join())
[     2.090][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     2.092][cube-solver-1][DEBUG] Solving cube (l0 = anti_join(), l1 = filter())
[     2.092][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = inner_join())
[     2.093][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     2.094][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = filter())
[     2.095][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.095][cube-solver-1][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.097][cube-solver-4][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     2.097][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.097][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     2.098][MainProcess][DEBUG] Increasing generator loc to 3
[     2.099][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.099][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.099][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.130][cube-solver-5][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join3([1]))
[     2.131][cube-solver-7][DEBUG] Solving cube (l0 = filter([2]), l1 = filter([2]))
[     2.135][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.255][cube-solver-0][DEBUG] Solving cube (l0 = filter([2]), l1 = anti_join())
[     2.261][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.703][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([10]), l2 = filter([10]))
[     2.712][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([10]), l2 = left_join())
[     2.730][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([10]), l2 = natural_join())
[     2.761][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([10]), l2 = natural_join4())
[     2.773][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([10]), l2 = natural_join3([2]))
[     2.971][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = anti_join())
[     3.981][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.308][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     4.619][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = union())
[     4.960][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = intersect())
[     6.673][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = semi_join())
[     6.741][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = cross_join())
[     8.167][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = inner_join())
[     8.980][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([10]))
[     8.986][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = filter([10]))
[    10.041][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[    10.632][cube-solver-6][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union(), l2 = filter([10]))
[    11.206][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = filter([10]))
[    12.132][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([10]))
[    13.396][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join(), l2 = filter([10]))
[    13.599][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join(), l2 = filter([10]))
[    13.869][cube-solver-6][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]), l2 = filter([10]))
[    15.840][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3([2]), l2 = filter([10]))
[    15.846][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join4(), l2 = filter([10]))
[    15.852][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = natural_join([2]))
[    15.911][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = natural_join3([2]))
[    17.156][cube-solver-6][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = natural_join4())
[    23.915][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = filter([10]))
[    25.357][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = anti_join())
[    32.154][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = left_join())
[    41.615][cube-solver-5][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = anti_join())
[    41.618][MainProcess][INFO] Statistics:
[    41.619][MainProcess][INFO] 	Generated cubes: 49
[    41.619][MainProcess][INFO] 	Attempted programs: 4020
[    41.619][MainProcess][INFO] 		Rejected: 1128
[    41.619][MainProcess][INFO] 		Failed: 2891
[    41.619][MainProcess][INFO] 	Blacklist clauses: 14
[    41.620][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    41.623][MainProcess][DEBUG] 	0: Counter({'filter': 1080, 'natural_join3': 240})
[    41.624][MainProcess][DEBUG] 	1: Counter({'natural_join4': 840, 'filter': 240, 'natural_join3': 240})
[    41.625][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    41.637][MainProcess][DEBUG] 	0: Counter({'natural_join3': 12514, 'natural_join': 10466})
[    41.643][MainProcess][DEBUG] 	1: Counter({'filter': 19835, 'inner_join': 1566, 'left_join': 480, 'union': 480, 'natural_join': 480, 'semi_join': 140})
[    41.650][MainProcess][DEBUG] 	2: Counter({'natural_join4': 5757, 'natural_join3': 4824, 'filter': 4346, 'natural_join': 1920, 'left_join': 1836, 'anti_join': 1824, 'inner_join': 1720, 'union': 480, 'semi_join': 280})
[    41.650][MainProcess][INFO] Solution found: anti_join(natural_join3(@param1, @param2, @param0), filter(natural_join3(@param1, @param2, @param0), crusingrange <= 1000), 'eid', 'salary')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/employees.txt", col_types = cols(eid = col_integer(),ename = col_character(),salary = col_double()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/35.out", col_types = cols(ename = col_character()))

df4 <- inner_join(input2, input3) %>% inner_join(input1)
df5 <- df4 %>% filter(crusingrange <= 1000)
df6 <- anti_join(df4, df5, by=c('eid', 'salary'))
out <- df6 %>% select(ename) %>% distinct() %>% arrange(ename)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT ename
FROM
  (SELECT *
   FROM
     (SELECT LHS.eid AS eid,
             LHS.aid AS aid,
             LHS.ename AS ename,
             LHS.salary AS salary,
             RHS.aname AS aname,
             RHS.crusingrange AS crusingrange
      FROM
        (SELECT LHS.eid AS eid,
                LHS.aid AS aid,
                RHS.ename AS ename,
                RHS.salary AS salary
         FROM input2 AS LHS
         INNER JOIN input3 AS RHS ON (LHS.eid = RHS.eid)) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.aid = RHS.aid)) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT LHS.eid AS eid,
                     LHS.aid AS aid,
                     LHS.ename AS ename,
                     LHS.salary AS salary,
                     RHS.aname AS aname,
                     RHS.crusingrange AS crusingrange
              FROM
                (SELECT LHS.eid AS eid,
                        LHS.aid AS aid,
                        RHS.ename AS ename,
                        RHS.salary AS salary
                 FROM input2 AS LHS
                 INNER JOIN input3 AS RHS ON (LHS.eid = RHS.eid)) AS LHS
              INNER JOIN input1 AS RHS ON (LHS.aid = RHS.aid))
           WHERE (crusingrange <= 1000.0)) AS RHS
        WHERE (LHS.eid = RHS.eid
               AND LHS.salary = RHS.salary) ))
ORDER BY ename
