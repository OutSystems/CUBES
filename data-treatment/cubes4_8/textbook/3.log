[     1.567][MainProcess][INFO] Parsing specification...
[     1.571][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.571][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.571][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.571][MainProcess][DEBUG] Reading input files...
[     1.578][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3-1.txt: ['string', 'string']
[     1.583][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3-2.txt: ['string', 'string']
[     1.587][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3.out: ['string']
[     1.614][MainProcess][DEBUG] Generating DSL...
[     1.640][MainProcess][INFO] Creating 8 processes
[     1.666][MainProcess][DEBUG] Increasing generator loc to 3
[     1.694][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.694][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.697][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.700][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.700][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.705][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.710][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.710][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.231][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.233][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.233][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.233][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.235][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.236][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.238][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.239][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.240][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.279][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.280][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.282][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.580][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.584][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.590][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.593][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.596][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.600][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.602][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.624][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.666][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.670][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     3.019][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     3.020][MainProcess][INFO] Statistics:
[     3.021][MainProcess][INFO] 	Generated cubes: 18
[     3.021][MainProcess][INFO] 	Attempted programs: 10
[     3.021][MainProcess][INFO] 		Rejected: 6
[     3.021][MainProcess][INFO] 		Failed: 3
[     3.021][MainProcess][INFO] 	Blacklist clauses: 0
[     3.021][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.022][MainProcess][DEBUG] 	0: Counter({'summarise': 69, 'natural_join': 44})
[     3.022][MainProcess][DEBUG] 	1: Counter({'mutate': 44, 'natural_join': 37, 'natural_join3': 32})
[     3.023][MainProcess][DEBUG] 	2: Counter({'filter': 113})
[     3.023][MainProcess][INFO] Solution found: filter(natural_join(summarise(@param1, n = n(), ID_key), @param0), Room == 'R128' | n > 4)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/3-1.txt", col_types = cols(ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/3-2.txt", col_types = cols(ID_key_student = col_character(),ID_key = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/3.out", col_types = cols(ID_key = col_character()))

df3 <- input2 %>% group_by(ID_key) %>% summarise(n = n()) %>% ungroup()
df4 <- inner_join(df3, input1)
df5 <- df4 %>% filter(Room == 'R128' | n > 4)
out <- df5 %>% select(ID_key) %>% arrange(ID_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `ID_key`
FROM
  (SELECT `LHS`.`ID_key` AS `ID_key`,
          `LHS`.`n` AS `n`,
          `RHS`.`Room` AS `Room`
   FROM
     (SELECT `ID_key`,
             COUNT() AS `n`
      FROM `input2`
      GROUP BY `ID_key`) AS `LHS`
   INNER JOIN `input1` AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
WHERE (`Room` = 'R128'
       OR n > 4.0)
ORDER BY ID_key
