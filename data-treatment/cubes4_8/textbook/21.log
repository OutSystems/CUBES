[     1.574][MainProcess][INFO] Parsing specification...
[     1.577][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.577][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.578][MainProcess][DEBUG] Reading input files...
[     1.585][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21-1.txt: ['string', 'string']
[     1.590][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21-2.txt: ['string', 'string']
[     1.594][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21-3.txt: ['string', 'string']
[     1.598][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21.out: ['string']
[     1.627][MainProcess][DEBUG] Generating DSL...
[     1.645][MainProcess][INFO] Creating 8 processes
[     1.680][MainProcess][DEBUG] Increasing generator loc to 2
[     1.692][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.696][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.698][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.704][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.706][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.709][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.712][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.838][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.838][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     1.839][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.971][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     1.984][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     1.992][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     1.995][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     1.996][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     1.998][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     2.000][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = semi_join())
[     2.002][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     2.002][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     2.003][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = inner_join())
[     2.005][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = filter())
[     2.005][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     2.005][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = filter())
[     2.007][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.007][cube-solver-1][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.008][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.009][cube-solver-1][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     2.009][MainProcess][DEBUG] Increasing generator loc to 3
[     2.010][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.010][cube-solver-4][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     2.010][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.015][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.015][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     2.018][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.063][cube-solver-5][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join3([1]))
[     2.186][cube-solver-0][DEBUG] Solving cube (l0 = filter([6]), l1 = anti_join())
[     2.191][cube-solver-5][DEBUG] Found solution with cube (l0 = filter([2]), l1 = natural_join3([1]))
[     2.192][MainProcess][INFO] Statistics:
[     2.192][MainProcess][INFO] 	Generated cubes: 26
[     2.192][MainProcess][INFO] 	Attempted programs: 3
[     2.192][MainProcess][INFO] 		Rejected: 0
[     2.192][MainProcess][INFO] 		Failed: 2
[     2.192][MainProcess][INFO] 	Blacklist clauses: 8
[     2.192][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.193][MainProcess][DEBUG] 	0: Counter({'filter': 17, 'natural_join3': 16})
[     2.193][MainProcess][DEBUG] 	1: Counter({'filter': 16, 'natural_join4': 9, 'natural_join3': 8})
[     2.193][MainProcess][INFO] Solution found: natural_join3(filter(@param1, color == 'red' | color == 'green'), @param0, @param2)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/21.out", col_types = cols(S_name = col_character()))

df4 <- input2 %>% filter(color == 'red' | color == 'green')
df5 <- inner_join(df4, input1) %>% inner_join(input3)
out <- df5 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `S_name`
FROM
  (SELECT `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`,
          `LHS`.`S_key` AS `S_key`,
          `RHS`.`S_name` AS `S_name`
   FROM
     (SELECT `LHS`.`P_id` AS `P_id`,
             `LHS`.`color` AS `color`,
             `RHS`.`S_key` AS `S_key`
      FROM
        (SELECT *
         FROM `input2`
         WHERE (`color` = 'red'
                OR `color` = 'green')) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
   INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_name
