[     1.581][MainProcess][INFO] Parsing specification...
[     1.584][MainProcess][DEBUG] Reading input files...
[     1.591][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/13-1.txt: ['string', 'string']
[     1.596][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/13-2.txt: ['string', 'string']
[     1.599][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/13.out: ['string']
[     1.626][MainProcess][DEBUG] Generating DSL...
[     1.639][MainProcess][INFO] Creating 8 processes
[     1.678][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.682][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.684][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     1.690][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     1.691][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     1.697][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     1.698][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     1.704][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     1.745][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     1.748][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     1.749][cube-solver-2][DEBUG] Solving cube (l0 = cross_join(),)
[     1.751][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     1.753][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(),)
[     1.753][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     1.761][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     1.761][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     1.764][MainProcess][DEBUG] Increasing generator loc to 2
[     1.765][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.766][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     1.782][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     1.791][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join(),)
[     1.792][MainProcess][INFO] Statistics:
[     1.793][MainProcess][INFO] 	Generated cubes: 11
[     1.793][MainProcess][INFO] 	Attempted programs: 3
[     1.793][MainProcess][INFO] 		Rejected: 0
[     1.793][MainProcess][INFO] 		Failed: 2
[     1.793][MainProcess][INFO] 	Blacklist clauses: 3
[     1.793][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     1.793][MainProcess][DEBUG] 	0: Counter({'natural_join': 3, 'inner_join': 2, 'left_join': 1, 'union': 1})
[     1.794][MainProcess][INFO] Solution found: natural_join(@param1, @param0)
[     1.844][cube-solver-7][DEBUG] Found solution with cube (l0 = semi_join(),)
[     1.868][cube-solver-4][DEBUG] Found solution with cube (l0 = left_join(),)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/13-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/13-2.txt", col_types = cols(P_id = col_character(),P_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/13.out", col_types = cols(P_name = col_character()))

df3 <- inner_join(input2, input1)
out <- df3 %>% select(P_name) %>% arrange(P_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_name
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.P_name AS P_name,
          RHS.S_key AS S_key
   FROM input2 AS LHS
   INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id))
ORDER BY P_name
