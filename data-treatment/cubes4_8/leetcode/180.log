[     3.274][MainProcess][INFO] Parsing specification...
[     3.280][MainProcess][DEBUG] Reading input files...
[     3.288][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/180.csv: ['int64', 'int64']
[     3.292][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/180_o.csv: ['int64']
[     3.321][MainProcess][DEBUG] Generating DSL...
[     4.195][MainProcess][INFO] Creating 8 processes
[     4.239][MainProcess][DEBUG] Increasing generator loc to 3
[     5.188][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     5.210][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     5.215][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     5.215][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     5.217][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     5.223][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     5.230][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     5.298][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[    52.020][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    52.186][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[    52.305][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[    52.372][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    52.470][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    52.658][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    52.778][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[    52.965][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    79.317][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise([2]))
[    79.351][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([2]), l2 = summarise([2]))
[    79.385][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([2]), l2 = mutate())
[    79.645][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([2]), l2 = summarise([2]))
[    79.665][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise([2]))
[    79.707][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([2]), l2 = mutate())
[    79.763][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[    79.779][cube-solver-4][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join(), l2 = summarise([2]))
[    79.809][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[    79.837][cube-solver-6][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join(), l2 = mutate())
[    79.873][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join3(), l2 = summarise([2]))
[    80.042][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join3(), l2 = mutate())
[    80.072][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join4(), l2 = summarise([2]))
[    80.171][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join4(), l2 = mutate())
[    80.196][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = natural_join())
[    80.301][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = natural_join3())
[    80.859][cube-solver-6][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = natural_join4())
[    80.985][cube-solver-6][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = summarise([2]))
[    81.150][cube-solver-6][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = filter())
[    81.324][cube-solver-6][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = anti_join())
[    81.810][cube-solver-4][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = left_join())
[    81.979][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = union())
[    83.638][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = semi_join())
[    83.642][cube-solver-4][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = intersect())
[    85.025][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = cross_join())
[    85.219][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = mutate())
[    85.353][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = inner_join())
[    85.718][cube-solver-5][DEBUG] Found solution with cube (l0 = summarise([2]), l1 = summarise([2]), l2 = inner_join())
[    85.720][MainProcess][INFO] Statistics:
[    85.720][MainProcess][INFO] 	Generated cubes: 35
[    85.720][MainProcess][INFO] 	Attempted programs: 162
[    85.720][MainProcess][INFO] 		Rejected: 146
[    85.721][MainProcess][INFO] 		Failed: 15
[    85.721][MainProcess][INFO] 	Blacklist clauses: 2
[    85.721][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    85.722][MainProcess][DEBUG] 	0: Counter({'mutate': 36, 'summarise': 16})
[    85.722][MainProcess][DEBUG] 	1: Counter({'mutate': 32, 'summarise': 20})
[    85.722][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    85.723][MainProcess][DEBUG] 	0: Counter({'summarise': 1228})
[    85.724][MainProcess][DEBUG] 	1: Counter({'summarise': 1084, 'natural_join': 144})
[    85.725][MainProcess][DEBUG] 	2: Counter({'natural_join3': 384, 'anti_join': 202, 'natural_join': 120, 'left_join': 120, 'union': 120, 'summarise': 80, 'semi_join': 80, 'mutate': 64, 'intersect': 34, 'inner_join': 24})
[    85.725][MainProcess][INFO] Solution found: inner_join(summarise(@param0, lagNum = lag(Num), Id, Num), summarise(@param0, leadNum = lead(Num), Id, Num), 'Num' = 'Id','lagNum' = 'leadNum')
[    86.141][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/180.csv", col_types = cols(Id = col_integer(),Num = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/180_o.csv", col_types = cols(ConsecutiveNums = col_integer()))

df2 <- input1 %>% group_by(Id, Num) %>% summarise(lagNum = lag(Num)) %>% ungroup()
df3 <- input1 %>% group_by(Id, Num) %>% summarise(leadNum = lead(Num)) %>% ungroup()
df4 <- inner_join(df2, df3, by=c('Num' = 'Id','lagNum' = 'leadNum'), suffix = c('', '.other'))
out <- df4 %>% select(ConsecutiveNums = Num.other) %>% distinct() %>% arrange(ConsecutiveNums)

Failed to generate SQL query
