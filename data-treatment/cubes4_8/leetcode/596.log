[     1.569][MainProcess][INFO] Parsing specification...
[     1.572][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.572][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.573][MainProcess][DEBUG] Reading input files...
[     1.579][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/596.csv: ['string', 'string']
[     1.584][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/596_o.csv: ['string']
[     1.609][MainProcess][DEBUG] Generating DSL...
[     1.626][MainProcess][INFO] Creating 8 processes
[     1.652][MainProcess][DEBUG] Increasing generator loc to 3
[     1.662][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.670][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.671][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.674][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.674][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.679][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.681][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.687][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.885][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     1.890][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.895][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     1.895][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     1.897][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     1.913][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.068][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.073][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.074][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.076][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.079][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.079][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.082][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.083][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.086][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.087][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.091][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.094][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.096][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.112][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.112][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.114][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.116][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.120][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.187][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.234][cube-solver-7][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.235][MainProcess][INFO] Statistics:
[     2.235][MainProcess][INFO] 	Generated cubes: 25
[     2.235][MainProcess][INFO] 	Attempted programs: 8
[     2.235][MainProcess][INFO] 		Rejected: 6
[     2.235][MainProcess][INFO] 		Failed: 1
[     2.235][MainProcess][INFO] 	Blacklist clauses: 1
[     2.235][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.236][MainProcess][DEBUG] 	0: Counter({'summarise': 39, 'mutate': 30})
[     2.236][MainProcess][DEBUG] 	1: Counter({'filter': 69})
[     2.236][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.236][MainProcess][DEBUG] 	0: Counter({'summarise': 37})
[     2.236][MainProcess][DEBUG] 	1: Counter({'filter': 25, 'natural_join': 12})
[     2.236][MainProcess][DEBUG] 	2: Counter({'filter': 12, 'natural_join': 12, 'natural_join3': 8, 'summarise': 5})
[     2.237][MainProcess][INFO] Solution found: natural_join3(filter(summarise(@param0, n = n(), class), n >= 5), summarise(@param0, n = n(), class), @param0)
[     2.289][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[     2.299][cube-solver-4][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.325][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/596.csv", col_types = cols(student = col_character(),class = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/596_o.csv", col_types = cols(class = col_character()))

df2 <- input1 %>% group_by(class) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n >= 5)
df4 <- inner_join(df3, df2) %>% inner_join(input1)
out <- df4 %>% select(class) %>% distinct() %>% arrange(class)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT CLASS
FROM
  (SELECT LHS.class AS CLASS,
          LHS.n AS n,
          RHS.student AS student
   FROM
     (SELECT LHS.class AS CLASS,
             LHS.n AS n
      FROM
        (SELECT *
         FROM
           (SELECT CLASS,
                   COUNT() AS n
            FROM input1
            GROUP BY CLASS)
         WHERE (n >= 5.0)) AS LHS
      INNER JOIN
        (SELECT CLASS,
                COUNT() AS n
         FROM input1
         GROUP BY CLASS) AS RHS ON (LHS.class = RHS.class
                                    AND LHS.n = RHS.n)) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.class = RHS.class))
ORDER BY CLASS
