[     1.562][MainProcess][INFO] Parsing specification...
[     1.565][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.565][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.565][MainProcess][DEBUG] Reading input files...
[     1.571][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.574][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.578][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.584][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/31.out: ['string', 'string', 'string', 'string']
[     1.613][MainProcess][DEBUG] Generating DSL...
[     1.644][MainProcess][INFO] Creating 8 processes
[     1.672][MainProcess][DEBUG] Increasing generator loc to 2
[     1.705][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.709][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.714][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.720][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.721][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.723][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.728][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     2.126][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.127][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     2.132][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.540][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     2.548][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.566][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     2.567][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     2.568][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     2.571][cube-solver-7][DEBUG] Solving cube (l0 = filter([1]), l1 = filter([1]))
[     2.573][cube-solver-1][DEBUG] Solving cube (l0 = filter([1]), l1 = left_join())
[     2.574][cube-solver-4][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join())
[     2.575][cube-solver-3][DEBUG] Solving cube (l0 = filter([1]), l1 = union())
[     2.576][cube-solver-1][DEBUG] Solving cube (l0 = filter([1]), l1 = semi_join())
[     2.577][cube-solver-7][DEBUG] Solving cube (l0 = filter([1]), l1 = intersect())
[     2.579][cube-solver-1][DEBUG] Solving cube (l0 = filter([3]), l1 = cross_join())
[     2.580][cube-solver-3][DEBUG] Solving cube (l0 = filter([3]), l1 = inner_join())
[     2.581][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([3]))
[     2.585][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = filter([3]))
[     2.586][cube-solver-3][DEBUG] Solving cube (l0 = intersect(), l1 = filter([3]))
[     2.586][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([3]))
[     2.586][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = filter([3]))
[     2.589][MainProcess][DEBUG] Increasing generator loc to 3
[     2.590][cube-solver-7][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([5]))
[     2.590][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([5]))
[     2.590][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.592][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.595][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.596][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.008][cube-solver-0][DEBUG] Solving cube (l0 = filter([24]), l1 = anti_join())
[     3.029][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.572][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     4.274][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]), l2 = natural_join4())
[     4.274][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]), l2 = natural_join())
[     4.341][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]), l2 = natural_join3([1]))
[     4.359][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]), l2 = anti_join())
[     4.382][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]), l2 = filter([24]))
[     4.417][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]), l2 = union())
[     5.235][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = left_join())
[     5.269][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter([24]), l2 = natural_join3([1]))
[     5.271][MainProcess][INFO] Statistics:
[     5.271][MainProcess][INFO] 	Generated cubes: 29
[     5.271][MainProcess][INFO] 	Attempted programs: 153
[     5.271][MainProcess][INFO] 		Rejected: 2
[     5.271][MainProcess][INFO] 		Failed: 150
[     5.272][MainProcess][INFO] 	Blacklist clauses: 28
[     5.272][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     5.272][MainProcess][DEBUG] 	0: Counter({'natural_join3': 346})
[     5.272][MainProcess][DEBUG] 	1: Counter({'filter': 346})
[     5.272][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     5.273][MainProcess][DEBUG] 	0: Counter({'natural_join': 411})
[     5.273][MainProcess][DEBUG] 	1: Counter({'filter': 412})
[     5.274][MainProcess][DEBUG] 	2: Counter({'natural_join4': 120, 'natural_join': 106, 'natural_join3': 99, 'union': 88})
[     5.274][MainProcess][INFO] Solution found: natural_join3(@param0, filter(natural_join(@param1, @param0), color == 'green' & S_key != 'S4'), @param2)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/31.out", col_types = cols(S_key = col_character(),P_id = col_character(),S_name = col_character(),color = col_character()))

df4 <- inner_join(input2, input1)
df5 <- df4 %>% filter(color == 'green' & S_key != 'S4')
df6 <- inner_join(input1, df5) %>% inner_join(input3)
out <- df6 %>% select(S_key, P_id, S_name, color) %>% arrange(S_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_key`,
       `P_id`,
       `S_name`,
       `color`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`,
          `RHS`.`S_name` AS `S_name`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`P_id` AS `P_id`,
             `RHS`.`color` AS `color`
      FROM `input1` AS `LHS`
      INNER JOIN
        (SELECT *
         FROM
           (SELECT `LHS`.`P_id` AS `P_id`,
                   `LHS`.`color` AS `color`,
                   `RHS`.`S_key` AS `S_key`
            FROM `input2` AS `LHS`
            INNER JOIN `input1` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
         WHERE (`color` = 'green'
                AND `S_key` != 'S4')) AS RHS ON (LHS.S_key = RHS.S_key
                                                 AND LHS.P_id = RHS.P_id)) AS LHS
   INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_key
