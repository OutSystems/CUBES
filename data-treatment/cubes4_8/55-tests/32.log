[     1.584][MainProcess][INFO] Parsing specification...
[     1.587][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.587][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.587][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.588][MainProcess][DEBUG] Reading input files...
[     1.595][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.600][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.609][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/32.out: ['string', 'int64']
[     1.638][MainProcess][DEBUG] Generating DSL...
[     1.691][MainProcess][INFO] Creating 8 processes
[     1.721][MainProcess][DEBUG] Increasing generator loc to 3
[     1.775][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.776][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.780][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.786][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.787][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.788][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.791][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.798][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.829][cube-solver-0][WARNING] There is no solution for current loc (2).
[     3.829][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.832][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.841][cube-solver-3][WARNING] There is no solution for current loc (2).
[     3.842][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     3.844][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.920][cube-solver-2][WARNING] There is no solution for current loc (2).
[     3.921][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.927][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.978][cube-solver-1][WARNING] There is no solution for current loc (2).
[     3.980][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.987][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.745][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     4.756][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     4.765][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     4.771][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     4.777][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     4.777][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     4.783][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     4.793][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     4.801][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     4.803][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     4.811][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     4.814][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([1]), l2 = filter())
[     4.820][cube-solver-5][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = natural_join())
[     4.823][cube-solver-6][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = natural_join3())
[     4.833][cube-solver-5][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = natural_join4())
[     4.838][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = summarise([1]))
[     4.849][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = filter())
[     4.858][cube-solver-4][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = anti_join())
[     4.871][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = left_join())
[     4.882][cube-solver-4][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter(), l2 = union())
[     4.893][cube-solver-4][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter(), l2 = intersect())
[     4.904][cube-solver-4][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter(), l2 = semi_join())
[     4.916][cube-solver-4][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter(), l2 = cross_join())
[     4.930][cube-solver-4][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = mutate())
[     4.941][cube-solver-4][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = inner_join())
[     4.954][cube-solver-4][DEBUG] Solving cube (l0 = summarise([8]), l1 = anti_join(), l2 = filter())
[     4.967][cube-solver-4][DEBUG] Solving cube (l0 = summarise([8]), l1 = left_join(), l2 = filter())
[     4.979][cube-solver-4][DEBUG] Solving cube (l0 = summarise([10]), l1 = union(), l2 = filter())
[     4.992][cube-solver-4][DEBUG] Solving cube (l0 = summarise([10]), l1 = intersect(), l2 = filter())
[     5.005][cube-solver-4][DEBUG] Solving cube (l0 = summarise([11]), l1 = semi_join(), l2 = filter())
[     5.019][cube-solver-4][DEBUG] Solving cube (l0 = summarise([12]), l1 = cross_join(), l2 = filter())
[     5.033][cube-solver-4][DEBUG] Solving cube (l0 = summarise([13]), l1 = mutate(), l2 = filter())
[     5.047][cube-solver-4][DEBUG] Solving cube (l0 = summarise([13]), l1 = inner_join(), l2 = filter([1]))
[     5.062][cube-solver-4][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join(), l2 = summarise([13]))
[     5.077][cube-solver-4][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join(), l2 = mutate())
[     5.087][cube-solver-4][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join3(), l2 = summarise([13]))
[     5.709][cube-solver-7][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     5.711][MainProcess][INFO] Statistics:
[     5.711][MainProcess][INFO] 	Generated cubes: 44
[     5.711][MainProcess][INFO] 	Attempted programs: 30
[     5.712][MainProcess][INFO] 		Rejected: 2
[     5.712][MainProcess][INFO] 		Failed: 27
[     5.712][MainProcess][INFO] 	Blacklist clauses: 15
[     5.712][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     5.713][MainProcess][DEBUG] 	0: Counter({'summarise': 85})
[     5.713][MainProcess][DEBUG] 	1: Counter({'natural_join3': 85})
[     5.713][MainProcess][DEBUG] 	2: Counter({'filter': 85})
[     5.714][MainProcess][INFO] Solution found: filter(natural_join3(@param1, summarise(@param0, n = n(), P_id, S_key), @param2), color == 'green' & S_key != 'S4')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/32.out", col_types = cols(P_id = col_character(),n = col_integer()))

df4 <- input1 %>% group_by(P_id, S_key) %>% summarise(n = n()) %>% ungroup()
df5 <- inner_join(input2, df4) %>% inner_join(input3)
df6 <- df5 %>% filter(color == 'green' & S_key != 'S4')
out <- df6 %>% select(P_id, n) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `P_id`,
       `n`
FROM
  (SELECT `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`,
          `LHS`.`S_key` AS `S_key`,
          `LHS`.`n` AS `n`,
          `RHS`.`S_name` AS `S_name`
   FROM
     (SELECT `LHS`.`P_id` AS `P_id`,
             `LHS`.`color` AS `color`,
             `RHS`.`S_key` AS `S_key`,
             `RHS`.`n` AS `n`
      FROM `input2` AS `LHS`
      INNER JOIN
        (SELECT `P_id`,
                `S_key`,
                COUNT() AS `n`
         FROM `input1`
         GROUP BY `P_id`,
                  `S_key`) AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
   INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`color` = 'green'
       AND `S_key` != 'S4')
ORDER BY P_id
