[     3.563][MainProcess][INFO] Parsing specification...
[     3.567][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.567][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.567][MainProcess][DEBUG] Reading input files...
[     3.575][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/aircraft.txt: ['int64', 'string', 'int64']
[     3.580][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/employees.txt: ['int64', 'string', 'int64']
[     3.584][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/certified.txt: ['int64', 'int64']
[     3.589][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/50.out: ['int64', 'string']
[     3.623][MainProcess][DEBUG] Generating DSL...
[     3.654][MainProcess][INFO] Creating 8 processes
[     3.693][MainProcess][DEBUG] Increasing generator loc to 2
[     3.717][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.720][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.727][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.729][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.733][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.739][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.743][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.746][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     4.026][cube-solver-0][WARNING] There is no solution for current loc (1).
[     4.027][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     4.028][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.471][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     4.480][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     4.484][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     4.484][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     4.487][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     4.488][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = semi_join())
[     4.488][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     4.490][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     4.492][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = inner_join())
[     4.495][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = filter())
[     4.497][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = filter())
[     4.499][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     4.500][cube-solver-3][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     4.502][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     4.504][cube-solver-4][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     4.504][cube-solver-3][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     4.506][MainProcess][DEBUG] Increasing generator loc to 3
[     4.507][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.507][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     4.507][cube-solver-5][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join3())
[     4.510][cube-solver-7][DEBUG] Solving cube (l0 = filter([1]), l1 = filter([1]))
[     4.514][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     4.535][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([5]))
[     4.549][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([7]))
[     4.559][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.575][cube-solver-0][DEBUG] Solving cube (l0 = filter([10]), l1 = anti_join())
[     4.582][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     5.444][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([77]), l2 = natural_join4())
[     5.483][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([77]), l2 = filter([77]))
[     5.533][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([77]), l2 = left_join())
[     5.606][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([81]), l2 = natural_join([2]))
[     5.645][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([81]), l2 = natural_join3([2]))
[     5.709][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([81]), l2 = anti_join())
[     6.119][cube-solver-3][DEBUG] Found solution with cube (l0 = natural_join([2]), l1 = filter([81]), l2 = natural_join([2]))
[     6.120][MainProcess][INFO] Statistics:
[     6.121][MainProcess][INFO] 	Generated cubes: 28
[     6.121][MainProcess][INFO] 	Attempted programs: 4
[     6.121][MainProcess][INFO] 		Rejected: 1
[     6.121][MainProcess][INFO] 		Failed: 2
[     6.121][MainProcess][INFO] 	Blacklist clauses: 85
[     6.121][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     6.122][MainProcess][DEBUG] 	0: Counter({'filter': 288, 'natural_join3': 237})
[     6.123][MainProcess][DEBUG] 	1: Counter({'filter': 237, 'natural_join4': 228, 'natural_join3': 60})
[     6.123][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     6.124][MainProcess][DEBUG] 	0: Counter({'natural_join': 276})
[     6.124][MainProcess][DEBUG] 	1: Counter({'filter': 276})
[     6.124][MainProcess][DEBUG] 	2: Counter({'natural_join4': 87, 'left_join': 72, 'natural_join': 62, 'natural_join3': 55})
[     6.125][MainProcess][INFO] Solution found: natural_join(filter(@param1, salary >= 100000 & salary < 150000), natural_join(@param2, @param0))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/employees.txt", col_types = cols(eid = col_integer(),ename = col_character(),salary = col_integer()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/50.out", col_types = cols(eid = col_integer(),ename = col_character()))

df4 <- input2 %>% filter(salary >= 100000 & salary < 150000)
df5 <- inner_join(input3, input1)
df6 <- inner_join(df4, df5)
out <- df6 %>% select(eid, ename) %>% distinct() %>% arrange(eid)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT eid,
                ename
FROM
  (SELECT LHS.eid AS eid,
          LHS.ename AS ename,
          LHS.salary AS salary,
          RHS.aid AS aid,
          RHS.aname AS aname,
          RHS.crusingrange AS crusingrange
   FROM
     (SELECT *
      FROM input2
      WHERE (salary >= 100000.0
             AND salary < 150000.0)) AS LHS
   INNER JOIN
     (SELECT LHS.eid AS eid,
             LHS.aid AS aid,
             RHS.aname AS aname,
             RHS.crusingrange AS crusingrange
      FROM input3 AS LHS
      INNER JOIN input1 AS RHS ON (LHS.aid = RHS.aid)) AS RHS ON (LHS.eid = RHS.eid))
ORDER BY eid
