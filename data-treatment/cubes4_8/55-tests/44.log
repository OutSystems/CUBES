[     1.671][MainProcess][INFO] Parsing specification...
[     1.674][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.674][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.674][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.675][MainProcess][DEBUG] Reading input files...
[     1.682][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-1.txt: ['string', 'string']
[     1.687][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-2.txt: ['string', 'string']
[     1.692][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-3.txt: ['string', 'string']
[     1.696][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/44.out: ['string']
[     1.726][MainProcess][DEBUG] Generating DSL...
[     1.753][MainProcess][INFO] Creating 8 processes
[     1.781][MainProcess][DEBUG] Increasing generator loc to 3
[     1.807][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.812][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.816][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.819][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.822][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.823][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.826][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.834][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.309][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.310][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.315][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.330][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.331][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.333][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.347][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.348][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.350][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.350][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.352][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.354][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.756][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.764][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.768][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.771][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.773][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.775][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.783][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.786][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.792][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.795][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.799][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.802][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.828][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise([1]))
[     2.841][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = natural_join4())
[     2.883][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[     2.887][cube-solver-7][DEBUG] Solving cube (l0 = summarise([9]), l1 = filter([1]), l2 = summarise([9]))
[     2.898][cube-solver-7][DEBUG] Solving cube (l0 = summarise([9]), l1 = filter([1]), l2 = filter([1]))
[     2.905][cube-solver-7][DEBUG] Solving cube (l0 = summarise([9]), l1 = filter([1]), l2 = anti_join())
[     2.912][cube-solver-7][DEBUG] Solving cube (l0 = summarise([9]), l1 = filter([2]), l2 = left_join())
[     2.918][cube-solver-7][DEBUG] Solving cube (l0 = summarise([9]), l1 = filter([2]), l2 = union())
[     2.926][cube-solver-7][DEBUG] Solving cube (l0 = summarise([10]), l1 = filter([2]), l2 = intersect())
[     2.933][cube-solver-7][DEBUG] Solving cube (l0 = summarise([11]), l1 = filter([2]), l2 = semi_join())
[     2.941][cube-solver-7][DEBUG] Solving cube (l0 = summarise([11]), l1 = filter([2]), l2 = cross_join())
[     2.950][cube-solver-7][DEBUG] Solving cube (l0 = summarise([12]), l1 = filter([2]), l2 = mutate())
[     2.959][cube-solver-7][DEBUG] Solving cube (l0 = summarise([15]), l1 = filter([2]), l2 = inner_join())
[     2.972][cube-solver-7][DEBUG] Solving cube (l0 = summarise([15]), l1 = anti_join(), l2 = filter([2]))
[     2.986][cube-solver-7][DEBUG] Solving cube (l0 = summarise([16]), l1 = left_join(), l2 = filter([2]))
[     2.995][cube-solver-7][DEBUG] Solving cube (l0 = summarise([16]), l1 = union(), l2 = filter([2]))
[     3.006][cube-solver-7][DEBUG] Solving cube (l0 = summarise([16]), l1 = intersect(), l2 = filter([2]))
[     3.016][cube-solver-7][DEBUG] Solving cube (l0 = summarise([16]), l1 = semi_join(), l2 = filter([2]))
[     3.026][cube-solver-7][DEBUG] Solving cube (l0 = summarise([16]), l1 = cross_join(), l2 = filter([2]))
[     3.037][cube-solver-7][DEBUG] Solving cube (l0 = summarise([16]), l1 = mutate(), l2 = filter([2]))
[     3.047][cube-solver-7][DEBUG] Solving cube (l0 = summarise([16]), l1 = inner_join(), l2 = filter([2]))
[     3.057][cube-solver-7][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join(), l2 = summarise([16]))
[     3.067][cube-solver-7][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join(), l2 = mutate())
[     3.071][cube-solver-7][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join3(), l2 = summarise([17]))
[     3.253][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     3.254][MainProcess][INFO] Statistics:
[     3.254][MainProcess][INFO] 	Generated cubes: 44
[     3.255][MainProcess][INFO] 	Attempted programs: 24
[     3.255][MainProcess][INFO] 		Rejected: 1
[     3.255][MainProcess][INFO] 		Failed: 22
[     3.255][MainProcess][INFO] 	Blacklist clauses: 19
[     3.255][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.256][MainProcess][DEBUG] 	0: Counter({'summarise': 26})
[     3.256][MainProcess][DEBUG] 	1: Counter({'natural_join3': 16, 'filter': 10})
[     3.256][MainProcess][DEBUG] 	2: Counter({'filter': 16, 'natural_join4': 10})
[     3.257][MainProcess][INFO] Solution found: filter(natural_join3(summarise(@param0, n = n(), P_id, S_key), @param1, @param2), S_name == 'AWS')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/16-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/16-2.txt", col_types = cols(P_id = col_character(),P_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/16-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/44.out", col_types = cols(P_name = col_character()))

df4 <- input1 %>% group_by(P_id, S_key) %>% summarise(n = n()) %>% ungroup()
df5 <- inner_join(df4, input2) %>% inner_join(input3)
df6 <- df5 %>% filter(S_name == 'AWS')
out <- df6 %>% select(P_name) %>% distinct() %>% arrange(P_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `P_name`
FROM
  (SELECT `LHS`.`P_id` AS `P_id`,
          `LHS`.`S_key` AS `S_key`,
          `LHS`.`n` AS `n`,
          `LHS`.`P_name` AS `P_name`,
          `RHS`.`S_name` AS `S_name`
   FROM
     (SELECT `LHS`.`P_id` AS `P_id`,
             `LHS`.`S_key` AS `S_key`,
             `LHS`.`n` AS `n`,
             `RHS`.`P_name` AS `P_name`
      FROM
        (SELECT `P_id`,
                `S_key`,
                COUNT() AS `n`
         FROM `input1`
         GROUP BY `P_id`,
                  `S_key`) AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
   INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`S_name` = 'AWS')
ORDER BY P_name
