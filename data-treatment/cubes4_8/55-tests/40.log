[     1.585][MainProcess][INFO] Parsing specification...
[     1.588][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.589][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.589][MainProcess][DEBUG] Reading input files...
[     1.595][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.598][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/certified.txt: ['int64', 'int64']
[     1.603][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/40.out: ['int64', 'string']
[     1.629][MainProcess][DEBUG] Generating DSL...
[     1.662][MainProcess][INFO] Creating 8 processes
[     1.689][MainProcess][DEBUG] Increasing generator loc to 3
[     1.720][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.723][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.730][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.734][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.737][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.742][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.285][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.286][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.288][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.292][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.293][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.294][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.297][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.297][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.302][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.311][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.312][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.316][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.838][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.846][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.854][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.860][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.863][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.865][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.867][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.892][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.913][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise([1]))
[     2.917][cube-solver-5][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join3(), l2 = filter())
[     3.464][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.472][cube-solver-2][DEBUG] Solving cube (l0 = summarise([5]), l1 = natural_join4(), l2 = filter())
[     3.480][cube-solver-2][DEBUG] Solving cube (l0 = summarise([5]), l1 = summarise([5]), l2 = filter())
[     3.487][cube-solver-2][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter(), l2 = natural_join())
[     3.492][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise([5]))
[     3.497][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     3.499][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([5]), l2 = filter())
[     3.504][cube-solver-0][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter(), l2 = natural_join3())
[     3.507][cube-solver-3][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter(), l2 = natural_join4())
[     3.510][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = summarise([6]))
[     3.514][cube-solver-3][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = filter())
[     3.520][cube-solver-3][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = anti_join())
[     3.523][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = left_join())
[     4.530][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([5]), l1 = filter(), l2 = natural_join3())
[     4.531][MainProcess][INFO] Statistics:
[     4.532][MainProcess][INFO] 	Generated cubes: 27
[     4.532][MainProcess][INFO] 	Attempted programs: 8
[     4.532][MainProcess][INFO] 		Rejected: 3
[     4.532][MainProcess][INFO] 		Failed: 4
[     4.532][MainProcess][INFO] 	Blacklist clauses: 6
[     4.532][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     4.534][MainProcess][DEBUG] 	0: Counter({'summarise': 725, 'natural_join': 425})
[     4.534][MainProcess][DEBUG] 	1: Counter({'filter': 315, 'mutate': 222, 'natural_join3': 210, 'summarise': 203, 'natural_join': 200})
[     4.535][MainProcess][DEBUG] 	2: Counter({'filter': 836, 'natural_join3': 123, 'natural_join': 120, 'left_join': 60, 'anti_join': 12})
[     4.535][MainProcess][INFO] Solution found: natural_join3(@param1, @param0, filter(summarise(@param1, n = n(), eid), n < 3))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/40.out", col_types = cols(eid = col_integer(),aname = col_character()))

df3 <- input2 %>% group_by(eid) %>% summarise(n = n()) %>% ungroup()
df4 <- df3 %>% filter(n < 3)
df5 <- inner_join(input2, input1) %>% inner_join(df4)
out <- df5 %>% select(eid, aname) %>% arrange(eid)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT eid,
       aname
FROM
  (SELECT LHS.eid AS eid,
          LHS.aid AS aid,
          LHS.aname AS aname,
          LHS.crusingrange AS crusingrange,
          RHS.n AS n
   FROM
     (SELECT LHS.eid AS eid,
             LHS.aid AS aid,
             RHS.aname AS aname,
             RHS.crusingrange AS crusingrange
      FROM input2 AS LHS
      INNER JOIN input1 AS RHS ON (LHS.aid = RHS.aid)) AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT eid,
                COUNT() AS n
         FROM input2
         GROUP BY eid)
      WHERE (n < 3.0)) AS RHS ON (LHS.eid = RHS.eid))
ORDER BY eid
