[     1.555][MainProcess][INFO] Parsing specification...
[     1.558][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.558][MainProcess][DEBUG] Reading input files...
[     1.565][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.570][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.575][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.579][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/51.out: ['string', 'int64']
[     1.609][MainProcess][DEBUG] Generating DSL...
[     1.631][MainProcess][INFO] Creating 8 processes
[     1.662][MainProcess][DEBUG] Increasing generator loc to 2
[     1.684][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.684][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.686][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.693][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.693][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.699][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.701][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.887][cube-solver-1][WARNING] There is no solution for current loc (1).
[     1.887][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.888][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.888][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.889][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.889][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.136][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.142][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.148][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.151][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.154][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.156][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.158][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.159][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     2.160][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     2.162][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.163][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.165][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.166][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.168][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.169][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.170][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.171][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.173][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.174][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     2.175][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.175][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     2.176][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[     2.178][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     2.179][cube-solver-6][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[     2.180][cube-solver-2][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[     2.180][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     2.182][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     2.184][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     2.193][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.195][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     2.197][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     2.198][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     2.198][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.199][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     2.201][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     2.202][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     2.204][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join())
[     2.205][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     2.206][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[     2.208][cube-solver-3][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise())
[     2.210][cube-solver-3][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[     2.211][MainProcess][DEBUG] Increasing generator loc to 3
[     2.211][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.222][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.225][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.376][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.378][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.384][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3([2]))
[     3.009][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([5]), l2 = natural_join())
[     3.009][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([5]), l2 = natural_join3([2]))
[     3.200][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([5]), l2 = natural_join4())
[     3.206][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([5]), l2 = summarise([5]))
[     3.213][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([5]), l2 = anti_join())
[     3.343][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     4.214][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([10]), l2 = left_join())
[     4.587][cube-solver-7][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise([5]), l2 = natural_join3([2]))
[     4.588][MainProcess][INFO] Statistics:
[     4.589][MainProcess][INFO] 	Generated cubes: 52
[     4.589][MainProcess][INFO] 	Attempted programs: 32
[     4.589][MainProcess][INFO] 		Rejected: 8
[     4.589][MainProcess][INFO] 		Failed: 23
[     4.589][MainProcess][INFO] 	Blacklist clauses: 14
[     4.590][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     4.591][MainProcess][DEBUG] 	0: Counter({'mutate': 688, 'natural_join3': 440, 'summarise': 243})
[     4.592][MainProcess][DEBUG] 	1: Counter({'natural_join3': 571, 'natural_join4': 360, 'summarise': 280, 'mutate': 160})
[     4.592][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     4.593][MainProcess][DEBUG] 	0: Counter({'natural_join': 413})
[     4.594][MainProcess][DEBUG] 	1: Counter({'summarise': 414})
[     4.594][MainProcess][DEBUG] 	2: Counter({'natural_join3': 182, 'natural_join': 144, 'anti_join': 48, 'left_join': 40})
[     4.594][MainProcess][INFO] Solution found: natural_join3(summarise(natural_join(@param1, @param0), n = n(), P_id, color), @param0, @param2)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/51.out", col_types = cols(S_name = col_character(),n = col_integer()))

df4 <- inner_join(input2, input1)
df5 <- df4 %>% group_by(P_id, color) %>% summarise(n = n()) %>% ungroup()
df6 <- inner_join(df5, input1) %>% inner_join(input3)
out <- df6 %>% select(S_name, n) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT S_name,
                n
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.color AS color,
          LHS.n AS n,
          LHS.S_key AS S_key,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.color AS color,
             LHS.n AS n,
             RHS.S_key AS S_key
      FROM
        (SELECT P_id,
                color,
                COUNT() AS n
         FROM
           (SELECT LHS.P_id AS P_id,
                   LHS.color AS color,
                   RHS.S_key AS S_key
            FROM input2 AS LHS
            INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id))
         GROUP BY P_id,
                  color) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
   INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_name
