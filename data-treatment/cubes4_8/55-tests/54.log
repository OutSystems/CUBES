[     1.668][MainProcess][INFO] Parsing specification...
[     1.671][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.671][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.672][MainProcess][DEBUG] Reading input files...
[     1.679][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.683][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/certified.txt: ['int64', 'int64']
[     1.686][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/54.out: ['int64']
[     1.714][MainProcess][DEBUG] Generating DSL...
[     1.745][MainProcess][INFO] Creating 8 processes
[     1.785][MainProcess][DEBUG] Increasing generator loc to 3
[     1.809][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.810][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.811][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.820][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.821][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.828][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.835][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.838][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.370][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.371][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.376][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.395][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.395][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.397][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.405][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.406][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.407][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.407][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.408][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.409][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.936][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.972][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.980][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.982][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.982][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.984][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.986][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.988][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.995][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.999][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     3.547][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.553][cube-solver-0][DEBUG] Solving cube (l0 = summarise([7]), l1 = natural_join4(), l2 = filter())
[     3.562][cube-solver-0][DEBUG] Solving cube (l0 = summarise([7]), l1 = summarise([7]), l2 = filter())
[     3.570][cube-solver-0][DEBUG] Solving cube (l0 = summarise([8]), l1 = filter(), l2 = natural_join())
[     3.573][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([8]), l2 = filter())
[     3.573][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     3.584][cube-solver-3][DEBUG] Solving cube (l0 = summarise([8]), l1 = filter(), l2 = natural_join3())
[     3.586][cube-solver-2][DEBUG] Solving cube (l0 = summarise([8]), l1 = filter(), l2 = natural_join4())
[     3.589][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise([8]))
[     3.595][cube-solver-2][DEBUG] Solving cube (l0 = summarise([8]), l1 = filter(), l2 = summarise([8]))
[     3.596][cube-solver-1][DEBUG] Solving cube (l0 = summarise([8]), l1 = filter(), l2 = filter())
[     3.604][cube-solver-1][DEBUG] Solving cube (l0 = summarise([8]), l1 = filter(), l2 = anti_join())
[     3.605][cube-solver-2][DEBUG] Solving cube (l0 = summarise([8]), l1 = filter(), l2 = left_join())
[     3.781][cube-solver-7][DEBUG] Solving cube (l0 = summarise([11]), l1 = filter([6]), l2 = union())
[     3.964][cube-solver-3][DEBUG] Found solution with cube (l0 = summarise([8]), l1 = filter(), l2 = natural_join3())
[     3.966][MainProcess][INFO] Statistics:
[     3.967][MainProcess][INFO] 	Generated cubes: 28
[     3.967][MainProcess][INFO] 	Attempted programs: 18
[     3.967][MainProcess][INFO] 		Rejected: 13
[     3.967][MainProcess][INFO] 		Failed: 4
[     3.968][MainProcess][INFO] 	Blacklist clauses: 17
[     3.968][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.969][MainProcess][DEBUG] 	0: Counter({'summarise': 296, 'natural_join': 210})
[     3.969][MainProcess][DEBUG] 	1: Counter({'filter': 116, 'summarise': 110, 'natural_join3': 104, 'mutate': 100, 'natural_join': 76})
[     3.970][MainProcess][DEBUG] 	2: Counter({'filter': 390, 'natural_join3': 34, 'natural_join': 32, 'left_join': 22, 'union': 20, 'anti_join': 8})
[     3.970][MainProcess][INFO] Solution found: natural_join3(@param0, @param1, filter(summarise(@param1, n = n(), eid), n < 3))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/54.out", col_types = cols(eid = col_integer()))

df3 <- input2 %>% group_by(eid) %>% summarise(n = n()) %>% ungroup()
df4 <- df3 %>% filter(n < 3)
df5 <- inner_join(input1, input2) %>% inner_join(df4)
out <- df5 %>% select(eid) %>% distinct() %>% arrange(eid)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT eid
FROM
  (SELECT LHS.aid AS aid,
          LHS.aname AS aname,
          LHS.crusingrange AS crusingrange,
          LHS.eid AS eid,
          RHS.n AS n
   FROM
     (SELECT LHS.aid AS aid,
             LHS.aname AS aname,
             LHS.crusingrange AS crusingrange,
             RHS.eid AS eid
      FROM input1 AS LHS
      INNER JOIN input2 AS RHS ON (LHS.aid = RHS.aid)) AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT eid,
                COUNT() AS n
         FROM input2
         GROUP BY eid)
      WHERE (n < 3.0)) AS RHS ON (LHS.eid = RHS.eid))
ORDER BY eid
