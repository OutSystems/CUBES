[     1.567][MainProcess][INFO] Parsing specification...
[     1.570][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.570][MainProcess][DEBUG] Reading input files...
[     1.577][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/12-1.txt: ['string', 'int64', 'string']
[     1.582][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/12.out: ['int64', 'string']
[     1.608][MainProcess][DEBUG] Generating DSL...
[     1.629][MainProcess][INFO] Creating 8 processes
[     1.657][MainProcess][DEBUG] Increasing generator loc to 3
[     1.672][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.675][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.677][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.681][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.683][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.688][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.688][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.695][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.966][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.972][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.003][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.005][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.013][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.016][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.229][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.233][cube-solver-6][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.235][cube-solver-6][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.238][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.240][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.243][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.245][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.246][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.253][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.260][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.266][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.268][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.270][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.305][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = summarise())
[     2.310][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = natural_join3())
[     2.324][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[     2.330][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = natural_join4())
[     2.334][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = summarise())
[     2.604][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = summarise())
[     2.609][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     2.616][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter([1]))
[     2.619][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.978][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     2.980][MainProcess][INFO] Statistics:
[     2.980][MainProcess][INFO] 	Generated cubes: 26
[     2.980][MainProcess][INFO] 	Attempted programs: 4
[     2.981][MainProcess][INFO] 		Rejected: 3
[     2.981][MainProcess][INFO] 		Failed: 0
[     2.981][MainProcess][INFO] 	Blacklist clauses: 1
[     2.981][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.982][MainProcess][DEBUG] 	0: Counter({'mutate': 126, 'summarise': 116})
[     2.982][MainProcess][DEBUG] 	1: Counter({'filter': 242})
[     2.982][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.983][MainProcess][DEBUG] 	0: Counter({'summarise': 296})
[     2.983][MainProcess][DEBUG] 	1: Counter({'filter': 204, 'natural_join': 92})
[     2.983][MainProcess][DEBUG] 	2: Counter({'filter': 129, 'natural_join3': 72, 'natural_join': 49, 'anti_join': 30, 'summarise': 16})
[     2.983][MainProcess][INFO] Solution found: filter(filter(summarise(@param0, n = n(), age, level), n == max(n)), age == max(n) | n == max(n))
[     3.085][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[     3.218][cube-solver-4][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/12-1.txt", col_types = cols(S_key = col_character(),age = col_integer(),level = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/55-tests/tables/12.out", col_types = cols(age = col_integer(),level = col_character()))

df2 <- input1 %>% group_by(age, level) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n == max(n))
df4 <- df3 %>% filter(age == max(n) | n == max(n))
out <- df4 %>% select(age, level) %>% arrange(age)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT age,
       LEVEL
FROM
  (SELECT age,
          LEVEL,
          n
   FROM
     (SELECT age,
             LEVEL,
             n,
             MAX(n) OVER () AS zzz2,
                         MAX(n) OVER () AS zzz3
      FROM
        (SELECT age,
                LEVEL,
                n
         FROM
           (SELECT age,
                   LEVEL,
                   n,
                   MAX(n) OVER () AS zzz4
            FROM
              (SELECT age,
                      LEVEL,
                      COUNT() AS n
               FROM input1
               GROUP BY age,
                        LEVEL))
         WHERE (n = zzz4)))
   WHERE (age = zzz2
          OR n = zzz3))
ORDER BY age
