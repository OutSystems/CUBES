[     1.577][MainProcess][INFO] Parsing specification...
[     1.580][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.580][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.580][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.581][MainProcess][DEBUG] Reading input files...
[     1.588][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.592][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.597][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.601][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/36.out: ['string']
[     1.630][MainProcess][DEBUG] Generating DSL...
[     1.655][MainProcess][INFO] Creating 8 processes
[     1.683][MainProcess][DEBUG] Increasing generator loc to 3
[     1.710][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.713][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.714][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.720][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.725][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.726][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.730][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.219][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.220][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.220][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.221][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.221][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.223][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.231][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.232][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.234][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.234][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.236][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.237][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.701][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.711][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.712][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.715][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.716][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.717][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.719][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.720][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.721][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.721][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.723][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.723][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.725][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.727][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.728][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.731][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.737][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.740][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.742][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.744][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.748][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = intersect())
[     2.751][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = semi_join())
[     2.754][cube-solver-4][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = cross_join())
[     2.758][cube-solver-4][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = mutate())
[     2.761][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = inner_join())
[     2.765][cube-solver-4][DEBUG] Solving cube (l0 = summarise([5]), l1 = anti_join(), l2 = filter())
[     2.770][cube-solver-4][DEBUG] Solving cube (l0 = summarise([5]), l1 = left_join(), l2 = filter())
[     2.775][cube-solver-4][DEBUG] Solving cube (l0 = summarise([5]), l1 = union(), l2 = filter())
[     2.779][cube-solver-4][DEBUG] Solving cube (l0 = summarise([6]), l1 = intersect(), l2 = filter())
[     2.785][cube-solver-4][DEBUG] Solving cube (l0 = summarise([7]), l1 = semi_join(), l2 = filter())
[     2.790][cube-solver-4][DEBUG] Solving cube (l0 = summarise([8]), l1 = cross_join(), l2 = filter())
[     2.796][cube-solver-4][DEBUG] Solving cube (l0 = summarise([10]), l1 = mutate(), l2 = filter())
[     2.802][cube-solver-4][DEBUG] Solving cube (l0 = summarise([10]), l1 = inner_join(), l2 = filter())
[     2.809][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = summarise([11]))
[     2.816][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = mutate())
[     2.818][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = summarise([12]))
[     3.011][cube-solver-7][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     3.012][MainProcess][INFO] Statistics:
[     3.013][MainProcess][INFO] 	Generated cubes: 44
[     3.013][MainProcess][INFO] 	Attempted programs: 15
[     3.013][MainProcess][INFO] 		Rejected: 0
[     3.013][MainProcess][INFO] 		Failed: 14
[     3.013][MainProcess][INFO] 	Blacklist clauses: 12
[     3.013][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.013][MainProcess][DEBUG] 	0: Counter({'filter': 12, 'summarise': 10})
[     3.013][MainProcess][DEBUG] 	1: Counter({'natural_join3': 22})
[     3.014][MainProcess][DEBUG] 	2: Counter({'summarise': 12, 'filter': 10})
[     3.014][MainProcess][INFO] Solution found: filter(natural_join3(summarise(@param0, n = n(), P_id, S_key), @param1, @param2), color == 'red')
[     3.207][cube-solver-4][DEBUG] Found solution with cube (l0 = filter(), l1 = natural_join3(), l2 = summarise([12]))
[     3.275][cube-solver-5][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/36.out", col_types = cols(S_name = col_character()))

df4 <- input1 %>% group_by(P_id, S_key) %>% summarise(n = n()) %>% ungroup()
df5 <- inner_join(df4, input2) %>% inner_join(input3)
df6 <- df5 %>% filter(color == 'red')
out <- df6 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `S_name`
FROM
  (SELECT `LHS`.`P_id` AS `P_id`,
          `LHS`.`S_key` AS `S_key`,
          `LHS`.`n` AS `n`,
          `LHS`.`color` AS `color`,
          `RHS`.`S_name` AS `S_name`
   FROM
     (SELECT `LHS`.`P_id` AS `P_id`,
             `LHS`.`S_key` AS `S_key`,
             `LHS`.`n` AS `n`,
             `RHS`.`color` AS `color`
      FROM
        (SELECT `P_id`,
                `S_key`,
                COUNT() AS `n`
         FROM `input1`
         GROUP BY `P_id`,
                  `S_key`) AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
   INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`color` = 'red')
ORDER BY S_name
