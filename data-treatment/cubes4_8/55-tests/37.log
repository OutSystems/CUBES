[     1.585][MainProcess][INFO] Parsing specification...
[     1.588][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.589][MainProcess][DEBUG] Reading input files...
[     1.594][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.598][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.601][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/37.out: ['string']
[     1.634][MainProcess][DEBUG] Generating DSL...
[     1.655][MainProcess][INFO] Creating 8 processes
[     1.685][MainProcess][DEBUG] Increasing generator loc to 2
[     1.707][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.709][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.716][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.717][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.720][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.723][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.730][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.905][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.905][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.907][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.910][cube-solver-1][WARNING] There is no solution for current loc (1).
[     1.911][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.912][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.161][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.168][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.174][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.177][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.181][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.183][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.184][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.185][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.184][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.186][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     2.186][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     2.188][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.188][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.189][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.189][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.190][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.190][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.191][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.192][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.192][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.193][cube-solver-3][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     2.194][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     2.194][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[     2.195][cube-solver-6][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[     2.196][cube-solver-3][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[     2.195][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     2.197][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     2.197][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     2.198][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     2.199][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     2.199][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise())
[     2.202][MainProcess][INFO] Statistics:
[     2.202][MainProcess][INFO] 	Generated cubes: 36
[     2.202][MainProcess][INFO] 	Attempted programs: 1
[     2.202][MainProcess][INFO] 		Rejected: 0
[     2.202][MainProcess][INFO] 		Failed: 0
[     2.202][MainProcess][INFO] 	Blacklist clauses: 0
[     2.202][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.203][MainProcess][DEBUG] 	0: Counter({'natural_join3': 1})
[     2.203][MainProcess][DEBUG] 	1: Counter({'summarise': 1})
[     2.203][MainProcess][INFO] Solution found: summarise(natural_join3(@param0, @param1, @param2), n = n(), S_name)
[     2.275][cube-solver-3][DEBUG] Found solution with cube (l0 = mutate(), l1 = natural_join3())
[     2.301][cube-solver-6][DEBUG] Found solution with cube (l0 = mutate(), l1 = natural_join4())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/37.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input1, input2) %>% inner_join(input3)
df5 <- df4 %>% group_by(S_name) %>% summarise(n = n()) %>% ungroup()
out <- df5 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT S_name,
          COUNT() AS n
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.P_id AS P_id,
             LHS.color AS color,
             RHS.S_name AS S_name
      FROM
        (SELECT LHS.S_key AS S_key,
                LHS.P_id AS P_id,
                RHS.color AS color
         FROM input1 AS LHS
         INNER JOIN input2 AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
      INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
   GROUP BY S_name)
ORDER BY S_name
