[     1.594][MainProcess][INFO] Parsing specification...
[     1.598][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.598][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.599][MainProcess][DEBUG] Reading input files...
[     1.606][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-1.txt: ['string', 'string', 'int64']
[     1.611][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-3.txt: ['string', 'string']
[     1.615][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/43.out: ['string', 'int64']
[     1.643][MainProcess][DEBUG] Generating DSL...
[     2.495][MainProcess][INFO] Creating 8 processes
[     2.525][MainProcess][DEBUG] Increasing generator loc to 3
[     3.449][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.453][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.463][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.470][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.470][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.473][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.494][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.499][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[    53.983][cube-solver-2][WARNING] There is no solution for current loc (2).
[    53.984][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    54.105][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    54.876][cube-solver-1][WARNING] There is no solution for current loc (2).
[    54.877][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    54.965][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    55.031][cube-solver-3][WARNING] There is no solution for current loc (2).
[    55.032][cube-solver-0][WARNING] There is no solution for current loc (2).
[    55.032][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[    55.032][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[    55.113][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    55.115][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[    79.910][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise())
[    80.007][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise())
[    80.326][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = summarise())
[    80.435][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = mutate())
[    80.543][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise())
[    80.654][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[    80.764][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = summarise())
[    80.870][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[    83.832][cube-solver-7][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join(), l2 = mutate())
[    87.975][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([29]), l2 = mutate())
[    88.772][cube-solver-6][DEBUG] Solving cube (l0 = summarise([34]), l1 = natural_join3(), l2 = summarise([34]))
[    95.015][cube-solver-7][DEBUG] Solving cube (l0 = summarise([42]), l1 = natural_join3(), l2 = mutate())
[    97.788][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise([34]), l1 = natural_join3(), l2 = summarise([34]))
[    97.790][MainProcess][INFO] Statistics:
[    97.791][MainProcess][INFO] 	Generated cubes: 20
[    97.791][MainProcess][INFO] 	Attempted programs: 325
[    97.791][MainProcess][INFO] 		Rejected: 178
[    97.791][MainProcess][INFO] 		Failed: 146
[    97.791][MainProcess][INFO] 	Blacklist clauses: 42
[    97.791][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    97.794][MainProcess][DEBUG] 	0: Counter({'summarise': 1997, 'natural_join': 1836})
[    97.797][MainProcess][DEBUG] 	1: Counter({'natural_join3': 1029, 'mutate': 1024, 'natural_join': 968, 'summarise': 812})
[    97.799][MainProcess][DEBUG] 	2: Counter({'mutate': 2400, 'summarise': 1433})
[    97.800][MainProcess][INFO] Solution found: summarise(natural_join3(@param0, @param1, summarise(@param0, cost = max(cost), P_id)), n = n(), S_name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/18-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/18-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/43.out", col_types = cols(S_name = col_character(),n = col_integer()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = max(cost)) %>% ungroup()
df4 <- inner_join(input1, input2) %>% inner_join(df3)
df5 <- df4 %>% group_by(S_name) %>% summarise(n = n()) %>% ungroup()
out <- df5 %>% select(S_name, n) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name,
       n
FROM
  (SELECT S_name,
          COUNT() AS n
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.P_id AS P_id,
             LHS.cost AS cost,
             LHS.S_name AS S_name
      FROM
        (SELECT LHS.S_key AS S_key,
                LHS.P_id AS P_id,
                LHS.cost AS cost,
                RHS.S_name AS S_name
         FROM input1 AS LHS
         INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
      INNER JOIN
        (SELECT P_id,
                MAX(cost) AS cost
         FROM input1
         GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id
                                   AND LHS.cost = RHS.cost))
   GROUP BY S_name)
ORDER BY S_name
