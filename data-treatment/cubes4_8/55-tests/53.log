[     3.369][MainProcess][INFO] Parsing specification...
[     3.373][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.373][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.374][MainProcess][DEBUG] Reading input files...
[     3.383][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-1.txt: ['string', 'string', 'int64']
[     3.388][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-3.txt: ['string', 'string']
[     3.392][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/53.out: ['string', 'string']
[     3.422][MainProcess][DEBUG] Generating DSL...
[     3.594][MainProcess][INFO] Creating 8 processes
[     3.631][MainProcess][DEBUG] Increasing generator loc to 2
[     3.774][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.778][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.784][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.795][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.802][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.818][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.823][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.823][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     6.571][cube-solver-1][WARNING] There is no solution for current loc (1).
[     6.573][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     6.590][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     6.627][cube-solver-0][WARNING] There is no solution for current loc (1).
[     6.627][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     6.635][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     9.364][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     9.449][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     9.487][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     9.493][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     9.512][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     9.533][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     9.536][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     9.565][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     9.631][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[     9.665][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     9.676][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([6]))
[     9.698][cube-solver-7][DEBUG] Solving cube (l0 = summarise([6]), l1 = union())
[     9.712][cube-solver-4][DEBUG] Solving cube (l0 = summarise([8]), l1 = intersect())
[    10.414][cube-solver-3][DEBUG] Solving cube (l0 = summarise([21]), l1 = semi_join())
[    11.439][cube-solver-3][DEBUG] Solving cube (l0 = summarise([31]), l1 = cross_join())
[    11.907][cube-solver-5][DEBUG] Solving cube (l0 = summarise([31]), l1 = mutate())
[    11.937][cube-solver-5][DEBUG] Solving cube (l0 = summarise([31]), l1 = inner_join())
[    12.042][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = summarise([31]))
[    12.068][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    12.083][cube-solver-2][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([31]))
[    12.307][cube-solver-1][DEBUG] Solving cube (l0 = summarise([31]), l1 = natural_join())
[    12.581][cube-solver-0][DEBUG] Solving cube (l0 = summarise([31]), l1 = natural_join3())
[    12.941][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([31]), l1 = natural_join3())
[    12.943][MainProcess][INFO] Statistics:
[    12.944][MainProcess][INFO] 	Generated cubes: 24
[    12.944][MainProcess][INFO] 	Attempted programs: 164
[    12.944][MainProcess][INFO] 		Rejected: 57
[    12.944][MainProcess][INFO] 		Failed: 106
[    12.944][MainProcess][INFO] 	Blacklist clauses: 40
[    12.945][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    12.946][MainProcess][DEBUG] 	0: Counter({'summarise': 882, 'natural_join': 400, 'anti_join': 20})
[    12.947][MainProcess][DEBUG] 	1: Counter({'union': 380, 'summarise': 292, 'left_join': 192, 'mutate': 128, 'anti_join': 76, 'inner_join': 72, 'semi_join': 64, 'natural_join': 59, 'natural_join3': 39})
[    12.947][MainProcess][INFO] Solution found: natural_join3(@param1, @param0, summarise(@param0, cost = min(cost), P_id))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/17-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/17-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/53.out", col_types = cols(P_id = col_character(),S_name = col_character()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = min(cost)) %>% ungroup()
df4 <- inner_join(input2, input1) %>% inner_join(df3)
out <- df4 %>% select(P_id, S_name) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_id,
       S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.S_name AS S_name,
          LHS.P_id AS P_id,
          LHS.cost AS cost
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.S_name AS S_name,
             RHS.P_id AS P_id,
             RHS.cost AS cost
      FROM input2 AS LHS
      INNER JOIN input1 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
   INNER JOIN
     (SELECT P_id,
             MIN(cost) AS cost
      FROM input1
      GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id
                                AND LHS.cost = RHS.cost))
ORDER BY P_id
