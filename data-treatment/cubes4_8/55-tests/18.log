[     1.866][MainProcess][INFO] Parsing specification...
[     1.869][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.870][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.870][MainProcess][DEBUG] Reading input files...
[     1.879][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-1.txt: ['string', 'string', 'int64']
[     1.884][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-3.txt: ['string', 'string']
[     1.889][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18.out: ['string', 'string']
[     1.917][MainProcess][DEBUG] Generating DSL...
[     2.089][MainProcess][INFO] Creating 8 processes
[     2.121][MainProcess][DEBUG] Increasing generator loc to 2
[     2.263][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     2.265][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.270][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     2.273][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     2.276][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     2.283][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.296][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     2.302][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     5.029][cube-solver-1][WARNING] There is no solution for current loc (1).
[     5.029][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     5.038][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     5.084][cube-solver-0][WARNING] There is no solution for current loc (1).
[     5.084][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     5.093][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.822][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     7.824][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     7.870][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     7.906][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     7.919][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     7.933][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     7.938][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     7.956][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     7.970][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     7.992][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     8.032][cube-solver-5][DEBUG] Solving cube (l0 = summarise([1]), l1 = union())
[     8.039][cube-solver-6][DEBUG] Solving cube (l0 = summarise([1]), l1 = left_join())
[     8.040][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = intersect())
[     8.784][cube-solver-3][DEBUG] Solving cube (l0 = summarise([22]), l1 = semi_join())
[     9.718][cube-solver-3][DEBUG] Solving cube (l0 = summarise([31]), l1 = cross_join())
[    10.195][cube-solver-2][DEBUG] Solving cube (l0 = summarise([31]), l1 = mutate())
[    10.227][cube-solver-2][DEBUG] Solving cube (l0 = summarise([31]), l1 = inner_join())
[    10.549][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = summarise([31]))
[    10.578][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    10.596][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([31]))
[    10.793][cube-solver-1][DEBUG] Solving cube (l0 = summarise([31]), l1 = natural_join())
[    10.872][cube-solver-0][DEBUG] Solving cube (l0 = summarise([31]), l1 = natural_join3())
[    11.225][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([31]), l1 = natural_join3())
[    11.226][MainProcess][INFO] Statistics:
[    11.226][MainProcess][INFO] 	Generated cubes: 24
[    11.226][MainProcess][INFO] 	Attempted programs: 160
[    11.226][MainProcess][INFO] 		Rejected: 57
[    11.226][MainProcess][INFO] 		Failed: 102
[    11.226][MainProcess][INFO] 	Blacklist clauses: 35
[    11.227][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    11.227][MainProcess][DEBUG] 	0: Counter({'summarise': 832, 'natural_join': 400, 'anti_join': 18})
[    11.228][MainProcess][DEBUG] 	1: Counter({'union': 356, 'summarise': 290, 'left_join': 192, 'mutate': 128, 'inner_join': 81, 'semi_join': 64, 'anti_join': 64, 'natural_join3': 39, 'natural_join': 36})
[    11.228][MainProcess][INFO] Solution found: natural_join3(@param1, @param0, summarise(@param0, cost = max(cost), P_id))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/18-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/18-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/18.out", col_types = cols(P_id = col_character(),S_name = col_character()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = max(cost)) %>% ungroup()
df4 <- inner_join(input2, input1) %>% inner_join(df3)
out <- df4 %>% select(P_id, S_name) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_id,
       S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.S_name AS S_name,
          LHS.P_id AS P_id,
          LHS.cost AS cost
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.S_name AS S_name,
             RHS.P_id AS P_id,
             RHS.cost AS cost
      FROM input2 AS LHS
      INNER JOIN input1 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
   INNER JOIN
     (SELECT P_id,
             MAX(cost) AS cost
      FROM input1
      GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id
                                AND LHS.cost = RHS.cost))
ORDER BY P_id
