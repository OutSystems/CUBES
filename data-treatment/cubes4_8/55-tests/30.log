[     1.676][MainProcess][INFO] Parsing specification...
[     1.679][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.680][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.680][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.680][MainProcess][DEBUG] Reading input files...
[     1.688][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.692][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.697][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.702][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/30.out: ['string', 'int64']
[     1.732][MainProcess][DEBUG] Generating DSL...
[     1.784][MainProcess][INFO] Creating 8 processes
[     1.821][MainProcess][DEBUG] Increasing generator loc to 3
[     1.869][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.871][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.872][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.878][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.880][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.886][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.890][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.898][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.978][cube-solver-1][WARNING] There is no solution for current loc (2).
[     3.978][cube-solver-0][WARNING] There is no solution for current loc (2).
[     3.979][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.979][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.981][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.981][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.988][cube-solver-3][WARNING] There is no solution for current loc (2).
[     3.989][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     3.991][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.996][cube-solver-2][WARNING] There is no solution for current loc (2).
[     3.997][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     4.002][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.823][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     4.829][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     4.868][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     4.878][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     4.879][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     4.886][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     4.890][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     4.892][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     4.893][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     4.904][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     4.904][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     4.909][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     4.911][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     4.914][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     4.920][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     4.929][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     4.938][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     4.948][cube-solver-5][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([2]), l2 = anti_join())
[     4.966][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([3]), l2 = left_join())
[     4.985][cube-solver-5][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([4]), l2 = union())
[     4.995][cube-solver-5][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter([4]), l2 = intersect())
[     5.004][cube-solver-5][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter([4]), l2 = semi_join())
[     5.015][cube-solver-5][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter([5]), l2 = cross_join())
[     5.032][cube-solver-5][DEBUG] Solving cube (l0 = summarise([7]), l1 = filter([6]), l2 = mutate())
[     5.043][cube-solver-5][DEBUG] Solving cube (l0 = summarise([7]), l1 = filter([6]), l2 = inner_join())
[     5.055][cube-solver-5][DEBUG] Solving cube (l0 = summarise([7]), l1 = anti_join(), l2 = filter([6]))
[     5.067][cube-solver-5][DEBUG] Solving cube (l0 = summarise([9]), l1 = left_join(), l2 = filter([6]))
[     5.079][cube-solver-5][DEBUG] Solving cube (l0 = summarise([10]), l1 = union(), l2 = filter([6]))
[     5.091][cube-solver-5][DEBUG] Solving cube (l0 = summarise([11]), l1 = intersect(), l2 = filter([6]))
[     5.103][cube-solver-5][DEBUG] Solving cube (l0 = summarise([12]), l1 = semi_join(), l2 = filter([7]))
[     5.116][cube-solver-5][DEBUG] Solving cube (l0 = summarise([12]), l1 = cross_join(), l2 = filter([7]))
[     5.129][cube-solver-5][DEBUG] Solving cube (l0 = summarise([12]), l1 = mutate(), l2 = filter([8]))
[     5.142][cube-solver-5][DEBUG] Solving cube (l0 = summarise([12]), l1 = inner_join(), l2 = filter([8]))
[     5.155][cube-solver-5][DEBUG] Solving cube (l0 = filter([8]), l1 = natural_join(), l2 = summarise([12]))
[     5.169][cube-solver-5][DEBUG] Solving cube (l0 = filter([8]), l1 = natural_join(), l2 = mutate())
[     5.178][cube-solver-5][DEBUG] Solving cube (l0 = filter([8]), l1 = natural_join3(), l2 = summarise([12]))
[     7.046][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([23]))
[     7.048][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([21]), l2 = filter([23]))
[     7.048][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([23]), l2 = mutate())
[     7.049][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([23]), l2 = summarise([21]))
[     7.445][cube-solver-3][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter([23]), l2 = mutate())
[     7.446][MainProcess][INFO] Statistics:
[     7.446][MainProcess][INFO] 	Generated cubes: 44
[     7.446][MainProcess][INFO] 	Attempted programs: 2
[     7.447][MainProcess][INFO] 		Rejected: 1
[     7.447][MainProcess][INFO] 		Failed: 0
[     7.447][MainProcess][INFO] 	Blacklist clauses: 44
[     7.447][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     7.447][MainProcess][DEBUG] 	0: Counter({'summarise': 207, 'natural_join3': 123})
[     7.447][MainProcess][DEBUG] 	1: Counter({'natural_join3': 207, 'filter': 83, 'mutate': 40})
[     7.447][MainProcess][DEBUG] 	2: Counter({'filter': 247, 'mutate': 47, 'summarise': 36})
[     7.448][MainProcess][INFO] Solution found: mutate(filter(natural_join3(@param1, @param0, @param2), color == 'red' & S_key == 'S5'), n = n())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/30.out", col_types = cols(P_id = col_character(),n = col_integer()))

df4 <- inner_join(input2, input1) %>% inner_join(input3)
df5 <- df4 %>% filter(color == 'red' & S_key == 'S5')
df6 <- df5 %>% mutate(n = n())
out <- df6 %>% select(P_id, n) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `P_id`,
       COUNT(*) OVER () AS `n`
FROM
  (SELECT `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`,
          `LHS`.`S_key` AS `S_key`,
          `RHS`.`S_name` AS `S_name`
   FROM
     (SELECT `LHS`.`P_id` AS `P_id`,
             `LHS`.`color` AS `color`,
             `RHS`.`S_key` AS `S_key`
      FROM `input2` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
   INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`color` = 'red'
       AND `S_key` = 'S5')
ORDER BY P_id
