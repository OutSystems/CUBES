[     1.593][MainProcess][INFO] Parsing specification...
[     1.596][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.596][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.596][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.597][MainProcess][DEBUG] Reading input files...
[     1.604][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2-1.txt: ['string', 'string']
[     1.609][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2-2.txt: ['string', 'string']
[     1.613][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2-3.txt: ['string', 'string']
[     1.619][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2-4.txt: ['string', 'string', 'int64']
[     1.623][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2.out: ['int64']
[     1.654][MainProcess][DEBUG] Generating DSL...
[     1.927][MainProcess][INFO] Creating 8 processes
[     1.954][MainProcess][DEBUG] Increasing generator loc to 3
[     2.274][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.277][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.278][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.278][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.282][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.297][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.300][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.305][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[    16.396][cube-solver-1][WARNING] There is no solution for current loc (2).
[    16.397][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[    16.423][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    16.629][cube-solver-0][WARNING] There is no solution for current loc (2).
[    16.630][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[    16.655][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    17.049][cube-solver-2][WARNING] There is no solution for current loc (2).
[    17.050][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    17.098][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    17.102][cube-solver-3][WARNING] There is no solution for current loc (2).
[    17.103][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    17.150][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[    21.896][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[    21.975][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[    22.126][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[    22.210][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4([4]), l1 = filter(), l2 = summarise())
[    22.822][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[    22.887][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[    22.945][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4([13]), l1 = filter(), l2 = mutate())
[    23.018][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4([13]), l1 = mutate(), l2 = filter())
[    23.134][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join4([13]), l1 = filter(), l2 = mutate())
[    23.135][MainProcess][INFO] Statistics:
[    23.136][MainProcess][INFO] 	Generated cubes: 16
[    23.136][MainProcess][INFO] 	Attempted programs: 1
[    23.136][MainProcess][INFO] 		Rejected: 0
[    23.136][MainProcess][INFO] 		Failed: 0
[    23.136][MainProcess][INFO] 	Blacklist clauses: 13
[    23.137][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    23.137][MainProcess][DEBUG] 	0: Counter({'natural_join4': 60})
[    23.138][MainProcess][DEBUG] 	1: Counter({'filter': 52, 'mutate': 8})
[    23.138][MainProcess][DEBUG] 	2: Counter({'summarise': 38, 'mutate': 14, 'filter': 8})
[    23.138][MainProcess][INFO] Solution found: mutate(filter(natural_join4(@param0, @param2, @param1, @param3), F_name == 'faculty1' | major == 'History'), maxage = max(age))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/2-1.txt", col_types = cols(C_name = col_character(),F_key = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/2-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/2-3.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input3 <- copy_to(con, input3)
input4 <- read_csv("tests-examples/55-tests/tables/2-4.txt", col_types = cols(S_key = col_character(),major = col_character(),age = col_integer()))
input4 <- copy_to(con, input4)
expected_output <- read_csv("tests-examples/55-tests/tables/2.out", col_types = cols(maxage = col_integer()))

df5 <- inner_join(input1, input3) %>% inner_join(input2) %>% inner_join(input4)
df6 <- df5 %>% filter(F_name == 'faculty1' | major == 'History')
df7 <- df6 %>% mutate(maxage = max(age))
out <- df7 %>% select(maxage) %>% distinct() %>% arrange(maxage)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT MAX(`age`) OVER () AS `maxage`
FROM
  (SELECT `LHS`.`C_name` AS `C_name`,
          `LHS`.`F_key` AS `F_key`,
          `LHS`.`F_name` AS `F_name`,
          `LHS`.`S_key` AS `S_key`,
          `RHS`.`major` AS `major`,
          `RHS`.`age` AS `age`
   FROM
     (SELECT `LHS`.`C_name` AS `C_name`,
             `LHS`.`F_key` AS `F_key`,
             `LHS`.`F_name` AS `F_name`,
             `RHS`.`S_key` AS `S_key`
      FROM
        (SELECT `LHS`.`C_name` AS `C_name`,
                `LHS`.`F_key` AS `F_key`,
                `RHS`.`F_name` AS `F_name`
         FROM `input1` AS `LHS`
         INNER JOIN `input3` AS `RHS` ON (`LHS`.`F_key` = `RHS`.`F_key`)) AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`C_name` = `RHS`.`C_name`)) AS `LHS`
   INNER JOIN `input4` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`F_name` = 'faculty1'
       OR `major` = 'History')
ORDER BY maxage
