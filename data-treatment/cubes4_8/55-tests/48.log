[     1.647][MainProcess][INFO] Parsing specification...
[     1.651][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.651][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.651][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.652][MainProcess][DEBUG] Reading input files...
[     1.660][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-1.txt: ['string', 'string', 'int64']
[     1.666][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-3.txt: ['string', 'string']
[     1.671][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/48.out: ['string', 'string', 'int64']
[     1.699][MainProcess][DEBUG] Generating DSL...
[     1.726][MainProcess][INFO] Creating 8 processes
[     1.754][MainProcess][DEBUG] Increasing generator loc to 3
[     1.778][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.781][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.782][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.786][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.787][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.793][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.793][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.798][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.314][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.315][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.317][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.318][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.319][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.321][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.325][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.326][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.327][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.343][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.344][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.348][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.663][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.667][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.713][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.718][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.789][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.792][MainProcess][INFO] Statistics:
[     2.792][MainProcess][INFO] 	Generated cubes: 12
[     2.792][MainProcess][INFO] 	Attempted programs: 6
[     2.793][MainProcess][INFO] 		Rejected: 0
[     2.793][MainProcess][INFO] 		Failed: 5
[     2.793][MainProcess][INFO] 	Blacklist clauses: 0
[     2.793][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.794][MainProcess][DEBUG] 	0: Counter({'natural_join': 18})
[     2.794][MainProcess][DEBUG] 	1: Counter({'filter': 11, 'mutate': 6, 'summarise': 1})
[     2.794][MainProcess][DEBUG] 	2: Counter({'mutate': 11, 'filter': 7})
[     2.794][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param0, @param1), n = n(), P_id, S_name), S_name != 'SN1')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/17-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/17-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/48.out", col_types = cols(P_id = col_character(),S_name = col_character(),n = col_integer()))

df3 <- inner_join(input1, input2)
df4 <- df3 %>% group_by(P_id, S_name) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(S_name != 'SN1')
out <- df5 %>% select(P_id, S_name, n) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `P_id`,
       `S_name`,
       `n`
FROM
  (SELECT `P_id`,
          `S_name`,
          COUNT() AS `n`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`P_id` AS `P_id`,
             `LHS`.`cost` AS `cost`,
             `RHS`.`S_name` AS `S_name`
      FROM `input1` AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
   GROUP BY `P_id`,
            `S_name`)
WHERE (`S_name` != 'SN1')
ORDER BY P_id
