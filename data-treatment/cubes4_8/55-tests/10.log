[     1.575][MainProcess][INFO] Parsing specification...
[     1.578][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.579][MainProcess][DEBUG] Reading input files...
[     1.586][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10-1.txt: ['string', 'string']
[     1.591][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10-2.txt: ['string', 'string']
[     1.595][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10.out: ['string']
[     1.623][MainProcess][DEBUG] Generating DSL...
[     1.642][MainProcess][INFO] Creating 8 processes
[     1.671][MainProcess][DEBUG] Increasing generator loc to 3
[     1.685][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.690][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.692][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.696][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.698][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.701][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.703][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.709][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.963][cube-solver-2][WARNING] There is no solution for current loc (2).
[     1.964][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.967][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     1.972][cube-solver-1][WARNING] There is no solution for current loc (2).
[     1.973][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     1.974][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     1.982][cube-solver-3][WARNING] There is no solution for current loc (2).
[     1.982][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     1.984][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.008][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.009][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.012][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.185][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.192][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.198][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.203][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.207][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.210][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.211][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.244][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.255][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.260][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.295][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.297][MainProcess][INFO] Statistics:
[     2.297][MainProcess][INFO] 	Generated cubes: 18
[     2.297][MainProcess][INFO] 	Attempted programs: 2
[     2.297][MainProcess][INFO] 		Rejected: 0
[     2.298][MainProcess][INFO] 		Failed: 1
[     2.298][MainProcess][INFO] 	Blacklist clauses: 0
[     2.298][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.298][MainProcess][DEBUG] 	0: Counter({'natural_join': 9, 'summarise': 5})
[     2.299][MainProcess][DEBUG] 	1: Counter({'summarise': 8, 'natural_join': 5, 'mutate': 1})
[     2.299][MainProcess][DEBUG] 	2: Counter({'filter': 14})
[     2.299][MainProcess][INFO] Solution found: filter(natural_join(summarise(@param0, n = n(), S_key), @param1), n == max(n))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/10-1.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/10-2.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/10.out", col_types = cols(S_name = col_character()))

df3 <- input1 %>% group_by(S_key) %>% summarise(n = n()) %>% ungroup()
df4 <- inner_join(df3, input2)
df5 <- df4 %>% filter(n == max(n))
out <- df5 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT S_key,
          n,
          S_name
   FROM
     (SELECT S_key,
             n,
             S_name,
             MAX(n) OVER () AS zzz3
      FROM
        (SELECT LHS.S_key AS S_key,
                LHS.n AS n,
                RHS.S_name AS S_name
         FROM
           (SELECT S_key,
                   COUNT() AS n
            FROM input1
            GROUP BY S_key) AS LHS
         INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key)))
   WHERE (n = zzz3))
ORDER BY S_name
