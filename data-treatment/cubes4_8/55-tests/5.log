[     1.594][MainProcess][INFO] Parsing specification...
[     1.597][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.598][MainProcess][DEBUG] Reading input files...
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/5-1.txt: ['string', 'string', 'string']
[     1.610][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/5-2.txt: ['string', 'string']
[     1.614][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/5.out: ['string']
[     1.641][MainProcess][DEBUG] Generating DSL...
[     1.664][MainProcess][INFO] Creating 8 processes
[     1.691][MainProcess][DEBUG] Increasing generator loc to 3
[     1.713][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.716][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.718][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.721][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.721][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.732][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.732][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.106][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.107][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.107][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.107][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.108][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.109][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.113][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.114][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.115][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.128][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.129][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.133][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.440][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.444][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.452][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.458][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.460][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.462][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.464][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.507][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.541][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.551][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.693][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.695][MainProcess][INFO] Statistics:
[     2.695][MainProcess][INFO] 	Generated cubes: 18
[     2.695][MainProcess][INFO] 	Attempted programs: 5
[     2.696][MainProcess][INFO] 		Rejected: 4
[     2.696][MainProcess][INFO] 		Failed: 0
[     2.696][MainProcess][INFO] 	Blacklist clauses: 0
[     2.696][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.697][MainProcess][DEBUG] 	0: Counter({'natural_join': 39, 'summarise': 26})
[     2.697][MainProcess][DEBUG] 	1: Counter({'mutate': 20, 'summarise': 19, 'natural_join': 16, 'natural_join3': 10})
[     2.697][MainProcess][DEBUG] 	2: Counter({'filter': 65})
[     2.697][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param1, @param0), n = n(), F_key, F_name), n == max(n))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/5-1.txt", col_types = cols(C_name = col_character(),F_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/5-2.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/5.out", col_types = cols(F_name = col_character()))

df3 <- inner_join(input2, input1)
df4 <- df3 %>% group_by(F_key, F_name) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(n == max(n))
out <- df5 %>% select(F_name) %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT F_name
FROM
  (SELECT F_key,
          F_name,
          n
   FROM
     (SELECT F_key,
             F_name,
             n,
             MAX(n) OVER () AS zzz3
      FROM
        (SELECT F_key,
                F_name,
                COUNT() AS n
         FROM
           (SELECT LHS.F_key AS F_key,
                   LHS.F_name AS F_name,
                   RHS.C_name AS C_name,
                   RHS.Room AS Room
            FROM input2 AS LHS
            INNER JOIN input1 AS RHS ON (LHS.F_key = RHS.F_key))
         GROUP BY F_key,
                  F_name))
   WHERE (n = zzz3))
ORDER BY F_name
