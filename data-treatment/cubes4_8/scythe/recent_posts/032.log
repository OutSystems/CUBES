[     3.220][MainProcess][INFO] Parsing specification...
[     3.225][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.225][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.226][MainProcess][DEBUG] Reading input files...
[     3.236][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/032.csv: ['int64', 'int64', 'int64', 'string']
[     3.241][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/032_o.csv: ['int64', 'int64', 'string']
[     3.270][MainProcess][DEBUG] Generating DSL...
[     3.449][MainProcess][INFO] Creating 8 processes
[     3.478][MainProcess][DEBUG] Increasing generator loc to 2
[     3.627][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.653][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.655][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.656][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.662][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.663][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.665][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.674][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     6.496][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     6.503][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     7.434][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.633][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     9.481][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     9.503][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([4]))
[     9.505][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([4]))
[     9.509][cube-solver-3][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join4())
[     9.528][cube-solver-3][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]))
[     9.534][cube-solver-2][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter())
[     9.537][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = anti_join())
[     9.546][cube-solver-3][DEBUG] Solving cube (l0 = summarise([4]), l1 = left_join())
[     9.580][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     9.595][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     9.605][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([4]))
[     9.621][cube-solver-5][DEBUG] Solving cube (l0 = summarise([4]), l1 = union())
[     9.640][cube-solver-7][DEBUG] Solving cube (l0 = summarise([4]), l1 = intersect())
[     9.701][cube-solver-6][DEBUG] Solving cube (l0 = summarise([4]), l1 = semi_join())
[    11.424][cube-solver-2][DEBUG] Solving cube (l0 = summarise([4]), l1 = cross_join())
[    13.531][cube-solver-0][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join())
[    13.556][cube-solver-1][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join3())
[    13.596][cube-solver-1][DEBUG] Solving cube (l0 = summarise([4]), l1 = mutate())
[    13.953][cube-solver-7][DEBUG] Solving cube (l0 = summarise([4]), l1 = inner_join())
[    15.579][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise([4]), l1 = semi_join())
[    15.580][MainProcess][INFO] Statistics:
[    15.581][MainProcess][INFO] 	Generated cubes: 21
[    15.581][MainProcess][INFO] 	Attempted programs: 302
[    15.581][MainProcess][INFO] 		Rejected: 126
[    15.581][MainProcess][INFO] 		Failed: 175
[    15.581][MainProcess][INFO] 	Blacklist clauses: 4
[    15.582][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    15.582][MainProcess][DEBUG] 	0: Counter({'mutate': 168, 'summarise': 108})
[    15.583][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    15.586][MainProcess][DEBUG] 	0: Counter({'summarise': 4668})
[    15.590][MainProcess][DEBUG] 	1: Counter({'left_join': 869, 'union': 835, 'semi_join': 763, 'anti_join': 685, 'cross_join': 605, 'natural_join': 293, 'mutate': 235, 'inner_join': 203, 'filter': 180})
[    15.590][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, Id = max(Id), crit1, crit2))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/032.csv", col_types = cols(Id = col_integer(),crit1 = col_integer(),crit2 = col_integer(),value = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/032_o.csv", col_types = cols(crit1 = col_integer(),crit2 = col_integer(),value = col_character()))

df2 <- input1 %>% group_by(crit1, crit2) %>% summarise(Id = max(Id)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(crit1, crit2, value) %>% arrange(crit1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT crit1,
       crit2,
       value
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT crit1,
                  crit2,
                  MAX(Id) AS Id
           FROM input1
           GROUP BY crit1,
                    crit2) AS RHS
        WHERE (LHS.Id = RHS.Id
               AND LHS.crit1 = RHS.crit1
               AND LHS.crit2 = RHS.crit2) ))
ORDER BY crit1
