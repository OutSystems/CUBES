[     3.369][MainProcess][INFO] Parsing specification...
[     3.374][MainProcess][DEBUG] Reading input files...
[     3.383][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_1.csv: ['int64', 'string']
[     3.388][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_2.csv: ['string', 'string']
[     3.392][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_o.csv: ['int64', 'string']
[     3.424][MainProcess][DEBUG] Generating DSL...
[     3.441][MainProcess][INFO] Creating 8 processes
[     3.486][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.490][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.490][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.497][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.498][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.501][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.505][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.509][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.559][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.562][cube-solver-2][DEBUG] Solving cube (l0 = cross_join(),)
[     3.563][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     3.569][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     3.578][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.579][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.580][cube-solver-2][DEBUG] Solving cube (l0 = inner_join(),)
[     3.581][MainProcess][DEBUG] Increasing generator loc to 2
[     3.581][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.594][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.599][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     3.603][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.606][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.611][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     3.627][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.751][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join([17]))
[     3.760][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join([2]))
[     3.764][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join([2]))
[     3.767][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join([7]))
[     3.769][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union())
[     3.771][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]))
[     3.772][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3())
[     3.773][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join4())
[     3.774][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([20]))
[     3.775][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join([2]))
[     3.777][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     3.779][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect([4]))
[     3.782][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join([2]))
[     3.784][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     3.784][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([8]))
[     3.784][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.786][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     3.787][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     3.788][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([22]))
[     3.789][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join([2]))
[     3.789][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join([2]))
[     3.791][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     3.792][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect([4]))
[     3.792][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect([4]))
[     3.792][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join([2]))
[     3.795][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     3.795][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([8]))
[     3.796][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join([2]))
[     3.797][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     3.798][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     3.798][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([22]), l1 = natural_join([2]))
[     3.799][cube-solver-7][DEBUG] Solving cube (l0 = anti_join([22]), l1 = natural_join3())
[     3.799][cube-solver-1][DEBUG] Solving cube (l0 = anti_join([22]), l1 = natural_join4())
[     3.801][cube-solver-2][DEBUG] Found solution with cube (l0 = inner_join(),)
[     3.802][MainProcess][INFO] Statistics:
[     3.802][MainProcess][INFO] 	Generated cubes: 43
[     3.802][MainProcess][INFO] 	Attempted programs: 40
[     3.802][MainProcess][INFO] 		Rejected: 1
[     3.802][MainProcess][INFO] 		Failed: 38
[     3.802][MainProcess][INFO] 	Blacklist clauses: 43
[     3.802][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.803][MainProcess][DEBUG] 	0: Counter({'union': 21, 'inner_join': 15})
[     3.803][MainProcess][INFO] Solution found: inner_join(@param0, @param1, 'item' = 'f2')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/003_1.csv", col_types = cols(ID = col_integer(),item = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/003_2.csv", col_types = cols(f1 = col_character(),f2 = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/003_o.csv", col_types = cols(ID = col_integer(),item = col_character()))

df3 <- inner_join(input1, input2, by=c('item' = 'f2'), suffix = c('', '.other'))
out <- df3 %>% select(ID, item = f1) %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ID,
       f1 AS item
FROM
  (SELECT LHS.ID AS ID,
          LHS.item AS item,
          RHS.f1 AS f1
   FROM input1 AS LHS
   INNER JOIN input2 AS RHS ON (LHS.item = RHS.f2))
ORDER BY ID
