[     3.600][MainProcess][INFO] Parsing specification...
[     3.605][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.605][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.606][MainProcess][DEBUG] Reading input files...
[     3.618][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/047.csv: ['string', 'string', 'datetime64[ns]']
[     3.624][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/047_o.csv: ['string', 'string']
[     3.673][MainProcess][DEBUG] Generating DSL...
[     3.845][MainProcess][INFO] Creating 8 processes
[     3.874][MainProcess][DEBUG] Increasing generator loc to 2
[     4.015][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     4.035][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     4.044][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     4.047][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     4.050][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     4.055][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     4.057][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     4.064][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     6.719][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     6.769][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     6.969][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     7.153][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     9.422][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     9.451][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     9.473][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     9.478][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     9.495][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     9.502][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     9.504][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     9.510][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     9.522][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     9.530][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     9.546][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     9.559][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     9.564][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     9.587][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[    10.771][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[    10.986][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    11.007][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[    11.256][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[    11.269][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    11.283][cube-solver-5][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[    11.297][cube-solver-5][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[    11.311][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[    11.723][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[    11.903][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[    12.052][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[    12.153][cube-solver-4][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[    12.234][cube-solver-3][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[    12.311][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[    12.335][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[    12.513][cube-solver-4][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[    12.517][cube-solver-3][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[    12.571][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[    12.771][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[    12.965][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[    13.023][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[    13.045][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[    13.065][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    13.106][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    13.127][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[    13.541][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[    14.014][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[    14.087][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[    14.288][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[    15.082][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[    15.083][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[    15.084][cube-solver-5][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise())
[    15.171][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join([186]))
[    15.310][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[    20.136][MainProcess][DEBUG] Increasing generator loc to 3
[    20.141][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    21.769][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[    23.925][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = inner_join())
[    23.950][MainProcess][INFO] Statistics:
[    23.950][MainProcess][INFO] 	Generated cubes: 52
[    23.951][MainProcess][INFO] 	Attempted programs: 594
[    23.951][MainProcess][INFO] 		Rejected: 366
[    23.951][MainProcess][INFO] 		Failed: 227
[    23.951][MainProcess][INFO] 	Blacklist clauses: 821
[    23.951][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    23.951][MainProcess][DEBUG] 	0: Counter({'summarise': 48, 'mutate': 24})
[    23.951][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    23.955][MainProcess][DEBUG] 	0: Counter({'summarise': 5044, 'mutate': 3315, 'inner_join': 1460, 'cross_join': 467, 'left_join': 72, 'union': 72, 'semi_join': 72, 'intersect': 8})
[    23.958][MainProcess][DEBUG] 	1: Counter({'inner_join': 3062, 'cross_join': 2921, 'mutate': 1271, 'summarise': 980, 'anti_join': 636, 'union': 408, 'left_join': 408, 'natural_join': 336, 'filter': 260, 'semi_join': 228})
[    23.958][MainProcess][INFO] Solution found: inner_join(@param0, summarise(@param0, maxTime = max(Time), ID), 'Time' = 'maxTime','maxTime' = 'maxTime')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/047.csv", col_types = cols(ID = col_character(),Payment_type = col_character(),Time = col_character()))
input1$Time <- ymd(input1$Time)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/047_o.csv", col_types = cols(ID = col_character(),Payment_type = col_character()))

df2 <- input1 %>% group_by(ID) %>% summarise(maxTime = max(Time)) %>% ungroup()
df3 <- inner_join(input1, df2, by=c('Time' = 'maxTime','maxTime' = 'maxTime'), suffix = c('', '.other'))
out <- df3 %>% select(ID, Payment_type) %>% distinct() %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT ID,
                Payment_type
FROM
  (SELECT LHS.ID AS ID,
          LHS.Payment_type AS Payment_type,
          LHS.Time AS TIME,
          RHS.ID AS ID.other
   FROM input1 AS LHS
   INNER JOIN
     (SELECT ID,
             MAX(TIME) AS maxTime
      FROM input1
      GROUP BY ID) AS RHS ON (LHS.Time = RHS.maxTime))
ORDER BY ID
