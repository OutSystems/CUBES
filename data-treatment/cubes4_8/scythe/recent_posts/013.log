[     3.573][MainProcess][INFO] Parsing specification...
[     3.580][MainProcess][DEBUG] Reading input files...
[     3.590][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_1.csv: ['int64', 'string']
[     3.596][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_2.csv: ['int64', 'string']
[     3.603][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_o.csv: ['int64', 'string', 'string', 'int64']
[     3.645][MainProcess][DEBUG] Generating DSL...
[     3.698][MainProcess][INFO] Creating 8 processes
[     3.779][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.782][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.786][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.788][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.795][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.798][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.802][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.806][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     4.490][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     4.491][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     4.492][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     4.494][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     4.497][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     4.500][cube-solver-2][DEBUG] Solving cube (l0 = cross_join(),)
[     4.503][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     4.519][cube-solver-0][DEBUG] Solving cube (l0 = inner_join(),)
[     4.519][MainProcess][DEBUG] Increasing generator loc to 2
[     4.520][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     4.521][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     4.524][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     4.528][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     4.530][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     4.548][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     4.623][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     4.769][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.774][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     5.883][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]))
[     5.894][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join())
[     5.905][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect([4]))
[     5.910][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     6.008][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3())
[     6.011][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     6.012][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     6.017][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([10]))
[     6.018][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     6.025][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     6.029][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     6.033][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect([4]))
[     6.039][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     6.056][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([16]))
[     6.071][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([23]))
[     6.079][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     6.084][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     6.085][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     6.089][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([10]))
[     6.090][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     6.094][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     6.098][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     6.099][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect([4]))
[     6.107][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([23]))
[     6.114][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join([23]))
[     6.114][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([17]))
[     6.123][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     6.128][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     6.133][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     6.136][cube-solver-4][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join())
[     6.138][cube-solver-5][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join3())
[     6.148][cube-solver-5][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join4())
[     6.151][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = anti_join([10]))
[     6.152][cube-solver-1][DEBUG] Solving cube (l0 = anti_join([10]), l1 = left_join())
[     6.162][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = union())
[     6.166][cube-solver-5][DEBUG] Solving cube (l0 = anti_join([10]), l1 = intersect([4]))
[     6.189][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([17]))
[     6.349][cube-solver-4][DEBUG] Solving cube (l0 = anti_join([10]), l1 = semi_join())
[     6.391][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = cross_join([17]))
[     6.404][cube-solver-1][DEBUG] Solving cube (l0 = anti_join([10]), l1 = inner_join([23]))
[     6.502][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join())
[     6.605][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join3())
[     6.643][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join4())
[     6.650][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = anti_join([10]))
[     6.939][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = left_join())
[     7.108][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = union())
[     7.270][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = intersect([4]))
[     7.473][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = semi_join())
[     7.608][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = cross_join([39]))
[     7.657][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = inner_join([23]))
[     8.150][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = natural_join())
[     8.287][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = natural_join3())
[     8.565][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = natural_join4())
[     8.575][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = anti_join([10]))
[     9.428][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = left_join())
[     9.577][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = union())
[     9.706][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = intersect([4]))
[     9.771][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = semi_join())
[     9.973][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = cross_join([76]))
[    10.497][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = inner_join([23]))
[    49.188][cube-solver-6][DEBUG] Solving cube (l0 = intersect([4]), l1 = natural_join())
[    49.508][cube-solver-6][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join3())
[    50.101][cube-solver-6][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join4())
[    50.116][cube-solver-6][DEBUG] Solving cube (l0 = intersect([6]), l1 = anti_join([10]))
[    50.784][cube-solver-5][DEBUG] Solving cube (l0 = intersect([6]), l1 = left_join())
[    51.074][cube-solver-5][DEBUG] Solving cube (l0 = intersect([6]), l1 = union())
[    51.350][cube-solver-5][DEBUG] Solving cube (l0 = intersect([6]), l1 = intersect([6]))
[    51.950][cube-solver-6][DEBUG] Solving cube (l0 = intersect([6]), l1 = semi_join())
[    52.370][cube-solver-6][DEBUG] Solving cube (l0 = intersect([6]), l1 = cross_join([135]))
[    52.571][cube-solver-5][DEBUG] Solving cube (l0 = intersect([6]), l1 = inner_join([23]))
[    53.422][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join())
[    53.610][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join3())
[    53.929][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join4())
[    53.934][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = anti_join([10]))
[    54.897][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = left_join())
[    55.077][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = union())
[    55.233][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = intersect([6]))
[    56.001][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = semi_join())
[    56.620][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = cross_join([587]))
[    56.964][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = inner_join([23]))
[    60.016][cube-solver-5][DEBUG] Solving cube (l0 = cross_join([625]), l1 = natural_join())
[   151.241][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[   154.114][cube-solver-2][DEBUG] Solving cube (l0 = cross_join([2204]), l1 = natural_join3())
[   195.914][cube-solver-7][DEBUG] Found solution with cube (l0 = left_join(), l1 = cross_join([39]))
[   195.916][MainProcess][INFO] Statistics:
[   195.917][MainProcess][INFO] 	Generated cubes: 92
[   195.917][MainProcess][INFO] 	Attempted programs: 5140
[   195.917][MainProcess][INFO] 		Rejected: 1588
[   195.917][MainProcess][INFO] 		Failed: 3551
[   195.917][MainProcess][INFO] 	Blacklist clauses: 2243
[   195.917][MainProcess][DEBUG] Printing statistics for good programs of size 1
[   195.942][MainProcess][DEBUG] 	0: Counter({'cross_join': 17280})
[   195.942][MainProcess][DEBUG] Printing statistics for good programs of size 2
[   196.003][MainProcess][DEBUG] 	0: Counter({'natural_join': 31710, 'left_join': 31573, 'union': 31496, 'anti_join': 24358, 'cross_join': 23087, 'semi_join': 15600})
[   196.048][MainProcess][DEBUG] 	1: Counter({'cross_join': 117747, 'natural_join': 17831, 'inner_join': 16992, 'natural_join3': 5258})
[   196.048][MainProcess][INFO] Solution found: cross_join(left_join(@param1, @param0), left_join(@param1, @param0), Name.other != Company_group.other & Company_group.other == Name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/013_1.csv", col_types = cols(ID = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/013_2.csv", col_types = cols(ID = col_integer(),Company_group = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/013_o.csv", col_types = cols(ID = col_integer(),Name = col_character(),RootName = col_character(),RootId = col_integer()))

df3 <- left_join(input2, input1)
df4 <- full_join(df3 %>% mutate(tmp.col=1), df3 %>% mutate(tmp.col=1), by="tmp.col", suffix = c("", ".other")) %>% select(-tmp.col) %>% filter(Name.other != Company_group.other & Company_group.other == Name)
out <- df4 %>% select(ID = ID.other, Name = Name.other, RootName = Name, RootId = ID) %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ID.other AS ID,
       Name.other AS Name,
       Name AS RootName,
       ID AS RootId
FROM
  (SELECT ID,
          Company_group,
          Name,
          ID.other,
          Company_group.other,
          Name.other
   FROM
     (SELECT LHS.ID AS ID,
             LHS.Company_group AS Company_group,
             LHS.Name AS Name,
             COALESCE(LHS.tmp.col, RHS.tmp.col) AS tmp.col,
             RHS.ID AS ID.other,
             RHS.Company_group AS Company_group.other,
             RHS.Name AS Name.other
      FROM
        (SELECT ID,
                Company_group,
                Name,
                1.0 AS tmp.col
         FROM
           (SELECT LHS.ID AS ID,
                   LHS.Company_group AS Company_group,
                   RHS.Name AS Name
            FROM input2 AS LHS
            LEFT JOIN input1 AS RHS ON (LHS.ID = RHS.ID))) AS LHS
      FULL JOIN
        (SELECT ID,
                Company_group,
                Name,
                1.0 AS tmp.col
         FROM
           (SELECT LHS.ID AS ID,
                   LHS.Company_group AS Company_group,
                   RHS.Name AS Name
            FROM input2 AS LHS
            LEFT JOIN input1 AS RHS ON (LHS.ID = RHS.ID))) AS RHS ON (LHS.tmp.col = RHS.tmp.col)))
WHERE (Name.other != Company_group.other
       AND Company_group.other = Name)
ORDER BY ID
