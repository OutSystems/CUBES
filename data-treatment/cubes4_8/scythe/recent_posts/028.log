[     3.190][MainProcess][INFO] Parsing specification...
[     3.194][MainProcess][DEBUG] Reading input files...
[     3.201][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/028.csv: ['int64', 'string']
[     3.205][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/028_o.csv: ['int64', 'int64']
[     3.233][MainProcess][DEBUG] Generating DSL...
[     3.428][MainProcess][INFO] Creating 8 processes
[     3.460][MainProcess][DEBUG] Increasing generator loc to 3
[     3.627][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.651][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.652][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.659][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.665][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.669][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.672][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.679][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[    10.170][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    10.187][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[    10.302][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    10.357][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[    10.801][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    11.206][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    15.108][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[    15.130][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[    15.135][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[    15.148][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[    15.171][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[    15.180][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[    15.194][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[    15.194][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[    15.203][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[    15.217][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[    15.224][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[    15.225][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[    15.252][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[    15.254][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[    15.293][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[    15.373][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[    15.431][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = natural_join4())
[    15.473][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = summarise())
[    22.053][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter([27]))
[    22.113][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter([27]), l2 = filter([27]))
[    23.456][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([30]), l2 = summarise())
[    23.521][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter([30]), l2 = anti_join())
[    24.200][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[    32.381][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    36.338][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = filter([102]), l2 = left_join())
[    44.070][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([144]), l2 = union())
[    66.573][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([155]), l2 = intersect())
[   104.635][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([155]), l2 = semi_join())
[   149.891][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter([155]), l2 = cross_join())
[   188.405][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = filter([155]), l2 = mutate())
[   189.888][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([155]), l2 = inner_join())
[   192.531][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = filter([155]))
[   212.943][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = left_join(), l2 = filter([155]))
[   225.237][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = union(), l2 = filter([155]))
[   277.954][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = intersect(), l2 = filter([155]))
[   331.040][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join(), l2 = filter([155]))
[   339.266][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join(), l2 = filter([155]))
[   356.143][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = mutate(), l2 = filter([155]))
[   364.446][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join(), l2 = filter([155]))
[   381.691][cube-solver-4][DEBUG] Solving cube (l0 = filter([155]), l1 = natural_join(), l2 = summarise())
[   383.759][cube-solver-4][DEBUG] Solving cube (l0 = filter([155]), l1 = natural_join(), l2 = mutate())
[   384.809][cube-solver-4][DEBUG] Solving cube (l0 = filter([155]), l1 = natural_join3(), l2 = summarise())
[   384.885][cube-solver-4][DEBUG] Solving cube (l0 = filter([155]), l1 = natural_join3(), l2 = mutate())
[   384.963][cube-solver-4][DEBUG] Solving cube (l0 = filter([155]), l1 = natural_join4(), l2 = summarise())
[   385.047][cube-solver-4][DEBUG] Solving cube (l0 = filter([155]), l1 = natural_join4(), l2 = mutate())
[   385.124][cube-solver-4][DEBUG] Solving cube (l0 = filter([155]), l1 = summarise(), l2 = natural_join())
[   392.320][cube-solver-3][DEBUG] Solving cube (l0 = filter([155]), l1 = summarise(), l2 = natural_join3())
[   393.973][cube-solver-4][DEBUG] Solving cube (l0 = filter([155]), l1 = summarise(), l2 = natural_join4())
[   394.054][cube-solver-4][DEBUG] Solving cube (l0 = filter([155]), l1 = summarise(), l2 = summarise())
[   394.133][cube-solver-4][DEBUG] Solving cube (l0 = filter([155]), l1 = summarise(), l2 = filter([155]))
[   409.995][cube-solver-3][DEBUG] Solving cube (l0 = filter([155]), l1 = summarise(), l2 = anti_join())
[   426.380][cube-solver-3][DEBUG] Solving cube (l0 = filter([155]), l1 = summarise(), l2 = left_join())
[   429.303][cube-solver-1][DEBUG] Solving cube (l0 = filter([155]), l1 = summarise(), l2 = union())
[   436.221][cube-solver-3][DEBUG] Solving cube (l0 = filter([155]), l1 = summarise(), l2 = intersect())
[   438.824][cube-solver-1][DEBUG] Solving cube (l0 = filter([155]), l1 = summarise(), l2 = semi_join())
[   442.274][cube-solver-3][DEBUG] Solving cube (l0 = filter([155]), l1 = summarise(), l2 = cross_join())
[   444.773][cube-solver-1][DEBUG] Solving cube (l0 = filter([155]), l1 = summarise(), l2 = mutate())
[   445.774][cube-solver-1][DEBUG] Solving cube (l0 = filter([155]), l1 = summarise(), l2 = inner_join())
[   451.153][cube-solver-5][DEBUG] Found solution with cube (l0 = summarise(), l1 = cross_join(), l2 = filter([155]))
[   451.160][MainProcess][INFO] Statistics:
[   451.161][MainProcess][INFO] 	Generated cubes: 60
[   451.161][MainProcess][INFO] 	Attempted programs: 49540
[   451.161][MainProcess][INFO] 		Rejected: 23274
[   451.161][MainProcess][INFO] 		Failed: 26265
[   451.161][MainProcess][INFO] 	Blacklist clauses: 155
[   451.162][MainProcess][DEBUG] Printing statistics for good programs of size 2
[   451.168][MainProcess][DEBUG] 	0: Counter({'summarise': 2580, 'mutate': 1920, 'filter': 160})
[   451.170][MainProcess][DEBUG] 	1: Counter({'filter': 4500, 'summarise': 100, 'mutate': 60})
[   451.170][MainProcess][DEBUG] Printing statistics for good programs of size 3
[   451.291][MainProcess][DEBUG] 	0: Counter({'summarise': 322795, 'filter': 15577})
[   451.366][MainProcess][DEBUG] 	1: Counter({'filter': 236506, 'anti_join': 15360, 'summarise': 15260, 'left_join': 14100, 'union': 14100, 'cross_join': 13519, 'natural_join': 11840, 'inner_join': 9894, 'semi_join': 5220, 'mutate': 2580})
[   451.442][MainProcess][DEBUG] 	2: Counter({'filter': 138505, 'cross_join': 40268, 'anti_join': 32800, 'inner_join': 32393, 'natural_join3': 26640, 'left_join': 17080, 'union': 17080, 'natural_join': 14400, 'semi_join': 12360, 'summarise': 4060, 'mutate': 2800})
[   451.442][MainProcess][INFO] Solution found: filter(cross_join(summarise(@param0, n = n(), Member), summarise(@param0, n = n(), Member), Member > Member.other & n.other != n), n <= 1 | n <= Member)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/028.csv", col_types = cols(Member = col_integer(),Element = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/028_o.csv", col_types = cols(c1 = col_integer(),c2 = col_integer()))

df2 <- input1 %>% group_by(Member) %>% summarise(n = n()) %>% ungroup()
df3 <- full_join(df2 %>% mutate(tmp.col=1), df2 %>% mutate(tmp.col=1), by="tmp.col", suffix = c("", ".other")) %>% select(-tmp.col) %>% filter(Member > Member.other & n.other != n)
df4 <- df3 %>% filter(n <= 1 | n <= Member)
out <- df4 %>% select(c1 = Member, c2 = Member.other) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Member AS c1,
       Member.other AS c2
FROM
  (SELECT *
   FROM
     (SELECT Member,
             n,
             Member.other,
             n.other
      FROM
        (SELECT LHS.Member AS Member,
                LHS.n AS n,
                COALESCE(LHS.tmp.col, RHS.tmp.col) AS tmp.col,
                RHS.Member AS Member.other,
                RHS.n AS n.other
         FROM
           (SELECT Member,
                   n,
                   1.0 AS tmp.col
            FROM
              (SELECT Member,
                      COUNT() AS n
               FROM input1
               GROUP BY Member)) AS LHS
         FULL JOIN
           (SELECT Member,
                   n,
                   1.0 AS tmp.col
            FROM
              (SELECT Member,
                      COUNT() AS n
               FROM input1
               GROUP BY Member)) AS RHS ON (LHS.tmp.col = RHS.tmp.col)))
   WHERE (Member > Member.other
          AND n.other != n))
WHERE (n <= 1.0
       OR n <= Member)
ORDER BY c1
