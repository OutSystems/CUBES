[     3.259][MainProcess][INFO] Parsing specification...
[     3.264][MainProcess][DEBUG] Reading input files...
[     3.272][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_1.csv: ['float64', 'int64']
[     3.276][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_2.csv: ['float64', 'int64']
[     3.281][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_o.csv: ['float64', 'int64', 'float64']
[     3.312][MainProcess][DEBUG] Generating DSL...
[     3.330][MainProcess][INFO] Creating 8 processes
[     3.372][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.379][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.384][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.387][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.388][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.397][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.398][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.406][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.430][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.437][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     3.441][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.443][cube-solver-1][DEBUG] Solving cube (l0 = cross_join(),)
[     3.443][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     3.447][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.450][cube-solver-2][DEBUG] Solving cube (l0 = inner_join(),)
[     3.450][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.454][MainProcess][DEBUG] Increasing generator loc to 2
[     3.455][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.458][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     3.469][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     3.491][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.571][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.575][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]))
[     3.580][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect())
[     3.600][cube-solver-4][DEBUG] Found solution with cube (l0 = left_join(),)
[     3.601][MainProcess][INFO] Statistics:
[     3.601][MainProcess][INFO] 	Generated cubes: 14
[     3.601][MainProcess][INFO] 	Attempted programs: 20
[     3.601][MainProcess][INFO] 		Rejected: 7
[     3.601][MainProcess][INFO] 		Failed: 12
[     3.601][MainProcess][INFO] 	Blacklist clauses: 16
[     3.601][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.602][MainProcess][DEBUG] 	0: Counter({'natural_join': 13, 'left_join': 13, 'union': 13, 'inner_join': 5})
[     3.602][MainProcess][INFO] Solution found: left_join(@param1, @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/038_1.csv", col_types = cols(Date = col_double(),Sold = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/038_2.csv", col_types = cols(Date = col_double(),Tapped = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/038_o.csv", col_types = cols(Date = col_double(),Tapped = col_integer(),Sold = col_double()))

df3 <- left_join(input2, input1)
out <- df3 %>% select(Date, Tapped, Sold) %>% arrange(Date)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Date, Tapped,
             Sold
FROM
  (SELECT LHS.Date AS Date,
          LHS.Tapped AS Tapped,
          RHS.Sold AS Sold
   FROM input2 AS LHS
   LEFT JOIN input1 AS RHS ON (LHS.Date = RHS.Date))
ORDER BY Date
