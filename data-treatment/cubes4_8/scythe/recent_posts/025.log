[     3.380][MainProcess][INFO] Parsing specification...
[     3.385][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.385][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.385][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.386][MainProcess][DEBUG] Reading input files...
[     3.396][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/025.csv: ['int64', 'float64', 'string']
[     3.401][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/025_o.csv: ['int64', 'float64', 'string']
[     3.431][MainProcess][DEBUG] Generating DSL...
[     4.212][MainProcess][INFO] Creating 8 processes
[     4.250][MainProcess][DEBUG] Increasing generator loc to 3
[     5.048][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     5.049][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     5.064][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     5.068][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     5.069][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     5.074][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     5.089][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     5.117][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[    35.696][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    36.102][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[    36.203][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    36.218][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise([1]))
[    59.693][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[    59.842][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([6]), l2 = filter())
[    59.927][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[    59.963][cube-solver-6][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([6]), l2 = filter())
[    60.077][cube-solver-6][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise([6]))
[    60.143][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[    60.182][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([6]), l2 = filter())
[    60.222][cube-solver-7][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[    60.264][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([6]))
[    60.278][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[    60.342][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[    60.370][cube-solver-4][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter())
[    60.374][cube-solver-6][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter())
[    60.457][cube-solver-7][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join4(), l2 = filter())
[    60.528][cube-solver-6][DEBUG] Solving cube (l0 = summarise([6]), l1 = summarise([6]), l2 = filter())
[    60.579][cube-solver-7][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = natural_join())
[    60.661][cube-solver-6][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = natural_join3())
[    62.927][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = summarise([6]))
[    63.129][cube-solver-5][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([1]), l2 = natural_join4())
[    63.272][cube-solver-5][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([1]), l2 = summarise([6]))
[    82.746][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[   103.116][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[   136.978][cube-solver-2][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([65]), l2 = filter([65]))
[   156.793][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([67]), l2 = anti_join())
[   181.788][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[   185.270][cube-solver-4][DEBUG] Found solution with cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter())
[   185.281][MainProcess][INFO] Statistics:
[   185.283][MainProcess][INFO] 	Generated cubes: 27
[   185.283][MainProcess][INFO] 	Attempted programs: 5023
[   185.283][MainProcess][INFO] 		Rejected: 2800
[   185.283][MainProcess][INFO] 		Failed: 2222
[   185.283][MainProcess][INFO] 	Blacklist clauses: 131
[   185.283][MainProcess][DEBUG] Printing statistics for good programs of size 2
[   185.305][MainProcess][DEBUG] 	0: Counter({'mutate': 19530, 'filter': 11232, 'summarise': 9696})
[   185.319][MainProcess][DEBUG] 	1: Counter({'filter': 29227, 'mutate': 6240, 'summarise': 4992})
[   185.319][MainProcess][DEBUG] Printing statistics for good programs of size 3
[   185.332][MainProcess][DEBUG] 	0: Counter({'summarise': 44122})
[   185.345][MainProcess][DEBUG] 	1: Counter({'filter': 28628, 'natural_join': 15495})
[   185.358][MainProcess][DEBUG] 	2: Counter({'filter': 18435, 'natural_join3': 13296, 'natural_join': 10758, 'anti_join': 1082, 'summarise': 552})
[   185.358][MainProcess][INFO] Solution found: filter(natural_join(summarise(@param0, minid = min(id), gallery_id), @param0), is.na(gallery_id) | minid >= id)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/025.csv", col_types = cols(id = col_integer(),gallery_id = col_double(),path = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/025_o.csv", col_types = cols(id = col_integer(),gallery_id = col_double(),path = col_character()))

df2 <- input1 %>% group_by(gallery_id) %>% summarise(minid = min(id)) %>% ungroup()
df3 <- inner_join(df2, input1)
df4 <- df3 %>% filter(is.na(gallery_id) | minid >= id)
out <- df4 %>% select(id, gallery_id, path) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       gallery_id,
       PATH
FROM
  (SELECT LHS.gallery_id AS gallery_id,
          LHS.minid AS minid,
          RHS.id AS id,
          RHS.path AS PATH
   FROM
     (SELECT gallery_id,
             MIN(id) AS minid
      FROM input1
      GROUP BY gallery_id) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.gallery_id = RHS.gallery_id))
WHERE (((gallery_id) IS NULL)
       OR minid >= id)
ORDER BY id
