[     3.540][MainProcess][INFO] Parsing specification...
[     3.546][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.546][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.547][MainProcess][DEBUG] Reading input files...
[     3.561][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/034.csv: ['string', 'datetime64[ns]', 'datetime64[ns]']
[     3.570][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/034_o.csv: ['string', 'datetime64[ns]', 'datetime64[ns]']
[     3.629][MainProcess][DEBUG] Generating DSL...
[     3.812][MainProcess][INFO] Creating 8 processes
[     3.851][MainProcess][DEBUG] Increasing generator loc to 2
[     4.008][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     4.012][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     4.015][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     4.016][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     4.025][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     4.032][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     4.052][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     4.059][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     6.748][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     6.750][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     7.082][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.162][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     9.562][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     9.579][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     9.581][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     9.590][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     9.605][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     9.608][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     9.609][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     9.624][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     9.624][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     9.626][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     9.638][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     9.643][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     9.668][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     9.696][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[    10.765][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[    11.062][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    11.107][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[    11.314][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[    11.327][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    11.341][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[    11.356][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[    11.371][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[    11.715][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[    12.057][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[    12.395][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[    12.612][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[    12.738][cube-solver-3][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[    13.025][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[    13.074][cube-solver-1][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[    13.075][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[    13.157][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[    13.366][cube-solver-4][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[    13.415][cube-solver-3][DEBUG] Solving cube (l0 = cross_join([2]), l1 = mutate())
[    13.567][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[    13.807][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[    13.835][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[    13.853][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    13.892][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    14.292][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[    14.293][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[    14.572][cube-solver-7][DEBUG] Found solution with cube (l0 = mutate(), l1 = filter())
[    14.573][MainProcess][INFO] Statistics:
[    14.573][MainProcess][INFO] 	Generated cubes: 42
[    14.574][MainProcess][INFO] 	Attempted programs: 288
[    14.574][MainProcess][INFO] 		Rejected: 169
[    14.574][MainProcess][INFO] 		Failed: 118
[    14.574][MainProcess][INFO] 	Blacklist clauses: 86
[    14.574][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    14.575][MainProcess][DEBUG] 	0: Counter({'mutate': 48, 'summarise': 36})
[    14.575][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    14.578][MainProcess][DEBUG] 	0: Counter({'summarise': 3006, 'mutate': 303, 'left_join': 84, 'union': 84, 'semi_join': 84})
[    14.581][MainProcess][DEBUG] 	1: Counter({'left_join': 649, 'union': 612, 'cross_join': 436, 'inner_join': 411, 'anti_join': 397, 'natural_join': 384, 'filter': 217, 'mutate': 168, 'semi_join': 144, 'summarise': 144})
[    14.581][MainProcess][INFO] Solution found: filter(mutate(@param0, maxDATE_UPDATE = max(DATE_UPDATE)), maxDATE_UPDATE == DATE_UPDATE)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/034.csv", col_types = cols(MATERIAL = col_character(),DISCO_DATE = col_character(),DATE_UPDATE = col_character()))
input1$DISCO_DATE <- ymd(input1$DISCO_DATE)
input1$DATE_UPDATE <- ymd(input1$DATE_UPDATE)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/034_o.csv", col_types = cols(c1 = col_character(),c2 = col_character(),c3 = col_character()))
expected_output$c2 <- ymd(expected_output$c2)
expected_output$c3 <- ymd(expected_output$c3)

df2 <- input1 %>% mutate(maxDATE_UPDATE = max(DATE_UPDATE))
df3 <- df2 %>% filter(maxDATE_UPDATE == DATE_UPDATE)
out <- df3 %>% select(c1 = MATERIAL, c2 = DISCO_DATE, c3 = DATE_UPDATE) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT MATERIAL AS c1,
       DISCO_DATE AS c2,
       DATE_UPDATE AS c3
FROM
  (SELECT MATERIAL,
          DISCO_DATE,
          DATE_UPDATE,
          MAX(DATE_UPDATE) OVER () AS maxDATE_UPDATE
   FROM input1)
WHERE (maxDATE_UPDATE = DATE_UPDATE)
ORDER BY c1
