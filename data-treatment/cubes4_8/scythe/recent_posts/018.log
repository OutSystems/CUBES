[     1.665][MainProcess][INFO] Parsing specification...
[     1.669][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.669][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.669][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.670][MainProcess][DEBUG] Reading input files...
[     1.680][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/018.csv: ['int64', 'int64', 'datetime64[ns]', 'string']
[     1.685][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/018_o.csv: ['string', 'int64']
[     1.718][MainProcess][DEBUG] Generating DSL...
[     1.759][MainProcess][INFO] Creating 8 processes
[     1.787][MainProcess][DEBUG] Increasing generator loc to 3
[     1.829][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.835][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.837][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.840][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.841][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.848][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.849][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.856][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.766][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.781][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.785][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.807][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.811][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.824][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     3.715][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     3.720][cube-solver-7][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.724][cube-solver-7][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     3.727][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.728][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     3.730][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     3.733][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     3.733][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.734][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     3.735][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     3.738][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     3.742][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     3.743][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     3.744][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.747][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     3.748][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     3.753][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     3.760][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     4.455][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([4]), l2 = summarise())
[     4.463][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = filter([4]))
[     4.771][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter([7]))
[     4.779][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter([7]), l2 = anti_join())
[    13.532][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[    13.533][MainProcess][INFO] Statistics:
[    13.534][MainProcess][INFO] 	Generated cubes: 26
[    13.534][MainProcess][INFO] 	Attempted programs: 255
[    13.534][MainProcess][INFO] 		Rejected: 109
[    13.534][MainProcess][INFO] 		Failed: 145
[    13.535][MainProcess][INFO] 	Blacklist clauses: 7
[    13.535][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    13.538][MainProcess][DEBUG] 	0: Counter({'mutate': 1679, 'summarise': 1311})
[    13.540][MainProcess][DEBUG] 	1: Counter({'filter': 2990})
[    13.541][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    13.544][MainProcess][DEBUG] 	0: Counter({'summarise': 5836})
[    13.546][MainProcess][DEBUG] 	1: Counter({'filter': 4283, 'natural_join': 1553})
[    13.548][MainProcess][DEBUG] 	2: Counter({'filter': 2599, 'natural_join': 1333, 'natural_join3': 1320, 'anti_join': 456, 'summarise': 128})
[    13.548][MainProcess][INFO] Solution found: filter(summarise(@param0, n = n(), Course, Date), n >= 2 | Date < mdy('10/17/2016'))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/018.csv", col_types = cols(OrderID = col_integer(),CustomerID = col_integer(),Date = col_character(),Course = col_character()))
input1$Date <- mdy(input1$Date)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/018_o.csv", col_types = cols(c1 = col_character(),c2 = col_integer()))

df2 <- input1 %>% group_by(Course, Date) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n >= 2 | Date < mdy('10/17/2016'))
out <- df3 %>% select(c1 = Course, c2 = n) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `Course` AS `c1`,
       `n` AS `c2`
FROM
  (SELECT `Course`,
          `Date`,
          COUNT() AS `n`
   FROM `input1`
   GROUP BY `Course`,
            `Date`)
WHERE (`n` >= 2.0
       OR `Date` < mdy('10/17/2016'))
ORDER BY c1
