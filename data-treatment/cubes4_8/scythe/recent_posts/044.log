[     1.569][MainProcess][INFO] Parsing specification...
[     1.573][MainProcess][DEBUG] Reading input files...
[     1.579][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/044_1.csv: ['int64', 'string']
[     1.584][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/044_2.csv: ['string', 'int64']
[     1.588][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/044_o.csv: ['int64', 'string']
[     1.615][MainProcess][DEBUG] Generating DSL...
[     1.627][MainProcess][INFO] Creating 8 processes
[     1.665][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.671][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     1.671][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.676][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     1.682][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     1.683][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     1.687][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     1.688][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     1.717][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     1.718][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     1.720][cube-solver-2][DEBUG] Solving cube (l0 = cross_join(),)
[     1.728][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     1.731][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     1.733][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(),)
[     1.736][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     1.736][MainProcess][DEBUG] Increasing generator loc to 2
[     1.737][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     1.741][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     1.747][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     1.856][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([4]))
[     1.858][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.860][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     1.948][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.958][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.960][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.974][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     1.978][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.985][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.071][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect([6]))
[     2.074][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     2.082][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([2]))
[     2.100][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join())
[     2.101][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join([11]))
[     2.172][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3())
[     2.173][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     2.174][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([10]))
[     2.180][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     2.181][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     2.182][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect([6]))
[     2.186][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     2.187][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     2.189][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([13]))
[     2.196][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     2.197][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     2.198][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     2.199][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([10]))
[     2.205][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     2.206][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     2.207][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect([6]))
[     2.211][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     2.212][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     2.215][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([15]))
[     2.222][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     2.224][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     2.225][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     2.226][cube-solver-5][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join())
[     2.440][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.555][cube-solver-1][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join3())
[     2.561][cube-solver-1][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join4())
[     2.567][cube-solver-1][DEBUG] Solving cube (l0 = anti_join([10]), l1 = anti_join([10]))
[     2.576][cube-solver-1][DEBUG] Solving cube (l0 = anti_join([10]), l1 = left_join())
[     2.700][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([10]), l1 = union())
[     2.830][cube-solver-6][DEBUG] Solving cube (l0 = anti_join([10]), l1 = intersect([6]))
[     2.830][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = semi_join())
[     2.860][cube-solver-2][DEBUG] Solving cube (l0 = anti_join([10]), l1 = cross_join([2]))
[     2.918][cube-solver-7][DEBUG] Solving cube (l0 = anti_join([10]), l1 = inner_join([23]))
[     3.030][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join())
[     3.269][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join3())
[     3.590][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join4())
[     3.592][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = anti_join([10]))
[     3.770][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = left_join())
[     3.948][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = union())
[     3.955][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = intersect([6]))
[     4.117][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = semi_join())
[     4.661][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = cross_join([2]))
[     4.774][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = inner_join([23]))
[     4.928][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = natural_join())
[     5.114][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = natural_join3())
[     5.228][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = natural_join4())
[     5.234][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = anti_join([10]))
[     5.423][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = left_join())
[     5.953][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = union())
[     6.291][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = intersect([6]))
[     6.627][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = semi_join())
[     7.047][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = cross_join([2]))
[     7.098][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = inner_join([23]))
[     7.133][cube-solver-3][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join())
[     7.262][cube-solver-1][DEBUG] Solving cube (l0 = intersect([7]), l1 = natural_join3())
[     7.410][cube-solver-3][DEBUG] Solving cube (l0 = intersect([8]), l1 = natural_join4())
[     7.415][cube-solver-3][DEBUG] Solving cube (l0 = intersect([8]), l1 = anti_join([10]))
[     7.425][cube-solver-5][DEBUG] Solving cube (l0 = intersect([8]), l1 = left_join())
[     7.649][cube-solver-5][DEBUG] Solving cube (l0 = intersect([8]), l1 = union())
[     7.927][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = intersect([8]))
[     8.154][cube-solver-5][DEBUG] Solving cube (l0 = intersect([8]), l1 = semi_join())
[     8.292][cube-solver-3][DEBUG] Solving cube (l0 = intersect([8]), l1 = cross_join([2]))
[     8.319][cube-solver-5][DEBUG] Solving cube (l0 = intersect([8]), l1 = inner_join([23]))
[     8.391][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join())
[     8.486][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join3())
[     9.183][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join4())
[     9.185][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = anti_join([10]))
[     9.306][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = left_join())
[    10.257][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = union())
[    10.279][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = intersect([8]))
[    10.365][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(), l1 = semi_join())
[    10.594][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = cross_join([2]))
[    10.727][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = inner_join([23]))
[    10.809][cube-solver-3][DEBUG] Solving cube (l0 = cross_join([2]), l1 = natural_join())
[    10.834][cube-solver-3][DEBUG] Solving cube (l0 = cross_join([4]), l1 = natural_join3())
[    10.837][cube-solver-3][DEBUG] Solving cube (l0 = cross_join([4]), l1 = natural_join4())
[    10.840][cube-solver-3][DEBUG] Solving cube (l0 = cross_join([4]), l1 = anti_join([10]))
[    10.846][cube-solver-3][DEBUG] Solving cube (l0 = cross_join([4]), l1 = left_join())
[    10.849][cube-solver-3][DEBUG] Solving cube (l0 = cross_join([4]), l1 = union())
[    10.853][cube-solver-3][DEBUG] Solving cube (l0 = cross_join([4]), l1 = intersect([8]))
[    10.858][cube-solver-3][DEBUG] Solving cube (l0 = cross_join([4]), l1 = semi_join())
[    10.862][cube-solver-3][DEBUG] Solving cube (l0 = cross_join([4]), l1 = cross_join([4]))
[    10.868][cube-solver-3][DEBUG] Solving cube (l0 = cross_join([4]), l1 = inner_join([23]))
[    10.879][cube-solver-3][DEBUG] Solving cube (l0 = inner_join([23]), l1 = natural_join())
[    10.937][cube-solver-7][DEBUG] Solving cube (l0 = inner_join([24]), l1 = natural_join3())
[    11.064][cube-solver-5][DEBUG] Solving cube (l0 = inner_join([26]), l1 = natural_join4())
[    11.076][cube-solver-5][DEBUG] Solving cube (l0 = inner_join([26]), l1 = anti_join([10]))
[    11.155][cube-solver-1][DEBUG] Solving cube (l0 = inner_join([29]), l1 = left_join())
[    11.966][cube-solver-5][DEBUG] Found solution with cube (l0 = inner_join([26]), l1 = anti_join([10]))
[    11.967][MainProcess][INFO] Statistics:
[    11.968][MainProcess][INFO] 	Generated cubes: 105
[    11.968][MainProcess][INFO] 	Attempted programs: 1611
[    11.968][MainProcess][INFO] 		Rejected: 656
[    11.969][MainProcess][INFO] 		Failed: 954
[    11.969][MainProcess][INFO] 	Blacklist clauses: 51
[    11.969][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    11.970][MainProcess][DEBUG] 	0: Counter({'inner_join': 68, 'natural_join': 24, 'union': 24, 'left_join': 24, 'anti_join': 16, 'semi_join': 8})
[    11.970][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    11.976][MainProcess][DEBUG] 	0: Counter({'left_join': 2159, 'union': 1832, 'natural_join': 1802, 'anti_join': 1176, 'semi_join': 959, 'intersect': 400, 'inner_join': 373})
[    11.980][MainProcess][DEBUG] 	1: Counter({'inner_join': 3905, 'natural_join3': 1217, 'left_join': 837, 'union': 784, 'natural_join': 778, 'anti_join': 741, 'semi_join': 440})
[    11.980][MainProcess][INFO] Solution found: anti_join(@param0, inner_join(@param0, @param1, 'OriginalID' = 'OriginalID','Area' = 'Part'), )

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/044_1.csv", col_types = cols(OriginalID = col_integer(),Area = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/044_2.csv", col_types = cols(Part = col_character(),OriginalID = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/044_o.csv", col_types = cols(OriginalID = col_integer(),Area = col_character()))

df3 <- inner_join(input1, input2, by=c('OriginalID' = 'OriginalID','Area' = 'Part'), suffix = c('', '.other'))
df4 <- anti_join(input1, df3, by=c())
out <- df4 %>% select(OriginalID, Area) %>% arrange(OriginalID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT OriginalID,
       Area
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT LHS.OriginalID AS OriginalID,
                  LHS.Area AS Area
           FROM input1 AS LHS
           INNER JOIN input2 AS RHS ON (LHS.OriginalID = RHS.OriginalID
                                        AND LHS.Area = RHS.Part)) AS RHS
        WHERE (LHS.OriginalID = RHS.OriginalID
               AND LHS.Area = RHS.Area) ))
ORDER BY OriginalID
