[     1.579][MainProcess][INFO] Parsing specification...
[     1.583][MainProcess][DEBUG] Reading input files...
[     1.589][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/022_2.csv: ['int64', 'int64']
[     1.593][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/022_o.csv: ['int64']
[     1.618][MainProcess][DEBUG] Generating DSL...
[     2.561][MainProcess][INFO] Creating 8 processes
[     3.667][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.675][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.677][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.681][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.686][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.695][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.702][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.743][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[   107.469][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = mutate(), l2 = filter())
[   108.090][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = mutate())
[   108.723][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[   109.048][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = summarise(), l2 = filter())
[   109.786][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = mutate())
[   112.064][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = summarise([2]))
[   112.998][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = mutate())
[   113.096][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise([2]), l2 = summarise([2]))
[   113.398][cube-solver-2][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = mutate())
[   113.491][cube-solver-1][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = summarise([2]))
[   113.524][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = mutate(), l2 = filter())
[   113.577][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = summarise([2]))
[   116.035][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise([2]), l1 = filter(), l2 = mutate())
[   116.037][MainProcess][INFO] Statistics:
[   116.037][MainProcess][INFO] 	Generated cubes: 12
[   116.037][MainProcess][INFO] 	Attempted programs: 112
[   116.037][MainProcess][INFO] 		Rejected: 75
[   116.037][MainProcess][INFO] 		Failed: 36
[   116.038][MainProcess][INFO] 	Blacklist clauses: 2
[   116.038][MainProcess][DEBUG] Printing statistics for good programs of size 3
[   116.039][MainProcess][DEBUG] 	0: Counter({'mutate': 684, 'summarise': 662, 'filter': 511})
[   116.040][MainProcess][DEBUG] 	1: Counter({'mutate': 915, 'filter': 600, 'summarise': 342})
[   116.040][MainProcess][DEBUG] 	2: Counter({'filter': 746, 'mutate': 698, 'summarise': 413})
[   116.040][MainProcess][INFO] Solution found: mutate(filter(summarise(@param0, n = n(), c1), n >= 3 | n >= c1), c1 = max(c1))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/022_2.csv", col_types = cols(c1 = col_integer(),c2 = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/022_o.csv", col_types = cols(c3 = col_integer()))

df2 <- input1 %>% group_by(c1) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n >= 3 | n >= c1)
df4 <- df3 %>% mutate(c1 = max(c1))
out <- df4 %>% select(c3 = c1) %>% distinct() %>% arrange(c3)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT MAX(c1) OVER () AS c3
FROM
  (SELECT c1,
          COUNT() AS n
   FROM input1
   GROUP BY c1)
WHERE (n >= 3.0
       OR n >= c1)
ORDER BY c3
