[     3.233][MainProcess][INFO] Parsing specification...
[     3.237][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.237][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.238][MainProcess][DEBUG] Reading input files...
[     3.246][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_1.csv: ['int64', 'string', 'int64']
[     3.252][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_2.csv: ['int64', 'string', 'string']
[     3.257][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_o.csv: ['int64', 'string', 'int64']
[     3.287][MainProcess][DEBUG] Generating DSL...
[     3.323][MainProcess][INFO] Creating 8 processes
[     3.356][MainProcess][DEBUG] Increasing generator loc to 2
[     3.388][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.388][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.393][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.394][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.400][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.401][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.409][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.415][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.766][cube-solver-0][WARNING] There is no solution for current loc (1).
[     3.767][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     3.768][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.133][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     4.137][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     4.147][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     4.150][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     4.163][cube-solver-6][DEBUG] Solving cube (l0 = filter([2]), l1 = union())
[     4.166][cube-solver-5][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join3())
[     4.180][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([7]))
[     4.188][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([8]))
[     4.196][cube-solver-3][DEBUG] Solving cube (l0 = filter([8]), l1 = intersect())
[     4.216][cube-solver-7][DEBUG] Solving cube (l0 = filter([11]), l1 = filter([11]))
[     4.229][cube-solver-7][DEBUG] Solving cube (l0 = filter([14]), l1 = semi_join())
[     4.283][cube-solver-7][DEBUG] Solving cube (l0 = filter([16]), l1 = cross_join())
[     4.299][cube-solver-7][DEBUG] Solving cube (l0 = filter([16]), l1 = inner_join())
[     4.313][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([16]))
[     4.425][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = filter([16]))
[     4.427][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = filter([16]))
[     4.436][cube-solver-4][DEBUG] Solving cube (l0 = intersect(), l1 = filter([16]))
[     4.593][cube-solver-0][DEBUG] Solving cube (l0 = filter([16]), l1 = anti_join([8]))
[     4.618][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([16]))
[     4.800][cube-solver-0][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([16]))
[     4.812][cube-solver-3][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([16]))
[     4.877][MainProcess][DEBUG] Increasing generator loc to 3
[     4.877][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     5.998][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     6.546][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join())
[     6.721][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter([7]))
[     6.722][MainProcess][INFO] Statistics:
[     6.723][MainProcess][INFO] 	Generated cubes: 24
[     6.723][MainProcess][INFO] 	Attempted programs: 360
[     6.723][MainProcess][INFO] 		Rejected: 3
[     6.723][MainProcess][INFO] 		Failed: 356
[     6.723][MainProcess][INFO] 	Blacklist clauses: 128
[     6.724][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     6.725][MainProcess][DEBUG] 	0: Counter({'natural_join': 361, 'left_join': 323, 'union': 316, 'inner_join': 241, 'anti_join': 119})
[     6.726][MainProcess][DEBUG] 	1: Counter({'filter': 1360})
[     6.726][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     6.726][MainProcess][DEBUG] 	0: Counter({'natural_join': 18})
[     6.726][MainProcess][DEBUG] 	1: Counter({'filter': 18})
[     6.726][MainProcess][DEBUG] 	2: Counter({'natural_join': 18})
[     6.727][MainProcess][INFO] Solution found: filter(natural_join(@param0, @param1), type == 'public' & accountID == 'Dave')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/031_1.csv", col_types = cols(channelID = col_integer(),accountID = col_character(),role = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/031_2.csv", col_types = cols(channelID = col_integer(),channelName = col_character(),type = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/031_o.csv", col_types = cols(c1 = col_integer(),c2 = col_character(),c3 = col_integer()))

df3 <- inner_join(input1, input2)
df4 <- df3 %>% filter(type == 'public' & accountID == 'Dave')
out <- df4 %>% select(c1 = channelID, c2 = accountID, c3 = role) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `channelID` AS `c1`,
       `accountID` AS `c2`,
       `role` AS `c3`
FROM
  (SELECT `LHS`.`channelID` AS `channelID`,
          `LHS`.`accountID` AS `accountID`,
          `LHS`.`role` AS `role`,
          `RHS`.`channelName` AS `channelName`,
          `RHS`.`type` AS `type`
   FROM `input1` AS `LHS`
   INNER JOIN `input2` AS `RHS` ON (`LHS`.`channelID` = `RHS`.`channelID`))
WHERE (`type` = 'public'
       AND `accountID` = 'Dave')
ORDER BY c1
