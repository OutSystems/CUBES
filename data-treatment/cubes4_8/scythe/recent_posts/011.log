[     3.370][MainProcess][INFO] Parsing specification...
[     3.373][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.373][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.374][MainProcess][DEBUG] Reading input files...
[     3.384][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/011.csv: ['int64', 'string', 'string']
[     3.391][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/011_o.csv: ['int64', 'string']
[     3.431][MainProcess][DEBUG] Generating DSL...
[     3.485][MainProcess][INFO] Creating 8 processes
[     3.520][MainProcess][DEBUG] Increasing generator loc to 2
[     3.557][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.560][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.566][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.569][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.571][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.575][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.578][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.581][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.947][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.960][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.389][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     4.389][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     4.396][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     4.396][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     4.400][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     4.405][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     4.407][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     4.408][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     4.412][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     4.435][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     4.438][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     4.440][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     4.443][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     4.443][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     4.448][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     4.469][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())
[     4.471][MainProcess][INFO] Statistics:
[     4.472][MainProcess][INFO] 	Generated cubes: 17
[     4.472][MainProcess][INFO] 	Attempted programs: 1
[     4.472][MainProcess][INFO] 		Rejected: 0
[     4.472][MainProcess][INFO] 		Failed: 0
[     4.472][MainProcess][INFO] 	Blacklist clauses: 0
[     4.472][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     4.473][MainProcess][DEBUG] 	0: Counter({'mutate': 71, 'summarise': 62})
[     4.473][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     4.474][MainProcess][DEBUG] 	0: Counter({'summarise': 2})
[     4.474][MainProcess][DEBUG] 	1: Counter({'natural_join': 2})
[     4.474][MainProcess][INFO] Solution found: natural_join(summarise(@param0, concatValue = string_agg(Value, ', '), ID), @param0)
[     4.777][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/011.csv", col_types = cols(ID = col_integer(),Name = col_character(),Value = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/011_o.csv", col_types = cols(ID = col_integer(),Value = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df2 <- input1 %>% group_by(ID) %>% summarise(concatValue = string_agg(Value, ', ')) %>% ungroup()
df3 <- inner_join(df2, input1)
out <- df3 %>% select(ID, Value = concatValue) %>% distinct() %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `ID`,
                `concatValue` AS `Value`
FROM
  (SELECT `LHS`.`ID` AS `ID`,
          `LHS`.`concatValue` AS `concatValue`,
          `RHS`.`Name` AS `Name`,
          `RHS`.`Value` AS `Value`
   FROM
     (SELECT `ID`,
             string_agg(`Value`, ', ') AS concatValue
      FROM input1
      GROUP BY ID) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.ID = RHS.ID))
ORDER BY ID
