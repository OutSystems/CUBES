[     3.117][MainProcess][INFO] Parsing specification...
[     3.122][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.122][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.122][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.123][MainProcess][DEBUG] Reading input files...
[     3.133][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/016_2.csv: ['string', 'datetime64[ns]']
[     3.140][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/016_o.csv: ['string', 'datetime64[ns]', 'int64']
[     3.178][MainProcess][DEBUG] Generating DSL...
[     3.446][MainProcess][INFO] Creating 8 processes
[     3.772][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.781][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.785][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.791][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.803][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.807][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.809][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.811][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    18.995][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[    19.053][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = summarise(), l2 = filter())
[    19.139][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = summarise())
[    19.153][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[    19.159][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = mutate(), l2 = filter())
[    19.174][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = summarise())
[    19.186][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = mutate())
[    19.198][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[    19.243][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = summarise())
[    19.248][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = mutate())
[    19.264][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = mutate(), l2 = filter())
[    19.368][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = mutate())
[    19.406][MainProcess][DEBUG] Increasing generator loc to 4
[    19.438][cube-solver-5][DEBUG] Initialising process for 4 lines of code.
[    27.285][cube-solver-6][DEBUG] Initialising process for 4 lines of code.
[    33.469][cube-solver-1][DEBUG] Initialising process for 4 lines of code.
[    35.267][cube-solver-0][DEBUG] Initialising process for 4 lines of code.
[    35.665][cube-solver-7][DEBUG] Initialising process for 4 lines of code.
[    42.101][cube-solver-2][DEBUG] Initialising process for 4 lines of code.
[    42.777][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise(), l3 = filter())
[    42.842][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate(), l3 = summarise())
[    42.870][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate(), l3 = mutate())
[    42.899][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise(), l3 = filter())
[    42.932][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter(), l3 = summarise())
[    42.960][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter(), l3 = mutate())
[    42.989][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate(), l3 = filter())
[    43.018][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = summarise(), l3 = filter())
[    43.047][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter(), l3 = summarise())
[    43.076][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter(), l3 = mutate())
[    43.103][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = mutate(), l3 = filter())
[    43.131][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise(), l3 = summarise())
[    43.160][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise(), l3 = mutate())
[    43.188][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate(), l3 = summarise())
[    43.216][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate(), l3 = mutate())
[    43.244][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise(), l3 = filter())
[    43.272][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter(), l3 = summarise())
[    43.300][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter(), l3 = mutate())
[    43.329][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate(), l3 = filter())
[    43.358][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = summarise(), l3 = filter())
[    43.387][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter(), l3 = summarise())
[    43.415][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter(), l3 = mutate())
[    43.443][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = mutate(), l3 = filter())
[    43.471][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise(), l3 = summarise())
[    43.500][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise(), l3 = mutate())
[    43.528][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate(), l3 = summarise())
[    43.555][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate(), l3 = mutate())
[    43.584][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise(), l3 = filter())
[    43.611][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter(), l3 = summarise())
[    43.639][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter(), l3 = mutate())
[    43.668][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate(), l3 = filter())
[    43.697][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = summarise(), l3 = filter())
[    52.309][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter(), l3 = summarise())
[    52.417][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter(), l3 = summarise())
[    55.189][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter(), l3 = mutate())
[    55.304][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter(), l3 = mutate())
[    57.567][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise(), l3 = summarise())
[    57.647][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = mutate(), l3 = filter())
[    57.880][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter(), l3 = mutate())
[    57.883][MainProcess][INFO] Statistics:
[    57.884][MainProcess][INFO] 	Generated cubes: 52
[    57.884][MainProcess][INFO] 	Attempted programs: 1408
[    57.884][MainProcess][INFO] 		Rejected: 607
[    57.884][MainProcess][INFO] 		Failed: 800
[    57.884][MainProcess][INFO] 	Blacklist clauses: 0
[    57.885][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    57.897][MainProcess][DEBUG] 	0: Counter({'mutate': 9180, 'summarise': 8959})
[    57.902][MainProcess][DEBUG] 	1: Counter({'mutate': 10939, 'filter': 6600, 'summarise': 600})
[    57.907][MainProcess][DEBUG] 	2: Counter({'filter': 11539, 'mutate': 5400, 'summarise': 1200})
[    57.907][MainProcess][DEBUG] Printing statistics for good programs of size 4
[    57.907][MainProcess][DEBUG] 	0: Counter({'summarise': 1130})
[    57.908][MainProcess][DEBUG] 	1: Counter({'natural_join': 1130})
[    57.908][MainProcess][DEBUG] 	2: Counter({'filter': 588, 'summarise': 516, 'mutate': 26})
[    57.908][MainProcess][DEBUG] 	3: Counter({'filter': 542, 'mutate': 348, 'summarise': 240})
[    57.909][MainProcess][INFO] Solution found: mutate(filter(natural_join(@param0, summarise(@param0, n = n(), CustomerId)), n > 1 & ReportDt > mdy('10/19/2016')), maxReportDt = max(ReportDt))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/016_2.csv", col_types = cols(CustomerId = col_character(),ReportDt = col_character()))
input1$ReportDt <- mdy(input1$ReportDt)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/016_o.csv", col_types = cols(c1 = col_character(),c2 = col_character(),c3 = col_integer()))
expected_output$c2 <- mdy(expected_output$c2)

df2 <- input1 %>% group_by(CustomerId) %>% summarise(n = n()) %>% ungroup()
df3 <- inner_join(input1, df2)
df4 <- df3 %>% filter(n > 1 & ReportDt > mdy('10/19/2016'))
df5 <- df4 %>% mutate(maxReportDt = max(ReportDt))
out <- df5 %>% select(c1 = CustomerId, c2 = maxReportDt, c3 = n) %>% distinct() %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `CustomerId` AS `c1`,
                MAX(`ReportDt`) OVER () AS `c2`,
                                     `n` AS `c3`
FROM
  (SELECT `LHS`.`CustomerId` AS `CustomerId`,
          `LHS`.`ReportDt` AS `ReportDt`,
          `RHS`.`n` AS `n`
   FROM `input1` AS `LHS`
   INNER JOIN
     (SELECT `CustomerId`,
             COUNT() AS `n`
      FROM `input1`
      GROUP BY `CustomerId`) AS `RHS` ON (`LHS`.`CustomerId` = `RHS`.`CustomerId`))
WHERE (`n` > 1.0
       AND `ReportDt` > mdy('10/19/2016'))
ORDER BY c1
