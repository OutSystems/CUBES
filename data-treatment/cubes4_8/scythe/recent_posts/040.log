[     2.807][MainProcess][INFO] Parsing specification...
[     2.812][MainProcess][DEBUG] Reading input files...
[     2.822][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/040.csv: ['int64', 'int64', 'string', 'string', 'string']
[     2.828][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/040_o.csv: ['int64', 'int64', 'string', 'string', 'string']
[     2.857][MainProcess][DEBUG] Generating DSL...
[     2.895][MainProcess][INFO] Creating 8 processes
[     2.930][MainProcess][DEBUG] Increasing generator loc to 3
[     2.960][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.960][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.961][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.972][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.975][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.978][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.983][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.987][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.611][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.614][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.619][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.624][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.627][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.687][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     4.250][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     4.255][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     4.257][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     4.260][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     4.262][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     4.262][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     4.264][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     4.266][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     4.267][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     4.269][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     4.272][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     4.274][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     4.277][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     4.283][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     4.288][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     4.319][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     4.326][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     4.331][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     4.371][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.943][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter([1]))
[     4.954][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     5.017][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]), l2 = summarise())
[     5.027][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = left_join())
[     5.786][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = filter([4]))
[     7.614][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     7.616][MainProcess][INFO] Statistics:
[     7.617][MainProcess][INFO] 	Generated cubes: 27
[     7.617][MainProcess][INFO] 	Attempted programs: 264
[     7.617][MainProcess][INFO] 		Rejected: 114
[     7.617][MainProcess][INFO] 		Failed: 149
[     7.617][MainProcess][INFO] 	Blacklist clauses: 4
[     7.617][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     7.618][MainProcess][DEBUG] 	0: Counter({'mutate': 459})
[     7.619][MainProcess][DEBUG] 	1: Counter({'filter': 459})
[     7.619][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     7.620][MainProcess][DEBUG] 	0: Counter({'summarise': 1518})
[     7.622][MainProcess][DEBUG] 	1: Counter({'filter': 1098, 'natural_join': 420})
[     7.623][MainProcess][DEBUG] 	2: Counter({'natural_join3': 421, 'filter': 420, 'natural_join': 359, 'left_join': 317, 'anti_join': 1})
[     7.623][MainProcess][INFO] Solution found: anti_join(@param0, filter(summarise(@param0, n_distinct = n_distinct(action), first_name), n_distinct < 2), 'first_name')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/040.csv", col_types = cols(id = col_integer(),timestamp = col_integer(),first_name = col_character(),last_name = col_character(),action = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/040_o.csv", col_types = cols(id = col_integer(),timestamp = col_integer(),first_name = col_character(),last_name = col_character(),action = col_character()))

df2 <- input1 %>% group_by(first_name) %>% summarise(n_distinct = n_distinct(action)) %>% ungroup()
df3 <- df2 %>% filter(n_distinct < 2)
df4 <- anti_join(input1, df3, by=c('first_name'))
out <- df4 %>% select(id, timestamp, first_name, last_name, action) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       TIMESTAMP,
       first_name,
       last_name,
       action
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT first_name,
                     COUNT(DISTINCT action) AS n_distinct
              FROM input1
              GROUP BY first_name)
           WHERE (n_distinct < 2.0)) AS RHS
        WHERE (LHS.first_name = RHS.first_name) ))
ORDER BY id
