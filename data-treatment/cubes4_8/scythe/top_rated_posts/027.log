[     3.371][MainProcess][INFO] Parsing specification...
[     3.377][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.377][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.378][MainProcess][DEBUG] Reading input files...
[     3.389][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i027.csv: ['string', 'string', 'float64']
[     3.396][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o027.csv: ['string', 'string', 'float64']
[     3.435][MainProcess][DEBUG] Generating DSL...
[     3.643][MainProcess][INFO] Creating 8 processes
[     3.684][MainProcess][DEBUG] Increasing generator loc to 2
[     3.817][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.828][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.842][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.843][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.843][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.849][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.851][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.863][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     6.533][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     6.552][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     7.009][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.038][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     9.298][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]))
[     9.300][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]))
[     9.305][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     9.325][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     9.335][cube-solver-3][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join4())
[     9.336][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[     9.349][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]))
[     9.351][cube-solver-6][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter())
[     9.352][cube-solver-3][DEBUG] Solving cube (l0 = summarise([3]), l1 = anti_join())
[     9.352][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     9.358][cube-solver-5][DEBUG] Solving cube (l0 = summarise([3]), l1 = left_join())
[     9.370][cube-solver-2][DEBUG] Solving cube (l0 = summarise([3]), l1 = union())
[     9.373][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = intersect())
[     9.397][cube-solver-7][DEBUG] Solving cube (l0 = summarise([3]), l1 = semi_join())
[     9.686][cube-solver-7][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = semi_join())
[     9.688][MainProcess][INFO] Statistics:
[     9.688][MainProcess][INFO] 	Generated cubes: 18
[     9.688][MainProcess][INFO] 	Attempted programs: 17
[     9.688][MainProcess][INFO] 		Rejected: 13
[     9.688][MainProcess][INFO] 		Failed: 3
[     9.689][MainProcess][INFO] 	Blacklist clauses: 3
[     9.689][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     9.689][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 48})
[     9.690][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     9.690][MainProcess][DEBUG] 	0: Counter({'summarise': 150})
[     9.690][MainProcess][DEBUG] 	1: Counter({'left_join': 39, 'union': 38, 'anti_join': 25, 'semi_join': 25, 'filter': 24})
[     9.691][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, avg = max(avg), cname))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i027.csv", col_types = cols(cname = col_character(),wmname = col_character(),avg = col_double()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o027.csv", col_types = cols(cname = col_character(),wmname = col_character(),maxavg = col_double()))

df2 <- input1 %>% group_by(cname) %>% summarise(avg = max(avg)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(cname, wmname, maxavg = avg) %>% arrange(cname)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT cname,
       wmname,
       AVG AS maxavg
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT cname,
                  MAX(AVG) AS AVG
           FROM input1
           GROUP BY cname) AS RHS
        WHERE (LHS.cname = RHS.cname
               AND LHS.avg = RHS.avg) ))
ORDER BY cname
