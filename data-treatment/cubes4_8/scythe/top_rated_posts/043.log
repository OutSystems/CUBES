[     1.673][MainProcess][INFO] Parsing specification...
[     1.676][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.676][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.677][MainProcess][DEBUG] Reading input files...
[     1.685][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i043.csv: ['string', 'string']
[     1.689][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o043.csv: ['string', 'string']
[     1.715][MainProcess][DEBUG] Generating DSL...
[     1.734][MainProcess][INFO] Creating 8 processes
[     1.763][MainProcess][DEBUG] Increasing generator loc to 3
[     1.774][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.779][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.780][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.784][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.785][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.791][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.792][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.794][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.012][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.017][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.023][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.024][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.026][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.036][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.168][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.175][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.176][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.180][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.180][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.183][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.183][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.185][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.186][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.187][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.189][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.190][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.192][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.226][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.230][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.244][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.247][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = natural_join4())
[     2.250][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = summarise())
[     2.469][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter([1]))
[     2.470][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = summarise())
[     2.473][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.473][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     2.500][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.914][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = left_join())
[     2.933][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.364][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = union())
[     3.458][cube-solver-7][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     3.459][MainProcess][INFO] Statistics:
[     3.459][MainProcess][INFO] 	Generated cubes: 28
[     3.459][MainProcess][INFO] 	Attempted programs: 40
[     3.459][MainProcess][INFO] 		Rejected: 31
[     3.460][MainProcess][INFO] 		Failed: 8
[     3.460][MainProcess][INFO] 	Blacklist clauses: 5
[     3.460][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.460][MainProcess][DEBUG] 	0: Counter({'summarise': 100, 'mutate': 60})
[     3.460][MainProcess][DEBUG] 	1: Counter({'filter': 160})
[     3.460][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.461][MainProcess][DEBUG] 	0: Counter({'summarise': 763})
[     3.461][MainProcess][DEBUG] 	1: Counter({'filter': 621, 'natural_join': 142})
[     3.462][MainProcess][DEBUG] 	2: Counter({'filter': 250, 'natural_join3': 133, 'natural_join': 129, 'summarise': 101, 'anti_join': 92, 'left_join': 53, 'union': 5})
[     3.462][MainProcess][INFO] Solution found: natural_join3(@param0, summarise(@param0, n = n(), EmailAddress), filter(summarise(@param0, n = n(), EmailAddress), n > 1))
[     3.612][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i043.csv", col_types = cols(CustomerName = col_character(),EmailAddress = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o043.csv", col_types = cols(CustomerName = col_character(),EmailAddress = col_character()))

df2 <- input1 %>% group_by(EmailAddress) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 1)
df4 <- inner_join(input1, df2) %>% inner_join(df3)
out <- df4 %>% select(CustomerName, EmailAddress) %>% arrange(CustomerName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT CustomerName,
       EmailAddress
FROM
  (SELECT LHS.CustomerName AS CustomerName,
          LHS.EmailAddress AS EmailAddress,
          LHS.n AS n
   FROM
     (SELECT LHS.CustomerName AS CustomerName,
             LHS.EmailAddress AS EmailAddress,
             RHS.n AS n
      FROM input1 AS LHS
      INNER JOIN
        (SELECT EmailAddress,
                COUNT() AS n
         FROM input1
         GROUP BY EmailAddress) AS RHS ON (LHS.EmailAddress = RHS.EmailAddress)) AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT EmailAddress,
                COUNT() AS n
         FROM input1
         GROUP BY EmailAddress)
      WHERE (n > 1.0)) AS RHS ON (LHS.EmailAddress = RHS.EmailAddress
                                  AND LHS.n = RHS.n))
ORDER BY CustomerName
