[     1.576][MainProcess][INFO] Parsing specification...
[     1.578][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.579][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.579][MainProcess][DEBUG] Reading input files...
[     1.585][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i028_1.csv: ['string']
[     1.590][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i028_2.csv: ['string', 'int64', 'string']
[     1.594][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o028.csv: ['string', 'string']
[     1.623][MainProcess][DEBUG] Generating DSL...
[     1.658][MainProcess][INFO] Creating 8 processes
[     1.687][MainProcess][DEBUG] Increasing generator loc to 2
[     1.720][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.723][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.729][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.730][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.745][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     2.096][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.097][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.099][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.106][cube-solver-1][WARNING] There is no solution for current loc (1).
[     2.107][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.110][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.665][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.671][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.680][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.688][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.694][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.699][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.704][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.737][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.744][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.749][cube-solver-5][DEBUG] Solving cube (l0 = summarise([3]), l1 = union())
[     2.769][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.773][cube-solver-7][DEBUG] Solving cube (l0 = summarise([4]), l1 = intersect())
[     2.930][cube-solver-1][DEBUG] Solving cube (l0 = summarise([8]), l1 = natural_join3())
[     2.934][cube-solver-0][DEBUG] Solving cube (l0 = summarise([9]), l1 = natural_join())
[     3.488][cube-solver-2][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise())
[     3.489][MainProcess][INFO] Statistics:
[     3.490][MainProcess][INFO] 	Generated cubes: 16
[     3.490][MainProcess][INFO] 	Attempted programs: 12
[     3.490][MainProcess][INFO] 		Rejected: 11
[     3.490][MainProcess][INFO] 		Failed: 0
[     3.490][MainProcess][INFO] 	Blacklist clauses: 9
[     3.490][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.491][MainProcess][DEBUG] 	0: Counter({'summarise': 262, 'natural_join': 181})
[     3.491][MainProcess][DEBUG] 	1: Counter({'mutate': 96, 'summarise': 85, 'union': 72, 'left_join': 56, 'natural_join3': 51, 'natural_join': 50, 'anti_join': 34})
[     3.492][MainProcess][INFO] Solution found: summarise(natural_join(@param0, @param1), concatDesc = string_agg(Desc, ' '), PID)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i028_1.csv", col_types = cols(PID = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i028_2.csv", col_types = cols(PID = col_character(),SEQ = col_integer(),Desc = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o028.csv", col_types = cols(PID = col_character(),concatDesc = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df3 <- inner_join(input1, input2)
df4 <- df3 %>% group_by(PID) %>% summarise(concatDesc = string_agg(Desc, ' ')) %>% ungroup()
out <- df4 %>% select(PID, concatDesc) %>% arrange(PID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `PID`,
       `concatDesc`
FROM
  (SELECT `PID`,
          string_agg(`Desc`, ' ') AS concatDesc
   FROM
     (SELECT LHS.PID AS PID,
             RHS.SEQ AS SEQ,
             RHS.Desc AS DESC
      FROM input1 AS LHS
      INNER JOIN input2 AS RHS ON (LHS.PID = RHS.PID))
   GROUP BY PID)
ORDER BY PID
