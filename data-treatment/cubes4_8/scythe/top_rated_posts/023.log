[     1.562][MainProcess][INFO] Parsing specification...
[     1.565][MainProcess][DEBUG] Reading input files...
[     1.571][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i023.csv: ['int64', 'int64']
[     1.575][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o023.csv: ['int64', 'int64', 'int64']
[     1.601][MainProcess][DEBUG] Generating DSL...
[     1.623][MainProcess][INFO] Creating 8 processes
[     1.651][MainProcess][DEBUG] Increasing generator loc to 2
[     1.668][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.669][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.671][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.677][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.677][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.682][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.683][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.688][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.809][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.815][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.900][cube-solver-1][DEBUG] Found solution with cube (l0 = mutate(),)
[     1.901][MainProcess][INFO] Statistics:
[     1.902][MainProcess][INFO] 	Generated cubes: 8
[     1.902][MainProcess][INFO] 	Attempted programs: 1
[     1.902][MainProcess][INFO] 		Rejected: 0
[     1.902][MainProcess][INFO] 		Failed: 0
[     1.902][MainProcess][INFO] 	Blacklist clauses: 0
[     1.902][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     1.903][MainProcess][DEBUG] 	0: Counter({'mutate': 9, 'summarise': 5})
[     1.903][MainProcess][INFO] Solution found: mutate(@param0, row_number = row_number())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i023.csv", col_types = cols(itemID = col_integer(),ordercount = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o023.csv", col_types = cols(rank = col_integer(),itemID = col_integer(),ordercount = col_integer()))

df2 <- input1 %>% mutate(row_number = row_number())
out <- df2 %>% select(rank = row_number, itemID, ordercount) %>% arrange(rank)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ROW_NUMBER() OVER () AS rank,
                         itemID,
                         ordercount
FROM input1
ORDER BY rank
