[     1.581][MainProcess][INFO] Parsing specification...
[     1.584][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.584][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.585][MainProcess][DEBUG] Reading input files...
[     1.592][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i038.csv: ['int64', 'string', 'string']
[     1.597][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o038.csv: ['int64', 'string', 'string']
[     1.622][MainProcess][DEBUG] Generating DSL...
[     1.643][MainProcess][INFO] Creating 8 processes
[     1.674][MainProcess][DEBUG] Increasing generator loc to 3
[     1.685][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.689][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.690][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.697][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.698][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.705][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.705][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.711][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.956][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.960][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     1.964][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     1.968][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     1.970][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     1.978][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.183][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.190][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.192][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.194][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.199][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.199][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.200][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.203][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.204][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.204][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.206][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.207][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.209][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.244][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.248][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.288][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = summarise())
[     2.291][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = natural_join4())
[     2.295][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = summarise())
[     2.531][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([3]), l2 = summarise())
[     2.535][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = filter([3]))
[     2.563][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter([3]))
[     2.570][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = anti_join())
[     3.584][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.799][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.090][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = left_join())
[     4.310][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = union())
[     6.165][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = intersect())
[     7.118][cube-solver-7][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     7.120][MainProcess][INFO] Statistics:
[     7.120][MainProcess][INFO] 	Generated cubes: 29
[     7.120][MainProcess][INFO] 	Attempted programs: 247
[     7.120][MainProcess][INFO] 		Rejected: 107
[     7.121][MainProcess][INFO] 		Failed: 139
[     7.121][MainProcess][INFO] 	Blacklist clauses: 5
[     7.121][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     7.122][MainProcess][DEBUG] 	0: Counter({'mutate': 240, 'summarise': 180})
[     7.123][MainProcess][DEBUG] 	1: Counter({'filter': 420})
[     7.123][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     7.125][MainProcess][DEBUG] 	0: Counter({'summarise': 3713})
[     7.126][MainProcess][DEBUG] 	1: Counter({'filter': 3011, 'natural_join': 702})
[     7.128][MainProcess][DEBUG] 	2: Counter({'filter': 1128, 'natural_join': 657, 'natural_join3': 603, 'left_join': 445, 'union': 372, 'anti_join': 328, 'summarise': 180})
[     7.128][MainProcess][INFO] Solution found: natural_join3(summarise(@param0, n = n(), name), filter(summarise(@param0, n = n(), name), n > 1), @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i038.csv", col_types = cols(id = col_integer(),name = col_character(),city = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o038.csv", col_types = cols(id = col_integer(),name = col_character(),city = col_character()))

df2 <- input1 %>% group_by(name) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 1)
df4 <- inner_join(df2, df3) %>% inner_join(input1)
out <- df4 %>% select(id, name, city) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       name,
       city
FROM
  (SELECT LHS.name AS name,
          LHS.n AS n,
          RHS.id AS id,
          RHS.city AS city
   FROM
     (SELECT LHS.name AS name,
             LHS.n AS n
      FROM
        (SELECT name,
                COUNT() AS n
         FROM input1
         GROUP BY name) AS LHS
      INNER JOIN
        (SELECT *
         FROM
           (SELECT name,
                   COUNT() AS n
            FROM input1
            GROUP BY name)
         WHERE (n > 1.0)) AS RHS ON (LHS.name = RHS.name
                                     AND LHS.n = RHS.n)) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.name = RHS.name))
ORDER BY id
