[     3.596][MainProcess][INFO] Parsing specification...
[     3.601][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.601][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.603][MainProcess][DEBUG] Reading input files...
[     3.613][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i047.csv: ['int64', 'int64', 'int64', 'string']
[     3.619][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o047.csv: ['int64', 'int64', 'int64', 'string']
[     3.652][MainProcess][DEBUG] Generating DSL...
[     3.829][MainProcess][INFO] Creating 8 processes
[     3.863][MainProcess][DEBUG] Increasing generator loc to 2
[     4.005][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     4.013][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     4.021][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     4.022][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     4.030][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     4.051][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     4.054][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     4.054][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     6.883][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     6.902][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     7.071][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     9.017][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     9.841][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     9.861][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([4]))
[     9.868][cube-solver-5][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join4())
[     9.871][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     9.886][cube-solver-5][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]))
[     9.891][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter())
[     9.904][cube-solver-5][DEBUG] Solving cube (l0 = summarise([4]), l1 = left_join())
[     9.903][cube-solver-3][DEBUG] Solving cube (l0 = summarise([4]), l1 = anti_join())
[     9.956][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([4]))
[     9.962][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([4]))
[     9.993][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[    10.003][cube-solver-6][DEBUG] Solving cube (l0 = summarise([4]), l1 = union())
[    10.009][cube-solver-2][DEBUG] Solving cube (l0 = summarise([4]), l1 = intersect())
[    10.033][cube-solver-7][DEBUG] Solving cube (l0 = summarise([4]), l1 = semi_join())
[    10.587][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = cross_join())
[    12.960][cube-solver-0][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join())
[    14.132][cube-solver-2][DEBUG] Solving cube (l0 = summarise([4]), l1 = mutate())
[    14.996][cube-solver-7][DEBUG] Found solution with cube (l0 = summarise([4]), l1 = semi_join())
[    14.998][MainProcess][INFO] Statistics:
[    14.998][MainProcess][INFO] 	Generated cubes: 20
[    14.998][MainProcess][INFO] 	Attempted programs: 303
[    14.998][MainProcess][INFO] 		Rejected: 141
[    14.998][MainProcess][INFO] 		Failed: 161
[    14.999][MainProcess][INFO] 	Blacklist clauses: 4
[    14.999][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    15.000][MainProcess][DEBUG] 	0: Counter({'mutate': 288})
[    15.000][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    15.002][MainProcess][DEBUG] 	0: Counter({'summarise': 3387})
[    15.005][MainProcess][DEBUG] 	1: Counter({'left_join': 697, 'union': 662, 'anti_join': 647, 'semi_join': 577, 'cross_join': 459, 'natural_join': 260, 'mutate': 85})
[    15.005][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, time = max(time), user))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i047.csv", col_types = cols(id = col_integer(),user = col_integer(),time = col_integer(),io = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o047.csv", col_types = cols(id = col_integer(),user = col_integer(),time = col_integer(),io = col_character()))

df2 <- input1 %>% group_by(user) %>% summarise(time = max(time)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(id, user, time, io) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       USER,
       TIME,
       io
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT USER,
                  MAX(TIME) AS TIME
           FROM input1
           GROUP BY USER) AS RHS
        WHERE (LHS.user = RHS.user
               AND LHS.time = RHS.time) ))
ORDER BY id
