[     1.649][MainProcess][INFO] Parsing specification...
[     1.652][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.652][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.653][MainProcess][DEBUG] Reading input files...
[     1.660][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i013.csv: ['string', 'int64']
[     1.665][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o013.csv: ['string', 'int64', 'int64']
[     1.691][MainProcess][DEBUG] Generating DSL...
[     1.710][MainProcess][INFO] Creating 8 processes
[     1.744][MainProcess][DEBUG] Increasing generator loc to 3
[     1.753][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.756][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.756][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.765][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.766][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.771][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.774][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.781][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.985][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.991][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.015][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.014][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.017][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.023][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.183][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.189][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.189][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.194][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.195][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.197][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.200][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.200][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.202][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.204][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.207][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.209][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.211][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.245][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.249][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.282][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.286][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.289][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.483][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([3]), l2 = summarise())
[     2.486][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter([3]))
[     2.489][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = filter([3]))
[     2.490][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = anti_join())
[     2.535][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.642][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.040][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = left_join())
[     3.101][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = union())
[     3.282][cube-solver-3][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter([4]), l2 = left_join())
[     3.283][MainProcess][INFO] Statistics:
[     3.283][MainProcess][INFO] 	Generated cubes: 28
[     3.283][MainProcess][INFO] 	Attempted programs: 24
[     3.283][MainProcess][INFO] 		Rejected: 23
[     3.283][MainProcess][INFO] 		Failed: 0
[     3.283][MainProcess][INFO] 	Blacklist clauses: 5
[     3.283][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.284][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 60})
[     3.284][MainProcess][DEBUG] 	1: Counter({'filter': 120})
[     3.284][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.284][MainProcess][DEBUG] 	0: Counter({'summarise': 551})
[     3.285][MainProcess][DEBUG] 	1: Counter({'filter': 431, 'natural_join': 120})
[     3.285][MainProcess][DEBUG] 	2: Counter({'filter': 192, 'natural_join': 108, 'natural_join3': 93, 'anti_join': 72, 'summarise': 43, 'left_join': 25, 'union': 18})
[     3.285][MainProcess][INFO] Solution found: left_join(filter(summarise(@param0, n = n(), orgName), n > 1), @param0)
[     3.290][cube-solver-4][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     3.430][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i013.csv", col_types = cols(orgName = col_character(),id = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o013.csv", col_types = cols(orgName = col_character(),n = col_integer(),id = col_integer()))

df2 <- input1 %>% group_by(orgName) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 1)
df4 <- left_join(df3, input1)
out <- df4 %>% select(orgName, n, id) %>% arrange(orgName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT orgName,
       n,
       id
FROM
  (SELECT LHS.orgName AS orgName,
          LHS.n AS n,
          RHS.id AS id
   FROM
     (SELECT *
      FROM
        (SELECT orgName,
                COUNT() AS n
         FROM input1
         GROUP BY orgName)
      WHERE (n > 1.0)) AS LHS
   LEFT JOIN input1 AS RHS ON (LHS.orgName = RHS.orgName))
ORDER BY orgName
