[     1.635][MainProcess][INFO] Parsing specification...
[     1.638][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.638][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.639][MainProcess][DEBUG] Reading input files...
[     1.647][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i048.csv: ['string', 'int64', 'string']
[     1.652][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o048.csv: ['string', 'int64', 'string']
[     1.678][MainProcess][DEBUG] Generating DSL...
[     1.851][MainProcess][INFO] Creating 8 processes
[     1.879][MainProcess][DEBUG] Increasing generator loc to 2
[     2.025][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.031][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     2.032][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     2.034][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     2.039][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     2.046][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     2.053][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.067][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     4.907][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.908][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     5.421][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     5.424][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     7.584][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     7.610][cube-solver-5][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join4())
[     7.626][cube-solver-5][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]))
[     7.642][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]))
[     7.643][cube-solver-5][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter())
[     7.656][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]))
[     7.660][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     7.673][cube-solver-6][DEBUG] Solving cube (l0 = summarise([3]), l1 = anti_join())
[     7.688][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = left_join())
[     7.690][cube-solver-7][DEBUG] Solving cube (l0 = summarise([3]), l1 = union())
[     7.728][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[     7.750][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     7.775][cube-solver-2][DEBUG] Solving cube (l0 = summarise([3]), l1 = intersect())
[     7.795][cube-solver-3][DEBUG] Solving cube (l0 = summarise([3]), l1 = semi_join())
[     8.944][cube-solver-5][DEBUG] Solving cube (l0 = summarise([3]), l1 = cross_join())
[     9.588][cube-solver-3][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = semi_join())
[     9.590][MainProcess][INFO] Statistics:
[     9.590][MainProcess][INFO] 	Generated cubes: 19
[     9.590][MainProcess][INFO] 	Attempted programs: 69
[     9.590][MainProcess][INFO] 		Rejected: 50
[     9.591][MainProcess][INFO] 		Failed: 18
[     9.591][MainProcess][INFO] 	Blacklist clauses: 3
[     9.591][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     9.591][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 48})
[     9.592][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     9.593][MainProcess][DEBUG] 	0: Counter({'summarise': 1005})
[     9.593][MainProcess][DEBUG] 	1: Counter({'union': 244, 'left_join': 240, 'semi_join': 193, 'anti_join': 152, 'filter': 120, 'cross_join': 57})
[     9.594][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, AddressID = min(AddressID), CName))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i048.csv", col_types = cols(CName = col_character(),AddressID = col_integer(),AddressLine = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o048.csv", col_types = cols(CName = col_character(),minAddressID = col_integer(),AddressLine = col_character()))

df2 <- input1 %>% group_by(CName) %>% summarise(AddressID = min(AddressID)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(CName, minAddressID = AddressID, AddressLine) %>% arrange(CName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT CName,
       AddressID AS minAddressID,
       AddressLine
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT CName,
                  MIN(AddressID) AS AddressID
           FROM input1
           GROUP BY CName) AS RHS
        WHERE (LHS.CName = RHS.CName
               AND LHS.AddressID = RHS.AddressID) ))
ORDER BY CName
