[     1.564][MainProcess][INFO] Parsing specification...
[     1.567][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.567][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.568][MainProcess][DEBUG] Reading input files...
[     1.580][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i045.csv: ['int64', 'int64', 'int64', 'datetime64[ns]']
[     1.585][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o045.csv: ['int64', 'int64']
[     1.617][MainProcess][DEBUG] Generating DSL...
[     1.650][MainProcess][INFO] Creating 8 processes
[     1.679][MainProcess][DEBUG] Increasing generator loc to 3
[     1.711][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.714][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.715][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.718][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.720][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.727][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.732][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.263][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.265][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.269][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.277][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.284][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.292][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.828][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.833][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.835][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.837][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.841][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.842][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.844][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.846][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.846][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.849][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.851][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.853][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.854][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.855][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.861][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.863][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.865][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.868][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = summarise())
[     3.452][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([4]), l2 = summarise())
[     3.460][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = filter([4]))
[     3.468][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter([4]))
[     3.475][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = anti_join())
[     3.607][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.699][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = left_join())
[     5.676][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     6.847][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = union())
[    13.391][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = intersect())
[    19.777][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = semi_join())
[    29.447][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = cross_join())
[    30.929][cube-solver-4][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter([5]), l2 = cross_join())
[    30.932][MainProcess][INFO] Statistics:
[    30.933][MainProcess][INFO] 	Generated cubes: 31
[    30.933][MainProcess][INFO] 	Attempted programs: 910
[    30.933][MainProcess][INFO] 		Rejected: 519
[    30.933][MainProcess][INFO] 		Failed: 390
[    30.933][MainProcess][INFO] 	Blacklist clauses: 5
[    30.933][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    30.936][MainProcess][DEBUG] 	0: Counter({'summarise': 440, 'mutate': 200})
[    30.937][MainProcess][DEBUG] 	1: Counter({'filter': 640})
[    30.937][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    30.954][MainProcess][DEBUG] 	0: Counter({'summarise': 27172})
[    30.961][MainProcess][DEBUG] 	1: Counter({'filter': 23172, 'natural_join': 4000})
[    30.968][MainProcess][DEBUG] 	2: Counter({'filter': 6200, 'natural_join3': 4359, 'left_join': 4091, 'natural_join': 3986, 'union': 3452, 'anti_join': 2618, 'semi_join': 1580, 'summarise': 680, 'cross_join': 207})
[    30.969][MainProcess][INFO] Solution found: cross_join(filter(summarise(@param0, n = n(), user_id), n > 1), filter(summarise(@param0, n = n(), user_id), n > 1), n <= n.other & n.other > n)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i045.csv", col_types = cols(user_id = col_integer(),account_no = col_integer(),zip = col_integer(),date = col_character()))
input1$date <- dmy(input1$date)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o045.csv", col_types = cols(user_id = col_integer(),n = col_integer()))

df2 <- input1 %>% group_by(user_id) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 1)
df4 <- full_join(df3 %>% mutate(tmp.col=1), df3 %>% mutate(tmp.col=1), by="tmp.col", suffix = c("", ".other")) %>% select(-tmp.col) %>% filter(n <= n.other & n.other > n)
out <- df4 %>% select(user_id, n = user_id.other) %>% arrange(user_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT user_id,
       user_id.other AS n
FROM
  (SELECT user_id,
          n,
          user_id.other,
          n.other
   FROM
     (SELECT LHS.user_id AS user_id,
             LHS.n AS n,
             COALESCE(LHS.tmp.col, RHS.tmp.col) AS tmp.col,
             RHS.user_id AS user_id.other,
             RHS.n AS n.other
      FROM
        (SELECT user_id,
                n,
                1.0 AS tmp.col
         FROM
           (SELECT user_id,
                   COUNT() AS n
            FROM input1
            GROUP BY user_id)
         WHERE (n > 1.0)) AS LHS
      FULL JOIN
        (SELECT user_id,
                n,
                1.0 AS tmp.col
         FROM
           (SELECT user_id,
                   COUNT() AS n
            FROM input1
            GROUP BY user_id)
         WHERE (n > 1.0)) AS RHS ON (LHS.tmp.col = RHS.tmp.col)))
WHERE (n <= n.other
       AND n.other > n)
ORDER BY user_id
