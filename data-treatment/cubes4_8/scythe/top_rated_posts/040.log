[     3.406][MainProcess][INFO] Parsing specification...
[     3.411][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.412][MainProcess][DEBUG] Reading input files...
[     3.422][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i040.csv: ['string', 'string']
[     3.429][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o040.csv: ['string', 'string', 'int64']
[     3.468][MainProcess][DEBUG] Generating DSL...
[     3.493][MainProcess][INFO] Creating 8 processes
[     3.534][MainProcess][DEBUG] Increasing generator loc to 2
[     3.538][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.543][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.548][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.553][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.554][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.560][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.566][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.570][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.656][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.663][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     3.720][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)
[     3.722][MainProcess][INFO] Statistics:
[     3.722][MainProcess][INFO] 	Generated cubes: 8
[     3.722][MainProcess][INFO] 	Attempted programs: 3
[     3.723][MainProcess][INFO] 		Rejected: 2
[     3.723][MainProcess][INFO] 		Failed: 0
[     3.723][MainProcess][INFO] 	Blacklist clauses: 0
[     3.723][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.724][MainProcess][DEBUG] 	0: Counter({'mutate': 6, 'summarise': 1})
[     3.724][MainProcess][INFO] Solution found: summarise(@param0, n = n(), group, subGroup)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i040.csv", col_types = cols(group = col_character(),subGroup = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o040.csv", col_types = cols(group = col_character(),subGroup = col_character(),n = col_integer()))

df2 <- input1 %>% group_by(group, subGroup) %>% summarise(n = n()) %>% ungroup()
out <- df2 %>% select(group, subGroup, n) %>% arrange(group)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT GROUP,
       subGroup,
       n
FROM
  (SELECT GROUP,
          subGroup,
          COUNT() AS n
   FROM input1
   GROUP BY GROUP,
            subGroup)
ORDER BY GROUP
