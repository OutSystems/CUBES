[     1.584][MainProcess][INFO] Parsing specification...
[     1.587][MainProcess][DEBUG] Reading input files...
[     1.594][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i050.csv: ['int64', 'int64', 'int64', 'int64']
[     1.599][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o050.csv: ['int64', 'int64', 'int64', 'int64', 'int64']
[     1.624][MainProcess][DEBUG] Generating DSL...
[     4.621][MainProcess][INFO] Creating 8 processes
[     4.658][MainProcess][DEBUG] Increasing generator loc to 2
[     7.706][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     7.708][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     7.712][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     7.746][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     7.773][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     7.784][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     7.791][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     7.791][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[   175.765][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[   179.848][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[   180.488][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[   191.167][cube-solver-1][DEBUG] Found solution with cube (l0 = mutate(),)
[   191.169][MainProcess][INFO] Statistics:
[   191.169][MainProcess][INFO] 	Generated cubes: 9
[   191.169][MainProcess][INFO] 	Attempted programs: 76
[   191.170][MainProcess][INFO] 		Rejected: 75
[   191.170][MainProcess][INFO] 		Failed: 0
[   191.170][MainProcess][INFO] 	Blacklist clauses: 0
[   191.170][MainProcess][DEBUG] Printing statistics for good programs of size 1
[   191.172][MainProcess][DEBUG] 	0: Counter({'mutate': 1201})
[   191.172][MainProcess][INFO] Solution found: mutate(@param0, pmin = pmin(Col1,Col2,Col3))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i050.csv", col_types = cols(ID = col_integer(),Col1 = col_integer(),Col2 = col_integer(),Col3 = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o050.csv", col_types = cols(ID = col_integer(),Col1 = col_integer(),Col2 = col_integer(),Col3 = col_integer(),TheMin = col_integer()))

df2 <- input1 %>% mutate(pmin = pmin(Col1,Col2,Col3))
out <- df2 %>% select(ID, Col1, Col2, Col3, TheMin = pmin) %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ID,
       Col1,
       Col2,
       Col3,
       MIN(Col1, Col2, Col3) AS TheMin
FROM input1
ORDER BY ID
