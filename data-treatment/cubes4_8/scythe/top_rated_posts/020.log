[     1.622][MainProcess][INFO] Parsing specification...
[     1.626][MainProcess][DEBUG] Reading input files...
[     1.634][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i020.csv: ['string', 'string']
[     1.639][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o020.csv: ['string', 'string', 'int64']
[     1.665][MainProcess][DEBUG] Generating DSL...
[     1.687][MainProcess][INFO] Creating 8 processes
[     1.734][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.734][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.735][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.739][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.746][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.753][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.754][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     2.040][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.042][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.043][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.045][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.045][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.046][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.047][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.048][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.049][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.051][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     2.051][cube-solver-5][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.054][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     2.066][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.068][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.069][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.074][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.079][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.094][cube-solver-3][DEBUG] Found solution with cube (l0 = summarise(), l1 = left_join())
[     2.096][MainProcess][INFO] Statistics:
[     2.096][MainProcess][INFO] 	Generated cubes: 17
[     2.096][MainProcess][INFO] 	Attempted programs: 1
[     2.096][MainProcess][INFO] 		Rejected: 0
[     2.097][MainProcess][INFO] 		Failed: 0
[     2.097][MainProcess][INFO] 	Blacklist clauses: 0
[     2.097][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.097][MainProcess][DEBUG] 	0: Counter({'summarise': 1})
[     2.097][MainProcess][DEBUG] 	1: Counter({'left_join': 1})
[     2.098][MainProcess][INFO] Solution found: left_join(@param0, summarise(@param0, str_countDESCRIPTION = str_count(DESCRIPTION, 'value'), DESCRIPTION, TITLE))
[     2.140][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())
[     2.149][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = mutate())
[     2.201][cube-solver-5][DEBUG] Found solution with cube (l0 = summarise(), l1 = semi_join())
[     2.352][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i020.csv", col_types = cols(TITLE = col_character(),DESCRIPTION = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o020.csv", col_types = cols(TITLE = col_character(),DESCRIPTION = col_character(),COUNT = col_integer()))

df2 <- input1 %>% group_by(DESCRIPTION, TITLE) %>% summarise(str_countDESCRIPTION = str_count(DESCRIPTION, 'value')) %>% ungroup()
df3 <- left_join(input1, df2)
out <- df3 %>% select(TITLE, DESCRIPTION, COUNT = str_countDESCRIPTION) %>% arrange(TITLE)

Failed to generate SQL query
