[     3.337][MainProcess][INFO] Parsing specification...
[     3.341][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.341][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.342][MainProcess][DEBUG] Reading input files...
[     3.352][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i012.csv: ['int64', 'int64', 'string', 'datetime64[ns]']
[     3.358][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o012.csv: ['int64', 'string', 'datetime64[ns]']
[     3.395][MainProcess][DEBUG] Generating DSL...
[     3.574][MainProcess][INFO] Creating 8 processes
[     3.605][MainProcess][DEBUG] Increasing generator loc to 2
[     3.767][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.774][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.774][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.787][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.788][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.795][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.795][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.809][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     6.492][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     6.508][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     7.148][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.328][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     9.218][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     9.223][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     9.242][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     9.246][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     9.251][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     9.262][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     9.267][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     9.271][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     9.354][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     9.354][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     9.355][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     9.395][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     9.398][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     9.450][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[    11.215][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[    12.247][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    12.626][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[    12.782][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[    12.977][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[    13.011][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[    13.025][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    13.038][cube-solver-1][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[    13.054][cube-solver-1][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[    13.069][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[    13.741][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[    14.455][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[    14.561][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[    15.120][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[    15.379][cube-solver-1][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[    15.468][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[    15.836][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[    16.134][cube-solver-1][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[    16.695][cube-solver-6][DEBUG] Solving cube (l0 = cross_join([4]), l1 = mutate())
[    24.718][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[    27.260][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[    27.291][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[    27.296][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    27.296][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    27.318][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[    28.036][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[    29.441][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[    30.570][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[    30.814][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[    32.846][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[    32.847][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[    33.538][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join([730]))
[    33.697][cube-solver-0][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise())
[    37.203][cube-solver-7][DEBUG] Found solution with cube (l0 = summarise(), l1 = inner_join())
[    37.205][MainProcess][INFO] Statistics:
[    37.206][MainProcess][INFO] 	Generated cubes: 49
[    37.207][MainProcess][INFO] 	Attempted programs: 757
[    37.207][MainProcess][INFO] 		Rejected: 327
[    37.207][MainProcess][INFO] 		Failed: 429
[    37.207][MainProcess][INFO] 	Blacklist clauses: 733
[    37.207][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    37.208][MainProcess][DEBUG] 	0: Counter({'mutate': 120, 'summarise': 72})
[    37.208][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    37.221][MainProcess][DEBUG] 	0: Counter({'summarise': 16912, 'mutate': 4441, 'cross_join': 2442, 'inner_join': 358, 'left_join': 192, 'union': 192, 'semi_join': 192})
[    37.229][MainProcess][DEBUG] 	1: Counter({'inner_join': 4016, 'cross_join': 3868, 'anti_join': 3245, 'left_join': 2832, 'union': 2832, 'natural_join': 2640, 'mutate': 2430, 'summarise': 1174, 'semi_join': 912, 'filter': 780})
[    37.229][MainProcess][INFO] Solution found: inner_join(summarise(@param0, maxDateCreated = max(DateCreated), DocumentID), @param0, 'DocumentID' = 'DocumentID','maxDateCreated' = 'DateCreated')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i012.csv", col_types = cols(ID = col_integer(),DocumentID = col_integer(),Status = col_character(),DateCreated = col_character()))
input1$DateCreated <- mdy(input1$DateCreated)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o012.csv", col_types = cols(DocumentID = col_integer(),Status = col_character(),DateCreated = col_character()))
expected_output$DateCreated <- mdy(expected_output$DateCreated)

df2 <- input1 %>% group_by(DocumentID) %>% summarise(maxDateCreated = max(DateCreated)) %>% ungroup()
df3 <- inner_join(df2, input1, by=c('DocumentID' = 'DocumentID','maxDateCreated' = 'DateCreated'), suffix = c('', '.other'))
out <- df3 %>% select(DocumentID, Status, DateCreated = maxDateCreated) %>% arrange(DocumentID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DocumentID,
       Status,
       maxDateCreated AS DateCreated
FROM
  (SELECT LHS.DocumentID AS DocumentID,
          LHS.maxDateCreated AS maxDateCreated,
          RHS.ID AS ID,
          RHS.Status AS Status
   FROM
     (SELECT DocumentID,
             MAX(DateCreated) AS maxDateCreated
      FROM input1
      GROUP BY DocumentID) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.DocumentID = RHS.DocumentID
                                AND LHS.maxDateCreated = RHS.DateCreated))
ORDER BY DocumentID
