[     3.640][MainProcess][INFO] Parsing specification...
[     3.646][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.647][MainProcess][DEBUG] Reading input files...
[     3.655][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i019.csv: ['int64', 'int64']
[     3.660][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o019.csv: ['int64', 'int64', 'int64']
[     3.699][MainProcess][DEBUG] Generating DSL...
[     3.734][MainProcess][INFO] Creating 8 processes
[     3.770][MainProcess][DEBUG] Increasing generator loc to 2
[     3.782][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.786][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.794][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.795][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.799][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.805][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.809][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.813][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.926][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.929][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.045][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     4.084][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     4.086][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.090][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     4.094][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     4.097][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     4.105][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     4.110][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     4.114][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     4.117][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     4.144][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     4.146][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     4.147][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     4.148][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     4.154][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     4.156][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     4.173][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise(), l1 = left_join())
[     4.174][MainProcess][INFO] Statistics:
[     4.175][MainProcess][INFO] 	Generated cubes: 18
[     4.175][MainProcess][INFO] 	Attempted programs: 6
[     4.175][MainProcess][INFO] 		Rejected: 5
[     4.175][MainProcess][INFO] 		Failed: 0
[     4.175][MainProcess][INFO] 	Blacklist clauses: 0
[     4.176][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     4.176][MainProcess][DEBUG] 	0: Counter({'mutate': 12, 'summarise': 12})
[     4.176][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     4.177][MainProcess][DEBUG] 	0: Counter({'summarise': 2})
[     4.177][MainProcess][DEBUG] 	1: Counter({'union': 1, 'left_join': 1})
[     4.177][MainProcess][INFO] Solution found: left_join(@param0, summarise(@param0, n = n(), age))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i019.csv", col_types = cols(id = col_integer(),age = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o019.csv", col_types = cols(id = col_integer(),age = col_integer(),n = col_integer()))

df2 <- input1 %>% group_by(age) %>% summarise(n = n()) %>% ungroup()
df3 <- left_join(input1, df2)
out <- df3 %>% select(id, age, n) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       age,
       n
FROM
  (SELECT LHS.id AS id,
          LHS.age AS age,
          RHS.n AS n
   FROM input1 AS LHS
   LEFT JOIN
     (SELECT age,
             COUNT() AS n
      FROM input1
      GROUP BY age) AS RHS ON (LHS.age = RHS.age))
ORDER BY id
