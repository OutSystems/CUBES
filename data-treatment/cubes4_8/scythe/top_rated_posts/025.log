[     1.576][MainProcess][INFO] Parsing specification...
[     1.579][MainProcess][DEBUG] Reading input files...
[     1.585][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i025.csv: ['int64', 'string']
[     1.590][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o025.csv: ['int64', 'string']
[     1.615][MainProcess][DEBUG] Generating DSL...
[     1.643][MainProcess][INFO] Creating 8 processes
[     1.671][MainProcess][DEBUG] Increasing generator loc to 3
[     1.692][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.697][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.697][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.702][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.703][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.711][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.715][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.716][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.135][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.141][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.144][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.146][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.147][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.151][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.546][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.549][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.552][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.554][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.557][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.559][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.562][cube-solver-4][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.564][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.578][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.585][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.586][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.588][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.589][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.590][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.591][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.597][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.604][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.611][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = summarise())
[     3.050][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter([3]))
[     3.053][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([3]), l2 = summarise())
[     3.056][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = filter([3]))
[     3.058][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = anti_join())
[     5.580][cube-solver-3][DEBUG] Found solution with cube (l0 = mutate(), l1 = filter())
[     5.582][MainProcess][INFO] Statistics:
[     5.582][MainProcess][INFO] 	Generated cubes: 26
[     5.582][MainProcess][INFO] 	Attempted programs: 41
[     5.583][MainProcess][INFO] 		Rejected: 40
[     5.583][MainProcess][INFO] 		Failed: 0
[     5.583][MainProcess][INFO] 	Blacklist clauses: 3
[     5.583][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     5.585][MainProcess][DEBUG] 	0: Counter({'mutate': 481, 'summarise': 435})
[     5.585][MainProcess][DEBUG] 	1: Counter({'filter': 917})
[     5.586][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     5.587][MainProcess][DEBUG] 	0: Counter({'summarise': 1792})
[     5.589][MainProcess][DEBUG] 	1: Counter({'filter': 1410, 'natural_join': 382})
[     5.590][MainProcess][DEBUG] 	2: Counter({'filter': 638, 'natural_join': 351, 'natural_join3': 324, 'summarise': 240, 'anti_join': 239})
[     5.590][MainProcess][INFO] Solution found: filter(mutate(@param0, row_number = row_number()), row_number >= 3 & row_number < 5)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i025.csv", col_types = cols(Id = col_integer(),Value = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o025.csv", col_types = cols(Id = col_integer(),Value = col_character()))

df2 <- input1 %>% mutate(row_number = row_number())
df3 <- df2 %>% filter(row_number >= 3 & row_number < 5)
out <- df3 %>% select(Id, Value) %>% arrange(Id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Id,
       Value
FROM
  (SELECT Id,
          Value,
          ROW_NUMBER() OVER () AS row_number
   FROM input1)
WHERE (row_number >= 3.0
       AND row_number < 5.0)
ORDER BY Id
