[     1.552][MainProcess][INFO] Parsing specification...
[     1.555][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.555][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.556][MainProcess][DEBUG] Reading input files...
[     1.563][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i006.csv: ['int64', 'string', 'string']
[     1.569][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o006.csv: ['int64', 'string', 'string']
[     1.594][MainProcess][DEBUG] Generating DSL...
[     1.750][MainProcess][INFO] Creating 8 processes
[     1.782][MainProcess][DEBUG] Increasing generator loc to 2
[     1.911][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.920][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.920][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.924][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.926][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.933][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.934][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.945][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     4.720][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     4.722][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     5.173][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     5.189][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.448][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]))
[     7.449][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     7.476][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]))
[     7.477][cube-solver-3][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join4())
[     7.478][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]))
[     7.483][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     7.493][cube-solver-3][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter())
[     7.495][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = anti_join())
[     7.507][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[     7.526][cube-solver-6][DEBUG] Solving cube (l0 = summarise([3]), l1 = left_join())
[     7.529][cube-solver-5][DEBUG] Solving cube (l0 = summarise([3]), l1 = union())
[     7.551][cube-solver-2][DEBUG] Solving cube (l0 = summarise([3]), l1 = intersect())
[     7.591][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     7.642][cube-solver-7][DEBUG] Solving cube (l0 = summarise([3]), l1 = semi_join())
[     7.965][cube-solver-7][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = semi_join())
[     7.967][MainProcess][INFO] Statistics:
[     7.967][MainProcess][INFO] 	Generated cubes: 18
[     7.967][MainProcess][INFO] 	Attempted programs: 18
[     7.968][MainProcess][INFO] 		Rejected: 14
[     7.968][MainProcess][INFO] 		Failed: 3
[     7.968][MainProcess][INFO] 	Blacklist clauses: 3
[     7.968][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     7.969][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 48})
[     7.969][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     7.969][MainProcess][DEBUG] 	0: Counter({'summarise': 204})
[     7.970][MainProcess][DEBUG] 	1: Counter({'anti_join': 48, 'union': 46, 'left_join': 46, 'filter': 39, 'semi_join': 25})
[     7.970][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, Id = max(Id), Name))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i006.csv", col_types = cols(Id = col_integer(),Name = col_character(),Other_Columns = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o006.csv", col_types = cols(Id = col_integer(),Name = col_character(),Other_Columns = col_character()))

df2 <- input1 %>% group_by(Name) %>% summarise(Id = max(Id)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(Id, Name, Other_Columns) %>% arrange(Id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Id,
       Name,
       Other_Columns
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT Name,
                  MAX(Id) AS Id
           FROM input1
           GROUP BY Name) AS RHS
        WHERE (LHS.Id = RHS.Id
               AND LHS.Name = RHS.Name) ))
ORDER BY Id
