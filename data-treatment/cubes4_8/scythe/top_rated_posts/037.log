[     1.593][MainProcess][INFO] Parsing specification...
[     1.596][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.596][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.596][MainProcess][DEBUG] Reading input files...
[     1.604][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i037.csv: ['int64', 'string', 'string']
[     1.610][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o037.csv: ['int64', 'string', 'string']
[     1.635][MainProcess][DEBUG] Generating DSL...
[     1.800][MainProcess][INFO] Creating 8 processes
[     1.838][MainProcess][DEBUG] Increasing generator loc to 2
[     1.969][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.972][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.980][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.990][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.990][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.000][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.004][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     2.018][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     4.668][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     4.844][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     5.103][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     5.328][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.393][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     7.403][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     7.421][cube-solver-5][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join4())
[     7.431][cube-solver-3][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]))
[     7.436][cube-solver-5][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter())
[     7.447][cube-solver-3][DEBUG] Solving cube (l0 = summarise([3]), l1 = anti_join())
[     7.472][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     7.500][cube-solver-7][DEBUG] Solving cube (l0 = summarise([3]), l1 = left_join())
[     7.590][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]))
[     7.605][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]))
[     7.610][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[     7.636][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = union())
[     7.653][cube-solver-6][DEBUG] Solving cube (l0 = summarise([3]), l1 = intersect())
[     7.660][cube-solver-2][DEBUG] Solving cube (l0 = summarise([3]), l1 = semi_join())
[     7.991][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = semi_join())
[     7.992][MainProcess][INFO] Statistics:
[     7.993][MainProcess][INFO] 	Generated cubes: 18
[     7.993][MainProcess][INFO] 	Attempted programs: 18
[     7.993][MainProcess][INFO] 		Rejected: 14
[     7.993][MainProcess][INFO] 		Failed: 3
[     7.993][MainProcess][INFO] 	Blacklist clauses: 3
[     7.993][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     7.994][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 48})
[     7.994][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     7.995][MainProcess][DEBUG] 	0: Counter({'summarise': 211})
[     7.995][MainProcess][DEBUG] 	1: Counter({'left_join': 56, 'anti_join': 50, 'filter': 46, 'union': 34, 'semi_join': 25})
[     7.995][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, c1 = min(c1), c2))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i037.csv", col_types = cols(c1 = col_integer(),c2 = col_character(),c3 = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o037.csv", col_types = cols(c1 = col_integer(),c2 = col_character(),c3 = col_character()))

df2 <- input1 %>% group_by(c2) %>% summarise(c1 = min(c1)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(c1, c2, c3) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT c1,
       c2,
       c3
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT c2,
                  MIN(c1) AS c1
           FROM input1
           GROUP BY c2) AS RHS
        WHERE (LHS.c1 = RHS.c1
               AND LHS.c2 = RHS.c2) ))
ORDER BY c1
