[     1.612][MainProcess][INFO] Parsing specification...
[     1.615][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.616][MainProcess][DEBUG] Reading input files...
[     1.623][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5-1.txt: ['string', 'string', 'string']
[     1.628][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5-2.txt: ['string', 'string']
[     1.632][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5.out: ['string']
[     1.660][MainProcess][DEBUG] Generating DSL...
[     1.684][MainProcess][INFO] Creating 4 processes
[     1.731][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.734][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.741][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.106][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.107][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.108][MainProcess][DEBUG] Increasing generator loc to 3
[     2.109][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.113][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.114][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.115][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.130][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.131][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.135][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.176][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.177][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.181][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.824][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.827][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.829][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.830][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.831][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.832][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.834][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.836][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.837][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.839][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.841][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.857][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.861][cube-solver-0][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join3(), l2 = filter())
[     2.877][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.913][cube-solver-3][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.915][MainProcess][INFO] Statistics:
[     2.916][MainProcess][INFO] 	Generated cubes: 18
[     2.916][MainProcess][INFO] 	Attempted programs: 2
[     2.916][MainProcess][INFO] 		Rejected: 0
[     2.916][MainProcess][INFO] 		Failed: 1
[     2.917][MainProcess][INFO] 	Blacklist clauses: 1
[     2.917][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.917][MainProcess][DEBUG] 	0: Counter({'summarise': 8, 'natural_join': 6})
[     2.918][MainProcess][DEBUG] 	1: Counter({'summarise': 6, 'natural_join': 5, 'natural_join3': 4})
[     2.918][MainProcess][DEBUG] 	2: Counter({'filter': 15})
[     2.918][MainProcess][INFO] Solution found: filter(natural_join(summarise(@param0, n = n(), F_key), @param1), n == max(n))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/5-1.txt", col_types = cols(C_name = col_character(),F_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/5-2.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/5.out", col_types = cols(F_name = col_character()))

df3 <- input1 %>% group_by(F_key) %>% summarise(n = n()) %>% ungroup()
df4 <- inner_join(df3, input2)
df5 <- df4 %>% filter(n == max(n))
out <- df5 %>% select(F_name) %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT F_name
FROM
  (SELECT F_key,
          n,
          F_name
   FROM
     (SELECT F_key,
             n,
             F_name,
             MAX(n) OVER () AS zzz3
      FROM
        (SELECT LHS.F_key AS F_key,
                LHS.n AS n,
                RHS.F_name AS F_name
         FROM
           (SELECT F_key,
                   COUNT() AS n
            FROM input1
            GROUP BY F_key) AS LHS
         INNER JOIN input2 AS RHS ON (LHS.F_key = RHS.F_key)))
   WHERE (n = zzz3))
ORDER BY F_name
