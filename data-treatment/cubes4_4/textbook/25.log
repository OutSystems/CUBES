[     3.368][MainProcess][INFO] Parsing specification...
[     3.374][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.374][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.374][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.375][MainProcess][DEBUG] Reading input files...
[     3.385][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     3.390][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     3.396][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/25.out: ['int64', 'int64']
[     3.438][MainProcess][DEBUG] Generating DSL...
[     4.503][MainProcess][INFO] Creating 4 processes
[     5.605][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     5.621][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     5.662][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     5.678][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[   128.037][cube-solver-1][WARNING] There is no solution for current loc (3).
[   128.039][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[   128.079][cube-solver-2][WARNING] There is no solution for current loc (3).
[   128.080][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[   128.163][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = summarise())
[   128.206][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = mutate())
[   128.268][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = summarise())
[   128.310][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = mutate())
[   128.372][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = summarise(), l2 = filter())
[   128.414][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = summarise())
[   128.476][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = mutate())
[   128.478][MainProcess][DEBUG] Increasing generator loc to 4
[   128.519][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = mutate(), l2 = filter())
[   128.579][cube-solver-1][DEBUG] Initialising process for 4 lines of code.
[   128.620][cube-solver-2][DEBUG] Initialising process for 4 lines of code.
[   130.495][cube-solver-3][WARNING] There is no solution for current loc (3).
[   130.496][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = mutate(), l2 = filter())
[   130.680][cube-solver-3][DEBUG] Initialising process for 4 lines of code.
[   131.056][cube-solver-0][WARNING] There is no solution for current loc (3).
[   131.057][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[   131.237][cube-solver-0][DEBUG] Initialising process for 4 lines of code.
[   254.088][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter(), l3 = mutate())
[   254.260][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = mutate(), l3 = filter())
[   267.785][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter(), l3 = summarise())
[   267.843][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise(), l3 = filter())
[   268.222][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise(), l3 = summarise())
[   268.375][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise(), l3 = mutate())
[   317.587][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate(), l3 = summarise())
[   360.246][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate(), l3 = mutate())
[   374.236][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise(), l3 = filter())
[   391.807][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join(), l1 = mutate(), l2 = summarise(), l3 = filter())
[   391.811][MainProcess][INFO] Statistics:
[   391.812][MainProcess][INFO] 	Generated cubes: 21
[   391.812][MainProcess][INFO] 	Attempted programs: 1050
[   391.812][MainProcess][INFO] 		Rejected: 668
[   391.813][MainProcess][INFO] 		Failed: 381
[   391.813][MainProcess][INFO] 	Blacklist clauses: 0
[   391.813][MainProcess][DEBUG] Printing statistics for good programs of size 4
[   391.831][MainProcess][DEBUG] 	0: Counter({'natural_join': 30705})
[   391.840][MainProcess][DEBUG] 	1: Counter({'summarise': 21101, 'filter': 9360, 'mutate': 245})
[   391.848][MainProcess][DEBUG] 	2: Counter({'mutate': 15456, 'filter': 10765, 'summarise': 4485})
[   391.856][MainProcess][DEBUG] 	3: Counter({'mutate': 16106, 'filter': 10581, 'summarise': 4020})
[   391.856][MainProcess][INFO] Solution found: filter(summarise(mutate(natural_join(@param1, @param0), crusingrange = max(crusingrange)), n = n(), crusingrange, eid), crusingrange == 3 | n > 3)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/25.out", col_types = cols(eid = col_integer(),maxcrusingrange = col_integer()))

df3 <- inner_join(input2, input1)
df4 <- df3 %>% mutate(crusingrange = max(crusingrange))
df5 <- df4 %>% group_by(crusingrange, eid) %>% summarise(n = n()) %>% ungroup()
df6 <- df5 %>% filter(crusingrange == 3 | n > 3)
out <- df6 %>% select(eid, maxcrusingrange = crusingrange) %>% arrange(eid)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT eid,
       crusingrange AS maxcrusingrange
FROM
  (SELECT crusingrange,
          eid,
          COUNT() AS n
   FROM
     (SELECT eid,
             aid,
             aname,
             MAX(crusingrange) OVER () AS crusingrange
      FROM
        (SELECT LHS.eid AS eid,
                LHS.aid AS aid,
                RHS.aname AS aname,
                RHS.crusingrange AS crusingrange
         FROM input2 AS LHS
         INNER JOIN input1 AS RHS ON (LHS.aid = RHS.aid)))
   GROUP BY crusingrange,
            eid)
WHERE (crusingrange = 3.0
       OR n > 3.0)
ORDER BY eid
