[     2.774][MainProcess][INFO] Parsing specification...
[     2.779][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     2.779][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     2.780][MainProcess][DEBUG] Reading input files...
[     2.788][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-1.txt: ['string', 'string']
[     2.792][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-2.txt: ['string', 'string']
[     2.797][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-3.txt: ['string', 'string']
[     2.800][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19.out: ['string']
[     2.833][MainProcess][DEBUG] Generating DSL...
[     2.855][MainProcess][INFO] Creating 4 processes
[     2.870][MainProcess][DEBUG] Increasing generator loc to 2
[     2.896][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     2.901][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.908][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.911][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.012][cube-solver-0][WARNING] There is no solution for current loc (1).
[     3.012][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     3.013][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.144][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     3.146][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     3.151][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     3.154][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     3.211][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([3]))
[     3.290][cube-solver-0][DEBUG] Solving cube (l0 = filter([3]), l1 = natural_join())
[     3.299][cube-solver-0][DEBUG] Solving cube (l0 = filter([3]), l1 = filter([3]))
[     3.307][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = anti_join())
[     3.311][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = left_join())
[     3.314][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = union())
[     3.317][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = intersect())
[     3.320][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = semi_join())
[     3.323][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = cross_join())
[     3.327][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = inner_join())
[     3.330][cube-solver-0][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([4]))
[     3.334][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([4]))
[     3.337][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = filter([4]))
[     3.341][cube-solver-0][DEBUG] Solving cube (l0 = intersect(), l1 = filter([4]))
[     3.344][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([4]))
[     3.347][cube-solver-0][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([4]))
[     3.351][cube-solver-0][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([4]))
[     3.354][MainProcess][DEBUG] Increasing generator loc to 3
[     3.355][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.738][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.779][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.828][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = natural_join())
[     4.193][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = natural_join3([2]))
[     4.279][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = natural_join4())
[     4.965][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = filter([4]))
[     4.975][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = anti_join())
[     5.402][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     5.863][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = left_join())
[     6.834][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = union())
[     7.353][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = intersect())
[     7.437][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = semi_join())
[     7.795][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = cross_join())
[     8.108][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = inner_join())
[     8.852][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([4]))
[     8.864][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = filter([4]))
[     9.756][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union(), l2 = filter([4]))
[    10.617][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = filter([4]))
[    10.686][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([4]))
[    11.053][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join(), l2 = filter([4]))
[    11.560][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join(), l2 = filter([4]))
[    11.707][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]), l2 = filter([4]))
[    12.587][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3([2]), l2 = filter([4]))
[    12.592][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join4(), l2 = filter([4]))
[    12.600][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = natural_join([2]))
[    13.522][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = natural_join3([2]))
[    15.216][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = natural_join4())
[    20.680][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = filter([4]))
[    21.503][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = anti_join())
[    24.134][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = left_join())
[    26.293][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = anti_join())
[    26.294][MainProcess][INFO] Statistics:
[    26.294][MainProcess][INFO] 	Generated cubes: 49
[    26.294][MainProcess][INFO] 	Attempted programs: 2217
[    26.295][MainProcess][INFO] 		Rejected: 730
[    26.295][MainProcess][INFO] 		Failed: 1486
[    26.295][MainProcess][INFO] 	Blacklist clauses: 8
[    26.295][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    26.296][MainProcess][DEBUG] 	0: Counter({'filter': 288, 'natural_join3': 64})
[    26.296][MainProcess][DEBUG] 	1: Counter({'natural_join4': 224, 'natural_join3': 64, 'filter': 64})
[    26.296][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    26.302][MainProcess][DEBUG] 	0: Counter({'natural_join': 4117, 'natural_join3': 3671})
[    26.308][MainProcess][DEBUG] 	1: Counter({'filter': 6233, 'inner_join': 1132, 'left_join': 128, 'union': 128, 'natural_join': 128, 'semi_join': 40})
[    26.310][MainProcess][DEBUG] 	2: Counter({'natural_join4': 1920, 'filter': 1685, 'natural_join3': 1344, 'inner_join': 1058, 'anti_join': 607, 'natural_join': 512, 'left_join': 457, 'union': 128, 'semi_join': 80})
[    26.310][MainProcess][INFO] Solution found: anti_join(natural_join3(@param1, @param0, @param2), filter(natural_join3(@param1, @param0, @param2), color != 'red'), 'S_name')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/19.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input2, input1) %>% inner_join(input3)
df5 <- df4 %>% filter(color != 'red')
df6 <- anti_join(df4, df5, by=c('S_name'))
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT *
   FROM
     (SELECT `LHS`.`P_id` AS `P_id`,
             `LHS`.`color` AS `color`,
             `LHS`.`S_key` AS `S_key`,
             `RHS`.`S_name` AS `S_name`
      FROM
        (SELECT `LHS`.`P_id` AS `P_id`,
                `LHS`.`color` AS `color`,
                `RHS`.`S_key` AS `S_key`
         FROM `input2` AS `LHS`
         INNER JOIN `input1` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
      INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT `LHS`.`P_id` AS `P_id`,
                     `LHS`.`color` AS `color`,
                     `LHS`.`S_key` AS `S_key`,
                     `RHS`.`S_name` AS `S_name`
              FROM
                (SELECT `LHS`.`P_id` AS `P_id`,
                        `LHS`.`color` AS `color`,
                        `RHS`.`S_key` AS `S_key`
                 FROM `input2` AS `LHS`
                 INNER JOIN `input1` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
              INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
           WHERE (`color` != 'red')) AS RHS
        WHERE (LHS.S_name = RHS.S_name) ))
ORDER BY S_name
