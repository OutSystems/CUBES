[     1.567][MainProcess][INFO] Parsing specification...
[     1.570][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.570][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.571][MainProcess][DEBUG] Reading input files...
[     1.578][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21-1.txt: ['string', 'string']
[     1.583][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21-2.txt: ['string', 'string']
[     1.588][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21-3.txt: ['string', 'string']
[     1.592][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21.out: ['string']
[     1.622][MainProcess][DEBUG] Generating DSL...
[     1.640][MainProcess][INFO] Creating 4 processes
[     1.654][MainProcess][DEBUG] Increasing generator loc to 2
[     1.683][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.686][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.687][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.690][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.819][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.820][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     1.823][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.941][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     1.959][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     1.959][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     1.962][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     1.964][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.160][cube-solver-0][DEBUG] Solving cube (l0 = filter([10]), l1 = natural_join())
[     2.167][cube-solver-0][DEBUG] Solving cube (l0 = filter([10]), l1 = filter([10]))
[     2.176][cube-solver-0][DEBUG] Solving cube (l0 = filter([10]), l1 = anti_join())
[     2.181][cube-solver-0][DEBUG] Solving cube (l0 = filter([10]), l1 = left_join())
[     2.185][cube-solver-0][DEBUG] Solving cube (l0 = filter([10]), l1 = union())
[     2.189][cube-solver-0][DEBUG] Solving cube (l0 = filter([10]), l1 = intersect())
[     2.194][cube-solver-0][DEBUG] Solving cube (l0 = filter([11]), l1 = semi_join())
[     2.198][cube-solver-0][DEBUG] Solving cube (l0 = filter([11]), l1 = cross_join())
[     2.202][cube-solver-0][DEBUG] Solving cube (l0 = filter([11]), l1 = inner_join())
[     2.207][cube-solver-0][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([11]))
[     2.211][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([11]))
[     2.216][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = filter([11]))
[     2.220][cube-solver-0][DEBUG] Solving cube (l0 = intersect(), l1 = filter([11]))
[     2.225][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([12]))
[     2.230][cube-solver-0][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([12]))
[     2.235][cube-solver-0][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([12]))
[     2.239][MainProcess][DEBUG] Increasing generator loc to 3
[     2.240][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.803][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join())
[     2.826][cube-solver-3][DEBUG] Found solution with cube (l0 = filter(), l1 = natural_join3())
[     2.827][MainProcess][INFO] Statistics:
[     2.827][MainProcess][INFO] 	Generated cubes: 23
[     2.827][MainProcess][INFO] 	Attempted programs: 48
[     2.827][MainProcess][INFO] 		Rejected: 11
[     2.827][MainProcess][INFO] 		Failed: 36
[     2.827][MainProcess][INFO] 	Blacklist clauses: 18
[     2.827][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.827][MainProcess][DEBUG] 	0: Counter({'filter': 148, 'natural_join3': 116})
[     2.827][MainProcess][DEBUG] 	1: Counter({'filter': 116, 'natural_join3': 92, 'natural_join4': 56})
[     2.828][MainProcess][INFO] Solution found: natural_join3(@param2, @param0, filter(@param1, color == 'red' | color == 'green'))
[     3.116][cube-solver-2][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter())
[     3.127][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/21.out", col_types = cols(S_name = col_character()))

df4 <- input2 %>% filter(color == 'red' | color == 'green')
df5 <- inner_join(input3, input1) %>% inner_join(df4)
out <- df5 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `S_name`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`S_name` AS `S_name`,
          `LHS`.`P_id` AS `P_id`,
          `RHS`.`color` AS `color`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`S_name` AS `S_name`,
             `RHS`.`P_id` AS `P_id`
      FROM `input3` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `input2`
      WHERE (`color` = 'red'
             OR `color` = 'green')) AS RHS ON (LHS.P_id = RHS.P_id))
ORDER BY S_name
