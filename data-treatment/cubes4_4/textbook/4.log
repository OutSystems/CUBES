[     3.366][MainProcess][INFO] Parsing specification...
[     3.371][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.371][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.372][MainProcess][DEBUG] Reading input files...
[     3.379][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/4-1.txt: ['string', 'string']
[     3.384][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/4-2.txt: ['string', 'string']
[     3.389][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/4-3.txt: ['string', 'string']
[     3.393][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/4.out: ['string']
[     3.427][MainProcess][DEBUG] Generating DSL...
[     3.456][MainProcess][INFO] Creating 4 processes
[     3.514][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.518][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.525][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.525][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.963][cube-solver-1][WARNING] There is no solution for current loc (2).
[     3.963][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.965][MainProcess][DEBUG] Increasing generator loc to 3
[     3.965][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.972][cube-solver-3][WARNING] There is no solution for current loc (2).
[     3.972][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     3.973][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.991][cube-solver-2][WARNING] There is no solution for current loc (2).
[     3.992][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.995][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.041][cube-solver-0][WARNING] There is no solution for current loc (2).
[     4.042][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     4.045][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.709][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     4.717][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     4.718][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     4.720][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     4.721][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     4.724][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     4.787][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     4.791][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     4.793][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     4.795][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     4.797][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     4.799][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     4.801][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3([1]), l2 = filter())
[     4.816][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     4.826][cube-solver-0][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join4(), l2 = filter())
[     4.833][cube-solver-0][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = filter())
[     4.837][cube-solver-0][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = natural_join())
[     4.842][cube-solver-0][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = natural_join3([1]))
[     6.158][cube-solver-3][DEBUG] Solving cube (l0 = summarise([18]), l1 = filter([8]), l2 = natural_join4())
[     7.589][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     7.590][MainProcess][INFO] Statistics:
[     7.591][MainProcess][INFO] 	Generated cubes: 23
[     7.591][MainProcess][INFO] 	Attempted programs: 131
[     7.591][MainProcess][INFO] 		Rejected: 84
[     7.591][MainProcess][INFO] 		Failed: 46
[     7.591][MainProcess][INFO] 	Blacklist clauses: 28
[     7.591][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     7.592][MainProcess][DEBUG] 	0: Counter({'natural_join3': 491, 'summarise': 430})
[     7.592][MainProcess][DEBUG] 	1: Counter({'summarise': 291, 'filter': 218, 'natural_join3': 212, 'mutate': 200})
[     7.593][MainProcess][DEBUG] 	2: Counter({'filter': 703, 'natural_join4': 160, 'natural_join3': 58})
[     7.593][MainProcess][INFO] Solution found: filter(summarise(natural_join3(@param1, @param0, @param2), n = n(), S_name, meets_at), n >= 2)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/4-1.txt", col_types = cols(C_name = col_character(),meets_at = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/4-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/4-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/4.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input2, input1) %>% inner_join(input3)
df5 <- df4 %>% group_by(S_name, meets_at) %>% summarise(n = n()) %>% ungroup()
df6 <- df5 %>% filter(n >= 2)
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT S_name,
          meets_at,
          COUNT() AS n
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.C_name AS C_name,
             LHS.meets_at AS meets_at,
             RHS.S_name AS S_name
      FROM
        (SELECT LHS.S_key AS S_key,
                LHS.C_name AS C_name,
                RHS.meets_at AS meets_at
         FROM input2 AS LHS
         INNER JOIN input1 AS RHS ON (LHS.C_name = RHS.C_name)) AS LHS
      INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
   GROUP BY S_name,
            meets_at)
WHERE (n >= 2.0)
ORDER BY S_name
