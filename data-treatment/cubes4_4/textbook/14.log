[     3.106][MainProcess][INFO] Parsing specification...
[     3.110][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.111][MainProcess][DEBUG] Reading input files...
[     3.119][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/14-1.txt: ['string', 'string']
[     3.124][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/14-2.txt: ['string', 'string']
[     3.129][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/14-3.txt: ['string', 'string']
[     3.133][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/14.out: ['string']
[     3.166][MainProcess][DEBUG] Generating DSL...
[     3.196][MainProcess][INFO] Creating 4 processes
[     3.245][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.251][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.256][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.264][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.645][cube-solver-0][WARNING] There is no solution for current loc (2).
[     3.646][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.648][MainProcess][DEBUG] Increasing generator loc to 3
[     3.649][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.653][cube-solver-2][WARNING] There is no solution for current loc (2).
[     3.653][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.658][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.678][cube-solver-1][WARNING] There is no solution for current loc (2).
[     3.678][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.680][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.691][cube-solver-3][WARNING] There is no solution for current loc (2).
[     3.692][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     3.695][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.391][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     4.399][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     4.406][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     4.409][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     4.411][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     4.413][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     4.414][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     4.417][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     4.420][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     4.421][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     4.425][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     4.427][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     4.429][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3([1]), l2 = filter())
[     4.441][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     4.449][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     4.454][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     4.456][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     4.458][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3([1]))
[     4.837][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     4.838][MainProcess][INFO] Statistics:
[     4.838][MainProcess][INFO] 	Generated cubes: 22
[     4.838][MainProcess][INFO] 	Attempted programs: 17
[     4.839][MainProcess][INFO] 		Rejected: 7
[     4.839][MainProcess][INFO] 		Failed: 9
[     4.839][MainProcess][INFO] 	Blacklist clauses: 1
[     4.839][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     4.839][MainProcess][DEBUG] 	0: Counter({'natural_join3': 85, 'summarise': 37})
[     4.840][MainProcess][DEBUG] 	1: Counter({'mutate': 50, 'summarise': 35, 'natural_join3': 27, 'filter': 10})
[     4.840][MainProcess][DEBUG] 	2: Counter({'filter': 112, 'natural_join3': 10})
[     4.840][MainProcess][INFO] Solution found: filter(summarise(natural_join3(@param0, @param2, @param1), n = n(), S_key, S_name), n == max(n))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/14-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/14-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/14-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/14.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input1, input3) %>% inner_join(input2)
df5 <- df4 %>% group_by(S_key, S_name) %>% summarise(n = n()) %>% ungroup()
df6 <- df5 %>% filter(n == max(n))
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT S_key,
          S_name,
          n
   FROM
     (SELECT S_key,
             S_name,
             n,
             MAX(n) OVER () AS zzz4
      FROM
        (SELECT S_key,
                S_name,
                COUNT() AS n
         FROM
           (SELECT LHS.S_key AS S_key,
                   LHS.P_id AS P_id,
                   LHS.S_name AS S_name,
                   RHS.color AS color
            FROM
              (SELECT LHS.S_key AS S_key,
                      LHS.P_id AS P_id,
                      RHS.S_name AS S_name
               FROM input1 AS LHS
               INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
            INNER JOIN input2 AS RHS ON (LHS.P_id = RHS.P_id))
         GROUP BY S_key,
                  S_name))
   WHERE (n = zzz4))
ORDER BY S_name
