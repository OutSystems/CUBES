[     1.587][MainProcess][INFO] Parsing specification...
[     1.590][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.590][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.590][MainProcess][DEBUG] Reading input files...
[     1.597][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i006.csv: ['int64', 'string', 'string']
[     1.603][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o006.csv: ['int64', 'string', 'string']
[     1.628][MainProcess][DEBUG] Generating DSL...
[     1.785][MainProcess][INFO] Creating 4 processes
[     1.799][MainProcess][DEBUG] Increasing generator loc to 2
[     1.934][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.940][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.944][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.951][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     4.452][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     4.504][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.864][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     4.961][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     6.931][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     6.956][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]))
[     6.971][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     6.973][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[     6.985][cube-solver-3][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join())
[     7.018][cube-solver-2][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join3())
[     7.043][cube-solver-2][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join4())
[     7.062][cube-solver-2][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]))
[     7.084][cube-solver-2][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter())
[     8.235][cube-solver-2][DEBUG] Solving cube (l0 = summarise([3]), l1 = anti_join())
[     8.245][cube-solver-3][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = natural_join())
[     8.246][MainProcess][INFO] Statistics:
[     8.246][MainProcess][INFO] 	Generated cubes: 14
[     8.247][MainProcess][INFO] 	Attempted programs: 49
[     8.247][MainProcess][INFO] 		Rejected: 30
[     8.247][MainProcess][INFO] 		Failed: 18
[     8.247][MainProcess][INFO] 	Blacklist clauses: 3
[     8.247][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     8.248][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 48})
[     8.248][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     8.248][MainProcess][DEBUG] 	0: Counter({'summarise': 317})
[     8.249][MainProcess][DEBUG] 	1: Counter({'natural_join': 197, 'filter': 120})
[     8.249][MainProcess][INFO] Solution found: natural_join(summarise(@param0, Id = max(Id), Name), @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i006.csv", col_types = cols(Id = col_integer(),Name = col_character(),Other_Columns = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o006.csv", col_types = cols(Id = col_integer(),Name = col_character(),Other_Columns = col_character()))

df2 <- input1 %>% group_by(Name) %>% summarise(Id = max(Id)) %>% ungroup()
df3 <- inner_join(df2, input1)
out <- df3 %>% select(Id, Name, Other_Columns) %>% arrange(Id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Id,
       Name,
       Other_Columns
FROM
  (SELECT LHS.Name AS Name,
          LHS.Id AS Id,
          RHS.Other_Columns AS Other_Columns
   FROM
     (SELECT Name,
             MAX(Id) AS Id
      FROM input1
      GROUP BY Name) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.Name = RHS.Name
                                AND LHS.Id = RHS.Id))
ORDER BY Id
