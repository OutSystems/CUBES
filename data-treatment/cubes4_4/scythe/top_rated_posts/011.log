[     1.585][MainProcess][INFO] Parsing specification...
[     1.588][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.588][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.589][MainProcess][DEBUG] Reading input files...
[     1.596][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i011_1.csv: ['int64', 'string']
[     1.600][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i011_2.csv: ['int64', 'int64', 'string']
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o011.csv: ['int64', 'string', 'string']
[     1.633][MainProcess][DEBUG] Generating DSL...
[     1.678][MainProcess][INFO] Creating 4 processes
[     1.696][MainProcess][DEBUG] Increasing generator loc to 2
[     1.740][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.743][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.745][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.748][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.123][cube-solver-1][WARNING] There is no solution for current loc (1).
[     2.124][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.126][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.187][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.188][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.192][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.541][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.557][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.984][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.992][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.996][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     3.000][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     3.112][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     3.117][cube-solver-0][DEBUG] Solving cube (l0 = summarise([7]), l1 = natural_join3())
[     3.204][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())
[     3.205][MainProcess][INFO] Statistics:
[     3.205][MainProcess][INFO] 	Generated cubes: 10
[     3.206][MainProcess][INFO] 	Attempted programs: 17
[     3.206][MainProcess][INFO] 		Rejected: 0
[     3.206][MainProcess][INFO] 		Failed: 16
[     3.206][MainProcess][INFO] 	Blacklist clauses: 7
[     3.206][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.207][MainProcess][DEBUG] 	0: Counter({'natural_join': 174, 'summarise': 4})
[     3.207][MainProcess][DEBUG] 	1: Counter({'mutate': 97, 'summarise': 77, 'natural_join3': 3, 'natural_join': 1})
[     3.207][MainProcess][INFO] Solution found: natural_join(@param0, summarise(@param1, concatCity = string_agg(City, ', '), VehicleID))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i011_1.csv", col_types = cols(VehicleID = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i011_2.csv", col_types = cols(LocationID = col_integer(),VehicleID = col_integer(),City = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o011.csv", col_types = cols(VehicleID = col_integer(),Name = col_character(),concatCity = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df3 <- input2 %>% group_by(VehicleID) %>% summarise(concatCity = string_agg(City, ', ')) %>% ungroup()
df4 <- inner_join(input1, df3)
out <- df4 %>% select(VehicleID, Name, concatCity) %>% arrange(VehicleID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `VehicleID`,
       `Name`,
       `concatCity`
FROM
  (SELECT `LHS`.`VehicleID` AS `VehicleID`,
          `LHS`.`Name` AS `Name`,
          `RHS`.`concatCity` AS `concatCity`
   FROM `input1` AS `LHS`
   INNER JOIN
     (SELECT `VehicleID`,
             string_agg(`City`, ', ') AS concatCity
      FROM input2
      GROUP BY VehicleID) AS RHS ON (LHS.VehicleID = RHS.VehicleID))
ORDER BY VehicleID
