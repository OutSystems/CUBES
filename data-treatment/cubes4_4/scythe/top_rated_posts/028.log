[     1.618][MainProcess][INFO] Parsing specification...
[     1.621][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.621][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.622][MainProcess][DEBUG] Reading input files...
[     1.628][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i028_1.csv: ['string']
[     1.633][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i028_2.csv: ['string', 'int64', 'string']
[     1.638][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o028.csv: ['string', 'string']
[     1.666][MainProcess][DEBUG] Generating DSL...
[     1.701][MainProcess][INFO] Creating 4 processes
[     1.715][MainProcess][DEBUG] Increasing generator loc to 2
[     1.758][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.761][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.763][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.768][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.110][cube-solver-1][WARNING] There is no solution for current loc (1).
[     2.110][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.112][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.112][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.113][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.117][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.647][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.672][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.857][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.864][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.868][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.871][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.914][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.920][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.948][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())
[     2.950][MainProcess][INFO] Statistics:
[     2.950][MainProcess][INFO] 	Generated cubes: 10
[     2.950][MainProcess][INFO] 	Attempted programs: 2
[     2.950][MainProcess][INFO] 		Rejected: 0
[     2.950][MainProcess][INFO] 		Failed: 1
[     2.950][MainProcess][INFO] 	Blacklist clauses: 0
[     2.951][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.951][MainProcess][DEBUG] 	0: Counter({'natural_join': 64, 'summarise': 1})
[     2.951][MainProcess][DEBUG] 	1: Counter({'mutate': 35, 'summarise': 29, 'natural_join': 1})
[     2.951][MainProcess][INFO] Solution found: natural_join(@param0, summarise(@param1, concatDesc = string_agg(Desc, ' '), PID))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i028_1.csv", col_types = cols(PID = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i028_2.csv", col_types = cols(PID = col_character(),SEQ = col_integer(),Desc = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o028.csv", col_types = cols(PID = col_character(),concatDesc = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df3 <- input2 %>% group_by(PID) %>% summarise(concatDesc = string_agg(Desc, ' ')) %>% ungroup()
df4 <- inner_join(input1, df3)
out <- df4 %>% select(PID, concatDesc) %>% arrange(PID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `PID`,
       `concatDesc`
FROM
  (SELECT `LHS`.`PID` AS `PID`,
          `RHS`.`concatDesc` AS `concatDesc`
   FROM `input1` AS `LHS`
   INNER JOIN
     (SELECT `PID`,
             string_agg(`Desc`, ' ') AS concatDesc
      FROM input2
      GROUP BY PID) AS RHS ON (LHS.PID = RHS.PID))
ORDER BY PID
