[     1.671][MainProcess][INFO] Parsing specification...
[     1.674][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.674][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.674][MainProcess][DEBUG] Reading input files...
[     1.683][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i037.csv: ['int64', 'string', 'string']
[     1.688][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o037.csv: ['int64', 'string', 'string']
[     1.713][MainProcess][DEBUG] Generating DSL...
[     1.876][MainProcess][INFO] Creating 4 processes
[     1.896][MainProcess][DEBUG] Increasing generator loc to 2
[     2.028][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.029][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     2.038][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.063][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     4.574][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     4.614][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.982][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     5.088][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.008][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     7.033][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]))
[     7.047][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     7.060][cube-solver-3][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join())
[     7.078][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[     7.117][cube-solver-2][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join3())
[     7.142][cube-solver-2][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join4())
[     7.162][cube-solver-2][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]))
[     7.183][cube-solver-2][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter())
[     8.285][cube-solver-2][DEBUG] Solving cube (l0 = summarise([3]), l1 = anti_join())
[     8.293][cube-solver-3][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = natural_join())
[     8.294][MainProcess][INFO] Statistics:
[     8.294][MainProcess][INFO] 	Generated cubes: 14
[     8.294][MainProcess][INFO] 	Attempted programs: 49
[     8.295][MainProcess][INFO] 		Rejected: 30
[     8.295][MainProcess][INFO] 		Failed: 18
[     8.295][MainProcess][INFO] 	Blacklist clauses: 3
[     8.295][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     8.295][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 48})
[     8.296][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     8.296][MainProcess][DEBUG] 	0: Counter({'summarise': 317})
[     8.296][MainProcess][DEBUG] 	1: Counter({'natural_join': 197, 'filter': 120})
[     8.297][MainProcess][INFO] Solution found: natural_join(summarise(@param0, c1 = min(c1), c2), @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i037.csv", col_types = cols(c1 = col_integer(),c2 = col_character(),c3 = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o037.csv", col_types = cols(c1 = col_integer(),c2 = col_character(),c3 = col_character()))

df2 <- input1 %>% group_by(c2) %>% summarise(c1 = min(c1)) %>% ungroup()
df3 <- inner_join(df2, input1)
out <- df3 %>% select(c1, c2, c3) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT c1,
       c2,
       c3
FROM
  (SELECT LHS.c2 AS c2,
          LHS.c1 AS c1,
          RHS.c3 AS c3
   FROM
     (SELECT c2,
             MIN(c1) AS c1
      FROM input1
      GROUP BY c2) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.c2 = RHS.c2
                                AND LHS.c1 = RHS.c1))
ORDER BY c1
