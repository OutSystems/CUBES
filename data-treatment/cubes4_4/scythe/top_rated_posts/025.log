[     1.585][MainProcess][INFO] Parsing specification...
[     1.588][MainProcess][DEBUG] Reading input files...
[     1.594][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i025.csv: ['int64', 'string']
[     1.599][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o025.csv: ['int64', 'string']
[     1.624][MainProcess][DEBUG] Generating DSL...
[     1.652][MainProcess][INFO] Creating 4 processes
[     1.700][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.703][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.706][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.115][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.116][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.117][MainProcess][DEBUG] Increasing generator loc to 3
[     2.118][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.119][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.121][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.124][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.898][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.900][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.902][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.904][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.905][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.906][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.908][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.910][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.911][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.912][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.914][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.915][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.935][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.939][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.942][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.945][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.947][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     5.142][cube-solver-3][DEBUG] Found solution with cube (l0 = mutate(), l1 = filter())
[     5.143][MainProcess][INFO] Statistics:
[     5.144][MainProcess][INFO] 	Generated cubes: 21
[     5.144][MainProcess][INFO] 	Attempted programs: 41
[     5.144][MainProcess][INFO] 		Rejected: 40
[     5.144][MainProcess][INFO] 		Failed: 0
[     5.144][MainProcess][INFO] 	Blacklist clauses: 0
[     5.145][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     5.146][MainProcess][DEBUG] 	0: Counter({'mutate': 481, 'summarise': 409})
[     5.147][MainProcess][DEBUG] 	1: Counter({'filter': 891})
[     5.147][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     5.148][MainProcess][DEBUG] 	0: Counter({'summarise': 622})
[     5.148][MainProcess][DEBUG] 	1: Counter({'natural_join': 329, 'filter': 293})
[     5.149][MainProcess][DEBUG] 	2: Counter({'filter': 329, 'natural_join': 293})
[     5.149][MainProcess][INFO] Solution found: filter(mutate(@param0, row_number = row_number()), row_number >= 3 & row_number < 5)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i025.csv", col_types = cols(Id = col_integer(),Value = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o025.csv", col_types = cols(Id = col_integer(),Value = col_character()))

df2 <- input1 %>% mutate(row_number = row_number())
df3 <- df2 %>% filter(row_number >= 3 & row_number < 5)
out <- df3 %>% select(Id, Value) %>% arrange(Id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Id,
       Value
FROM
  (SELECT Id,
          Value,
          ROW_NUMBER() OVER () AS row_number
   FROM input1)
WHERE (row_number >= 3.0
       AND row_number < 5.0)
ORDER BY Id
