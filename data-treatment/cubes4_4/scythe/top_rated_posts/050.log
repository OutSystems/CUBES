[     1.625][MainProcess][INFO] Parsing specification...
[     1.628][MainProcess][DEBUG] Reading input files...
[     1.635][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i050.csv: ['int64', 'int64', 'int64', 'int64']
[     1.640][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o050.csv: ['int64', 'int64', 'int64', 'int64', 'int64']
[     1.666][MainProcess][DEBUG] Generating DSL...
[     4.529][MainProcess][INFO] Creating 4 processes
[     4.547][MainProcess][DEBUG] Increasing generator loc to 2
[     7.391][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     7.448][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     7.516][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     7.567][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[   148.909][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[   151.643][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[   155.450][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[   158.491][cube-solver-1][DEBUG] Found solution with cube (l0 = mutate(),)
[   158.493][MainProcess][INFO] Statistics:
[   158.493][MainProcess][INFO] 	Generated cubes: 5
[   158.493][MainProcess][INFO] 	Attempted programs: 76
[   158.494][MainProcess][INFO] 		Rejected: 75
[   158.494][MainProcess][INFO] 		Failed: 0
[   158.494][MainProcess][INFO] 	Blacklist clauses: 0
[   158.494][MainProcess][DEBUG] Printing statistics for good programs of size 1
[   158.495][MainProcess][DEBUG] 	0: Counter({'mutate': 1201})
[   158.496][MainProcess][INFO] Solution found: mutate(@param0, pmin = pmin(Col1,Col2,Col3))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i050.csv", col_types = cols(ID = col_integer(),Col1 = col_integer(),Col2 = col_integer(),Col3 = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o050.csv", col_types = cols(ID = col_integer(),Col1 = col_integer(),Col2 = col_integer(),Col3 = col_integer(),TheMin = col_integer()))

df2 <- input1 %>% mutate(pmin = pmin(Col1,Col2,Col3))
out <- df2 %>% select(ID, Col1, Col2, Col3, TheMin = pmin) %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ID,
       Col1,
       Col2,
       Col3,
       MIN(Col1, Col2, Col3) AS TheMin
FROM input1
ORDER BY ID
