[     3.308][MainProcess][INFO] Parsing specification...
[     3.312][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.312][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.313][MainProcess][DEBUG] Reading input files...
[     3.321][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i049.csv: ['int64', 'string']
[     3.326][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o049.csv: ['int64', 'string']
[     3.356][MainProcess][DEBUG] Generating DSL...
[     3.390][MainProcess][INFO] Creating 4 processes
[     3.408][MainProcess][DEBUG] Increasing generator loc to 2
[     3.447][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.453][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.461][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.464][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.755][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.780][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     3.891][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)
[     3.892][MainProcess][INFO] Statistics:
[     3.892][MainProcess][INFO] 	Generated cubes: 4
[     3.892][MainProcess][INFO] 	Attempted programs: 3
[     3.892][MainProcess][INFO] 		Rejected: 2
[     3.892][MainProcess][INFO] 		Failed: 0
[     3.892][MainProcess][INFO] 	Blacklist clauses: 0
[     3.893][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.893][MainProcess][DEBUG] 	0: Counter({'mutate': 13, 'summarise': 9})
[     3.893][MainProcess][INFO] Solution found: summarise(@param0, concatAlias = string_agg(Alias, ', '), UserId)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i049.csv", col_types = cols(UserId = col_integer(),Alias = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o049.csv", col_types = cols(UserId = col_integer(),concatAlias = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df2 <- input1 %>% group_by(UserId) %>% summarise(concatAlias = string_agg(Alias, ', ')) %>% ungroup()
out <- df2 %>% select(UserId, concatAlias) %>% arrange(UserId)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `UserId`,
       `concatAlias`
FROM
  (SELECT `UserId`,
          string_agg(`Alias`, ', ') AS concatAlias
   FROM input1
   GROUP BY UserId)
ORDER BY UserId
