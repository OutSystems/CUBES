[     1.671][MainProcess][INFO] Parsing specification...
[     1.674][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.674][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.675][MainProcess][DEBUG] Reading input files...
[     1.682][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i043.csv: ['string', 'string']
[     1.688][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o043.csv: ['string', 'string']
[     1.714][MainProcess][DEBUG] Generating DSL...
[     1.733][MainProcess][INFO] Creating 4 processes
[     1.772][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.776][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.779][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.787][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.976][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     1.978][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.979][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     1.981][MainProcess][DEBUG] Increasing generator loc to 3
[     1.982][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     1.983][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.021][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.363][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.365][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.367][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.368][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.370][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.371][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.372][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.373][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.374][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.375][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.375][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.377][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.378][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.379][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.381][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.383][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.386][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.468][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.713][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.856][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = natural_join3())
[     3.102][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = natural_join4())
[     3.105][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = summarise())
[     3.641][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     3.642][MainProcess][INFO] Statistics:
[     3.642][MainProcess][INFO] 	Generated cubes: 24
[     3.643][MainProcess][INFO] 	Attempted programs: 35
[     3.643][MainProcess][INFO] 		Rejected: 34
[     3.643][MainProcess][INFO] 		Failed: 0
[     3.643][MainProcess][INFO] 	Blacklist clauses: 3
[     3.643][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.644][MainProcess][DEBUG] 	0: Counter({'summarise': 100, 'mutate': 60})
[     3.644][MainProcess][DEBUG] 	1: Counter({'filter': 160})
[     3.644][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.645][MainProcess][DEBUG] 	0: Counter({'summarise': 499})
[     3.645][MainProcess][DEBUG] 	1: Counter({'filter': 322, 'natural_join': 177})
[     3.645][MainProcess][DEBUG] 	2: Counter({'filter': 177, 'natural_join': 155, 'natural_join3': 111, 'summarise': 56})
[     3.646][MainProcess][INFO] Solution found: filter(natural_join(summarise(@param0, n = n(), EmailAddress), @param0), n > 1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i043.csv", col_types = cols(CustomerName = col_character(),EmailAddress = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o043.csv", col_types = cols(CustomerName = col_character(),EmailAddress = col_character()))

df2 <- input1 %>% group_by(EmailAddress) %>% summarise(n = n()) %>% ungroup()
df3 <- inner_join(df2, input1)
df4 <- df3 %>% filter(n > 1)
out <- df4 %>% select(CustomerName, EmailAddress) %>% arrange(CustomerName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT CustomerName,
       EmailAddress
FROM
  (SELECT LHS.EmailAddress AS EmailAddress,
          LHS.n AS n,
          RHS.CustomerName AS CustomerName
   FROM
     (SELECT EmailAddress,
             COUNT() AS n
      FROM input1
      GROUP BY EmailAddress) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.EmailAddress = RHS.EmailAddress))
WHERE (n > 1.0)
ORDER BY CustomerName
