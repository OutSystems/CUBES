[     1.579][MainProcess][INFO] Parsing specification...
[     1.582][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.582][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.583][MainProcess][DEBUG] Reading input files...
[     1.589][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i013.csv: ['string', 'int64']
[     1.594][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o013.csv: ['string', 'int64', 'int64']
[     1.619][MainProcess][DEBUG] Generating DSL...
[     1.637][MainProcess][INFO] Creating 4 processes
[     1.674][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.678][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.678][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.682][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.891][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.896][MainProcess][DEBUG] Increasing generator loc to 3
[     1.897][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     1.900][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     1.901][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     1.903][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     1.909][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.317][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.319][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.320][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.321][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.323][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.323][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.324][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.326][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.326][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.328][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.328][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.329][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.329][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.330][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.331][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.333][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.334][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.348][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.512][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.760][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.816][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.817][MainProcess][INFO] Statistics:
[     2.818][MainProcess][INFO] 	Generated cubes: 23
[     2.818][MainProcess][INFO] 	Attempted programs: 26
[     2.818][MainProcess][INFO] 		Rejected: 25
[     2.818][MainProcess][INFO] 		Failed: 0
[     2.818][MainProcess][INFO] 	Blacklist clauses: 0
[     2.818][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.819][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 60})
[     2.819][MainProcess][DEBUG] 	1: Counter({'filter': 120})
[     2.819][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.819][MainProcess][DEBUG] 	0: Counter({'summarise': 126})
[     2.819][MainProcess][DEBUG] 	1: Counter({'filter': 65, 'natural_join': 61})
[     2.820][MainProcess][DEBUG] 	2: Counter({'filter': 61, 'natural_join': 60, 'natural_join3': 5})
[     2.820][MainProcess][INFO] Solution found: filter(natural_join(summarise(@param0, n = n(), orgName), @param0), n > 1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i013.csv", col_types = cols(orgName = col_character(),id = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o013.csv", col_types = cols(orgName = col_character(),n = col_integer(),id = col_integer()))

df2 <- input1 %>% group_by(orgName) %>% summarise(n = n()) %>% ungroup()
df3 <- inner_join(df2, input1)
df4 <- df3 %>% filter(n > 1)
out <- df4 %>% select(orgName, n, id) %>% arrange(orgName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT orgName,
       n,
       id
FROM
  (SELECT LHS.orgName AS orgName,
          LHS.n AS n,
          RHS.id AS id
   FROM
     (SELECT orgName,
             COUNT() AS n
      FROM input1
      GROUP BY orgName) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.orgName = RHS.orgName))
WHERE (n > 1.0)
ORDER BY orgName
