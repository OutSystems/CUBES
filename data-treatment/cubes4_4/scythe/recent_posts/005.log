[     1.629][MainProcess][INFO] Parsing specification...
[     1.632][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.632][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.632][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.633][MainProcess][DEBUG] Reading input files...
[     1.641][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/005.csv: ['int64', 'int64', 'int64', 'datetime64[ns]']
[     1.647][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/005_o.csv: ['int64', 'int64', 'int64', 'datetime64[ns]']
[     1.681][MainProcess][DEBUG] Generating DSL...
[     1.878][MainProcess][INFO] Creating 4 processes
[     2.072][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.084][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.089][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.102][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.777][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     7.785][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     7.815][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     7.884][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise([1]))
[     9.105][MainProcess][DEBUG] Increasing generator loc to 3
[     9.120][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    17.951][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    19.087][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([4]), l2 = filter())
[    19.123][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[    19.140][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[    19.156][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([4]), l2 = filter())
[    19.174][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise([4]))
[    19.194][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[    19.210][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[    19.226][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([4]), l2 = filter())
[    19.244][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([4]))
[    19.263][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[    19.280][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[    19.296][cube-solver-1][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join(), l2 = filter())
[    25.888][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    27.694][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise([4]))
[    27.760][cube-solver-2][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join4(), l2 = filter())
[    27.791][cube-solver-2][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]), l2 = filter())
[    27.843][cube-solver-2][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = natural_join())
[    35.854][cube-solver-0][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join3(), l2 = filter([1]))
[    35.927][cube-solver-0][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([1]), l2 = natural_join3())
[   143.488][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([4]), l1 = filter([1]), l2 = natural_join3())
[   143.491][MainProcess][INFO] Statistics:
[   143.492][MainProcess][INFO] 	Generated cubes: 22
[   143.492][MainProcess][INFO] 	Attempted programs: 1891
[   143.492][MainProcess][INFO] 		Rejected: 868
[   143.492][MainProcess][INFO] 		Failed: 1022
[   143.492][MainProcess][INFO] 	Blacklist clauses: 5
[   143.492][MainProcess][DEBUG] Printing statistics for good programs of size 2
[   143.513][MainProcess][DEBUG] 	0: Counter({'mutate': 21026, 'filter': 1440})
[   143.522][MainProcess][DEBUG] 	1: Counter({'filter': 21027, 'mutate': 1440})
[   143.522][MainProcess][DEBUG] Printing statistics for good programs of size 3
[   143.537][MainProcess][DEBUG] 	0: Counter({'summarise': 52185})
[   143.551][MainProcess][DEBUG] 	1: Counter({'filter': 33308, 'natural_join': 18878})
[   143.566][MainProcess][DEBUG] 	2: Counter({'filter': 18878, 'natural_join': 17275, 'natural_join3': 16033})
[   143.566][MainProcess][INFO] Solution found: natural_join3(@param0, summarise(@param0, event_id = max(event_id), event_time, prim_cid), filter(@param0, event_id == 17))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/005.csv", col_types = cols(g_event_id = col_integer(),prim_cid = col_integer(),event_id = col_integer(),event_time = col_character()))
input1$event_time <- dmy(input1$event_time)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/005_o.csv", col_types = cols(g_event_id = col_integer(),prim_cid = col_integer(),event_id = col_integer(),event_time = col_character()))
expected_output$event_time <- dmy(expected_output$event_time)

df2 <- input1 %>% group_by(event_time, prim_cid) %>% summarise(event_id = max(event_id)) %>% ungroup()
df3 <- input1 %>% filter(event_id == 17)
df4 <- inner_join(input1, df2) %>% inner_join(df3)
out <- df4 %>% select(g_event_id, prim_cid, event_id, event_time) %>% arrange(g_event_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT g_event_id,
       prim_cid,
       event_id,
       event_time
FROM
  (SELECT LHS.g_event_id AS g_event_id,
          LHS.prim_cid AS prim_cid,
          LHS.event_id AS event_id,
          LHS.event_time AS event_time
   FROM
     (SELECT LHS.g_event_id AS g_event_id,
             LHS.prim_cid AS prim_cid,
             LHS.event_id AS event_id,
             LHS.event_time AS event_time
      FROM input1 AS LHS
      INNER JOIN
        (SELECT event_time,
                prim_cid,
                MAX(event_id) AS event_id
         FROM input1
         GROUP BY event_time,
                  prim_cid) AS RHS ON (LHS.prim_cid = RHS.prim_cid
                                       AND LHS.event_id = RHS.event_id
                                       AND LHS.event_time = RHS.event_time)) AS LHS
   INNER JOIN
     (SELECT *
      FROM input1
      WHERE (event_id = 17.0)) AS RHS ON (LHS.g_event_id = RHS.g_event_id
                                          AND LHS.prim_cid = RHS.prim_cid
                                          AND LHS.event_id = RHS.event_id
                                          AND LHS.event_time = RHS.event_time))
ORDER BY g_event_id
