[     3.263][MainProcess][INFO] Parsing specification...
[     3.268][MainProcess][DEBUG] Reading input files...
[     3.276][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_1.csv: ['float64', 'int64']
[     3.281][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_2.csv: ['float64', 'int64']
[     3.287][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_o.csv: ['float64', 'int64', 'float64']
[     3.324][MainProcess][DEBUG] Generating DSL...
[     3.340][MainProcess][INFO] Creating 4 processes
[     3.383][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.385][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.391][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.393][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.445][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.445][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.447][cube-solver-1][DEBUG] Solving cube (l0 = left_join(),)
[     3.452][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.454][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.455][cube-solver-2][DEBUG] Solving cube (l0 = union(),)
[     3.571][cube-solver-3][DEBUG] Solving cube (l0 = intersect(),)
[     3.580][cube-solver-1][DEBUG] Found solution with cube (l0 = left_join(),)
[     3.581][MainProcess][INFO] Statistics:
[     3.582][MainProcess][INFO] 	Generated cubes: 7
[     3.582][MainProcess][INFO] 	Attempted programs: 16
[     3.582][MainProcess][INFO] 		Rejected: 5
[     3.582][MainProcess][INFO] 		Failed: 10
[     3.582][MainProcess][INFO] 	Blacklist clauses: 10
[     3.583][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.583][MainProcess][DEBUG] 	0: Counter({'natural_join': 13, 'left_join': 13, 'union': 10})
[     3.583][MainProcess][INFO] Solution found: left_join(@param1, @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/038_1.csv", col_types = cols(Date = col_double(),Sold = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/038_2.csv", col_types = cols(Date = col_double(),Tapped = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/038_o.csv", col_types = cols(Date = col_double(),Tapped = col_integer(),Sold = col_double()))

df3 <- left_join(input2, input1)
out <- df3 %>% select(Date, Tapped, Sold) %>% arrange(Date)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Date, Tapped,
             Sold
FROM
  (SELECT LHS.Date AS Date,
          LHS.Tapped AS Tapped,
          RHS.Sold AS Sold
   FROM input2 AS LHS
   LEFT JOIN input1 AS RHS ON (LHS.Date = RHS.Date))
ORDER BY Date
