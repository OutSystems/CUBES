[     3.264][MainProcess][INFO] Parsing specification...
[     3.270][MainProcess][DEBUG] Reading input files...
[     3.280][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/040.csv: ['int64', 'int64', 'string', 'string', 'string']
[     3.286][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/040_o.csv: ['int64', 'int64', 'string', 'string', 'string']
[     3.316][MainProcess][DEBUG] Generating DSL...
[     3.354][MainProcess][INFO] Creating 4 processes
[     3.408][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.411][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.428][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.429][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     4.014][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     4.018][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     4.021][MainProcess][DEBUG] Increasing generator loc to 3
[     4.022][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.113][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     4.121][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.125][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     4.688][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     5.235][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     5.242][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     5.245][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     5.249][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     5.251][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     5.253][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     5.256][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     5.258][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     5.260][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     5.263][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     5.265][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     5.387][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     5.392][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     5.395][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     5.397][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     5.399][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     5.916][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([2]), l2 = mutate())
[     5.921][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = natural_join3())
[    24.808][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[    24.811][MainProcess][INFO] Statistics:
[    24.813][MainProcess][INFO] 	Generated cubes: 22
[    24.813][MainProcess][INFO] 	Attempted programs: 78
[    24.813][MainProcess][INFO] 		Rejected: 77
[    24.813][MainProcess][INFO] 		Failed: 0
[    24.814][MainProcess][INFO] 	Blacklist clauses: 2
[    24.814][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    24.819][MainProcess][DEBUG] 	0: Counter({'mutate': 2926})
[    24.821][MainProcess][DEBUG] 	1: Counter({'filter': 2926})
[    24.821][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    24.823][MainProcess][DEBUG] 	0: Counter({'summarise': 8293})
[    24.825][MainProcess][DEBUG] 	1: Counter({'filter': 5412, 'natural_join': 2881})
[    24.828][MainProcess][DEBUG] 	2: Counter({'filter': 2881, 'natural_join': 2711, 'natural_join3': 2701})
[    24.828][MainProcess][INFO] Solution found: filter(natural_join(@param0, summarise(@param0, n_distinct = n_distinct(action), first_name, last_name)), n_distinct == 2)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/040.csv", col_types = cols(id = col_integer(),timestamp = col_integer(),first_name = col_character(),last_name = col_character(),action = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/040_o.csv", col_types = cols(id = col_integer(),timestamp = col_integer(),first_name = col_character(),last_name = col_character(),action = col_character()))

df2 <- input1 %>% group_by(first_name, last_name) %>% summarise(n_distinct = n_distinct(action)) %>% ungroup()
df3 <- inner_join(input1, df2)
df4 <- df3 %>% filter(n_distinct == 2)
out <- df4 %>% select(id, timestamp, first_name, last_name, action) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       TIMESTAMP,
       first_name,
       last_name,
       action
FROM
  (SELECT LHS.id AS id,
          LHS.timestamp AS TIMESTAMP,
          LHS.first_name AS first_name,
          LHS.last_name AS last_name,
          LHS.action AS action,
          RHS.n_distinct AS n_distinct
   FROM input1 AS LHS
   INNER JOIN
     (SELECT first_name,
             last_name,
             COUNT(DISTINCT action) AS n_distinct
      FROM input1
      GROUP BY first_name,
               last_name) AS RHS ON (LHS.first_name = RHS.first_name
                                     AND LHS.last_name = RHS.last_name))
WHERE (n_distinct = 2.0)
ORDER BY id
