[     3.091][MainProcess][INFO] Parsing specification...
[     3.095][MainProcess][DEBUG] Reading input files...
[     3.102][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_1.csv: ['int64', 'string']
[     3.106][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_2.csv: ['int64', 'string']
[     3.112][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_o.csv: ['int64', 'string', 'string', 'int64']
[     3.143][MainProcess][DEBUG] Generating DSL...
[     3.191][MainProcess][INFO] Creating 4 processes
[     3.274][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.275][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.280][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.283][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.919][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.922][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.923][cube-solver-1][DEBUG] Solving cube (l0 = left_join(),)
[     3.926][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.931][cube-solver-2][DEBUG] Solving cube (l0 = union(),)
[     3.945][cube-solver-1][DEBUG] Solving cube (l0 = intersect(),)
[     3.951][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.954][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(),)
[     3.977][cube-solver-2][DEBUG] Solving cube (l0 = cross_join(),)
[     3.986][cube-solver-0][DEBUG] Solving cube (l0 = inner_join(),)
[     4.042][MainProcess][DEBUG] Increasing generator loc to 2
[     4.043][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     4.122][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     4.223][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     5.285][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]))
[     5.298][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect([4]))
[     5.382][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     5.506][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     5.542][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     5.650][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join([23]))
[     5.654][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([37]))
[     5.838][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join())
[     5.925][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3())
[     5.929][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     5.933][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([10]))
[     5.943][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     5.947][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     5.951][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect([4]))
[     5.957][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     5.987][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([38]))
[     6.018][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([23]))
[     6.031][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     6.036][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     6.040][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     6.043][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([10]))
[     6.051][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     6.055][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     6.059][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect([4]))
[     6.065][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     6.102][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([38]))
[     6.140][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([23]))
[     6.158][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     6.163][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     6.167][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     6.172][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join())
[     6.376][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join3())
[     6.385][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join4())
[     6.395][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = anti_join([10]))
[     6.406][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = left_join())
[     6.660][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = union())
[     6.837][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = intersect([4]))
[     7.730][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = semi_join())
[     7.970][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = cross_join([62]))
[    42.170][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([10]), l1 = inner_join([23]))
[    44.916][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join())
[    45.034][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join3())
[    45.288][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join4())
[    45.369][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = anti_join([10]))
[    46.281][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = left_join())
[    46.442][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = union())
[    46.567][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = intersect([4]))
[    47.200][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = semi_join())
[    47.750][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = cross_join([678]))
[   132.130][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[   133.641][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = inner_join([23]))
[   167.900][cube-solver-0][DEBUG] Found solution with cube (l0 = left_join(), l1 = cross_join([678]))
[   167.910][MainProcess][INFO] Statistics:
[   167.911][MainProcess][INFO] 	Generated cubes: 60
[   167.911][MainProcess][INFO] 	Attempted programs: 3470
[   167.912][MainProcess][INFO] 		Rejected: 885
[   167.912][MainProcess][INFO] 		Failed: 2584
[   167.912][MainProcess][INFO] 	Blacklist clauses: 1256
[   167.912][MainProcess][DEBUG] Printing statistics for good programs of size 1
[   167.925][MainProcess][DEBUG] 	0: Counter({'cross_join': 17280})
[   167.925][MainProcess][DEBUG] Printing statistics for good programs of size 2
[   167.947][MainProcess][DEBUG] 	0: Counter({'natural_join': 31343, 'left_join': 24438, 'anti_join': 21482})
[   167.968][MainProcess][DEBUG] 	1: Counter({'cross_join': 66387, 'inner_join': 10877})
[   167.968][MainProcess][INFO] Solution found: cross_join(left_join(@param1, @param0), left_join(@param1, @param0), ID.other != ID & Name.other == Company_group)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/013_1.csv", col_types = cols(ID = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/013_2.csv", col_types = cols(ID = col_integer(),Company_group = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/013_o.csv", col_types = cols(ID = col_integer(),Name = col_character(),RootName = col_character(),RootId = col_integer()))

df3 <- left_join(input2, input1)
df4 <- full_join(df3 %>% mutate(tmp.col=1), df3 %>% mutate(tmp.col=1), by="tmp.col", suffix = c("", ".other")) %>% select(-tmp.col) %>% filter(ID.other != ID & Name.other == Company_group)
out <- df4 %>% select(ID, Name, RootName = Company_group, RootId = ID.other) %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ID,
       Name,
       Company_group AS RootName,
       ID.other AS RootId
FROM
  (SELECT ID,
          Company_group,
          Name,
          ID.other,
          Company_group.other,
          Name.other
   FROM
     (SELECT LHS.ID AS ID,
             LHS.Company_group AS Company_group,
             LHS.Name AS Name,
             COALESCE(LHS.tmp.col, RHS.tmp.col) AS tmp.col,
             RHS.ID AS ID.other,
             RHS.Company_group AS Company_group.other,
             RHS.Name AS Name.other
      FROM
        (SELECT ID,
                Company_group,
                Name,
                1.0 AS tmp.col
         FROM
           (SELECT LHS.ID AS ID,
                   LHS.Company_group AS Company_group,
                   RHS.Name AS Name
            FROM input2 AS LHS
            LEFT JOIN input1 AS RHS ON (LHS.ID = RHS.ID))) AS LHS
      FULL JOIN
        (SELECT ID,
                Company_group,
                Name,
                1.0 AS tmp.col
         FROM
           (SELECT LHS.ID AS ID,
                   LHS.Company_group AS Company_group,
                   RHS.Name AS Name
            FROM input2 AS LHS
            LEFT JOIN input1 AS RHS ON (LHS.ID = RHS.ID))) AS RHS ON (LHS.tmp.col = RHS.tmp.col)))
WHERE (ID.other != ID
       AND Name.other = Company_group)
ORDER BY ID
