[     3.433][MainProcess][INFO] Parsing specification...
[     3.437][MainProcess][DEBUG] Reading input files...
[     3.443][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/182.csv: ['int64', 'string']
[     3.447][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/182_o.csv: ['string']
[     3.476][MainProcess][DEBUG] Generating DSL...
[     3.499][MainProcess][INFO] Creating 4 processes
[     3.544][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.548][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.553][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.558][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.797][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.798][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.799][MainProcess][DEBUG] Increasing generator loc to 3
[     3.800][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.801][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     3.803][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.834][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.998][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[     4.001][MainProcess][INFO] Statistics:
[     4.001][MainProcess][INFO] 	Generated cubes: 6
[     4.001][MainProcess][INFO] 	Attempted programs: 4
[     4.001][MainProcess][INFO] 		Rejected: 3
[     4.001][MainProcess][INFO] 		Failed: 0
[     4.002][MainProcess][INFO] 	Blacklist clauses: 0
[     4.002][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     4.002][MainProcess][DEBUG] 	0: Counter({'mutate': 24, 'summarise': 15})
[     4.003][MainProcess][DEBUG] 	1: Counter({'filter': 39})
[     4.003][MainProcess][INFO] Solution found: filter(summarise(@param0, n = n(), Email), n > 1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/182.csv", col_types = cols(Id = col_integer(),Email = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/182_o.csv", col_types = cols(Email = col_character()))

df2 <- input1 %>% group_by(Email) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 1)
out <- df3 %>% select(Email) %>% arrange(Email)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Email
FROM
  (SELECT Email,
          COUNT() AS n
   FROM input1
   GROUP BY Email)
WHERE (n > 1.0)
ORDER BY Email
