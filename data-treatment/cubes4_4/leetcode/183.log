[     3.337][MainProcess][INFO] Parsing specification...
[     3.341][MainProcess][DEBUG] Reading input files...
[     3.349][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/183_1.csv: ['int64', 'string']
[     3.353][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/183_2.csv: ['int64', 'int64']
[     3.358][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/183_o.csv: ['string']
[     3.388][MainProcess][DEBUG] Generating DSL...
[     3.404][MainProcess][INFO] Creating 4 processes
[     3.447][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.452][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.458][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.461][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.507][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.513][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.514][cube-solver-1][DEBUG] Solving cube (l0 = left_join(),)
[     3.519][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.521][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.522][cube-solver-2][DEBUG] Solving cube (l0 = union(),)
[     3.620][cube-solver-0][DEBUG] Solving cube (l0 = intersect(),)
[     3.621][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(),)
[     3.651][cube-solver-2][DEBUG] Solving cube (l0 = cross_join(),)
[     3.663][cube-solver-2][DEBUG] Solving cube (l0 = inner_join(),)
[     3.682][MainProcess][DEBUG] Increasing generator loc to 2
[     3.683][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.751][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.791][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]))
[     3.791][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.799][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect([6]))
[     3.853][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     3.895][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     4.118][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     4.248][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     4.264][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([2]))
[     4.280][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join([22]))
[     4.335][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join())
[     4.537][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3())
[     4.540][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     4.544][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([10]))
[     4.553][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     4.555][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     4.556][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect([6]))
[     4.560][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     4.561][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     4.565][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([22]))
[     4.576][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     4.578][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     4.579][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     4.581][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([10]))
[     4.586][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     4.588][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     4.589][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect([6]))
[     4.593][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     4.595][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     4.598][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([22]))
[     4.619][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     4.620][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     4.622][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     4.623][cube-solver-1][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join())
[     4.624][cube-solver-2][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join3())
[     4.639][cube-solver-2][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join4())
[     4.644][cube-solver-2][DEBUG] Solving cube (l0 = anti_join([10]), l1 = anti_join([10]))
[     4.652][cube-solver-2][DEBUG] Solving cube (l0 = anti_join([10]), l1 = left_join())
[     4.725][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = union())
[     5.214][cube-solver-1][DEBUG] Solving cube (l0 = anti_join([10]), l1 = intersect([6]))
[     5.342][cube-solver-2][DEBUG] Solving cube (l0 = anti_join([10]), l1 = semi_join())
[     5.425][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = cross_join([2]))
[     5.567][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = inner_join([22]))
[     5.909][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join())
[     6.221][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join3())
[     6.381][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join4())
[     6.383][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = anti_join([10]))
[     7.209][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = left_join())
[     7.817][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = union())
[     8.117][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = intersect([6]))
[     8.373][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = semi_join())
[     8.823][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = cross_join([2]))
[     8.912][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = inner_join([22]))
[     9.002][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = natural_join())
[     9.260][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = natural_join3())
[     9.475][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = natural_join4())
[     9.477][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = anti_join([10]))
[    10.182][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = left_join())
[    10.721][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = union())
[    11.144][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = intersect([6]))
[    11.292][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = semi_join())
[    11.373][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = cross_join([2]))
[    11.495][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = inner_join([22]))
[    11.817][cube-solver-0][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join())
[    11.873][cube-solver-2][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join3())
[    12.076][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = natural_join4())
[    12.081][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = anti_join([10]))
[    12.893][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = left_join())
[    13.004][cube-solver-2][DEBUG] Solving cube (l0 = intersect([8]), l1 = union())
[    13.118][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = intersect([8]))
[    13.314][cube-solver-2][DEBUG] Solving cube (l0 = intersect([8]), l1 = semi_join())
[    13.483][cube-solver-2][DEBUG] Solving cube (l0 = intersect([8]), l1 = cross_join([2]))
[    13.561][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = inner_join([22]))
[    13.573][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join())
[    14.035][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join3())
[    15.035][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join4())
[    15.038][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = anti_join([10]))
[    15.139][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = left_join())
[    15.419][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = union())
[    15.607][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = intersect([8]))
[    15.935][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = semi_join())
[    16.271][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = cross_join([2]))
[    16.321][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = inner_join([22]))
[    16.330][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([2]), l1 = natural_join())
[    16.354][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([4]), l1 = natural_join3())
[    16.357][cube-solver-2][DEBUG] Solving cube (l0 = cross_join([4]), l1 = natural_join4())
[    16.357][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([4]), l1 = anti_join([10]))
[    16.359][cube-solver-2][DEBUG] Solving cube (l0 = cross_join([4]), l1 = left_join())
[    16.362][cube-solver-2][DEBUG] Solving cube (l0 = cross_join([4]), l1 = union())
[    16.363][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([4]), l1 = intersect([8]))
[    16.365][cube-solver-2][DEBUG] Solving cube (l0 = cross_join([4]), l1 = semi_join())
[    16.367][cube-solver-2][DEBUG] Solving cube (l0 = cross_join([4]), l1 = cross_join([4]))
[    16.369][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([4]), l1 = inner_join([22]))
[    16.372][cube-solver-2][DEBUG] Solving cube (l0 = inner_join([22]), l1 = natural_join())
[    16.380][cube-solver-1][DEBUG] Solving cube (l0 = inner_join([22]), l1 = natural_join3())
[    17.207][cube-solver-3][DEBUG] Solving cube (l0 = inner_join([33]), l1 = natural_join4())
[    17.226][cube-solver-3][DEBUG] Solving cube (l0 = inner_join([34]), l1 = anti_join([10]))
[    17.470][cube-solver-3][DEBUG] Found solution with cube (l0 = inner_join([34]), l1 = anti_join([10]))
[    17.471][MainProcess][INFO] Statistics:
[    17.471][MainProcess][INFO] 	Generated cubes: 104
[    17.472][MainProcess][INFO] 	Attempted programs: 2111
[    17.472][MainProcess][INFO] 		Rejected: 1048
[    17.472][MainProcess][INFO] 		Failed: 1062
[    17.472][MainProcess][INFO] 	Blacklist clauses: 56
[    17.472][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    17.473][MainProcess][DEBUG] 	0: Counter({'inner_join': 46, 'anti_join': 16, 'natural_join': 12, 'left_join': 12, 'union': 12, 'semi_join': 8})
[    17.473][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    17.478][MainProcess][DEBUG] 	0: Counter({'left_join': 1524, 'union': 1508, 'natural_join': 1008, 'anti_join': 996, 'semi_join': 649, 'inner_join': 343, 'intersect': 286})
[    17.482][MainProcess][DEBUG] 	1: Counter({'inner_join': 3244, 'natural_join3': 704, 'anti_join': 567, 'natural_join': 513, 'union': 436, 'left_join': 412, 'semi_join': 336, 'intersect': 104})
[    17.482][MainProcess][INFO] Solution found: anti_join(@param0, inner_join(@param1, @param0, 'CustomerId' = 'Id'), 'Name')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/183_1.csv", col_types = cols(Id = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/leetcode/tables/183_2.csv", col_types = cols(Id = col_integer(),CustomerId = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/leetcode/tables/183_o.csv", col_types = cols(Customers = col_character()))

df3 <- inner_join(input2, input1, by=c('CustomerId' = 'Id'), suffix = c('', '.other'))
df4 <- anti_join(input1, df3, by=c('Name'))
out <- df4 %>% select(Customers = Name) %>% arrange(Customers)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Name AS Customers
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT LHS.Id AS Id,
                  LHS.CustomerId AS CustomerId,
                  RHS.Name AS Name
           FROM input2 AS LHS
           INNER JOIN input1 AS RHS ON (LHS.CustomerId = RHS.Id)) AS RHS
        WHERE (LHS.Name = RHS.Name) ))
ORDER BY Customers
