[     3.031][MainProcess][INFO] Parsing specification...
[     3.035][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.035][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.037][MainProcess][DEBUG] Reading input files...
[     3.045][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-1.txt: ['string', 'string', 'int64']
[     3.051][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-3.txt: ['string', 'string']
[     3.056][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/53.out: ['string', 'string']
[     3.087][MainProcess][DEBUG] Generating DSL...
[     3.257][MainProcess][INFO] Creating 4 processes
[     3.278][MainProcess][DEBUG] Increasing generator loc to 2
[     3.419][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.448][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.450][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.457][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     6.051][cube-solver-0][WARNING] There is no solution for current loc (1).
[     6.052][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     6.060][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     6.094][cube-solver-1][WARNING] There is no solution for current loc (1).
[     6.094][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     6.101][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     8.692][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     8.710][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     9.584][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     9.600][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     9.614][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[    10.877][cube-solver-2][DEBUG] Solving cube (l0 = summarise([20]), l1 = natural_join3())
[    11.191][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([27]))
[    11.203][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise([20]), l1 = natural_join3())
[    11.204][MainProcess][INFO] Statistics:
[    11.205][MainProcess][INFO] 	Generated cubes: 10
[    11.205][MainProcess][INFO] 	Attempted programs: 49
[    11.205][MainProcess][INFO] 		Rejected: 37
[    11.205][MainProcess][INFO] 		Failed: 11
[    11.205][MainProcess][INFO] 	Blacklist clauses: 27
[    11.205][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    11.206][MainProcess][DEBUG] 	0: Counter({'natural_join': 400, 'summarise': 195})
[    11.207][MainProcess][DEBUG] 	1: Counter({'summarise': 272, 'natural_join': 151, 'mutate': 128, 'natural_join3': 45})
[    11.207][MainProcess][INFO] Solution found: natural_join3(summarise(@param0, cost = min(cost), P_id), @param0, @param1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/17-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/17-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/53.out", col_types = cols(P_id = col_character(),S_name = col_character()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = min(cost)) %>% ungroup()
df4 <- inner_join(df3, input1) %>% inner_join(input2)
out <- df4 %>% select(P_id, S_name) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_id,
       S_name
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.cost AS cost,
          LHS.S_key AS S_key,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.cost AS cost,
             RHS.S_key AS S_key
      FROM
        (SELECT P_id,
                MIN(cost) AS cost
         FROM input1
         GROUP BY P_id) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id
                                   AND LHS.cost = RHS.cost)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY P_id
