[     1.602][MainProcess][INFO] Parsing specification...
[     1.605][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.606][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.606][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.606][MainProcess][DEBUG] Reading input files...
[     1.613][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/15-1.txt: ['string', 'string']
[     1.618][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/15-2.txt: ['string', 'string']
[     1.623][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/15-3.txt: ['string', 'string']
[     1.627][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/15.out: ['string']
[     1.657][MainProcess][DEBUG] Generating DSL...
[     1.686][MainProcess][INFO] Creating 4 processes
[     1.738][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.741][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.744][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.749][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.245][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.246][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.249][MainProcess][DEBUG] Increasing generator loc to 3
[     2.251][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.253][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.254][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.255][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.262][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.263][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.264][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.265][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.265][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.269][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.255][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.258][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.262][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.268][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.270][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     3.273][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.273][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     3.276][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     3.281][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     3.283][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     3.284][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     3.286][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     3.289][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     3.291][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3([1]), l2 = filter())
[     3.297][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     3.301][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     3.305][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     3.310][cube-solver-0][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = natural_join3([1]))
[     5.632][cube-solver-2][DEBUG] Solving cube (l0 = summarise([17]), l1 = filter([16]), l2 = natural_join4())
[     5.720][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     5.722][MainProcess][INFO] Statistics:
[     5.723][MainProcess][INFO] 	Generated cubes: 23
[     5.723][MainProcess][INFO] 	Attempted programs: 208
[     5.723][MainProcess][INFO] 		Rejected: 53
[     5.723][MainProcess][INFO] 		Failed: 154
[     5.723][MainProcess][INFO] 	Blacklist clauses: 35
[     5.723][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     5.724][MainProcess][DEBUG] 	0: Counter({'natural_join3': 439, 'summarise': 208})
[     5.724][MainProcess][DEBUG] 	1: Counter({'mutate': 320, 'natural_join3': 198, 'summarise': 119, 'filter': 10})
[     5.725][MainProcess][DEBUG] 	2: Counter({'filter': 637, 'natural_join3': 10})
[     5.725][MainProcess][INFO] Solution found: filter(summarise(natural_join3(@param2, @param0, @param1), n = n(), S_name, color), color == 'red' & n == max(n))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/15-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/15-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/15-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/15.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input3, input1) %>% inner_join(input2)
df5 <- df4 %>% group_by(S_name, color) %>% summarise(n = n()) %>% ungroup()
df6 <- df5 %>% filter(color == 'red' & n == max(n))
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT `S_name`,
          `color`,
          `n`
   FROM
     (SELECT `S_name`,
             `color`,
             `n`,
             MAX(`n`) OVER () AS `zzz4`
      FROM
        (SELECT `S_name`,
                `color`,
                COUNT() AS `n`
         FROM
           (SELECT `LHS`.`S_key` AS `S_key`,
                   `LHS`.`S_name` AS `S_name`,
                   `LHS`.`P_id` AS `P_id`,
                   `RHS`.`color` AS `color`
            FROM
              (SELECT `LHS`.`S_key` AS `S_key`,
                      `LHS`.`S_name` AS `S_name`,
                      `RHS`.`P_id` AS `P_id`
               FROM `input3` AS `LHS`
               INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
            INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
         GROUP BY `S_name`,
                  `color`))
   WHERE (`color` = 'red'
          AND n = zzz4))
ORDER BY S_name
