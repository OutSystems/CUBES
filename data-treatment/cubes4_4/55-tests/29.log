[     1.605][MainProcess][INFO] Parsing specification...
[     1.608][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.608][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.609][MainProcess][DEBUG] Reading input files...
[     1.614][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.618][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/employees.txt: ['int64', 'string', 'int64']
[     1.621][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/certified.txt: ['int64', 'int64']
[     1.625][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/28.out: ['string']
[     1.654][MainProcess][DEBUG] Generating DSL...
[     1.687][MainProcess][INFO] Creating 4 processes
[     1.701][MainProcess][DEBUG] Increasing generator loc to 2
[     1.743][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.746][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.752][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.763][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.102][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.102][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     2.104][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.840][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.840][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     2.843][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     2.845][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.846][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     2.848][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     2.850][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     2.851][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     2.853][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     2.855][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = semi_join())
[     2.857][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     2.857][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.858][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = inner_join())
[     2.859][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     2.860][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = filter())
[     2.862][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = filter())
[     2.863][cube-solver-3][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.865][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.867][cube-solver-3][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     2.867][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.869][cube-solver-3][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     2.869][MainProcess][DEBUG] Increasing generator loc to 3
[     2.870][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.872][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.884][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.886][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     2.893][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.329][cube-solver-0][WARNING] There is no solution for current loc (2).
[     3.332][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     3.335][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.569][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = natural_join3())
[     4.586][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = anti_join())
[     4.612][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = natural_join4())
[     4.614][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = left_join())
[     4.619][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = union())
[     4.622][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = intersect())
[     4.626][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = cross_join())
[     4.627][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = semi_join())
[     4.633][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = inner_join())
[     4.637][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join(), l2 = filter())
[     4.641][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join(), l2 = filter())
[     4.646][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = union(), l2 = filter())
[     4.662][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect(), l2 = filter())
[     4.666][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join(), l2 = filter())
[     4.667][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join(), l2 = filter())
[     4.688][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join(), l2 = filter())
[     4.709][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join(), l2 = filter())
[     4.714][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3(), l2 = filter())
[     4.719][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4(), l2 = filter())
[     4.726][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = natural_join())
[     4.732][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = natural_join3())
[     4.736][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = natural_join4())
[     4.742][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = filter())
[     4.742][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = anti_join())
[     4.747][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = left_join())
[     4.751][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = union())
[     4.754][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = intersect())
[     4.757][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = semi_join())
[     4.761][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = cross_join())
[     4.765][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = inner_join())
[     4.769][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join(), l2 = filter())
[     4.789][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join(), l2 = filter())
[     4.794][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = union(), l2 = filter())
[     4.797][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = natural_join())
[     4.798][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect(), l2 = filter())
[     4.803][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join(), l2 = filter())
[     4.807][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join(), l2 = filter())
[     4.808][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join(), l2 = filter())
[     4.818][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join(), l2 = filter())
[     4.821][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3(), l2 = filter())
[     4.825][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4(), l2 = filter())
[     4.829][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = natural_join())
[     4.842][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = natural_join3())
[     4.847][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = natural_join4())
[     4.856][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = filter())
[     4.861][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = anti_join())
[     4.865][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = left_join())
[     4.869][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = union())
[     4.872][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = intersect())
[     4.876][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = semi_join())
[     4.880][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = cross_join())
[     4.883][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = inner_join())
[     4.887][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join(), l2 = filter())
[     4.891][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join(), l2 = filter())
[     4.894][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = union(), l2 = filter())
[     4.898][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join(), l2 = filter())
[     4.899][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect(), l2 = filter())
[     4.902][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join(), l2 = filter())
[     4.905][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join(), l2 = filter())
[     4.907][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join(), l2 = filter())
[     4.911][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3(), l2 = filter())
[     4.914][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4(), l2 = filter())
[     4.918][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = filter())
[     4.929][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = anti_join())
[     4.931][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = left_join())
[     4.934][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = union())
[     4.938][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = intersect())
[     4.939][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = semi_join())
[     4.942][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = cross_join())
[     4.945][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = inner_join())
[     4.948][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = natural_join())
[     4.952][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = natural_join3())
[     4.956][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = natural_join4())
[     4.959][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = filter())
[     4.969][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = anti_join())
[     4.988][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = left_join())
[     4.993][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = union())
[     4.997][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = intersect())
[     5.002][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = semi_join())
[     5.009][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = cross_join())
[     5.016][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = filter())
[     5.025][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = inner_join())
[     5.032][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = natural_join3())
[     5.035][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = natural_join())
[     5.038][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = natural_join4())
[     5.040][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4(), l2 = filter())
[     5.043][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4(), l2 = anti_join())
[     5.047][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4(), l2 = left_join())
[     5.055][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4(), l2 = union())
[     5.060][cube-solver-1][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join4(), l2 = intersect())
[     5.067][cube-solver-1][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join4(), l2 = semi_join())
[     5.073][cube-solver-1][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join4(), l2 = cross_join())
[     5.085][cube-solver-1][DEBUG] Solving cube (l0 = filter([4]), l1 = natural_join4(), l2 = inner_join())
[     5.093][cube-solver-1][DEBUG] Solving cube (l0 = filter([5]), l1 = natural_join4(), l2 = natural_join())
[     5.099][cube-solver-1][DEBUG] Solving cube (l0 = filter([6]), l1 = natural_join4(), l2 = natural_join3())
[     5.106][cube-solver-1][DEBUG] Solving cube (l0 = filter([7]), l1 = natural_join4(), l2 = natural_join4())
[     5.113][cube-solver-1][DEBUG] Solving cube (l0 = filter([8]), l1 = filter([8]), l2 = natural_join())
[     5.132][cube-solver-1][DEBUG] Solving cube (l0 = filter([8]), l1 = filter([8]), l2 = natural_join3())
[     7.291][cube-solver-3][DEBUG] Found solution with cube (l0 = filter(), l1 = natural_join3(), l2 = filter())
[     7.292][MainProcess][INFO] Statistics:
[     7.292][MainProcess][INFO] 	Generated cubes: 120
[     7.292][MainProcess][INFO] 	Attempted programs: 82
[     7.292][MainProcess][INFO] 		Rejected: 25
[     7.293][MainProcess][INFO] 		Failed: 56
[     7.293][MainProcess][INFO] 	Blacklist clauses: 8
[     7.293][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     7.294][MainProcess][DEBUG] 	0: Counter({'filter': 677, 'natural_join3': 404})
[     7.294][MainProcess][DEBUG] 	1: Counter({'filter': 536, 'natural_join3': 305, 'natural_join4': 240})
[     7.295][MainProcess][DEBUG] 	2: Counter({'filter': 949, 'natural_join3': 132})
[     7.295][MainProcess][INFO] Solution found: filter(natural_join3(@param2, @param0, filter(@param1, salary > 80000 | salary > 120000)), salary <= 80000 | salary < 100000)
[     7.669][cube-solver-0][DEBUG] Found solution with cube (l0 = filter(), l1 = natural_join4(), l2 = filter())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/employees.txt", col_types = cols(eid = col_integer(),ename = col_character(),salary = col_integer()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/28.out", col_types = cols(aname = col_character()))

df4 <- input2 %>% filter(salary > 80000 | salary > 120000)
df5 <- inner_join(input3, input1) %>% inner_join(df4)
df6 <- df5 %>% filter(salary <= 80000 | salary < 100000)
out <- df6 %>% select(aname) %>% arrange(aname)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT aname
FROM
  (SELECT LHS.eid AS eid,
          LHS.aid AS aid,
          LHS.aname AS aname,
          LHS.crusingrange AS crusingrange,
          RHS.ename AS ename,
          RHS.salary AS salary
   FROM
     (SELECT LHS.eid AS eid,
             LHS.aid AS aid,
             RHS.aname AS aname,
             RHS.crusingrange AS crusingrange
      FROM input3 AS LHS
      INNER JOIN input1 AS RHS ON (LHS.aid = RHS.aid)) AS LHS
   INNER JOIN
     (SELECT *
      FROM input2
      WHERE (salary > 80000.0
             OR salary > 120000.0)) AS RHS ON (LHS.eid = RHS.eid))
WHERE (salary <= 80000.0
       OR salary < 100000.0)
ORDER BY aname
