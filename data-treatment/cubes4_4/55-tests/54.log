[     1.609][MainProcess][INFO] Parsing specification...
[     1.612][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.612][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.613][MainProcess][DEBUG] Reading input files...
[     1.620][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.624][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/certified.txt: ['int64', 'int64']
[     1.628][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/54.out: ['int64']
[     1.655][MainProcess][DEBUG] Generating DSL...
[     1.687][MainProcess][INFO] Creating 4 processes
[     1.741][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.744][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.746][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.750][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.268][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.269][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.269][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.270][MainProcess][DEBUG] Increasing generator loc to 3
[     2.270][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.271][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.275][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.276][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.276][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.278][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.281][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.282][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.286][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.302][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.306][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.308][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     3.309][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.311][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     3.312][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.313][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     3.314][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     3.315][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     3.317][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     3.318][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     3.319][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     3.320][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     3.325][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     4.024][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join4(), l2 = filter())
[     4.035][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = summarise([6]), l2 = filter())
[     4.044][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = natural_join())
[     4.067][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     4.069][MainProcess][INFO] Statistics:
[     4.069][MainProcess][INFO] 	Generated cubes: 21
[     4.069][MainProcess][INFO] 	Attempted programs: 28
[     4.069][MainProcess][INFO] 		Rejected: 27
[     4.069][MainProcess][INFO] 		Failed: 0
[     4.070][MainProcess][INFO] 	Blacklist clauses: 6
[     4.070][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     4.070][MainProcess][DEBUG] 	0: Counter({'natural_join': 189, 'summarise': 184})
[     4.071][MainProcess][DEBUG] 	1: Counter({'mutate': 100, 'natural_join': 94, 'natural_join3': 90, 'summarise': 89})
[     4.071][MainProcess][DEBUG] 	2: Counter({'filter': 373})
[     4.071][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param1, @param0), n = n(), eid), n < 3)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/54.out", col_types = cols(eid = col_integer()))

df3 <- inner_join(input2, input1)
df4 <- df3 %>% group_by(eid) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(n < 3)
out <- df5 %>% select(eid) %>% arrange(eid)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT eid
FROM
  (SELECT eid,
          COUNT() AS n
   FROM
     (SELECT LHS.eid AS eid,
             LHS.aid AS aid,
             RHS.aname AS aname,
             RHS.crusingrange AS crusingrange
      FROM input2 AS LHS
      INNER JOIN input1 AS RHS ON (LHS.aid = RHS.aid))
   GROUP BY eid)
WHERE (n < 3.0)
ORDER BY eid
