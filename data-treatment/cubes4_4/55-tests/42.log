[     1.587][MainProcess][INFO] Parsing specification...
[     1.590][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.590][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.591][MainProcess][DEBUG] Reading input files...
[     1.598][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-1.txt: ['string', 'string', 'int64']
[     1.603][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-2.txt: ['string', 'string']
[     1.608][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/42.out: ['string', 'int64']
[     1.635][MainProcess][DEBUG] Generating DSL...
[     1.867][MainProcess][INFO] Creating 4 processes
[     2.140][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.150][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.152][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.171][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[    10.130][cube-solver-3][WARNING] There is no solution for current loc (2).
[    10.131][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[    10.132][MainProcess][DEBUG] Increasing generator loc to 3
[    10.151][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[    10.217][cube-solver-2][WARNING] There is no solution for current loc (2).
[    10.218][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    10.226][cube-solver-0][WARNING] There is no solution for current loc (2).
[    10.228][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[    10.253][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    10.262][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    10.266][cube-solver-1][WARNING] There is no solution for current loc (2).
[    10.267][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    10.287][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    24.296][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise())
[    24.343][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = summarise())
[    24.366][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = mutate())
[    24.401][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise())
[    24.427][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate())
[    24.453][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = summarise())
[    24.475][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = mutate())
[    24.501][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise())
[    24.526][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[    24.551][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = summarise())
[    24.587][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise())
[    24.780][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([2]), l2 = mutate())
[    25.107][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[    25.404][cube-solver-3][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = summarise())
[    25.405][MainProcess][INFO] Statistics:
[    25.406][MainProcess][INFO] 	Generated cubes: 17
[    25.406][MainProcess][INFO] 	Attempted programs: 41
[    25.406][MainProcess][INFO] 		Rejected: 1
[    25.406][MainProcess][INFO] 		Failed: 39
[    25.406][MainProcess][INFO] 	Blacklist clauses: 2
[    25.407][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    25.407][MainProcess][DEBUG] 	0: Counter({'natural_join': 187, 'summarise': 5})
[    25.408][MainProcess][DEBUG] 	1: Counter({'mutate': 116, 'summarise': 72, 'natural_join': 5})
[    25.408][MainProcess][DEBUG] 	2: Counter({'mutate': 100, 'summarise': 93})
[    25.408][MainProcess][INFO] Solution found: summarise(natural_join(@param1, summarise(@param0, meancost = mean(cost), P_id)), n = n(), S_name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/17-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/17-2.txt", col_types = cols(P_id = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/42.out", col_types = cols(S_name = col_character(),n = col_integer()))

df3 <- input1 %>% group_by(P_id) %>% summarise(meancost = mean(cost)) %>% ungroup()
df4 <- inner_join(input2, df3)
df5 <- df4 %>% group_by(S_name) %>% summarise(n = n()) %>% ungroup()
out <- df5 %>% select(S_name, n) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name,
       n
FROM
  (SELECT S_name,
          COUNT() AS n
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.S_name AS S_name,
             RHS.meancost AS meancost
      FROM input2 AS LHS
      INNER JOIN
        (SELECT P_id,
                AVG(cost) AS meancost
         FROM input1
         GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id))
   GROUP BY S_name)
ORDER BY S_name
