[     1.662][MainProcess][INFO] Parsing specification...
[     1.665][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.665][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.666][MainProcess][DEBUG] Reading input files...
[     1.672][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.674][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/certified.txt: ['int64', 'int64']
[     1.679][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/40.out: ['int64', 'string']
[     1.707][MainProcess][DEBUG] Generating DSL...
[     1.739][MainProcess][INFO] Creating 4 processes
[     1.796][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.800][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.804][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.804][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.311][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.312][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.315][MainProcess][DEBUG] Increasing generator loc to 3
[     2.316][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.336][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.336][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.338][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.346][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.346][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.348][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.370][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.371][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.376][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.343][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.370][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.374][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.376][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     3.378][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.379][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.380][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     3.382][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     3.383][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     3.384][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     3.385][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     3.386][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     3.387][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     3.446][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     5.910][cube-solver-0][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join4(), l2 = filter())
[     5.917][cube-solver-0][DEBUG] Solving cube (l0 = summarise([11]), l1 = summarise([11]), l2 = filter())
[     5.930][cube-solver-0][DEBUG] Solving cube (l0 = summarise([11]), l1 = filter(), l2 = natural_join())
[     9.452][cube-solver-2][DEBUG] Solving cube (l0 = summarise([11]), l1 = filter([9]), l2 = natural_join3())
[    12.147][cube-solver-1][DEBUG] Solving cube (l0 = summarise([11]), l1 = filter([10]), l2 = natural_join4())
[    12.169][cube-solver-1][DEBUG] Solving cube (l0 = summarise([11]), l1 = filter([10]), l2 = summarise([11]))
[    12.185][cube-solver-1][DEBUG] Solving cube (l0 = summarise([11]), l1 = filter([10]), l2 = filter([10]))
[    12.200][cube-solver-1][DEBUG] Solving cube (l0 = summarise([11]), l1 = filter([10]), l2 = anti_join())
[    13.200][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise([11]), l1 = filter([9]), l2 = natural_join3())
[    13.202][MainProcess][INFO] Statistics:
[    13.202][MainProcess][INFO] 	Generated cubes: 26
[    13.203][MainProcess][INFO] 	Attempted programs: 352
[    13.203][MainProcess][INFO] 		Rejected: 176
[    13.203][MainProcess][INFO] 		Failed: 175
[    13.203][MainProcess][INFO] 	Blacklist clauses: 21
[    13.203][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    13.208][MainProcess][DEBUG] 	0: Counter({'summarise': 4471, 'natural_join': 1280})
[    13.212][MainProcess][DEBUG] 	1: Counter({'filter': 1650, 'natural_join3': 1582, 'natural_join': 1240, 'summarise': 880, 'mutate': 400})
[    13.214][MainProcess][DEBUG] 	2: Counter({'filter': 4102, 'natural_join': 1036, 'natural_join3': 615})
[    13.215][MainProcess][INFO] Solution found: natural_join3(@param1, @param0, filter(summarise(@param1, n = n(), eid), n < 3))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/40.out", col_types = cols(eid = col_integer(),aname = col_character()))

df3 <- input2 %>% group_by(eid) %>% summarise(n = n()) %>% ungroup()
df4 <- df3 %>% filter(n < 3)
df5 <- inner_join(input2, input1) %>% inner_join(df4)
out <- df5 %>% select(eid, aname) %>% arrange(eid)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT eid,
       aname
FROM
  (SELECT LHS.eid AS eid,
          LHS.aid AS aid,
          LHS.aname AS aname,
          LHS.crusingrange AS crusingrange,
          RHS.n AS n
   FROM
     (SELECT LHS.eid AS eid,
             LHS.aid AS aid,
             RHS.aname AS aname,
             RHS.crusingrange AS crusingrange
      FROM input2 AS LHS
      INNER JOIN input1 AS RHS ON (LHS.aid = RHS.aid)) AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT eid,
                COUNT() AS n
         FROM input2
         GROUP BY eid)
      WHERE (n < 3.0)) AS RHS ON (LHS.eid = RHS.eid))
ORDER BY eid
