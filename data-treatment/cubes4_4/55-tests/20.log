[     1.679][MainProcess][INFO] Parsing specification...
[     1.682][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.682][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.683][MainProcess][DEBUG] Reading input files...
[     1.690][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.695][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.699][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.705][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/20.out: ['string', 'string', 'string', 'string']
[     1.733][MainProcess][DEBUG] Generating DSL...
[     1.751][MainProcess][INFO] Creating 4 processes
[     1.770][MainProcess][DEBUG] Increasing generator loc to 2
[     1.794][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.796][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.801][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.804][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.910][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.911][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     1.912][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.042][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     2.045][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     2.070][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]))
[     2.078][cube-solver-1][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join4())
[     2.117][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([3]))
[     2.151][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = natural_join())
[     2.155][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = filter([4]))
[     2.158][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = anti_join())
[     2.161][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = left_join())
[     2.164][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = union())
[     2.166][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = intersect())
[     2.169][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = semi_join())
[     2.171][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = cross_join())
[     2.172][cube-solver-2][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter([3]))
[     2.173][MainProcess][INFO] Statistics:
[     2.174][MainProcess][INFO] 	Generated cubes: 14
[     2.174][MainProcess][INFO] 	Attempted programs: 1
[     2.174][MainProcess][INFO] 		Rejected: 0
[     2.174][MainProcess][INFO] 		Failed: 0
[     2.174][MainProcess][INFO] 	Blacklist clauses: 4
[     2.174][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.175][MainProcess][DEBUG] 	0: Counter({'filter': 7, 'natural_join3': 3})
[     2.175][MainProcess][DEBUG] 	1: Counter({'natural_join3': 7, 'filter': 3})
[     2.175][MainProcess][INFO] Solution found: filter(natural_join3(@param0, @param1, @param2), color == 'red')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/20.out", col_types = cols(S_key = col_character(),P_id = col_character(),S_name = col_character(),color = col_character()))

df4 <- inner_join(input1, input2) %>% inner_join(input3)
df5 <- df4 %>% filter(color == 'red')
out <- df5 %>% select(S_key, P_id, S_name, color) %>% arrange(S_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_key`,
       `P_id`,
       `S_name`,
       `color`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`,
          `RHS`.`S_name` AS `S_name`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`P_id` AS `P_id`,
             `RHS`.`color` AS `color`
      FROM `input1` AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
   INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`color` = 'red')
ORDER BY S_key
