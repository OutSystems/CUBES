[     3.557][MainProcess][INFO] Parsing specification...
[     3.562][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.562][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.563][MainProcess][DEBUG] Reading input files...
[     3.573][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1-1.txt: ['string', 'string']
[     3.579][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1-2.txt: ['string', 'string']
[     3.585][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1-3.txt: ['string', 'string']
[     3.592][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1-4.txt: ['string', 'string', 'string']
[     3.597][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1.out: ['string']
[     3.645][MainProcess][DEBUG] Generating DSL...
[     3.701][MainProcess][INFO] Creating 4 processes
[     3.723][MainProcess][DEBUG] Increasing generator loc to 2
[     3.792][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.795][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.801][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.804][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     4.497][cube-solver-0][WARNING] There is no solution for current loc (1).
[     4.498][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     4.500][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     5.494][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     5.510][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     5.511][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     5.519][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     5.522][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     5.527][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     5.533][cube-solver-1][DEBUG] Solving cube (l0 = filter([1]), l1 = left_join())
[     5.539][cube-solver-1][DEBUG] Solving cube (l0 = filter([1]), l1 = union())
[     5.544][cube-solver-1][DEBUG] Solving cube (l0 = filter([2]), l1 = intersect())
[     5.547][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([2]))
[     5.550][cube-solver-1][DEBUG] Solving cube (l0 = filter([3]), l1 = semi_join())
[     5.556][cube-solver-1][DEBUG] Solving cube (l0 = filter([3]), l1 = cross_join())
[     5.564][cube-solver-1][DEBUG] Solving cube (l0 = filter([4]), l1 = inner_join())
[     5.572][cube-solver-1][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([5]))
[     5.579][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = filter([6]))
[     5.587][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = filter([7]))
[     5.595][cube-solver-1][DEBUG] Solving cube (l0 = intersect(), l1 = filter([7]))
[     5.603][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([8]))
[     5.612][cube-solver-1][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([9]))
[     5.621][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([10]))
[     5.632][MainProcess][DEBUG] Increasing generator loc to 3
[     5.635][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     6.147][cube-solver-0][DEBUG] Solving cube (l0 = filter([25]), l1 = natural_join())
[     6.164][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     6.573][cube-solver-3][DEBUG] Found solution with cube (l0 = natural_join4(), l1 = filter([2]))
[     6.574][MainProcess][INFO] Statistics:
[     6.575][MainProcess][INFO] 	Generated cubes: 24
[     6.575][MainProcess][INFO] 	Attempted programs: 20
[     6.575][MainProcess][INFO] 		Rejected: 10
[     6.575][MainProcess][INFO] 		Failed: 9
[     6.575][MainProcess][INFO] 	Blacklist clauses: 28
[     6.575][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     6.576][MainProcess][DEBUG] 	0: Counter({'natural_join4': 129})
[     6.576][MainProcess][DEBUG] 	1: Counter({'filter': 129})
[     6.577][MainProcess][INFO] Solution found: filter(natural_join4(@param1, @param0, @param2, @param3), F_name == 'faculty1' & level == 'JR')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/1-1.txt", col_types = cols(C_name = col_character(),F_key = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/1-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/1-3.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input3 <- copy_to(con, input3)
input4 <- read_csv("tests-examples/55-tests/tables/1-4.txt", col_types = cols(S_key = col_character(),S_name = col_character(),level = col_character()))
input4 <- copy_to(con, input4)
expected_output <- read_csv("tests-examples/55-tests/tables/1.out", col_types = cols(S_name = col_character()))

df5 <- inner_join(input2, input1) %>% inner_join(input3) %>% inner_join(input4)
df6 <- df5 %>% filter(F_name == 'faculty1' & level == 'JR')
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`C_name` AS `C_name`,
          `LHS`.`F_key` AS `F_key`,
          `LHS`.`F_name` AS `F_name`,
          `RHS`.`S_name` AS `S_name`,
          `RHS`.`level` AS `level`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`C_name` AS `C_name`,
             `LHS`.`F_key` AS `F_key`,
             `RHS`.`F_name` AS `F_name`
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`C_name` AS `C_name`,
                `RHS`.`F_key` AS `F_key`
         FROM `input2` AS `LHS`
         INNER JOIN `input1` AS `RHS` ON (`LHS`.`C_name` = `RHS`.`C_name`)) AS `LHS`
      INNER JOIN `input3` AS `RHS` ON (`LHS`.`F_key` = `RHS`.`F_key`)) AS `LHS`
   INNER JOIN `input4` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`F_name` = 'faculty1'
       AND `level` = 'JR')
ORDER BY S_name
