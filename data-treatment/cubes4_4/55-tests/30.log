[     1.617][MainProcess][INFO] Parsing specification...
[     1.620][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.620][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.620][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.621][MainProcess][DEBUG] Reading input files...
[     1.628][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.633][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.637][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.642][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/30.out: ['string', 'int64']
[     1.672][MainProcess][DEBUG] Generating DSL...
[     1.724][MainProcess][INFO] Creating 4 processes
[     1.799][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.803][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.804][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.808][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.732][cube-solver-2][WARNING] There is no solution for current loc (2).
[     3.734][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.736][cube-solver-1][WARNING] There is no solution for current loc (2).
[     3.737][MainProcess][DEBUG] Increasing generator loc to 3
[     3.738][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.740][cube-solver-3][WARNING] There is no solution for current loc (2).
[     3.740][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.740][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     3.741][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.742][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.809][cube-solver-0][WARNING] There is no solution for current loc (2).
[     3.811][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.814][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     6.396][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     6.398][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     6.411][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     6.411][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     6.427][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     6.455][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter(), l2 = mutate())
[     6.499][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     6.522][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = mutate(), l2 = filter())
[     6.716][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     6.717][MainProcess][INFO] Statistics:
[     6.717][MainProcess][INFO] 	Generated cubes: 12
[     6.718][MainProcess][INFO] 	Attempted programs: 12
[     6.718][MainProcess][INFO] 		Rejected: 2
[     6.718][MainProcess][INFO] 		Failed: 9
[     6.718][MainProcess][INFO] 	Blacklist clauses: 2
[     6.718][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     6.719][MainProcess][DEBUG] 	0: Counter({'natural_join3': 72})
[     6.719][MainProcess][DEBUG] 	1: Counter({'filter': 55, 'mutate': 17})
[     6.719][MainProcess][DEBUG] 	2: Counter({'mutate': 36, 'summarise': 19, 'filter': 17})
[     6.720][MainProcess][INFO] Solution found: summarise(filter(natural_join3(@param1, @param0, @param2), color == 'red' & S_key == 'S5'), n = n(), P_id, S_name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/30.out", col_types = cols(P_id = col_character(),n = col_integer()))

df4 <- inner_join(input2, input1) %>% inner_join(input3)
df5 <- df4 %>% filter(color == 'red' & S_key == 'S5')
df6 <- df5 %>% group_by(P_id, S_name) %>% summarise(n = n()) %>% ungroup()
out <- df6 %>% select(P_id, n) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `P_id`,
       `n`
FROM
  (SELECT `P_id`,
          `S_name`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`P_id` AS `P_id`,
                `LHS`.`color` AS `color`,
                `LHS`.`S_key` AS `S_key`,
                `RHS`.`S_name` AS `S_name`
         FROM
           (SELECT `LHS`.`P_id` AS `P_id`,
                   `LHS`.`color` AS `color`,
                   `RHS`.`S_key` AS `S_key`
            FROM `input2` AS `LHS`
            INNER JOIN `input1` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
         INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
      WHERE (`color` = 'red'
             AND `S_key` = 'S5'))
   GROUP BY P_id,
            S_name)
ORDER BY P_id
