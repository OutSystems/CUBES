[     1.548][MainProcess][INFO] Parsing specification...
[     1.551][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.551][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.552][MainProcess][DEBUG] Reading input files...
[     1.559][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-1.txt: ['string', 'string', 'int64']
[     1.564][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-3.txt: ['string', 'string']
[     1.568][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18.out: ['string', 'string']
[     1.596][MainProcess][DEBUG] Generating DSL...
[     1.756][MainProcess][INFO] Creating 4 processes
[     1.771][MainProcess][DEBUG] Increasing generator loc to 2
[     1.914][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.917][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.924][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.924][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     4.452][cube-solver-1][WARNING] There is no solution for current loc (1).
[     4.453][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     4.460][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     4.468][cube-solver-0][WARNING] There is no solution for current loc (1).
[     4.470][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.488][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     6.992][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     7.001][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     7.858][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     7.877][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     7.894][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     9.261][cube-solver-2][DEBUG] Solving cube (l0 = summarise([24]), l1 = natural_join3())
[     9.529][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise([24]), l1 = natural_join3())
[     9.531][MainProcess][INFO] Statistics:
[     9.531][MainProcess][INFO] 	Generated cubes: 10
[     9.531][MainProcess][INFO] 	Attempted programs: 48
[     9.531][MainProcess][INFO] 		Rejected: 37
[     9.531][MainProcess][INFO] 		Failed: 10
[     9.531][MainProcess][INFO] 	Blacklist clauses: 24
[     9.532][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     9.533][MainProcess][DEBUG] 	0: Counter({'natural_join': 400, 'summarise': 199})
[     9.533][MainProcess][DEBUG] 	1: Counter({'summarise': 272, 'natural_join': 161, 'mutate': 128, 'natural_join3': 39})
[     9.533][MainProcess][INFO] Solution found: natural_join3(@param1, @param0, summarise(@param0, cost = max(cost), P_id))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/18-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/18-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/18.out", col_types = cols(P_id = col_character(),S_name = col_character()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = max(cost)) %>% ungroup()
df4 <- inner_join(input2, input1) %>% inner_join(df3)
out <- df4 %>% select(P_id, S_name) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_id,
       S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.S_name AS S_name,
          LHS.P_id AS P_id,
          LHS.cost AS cost
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.S_name AS S_name,
             RHS.P_id AS P_id,
             RHS.cost AS cost
      FROM input2 AS LHS
      INNER JOIN input1 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
   INNER JOIN
     (SELECT P_id,
             MAX(cost) AS cost
      FROM input1
      GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id
                                AND LHS.cost = RHS.cost))
ORDER BY P_id
