[     3.664][MainProcess][INFO] Parsing specification...
[     3.669][MainProcess][DEBUG] Reading input files...
[     3.679][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/13-1.txt: ['string', 'string']
[     3.685][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/13-2.txt: ['string', 'string']
[     3.690][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/13.out: ['string']
[     3.732][MainProcess][DEBUG] Generating DSL...
[     3.757][MainProcess][INFO] Creating 4 processes
[     3.803][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.806][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.815][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.815][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.883][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.886][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.887][cube-solver-1][DEBUG] Solving cube (l0 = left_join(),)
[     3.895][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.896][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.900][cube-solver-2][DEBUG] Solving cube (l0 = union(),)
[     3.931][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join(),)
[     3.932][MainProcess][INFO] Statistics:
[     3.933][MainProcess][INFO] 	Generated cubes: 6
[     3.933][MainProcess][INFO] 	Attempted programs: 1
[     3.933][MainProcess][INFO] 		Rejected: 0
[     3.933][MainProcess][INFO] 		Failed: 0
[     3.933][MainProcess][INFO] 	Blacklist clauses: 0
[     3.934][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.934][MainProcess][DEBUG] 	0: Counter({'natural_join': 3, 'left_join': 3, 'union': 1})
[     3.934][MainProcess][INFO] Solution found: natural_join(@param1, @param0)
[     3.987][cube-solver-1][DEBUG] Found solution with cube (l0 = left_join(),)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/13-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/13-2.txt", col_types = cols(P_id = col_character(),P_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/13.out", col_types = cols(P_name = col_character()))

df3 <- inner_join(input2, input1)
out <- df3 %>% select(P_name) %>% arrange(P_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_name
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.P_name AS P_name,
          RHS.S_key AS S_key
   FROM input2 AS LHS
   INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id))
ORDER BY P_name
