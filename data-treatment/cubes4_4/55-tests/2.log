[     1.618][MainProcess][INFO] Parsing specification...
[     1.621][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.621][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.621][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.622][MainProcess][DEBUG] Reading input files...
[     1.630][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2-1.txt: ['string', 'string']
[     1.634][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2-2.txt: ['string', 'string']
[     1.640][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2-3.txt: ['string', 'string']
[     1.645][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2-4.txt: ['string', 'string', 'int64']
[     1.649][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2.out: ['int64']
[     1.681][MainProcess][DEBUG] Generating DSL...
[     1.964][MainProcess][INFO] Creating 4 processes
[     2.278][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.304][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.317][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.323][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[    15.764][cube-solver-0][WARNING] There is no solution for current loc (2).
[    15.766][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[    15.781][MainProcess][DEBUG] Increasing generator loc to 3
[    15.870][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    15.923][cube-solver-1][WARNING] There is no solution for current loc (2).
[    15.924][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[    15.950][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    15.994][cube-solver-3][WARNING] There is no solution for current loc (2).
[    15.995][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    16.020][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[    16.090][cube-solver-2][WARNING] There is no solution for current loc (2).
[    16.091][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    16.135][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    34.679][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[    34.688][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[    34.751][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[    34.764][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[    34.828][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[    34.828][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[    34.828][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[    34.868][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[    34.876][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[    34.948][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[    34.965][cube-solver-3][DEBUG] Found solution with cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[    34.966][MainProcess][INFO] Statistics:
[    34.967][MainProcess][INFO] 	Generated cubes: 15
[    34.967][MainProcess][INFO] 	Attempted programs: 2
[    34.967][MainProcess][INFO] 		Rejected: 0
[    34.967][MainProcess][INFO] 		Failed: 1
[    34.967][MainProcess][INFO] 	Blacklist clauses: 0
[    34.968][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    34.968][MainProcess][DEBUG] 	0: Counter({'natural_join4': 3})
[    34.968][MainProcess][DEBUG] 	1: Counter({'filter': 3})
[    34.969][MainProcess][DEBUG] 	2: Counter({'summarise': 3})
[    34.969][MainProcess][INFO] Solution found: summarise(filter(natural_join4(@param2, @param0, @param1, @param3), F_name == 'faculty1' & major != 'History'), age = max(age), F_name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/2-1.txt", col_types = cols(C_name = col_character(),F_key = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/2-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/2-3.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input3 <- copy_to(con, input3)
input4 <- read_csv("tests-examples/55-tests/tables/2-4.txt", col_types = cols(S_key = col_character(),major = col_character(),age = col_integer()))
input4 <- copy_to(con, input4)
expected_output <- read_csv("tests-examples/55-tests/tables/2.out", col_types = cols(maxage = col_integer()))

df5 <- inner_join(input3, input1) %>% inner_join(input2) %>% inner_join(input4)
df6 <- df5 %>% filter(F_name == 'faculty1' & major != 'History')
df7 <- df6 %>% group_by(F_name) %>% summarise(age = max(age)) %>% ungroup()
out <- df7 %>% select(maxage = age) %>% arrange(maxage)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `age` AS `maxage`
FROM
  (SELECT `F_name`,
          MAX(`age`) AS `age`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`F_key` AS `F_key`,
                `LHS`.`F_name` AS `F_name`,
                `LHS`.`C_name` AS `C_name`,
                `LHS`.`S_key` AS `S_key`,
                `RHS`.`major` AS `major`,
                `RHS`.`age` AS `age`
         FROM
           (SELECT `LHS`.`F_key` AS `F_key`,
                   `LHS`.`F_name` AS `F_name`,
                   `LHS`.`C_name` AS `C_name`,
                   `RHS`.`S_key` AS `S_key`
            FROM
              (SELECT `LHS`.`F_key` AS `F_key`,
                      `LHS`.`F_name` AS `F_name`,
                      `RHS`.`C_name` AS `C_name`
               FROM `input3` AS `LHS`
               INNER JOIN `input1` AS `RHS` ON (`LHS`.`F_key` = `RHS`.`F_key`)) AS `LHS`
            INNER JOIN `input2` AS `RHS` ON (`LHS`.`C_name` = `RHS`.`C_name`)) AS `LHS`
         INNER JOIN `input4` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
      WHERE (`F_name` = 'faculty1'
             AND `major` != 'History'))
   GROUP BY F_name)
ORDER BY maxage
