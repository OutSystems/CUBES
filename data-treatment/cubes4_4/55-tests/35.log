[     1.568][MainProcess][INFO] Parsing specification...
[     1.571][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.571][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.572][MainProcess][DEBUG] Reading input files...
[     1.579][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.583][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.588][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.591][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/35.out: ['string']
[     1.621][MainProcess][DEBUG] Generating DSL...
[     1.644][MainProcess][INFO] Creating 4 processes
[     1.691][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.693][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.696][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.699][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.120][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.121][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.122][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.122][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.123][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.123][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.124][MainProcess][DEBUG] Increasing generator loc to 3
[     2.125][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.125][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.125][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.137][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.138][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.142][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.861][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.861][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.864][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.865][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.867][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.869][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.870][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.875][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.878][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.880][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.883][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.885][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.888][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.905][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.913][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join4(), l2 = filter())
[     2.920][cube-solver-3][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = filter())
[     2.924][cube-solver-3][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = natural_join())
[     2.928][cube-solver-3][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = natural_join3([1]))
[     4.365][cube-solver-0][DEBUG] Solving cube (l0 = summarise([18]), l1 = filter([3]), l2 = natural_join4())
[     9.545][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([18]), l1 = filter([3]), l2 = natural_join4())
[     9.547][MainProcess][INFO] Statistics:
[     9.547][MainProcess][INFO] 	Generated cubes: 23
[     9.547][MainProcess][INFO] 	Attempted programs: 255
[     9.547][MainProcess][INFO] 		Rejected: 68
[     9.547][MainProcess][INFO] 		Failed: 186
[     9.547][MainProcess][INFO] 	Blacklist clauses: 23
[     9.548][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     9.549][MainProcess][DEBUG] 	0: Counter({'summarise': 1067, 'natural_join3': 989})
[     9.550][MainProcess][DEBUG] 	1: Counter({'summarise': 789, 'filter': 711, 'natural_join3': 356, 'mutate': 200})
[     9.551][MainProcess][DEBUG] 	2: Counter({'filter': 1345, 'natural_join4': 489, 'natural_join3': 222})
[     9.551][MainProcess][INFO] Solution found: natural_join4(@param0, filter(summarise(@param0, n = n(), P_id), n <= 2), @param1, @param2)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/35.out", col_types = cols(S_name = col_character()))

df4 <- input1 %>% group_by(P_id) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(n <= 2)
df6 <- inner_join(input1, df5) %>% inner_join(input2) %>% inner_join(input3)
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.P_id AS P_id,
          LHS.n AS n,
          LHS.color AS color,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.P_id AS P_id,
             LHS.n AS n,
             RHS.color AS color
      FROM
        (SELECT LHS.S_key AS S_key,
                LHS.P_id AS P_id,
                RHS.n AS n
         FROM input1 AS LHS
         INNER JOIN
           (SELECT *
            FROM
              (SELECT P_id,
                      COUNT() AS n
               FROM input1
               GROUP BY P_id)
            WHERE (n <= 2.0)) AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
      INNER JOIN input2 AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
   INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_name
