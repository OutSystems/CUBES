[     1.580][MainProcess][INFO] Parsing specification...
[     1.583][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.584][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.584][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.584][MainProcess][DEBUG] Reading input files...
[     1.591][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.596][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.601][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/36.out: ['string']
[     1.634][MainProcess][DEBUG] Generating DSL...
[     1.660][MainProcess][INFO] Creating 4 processes
[     1.712][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.715][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.716][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.186][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.187][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.189][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.189][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.190][MainProcess][DEBUG] Increasing generator loc to 3
[     2.191][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.192][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.192][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.192][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.194][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.199][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.199][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.205][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.063][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.066][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.097][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.105][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3([1]), l1 = filter(), l2 = summarise())
[     3.134][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     3.139][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([1]), l1 = filter(), l2 = mutate())
[     3.141][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.153][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = mutate(), l2 = filter())
[     3.157][cube-solver-3][DEBUG] Found solution with cube (l0 = natural_join3([1]), l1 = filter(), l2 = summarise())
[     3.158][MainProcess][INFO] Statistics:
[     3.158][MainProcess][INFO] 	Generated cubes: 12
[     3.158][MainProcess][INFO] 	Attempted programs: 1
[     3.159][MainProcess][INFO] 		Rejected: 0
[     3.159][MainProcess][INFO] 		Failed: 0
[     3.159][MainProcess][INFO] 	Blacklist clauses: 2
[     3.159][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.160][MainProcess][DEBUG] 	0: Counter({'natural_join3': 3})
[     3.160][MainProcess][DEBUG] 	1: Counter({'filter': 3})
[     3.160][MainProcess][DEBUG] 	2: Counter({'summarise': 3})
[     3.160][MainProcess][INFO] Solution found: summarise(filter(natural_join3(@param0, @param1, @param2), color == 'red'), n = n(), S_key, S_name)
[     3.230][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join3([1]), l1 = filter(), l2 = mutate())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/36.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input1, input2) %>% inner_join(input3)
df5 <- df4 %>% filter(color == 'red')
df6 <- df5 %>% group_by(S_key, S_name) %>% summarise(n = n()) %>% ungroup()
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT `S_key`,
          `S_name`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`P_id` AS `P_id`,
                `LHS`.`color` AS `color`,
                `RHS`.`S_name` AS `S_name`
         FROM
           (SELECT `LHS`.`S_key` AS `S_key`,
                   `LHS`.`P_id` AS `P_id`,
                   `RHS`.`color` AS `color`
            FROM `input1` AS `LHS`
            INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
         INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
      WHERE (`color` = 'red'))
   GROUP BY S_key,
            S_name)
ORDER BY S_name
