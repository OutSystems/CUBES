[     1.595][MainProcess][INFO] Parsing specification...
[     1.598][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.598][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.598][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.599][MainProcess][DEBUG] Reading input files...
[     1.607][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/9-1.txt: ['string', 'string', 'string']
[     1.611][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/9-2.txt: ['string', 'string']
[     1.616][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/45.out: ['string', 'string']
[     1.644][MainProcess][DEBUG] Generating DSL...
[     1.670][MainProcess][INFO] Creating 4 processes
[     1.717][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.721][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.721][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.726][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.183][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.184][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.185][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.185][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.187][MainProcess][DEBUG] Increasing generator loc to 3
[     2.188][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.188][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.189][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.189][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.190][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.224][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.225][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.230][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.064][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.064][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.138][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     3.144][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.180][cube-solver-3][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.182][MainProcess][INFO] Statistics:
[     3.182][MainProcess][INFO] 	Generated cubes: 8
[     3.182][MainProcess][INFO] 	Attempted programs: 1
[     3.183][MainProcess][INFO] 		Rejected: 0
[     3.183][MainProcess][INFO] 		Failed: 0
[     3.183][MainProcess][INFO] 	Blacklist clauses: 0
[     3.183][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.183][MainProcess][DEBUG] 	0: Counter({'natural_join': 26})
[     3.184][MainProcess][DEBUG] 	1: Counter({'filter': 26})
[     3.184][MainProcess][DEBUG] 	2: Counter({'mutate': 14, 'summarise': 12})
[     3.184][MainProcess][INFO] Solution found: mutate(filter(natural_join(@param1, @param0), Room == 'R128'), n = n())
[     3.551][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join(), l1 = mutate(), l2 = filter())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/9-1.txt", col_types = cols(ID_class = col_character(),ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/9-2.txt", col_types = cols(ID_key = col_character(),F_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/45.out", col_types = cols(F_name = col_character(),Room = col_character()))

df3 <- inner_join(input2, input1)
df4 <- df3 %>% filter(Room == 'R128')
df5 <- df4 %>% mutate(n = n())
out <- df5 %>% select(F_name, Room) %>% distinct() %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `F_name`,
                `Room`
FROM
  (SELECT `LHS`.`ID_key` AS `ID_key`,
          `LHS`.`F_name` AS `F_name`,
          `RHS`.`ID_class` AS `ID_class`,
          `RHS`.`Room` AS `Room`
   FROM `input2` AS `LHS`
   INNER JOIN `input1` AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
WHERE (`Room` = 'R128')
ORDER BY F_name
