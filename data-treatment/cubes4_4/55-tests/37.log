[     1.575][MainProcess][INFO] Parsing specification...
[     1.577][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.578][MainProcess][DEBUG] Reading input files...
[     1.584][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.587][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.590][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.594][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/37.out: ['string']
[     1.623][MainProcess][DEBUG] Generating DSL...
[     1.645][MainProcess][INFO] Creating 4 processes
[     1.660][MainProcess][DEBUG] Increasing generator loc to 2
[     1.693][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.694][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.697][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.702][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.863][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.864][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.865][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.873][cube-solver-1][WARNING] There is no solution for current loc (1).
[     1.874][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.877][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.112][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.116][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.118][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.120][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.122][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.139][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.141][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join4())
[     2.143][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = summarise([1]))
[     2.145][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = anti_join())
[     2.147][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = left_join())
[     2.148][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = union())
[     2.150][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = intersect())
[     2.152][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = semi_join())
[     2.154][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = cross_join())
[     2.156][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = mutate())
[     2.158][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = inner_join())
[     2.160][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([1]))
[     2.161][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.163][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([1]))
[     2.165][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.166][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = summarise([1]))
[     2.168][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.169][cube-solver-3][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([1]))
[     2.171][cube-solver-3][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     2.172][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([1]))
[     2.174][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     2.175][cube-solver-3][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise([1]))
[     2.177][cube-solver-3][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[     2.178][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     2.179][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     2.220][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join3())
[     2.221][MainProcess][INFO] Statistics:
[     2.221][MainProcess][INFO] 	Generated cubes: 34
[     2.221][MainProcess][INFO] 	Attempted programs: 2
[     2.221][MainProcess][INFO] 		Rejected: 0
[     2.222][MainProcess][INFO] 		Failed: 1
[     2.222][MainProcess][INFO] 	Blacklist clauses: 1
[     2.222][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.222][MainProcess][DEBUG] 	0: Counter({'summarise': 10, 'mutate': 3})
[     2.223][MainProcess][DEBUG] 	1: Counter({'natural_join3': 13})
[     2.223][MainProcess][INFO] Solution found: natural_join3(summarise(@param1, n = n(), P_id, color), @param0, @param2)
[     2.259][cube-solver-3][DEBUG] Found solution with cube (l0 = mutate(), l1 = natural_join3())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/37.out", col_types = cols(S_name = col_character()))

df4 <- input2 %>% group_by(P_id, color) %>% summarise(n = n()) %>% ungroup()
df5 <- inner_join(df4, input1) %>% inner_join(input3)
out <- df5 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT S_name
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.color AS color,
          LHS.n AS n,
          LHS.S_key AS S_key,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.color AS color,
             LHS.n AS n,
             RHS.S_key AS S_key
      FROM
        (SELECT P_id,
                color,
                COUNT() AS n
         FROM input2
         GROUP BY P_id,
                  color) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
   INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_name
