[     1.675][MainProcess][INFO] Parsing specification...
[     1.678][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.678][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.679][MainProcess][DEBUG] Reading input files...
[     1.687][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.692][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/employees.txt: ['int64', 'string', 'int64']
[     1.697][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/certified.txt: ['int64', 'int64']
[     1.701][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/52.out: ['int64']
[     1.730][MainProcess][DEBUG] Generating DSL...
[     1.753][MainProcess][INFO] Creating 4 processes
[     1.770][MainProcess][DEBUG] Increasing generator loc to 2
[     1.801][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.804][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.808][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.810][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.024][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.025][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     2.026][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.205][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     2.208][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     2.210][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     2.214][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.275][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([4]))
[     2.552][cube-solver-0][DEBUG] Solving cube (l0 = filter([9]), l1 = natural_join())
[     2.559][cube-solver-0][DEBUG] Solving cube (l0 = filter([9]), l1 = filter([9]))
[     2.567][cube-solver-0][DEBUG] Solving cube (l0 = filter([9]), l1 = anti_join())
[     2.571][cube-solver-0][DEBUG] Solving cube (l0 = filter([9]), l1 = left_join())
[     2.575][cube-solver-0][DEBUG] Solving cube (l0 = filter([9]), l1 = union())
[     2.579][cube-solver-0][DEBUG] Solving cube (l0 = filter([9]), l1 = intersect())
[     2.583][cube-solver-0][DEBUG] Solving cube (l0 = filter([9]), l1 = semi_join())
[     2.587][cube-solver-0][DEBUG] Solving cube (l0 = filter([9]), l1 = cross_join())
[     2.591][cube-solver-0][DEBUG] Solving cube (l0 = filter([9]), l1 = inner_join())
[     2.595][cube-solver-0][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([9]))
[     2.599][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([9]))
[     2.604][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = filter([9]))
[     2.607][cube-solver-0][DEBUG] Solving cube (l0 = intersect(), l1 = filter([9]))
[     2.612][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([9]))
[     2.616][cube-solver-0][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([10]))
[     2.620][cube-solver-0][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([10]))
[     2.625][MainProcess][DEBUG] Increasing generator loc to 3
[     2.625][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.394][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([10]), l2 = natural_join())
[     3.862][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.245][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.678][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = natural_join3([2]))
[     5.058][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = natural_join4())
[     6.847][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = filter([10]))
[     6.869][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = anti_join())
[     9.242][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[    10.034][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = left_join())
[    13.129][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = union())
[    13.308][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = intersect())
[    16.160][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = semi_join())
[    17.541][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = cross_join())
[    18.145][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = inner_join())
[    18.765][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([10]))
[    18.770][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = filter([10]))
[    21.615][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union(), l2 = filter([10]))
[    22.590][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = filter([10]))
[    24.392][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([10]))
[    25.677][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join(), l2 = filter([10]))
[    26.601][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join(), l2 = filter([10]))
[    67.464][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]), l2 = filter([10]))
[    70.293][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3([2]), l2 = filter([10]))
[    70.306][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join4(), l2 = filter([10]))
[    70.314][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = natural_join([2]))
[    79.295][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = natural_join3([2]))
[    79.586][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = natural_join4())
[   103.744][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = filter([10]))
[   110.129][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = anti_join())
[   110.975][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = left_join())
[   127.286][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = union())
[   143.338][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = intersect())
[   144.727][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = anti_join())
[   144.729][MainProcess][INFO] Statistics:
[   144.731][MainProcess][INFO] 	Generated cubes: 51
[   144.731][MainProcess][INFO] 	Attempted programs: 14181
[   144.731][MainProcess][INFO] 		Rejected: 2554
[   144.731][MainProcess][INFO] 		Failed: 11626
[   144.731][MainProcess][INFO] 	Blacklist clauses: 14
[   144.732][MainProcess][DEBUG] Printing statistics for good programs of size 2
[   144.735][MainProcess][DEBUG] 	0: Counter({'filter': 1080, 'natural_join3': 240})
[   144.736][MainProcess][DEBUG] 	1: Counter({'natural_join4': 840, 'natural_join3': 240, 'filter': 240})
[   144.736][MainProcess][DEBUG] Printing statistics for good programs of size 3
[   144.755][MainProcess][DEBUG] 	0: Counter({'natural_join': 27021, 'natural_join3': 20639})
[   144.767][MainProcess][DEBUG] 	1: Counter({'filter': 35513, 'inner_join': 10568, 'left_join': 480, 'union': 480, 'natural_join': 480, 'semi_join': 140})
[   144.780][MainProcess][DEBUG] 	2: Counter({'filter': 13349, 'inner_join': 9274, 'natural_join4': 7200, 'natural_join3': 5040, 'anti_join': 4359, 'left_join': 3120, 'union': 3120, 'natural_join': 1920, 'semi_join': 280})
[   144.780][MainProcess][INFO] Solution found: anti_join(filter(@param1, salary > 10000), natural_join3(@param1, @param2, @param0), 'eid')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/employees.txt", col_types = cols(eid = col_integer(),ename = col_character(),salary = col_integer()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/52.out", col_types = cols(eid = col_integer()))

df4 <- input2 %>% filter(salary > 10000)
df5 <- inner_join(input2, input3) %>% inner_join(input1)
df6 <- anti_join(df4, df5, by=c('eid'))
out <- df6 %>% select(eid) %>% arrange(eid)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT eid
FROM
  (SELECT *
   FROM
     (SELECT *
      FROM input2
      WHERE (salary > 10000.0)) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT LHS.eid AS eid,
                  LHS.ename AS ename,
                  LHS.salary AS salary,
                  LHS.aid AS aid,
                  RHS.aname AS aname,
                  RHS.crusingrange AS crusingrange
           FROM
             (SELECT LHS.eid AS eid,
                     LHS.ename AS ename,
                     LHS.salary AS salary,
                     RHS.aid AS aid
              FROM input2 AS LHS
              INNER JOIN input3 AS RHS ON (LHS.eid = RHS.eid)) AS LHS
           INNER JOIN input1 AS RHS ON (LHS.aid = RHS.aid)) AS RHS
        WHERE (LHS.eid = RHS.eid) ))
ORDER BY eid
