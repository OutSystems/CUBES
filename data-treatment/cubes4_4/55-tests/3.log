[     3.577][MainProcess][INFO] Parsing specification...
[     3.581][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.581][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.581][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.582][MainProcess][DEBUG] Reading input files...
[     3.592][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3-1.txt: ['string', 'string']
[     3.598][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3-2.txt: ['string', 'string']
[     3.604][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3.out: ['string']
[     3.646][MainProcess][DEBUG] Generating DSL...
[     3.687][MainProcess][INFO] Creating 4 processes
[     3.746][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.750][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.755][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.758][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     4.252][cube-solver-0][WARNING] There is no solution for current loc (2).
[     4.253][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     4.254][MainProcess][DEBUG] Increasing generator loc to 3
[     4.255][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.274][cube-solver-2][WARNING] There is no solution for current loc (2).
[     4.274][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     4.278][cube-solver-3][WARNING] There is no solution for current loc (2).
[     4.278][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.278][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     4.279][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.310][cube-solver-1][WARNING] There is no solution for current loc (2).
[     4.311][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     4.315][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     5.094][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     5.151][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     5.155][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     5.155][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     5.157][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     5.159][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     5.161][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     5.164][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     5.164][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     5.166][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     5.168][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     5.170][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     5.170][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     5.175][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     5.992][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     5.993][MainProcess][INFO] Statistics:
[     5.994][MainProcess][INFO] 	Generated cubes: 18
[     5.994][MainProcess][INFO] 	Attempted programs: 42
[     5.994][MainProcess][INFO] 		Rejected: 7
[     5.994][MainProcess][INFO] 		Failed: 34
[     5.994][MainProcess][INFO] 	Blacklist clauses: 0
[     5.994][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     5.995][MainProcess][DEBUG] 	0: Counter({'natural_join': 197, 'summarise': 116})
[     5.996][MainProcess][DEBUG] 	1: Counter({'mutate': 122, 'summarise': 76, 'natural_join': 59, 'natural_join3': 58})
[     5.996][MainProcess][DEBUG] 	2: Counter({'filter': 315})
[     5.996][MainProcess][INFO] Solution found: filter(natural_join3(@param0, summarise(@param1, n = n(), ID_key), @param1), Room == 'R128' | n > 4)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/3-1.txt", col_types = cols(ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/3-2.txt", col_types = cols(ID_key_student = col_character(),ID_key = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/3.out", col_types = cols(ID_key = col_character()))

df3 <- input2 %>% group_by(ID_key) %>% summarise(n = n()) %>% ungroup()
df4 <- inner_join(input1, df3) %>% inner_join(input2)
df5 <- df4 %>% filter(Room == 'R128' | n > 4)
out <- df5 %>% select(ID_key) %>% distinct() %>% arrange(ID_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `ID_key`
FROM
  (SELECT `LHS`.`ID_key` AS `ID_key`,
          `LHS`.`Room` AS `Room`,
          `LHS`.`n` AS `n`,
          `RHS`.`ID_key_student` AS `ID_key_student`
   FROM
     (SELECT `LHS`.`ID_key` AS `ID_key`,
             `LHS`.`Room` AS `Room`,
             `RHS`.`n` AS `n`
      FROM `input1` AS `LHS`
      INNER JOIN
        (SELECT `ID_key`,
                COUNT() AS `n`
         FROM `input2`
         GROUP BY `ID_key`) AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`)) AS `LHS`
   INNER JOIN `input2` AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
WHERE (`Room` = 'R128'
       OR n > 4.0)
ORDER BY ID_key
