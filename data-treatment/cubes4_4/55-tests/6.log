[     1.662][MainProcess][INFO] Parsing specification...
[     1.665][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.665][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.670][MainProcess][DEBUG] Reading input files...
[     1.682][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/6-1.txt: ['string', 'string']
[     1.689][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/6-2.txt: ['string', 'string']
[     1.693][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/6-3.txt: ['string', 'string']
[     1.697][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/6.out: ['string']
[     1.727][MainProcess][DEBUG] Generating DSL...
[     1.751][MainProcess][INFO] Creating 4 processes
[     1.802][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.805][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.809][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.811][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.240][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.241][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.241][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.242][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.242][MainProcess][DEBUG] Increasing generator loc to 3
[     2.243][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.244][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.259][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.260][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.264][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.287][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.288][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.291][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.008][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.010][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.011][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.014][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     3.016][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.018][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     3.059][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.065][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     3.070][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     3.070][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     3.074][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     3.074][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     3.077][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     3.077][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     3.079][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     3.082][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     3.084][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     3.086][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     3.352][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.355][MainProcess][INFO] Statistics:
[     3.355][MainProcess][INFO] 	Generated cubes: 22
[     3.355][MainProcess][INFO] 	Attempted programs: 7
[     3.355][MainProcess][INFO] 		Rejected: 6
[     3.356][MainProcess][INFO] 		Failed: 0
[     3.356][MainProcess][INFO] 	Blacklist clauses: 0
[     3.356][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.356][MainProcess][DEBUG] 	0: Counter({'natural_join3': 75, 'summarise': 21})
[     3.356][MainProcess][DEBUG] 	1: Counter({'mutate': 40, 'summarise': 35, 'filter': 20, 'natural_join3': 1})
[     3.357][MainProcess][DEBUG] 	2: Counter({'filter': 76, 'natural_join3': 20})
[     3.357][MainProcess][INFO] Solution found: filter(summarise(natural_join3(@param0, @param1, @param2), n = n(), F_key, F_name), n <= 5)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/6-1.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/6-2.txt", col_types = cols(C_name = col_character(),F_key = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/6-3.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/6.out", col_types = cols(F_name = col_character()))

df4 <- inner_join(input1, input2) %>% inner_join(input3)
df5 <- df4 %>% group_by(F_key, F_name) %>% summarise(n = n()) %>% ungroup()
df6 <- df5 %>% filter(n <= 5)
out <- df6 %>% select(F_name) %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT F_name
FROM
  (SELECT F_key,
          F_name,
          COUNT() AS n
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.C_name AS C_name,
             LHS.F_key AS F_key,
             RHS.F_name AS F_name
      FROM
        (SELECT LHS.S_key AS S_key,
                LHS.C_name AS C_name,
                RHS.F_key AS F_key
         FROM input1 AS LHS
         INNER JOIN input2 AS RHS ON (LHS.C_name = RHS.C_name)) AS LHS
      INNER JOIN input3 AS RHS ON (LHS.F_key = RHS.F_key))
   GROUP BY F_key,
            F_name)
WHERE (n <= 5.0)
ORDER BY F_name
