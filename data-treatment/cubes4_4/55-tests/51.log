[     1.597][MainProcess][INFO] Parsing specification...
[     1.600][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.601][MainProcess][DEBUG] Reading input files...
[     1.607][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.612][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.617][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.621][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/51.out: ['string', 'int64']
[     1.651][MainProcess][DEBUG] Generating DSL...
[     1.673][MainProcess][INFO] Creating 4 processes
[     1.687][MainProcess][DEBUG] Increasing generator loc to 2
[     1.722][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.722][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.724][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.894][cube-solver-1][WARNING] There is no solution for current loc (1).
[     1.895][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.896][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.902][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.903][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.906][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.142][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.145][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.147][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.149][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.151][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.164][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.167][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join4())
[     2.169][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = summarise([1]))
[     2.171][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = anti_join())
[     2.173][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = left_join())
[     2.174][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = union())
[     2.176][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = intersect())
[     2.178][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = semi_join())
[     2.180][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = cross_join())
[     2.182][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = mutate())
[     2.184][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = inner_join())
[     2.186][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([1]))
[     2.188][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.189][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([1]))
[     2.191][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.193][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = summarise([1]))
[     2.194][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.196][cube-solver-3][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([1]))
[     2.197][cube-solver-3][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     2.199][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([1]))
[     2.200][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     2.202][cube-solver-3][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise([1]))
[     2.203][cube-solver-3][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[     2.205][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     2.206][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     2.332][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([1]))
[     2.336][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     3.383][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     4.985][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = summarise([21]))
[     4.997][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     4.999][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     5.001][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     5.002][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     5.003][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     5.004][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join())
[     5.005][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     5.006][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[     5.008][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise([21]))
[     5.016][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[     5.017][MainProcess][DEBUG] Increasing generator loc to 3
[     5.017][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     5.198][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     5.705][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([21]), l2 = natural_join())
[     5.967][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([1]), l1 = summarise([21]), l2 = natural_join3([2]))
[     7.085][cube-solver-3][DEBUG] Found solution with cube (l0 = natural_join([1]), l1 = summarise([21]), l2 = natural_join3([2]))
[     7.086][MainProcess][INFO] Statistics:
[     7.087][MainProcess][INFO] 	Generated cubes: 48
[     7.087][MainProcess][INFO] 	Attempted programs: 102
[     7.087][MainProcess][INFO] 		Rejected: 61
[     7.087][MainProcess][INFO] 		Failed: 40
[     7.087][MainProcess][INFO] 	Blacklist clauses: 24
[     7.088][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     7.090][MainProcess][DEBUG] 	0: Counter({'mutate': 1118, 'summarise': 621, 'natural_join3': 512})
[     7.092][MainProcess][DEBUG] 	1: Counter({'natural_join3': 1101, 'natural_join4': 638, 'summarise': 352, 'mutate': 160})
[     7.092][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     7.093][MainProcess][DEBUG] 	0: Counter({'natural_join': 386})
[     7.093][MainProcess][DEBUG] 	1: Counter({'summarise': 386})
[     7.093][MainProcess][DEBUG] 	2: Counter({'natural_join': 232, 'natural_join3': 154})
[     7.094][MainProcess][INFO] Solution found: natural_join3(@param0, @param2, summarise(natural_join(@param1, @param0), n = n(), P_id))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/51.out", col_types = cols(S_name = col_character(),n = col_integer()))

df4 <- inner_join(input2, input1)
df5 <- df4 %>% group_by(P_id) %>% summarise(n = n()) %>% ungroup()
df6 <- inner_join(input1, input3) %>% inner_join(df5)
out <- df6 %>% select(S_name, n) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT S_name,
                n
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.P_id AS P_id,
          LHS.S_name AS S_name,
          RHS.n AS n
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.P_id AS P_id,
             RHS.S_name AS S_name
      FROM input1 AS LHS
      INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
   INNER JOIN
     (SELECT P_id,
             COUNT() AS n
      FROM
        (SELECT LHS.P_id AS P_id,
                LHS.color AS color,
                RHS.S_key AS S_key
         FROM input2 AS LHS
         INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id))
      GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id))
ORDER BY S_name
