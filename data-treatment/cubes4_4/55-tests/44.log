[     1.575][MainProcess][INFO] Parsing specification...
[     1.578][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.578][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.578][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.579][MainProcess][DEBUG] Reading input files...
[     1.585][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-1.txt: ['string', 'string']
[     1.590][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-2.txt: ['string', 'string']
[     1.594][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-3.txt: ['string', 'string']
[     1.599][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/44.out: ['string']
[     1.628][MainProcess][DEBUG] Generating DSL...
[     1.653][MainProcess][INFO] Creating 4 processes
[     1.707][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.720][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.207][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.207][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.209][MainProcess][DEBUG] Increasing generator loc to 3
[     2.209][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.215][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.216][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.221][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.222][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.223][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.224][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.229][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.230][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.235][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.109][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.113][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.119][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.123][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     3.125][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.131][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.155][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     3.164][cube-solver-3][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     3.166][MainProcess][INFO] Statistics:
[     3.166][MainProcess][INFO] 	Generated cubes: 12
[     3.166][MainProcess][INFO] 	Attempted programs: 1
[     3.166][MainProcess][INFO] 		Rejected: 0
[     3.166][MainProcess][INFO] 		Failed: 0
[     3.166][MainProcess][INFO] 	Blacklist clauses: 1
[     3.167][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.167][MainProcess][DEBUG] 	0: Counter({'natural_join3': 3})
[     3.167][MainProcess][DEBUG] 	1: Counter({'filter': 3})
[     3.167][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([1]), l1 = mutate(), l2 = filter())
[     3.167][MainProcess][DEBUG] 	2: Counter({'summarise': 2, 'mutate': 1})
[     3.168][MainProcess][INFO] Solution found: summarise(filter(natural_join3(@param0, @param1, @param2), S_name == 'AWS'), n = n(), P_name, S_key)
[     3.379][cube-solver-2][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.458][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join3([1]), l1 = mutate(), l2 = filter())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/16-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/16-2.txt", col_types = cols(P_id = col_character(),P_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/16-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/44.out", col_types = cols(P_name = col_character()))

df4 <- inner_join(input1, input2) %>% inner_join(input3)
df5 <- df4 %>% filter(S_name == 'AWS')
df6 <- df5 %>% group_by(P_name, S_key) %>% summarise(n = n()) %>% ungroup()
out <- df6 %>% select(P_name) %>% distinct() %>% arrange(P_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `P_name`
FROM
  (SELECT `P_name`,
          `S_key`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`P_id` AS `P_id`,
                `LHS`.`P_name` AS `P_name`,
                `RHS`.`S_name` AS `S_name`
         FROM
           (SELECT `LHS`.`S_key` AS `S_key`,
                   `LHS`.`P_id` AS `P_id`,
                   `RHS`.`P_name` AS `P_name`
            FROM `input1` AS `LHS`
            INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
         INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
      WHERE (`S_name` = 'AWS'))
   GROUP BY P_name,
            S_key)
ORDER BY P_name
