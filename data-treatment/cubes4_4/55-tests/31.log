[     1.601][MainProcess][INFO] Parsing specification...
[     1.604][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.604][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.605][MainProcess][DEBUG] Reading input files...
[     1.611][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.614][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.617][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.623][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/31.out: ['string', 'string', 'string', 'string']
[     1.652][MainProcess][DEBUG] Generating DSL...
[     1.684][MainProcess][INFO] Creating 4 processes
[     1.697][MainProcess][DEBUG] Increasing generator loc to 2
[     1.739][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.744][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.744][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.749][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.112][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.113][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     2.114][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.501][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     2.508][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     2.513][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     2.526][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]))
[     2.537][cube-solver-1][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join4())
[     2.907][cube-solver-0][DEBUG] Solving cube (l0 = filter([24]), l1 = natural_join())
[     2.927][cube-solver-0][DEBUG] Solving cube (l0 = filter([24]), l1 = filter([24]))
[     2.942][cube-solver-0][DEBUG] Solving cube (l0 = filter([24]), l1 = anti_join())
[     2.952][cube-solver-0][DEBUG] Solving cube (l0 = filter([24]), l1 = left_join())
[     2.961][cube-solver-0][DEBUG] Solving cube (l0 = filter([24]), l1 = union())
[     2.971][cube-solver-0][DEBUG] Solving cube (l0 = filter([24]), l1 = intersect())
[     2.980][cube-solver-0][DEBUG] Solving cube (l0 = filter([24]), l1 = semi_join())
[     2.989][cube-solver-0][DEBUG] Solving cube (l0 = filter([24]), l1 = cross_join())
[     2.999][cube-solver-0][DEBUG] Solving cube (l0 = filter([24]), l1 = inner_join())
[     3.009][cube-solver-0][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([24]))
[     3.018][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([24]))
[     3.028][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = filter([24]))
[     3.037][cube-solver-0][DEBUG] Solving cube (l0 = intersect(), l1 = filter([24]))
[     3.046][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([24]))
[     3.056][cube-solver-0][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([24]))
[     3.101][cube-solver-0][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([24]))
[     3.113][MainProcess][DEBUG] Increasing generator loc to 3
[     3.113][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.507][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.646][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]), l2 = natural_join())
[     5.012][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = natural_join3([2]))
[     5.760][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     6.543][cube-solver-2][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter())
[     6.545][MainProcess][INFO] Statistics:
[     6.545][MainProcess][INFO] 	Generated cubes: 25
[     6.545][MainProcess][INFO] 	Attempted programs: 695
[     6.545][MainProcess][INFO] 		Rejected: 12
[     6.545][MainProcess][INFO] 		Failed: 682
[     6.545][MainProcess][INFO] 	Blacklist clauses: 28
[     6.546][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     6.546][MainProcess][DEBUG] 	0: Counter({'natural_join3': 581})
[     6.547][MainProcess][DEBUG] 	1: Counter({'filter': 581})
[     6.547][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     6.547][MainProcess][DEBUG] 	0: Counter({'natural_join': 442})
[     6.547][MainProcess][DEBUG] 	1: Counter({'filter': 442})
[     6.548][MainProcess][DEBUG] 	2: Counter({'natural_join': 232, 'natural_join3': 210})
[     6.548][MainProcess][INFO] Solution found: filter(natural_join3(@param2, @param0, @param1), color == 'green' & S_key != 'S4')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/31.out", col_types = cols(S_key = col_character(),P_id = col_character(),S_name = col_character(),color = col_character()))

df4 <- inner_join(input3, input1) %>% inner_join(input2)
df5 <- df4 %>% filter(color == 'green' & S_key != 'S4')
out <- df5 %>% select(S_key, P_id, S_name, color) %>% arrange(S_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_key`,
       `P_id`,
       `S_name`,
       `color`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`S_name` AS `S_name`,
          `LHS`.`P_id` AS `P_id`,
          `RHS`.`color` AS `color`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`S_name` AS `S_name`,
             `RHS`.`P_id` AS `P_id`
      FROM `input3` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
   INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
WHERE (`color` = 'green'
       AND `S_key` != 'S4')
ORDER BY S_key
