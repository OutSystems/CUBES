[     3.100][MainProcess][INFO] Parsing specification...
[     3.104][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.104][MainProcess][DEBUG] Reading input files...
[     3.112][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10-1.txt: ['string', 'string']
[     3.117][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10-2.txt: ['string', 'string']
[     3.121][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10.out: ['string']
[     3.151][MainProcess][DEBUG] Generating DSL...
[     3.175][MainProcess][INFO] Creating 4 processes
[     3.218][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.227][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.233][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.235][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.479][cube-solver-0][WARNING] There is no solution for current loc (2).
[     3.480][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.483][MainProcess][DEBUG] Increasing generator loc to 3
[     3.484][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.497][cube-solver-1][WARNING] There is no solution for current loc (2).
[     3.498][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.499][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.503][cube-solver-2][WARNING] There is no solution for current loc (2).
[     3.504][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.508][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.514][cube-solver-3][WARNING] There is no solution for current loc (2).
[     3.515][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     3.517][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.974][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.977][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.978][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     3.980][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.982][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     3.984][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     3.985][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     3.987][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     3.989][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     3.990][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     3.998][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     4.010][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([1]), l2 = filter())
[     4.021][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     4.024][cube-solver-2][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join3(), l2 = filter())
[     4.167][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise([1]), l2 = filter())
[     4.168][MainProcess][INFO] Statistics:
[     4.168][MainProcess][INFO] 	Generated cubes: 18
[     4.169][MainProcess][INFO] 	Attempted programs: 3
[     4.169][MainProcess][INFO] 		Rejected: 2
[     4.169][MainProcess][INFO] 		Failed: 0
[     4.169][MainProcess][INFO] 	Blacklist clauses: 1
[     4.169][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     4.170][MainProcess][DEBUG] 	0: Counter({'natural_join': 30, 'summarise': 23})
[     4.170][MainProcess][DEBUG] 	1: Counter({'mutate': 19, 'natural_join': 12, 'summarise': 11, 'natural_join3': 11})
[     4.170][MainProcess][DEBUG] 	2: Counter({'filter': 55})
[     4.171][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param0, @param1), n = n(), S_name), n == max(n))
[     4.205][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     4.407][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise([1]), l1 = natural_join3(), l2 = filter())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/10-1.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/10-2.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/10.out", col_types = cols(S_name = col_character()))

df3 <- inner_join(input1, input2)
df4 <- df3 %>% group_by(S_name) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(n == max(n))
out <- df5 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT S_name,
          n
   FROM
     (SELECT S_name,
             n,
             MAX(n) OVER () AS zzz3
      FROM
        (SELECT S_name,
                COUNT() AS n
         FROM
           (SELECT LHS.S_key AS S_key,
                   LHS.C_name AS C_name,
                   RHS.S_name AS S_name
            FROM input1 AS LHS
            INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key))
         GROUP BY S_name))
   WHERE (n = zzz3))
ORDER BY S_name
