[   11.4131][cube-solver-2][warning] There is no solution for current loc (3).
[   11.4686][cube-solver-1][warning] There is no solution for current loc (3).
[   11.5935][cube-solver-0][warning] There is no solution for current loc (3).

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/25.out", col_types = cols(eid = col_integer(),maxcrusingrange = col_integer()))

df3 <- input2 %>% group_by(eid) %>% summarise(n = n()) %>% ungroup()
df4 <- inner_join(input2, df3) %>% inner_join(input1)
df5 <- df4 %>% filter(crusingrange > 3 & n > 3)
df6 <- df5 %>% group_by(eid) %>% summarise(maxcrusingrange = max(crusingrange)) %>% ungroup()
out <- df6 %>% select(eid, maxcrusingrange)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `eid`,
       `maxcrusingrange`
FROM
  (SELECT `eid`,
          MAX(`crusingrange`) AS `maxcrusingrange`
   FROM
     (SELECT *
      FROM
        (SELECT `eid`,
                `aid`,
                `n`,
                `aname`,
                `crusingrange`
         FROM
           (SELECT `eid`,
                   `aid`,
                   `n`
            FROM `input2` AS `LHS`
            INNER JOIN
              (SELECT `eid`,
                      COUNT() AS `n`
               FROM `input2`
               GROUP BY `eid`) AS `RHS` ON (`LHS`.`eid` = `RHS`.`eid`)) AS `LHS`
         INNER JOIN `input1` AS `RHS` ON (`LHS`.`aid` = `RHS`.`aid`))
      WHERE (`crusingrange` > 3.0
             AND `n` > 3.0))
   GROUP BY `eid`)
