[     1.611][MainProcess][INFO] Parsing specification...
[     1.615][MainProcess][DEBUG] Reading input files...
[     1.623][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/13-1.txt: ['string', 'string']
[     1.629][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/13-2.txt: ['string', 'string']
[     1.633][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/13.out: ['string']
[     1.663][MainProcess][DEBUG] Generating DSL...
[     1.677][MainProcess][INFO] Creating 16 processes
[     1.740][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     1.740][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.740][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     1.741][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     1.741][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     1.741][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     1.741][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     1.741][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.741][MainProcess][DEBUG] Increasing generator loc to 2
[     1.745][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     1.747][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     1.752][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.764][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.764][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.767][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.771][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.776][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.812][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     1.814][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     1.817][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     1.823][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     1.824][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     1.832][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.836][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     1.839][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.865][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     1.865][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     1.865][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     1.868][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.880][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     1.901][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([7]))
[     1.911][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     1.913][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([8]))
[     1.913][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect())
[     1.921][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([2]))
[     1.922][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     1.923][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.925][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect())
[     1.927][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     1.929][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     1.931][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join(),)
[     1.932][MainProcess][INFO] Statistics:
[     1.932][MainProcess][INFO] 	Generated cubes: 26
[     1.932][MainProcess][INFO] 	Attempted programs: 5
[     1.932][MainProcess][INFO] 		Rejected: 2
[     1.932][MainProcess][INFO] 		Failed: 2
[     1.932][MainProcess][INFO] 	Blacklist clauses: 14
[     1.932][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     1.933][MainProcess][DEBUG] 	0: Counter({'union': 12, 'left_join': 9, 'inner_join': 9, 'natural_join': 3, 'semi_join': 2})
[     1.933][MainProcess][INFO] Solution found: natural_join(@param1, @param0)
[     1.943][cube-solver-7][DEBUG] Found solution with cube (l0 = semi_join(),)
[     1.954][cube-solver-4][DEBUG] Found solution with cube (l0 = left_join(),)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/13-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/13-2.txt", col_types = cols(P_id = col_character(),P_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/13.out", col_types = cols(P_name = col_character()))

df3 <- inner_join(input2, input1)
out <- df3 %>% select(P_name) %>% arrange(P_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_name
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.P_name AS P_name,
          RHS.S_key AS S_key
   FROM input2 AS LHS
   INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id))
ORDER BY P_name
