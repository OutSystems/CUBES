[     3.475][MainProcess][INFO] Parsing specification...
[     3.492][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.493][MainProcess][DEBUG] Reading input files...
[     3.507][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/14-1.txt: ['string', 'string']
[     3.514][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/14-2.txt: ['string', 'string']
[     3.528][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/14-3.txt: ['string', 'string']
[     3.535][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/14.out: ['string']
[     3.582][MainProcess][DEBUG] Generating DSL...
[     3.620][MainProcess][INFO] Creating 16 processes
[     3.699][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.699][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.699][MainProcess][DEBUG] Increasing generator loc to 3
[     3.699][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.699][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.700][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.701][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.702][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.712][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.713][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.720][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.721][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.729][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.736][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.748][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     3.750][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     3.764][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     4.293][cube-solver-1][WARNING] There is no solution for current loc (2).
[     4.294][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     4.296][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.376][cube-solver-0][WARNING] There is no solution for current loc (2).
[     4.377][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     4.378][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.473][cube-solver-3][WARNING] There is no solution for current loc (2).
[     4.474][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     4.476][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.533][cube-solver-2][WARNING] There is no solution for current loc (2).
[     4.534][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     4.537][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.554][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     4.555][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     4.559][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     4.561][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     4.562][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     4.564][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     4.565][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     4.568][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     4.570][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     4.572][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     4.574][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     4.575][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     4.577][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     4.579][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = intersect())
[     4.580][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = semi_join())
[     4.581][cube-solver-5][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = cross_join())
[     4.584][cube-solver-5][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = mutate())
[     4.584][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise([2]))
[     4.585][cube-solver-10][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = inner_join())
[     4.587][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = anti_join(), l2 = filter())
[     4.587][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([2]))
[     4.589][cube-solver-9][DEBUG] Solving cube (l0 = summarise([2]), l1 = left_join(), l2 = filter())
[     4.590][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = union(), l2 = filter())
[     4.590][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     4.593][cube-solver-10][DEBUG] Solving cube (l0 = summarise([2]), l1 = intersect(), l2 = filter())
[     4.593][cube-solver-5][DEBUG] Solving cube (l0 = summarise([3]), l1 = semi_join(), l2 = filter())
[     4.595][cube-solver-9][DEBUG] Solving cube (l0 = summarise([3]), l1 = cross_join(), l2 = filter())
[     4.596][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = mutate(), l2 = filter())
[     4.597][cube-solver-5][DEBUG] Solving cube (l0 = summarise([3]), l1 = inner_join(), l2 = filter())
[     4.599][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = summarise([3]))
[     4.601][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = mutate())
[     4.602][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = summarise([3]))
[     4.603][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = mutate())
[     4.603][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4(), l2 = summarise([3]))
[     4.604][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     4.606][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4(), l2 = mutate())
[     4.607][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]), l2 = natural_join3())
[     4.607][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]), l2 = natural_join())
[     4.608][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]), l2 = natural_join4())
[     4.608][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]), l2 = summarise([4]))
[     4.610][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]), l2 = filter())
[     4.611][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]), l2 = anti_join())
[     4.614][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]), l2 = intersect())
[     4.614][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]), l2 = union())
[     4.614][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]), l2 = left_join())
[     4.615][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]), l2 = semi_join())
[     4.617][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]), l2 = cross_join())
[     4.618][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]), l2 = mutate())
[     4.619][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]), l2 = inner_join())
[     4.621][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = filter(), l2 = summarise([4]))
[     4.621][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = filter(), l2 = mutate())
[     4.622][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = anti_join(), l2 = summarise([4]))
[     4.623][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = anti_join(), l2 = mutate())
[     4.624][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = left_join(), l2 = summarise([4]))
[     4.625][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = union(), l2 = summarise([4]))
[     4.625][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = left_join(), l2 = mutate())
[     4.626][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = union(), l2 = mutate())
[     4.627][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = intersect(), l2 = summarise([4]))
[     4.629][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = semi_join(), l2 = summarise([4]))
[     4.629][cube-solver-8][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     4.629][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = semi_join(), l2 = mutate())
[     4.629][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = intersect(), l2 = mutate())
[     4.630][MainProcess][INFO] Statistics:
[     4.630][MainProcess][INFO] 	Generated cubes: 72
[     4.630][MainProcess][INFO] 	Attempted programs: 1
[     4.630][MainProcess][INFO] 		Rejected: 0
[     4.630][MainProcess][INFO] 		Failed: 0
[     4.631][MainProcess][INFO] 	Blacklist clauses: 4
[     4.631][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     4.631][MainProcess][DEBUG] 	0: Counter({'natural_join3': 1})
[     4.631][MainProcess][DEBUG] 	1: Counter({'summarise': 1})
[     4.631][MainProcess][DEBUG] 	2: Counter({'filter': 1})
[     4.632][MainProcess][INFO] Solution found: filter(summarise(natural_join3(@param0, @param1, @param2), n = n(), S_name), n == max(n))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/14-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/14-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/14-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/14.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input1, input2) %>% inner_join(input3)
df5 <- df4 %>% group_by(S_name) %>% summarise(n = n()) %>% ungroup()
df6 <- df5 %>% filter(n == max(n))
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT S_name,
          n
   FROM
     (SELECT S_name,
             n,
             MAX(n) OVER () AS zzz4
      FROM
        (SELECT S_name,
                COUNT() AS n
         FROM
           (SELECT LHS.S_key AS S_key,
                   LHS.P_id AS P_id,
                   LHS.color AS color,
                   RHS.S_name AS S_name
            FROM
              (SELECT LHS.S_key AS S_key,
                      LHS.P_id AS P_id,
                      RHS.color AS color
               FROM input1 AS LHS
               INNER JOIN input2 AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
            INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
         GROUP BY S_name))
   WHERE (n = zzz4))
ORDER BY S_name
