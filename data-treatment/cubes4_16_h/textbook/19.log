[     3.284][MainProcess][INFO] Parsing specification...
[     3.301][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.301][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.302][MainProcess][DEBUG] Reading input files...
[     3.313][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-1.txt: ['string', 'string']
[     3.319][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-2.txt: ['string', 'string']
[     3.324][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-3.txt: ['string', 'string']
[     3.329][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19.out: ['string']
[     3.365][MainProcess][DEBUG] Generating DSL...
[     3.388][MainProcess][INFO] Creating 16 processes
[     3.456][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.455][MainProcess][DEBUG] Increasing generator loc to 2
[     3.457][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.457][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.457][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.457][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.458][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.461][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.466][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.466][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.473][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.474][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.481][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.491][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.494][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.498][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.498][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.712][cube-solver-0][WARNING] There is no solution for current loc (1).
[     3.713][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     3.714][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.752][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     3.756][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     3.756][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     3.759][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     3.759][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     3.762][cube-solver-8][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     3.763][cube-solver-10][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     3.765][cube-solver-8][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     3.765][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     3.766][MainProcess][DEBUG] Increasing generator loc to 3
[     3.766][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.767][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.769][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.773][cube-solver-14][DEBUG] Solving cube (l0 = filter(), l1 = inner_join())
[     3.778][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     3.804][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     3.808][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.823][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     3.826][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     3.826][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     3.826][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.827][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     3.829][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.830][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.837][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter())
[     3.841][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     3.849][cube-solver-13][DEBUG] Solving cube (l0 = filter([1]), l1 = cross_join())
[     3.856][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.973][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]))
[     3.973][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([4]))
[     3.977][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.017][cube-solver-12][DEBUG] Solving cube (l0 = filter([4]), l1 = semi_join())
[     4.028][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     4.135][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([4]))
[     4.142][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.335][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = left_join())
[     4.339][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = semi_join())
[     4.351][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = natural_join())
[     4.353][cube-solver-9][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = anti_join())
[     4.402][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = natural_join4())
[     4.441][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = natural_join3([2]))
[     4.446][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = intersect())
[     4.450][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = cross_join())
[     4.524][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = union())
[     4.526][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = inner_join())
[     4.544][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.559][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = filter([4]))
[     4.559][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([4]))
[     4.569][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = filter([4]))
[     4.577][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([4]))
[     4.705][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = filter([4]))
[     4.893][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     5.066][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union(), l2 = filter([4]))
[     5.172][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join(), l2 = filter([4]))
[     5.417][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join(), l2 = filter([4]))
[     5.480][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]), l2 = filter([4]))
[     5.755][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3([2]), l2 = filter([4]))
[     5.763][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join4(), l2 = filter([4]))
[     5.769][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = natural_join([2]))
[     5.803][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = natural_join3([2]))
[     5.826][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = natural_join4())
[     5.929][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = filter([4]))
[     6.154][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = anti_join())
[     6.313][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = left_join())
[     6.575][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = union())
[     6.666][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = intersect())
[     7.044][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = semi_join())
[     7.106][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     7.647][cube-solver-6][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = cross_join())
[     7.939][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = inner_join())
[     8.590][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = anti_join(), l2 = filter([4]))
[     8.747][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = left_join(), l2 = filter([4]))
[     9.076][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = union(), l2 = filter([4]))
[     9.352][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = intersect(), l2 = filter([4]))
[     9.754][cube-solver-12][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = anti_join())
[     9.756][MainProcess][INFO] Statistics:
[     9.756][MainProcess][INFO] 	Generated cubes: 58
[     9.756][MainProcess][INFO] 	Attempted programs: 1581
[     9.756][MainProcess][INFO] 		Rejected: 326
[     9.756][MainProcess][INFO] 		Failed: 1254
[     9.756][MainProcess][INFO] 	Blacklist clauses: 8
[     9.756][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     9.757][MainProcess][DEBUG] 	0: Counter({'filter': 288, 'natural_join3': 64})
[     9.757][MainProcess][DEBUG] 	1: Counter({'natural_join4': 224, 'natural_join3': 64, 'filter': 64})
[     9.757][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     9.759][MainProcess][DEBUG] 	0: Counter({'natural_join3': 3304, 'natural_join': 2272})
[     9.760][MainProcess][DEBUG] 	1: Counter({'filter': 4578, 'inner_join': 302, 'left_join': 232, 'union': 208, 'natural_join': 128, 'anti_join': 88, 'semi_join': 40})
[     9.762][MainProcess][DEBUG] 	2: Counter({'filter': 1126, 'natural_join4': 883, 'natural_join3': 743, 'natural_join': 512, 'union': 488, 'left_join': 479, 'inner_join': 373, 'semi_join': 362, 'anti_join': 351, 'cross_join': 239, 'intersect': 20})
[     9.762][MainProcess][INFO] Solution found: anti_join(natural_join3(@param0, @param1, @param2), filter(natural_join3(@param0, @param1, @param2), color != 'red'), 'S_key')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/19.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input1, input2) %>% inner_join(input3)
df5 <- df4 %>% filter(color != 'red')
df6 <- anti_join(df4, df5, by=c('S_key'))
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT *
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`P_id` AS `P_id`,
             `LHS`.`color` AS `color`,
             `RHS`.`S_name` AS `S_name`
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`P_id` AS `P_id`,
                `RHS`.`color` AS `color`
         FROM `input1` AS `LHS`
         INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
      INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT `LHS`.`S_key` AS `S_key`,
                     `LHS`.`P_id` AS `P_id`,
                     `LHS`.`color` AS `color`,
                     `RHS`.`S_name` AS `S_name`
              FROM
                (SELECT `LHS`.`S_key` AS `S_key`,
                        `LHS`.`P_id` AS `P_id`,
                        `RHS`.`color` AS `color`
                 FROM `input1` AS `LHS`
                 INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
              INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
           WHERE (`color` != 'red')) AS RHS
        WHERE (LHS.S_key = RHS.S_key) ))
ORDER BY S_name
