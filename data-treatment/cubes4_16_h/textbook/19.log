[     3.054][MainProcess][INFO] Parsing specification...
[     3.059][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.059][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.060][MainProcess][DEBUG] Reading input files...
[     3.068][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-1.txt: ['string', 'string']
[     3.074][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-2.txt: ['string', 'string']
[     3.079][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-3.txt: ['string', 'string']
[     3.083][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19.out: ['string']
[     3.115][MainProcess][DEBUG] Generating DSL...
[     3.138][MainProcess][INFO] Creating 16 processes
[     3.216][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.216][MainProcess][DEBUG] Increasing generator loc to 2
[     3.218][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.218][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.218][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.218][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.218][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.218][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.221][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.222][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.230][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.233][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.245][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.247][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.261][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.263][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.273][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.436][cube-solver-0][WARNING] There is no solution for current loc (1).
[     3.436][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     3.438][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.490][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     3.494][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     3.496][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     3.498][cube-solver-8][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     3.500][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     3.501][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     3.502][cube-solver-8][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     3.504][MainProcess][DEBUG] Increasing generator loc to 3
[     3.504][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.505][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.515][cube-solver-14][DEBUG] Solving cube (l0 = filter(), l1 = inner_join())
[     3.519][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     3.522][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     3.569][cube-solver-9][DEBUG] Solving cube (l0 = filter([2]), l1 = left_join())
[     3.572][cube-solver-7][DEBUG] Solving cube (l0 = filter([2]), l1 = filter([2]))
[     3.573][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.577][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.609][cube-solver-12][DEBUG] Solving cube (l0 = filter([4]), l1 = semi_join())
[     3.615][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     3.772][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = natural_join3())
[     3.773][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]))
[     3.778][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.778][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]))
[     3.780][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([4]))
[     3.780][cube-solver-4][DEBUG] Solving cube (l0 = filter([4]), l1 = natural_join())
[     3.783][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.786][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.791][cube-solver-10][DEBUG] Solving cube (l0 = filter([4]), l1 = union())
[     3.797][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.812][cube-solver-13][DEBUG] Solving cube (l0 = filter([4]), l1 = cross_join())
[     3.817][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.822][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([4]))
[     3.827][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     3.866][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([4]))
[     3.869][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.064][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = natural_join())
[     4.171][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([4]), l2 = anti_join())
[     4.181][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([4]), l2 = natural_join4())
[     4.194][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([4]), l2 = left_join())
[     4.289][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = natural_join3())
[     4.333][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = filter([4]))
[     4.339][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = filter([4]))
[     4.340][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union(), l2 = filter([4]))
[     4.422][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = semi_join())
[     4.459][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = union())
[     4.471][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([4]))
[     4.476][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = filter([4]))
[     4.529][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = cross_join())
[     4.625][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = inner_join())
[     4.651][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     4.651][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = intersect())
[     4.682][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     5.099][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join(), l2 = filter([4]))
[     5.111][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([4]))
[     5.177][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join(), l2 = filter([4]))
[     5.525][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]), l2 = filter([4]))
[     5.545][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3([2]), l2 = filter([4]))
[     5.550][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join4(), l2 = filter([4]))
[     5.553][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = natural_join([2]))
[     5.654][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = natural_join3([2]))
[     5.728][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = natural_join4())
[     5.731][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = filter([4]))
[     5.778][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = anti_join())
[     6.002][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = left_join())
[     6.050][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = union())
[     6.343][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = intersect())
[     6.756][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     6.823][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = cross_join())
[     6.899][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = inner_join())
[     7.000][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = anti_join(), l2 = filter([4]))
[     7.292][cube-solver-6][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = semi_join())
[     7.887][cube-solver-7][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = left_join(), l2 = filter([4]))
[     8.103][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = union(), l2 = filter([4]))
[     8.580][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = intersect(), l2 = filter([4]))
[     9.071][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = semi_join(), l2 = filter([4]))
[    11.273][cube-solver-5][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = anti_join())
[    11.274][MainProcess][INFO] Statistics:
[    11.274][MainProcess][INFO] 	Generated cubes: 59
[    11.274][MainProcess][INFO] 	Attempted programs: 1140
[    11.274][MainProcess][INFO] 		Rejected: 348
[    11.275][MainProcess][INFO] 		Failed: 791
[    11.275][MainProcess][INFO] 	Blacklist clauses: 8
[    11.275][MainProcess][DEBUG] Priting statistics for good programs of size 2
[    11.275][MainProcess][DEBUG] 	0: Counter({'filter': 288, 'natural_join3': 64})
[    11.276][MainProcess][DEBUG] 	1: Counter({'natural_join4': 224, 'filter': 64, 'natural_join3': 64})
[    11.276][MainProcess][DEBUG] Priting statistics for good programs of size 3
[    11.279][MainProcess][DEBUG] 	0: Counter({'natural_join3': 5642, 'natural_join': 2472})
[    11.283][MainProcess][DEBUG] 	1: Counter({'filter': 5919, 'left_join': 527, 'union': 512, 'inner_join': 410, 'anti_join': 341, 'semi_join': 269, 'natural_join': 128, 'intersect': 8})
[    11.286][MainProcess][DEBUG] 	2: Counter({'filter': 2323, 'natural_join4': 1172, 'natural_join3': 956, 'left_join': 744, 'union': 740, 'inner_join': 638, 'anti_join': 535, 'natural_join': 512, 'semi_join': 488, 'intersect': 6})
[    11.287][MainProcess][INFO] Solution found: anti_join(natural_join3(@param0, @param1, @param2), filter(natural_join3(@param0, @param1, @param2), color != 'red'), 'S_key', 'S_name')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/19.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input1, input2) %>% inner_join(input3)
df5 <- df4 %>% filter(color != 'red')
df6 <- anti_join(df4, df5, by=c('S_key', 'S_name'))
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT *
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`P_id` AS `P_id`,
             `LHS`.`color` AS `color`,
             `RHS`.`S_name` AS `S_name`
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`P_id` AS `P_id`,
                `RHS`.`color` AS `color`
         FROM `input1` AS `LHS`
         INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
      INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT `LHS`.`S_key` AS `S_key`,
                     `LHS`.`P_id` AS `P_id`,
                     `LHS`.`color` AS `color`,
                     `RHS`.`S_name` AS `S_name`
              FROM
                (SELECT `LHS`.`S_key` AS `S_key`,
                        `LHS`.`P_id` AS `P_id`,
                        `RHS`.`color` AS `color`
                 FROM `input1` AS `LHS`
                 INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
              INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
           WHERE (`color` != 'red')) AS RHS
        WHERE (LHS.S_key = RHS.S_key
               AND LHS.S_name = RHS.S_name) ))
ORDER BY S_name
