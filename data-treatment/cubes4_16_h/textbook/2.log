[     3.073][MainProcess][INFO] Parsing specification...
[     3.078][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.078][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.078][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.079][MainProcess][DEBUG] Reading input files...
[     3.087][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2-1.txt: ['string', 'string']
[     3.092][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2-2.txt: ['string', 'string']
[     3.097][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2-3.txt: ['string', 'string']
[     3.102][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2-4.txt: ['string', 'string', 'int64']
[     3.105][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2.out: ['int64']
[     3.140][MainProcess][DEBUG] Generating DSL...
[     3.186][MainProcess][INFO] Creating 16 processes
[     3.274][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.275][MainProcess][DEBUG] Increasing generator loc to 3
[     3.276][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.280][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.283][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.283][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.293][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.296][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.303][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.305][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.315][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.320][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.327][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.329][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.331][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     3.344][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     3.391][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     4.573][cube-solver-3][WARNING] There is no solution for current loc (2).
[     4.574][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     4.579][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.585][cube-solver-2][WARNING] There is no solution for current loc (2).
[     4.586][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     4.589][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.605][cube-solver-1][WARNING] There is no solution for current loc (2).
[     4.607][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     4.611][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.705][cube-solver-0][WARNING] There is no solution for current loc (2).
[     4.706][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     4.710][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     5.447][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     5.455][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     5.458][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     5.462][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     5.466][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     5.468][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     5.474][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     5.478][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     5.479][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     5.480][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     5.484][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     5.484][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     5.487][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     5.487][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     5.488][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = intersect())
[     5.491][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = semi_join())
[     5.492][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = cross_join())
[     5.495][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[     5.496][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = anti_join(), l2 = filter())
[     5.497][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = inner_join())
[     5.498][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = left_join(), l2 = filter())
[     5.499][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = union(), l2 = filter())
[     5.501][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = intersect(), l2 = filter())
[     5.504][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = semi_join(), l2 = filter())
[     5.504][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = cross_join(), l2 = filter())
[     5.506][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = mutate(), l2 = filter())
[     5.509][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = inner_join(), l2 = filter())
[     5.509][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = summarise([1]))
[     5.511][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = mutate())
[     5.514][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = summarise([1]))
[     5.514][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = mutate())
[     5.515][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4(), l2 = summarise([2]))
[     5.519][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4([1]), l2 = mutate())
[     5.520][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = summarise([2]), l2 = natural_join())
[     5.526][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = summarise([2]), l2 = natural_join3())
[     5.527][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     5.534][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]), l2 = filter([2]))
[     5.535][cube-solver-10][DEBUG] Solving cube (l0 = filter([2]), l1 = summarise([3]), l2 = natural_join4([2]))
[     5.540][cube-solver-6][DEBUG] Solving cube (l0 = filter([2]), l1 = summarise([3]), l2 = summarise([3]))
[     5.543][cube-solver-10][DEBUG] Solving cube (l0 = filter([3]), l1 = summarise([3]), l2 = filter([3]))
[     5.550][cube-solver-10][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([4]), l2 = left_join())
[     5.553][cube-solver-8][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([4]), l2 = union())
[     5.553][cube-solver-6][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([4]), l2 = intersect())
[     5.558][cube-solver-10][DEBUG] Solving cube (l0 = filter([6]), l1 = summarise([5]), l2 = semi_join())
[     5.558][cube-solver-9][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([4]), l2 = anti_join())
[     5.566][cube-solver-10][DEBUG] Solving cube (l0 = filter([7]), l1 = summarise([5]), l2 = mutate())
[     5.566][cube-solver-8][DEBUG] Solving cube (l0 = filter([7]), l1 = summarise([5]), l2 = cross_join())
[     5.570][cube-solver-6][DEBUG] Solving cube (l0 = filter([7]), l1 = summarise([6]), l2 = inner_join())
[     5.575][cube-solver-10][DEBUG] Solving cube (l0 = filter([8]), l1 = filter([8]), l2 = summarise([6]))
[     5.579][cube-solver-9][DEBUG] Solving cube (l0 = filter([8]), l1 = filter([8]), l2 = mutate())
[     5.582][cube-solver-8][DEBUG] Solving cube (l0 = filter([8]), l1 = anti_join(), l2 = summarise([6]))
[     5.586][cube-solver-10][DEBUG] Solving cube (l0 = filter([9]), l1 = left_join(), l2 = summarise([6]))
[     5.587][cube-solver-6][DEBUG] Solving cube (l0 = filter([8]), l1 = anti_join(), l2 = mutate())
[     5.588][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([9]), l2 = summarise([7]))
[     5.596][cube-solver-10][DEBUG] Solving cube (l0 = filter([10]), l1 = union(), l2 = summarise([7]))
[     5.596][cube-solver-9][DEBUG] Solving cube (l0 = filter([9]), l1 = left_join(), l2 = mutate())
[     5.598][cube-solver-8][DEBUG] Solving cube (l0 = filter([10]), l1 = union(), l2 = mutate())
[     5.599][cube-solver-6][DEBUG] Solving cube (l0 = filter([10]), l1 = intersect(), l2 = summarise([7]))
[     5.606][cube-solver-10][DEBUG] Solving cube (l0 = filter([12]), l1 = intersect(), l2 = mutate())
[     5.608][cube-solver-9][DEBUG] Solving cube (l0 = filter([12]), l1 = semi_join(), l2 = summarise([8]))
[     5.610][cube-solver-8][DEBUG] Solving cube (l0 = filter([12]), l1 = semi_join(), l2 = mutate())
[     5.611][cube-solver-5][DEBUG] Solving cube (l0 = filter([12]), l1 = cross_join(), l2 = summarise([9]))
[     5.614][cube-solver-10][DEBUG] Solving cube (l0 = filter([12]), l1 = cross_join(), l2 = mutate())
[     5.619][cube-solver-6][DEBUG] Solving cube (l0 = filter([12]), l1 = mutate(), l2 = natural_join())
[     5.621][cube-solver-10][DEBUG] Solving cube (l0 = filter([14]), l1 = mutate(), l2 = natural_join3())
[     5.624][cube-solver-8][DEBUG] Solving cube (l0 = filter([14]), l1 = mutate(), l2 = natural_join4([4]))
[     5.624][cube-solver-5][DEBUG] Solving cube (l0 = filter([14]), l1 = mutate(), l2 = summarise([10]))
[     5.628][cube-solver-9][DEBUG] Solving cube (l0 = filter([14]), l1 = mutate(), l2 = filter([14]))
[     5.631][cube-solver-6][DEBUG] Solving cube (l0 = filter([16]), l1 = mutate(), l2 = anti_join())
[     5.632][cube-solver-10][DEBUG] Solving cube (l0 = filter([16]), l1 = mutate(), l2 = left_join())
[     5.637][cube-solver-5][DEBUG] Solving cube (l0 = filter([16]), l1 = mutate(), l2 = union())
[     5.639][cube-solver-6][DEBUG] Solving cube (l0 = filter([18]), l1 = mutate(), l2 = intersect())
[     5.640][cube-solver-10][DEBUG] Solving cube (l0 = filter([18]), l1 = mutate(), l2 = semi_join())
[     5.646][cube-solver-5][DEBUG] Solving cube (l0 = filter([18]), l1 = mutate(), l2 = cross_join())
[     5.648][cube-solver-6][DEBUG] Solving cube (l0 = filter([19]), l1 = mutate(), l2 = mutate())
[     5.650][cube-solver-10][DEBUG] Solving cube (l0 = filter([19]), l1 = inner_join(), l2 = summarise([12]))
[     5.650][cube-solver-9][DEBUG] Solving cube (l0 = filter([19]), l1 = mutate(), l2 = inner_join())
[     5.656][cube-solver-5][DEBUG] Solving cube (l0 = filter([20]), l1 = inner_join(), l2 = mutate())
[     5.657][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([13]), l2 = filter([20]))
[     5.665][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([21]), l2 = summarise([14]))
[     5.666][cube-solver-5][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([21]), l2 = mutate())
[     5.670][cube-solver-9][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate(), l2 = filter([21]))
[     5.673][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([14]), l2 = filter([22]))
[     5.677][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = filter([22]), l2 = summarise([15]))
[     5.682][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = filter([23]), l2 = mutate())
[     5.688][cube-solver-9][DEBUG] Solving cube (l0 = left_join(), l1 = mutate(), l2 = filter([23]))
[     5.689][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = summarise([16]), l2 = filter([23]))
[     5.693][cube-solver-10][DEBUG] Solving cube (l0 = union(), l1 = filter([25]), l2 = summarise([16]))
[     5.694][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = filter([25]), l2 = mutate())
[     5.705][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4([4]), l1 = filter([25]), l2 = mutate())
[     5.706][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = mutate(), l2 = filter([25]))
[     5.708][cube-solver-9][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([17]), l2 = filter([25]))
[     5.708][cube-solver-5][DEBUG] Solving cube (l0 = intersect(), l1 = filter([25]), l2 = summarise([17]))
[     5.711][cube-solver-10][DEBUG] Solving cube (l0 = intersect(), l1 = filter([25]), l2 = mutate())
[     5.718][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = mutate(), l2 = filter([25]))
[     5.727][cube-solver-10][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([17]), l2 = filter([26]))
[     5.738][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([26]), l2 = mutate())
[     5.738][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([26]), l2 = summarise([17]))
[     5.741][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate([1]), l2 = filter([26]))
[     5.758][cube-solver-5][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise([17]), l2 = filter([26]))
[     5.758][cube-solver-6][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([26]), l2 = mutate([1]))
[     5.759][cube-solver-10][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([26]), l2 = summarise([17]))
[     5.762][cube-solver-9][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate([1]), l2 = filter([26]))
[     5.770][cube-solver-6][DEBUG] Solving cube (l0 = mutate([1]), l1 = natural_join(), l2 = filter([26]))
[     5.782][cube-solver-6][DEBUG] Solving cube (l0 = mutate([1]), l1 = natural_join4([6]), l2 = filter([27]))
[     5.783][cube-solver-9][DEBUG] Solving cube (l0 = mutate([1]), l1 = natural_join3(), l2 = filter([27]))
[     5.790][cube-solver-5][DEBUG] Solving cube (l0 = mutate([1]), l1 = summarise([20]), l2 = filter([28]))
[     5.791][cube-solver-10][DEBUG] Solving cube (l0 = mutate([1]), l1 = filter([28]), l2 = natural_join())
[     5.807][cube-solver-9][DEBUG] Solving cube (l0 = mutate([2]), l1 = filter([30]), l2 = natural_join3())
[     5.813][cube-solver-10][DEBUG] Solving cube (l0 = mutate([2]), l1 = filter([30]), l2 = natural_join4([7]))
[     5.825][cube-solver-5][DEBUG] Solving cube (l0 = mutate([2]), l1 = filter([30]), l2 = summarise([22]))
[     5.845][cube-solver-9][DEBUG] Solving cube (l0 = mutate([2]), l1 = filter([30]), l2 = filter([30]))
[     5.863][cube-solver-5][DEBUG] Solving cube (l0 = mutate([2]), l1 = filter([32]), l2 = anti_join())
[     5.880][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4([7]), l1 = filter([32]), l2 = summarise([27]))
[     5.882][cube-solver-9][DEBUG] Solving cube (l0 = mutate([3]), l1 = filter([32]), l2 = left_join())
[     5.897][cube-solver-9][DEBUG] Solving cube (l0 = mutate([3]), l1 = filter([32]), l2 = union())
[     5.901][cube-solver-5][DEBUG] Solving cube (l0 = mutate([3]), l1 = filter([32]), l2 = intersect())
[     5.904][cube-solver-14][DEBUG] Found solution with cube (l0 = natural_join4([4]), l1 = filter([25]), l2 = mutate())
[     5.906][MainProcess][INFO] Statistics:
[     5.906][MainProcess][INFO] 	Generated cubes: 126
[     5.906][MainProcess][INFO] 	Attempted programs: 1
[     5.906][MainProcess][INFO] 		Rejected: 0
[     5.906][MainProcess][INFO] 		Failed: 0
[     5.906][MainProcess][INFO] 	Blacklist clauses: 71
[     5.906][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     5.907][MainProcess][DEBUG] 	0: Counter({'natural_join4': 12})
[     5.907][MainProcess][DEBUG] 	1: Counter({'filter': 12})
[     5.907][MainProcess][DEBUG] 	2: Counter({'mutate': 12})
[     5.907][MainProcess][INFO] Solution found: mutate(filter(natural_join4(@param0, @param2, @param1, @param3), F_name == 'faculty1' & major != 'History'), age = max(age))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/2-1.txt", col_types = cols(C_name = col_character(),F_key = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/2-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/2-3.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input3 <- copy_to(con, input3)
input4 <- read_csv("tests-examples/textbook/tables/2-4.txt", col_types = cols(S_key = col_character(),major = col_character(),age = col_integer()))
input4 <- copy_to(con, input4)
expected_output <- read_csv("tests-examples/textbook/tables/2.out", col_types = cols(maxage = col_integer()))

df5 <- inner_join(input1, input3) %>% inner_join(input2) %>% inner_join(input4)
df6 <- df5 %>% filter(F_name == 'faculty1' & major != 'History')
df7 <- df6 %>% mutate(age = max(age))
out <- df7 %>% select(maxage = age) %>% distinct() %>% arrange(maxage)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT MAX(`age`) OVER () AS `maxage`
FROM
  (SELECT `LHS`.`C_name` AS `C_name`,
          `LHS`.`F_key` AS `F_key`,
          `LHS`.`F_name` AS `F_name`,
          `LHS`.`S_key` AS `S_key`,
          `RHS`.`major` AS `major`,
          `RHS`.`age` AS `age`
   FROM
     (SELECT `LHS`.`C_name` AS `C_name`,
             `LHS`.`F_key` AS `F_key`,
             `LHS`.`F_name` AS `F_name`,
             `RHS`.`S_key` AS `S_key`
      FROM
        (SELECT `LHS`.`C_name` AS `C_name`,
                `LHS`.`F_key` AS `F_key`,
                `RHS`.`F_name` AS `F_name`
         FROM `input1` AS `LHS`
         INNER JOIN `input3` AS `RHS` ON (`LHS`.`F_key` = `RHS`.`F_key`)) AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`C_name` = `RHS`.`C_name`)) AS `LHS`
   INNER JOIN `input4` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`F_name` = 'faculty1'
       AND `major` != 'History')
ORDER BY maxage
