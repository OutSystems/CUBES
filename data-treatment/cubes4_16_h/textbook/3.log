[     1.660][MainProcess][INFO] Parsing specification...
[     1.663][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.663][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.663][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.664][MainProcess][DEBUG] Reading input files...
[     1.673][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3-1.txt: ['string', 'string']
[     1.678][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3-2.txt: ['string', 'string']
[     1.681][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3.out: ['string']
[     1.709][MainProcess][DEBUG] Generating DSL...
[     1.730][MainProcess][INFO] Creating 16 processes
[     1.794][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.794][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.794][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.794][MainProcess][DEBUG] Increasing generator loc to 3
[     1.794][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.795][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.795][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.796][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.803][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.805][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.808][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.812][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.830][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.831][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.834][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.835][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.838][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.126][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.127][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.129][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.139][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.139][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.140][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.370][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.372][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.375][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.377][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.380][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.380][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.382][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.384][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.384][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.388][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.389][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.389][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.389][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.389][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.389][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.391][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.391][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.391][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.392][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.393][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.404][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = mutate())
[     2.405][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     2.410][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = intersect())
[     2.411][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = semi_join())
[     2.691][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([6]), l2 = filter([17]))
[     2.715][cube-solver-12][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([23]), l2 = cross_join())
[     2.851][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([26]), l2 = summarise([6]))
[     2.851][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([26]), l2 = summarise([6]))
[     2.866][cube-solver-13][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([27]), l2 = mutate())
[     2.873][cube-solver-5][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([27]), l2 = inner_join())
[     2.875][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([27]))
[     2.879][cube-solver-13][DEBUG] Solving cube (l0 = summarise([6]), l1 = anti_join(), l2 = filter([27]))
[     2.895][cube-solver-11][DEBUG] Solving cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([27]))
[     2.950][cube-solver-3][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter([30]))
[     2.980][cube-solver-2][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter([31]))
[     3.151][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([33]), l2 = filter([33]))
[     3.199][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = union(), l2 = filter([34]))
[     3.286][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([34]), l2 = anti_join())
[     5.019][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     5.021][MainProcess][INFO] Statistics:
[     5.021][MainProcess][INFO] 	Generated cubes: 36
[     5.021][MainProcess][INFO] 	Attempted programs: 42
[     5.021][MainProcess][INFO] 		Rejected: 39
[     5.021][MainProcess][INFO] 		Failed: 2
[     5.021][MainProcess][INFO] 	Blacklist clauses: 40
[     5.022][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     5.023][MainProcess][DEBUG] 	0: Counter({'summarise': 1103, 'natural_join': 491})
[     5.024][MainProcess][DEBUG] 	1: Counter({'mutate': 258, 'filter': 251, 'summarise': 233, 'left_join': 224, 'natural_join3': 216, 'natural_join': 178, 'union': 173, 'anti_join': 61})
[     5.024][MainProcess][DEBUG] 	2: Counter({'filter': 1343, 'union': 72, 'left_join': 51, 'inner_join': 44, 'natural_join': 40, 'natural_join3': 24, 'semi_join': 20})
[     5.025][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param1, @param0), n = n(), ID_key, Room), Room == 'R128' | n > 4)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/3-1.txt", col_types = cols(ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/3-2.txt", col_types = cols(ID_key_student = col_character(),ID_key = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/3.out", col_types = cols(ID_key = col_character()))

df3 <- inner_join(input2, input1)
df4 <- df3 %>% group_by(ID_key, Room) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(Room == 'R128' | n > 4)
out <- df5 %>% select(ID_key) %>% arrange(ID_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `ID_key`
FROM
  (SELECT `ID_key`,
          `Room`,
          COUNT() AS `n`
   FROM
     (SELECT `LHS`.`ID_key_student` AS `ID_key_student`,
             `LHS`.`ID_key` AS `ID_key`,
             `RHS`.`Room` AS `Room`
      FROM `input2` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
   GROUP BY `ID_key`,
            `Room`)
WHERE (`Room` = 'R128'
       OR n > 4.0)
ORDER BY ID_key
