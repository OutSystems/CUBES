[     1.660][MainProcess][INFO] Parsing specification...
[     1.664][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.664][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.664][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.665][MainProcess][DEBUG] Reading input files...
[     1.673][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3-1.txt: ['string', 'string']
[     1.678][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3-2.txt: ['string', 'string']
[     1.683][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3.out: ['string']
[     1.713][MainProcess][DEBUG] Generating DSL...
[     1.740][MainProcess][INFO] Creating 16 processes
[     1.812][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.812][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.812][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.812][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.812][MainProcess][DEBUG] Increasing generator loc to 3
[     1.813][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.814][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.817][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.825][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.826][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.834][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.834][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.838][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.844][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.860][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.862][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.876][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.492][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.493][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.495][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.578][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.579][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.580][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.829][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.836][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.838][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.840][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.843][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.845][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.846][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.850][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.858][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.860][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.862][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = summarise())
[     2.864][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = summarise())
[     2.865][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     2.867][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.867][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.867][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter([1]))
[     2.871][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     2.877][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     2.884][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = intersect())
[     2.888][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.890][cube-solver-2][DEBUG] Solving cube (l0 = filter([1]), l1 = mutate())
[     2.893][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.895][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     2.903][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([2]), l2 = cross_join())
[     2.907][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.908][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter([2]))
[     2.911][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.926][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]), l2 = filter([5]))
[     2.939][cube-solver-12][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([5]), l2 = inner_join())
[     2.956][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([8]), l2 = summarise([3]))
[     2.971][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = anti_join(), l2 = filter([10]))
[     3.048][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([15]), l2 = mutate())
[     3.064][cube-solver-14][DEBUG] Solving cube (l0 = summarise([5]), l1 = left_join(), l2 = filter([15]))
[     3.636][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter([38]))
[     3.701][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter([38]))
[     3.963][cube-solver-14][DEBUG] Found solution with cube (l0 = summarise([5]), l1 = left_join(), l2 = filter([15]))
[     3.965][MainProcess][INFO] Statistics:
[     3.965][MainProcess][INFO] 	Generated cubes: 35
[     3.965][MainProcess][INFO] 	Attempted programs: 16
[     3.965][MainProcess][INFO] 		Rejected: 8
[     3.965][MainProcess][INFO] 		Failed: 7
[     3.965][MainProcess][INFO] 	Blacklist clauses: 44
[     3.965][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.966][MainProcess][DEBUG] 	0: Counter({'summarise': 133, 'natural_join': 110})
[     3.966][MainProcess][DEBUG] 	1: Counter({'mutate': 86, 'left_join': 51, 'filter': 36, 'summarise': 24, 'natural_join3': 18, 'anti_join': 16, 'natural_join': 12})
[     3.966][MainProcess][DEBUG] 	2: Counter({'filter': 207, 'union': 20, 'inner_join': 8, 'natural_join3': 8})
[     3.966][MainProcess][INFO] Solution found: filter(left_join(summarise(@param1, n = n(), ID_key), @param0), Room == 'R128' | n > 4)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/3-1.txt", col_types = cols(ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/3-2.txt", col_types = cols(ID_key_student = col_character(),ID_key = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/3.out", col_types = cols(ID_key = col_character()))

df3 <- input2 %>% group_by(ID_key) %>% summarise(n = n()) %>% ungroup()
df4 <- left_join(df3, input1)
df5 <- df4 %>% filter(Room == 'R128' | n > 4)
out <- df5 %>% select(ID_key) %>% arrange(ID_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `ID_key`
FROM
  (SELECT `LHS`.`ID_key` AS `ID_key`,
          `LHS`.`n` AS `n`,
          `RHS`.`Room` AS `Room`
   FROM
     (SELECT `ID_key`,
             COUNT() AS `n`
      FROM `input2`
      GROUP BY `ID_key`) AS `LHS`
   LEFT JOIN `input1` AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
WHERE (`Room` = 'R128'
       OR n > 4.0)
ORDER BY ID_key
