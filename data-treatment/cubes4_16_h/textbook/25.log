[     1.564][MainProcess][INFO] Parsing specification...
[     1.567][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.567][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.568][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.568][MainProcess][DEBUG] Reading input files...
[     1.574][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.577][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     1.581][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/25.out: ['int64', 'int64']
[     1.609][MainProcess][DEBUG] Generating DSL...
[     1.839][MainProcess][INFO] Creating 16 processes
[     1.917][MainProcess][DEBUG] Increasing generator loc to 4
[     2.175][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.175][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.182][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.183][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.185][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.191][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.199][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.207][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.207][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.207][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.212][cube-solver-13][DEBUG] Initialising process for 4 lines of code.
[     2.220][cube-solver-12][DEBUG] Initialising process for 4 lines of code.
[     2.242][cube-solver-14][DEBUG] Initialising process for 4 lines of code.
[     2.255][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.265][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.323][cube-solver-15][DEBUG] Initialising process for 4 lines of code.
[    14.496][cube-solver-8][WARNING] There is no solution for current loc (3).
[    14.497][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = summarise(), l2 = filter())
[    14.518][cube-solver-2][WARNING] There is no solution for current loc (3).
[    14.519][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[    14.531][cube-solver-5][WARNING] There is no solution for current loc (3).
[    14.532][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = mutate())
[    14.543][cube-solver-5][DEBUG] Initialising process for 4 lines of code.
[    14.543][cube-solver-8][DEBUG] Initialising process for 4 lines of code.
[    14.550][cube-solver-1][WARNING] There is no solution for current loc (3).
[    14.551][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[    14.561][cube-solver-4][WARNING] There is no solution for current loc (3).
[    14.561][cube-solver-1][DEBUG] Initialising process for 4 lines of code.
[    14.563][cube-solver-10][WARNING] There is no solution for current loc (3).
[    14.563][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = mutate())
[    14.564][cube-solver-2][DEBUG] Initialising process for 4 lines of code.
[    14.566][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = summarise())
[    14.585][cube-solver-11][WARNING] There is no solution for current loc (3).
[    14.585][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = mutate(), l2 = filter())
[    14.601][cube-solver-11][DEBUG] Initialising process for 4 lines of code.
[    14.602][cube-solver-6][WARNING] There is no solution for current loc (3).
[    14.603][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = summarise())
[    14.608][cube-solver-3][WARNING] There is no solution for current loc (3).
[    14.609][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = mutate(), l2 = filter())
[    14.609][cube-solver-10][DEBUG] Initialising process for 4 lines of code.
[    14.611][cube-solver-4][DEBUG] Initialising process for 4 lines of code.
[    14.619][cube-solver-3][DEBUG] Initialising process for 4 lines of code.
[    14.619][cube-solver-7][WARNING] There is no solution for current loc (3).
[    14.619][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = mutate())
[    14.629][cube-solver-7][DEBUG] Initialising process for 4 lines of code.
[    14.647][cube-solver-6][DEBUG] Initialising process for 4 lines of code.
[    14.724][cube-solver-0][WARNING] There is no solution for current loc (3).
[    14.725][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[    14.739][cube-solver-0][DEBUG] Initialising process for 4 lines of code.
[    14.753][cube-solver-9][WARNING] There is no solution for current loc (3).
[    14.754][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = summarise())
[    14.765][cube-solver-9][DEBUG] Initialising process for 4 lines of code.
[    19.331][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter(), l3 = mutate())
[    19.331][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter(), l3 = summarise())
[    19.463][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise(), l3 = filter())
[    19.468][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = mutate(), l3 = filter())
[    19.486][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise(), l3 = summarise())
[    19.499][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise(), l3 = mutate())
[    19.519][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate(), l3 = summarise())
[    19.532][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate(), l3 = mutate())
[    19.547][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise(), l3 = filter())
[    19.561][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter(), l3 = summarise())
[    19.574][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter(), l3 = mutate())
[    19.588][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate(), l3 = filter())
[    19.602][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = summarise(), l3 = filter())
[    19.615][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter(), l3 = summarise())
[    19.628][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter(), l3 = mutate())
[    19.640][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = mutate(), l3 = filter())
[    19.653][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise(), l3 = summarise())
[    19.666][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise(), l3 = mutate())
[    19.679][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate(), l3 = summarise())
[    19.691][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate(), l3 = mutate())
[    19.704][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise(), l3 = filter())
[    19.717][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter(), l3 = summarise())
[    19.730][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter(), l3 = mutate())
[    19.743][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate(), l3 = filter())
[    19.756][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = summarise(), l3 = filter())
[    30.787][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise([23]), l3 = mutate())
[    30.796][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate(), l3 = summarise([23]))
[    30.797][cube-solver-7][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([23]), l2 = filter(), l3 = summarise([23]))
[    30.850][cube-solver-7][DEBUG] Solving cube (l0 = summarise([23]), l1 = natural_join(), l2 = filter(), l3 = summarise([23]))
[    30.952][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise([23]), l3 = filter())
[    31.671][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise([26]), l3 = summarise([26]))
[    31.752][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([26]), l2 = filter(), l3 = mutate())
[    31.799][cube-solver-8][DEBUG] Solving cube (l0 = summarise([26]), l1 = natural_join(), l2 = filter(), l3 = mutate())
[    31.817][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([27]), l2 = summarise([27]), l3 = filter())
[    31.825][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter(), l3 = summarise([27]))
[    31.826][cube-solver-0][DEBUG] Solving cube (l0 = summarise([27]), l1 = natural_join(), l2 = mutate(), l3 = filter())
[    31.842][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate(), l3 = mutate())
[    31.865][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate(), l3 = filter())
[    31.867][cube-solver-3][DEBUG] Solving cube (l0 = summarise([28]), l1 = natural_join3(), l2 = summarise([28]), l3 = filter())
[    31.873][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([28]), l2 = mutate(), l3 = filter())
[    31.915][cube-solver-9][DEBUG] Solving cube (l0 = summarise([28]), l1 = natural_join3(), l2 = filter(), l3 = summarise([28]))
[    32.119][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter(), l3 = mutate())
[    46.926][cube-solver-1][DEBUG] Solving cube (l0 = summarise([41]), l1 = natural_join3(), l2 = filter(), l3 = mutate())
[    48.084][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise([41]), l1 = natural_join3(), l2 = filter(), l3 = mutate())
[    48.091][MainProcess][INFO] Statistics:
[    48.092][MainProcess][INFO] 	Generated cubes: 55
[    48.092][MainProcess][INFO] 	Attempted programs: 50
[    48.092][MainProcess][INFO] 		Rejected: 42
[    48.093][MainProcess][INFO] 		Failed: 7
[    48.093][MainProcess][INFO] 	Blacklist clauses: 41
[    48.093][MainProcess][DEBUG] Priting statistics for good programs of size 4
[    48.114][MainProcess][DEBUG] 	0: Counter({'natural_join': 17913, 'summarise': 6662})
[    48.125][MainProcess][DEBUG] 	1: Counter({'summarise': 6296, 'mutate': 6217, 'filter': 5401, 'natural_join': 4391, 'natural_join3': 2272})
[    48.136][MainProcess][DEBUG] 	2: Counter({'filter': 10868, 'mutate': 10784, 'summarise': 2929})
[    48.147][MainProcess][DEBUG] 	3: Counter({'mutate': 10063, 'filter': 8312, 'summarise': 6209})
[    48.148][MainProcess][INFO] Solution found: mutate(filter(natural_join3(@param1, summarise(@param1, n = n(), eid), @param0), crusingrange >= 3 & n > 3), maxcrusingrange = max(crusingrange))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/25.out", col_types = cols(eid = col_integer(),maxcrusingrange = col_integer()))

df3 <- input2 %>% group_by(eid) %>% summarise(n = n()) %>% ungroup()
df4 <- inner_join(input2, df3) %>% inner_join(input1)
df5 <- df4 %>% filter(crusingrange >= 3 & n > 3)
df6 <- df5 %>% mutate(maxcrusingrange = max(crusingrange))
out <- df6 %>% select(eid, maxcrusingrange) %>% distinct() %>% arrange(eid)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT eid,
                MAX(crusingrange) OVER () AS maxcrusingrange
FROM
  (SELECT LHS.eid AS eid,
          LHS.aid AS aid,
          LHS.n AS n,
          RHS.aname AS aname,
          RHS.crusingrange AS crusingrange
   FROM
     (SELECT LHS.eid AS eid,
             LHS.aid AS aid,
             RHS.n AS n
      FROM input2 AS LHS
      INNER JOIN
        (SELECT eid,
                COUNT() AS n
         FROM input2
         GROUP BY eid) AS RHS ON (LHS.eid = RHS.eid)) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.aid = RHS.aid))
WHERE (crusingrange >= 3.0
       AND n > 3.0)
ORDER BY eid
