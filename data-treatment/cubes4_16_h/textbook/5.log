[     1.563][MainProcess][INFO] Parsing specification...
[     1.572][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.573][MainProcess][DEBUG] Reading input files...
[     1.583][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5-1.txt: ['string', 'string', 'string']
[     1.588][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5-2.txt: ['string', 'string']
[     1.592][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5.out: ['string']
[     1.623][MainProcess][DEBUG] Generating DSL...
[     1.647][MainProcess][INFO] Creating 16 processes
[     1.706][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.706][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.706][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.706][MainProcess][DEBUG] Increasing generator loc to 3
[     1.707][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.709][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.714][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.714][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.718][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.722][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.725][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.730][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.733][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.738][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.749][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.751][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.757][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.153][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.154][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.156][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.179][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.179][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.181][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.184][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.185][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.187][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.294][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.295][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.296][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.546][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.548][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.554][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.558][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.561][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.562][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.565][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.566][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.568][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.568][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.572][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.572][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.574][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.575][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.574][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.577][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.582][cube-solver-12][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([1]), l2 = intersect())
[     2.586][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     2.594][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([2]), l2 = semi_join())
[     2.604][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([3]), l2 = summarise([4]))
[     2.616][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([3]), l2 = cross_join())
[     2.750][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = mutate())
[     2.756][cube-solver-14][DEBUG] Solving cube (l0 = summarise([10]), l1 = filter([4]), l2 = mutate())
[     2.764][cube-solver-14][DEBUG] Solving cube (l0 = summarise([10]), l1 = filter([4]), l2 = inner_join())
[     2.767][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([4]))
[     2.776][cube-solver-11][DEBUG] Solving cube (l0 = summarise([10]), l1 = anti_join(), l2 = filter([4]))
[     2.906][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.907][MainProcess][INFO] Statistics:
[     2.908][MainProcess][INFO] 	Generated cubes: 34
[     2.908][MainProcess][INFO] 	Attempted programs: 5
[     2.908][MainProcess][INFO] 		Rejected: 4
[     2.908][MainProcess][INFO] 		Failed: 0
[     2.908][MainProcess][INFO] 	Blacklist clauses: 14
[     2.908][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.909][MainProcess][DEBUG] 	0: Counter({'summarise': 57, 'natural_join': 42})
[     2.909][MainProcess][DEBUG] 	1: Counter({'filter': 57, 'mutate': 23, 'summarise': 19})
[     2.909][MainProcess][DEBUG] 	2: Counter({'filter': 42, 'union': 19, 'left_join': 18, 'semi_join': 8, 'natural_join3': 8, 'inner_join': 4})
[     2.909][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param1, @param0), n = n(), F_key, F_name), n == max(n))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/5-1.txt", col_types = cols(C_name = col_character(),F_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/5-2.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/5.out", col_types = cols(F_name = col_character()))

df3 <- inner_join(input2, input1)
df4 <- df3 %>% group_by(F_key, F_name) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(n == max(n))
out <- df5 %>% select(F_name) %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT F_name
FROM
  (SELECT F_key,
          F_name,
          n
   FROM
     (SELECT F_key,
             F_name,
             n,
             MAX(n) OVER () AS zzz3
      FROM
        (SELECT F_key,
                F_name,
                COUNT() AS n
         FROM
           (SELECT LHS.F_key AS F_key,
                   LHS.F_name AS F_name,
                   RHS.C_name AS C_name,
                   RHS.Room AS Room
            FROM input2 AS LHS
            INNER JOIN input1 AS RHS ON (LHS.F_key = RHS.F_key))
         GROUP BY F_key,
                  F_name))
   WHERE (n = zzz3))
ORDER BY F_name
