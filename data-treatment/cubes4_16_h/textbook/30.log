[     1.595][MainProcess][INFO] Parsing specification...
[     1.599][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.599][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.600][MainProcess][DEBUG] Reading input files...
[     1.607][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.618][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/flights.txt: ['int64', 'string', 'string', 'int64', 'datetime64[ns]', 'datetime64[ns]', 'int64']
[     1.622][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     1.627][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/employees.txt: ['int64', 'string', 'int64']
[     1.631][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/30.out: ['object', 'object']
[     1.670][MainProcess][DEBUG] Generating DSL...
[     1.781][MainProcess][INFO] Creating 16 processes
[     1.847][MainProcess][DEBUG] Increasing generator loc to 2
[     1.987][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.989][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.995][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.998][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.001][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     2.005][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     2.015][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     2.016][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     2.024][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     2.028][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     2.032][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     2.034][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     2.050][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     2.052][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.073][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     2.126][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     4.260][cube-solver-0][WARNING] There is no solution for current loc (1).
[     4.261][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     4.266][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.591][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     7.607][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     7.612][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     7.624][cube-solver-1][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     7.625][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     7.628][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     7.633][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     7.637][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     7.642][MainProcess][DEBUG] Increasing generator loc to 3
[     7.646][cube-solver-9][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     7.650][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     7.651][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4([1]))
[     7.655][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     7.656][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     7.656][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     7.659][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     7.666][cube-solver-12][DEBUG] Solving cube (l0 = filter(), l1 = semi_join())
[     7.666][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     7.668][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     7.682][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     7.685][cube-solver-14][DEBUG] Solving cube (l0 = filter(), l1 = inner_join())
[     7.688][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     7.696][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     7.702][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     7.705][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     7.723][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     7.725][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     7.756][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     7.763][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = natural_join3())
[     7.765][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([4]))
[     7.801][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     7.811][cube-solver-7][DEBUG] Solving cube (l0 = filter([6]), l1 = filter([6]))
[     7.838][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     7.848][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[    12.273][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([171]))
[    12.395][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    15.422][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([187]), l2 = filter([187]))
[    15.691][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([267]), l2 = anti_join())
[    15.800][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([300]), l2 = union())
[    15.888][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect(), l2 = filter([309]))
[    16.211][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join(), l2 = filter([314]))
[    16.296][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join(), l2 = filter([315]))
[    16.398][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join(), l2 = filter([317]))
[    16.593][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join(), l2 = filter([320]))
[    16.732][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join(), l2 = filter([320]))
[    16.808][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3(), l2 = filter([320]))
[    16.888][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4([22]), l2 = filter([320]))
[    16.981][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([331]), l2 = natural_join())
[    17.106][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([338]), l2 = natural_join3())
[    17.206][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([365]), l2 = natural_join4([22]))
[    17.359][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([382]), l2 = left_join())
[    17.479][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3([4]), l1 = filter([398]), l2 = filter([398]))
[    17.812][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([18]), l1 = filter([420]), l2 = anti_join())
[    17.972][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([444]), l2 = intersect())
[    18.163][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([468]), l2 = natural_join())
[    18.420][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3([19]), l1 = filter([496]), l2 = left_join())
[    18.560][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([531]), l2 = cross_join())
[    18.817][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3([20]), l1 = filter([563]), l2 = union())
[    19.012][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([581]), l2 = natural_join3([20]))
[    19.302][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3([20]), l1 = filter([589]), l2 = intersect())
[    19.533][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3([20]), l1 = filter([609]), l2 = semi_join())
[    19.898][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([3]), l1 = filter([657]), l2 = inner_join())
[    20.107][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([3]), l1 = filter([672]), l2 = semi_join())
[    20.358][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([3]), l1 = filter([691]), l2 = natural_join4([24]))
[    20.544][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([3]), l1 = union(), l2 = filter([703]))
[    20.816][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3([20]), l1 = filter([706]), l2 = cross_join())
[    21.050][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3([20]), l1 = filter([708]), l2 = inner_join())
[    21.360][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([20]), l1 = anti_join(), l2 = filter([726]))
[    24.969][cube-solver-11][DEBUG] Found solution with cube (l0 = natural_join3([20]), l1 = filter([708]), l2 = inner_join())
[    24.975][MainProcess][INFO] Statistics:
[    24.975][MainProcess][INFO] 	Generated cubes: 55
[    24.975][MainProcess][INFO] 	Attempted programs: 50
[    24.975][MainProcess][INFO] 		Rejected: 0
[    24.975][MainProcess][INFO] 		Failed: 49
[    24.976][MainProcess][INFO] 	Blacklist clauses: 774
[    24.976][MainProcess][DEBUG] Priting statistics for good programs of size 3
[    24.976][MainProcess][DEBUG] 	0: Counter({'natural_join3': 758})
[    24.977][MainProcess][DEBUG] 	1: Counter({'filter': 758})
[    24.978][MainProcess][DEBUG] 	2: Counter({'union': 711, 'inner_join': 47})
[    24.978][MainProcess][INFO] Solution found: inner_join(filter(natural_join3(@param2, @param3, @param0), crusingrange >= 100000 | salary >= 100000), @param1, 'aid' = 'distance','aname' = 'origin')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/flights.txt", col_types = cols(flno = col_integer(),origin = col_character(),destination = col_character(),distance = col_integer(),departs = col_character(),arrives = col_character(),price = col_integer()))
input2$departs <- dmy(input2$departs)
input2$arrives <- dmy(input2$arrives)
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input3 <- copy_to(con, input3)
input4 <- read_csv("tests-examples/textbook/tables/employees.txt", col_types = cols(eid = col_integer(),ename = col_character(),salary = col_integer()))
input4 <- copy_to(con, input4)
expected_output <- read_csv("tests-examples/textbook/tables/30.out", col_types = cols(origin = col_character(),destination = col_character()))

df5 <- inner_join(input3, input4) %>% inner_join(input1)
df6 <- df5 %>% filter(crusingrange >= 100000 | salary >= 100000)
df7 <- inner_join(df6, input2, by=c('aid' = 'distance','aname' = 'origin'), suffix = c('', '.other'))
out <- df7 %>% select(origin = ename, destination = aname) %>% arrange(origin)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ename AS origin,
       aname AS destination
FROM
  (SELECT LHS.eid AS eid,
          LHS.aid AS aid,
          LHS.ename AS ename,
          LHS.salary AS salary,
          LHS.aname AS aname,
          LHS.crusingrange AS crusingrange,
          RHS.flno AS flno,
          RHS.destination AS destination,
          RHS.departs AS departs,
          RHS.arrives AS arrives,
          RHS.price AS price
   FROM
     (SELECT *
      FROM
        (SELECT LHS.eid AS eid,
                LHS.aid AS aid,
                LHS.ename AS ename,
                LHS.salary AS salary,
                RHS.aname AS aname,
                RHS.crusingrange AS crusingrange
         FROM
           (SELECT LHS.eid AS eid,
                   LHS.aid AS aid,
                   RHS.ename AS ename,
                   RHS.salary AS salary
            FROM input3 AS LHS
            INNER JOIN input4 AS RHS ON (LHS.eid = RHS.eid)) AS LHS
         INNER JOIN input1 AS RHS ON (LHS.aid = RHS.aid))
      WHERE (crusingrange >= 100000.0
             OR salary >= 100000.0)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.aid = RHS.distance
                                AND LHS.aname = RHS.origin))
ORDER BY origin
