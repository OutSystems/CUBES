[     3.366][MainProcess][INFO] Parsing specification...
[     3.390][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.390][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.390][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.391][MainProcess][DEBUG] Reading input files...
[     3.404][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/8-1.txt: ['string', 'string', 'int64']
[     3.410][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/8.out: ['string', 'int64']
[     3.440][MainProcess][DEBUG] Generating DSL...
[     3.481][MainProcess][INFO] Creating 16 processes
[     3.558][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.559][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.559][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.559][MainProcess][DEBUG] Increasing generator loc to 3
[     3.562][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.564][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.570][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.572][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.578][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.582][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.586][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.595][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.596][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.598][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.600][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     3.619][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     3.637][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     4.838][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     4.865][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     4.907][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     4.974][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     5.417][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     5.578][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     5.583][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     5.584][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     5.589][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     5.593][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     5.594][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     5.596][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     5.601][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     5.605][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     5.606][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     5.613][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     5.615][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     5.620][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     5.622][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     5.629][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     5.632][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     5.632][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     5.638][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     5.644][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     5.656][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = intersect())
[     5.675][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter([1]))
[     5.685][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = semi_join())
[     5.685][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([2]))
[     5.695][cube-solver-1][DEBUG] Found solution with cube (l0 = filter(), l1 = summarise())
[     5.696][MainProcess][INFO] Statistics:
[     5.696][MainProcess][INFO] 	Generated cubes: 31
[     5.696][MainProcess][INFO] 	Attempted programs: 14
[     5.696][MainProcess][INFO] 		Rejected: 13
[     5.696][MainProcess][INFO] 		Failed: 0
[     5.696][MainProcess][INFO] 	Blacklist clauses: 2
[     5.696][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     5.697][MainProcess][DEBUG] 	0: Counter({'filter': 141, 'mutate': 80, 'summarise': 12})
[     5.697][MainProcess][DEBUG] 	1: Counter({'summarise': 93, 'filter': 92, 'mutate': 48})
[     5.697][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     5.698][MainProcess][DEBUG] 	0: Counter({'summarise': 5})
[     5.698][MainProcess][DEBUG] 	1: Counter({'filter': 5})
[     5.698][MainProcess][DEBUG] 	2: Counter({'anti_join': 4, 'natural_join3': 1})
[     5.698][MainProcess][INFO] Solution found: summarise(filter(@param0, level != 'JR'), meanage = mean(age), level)
[     5.698][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = cross_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/8-1.txt", col_types = cols(S_key = col_character(),level = col_character(),age = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/textbook/tables/8.out", col_types = cols(level = col_character(),meanage = col_integer()))

df2 <- input1 %>% filter(level != 'JR')
df3 <- df2 %>% group_by(level) %>% summarise(meanage = mean(age)) %>% ungroup()
out <- df3 %>% select(level, meanage) %>% arrange(level)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `level`,
       `meanage`
FROM
  (SELECT `level`,
          AVG(`age`) AS `meanage`
   FROM
     (SELECT *
      FROM `input1`
      WHERE (`level` != 'JR'))
   GROUP BY LEVEL)
ORDER BY LEVEL
