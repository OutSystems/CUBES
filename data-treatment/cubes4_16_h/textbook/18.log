[     1.588][MainProcess][INFO] Parsing specification...
[     1.591][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.591][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.592][MainProcess][DEBUG] Reading input files...
[     1.599][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/18-1.txt: ['string', 'string', 'int64']
[     1.604][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/18-3.txt: ['string', 'string']
[     1.609][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/18.out: ['string', 'string']
[     1.636][MainProcess][DEBUG] Generating DSL...
[     1.657][MainProcess][INFO] Creating 16 processes
[     1.735][MainProcess][DEBUG] Increasing generator loc to 2
[     1.735][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.735][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.736][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.748][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.752][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.755][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.770][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.772][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.774][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.779][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.974][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.975][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.976][cube-solver-1][WARNING] There is no solution for current loc (1).
[     1.977][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.976][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.978][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.045][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.057][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.058][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.060][cube-solver-6][DEBUG] Solving cube (l0 = summarise([1]), l1 = cross_join())
[     2.060][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = mutate())
[     2.064][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = inner_join())
[     2.070][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = left_join())
[     2.087][cube-solver-9][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join3())
[     2.107][cube-solver-10][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join4())
[     2.116][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = summarise([7]))
[     2.123][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.124][cube-solver-15][DEBUG] Solving cube (l0 = summarise([8]), l1 = union())
[     2.125][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([8]))
[     2.132][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([8]))
[     2.167][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([11]))
[     2.179][cube-solver-4][DEBUG] Solving cube (l0 = anti_join([2]), l1 = mutate())
[     2.186][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.189][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([11]))
[     2.288][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.292][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.296][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.348][cube-solver-1][DEBUG] Solving cube (l0 = summarise([17]), l1 = semi_join())
[     2.355][cube-solver-12][DEBUG] Solving cube (l0 = summarise([17]), l1 = filter())
[     2.364][cube-solver-13][DEBUG] Solving cube (l0 = summarise([18]), l1 = anti_join([12]))
[     2.373][cube-solver-12][DEBUG] Solving cube (l0 = union(), l1 = summarise([18]))
[     2.517][cube-solver-0][DEBUG] Solving cube (l0 = summarise([27]), l1 = intersect())
[     2.699][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise([4]), l1 = natural_join3())
[     2.700][MainProcess][INFO] Statistics:
[     2.701][MainProcess][INFO] 	Generated cubes: 28
[     2.701][MainProcess][INFO] 	Attempted programs: 4
[     2.701][MainProcess][INFO] 		Rejected: 1
[     2.701][MainProcess][INFO] 		Failed: 2
[     2.701][MainProcess][INFO] 	Blacklist clauses: 43
[     2.701][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.702][MainProcess][DEBUG] 	0: Counter({'summarise': 222, 'natural_join': 69, 'left_join': 65, 'union': 22, 'anti_join': 7})
[     2.702][MainProcess][DEBUG] 	1: Counter({'summarise': 94, 'left_join': 75, 'mutate': 69, 'natural_join3': 45, 'natural_join': 43, 'union': 41, 'semi_join': 18})
[     2.702][MainProcess][INFO] Solution found: natural_join3(summarise(@param0, cost = max(cost), P_id), @param0, @param1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/18-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/18-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/18.out", col_types = cols(P_id = col_character(),S_name = col_character()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = max(cost)) %>% ungroup()
df4 <- inner_join(df3, input1) %>% inner_join(input2)
out <- df4 %>% select(P_id, S_name) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_id,
       S_name
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.cost AS cost,
          LHS.S_key AS S_key,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.cost AS cost,
             RHS.S_key AS S_key
      FROM
        (SELECT P_id,
                MAX(cost) AS cost
         FROM input1
         GROUP BY P_id) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id
                                   AND LHS.cost = RHS.cost)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY P_id
