[     1.565][MainProcess][INFO] Parsing specification...
[     1.569][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.569][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.570][MainProcess][DEBUG] Reading input files...
[     1.577][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.581][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     1.586][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/employees.txt: ['int64', 'string', 'float64']
[     1.591][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/31.out: ['string']
[     1.621][MainProcess][DEBUG] Generating DSL...
[     1.645][MainProcess][INFO] Creating 16 processes
[     1.713][MainProcess][DEBUG] Increasing generator loc to 2
[     1.713][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.713][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.714][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.714][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.714][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.718][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.720][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.728][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.732][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.732][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.735][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.753][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.755][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.760][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.774][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.083][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.083][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     2.085][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.359][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.369][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     2.374][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.376][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.379][cube-solver-8][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.381][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([1]))
[     2.385][cube-solver-8][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([1]))
[     2.387][MainProcess][DEBUG] Increasing generator loc to 3
[     2.388][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.388][cube-solver-9][DEBUG] Solving cube (l0 = filter([1]), l1 = left_join())
[     2.392][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.399][cube-solver-14][DEBUG] Solving cube (l0 = filter([2]), l1 = inner_join())
[     2.406][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.417][cube-solver-4][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join())
[     2.421][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.428][cube-solver-11][DEBUG] Solving cube (l0 = filter([2]), l1 = intersect())
[     2.435][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.456][cube-solver-7][DEBUG] Solving cube (l0 = filter([4]), l1 = filter([4]))
[     2.458][cube-solver-10][DEBUG] Solving cube (l0 = filter([4]), l1 = union())
[     2.464][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.465][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.489][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([5]))
[     2.497][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([5]))
[     2.498][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.503][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.533][cube-solver-12][DEBUG] Solving cube (l0 = filter([5]), l1 = semi_join())
[     2.541][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.673][cube-solver-5][DEBUG] Solving cube (l0 = filter([6]), l1 = natural_join3())
[     2.681][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([7]))
[     2.692][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.807][cube-solver-13][DEBUG] Solving cube (l0 = filter([14]), l1 = cross_join())
[     2.819][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.892][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([16]))
[     2.910][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([16]))
[     2.918][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.467][cube-solver-9][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([20]), l2 = natural_join3())
[     3.522][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([20]), l2 = filter([20]))
[     3.539][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([1]), l1 = union(), l2 = filter([20]))
[     3.606][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = natural_join4())
[     3.614][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = left_join())
[     3.657][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = natural_join([2]))
[     3.734][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = anti_join())
[     3.765][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = semi_join())
[     3.826][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([20]))
[     3.842][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = filter([20]))
[     3.846][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = filter([20]))
[     3.879][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = union())
[     3.944][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = intersect())
[     4.131][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = inner_join())
[     4.189][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = cross_join())
[     7.164][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     7.749][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     8.141][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([20]))
[     8.712][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join(), l2 = filter([20]))
[     9.331][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join(), l2 = filter([20]))
[    11.057][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]), l2 = filter([20]))
[    11.361][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3([2]), l2 = filter([20]))
[    11.372][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join4(), l2 = filter([20]))
[    11.382][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = natural_join([2]))
[    11.451][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = natural_join3([2]))
[    11.530][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = natural_join4())
[    11.663][cube-solver-7][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = filter([20]))
[    11.771][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = anti_join())
[    14.693][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = left_join())
[    15.015][cube-solver-8][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = anti_join())
[    15.017][MainProcess][INFO] Statistics:
[    15.017][MainProcess][INFO] 	Generated cubes: 49
[    15.017][MainProcess][INFO] 	Attempted programs: 1500
[    15.017][MainProcess][INFO] 		Rejected: 628
[    15.017][MainProcess][INFO] 		Failed: 871
[    15.017][MainProcess][INFO] 	Blacklist clauses: 24
[    15.017][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    15.019][MainProcess][DEBUG] 	0: Counter({'filter': 1677, 'natural_join3': 480})
[    15.021][MainProcess][DEBUG] 	1: Counter({'natural_join4': 1197, 'natural_join3': 480, 'filter': 480})
[    15.021][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    15.027][MainProcess][DEBUG] 	0: Counter({'natural_join': 9638, 'natural_join3': 2131})
[    15.032][MainProcess][DEBUG] 	1: Counter({'filter': 8605, 'union': 960, 'left_join': 960, 'natural_join': 519, 'inner_join': 447, 'semi_join': 280})
[    15.037][MainProcess][DEBUG] 	2: Counter({'filter': 3601, 'natural_join4': 1626, 'natural_join': 1428, 'natural_join3': 1338, 'left_join': 983, 'union': 960, 'inner_join': 784, 'semi_join': 560, 'anti_join': 494})
[    15.038][MainProcess][INFO] Solution found: anti_join(natural_join3(@param1, @param2, @param0), filter(natural_join3(@param1, @param2, @param0), str_detect(aname, 'Boeing') | crusingrange <= 3000), 'crusingrange', 'salary')
[    15.512][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/employees.txt", col_types = cols(eid = col_integer(),ename = col_character(),salary = col_double()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/31.out", col_types = cols(ename = col_character()))

df4 <- inner_join(input2, input3) %>% inner_join(input1)
df5 <- df4 %>% filter(str_detect(aname, 'Boeing') | crusingrange <= 3000)
df6 <- anti_join(df4, df5, by=c('crusingrange', 'salary'))
out <- df6 %>% select(ename) %>% distinct() %>% arrange(ename)

Failed to generate SQL query
