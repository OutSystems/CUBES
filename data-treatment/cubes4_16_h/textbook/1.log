[     1.569][MainProcess][INFO] Parsing specification...
[     1.573][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.573][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.574][MainProcess][DEBUG] Reading input files...
[     1.582][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/1-1.txt: ['string', 'string']
[     1.586][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/1-2.txt: ['string', 'string']
[     1.592][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/1-3.txt: ['string', 'string']
[     1.597][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/1-4.txt: ['string', 'string', 'string']
[     1.601][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/1.out: ['string']
[     1.633][MainProcess][DEBUG] Generating DSL...
[     1.667][MainProcess][INFO] Creating 16 processes
[     1.735][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.735][MainProcess][DEBUG] Increasing generator loc to 2
[     1.737][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.739][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.741][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.747][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.751][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.752][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.756][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.760][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.764][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.768][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.771][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.776][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.777][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.788][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.818][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.231][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.232][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     2.234][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.024][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     3.031][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     3.040][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     3.040][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     3.042][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     3.042][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     3.043][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     3.046][cube-solver-4][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     3.047][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     3.049][MainProcess][DEBUG] Increasing generator loc to 3
[     3.050][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.051][cube-solver-4][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     3.051][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     3.052][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     3.052][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.053][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.054][cube-solver-12][DEBUG] Solving cube (l0 = filter(), l1 = semi_join())
[     3.056][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     3.056][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.058][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.057][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     3.061][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.062][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     3.063][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     3.064][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.065][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.068][cube-solver-14][DEBUG] Solving cube (l0 = filter(), l1 = inner_join())
[     3.071][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.075][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     3.080][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     3.093][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     3.102][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.139][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([5]))
[     3.150][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     3.534][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([24]))
[     3.557][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.816][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([32]), l2 = filter([32]))
[     4.840][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join(), l2 = filter([32]))
[     4.880][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect(), l2 = filter([32]))
[     4.885][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join(), l2 = filter([32]))
[     4.898][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join(), l2 = filter([32]))
[     4.901][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join(), l2 = filter([32]))
[     4.911][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join(), l2 = filter([32]))
[     4.916][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3(), l2 = filter([32]))
[     4.920][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([32]), l2 = natural_join3())
[     4.926][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4([15]), l2 = filter([32]))
[     4.929][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([32]), l2 = natural_join())
[     4.947][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([32]), l2 = natural_join3())
[     4.967][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([32]), l2 = semi_join())
[     4.969][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([32]), l2 = anti_join())
[     4.989][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3([1]), l1 = filter([32]), l2 = natural_join4([15]))
[     5.006][cube-solver-7][DEBUG] Solving cube (l0 = natural_join3([1]), l1 = filter([32]), l2 = filter([32]))
[     5.049][cube-solver-7][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([32]), l2 = anti_join())
[     5.051][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([4]), l1 = filter([32]), l2 = cross_join())
[     5.088][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3([5]), l1 = filter([32]), l2 = left_join())
[     5.088][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([5]), l1 = filter([32]), l2 = intersect())
[     5.129][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3([7]), l1 = filter([32]), l2 = union())
[     5.215][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([5]), l1 = filter([32]), l2 = left_join())
[     5.215][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([5]), l1 = filter([32]), l2 = inner_join())
[     5.224][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([5]), l1 = filter([32]), l2 = natural_join([5]))
[     5.230][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([5]), l1 = left_join(), l2 = filter([32]))
[     5.243][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3([12]), l1 = filter([32]), l2 = intersect())
[     5.255][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3([13]), l1 = filter([32]), l2 = semi_join())
[     5.265][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3([13]), l1 = filter([32]), l2 = cross_join())
[     5.268][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3([13]), l1 = filter([32]), l2 = inner_join())
[     5.287][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([5]), l1 = filter([32]), l2 = union())
[     5.287][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([5]), l1 = filter([32]), l2 = natural_join4([15]))
[     5.321][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3([15]), l1 = anti_join(), l2 = filter([32]))
[     5.462][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([6]), l1 = union(), l2 = filter([32]))
[     5.500][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = left_join(), l2 = filter([32]))
[     7.580][cube-solver-3][DEBUG] Found solution with cube (l0 = natural_join4(), l1 = filter())
[     7.581][MainProcess][INFO] Statistics:
[     7.581][MainProcess][INFO] 	Generated cubes: 56
[     7.581][MainProcess][INFO] 	Attempted programs: 138
[     7.581][MainProcess][INFO] 		Rejected: 39
[     7.582][MainProcess][INFO] 		Failed: 98
[     7.582][MainProcess][INFO] 	Blacklist clauses: 69
[     7.582][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     7.582][MainProcess][DEBUG] 	0: Counter({'natural_join4': 471})
[     7.583][MainProcess][DEBUG] 	1: Counter({'filter': 471})
[     7.583][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     7.583][MainProcess][DEBUG] 	0: Counter({'natural_join3': 274})
[     7.583][MainProcess][DEBUG] 	1: Counter({'left_join': 250, 'anti_join': 24})
[     7.584][MainProcess][DEBUG] 	2: Counter({'filter': 274})
[     7.584][MainProcess][INFO] Solution found: filter(natural_join4(@param3, @param1, @param0, @param2), F_name == 'faculty1' & level == 'JR')
[     8.001][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join3([16]), l1 = left_join(), l2 = filter([32]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/1-1.txt", col_types = cols(C_name = col_character(),F_key = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/1-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/1-3.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input3 <- copy_to(con, input3)
input4 <- read_csv("tests-examples/textbook/tables/1-4.txt", col_types = cols(S_key = col_character(),S_name = col_character(),level = col_character()))
input4 <- copy_to(con, input4)
expected_output <- read_csv("tests-examples/textbook/tables/1.out", col_types = cols(S_name = col_character()))

df5 <- inner_join(input4, input2) %>% inner_join(input1) %>% inner_join(input3)
df6 <- df5 %>% filter(F_name == 'faculty1' & level == 'JR')
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`S_name` AS `S_name`,
          `LHS`.`level` AS `level`,
          `LHS`.`C_name` AS `C_name`,
          `LHS`.`F_key` AS `F_key`,
          `RHS`.`F_name` AS `F_name`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`S_name` AS `S_name`,
             `LHS`.`level` AS `level`,
             `LHS`.`C_name` AS `C_name`,
             `RHS`.`F_key` AS `F_key`
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`S_name` AS `S_name`,
                `LHS`.`level` AS `level`,
                `RHS`.`C_name` AS `C_name`
         FROM `input4` AS `LHS`
         INNER JOIN `input2` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`C_name` = `RHS`.`C_name`)) AS `LHS`
   INNER JOIN `input3` AS `RHS` ON (`LHS`.`F_key` = `RHS`.`F_key`))
WHERE (`F_name` = 'faculty1'
       AND `level` = 'JR')
ORDER BY S_name
