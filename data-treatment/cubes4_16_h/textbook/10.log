[     1.578][MainProcess][INFO] Parsing specification...
[     1.592][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.593][MainProcess][DEBUG] Reading input files...
[     1.602][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/10-1.txt: ['string', 'string']
[     1.608][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/10-2.txt: ['string', 'string']
[     1.613][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/10.out: ['string']
[     1.642][MainProcess][DEBUG] Generating DSL...
[     1.662][MainProcess][INFO] Creating 16 processes
[     1.726][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.726][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.726][MainProcess][DEBUG] Increasing generator loc to 3
[     1.726][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.726][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.727][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.728][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.732][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.736][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.739][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.744][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.756][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.758][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.763][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.764][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.772][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.032][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.033][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.034][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.131][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.132][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.133][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.222][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.222][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.224][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.270][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.271][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.273][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.284][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.289][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.289][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.294][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.298][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.300][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.305][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.310][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.312][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     2.317][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.318][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     2.324][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.335][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = summarise())
[     2.341][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     2.353][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([1]), l2 = filter([1]))
[     2.363][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     2.368][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([2]), l2 = intersect())
[     2.369][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([2]), l2 = summarise([2]))
[     2.377][cube-solver-13][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([2]), l2 = semi_join())
[     2.454][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([3]), l2 = summarise([5]))
[     2.465][cube-solver-5][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter([3]), l2 = cross_join())
[     2.499][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([6]), l2 = filter([3]))
[     2.511][cube-solver-12][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([4]), l2 = mutate())
[     2.521][cube-solver-12][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([4]), l2 = inner_join())
[     2.625][cube-solver-7][DEBUG] Solving cube (l0 = summarise([6]), l1 = anti_join(), l2 = filter([4]))
[     2.628][cube-solver-15][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.629][MainProcess][INFO] Statistics:
[     2.629][MainProcess][INFO] 	Generated cubes: 34
[     2.629][MainProcess][INFO] 	Attempted programs: 15
[     2.629][MainProcess][INFO] 		Rejected: 4
[     2.629][MainProcess][INFO] 		Failed: 10
[     2.629][MainProcess][INFO] 	Blacklist clauses: 10
[     2.630][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.630][MainProcess][DEBUG] 	0: Counter({'summarise': 52, 'natural_join': 48})
[     2.630][MainProcess][DEBUG] 	1: Counter({'filter': 52, 'mutate': 32, 'summarise': 16})
[     2.630][MainProcess][DEBUG] 	2: Counter({'filter': 48, 'natural_join': 14, 'union': 14, 'natural_join3': 7, 'anti_join': 6, 'left_join': 5, 'semi_join': 4, 'inner_join': 2})
[     2.631][MainProcess][INFO] Solution found: left_join(filter(summarise(@param0, n = n(), S_key), n == max(n)), @param1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/10-1.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/10-2.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/10.out", col_types = cols(S_name = col_character()))

df3 <- input1 %>% group_by(S_key) %>% summarise(n = n()) %>% ungroup()
df4 <- df3 %>% filter(n == max(n))
df5 <- left_join(df4, input2)
out <- df5 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.n AS n,
          RHS.S_name AS S_name
   FROM
     (SELECT S_key,
             n
      FROM
        (SELECT S_key,
                n,
                MAX(n) OVER () AS zzz3
         FROM
           (SELECT S_key,
                   COUNT() AS n
            FROM input1
            GROUP BY S_key))
      WHERE (n = zzz3)) AS LHS
   LEFT JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_name
