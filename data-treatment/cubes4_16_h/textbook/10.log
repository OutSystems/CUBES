[     1.585][MainProcess][INFO] Parsing specification...
[     1.588][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.589][MainProcess][DEBUG] Reading input files...
[     1.595][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/10-1.txt: ['string', 'string']
[     1.600][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/10-2.txt: ['string', 'string']
[     1.604][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/10.out: ['string']
[     1.632][MainProcess][DEBUG] Generating DSL...
[     1.649][MainProcess][INFO] Creating 16 processes
[     1.709][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.709][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.709][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.709][MainProcess][DEBUG] Increasing generator loc to 3
[     1.709][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.710][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.710][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.714][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.718][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.722][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.725][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.729][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.738][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.742][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.745][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.747][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.976][cube-solver-3][WARNING] There is no solution for current loc (2).
[     1.977][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     1.979][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.011][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.011][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.013][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.060][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.060][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.062][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.134][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.136][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.137][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.139][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.139][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.141][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.144][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.146][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.148][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.148][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.148][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.149][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.150][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.151][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.152][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.152][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.154][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.159][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.163][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = intersect())
[     2.167][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.168][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.172][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = semi_join())
[     2.172][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = cross_join())
[     2.191][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise([3]))
[     2.196][cube-solver-5][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = mutate())
[     2.199][cube-solver-5][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = inner_join())
[     2.283][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([5]), l2 = filter([3]))
[     2.293][cube-solver-12][DEBUG] Solving cube (l0 = summarise([5]), l1 = anti_join(), l2 = filter([3]))
[     2.487][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = summarise([6]))
[     2.494][cube-solver-13][DEBUG] Solving cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([4]))
[     2.584][cube-solver-3][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter([4]))
[     2.598][cube-solver-7][DEBUG] Solving cube (l0 = summarise([6]), l1 = union(), l2 = filter([4]))
[     2.609][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.610][MainProcess][INFO] Statistics:
[     2.610][MainProcess][INFO] 	Generated cubes: 36
[     2.611][MainProcess][INFO] 	Attempted programs: 10
[     2.611][MainProcess][INFO] 		Rejected: 9
[     2.611][MainProcess][INFO] 		Failed: 0
[     2.611][MainProcess][INFO] 	Blacklist clauses: 10
[     2.611][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.611][MainProcess][DEBUG] 	0: Counter({'summarise': 105, 'natural_join': 57})
[     2.611][MainProcess][DEBUG] 	1: Counter({'filter': 85, 'mutate': 32, 'summarise': 25, 'anti_join': 14, 'left_join': 6})
[     2.612][MainProcess][DEBUG] 	2: Counter({'filter': 77, 'union': 22, 'left_join': 20, 'natural_join3': 14, 'anti_join': 14, 'semi_join': 9, 'inner_join': 6})
[     2.612][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param0, @param1), n = n(), S_name), n == max(n))
[     2.964][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     3.111][cube-solver-3][DEBUG] Found solution with cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter([4]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/10-1.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/10-2.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/10.out", col_types = cols(S_name = col_character()))

df3 <- inner_join(input1, input2)
df4 <- df3 %>% group_by(S_name) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(n == max(n))
out <- df5 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT S_name,
          n
   FROM
     (SELECT S_name,
             n,
             MAX(n) OVER () AS zzz3
      FROM
        (SELECT S_name,
                COUNT() AS n
         FROM
           (SELECT LHS.S_key AS S_key,
                   LHS.C_name AS C_name,
                   RHS.S_name AS S_name
            FROM input1 AS LHS
            INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key))
         GROUP BY S_name))
   WHERE (n = zzz3))
ORDER BY S_name
