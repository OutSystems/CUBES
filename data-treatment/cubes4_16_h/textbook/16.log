[     1.580][MainProcess][INFO] Parsing specification...
[     1.583][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.583][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.583][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.584][MainProcess][DEBUG] Reading input files...
[     1.591][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/16-1.txt: ['string', 'string']
[     1.596][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/16-2.txt: ['string', 'string']
[     1.601][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/16-3.txt: ['string', 'string']
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/16.out: ['string']
[     1.635][MainProcess][DEBUG] Generating DSL...
[     1.655][MainProcess][INFO] Creating 16 processes
[     1.724][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.725][MainProcess][DEBUG] Increasing generator loc to 3
[     1.726][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.726][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.727][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.732][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.735][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.742][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.746][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.763][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.763][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.767][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.769][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.772][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.084][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.085][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.086][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.115][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.115][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.117][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.231][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.231][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.233][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.294][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.295][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.296][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.404][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.410][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.414][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.416][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.416][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.418][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.426][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.430][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.431][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.436][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.438][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([1]), l2 = filter())
[     2.440][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = filter())
[     2.442][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.443][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = anti_join())
[     2.444][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = left_join())
[     2.447][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = intersect())
[     2.447][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = union())
[     2.449][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = semi_join())
[     2.450][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = cross_join())
[     2.453][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = inner_join())
[     2.453][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = mutate())
[     2.454][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = anti_join(), l2 = filter())
[     2.456][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = left_join(), l2 = filter())
[     2.457][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = union(), l2 = filter())
[     2.457][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([2]))
[     2.459][cube-solver-14][DEBUG] Solving cube (l0 = summarise([2]), l1 = intersect(), l2 = filter([1]))
[     2.460][cube-solver-4][DEBUG] Solving cube (l0 = summarise([2]), l1 = semi_join(), l2 = filter([1]))
[     2.463][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = cross_join(), l2 = filter([1]))
[     2.463][cube-solver-4][DEBUG] Solving cube (l0 = summarise([2]), l1 = mutate(), l2 = filter([1]))
[     2.464][cube-solver-13][DEBUG] Solving cube (l0 = summarise([2]), l1 = inner_join(), l2 = filter([1]))
[     2.465][cube-solver-14][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join(), l2 = summarise([2]))
[     2.467][cube-solver-4][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join(), l2 = mutate())
[     2.469][cube-solver-15][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join3([2]), l2 = summarise([2]))
[     2.470][cube-solver-4][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join3([2]), l2 = mutate())
[     2.472][cube-solver-13][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join4(), l2 = summarise([2]))
[     2.472][cube-solver-14][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join4(), l2 = mutate())
[     2.476][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = mutate(), l2 = filter([1]))
[     2.658][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([8]), l2 = filter([4]))
[     2.675][cube-solver-12][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([8]), l2 = natural_join())
[     2.683][cube-solver-12][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([9]), l2 = natural_join3([2]))
[     2.704][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = summarise([9]))
[     2.718][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([9]), l2 = natural_join4())
[     2.726][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([10]), l2 = summarise([10]))
[     2.738][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([10]), l2 = filter([4]))
[     2.748][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([10]), l2 = anti_join())
[     2.753][cube-solver-3][DEBUG] Solving cube (l0 = summarise([10]), l1 = natural_join(), l2 = filter([4]))
[     2.757][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([10]), l2 = left_join())
[     2.765][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([10]), l2 = union())
[     2.769][cube-solver-3][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([10]), l2 = intersect())
[     2.774][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([10]), l2 = semi_join())
[     2.781][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([10]), l2 = cross_join())
[     2.784][cube-solver-3][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([10]), l2 = mutate())
[     2.789][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([11]), l2 = inner_join())
[     2.798][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = filter([4]), l2 = mutate())
[     2.798][cube-solver-3][DEBUG] Solving cube (l0 = filter([4]), l1 = filter([4]), l2 = summarise([11]))
[     2.803][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = anti_join(), l2 = summarise([11]))
[     2.812][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = anti_join(), l2 = mutate())
[     2.814][cube-solver-3][DEBUG] Solving cube (l0 = filter([4]), l1 = left_join(), l2 = summarise([11]))
[     2.816][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = left_join(), l2 = mutate())
[     2.820][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = union(), l2 = summarise([11]))
[     2.827][cube-solver-1][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join3([2]), l2 = filter([4]))
[     2.828][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = intersect(), l2 = summarise([11]))
[     2.828][cube-solver-3][DEBUG] Solving cube (l0 = filter([4]), l1 = union(), l2 = mutate())
[     2.833][cube-solver-3][DEBUG] Solving cube (l0 = filter([4]), l1 = intersect(), l2 = mutate())
[     2.837][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = semi_join(), l2 = summarise([11]))
[     2.837][cube-solver-3][DEBUG] Solving cube (l0 = filter([4]), l1 = semi_join(), l2 = mutate())
[     2.841][cube-solver-3][DEBUG] Solving cube (l0 = filter([4]), l1 = cross_join(), l2 = summarise([11]))
[     2.845][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = cross_join(), l2 = mutate())
[     2.849][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = mutate(), l2 = natural_join())
[     2.850][cube-solver-3][DEBUG] Solving cube (l0 = filter([4]), l1 = mutate(), l2 = natural_join3([2]))
[     2.853][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = mutate(), l2 = natural_join4())
[     2.934][cube-solver-0][DEBUG] Solving cube (l0 = summarise([16]), l1 = natural_join4(), l2 = filter([4]))
[     2.946][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = mutate(), l2 = summarise([16]))
[     2.957][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = mutate(), l2 = filter([4]))
[     2.962][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = mutate(), l2 = anti_join())
[     2.967][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = mutate(), l2 = left_join())
[     2.971][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = mutate(), l2 = union())
[     2.975][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = mutate(), l2 = intersect())
[     2.979][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = mutate(), l2 = semi_join())
[     2.982][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = mutate(), l2 = cross_join())
[     2.986][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = mutate(), l2 = mutate())
[     2.989][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = mutate(), l2 = inner_join())
[     2.994][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = inner_join(), l2 = summarise([18]))
[     3.005][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = inner_join(), l2 = mutate())
[     3.010][cube-solver-0][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([18]), l2 = filter([4]))
[     3.022][cube-solver-0][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([4]), l2 = summarise([18]))
[     3.033][cube-solver-0][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([4]), l2 = mutate())
[     3.038][cube-solver-0][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate(), l2 = filter([4]))
[     3.042][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([18]), l2 = filter([4]))
[     3.054][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([4]), l2 = summarise([18]))
[     3.065][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([4]), l2 = mutate())
[     3.070][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = mutate(), l2 = filter([4]))
[     3.075][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = summarise([18]), l2 = filter([4]))
[     3.085][cube-solver-2][DEBUG] Solving cube (l0 = summarise([18]), l1 = summarise([18]), l2 = filter([4]))
[     3.086][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = filter([4]), l2 = summarise([18]))
[     3.097][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = filter([4]), l2 = mutate())
[     3.102][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = mutate(), l2 = filter([4]))
[     3.106][cube-solver-0][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([19]), l2 = filter([4]))
[     3.118][cube-solver-2][DEBUG] Solving cube (l0 = intersect(), l1 = filter([4]), l2 = summarise([19]))
[     3.118][cube-solver-0][DEBUG] Solving cube (l0 = intersect(), l1 = filter([4]), l2 = mutate())
[     3.123][cube-solver-0][DEBUG] Solving cube (l0 = intersect(), l1 = mutate(), l2 = filter([4]))
[     3.128][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([19]), l2 = filter([4]))
[     3.139][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([4]), l2 = summarise([19]))
[     3.139][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([4]), l2 = mutate())
[     3.143][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate(), l2 = filter([4]))
[     3.148][cube-solver-0][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise([19]), l2 = filter([4]))
[     3.159][cube-solver-0][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([4]), l2 = mutate())
[     3.159][cube-solver-2][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([4]), l2 = summarise([19]))
[     3.163][cube-solver-0][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate(), l2 = filter([4]))
[     3.167][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join(), l2 = filter([4]))
[     3.169][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3([2]), l2 = filter([4]))
[     3.171][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4(), l2 = filter([4]))
[     3.178][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise([19]), l2 = filter([4]))
[     3.198][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = filter([4]), l2 = natural_join())
[     3.205][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = filter([4]), l2 = natural_join3([2]))
[     3.221][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = filter([4]), l2 = natural_join4())
[     3.536][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = filter([4]), l2 = summarise([21]))
[     3.558][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = filter([4]), l2 = filter([4]))
[     3.566][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = filter([4]), l2 = anti_join())
[     3.573][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = filter([4]), l2 = left_join())
[     3.579][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = filter([4]), l2 = union())
[     3.586][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = filter([4]), l2 = intersect())
[     3.592][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = filter([4]), l2 = semi_join())
[     3.598][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = filter([4]), l2 = cross_join())
[     3.604][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = filter([4]), l2 = mutate())
[     3.610][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = filter([4]), l2 = inner_join())
[     3.617][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join(), l2 = filter([4]))
[     3.623][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = left_join(), l2 = filter([4]))
[     3.629][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = union(), l2 = filter([4]))
[     3.635][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = intersect(), l2 = filter([4]))
[     3.641][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join(), l2 = filter([4]))
[     3.647][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join(), l2 = filter([4]))
[     3.652][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = mutate(), l2 = filter([4]))
[     3.658][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join(), l2 = filter([4]))
[     3.665][cube-solver-4][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise([21]), l2 = filter([4]))
[     3.686][cube-solver-4][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([4]), l2 = summarise([21]))
[     3.715][cube-solver-4][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([4]), l2 = mutate())
[     3.728][cube-solver-4][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate(), l2 = filter([4]))
[     3.733][MainProcess][DEBUG] Increasing generator loc to 4
[     3.734][cube-solver-4][DEBUG] Initialising process for 4 lines of code.
[     4.798][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([21]), l2 = natural_join(), l3 = filter([4]))
[     5.157][cube-solver-3][DEBUG] Initialising process for 4 lines of code.
[     5.358][cube-solver-11][DEBUG] Initialising process for 4 lines of code.
[     5.365][cube-solver-8][DEBUG] Initialising process for 4 lines of code.
[     5.778][cube-solver-2][DEBUG] Initialising process for 4 lines of code.
[     6.161][cube-solver-14][DEBUG] Initialising process for 4 lines of code.
[     6.189][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = natural_join3([2]), l3 = filter([4]))
[     6.331][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = summarise([21]), l3 = filter([4]))
[     6.373][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = filter([4]), l3 = natural_join4())
[     6.400][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = natural_join4(), l3 = filter([4]))
[     6.415][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = filter([4]), l3 = summarise([21]))
[     6.437][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = filter([4]), l3 = filter([4]))
[     6.451][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = filter([4]), l3 = anti_join())
[     6.823][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = filter([4]), l3 = natural_join([2]))
[     7.135][cube-solver-9][DEBUG] Initialising process for 4 lines of code.
[     7.198][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = filter([4]), l3 = natural_join3([2]))
[     8.042][cube-solver-1][DEBUG] Initialising process for 4 lines of code.
[     8.182][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = filter([4]), l3 = left_join())
[     8.858][cube-solver-15][DEBUG] Initialising process for 4 lines of code.
[     8.965][cube-solver-12][DEBUG] Initialising process for 4 lines of code.
[     9.056][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = filter([4]), l3 = union())
[     9.864][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = filter([4]), l3 = intersect())
[    10.023][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = filter([4]), l3 = semi_join())
[    11.763][cube-solver-0][DEBUG] Initialising process for 4 lines of code.
[    12.841][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = filter([4]), l3 = cross_join())
[    13.302][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = filter([4]), l3 = mutate())
[    13.327][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = filter([4]), l3 = inner_join())
[    15.719][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = anti_join(), l3 = filter([4]))
[    16.446][cube-solver-7][DEBUG] Initialising process for 4 lines of code.
[    16.768][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = union(), l3 = filter([4]))
[    17.433][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = left_join(), l3 = filter([4]))
[    17.571][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = intersect(), l3 = filter([4]))
[    18.612][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = semi_join(), l3 = filter([4]))
[    20.575][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = cross_join(), l3 = filter([4]))
[    21.469][cube-solver-5][DEBUG] Initialising process for 4 lines of code.
[    21.756][cube-solver-11][DEBUG] Found solution with cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = filter([4]), l3 = anti_join())
[    21.756][cube-solver-6][DEBUG] Initialising process for 4 lines of code.
[    21.757][MainProcess][INFO] Statistics:
[    21.757][MainProcess][INFO] 	Generated cubes: 167
[    21.757][MainProcess][INFO] 	Attempted programs: 7209
[    21.757][MainProcess][INFO] 		Rejected: 1122
[    21.757][MainProcess][INFO] 		Failed: 6086
[    21.757][MainProcess][INFO] 	Blacklist clauses: 29
[    21.757][MainProcess][DEBUG] Priting statistics for good programs of size 3
[    21.761][MainProcess][DEBUG] 	0: Counter({'filter': 4654, 'mutate': 3370, 'summarise': 1048, 'natural_join3': 752})
[    21.764][MainProcess][DEBUG] 	1: Counter({'filter': 3410, 'natural_join4': 2430, 'mutate': 2400, 'natural_join3': 1040, 'summarise': 544})
[    21.767][MainProcess][DEBUG] 	2: Counter({'natural_join4': 4450, 'summarise': 2022, 'filter': 1760, 'natural_join3': 1152, 'mutate': 440})
[    21.767][MainProcess][DEBUG] Priting statistics for good programs of size 4
[    21.769][MainProcess][DEBUG] 	0: Counter({'natural_join': 6620})
[    21.773][MainProcess][DEBUG] 	1: Counter({'summarise': 6620})
[    21.775][MainProcess][DEBUG] 	2: Counter({'filter': 4142, 'natural_join3': 1100, 'natural_join': 464, 'union': 448, 'left_join': 348, 'semi_join': 62, 'anti_join': 56})
[    21.777][MainProcess][DEBUG] 	3: Counter({'filter': 2478, 'natural_join3': 1111, 'union': 976, 'natural_join4': 650, 'natural_join': 464, 'left_join': 464, 'semi_join': 288, 'anti_join': 99, 'inner_join': 90})
[    21.777][MainProcess][INFO] Solution found: anti_join(summarise(@param1, n = n(), P_id, P_name), filter(natural_join(@param2, @param0), S_name != 'AWS'), )

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/16-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/16-2.txt", col_types = cols(P_id = col_character(),P_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/16-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/16.out", col_types = cols(P_name = col_character()))

df4 <- input2 %>% group_by(P_id, P_name) %>% summarise(n = n()) %>% ungroup()
df5 <- inner_join(input3, input1)
df6 <- df5 %>% filter(S_name != 'AWS')
df7 <- anti_join(df4, df6, by=c())
out <- df7 %>% select(P_name) %>% arrange(P_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `P_name`
FROM
  (SELECT *
   FROM
     (SELECT `P_id`,
             `P_name`,
             COUNT() AS `n`
      FROM `input2`
      GROUP BY `P_id`,
               `P_name`) AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT `LHS`.`S_key` AS `S_key`,
                     `LHS`.`S_name` AS `S_name`,
                     `RHS`.`P_id` AS `P_id`
              FROM `input3` AS `LHS`
              INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
           WHERE (`S_name` != 'AWS')) AS RHS
        WHERE (LHS.P_id = RHS.P_id) ))
ORDER BY P_name
