[     3.045][MainProcess][INFO] Parsing specification...
[     3.049][MainProcess][DEBUG] Reading input files...
[     3.057][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/11-1.txt: ['string', 'string']
[     3.062][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/11-2.txt: ['string', 'string']
[     3.066][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/11.out: ['string']
[     3.094][MainProcess][DEBUG] Generating DSL...
[     3.109][MainProcess][INFO] Creating 16 processes
[     3.172][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.172][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.173][MainProcess][DEBUG] Increasing generator loc to 2
[     3.173][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.173][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.173][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.173][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.173][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.174][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.177][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     3.184][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.190][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     3.195][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.200][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.202][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.209][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.217][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.245][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     3.267][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     3.274][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.276][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.278][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.311][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     3.311][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.313][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.314][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     3.314][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.314][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     3.320][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.325][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     3.328][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join())
[     3.332][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect())
[     3.333][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     3.335][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join())
[     3.338][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     3.341][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     3.344][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect())
[     3.345][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     3.346][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     3.349][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join())
[     3.350][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     3.351][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     3.352][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     3.354][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([1]))
[     3.355][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     3.357][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     3.359][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect())
[     3.360][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     3.362][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     3.364][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join())
[     3.366][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     3.368][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     3.370][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     3.372][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([3]), l1 = natural_join())
[     3.391][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     3.399][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.445][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.456][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     3.478][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     3.479][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.492][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.498][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([2]))
[     3.510][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join([2]))
[     3.514][cube-solver-3][DEBUG] Found solution with cube (l0 = anti_join(),)
[     3.515][MainProcess][INFO] Statistics:
[     3.515][MainProcess][INFO] 	Generated cubes: 45
[     3.515][MainProcess][INFO] 	Attempted programs: 18
[     3.516][MainProcess][INFO] 		Rejected: 9
[     3.516][MainProcess][INFO] 		Failed: 8
[     3.516][MainProcess][INFO] 	Blacklist clauses: 12
[     3.516][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     3.516][MainProcess][DEBUG] 	0: Counter({'union': 12, 'natural_join': 12, 'left_join': 12, 'inner_join': 10, 'semi_join': 8, 'anti_join': 7})
[     3.516][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     3.516][MainProcess][DEBUG] 	0: Counter({'anti_join': 8, 'natural_join': 7})
[     3.516][MainProcess][DEBUG] 	1: Counter({'natural_join': 8, 'semi_join': 6, 'left_join': 1})
[     3.517][MainProcess][INFO] Solution found: anti_join(@param0, @param1, )
[     3.635][cube-solver-10][DEBUG] Found solution with cube (l0 = anti_join([3]), l1 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/11-1.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/11-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/11.out", col_types = cols(S_name = col_character()))

df3 <- anti_join(input1, input2, by=c())
out <- df3 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM input2 AS RHS
        WHERE (LHS.S_key = RHS.S_key) ))
ORDER BY S_name
