[     1.606][MainProcess][INFO] Parsing specification...
[     1.609][MainProcess][DEBUG] Reading input files...
[     1.616][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/182.csv: ['int64', 'string']
[     1.620][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/182_o.csv: ['string']
[     1.646][MainProcess][DEBUG] Generating DSL...
[     1.663][MainProcess][INFO] Creating 16 processes
[     1.727][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.727][MainProcess][DEBUG] Increasing generator loc to 3
[     1.727][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.728][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.728][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.728][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.728][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.729][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.732][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.742][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.745][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.750][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.754][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.757][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.766][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.902][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     1.976][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.978][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.027][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.028][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.030][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.035][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.037][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.039][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.042][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.048][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.051][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.053][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.057][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.059][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.061][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.064][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.072][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = mutate())
[     2.075][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.117][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = mutate())
[     2.118][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[     2.121][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.122][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     2.132][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     2.137][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = intersect())
[     2.201][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.293][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[     2.295][MainProcess][INFO] Statistics:
[     2.295][MainProcess][INFO] 	Generated cubes: 30
[     2.295][MainProcess][INFO] 	Attempted programs: 9
[     2.295][MainProcess][INFO] 		Rejected: 8
[     2.295][MainProcess][INFO] 		Failed: 0
[     2.295][MainProcess][INFO] 	Blacklist clauses: 2
[     2.295][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.296][MainProcess][DEBUG] 	0: Counter({'mutate': 30, 'summarise': 17})
[     2.296][MainProcess][DEBUG] 	1: Counter({'filter': 47})
[     2.296][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.296][MainProcess][DEBUG] 	0: Counter({'summarise': 75})
[     2.297][MainProcess][DEBUG] 	1: Counter({'filter': 75})
[     2.297][MainProcess][DEBUG] 	2: Counter({'filter': 14, 'union': 13, 'natural_join': 12, 'summarise': 11, 'natural_join3': 11, 'left_join': 9, 'anti_join': 5})
[     2.297][MainProcess][INFO] Solution found: filter(summarise(@param0, n = n(), Email), n > 1)
[     2.518][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/182.csv", col_types = cols(Id = col_integer(),Email = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/182_o.csv", col_types = cols(Email = col_character()))

df2 <- input1 %>% group_by(Email) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 1)
out <- df3 %>% select(Email) %>% arrange(Email)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Email
FROM
  (SELECT Email,
          COUNT() AS n
   FROM input1
   GROUP BY Email)
WHERE (n > 1.0)
ORDER BY Email
