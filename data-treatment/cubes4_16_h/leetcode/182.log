[     3.016][MainProcess][INFO] Parsing specification...
[     3.022][MainProcess][DEBUG] Reading input files...
[     3.031][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/182.csv: ['int64', 'string']
[     3.036][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/182_o.csv: ['string']
[     3.069][MainProcess][DEBUG] Generating DSL...
[     3.103][MainProcess][INFO] Creating 16 processes
[     3.174][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.174][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.174][MainProcess][DEBUG] Increasing generator loc to 3
[     3.174][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.174][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.175][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.175][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.175][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.176][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.177][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.184][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.186][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.194][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.204][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.211][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     3.213][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     3.221][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     3.457][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     3.462][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.464][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.493][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.495][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.579][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.662][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.662][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.666][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     3.666][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     3.669][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     3.669][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     3.683][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.686][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     3.688][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = summarise())
[     3.695][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     3.698][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     3.713][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     3.719][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     3.721][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.735][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = summarise())
[     3.740][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     3.748][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = mutate())
[     3.753][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = intersect())
[     3.756][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[     3.757][MainProcess][INFO] Statistics:
[     3.757][MainProcess][INFO] 	Generated cubes: 29
[     3.758][MainProcess][INFO] 	Attempted programs: 9
[     3.758][MainProcess][INFO] 		Rejected: 8
[     3.758][MainProcess][INFO] 		Failed: 0
[     3.758][MainProcess][INFO] 	Blacklist clauses: 1
[     3.758][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.758][MainProcess][DEBUG] 	0: Counter({'mutate': 30, 'summarise': 15})
[     3.759][MainProcess][DEBUG] 	1: Counter({'filter': 45})
[     3.759][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.759][MainProcess][DEBUG] 	0: Counter({'summarise': 10})
[     3.759][MainProcess][DEBUG] 	1: Counter({'filter': 10})
[     3.759][MainProcess][DEBUG] 	2: Counter({'filter': 4, 'natural_join': 3, 'summarise': 3})
[     3.759][MainProcess][INFO] Solution found: filter(summarise(@param0, n = n(), Email), n > 1)
[     3.883][cube-solver-11][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/182.csv", col_types = cols(Id = col_integer(),Email = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/182_o.csv", col_types = cols(Email = col_character()))

df2 <- input1 %>% group_by(Email) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 1)
out <- df3 %>% select(Email) %>% arrange(Email)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Email
FROM
  (SELECT Email,
          COUNT() AS n
   FROM input1
   GROUP BY Email)
WHERE (n > 1.0)
ORDER BY Email
