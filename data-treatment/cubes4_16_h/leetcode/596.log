[     1.578][MainProcess][INFO] Parsing specification...
[     1.581][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.581][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.582][MainProcess][DEBUG] Reading input files...
[     1.588][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/596.csv: ['string', 'string']
[     1.593][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/596_o.csv: ['string']
[     1.617][MainProcess][DEBUG] Generating DSL...
[     1.633][MainProcess][INFO] Creating 16 processes
[     1.692][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.692][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.692][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.693][MainProcess][DEBUG] Increasing generator loc to 3
[     1.693][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.694][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.694][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.694][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.695][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.695][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.701][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.702][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.713][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.720][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.720][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.721][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.723][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.844][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     1.942][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     1.946][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     1.955][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.955][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     1.957][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     1.957][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     1.959][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     1.961][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     1.964][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     1.967][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     1.971][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     1.974][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     1.975][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     1.977][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     1.978][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     1.988][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     1.991][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.070][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.074][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.127][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.128][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.131][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.135][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.141][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[     2.143][MainProcess][INFO] Statistics:
[     2.143][MainProcess][INFO] 	Generated cubes: 28
[     2.144][MainProcess][INFO] 	Attempted programs: 3
[     2.144][MainProcess][INFO] 		Rejected: 2
[     2.144][MainProcess][INFO] 		Failed: 0
[     2.144][MainProcess][INFO] 	Blacklist clauses: 0
[     2.144][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.145][MainProcess][DEBUG] 	0: Counter({'mutate': 26, 'summarise': 11})
[     2.145][MainProcess][DEBUG] 	1: Counter({'filter': 37})
[     2.146][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.146][MainProcess][DEBUG] 	0: Counter({'summarise': 51})
[     2.146][MainProcess][DEBUG] 	1: Counter({'filter': 41, 'natural_join': 10})
[     2.146][MainProcess][DEBUG] 	2: Counter({'filter': 17, 'summarise': 14, 'natural_join': 10, 'natural_join3': 8, 'anti_join': 2})
[     2.146][MainProcess][INFO] Solution found: filter(summarise(@param0, n = n(), class), n > 5)
[     2.217][cube-solver-14][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/596.csv", col_types = cols(student = col_character(),class = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/596_o.csv", col_types = cols(class = col_character()))

df2 <- input1 %>% group_by(class) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 5)
out <- df3 %>% select(class) %>% arrange(class)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT CLASS
FROM
  (SELECT CLASS,
          COUNT() AS n
   FROM input1
   GROUP BY CLASS)
WHERE (n > 5.0)
ORDER BY CLASS
