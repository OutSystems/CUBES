[     1.572][MainProcess][INFO] Parsing specification...
[     1.575][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.575][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.576][MainProcess][DEBUG] Reading input files...
[     1.592][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/596.csv: ['string', 'string']
[     1.598][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/596_o.csv: ['string']
[     1.624][MainProcess][DEBUG] Generating DSL...
[     1.643][MainProcess][INFO] Creating 16 processes
[     1.724][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.724][MainProcess][DEBUG] Increasing generator loc to 3
[     1.724][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.725][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.725][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.726][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.726][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.725][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.734][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.744][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.745][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.757][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.772][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.772][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.968][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.019][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.022][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.130][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.131][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.135][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.135][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.138][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.138][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.141][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.170][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter([2]))
[     2.170][cube-solver-1][DEBUG] Solving cube (l0 = filter([2]), l1 = summarise())
[     2.174][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.177][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]), l2 = summarise())
[     2.180][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = summarise())
[     2.210][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([2]))
[     2.216][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = filter([2]))
[     2.221][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.222][MainProcess][INFO] Statistics:
[     2.223][MainProcess][INFO] 	Generated cubes: 25
[     2.223][MainProcess][INFO] 	Attempted programs: 2
[     2.223][MainProcess][INFO] 		Rejected: 0
[     2.223][MainProcess][INFO] 		Failed: 1
[     2.223][MainProcess][INFO] 	Blacklist clauses: 2
[     2.223][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.224][MainProcess][DEBUG] 	0: Counter({'summarise': 25, 'mutate': 1})
[     2.224][MainProcess][DEBUG] 	1: Counter({'filter': 26})
[     2.224][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.224][MainProcess][DEBUG] 	0: Counter({'summarise': 3})
[     2.224][MainProcess][DEBUG] 	1: Counter({'filter': 3})
[     2.224][MainProcess][DEBUG] 	2: Counter({'summarise': 1, 'natural_join': 1, 'natural_join3': 1})
[     2.225][MainProcess][INFO] Solution found: natural_join(filter(summarise(@param0, n = n(), class), n > 5), summarise(@param0, n = n(), class))
[     2.421][cube-solver-11][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.494][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[     2.529][cube-solver-15][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter([2]), l2 = filter([2]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/596.csv", col_types = cols(student = col_character(),class = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/596_o.csv", col_types = cols(class = col_character()))

df2 <- input1 %>% group_by(class) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 5)
df4 <- inner_join(df3, df2)
out <- df4 %>% select(class) %>% arrange(class)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT CLASS
FROM
  (SELECT LHS.class AS CLASS,
          LHS.n AS n
   FROM
     (SELECT *
      FROM
        (SELECT CLASS,
                COUNT() AS n
         FROM input1
         GROUP BY CLASS)
      WHERE (n > 5.0)) AS LHS
   INNER JOIN
     (SELECT CLASS,
             COUNT() AS n
      FROM input1
      GROUP BY CLASS) AS RHS ON (LHS.class = RHS.class
                                 AND LHS.n = RHS.n))
ORDER BY CLASS
