[     3.285][MainProcess][INFO] Parsing specification...
[     3.299][MainProcess][DEBUG] Reading input files...
[     3.311][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/178.csv: ['int64', 'float64']
[     3.318][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/178_o.csv: ['float64', 'int64']
[     3.357][MainProcess][DEBUG] Generating DSL...
[     3.683][MainProcess][INFO] Creating 16 processes
[     3.763][MainProcess][DEBUG] Increasing generator loc to 2
[     4.039][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     4.042][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     4.046][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     4.046][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     4.053][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     4.055][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     4.067][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     4.076][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     4.080][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     4.085][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     4.088][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     4.097][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     4.098][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     4.123][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     4.129][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     4.148][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     8.729][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     8.797][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     8.989][cube-solver-1][DEBUG] Found solution with cube (l0 = mutate(),)
[     8.990][MainProcess][INFO] Statistics:
[     8.990][MainProcess][INFO] 	Generated cubes: 16
[     8.990][MainProcess][INFO] 	Attempted programs: 2
[     8.990][MainProcess][INFO] 		Rejected: 1
[     8.990][MainProcess][INFO] 		Failed: 0
[     8.991][MainProcess][INFO] 	Blacklist clauses: 0
[     8.991][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     8.991][MainProcess][DEBUG] 	0: Counter({'mutate': 19, 'summarise': 17})
[     8.991][MainProcess][INFO] Solution found: mutate(@param0, rankdScore = dense_rank(desc(Score)))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/178.csv", col_types = cols(Id = col_integer(),Score = col_double()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/178_o.csv", col_types = cols(Score = col_double(),Rank = col_integer()))

df2 <- input1 %>% mutate(rankdScore = dense_rank(desc(Score)))
out <- df2 %>% select(Score, Rank = rankdScore) %>% arrange(Score)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Score,
       DENSE_RANK() OVER (
                          ORDER BY Score DESC) AS Rank
FROM input1
ORDER BY Score
