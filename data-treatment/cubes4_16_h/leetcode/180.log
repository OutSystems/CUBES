[     3.432][MainProcess][INFO] Parsing specification...
[     3.437][MainProcess][DEBUG] Reading input files...
[     3.444][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/180.csv: ['int64', 'int64']
[     3.448][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/180_o.csv: ['int64']
[     3.477][MainProcess][DEBUG] Generating DSL...
[     3.549][MainProcess][INFO] Creating 16 processes
[     3.638][MainProcess][DEBUG] Increasing generator loc to 3
[     3.664][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.669][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.670][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.674][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.680][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.680][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.692][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.697][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.700][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.709][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.713][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     3.716][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.720][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.726][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     3.731][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.773][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     5.154][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     5.158][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     5.173][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     5.185][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     5.241][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise([2]))
[     5.367][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     5.449][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     5.478][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     6.665][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise([2]))
[     6.672][cube-solver-6][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join4(), l2 = summarise([2]))
[     6.676][cube-solver-6][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join4(), l2 = mutate())
[     6.679][cube-solver-6][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = natural_join())
[     6.692][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise([2]))
[     6.693][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([2]), l2 = summarise([2]))
[     6.699][cube-solver-10][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = natural_join3())
[     6.704][cube-solver-12][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = natural_join4())
[     6.704][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[     6.709][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = summarise([2]))
[     6.709][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([2]), l2 = mutate())
[     6.710][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([2]), l2 = summarise([2]))
[     6.711][cube-solver-12][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = filter())
[     6.714][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = anti_join())
[     6.714][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([2]), l2 = summarise([2]))
[     6.715][cube-solver-9][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = left_join())
[     6.719][cube-solver-8][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = union())
[     6.720][cube-solver-12][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = intersect())
[     6.725][cube-solver-4][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = semi_join())
[     6.730][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([2]), l2 = mutate())
[     6.735][cube-solver-13][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = cross_join())
[     6.803][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise([2]))
[     6.810][cube-solver-14][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = mutate())
[     6.817][cube-solver-14][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = inner_join())
[     6.904][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([2]), l2 = mutate())
[     6.912][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = summarise([2]))
[     6.937][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[     6.942][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = mutate())
[     7.009][cube-solver-13][DEBUG] Solving cube (l0 = summarise([2]), l1 = anti_join(), l2 = summarise([2]))
[     7.044][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate())
[     7.049][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = anti_join(), l2 = mutate())
[     7.252][cube-solver-14][DEBUG] Found solution with cube (l0 = summarise([2]), l1 = summarise([2]), l2 = inner_join())
[     7.254][MainProcess][INFO] Statistics:
[     7.254][MainProcess][INFO] 	Generated cubes: 39
[     7.254][MainProcess][INFO] 	Attempted programs: 41
[     7.254][MainProcess][INFO] 		Rejected: 11
[     7.254][MainProcess][INFO] 		Failed: 29
[     7.254][MainProcess][INFO] 	Blacklist clauses: 2
[     7.254][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     7.255][MainProcess][DEBUG] 	0: Counter({'mutate': 36, 'summarise': 16})
[     7.255][MainProcess][DEBUG] 	1: Counter({'mutate': 32, 'summarise': 20})
[     7.255][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     7.255][MainProcess][DEBUG] 	0: Counter({'summarise': 429})
[     7.256][MainProcess][DEBUG] 	1: Counter({'summarise': 328, 'filter': 62, 'anti_join': 39})
[     7.256][MainProcess][DEBUG] 	2: Counter({'natural_join': 62, 'natural_join3': 59, 'union': 58, 'summarise': 52, 'mutate': 49, 'semi_join': 43, 'left_join': 37, 'inner_join': 36, 'anti_join': 22, 'intersect': 12})
[     7.256][MainProcess][INFO] Solution found: inner_join(summarise(@param0, lagNum = lag(Num), Id, Num), summarise(@param0, leadNum = lead(Num), Id, Num), 'Num' = 'Id')
[     7.726][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/180.csv", col_types = cols(Id = col_integer(),Num = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/180_o.csv", col_types = cols(ConsecutiveNums = col_integer()))

df2 <- input1 %>% group_by(Id, Num) %>% summarise(lagNum = lag(Num)) %>% ungroup()
df3 <- input1 %>% group_by(Id, Num) %>% summarise(leadNum = lead(Num)) %>% ungroup()
df4 <- inner_join(df2, df3, by=c('Num' = 'Id'), suffix = c('', '.other'))
out <- df4 %>% select(ConsecutiveNums = Num.other) %>% distinct() %>% arrange(ConsecutiveNums)

Failed to generate SQL query
