[     1.584][MainProcess][INFO] Parsing specification...
[     1.587][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.588][MainProcess][DEBUG] Reading input files...
[     1.595][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/5-1.txt: ['string', 'string', 'string']
[     1.601][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/5-2.txt: ['string', 'string']
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/5.out: ['string']
[     1.632][MainProcess][DEBUG] Generating DSL...
[     1.653][MainProcess][INFO] Creating 16 processes
[     1.713][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.713][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.713][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.713][MainProcess][DEBUG] Increasing generator loc to 3
[     1.713][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.714][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.715][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.718][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.722][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.729][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.729][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.737][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.739][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.757][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.760][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.761][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.763][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.088][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.089][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.090][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.096][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.096][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.098][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.240][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.240][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.242][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.363][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.366][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.366][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.369][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.369][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.372][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.384][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.386][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.386][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.392][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.392][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.394][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.396][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.397][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.400][cube-solver-12][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = union())
[     2.400][cube-solver-8][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = left_join())
[     2.402][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.408][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = intersect())
[     2.415][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise([1]))
[     2.422][cube-solver-5][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([1]), l2 = semi_join())
[     2.429][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([2]))
[     2.436][cube-solver-15][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([2]), l2 = cross_join())
[     2.545][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([9]), l2 = filter([4]))
[     2.575][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = mutate())
[     2.577][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([4]))
[     2.583][cube-solver-14][DEBUG] Solving cube (l0 = summarise([10]), l1 = filter([4]), l2 = mutate())
[     2.586][cube-solver-11][DEBUG] Solving cube (l0 = summarise([10]), l1 = filter([4]), l2 = inner_join())
[     2.596][cube-solver-14][DEBUG] Solving cube (l0 = summarise([10]), l1 = anti_join(), l2 = filter([4]))
[     2.934][cube-solver-7][DEBUG] Solving cube (l0 = summarise([11]), l1 = left_join(), l2 = filter([4]))
[     2.946][cube-solver-2][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join(), l2 = filter([4]))
[     2.955][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = summarise([11]))
[     2.970][cube-solver-13][DEBUG] Solving cube (l0 = summarise([11]), l1 = union(), l2 = filter([4]))
[     3.015][cube-solver-0][DEBUG] Solving cube (l0 = summarise([11]), l1 = filter([4]), l2 = natural_join())
[     3.019][cube-solver-3][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join3(), l2 = filter([4]))
[     3.234][cube-solver-1][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join4(), l2 = filter([4]))
[     3.243][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise([9]), l2 = filter([4]))
[     3.244][MainProcess][INFO] Statistics:
[     3.245][MainProcess][INFO] 	Generated cubes: 36
[     3.245][MainProcess][INFO] 	Attempted programs: 13
[     3.245][MainProcess][INFO] 		Rejected: 12
[     3.245][MainProcess][INFO] 		Failed: 0
[     3.245][MainProcess][INFO] 	Blacklist clauses: 15
[     3.245][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     3.246][MainProcess][DEBUG] 	0: Counter({'summarise': 190, 'natural_join': 85})
[     3.246][MainProcess][DEBUG] 	1: Counter({'filter': 113, 'summarise': 45, 'mutate': 40, 'left_join': 26, 'union': 17, 'natural_join3': 13, 'natural_join': 11, 'anti_join': 10})
[     3.246][MainProcess][DEBUG] 	2: Counter({'filter': 162, 'union': 34, 'natural_join3': 27, 'left_join': 22, 'natural_join': 16, 'inner_join': 6, 'anti_join': 6, 'semi_join': 2})
[     3.246][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param0, @param1), n = n(), F_name), n == max(n))
[     3.407][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([11]), l1 = filter([4]), l2 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/5-1.txt", col_types = cols(C_name = col_character(),F_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/5-2.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/5.out", col_types = cols(F_name = col_character()))

df3 <- inner_join(input1, input2)
df4 <- df3 %>% group_by(F_name) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(n == max(n))
out <- df5 %>% select(F_name) %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT F_name
FROM
  (SELECT F_name,
          n
   FROM
     (SELECT F_name,
             n,
             MAX(n) OVER () AS zzz3
      FROM
        (SELECT F_name,
                COUNT() AS n
         FROM
           (SELECT LHS.C_name AS C_name,
                   LHS.F_key AS F_key,
                   LHS.Room AS Room,
                   RHS.F_name AS F_name
            FROM input1 AS LHS
            INNER JOIN input2 AS RHS ON (LHS.F_key = RHS.F_key))
         GROUP BY F_name))
   WHERE (n = zzz3))
ORDER BY F_name
