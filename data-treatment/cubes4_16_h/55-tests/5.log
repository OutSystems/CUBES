[     1.600][MainProcess][INFO] Parsing specification...
[     1.607][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.608][MainProcess][DEBUG] Reading input files...
[     1.616][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/5-1.txt: ['string', 'string', 'string']
[     1.622][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/5-2.txt: ['string', 'string']
[     1.626][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/5.out: ['string']
[     1.656][MainProcess][DEBUG] Generating DSL...
[     1.680][MainProcess][INFO] Creating 16 processes
[     1.765][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.765][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.765][MainProcess][DEBUG] Increasing generator loc to 3
[     1.765][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.766][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.766][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.766][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.767][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.767][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.770][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.775][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.786][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.788][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.795][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.804][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.810][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.830][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.220][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.221][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.223][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.394][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.394][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.396][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.505][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.506][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.509][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.545][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.552][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.556][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.563][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.569][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.570][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.570][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.570][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.572][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.577][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.581][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.584][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.613][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]), l2 = summarise([1]))
[     2.618][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([2]), l2 = left_join())
[     2.648][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]), l2 = mutate())
[     2.653][cube-solver-10][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([2]), l2 = union())
[     2.655][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([2]))
[     2.663][cube-solver-15][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([2]), l2 = intersect())
[     2.666][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([2]), l2 = summarise([4]))
[     2.676][cube-solver-5][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([2]), l2 = semi_join())
[     2.802][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.803][MainProcess][INFO] Statistics:
[     2.804][MainProcess][INFO] 	Generated cubes: 30
[     2.804][MainProcess][INFO] 	Attempted programs: 4
[     2.804][MainProcess][INFO] 		Rejected: 1
[     2.804][MainProcess][INFO] 		Failed: 2
[     2.804][MainProcess][INFO] 	Blacklist clauses: 6
[     2.804][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.805][MainProcess][DEBUG] 	0: Counter({'summarise': 42})
[     2.805][MainProcess][DEBUG] 	1: Counter({'filter': 42})
[     2.805][MainProcess][DEBUG] 	2: Counter({'natural_join': 11, 'anti_join': 10, 'natural_join3': 9, 'union': 6, 'left_join': 6})
[     2.805][MainProcess][INFO] Solution found: natural_join(filter(summarise(@param0, n = n(), F_key), n == max(n)), @param1)
[     2.929][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise([1]), l1 = filter([2]), l2 = left_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/5-1.txt", col_types = cols(C_name = col_character(),F_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/5-2.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/5.out", col_types = cols(F_name = col_character()))

df3 <- input1 %>% group_by(F_key) %>% summarise(n = n()) %>% ungroup()
df4 <- df3 %>% filter(n == max(n))
df5 <- inner_join(df4, input2)
out <- df5 %>% select(F_name) %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT F_name
FROM
  (SELECT LHS.F_key AS F_key,
          LHS.n AS n,
          RHS.F_name AS F_name
   FROM
     (SELECT F_key,
             n
      FROM
        (SELECT F_key,
                n,
                MAX(n) OVER () AS zzz3
         FROM
           (SELECT F_key,
                   COUNT() AS n
            FROM input1
            GROUP BY F_key))
      WHERE (n = zzz3)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.F_key = RHS.F_key))
ORDER BY F_name
