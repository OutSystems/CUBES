[     1.599][MainProcess][INFO] Parsing specification...
[     1.602][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.603][MainProcess][DEBUG] Reading input files...
[     1.609][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.612][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.616][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.620][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/37.out: ['string']
[     1.650][MainProcess][DEBUG] Generating DSL...
[     1.672][MainProcess][INFO] Creating 16 processes
[     1.735][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.735][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.735][MainProcess][DEBUG] Increasing generator loc to 2
[     1.736][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.741][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.747][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.749][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.755][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.762][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.765][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.769][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.769][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.780][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.793][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.084][cube-solver-1][WARNING] There is no solution for current loc (1).
[     2.085][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.086][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.100][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.100][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.102][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.243][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.247][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.248][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.249][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.251][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.252][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.252][cube-solver-8][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.254][cube-solver-8][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.254][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.256][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.256][cube-solver-10][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.258][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     2.258][cube-solver-10][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     2.260][cube-solver-8][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[     2.260][cube-solver-10][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     2.262][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[     2.262][cube-solver-10][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[     2.262][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.265][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     2.265][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     2.265][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.267][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     2.267][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     2.269][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     2.269][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     2.271][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     2.271][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     2.273][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     2.273][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join())
[     2.275][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     2.276][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[     2.277][cube-solver-8][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise())
[     2.278][cube-solver-7][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[     2.279][MainProcess][DEBUG] Increasing generator loc to 3
[     2.279][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.281][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.281][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.282][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.284][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.286][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.290][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.293][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.347][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3([2]))
[     2.356][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = summarise())
[     2.364][cube-solver-5][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = mutate())
[     2.365][MainProcess][INFO] Statistics:
[     2.366][MainProcess][INFO] 	Generated cubes: 51
[     2.366][MainProcess][INFO] 	Attempted programs: 3
[     2.366][MainProcess][INFO] 		Rejected: 0
[     2.366][MainProcess][INFO] 		Failed: 2
[     2.366][MainProcess][INFO] 	Blacklist clauses: 2
[     2.366][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.367][MainProcess][DEBUG] 	0: Counter({'mutate': 12, 'natural_join3': 4})
[     2.367][MainProcess][DEBUG] 	1: Counter({'natural_join3': 6, 'natural_join4': 6, 'mutate': 4})
[     2.367][MainProcess][INFO] Solution found: mutate(natural_join3(@param2, @param0, @param1), n = n())
[     2.380][cube-solver-6][DEBUG] Found solution with cube (l0 = mutate(), l1 = natural_join4())
[     2.407][cube-solver-10][DEBUG] Found solution with cube (l0 = mutate(), l1 = natural_join3())
[     2.409][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = summarise())
[     2.526][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join3([2]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/37.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input3, input1) %>% inner_join(input2)
df5 <- df4 %>% mutate(n = n())
out <- df5 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.S_name AS S_name,
          LHS.P_id AS P_id,
          RHS.color AS color
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.S_name AS S_name,
             RHS.P_id AS P_id
      FROM input3 AS LHS
      INNER JOIN input1 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.P_id = RHS.P_id))
ORDER BY S_name
