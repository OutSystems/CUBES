[     1.597][MainProcess][INFO] Parsing specification...
[     1.600][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.601][MainProcess][DEBUG] Reading input files...
[     1.606][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.610][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.613][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.617][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/37.out: ['string']
[     1.647][MainProcess][DEBUG] Generating DSL...
[     1.666][MainProcess][INFO] Creating 16 processes
[     1.730][MainProcess][DEBUG] Increasing generator loc to 2
[     1.730][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.730][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.731][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.731][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.731][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.732][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.744][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.747][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.749][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.751][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.756][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.758][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.774][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.781][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.783][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.009][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.010][cube-solver-1][WARNING] There is no solution for current loc (1).
[     2.010][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.011][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.012][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.012][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.060][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.065][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.067][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.069][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.070][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.073][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.073][cube-solver-8][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.074][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.076][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.076][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.077][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     2.078][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     2.079][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[     2.080][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     2.080][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[     2.081][cube-solver-6][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[     2.082][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.083][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     2.084][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     2.085][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     2.087][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     2.089][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     2.091][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     2.093][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     2.096][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     2.098][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     2.100][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join())
[     2.102][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     2.102][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.104][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[     2.104][cube-solver-11][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise())
[     2.106][MainProcess][DEBUG] Increasing generator loc to 3
[     2.106][cube-solver-11][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[     2.107][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.108][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.124][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.128][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.132][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.169][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.169][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([1]))
[     2.188][cube-solver-6][DEBUG] Found solution with cube (l0 = mutate(), l1 = natural_join4())
[     2.189][MainProcess][INFO] Statistics:
[     2.190][MainProcess][INFO] 	Generated cubes: 49
[     2.190][MainProcess][INFO] 	Attempted programs: 1
[     2.190][MainProcess][INFO] 		Rejected: 0
[     2.190][MainProcess][INFO] 		Failed: 0
[     2.190][MainProcess][INFO] 	Blacklist clauses: 1
[     2.190][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.190][MainProcess][DEBUG] 	0: Counter({'mutate': 12})
[     2.191][MainProcess][DEBUG] 	1: Counter({'natural_join3': 6, 'natural_join4': 6})
[     2.191][MainProcess][INFO] Solution found: natural_join4(@param0, mutate(@param2, n = n()), @param2, @param1)
[     2.218][cube-solver-8][DEBUG] Found solution with cube (l0 = mutate(), l1 = natural_join3())
[     2.231][cube-solver-5][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = mutate())
[     2.253][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise([1]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/37.out", col_types = cols(S_name = col_character()))

df4 <- input3 %>% mutate(n = n())
df5 <- inner_join(input1, df4) %>% inner_join(input3) %>% inner_join(input2)
out <- df5 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.P_id AS P_id,
          LHS.S_name AS S_name,
          LHS.n AS n,
          RHS.color AS color
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.P_id AS P_id,
             LHS.S_name AS S_name,
             LHS.n AS n
      FROM
        (SELECT LHS.S_key AS S_key,
                LHS.P_id AS P_id,
                RHS.S_name AS S_name,
                RHS.n AS n
         FROM input1 AS LHS
         INNER JOIN
           (SELECT S_key,
                   S_name,
                   COUNT(*) OVER () AS n
            FROM input3) AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
      INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key
                                   AND LHS.S_name = RHS.S_name)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.P_id = RHS.P_id))
ORDER BY S_name
