[     1.574][MainProcess][INFO] Parsing specification...
[     1.577][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.577][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.578][MainProcess][DEBUG] Reading input files...
[     1.586][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-1.txt: ['string', 'string', 'int64']
[     1.590][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-3.txt: ['string', 'string']
[     1.602][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18.out: ['string', 'string']
[     1.632][MainProcess][DEBUG] Generating DSL...
[     1.794][MainProcess][INFO] Creating 16 processes
[     1.859][MainProcess][DEBUG] Increasing generator loc to 2
[     1.983][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.987][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.989][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.995][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.995][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.997][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     2.003][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     2.007][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     2.011][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     2.018][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     2.020][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     2.023][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     2.028][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.034][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     2.083][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     2.150][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     5.158][cube-solver-1][WARNING] There is no solution for current loc (1).
[     5.159][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     5.167][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     5.350][cube-solver-0][WARNING] There is no solution for current loc (1).
[     5.351][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     5.359][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     8.322][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     8.353][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     8.362][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     8.378][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     8.379][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     8.386][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     8.395][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = summarise([1]))
[     8.396][cube-solver-12][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter())
[     8.410][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([1]))
[     8.420][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = left_join())
[     8.432][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join3())
[     8.437][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = cross_join())
[     8.446][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = mutate())
[     8.451][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     8.453][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = inner_join())
[     8.476][cube-solver-12][DEBUG] Solving cube (l0 = filter(), l1 = summarise([1]))
[     8.481][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     8.487][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([1]))
[     8.490][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     8.502][cube-solver-12][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     8.504][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([2]))
[     8.507][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     8.542][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = summarise([6]))
[     8.606][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise([1]), l1 = natural_join3())
[     8.607][MainProcess][INFO] Statistics:
[     8.607][MainProcess][INFO] 	Generated cubes: 28
[     8.607][MainProcess][INFO] 	Attempted programs: 1
[     8.607][MainProcess][INFO] 		Rejected: 0
[     8.607][MainProcess][INFO] 		Failed: 0
[     8.607][MainProcess][INFO] 	Blacklist clauses: 6
[     8.607][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     8.608][MainProcess][DEBUG] 	0: Counter({'natural_join': 31, 'summarise': 15, 'left_join': 7, 'anti_join': 5, 'union': 1})
[     8.608][MainProcess][DEBUG] 	1: Counter({'mutate': 23, 'summarise': 21, 'natural_join3': 15})
[     8.608][MainProcess][INFO] Solution found: natural_join3(@param1, @param0, summarise(@param0, cost = max(cost), P_id))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/18-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/18-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/18.out", col_types = cols(P_id = col_character(),S_name = col_character()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = max(cost)) %>% ungroup()
df4 <- inner_join(input2, input1) %>% inner_join(df3)
out <- df4 %>% select(P_id, S_name) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_id,
       S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.S_name AS S_name,
          LHS.P_id AS P_id,
          LHS.cost AS cost
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.S_name AS S_name,
             RHS.P_id AS P_id,
             RHS.cost AS cost
      FROM input2 AS LHS
      INNER JOIN input1 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
   INNER JOIN
     (SELECT P_id,
             MAX(cost) AS cost
      FROM input1
      GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id
                                AND LHS.cost = RHS.cost))
ORDER BY P_id
