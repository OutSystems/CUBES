[     1.589][MainProcess][INFO] Parsing specification...
[     1.592][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.592][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.593][MainProcess][DEBUG] Reading input files...
[     1.600][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-1.txt: ['string', 'string', 'int64']
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-3.txt: ['string', 'string']
[     1.610][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18.out: ['string', 'string']
[     1.637][MainProcess][DEBUG] Generating DSL...
[     1.658][MainProcess][INFO] Creating 16 processes
[     1.721][MainProcess][DEBUG] Increasing generator loc to 2
[     1.721][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.721][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.722][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.722][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.722][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.722][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.730][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.734][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.743][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.758][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.758][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.759][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.762][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.764][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.960][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.960][cube-solver-1][WARNING] There is no solution for current loc (1).
[     1.961][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.961][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.962][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.962][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.045][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.049][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.052][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.054][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.059][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.068][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.071][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = mutate())
[     2.074][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = inner_join())
[     2.076][cube-solver-10][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join4())
[     2.076][cube-solver-14][DEBUG] Solving cube (l0 = summarise([3]), l1 = left_join())
[     2.082][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = summarise([3]))
[     2.086][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.088][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([4]))
[     2.088][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.092][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.098][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.100][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([5]))
[     2.129][cube-solver-11][DEBUG] Solving cube (l0 = summarise([7]), l1 = summarise([7]))
[     2.137][cube-solver-15][DEBUG] Solving cube (l0 = summarise([7]), l1 = union())
[     2.140][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([9]))
[     2.143][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.273][cube-solver-12][DEBUG] Solving cube (l0 = summarise([14]), l1 = filter())
[     2.289][cube-solver-12][DEBUG] Solving cube (l0 = union(), l1 = summarise([15]))
[     2.343][cube-solver-13][DEBUG] Solving cube (l0 = summarise([17]), l1 = anti_join([11]))
[     2.463][cube-solver-0][DEBUG] Solving cube (l0 = summarise([21]), l1 = intersect())
[     2.540][cube-solver-1][DEBUG] Solving cube (l0 = summarise([28]), l1 = semi_join())
[     2.663][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join3())
[     2.665][MainProcess][INFO] Statistics:
[     2.665][MainProcess][INFO] 	Generated cubes: 28
[     2.665][MainProcess][INFO] 	Attempted programs: 4
[     2.665][MainProcess][INFO] 		Rejected: 1
[     2.665][MainProcess][INFO] 		Failed: 2
[     2.665][MainProcess][INFO] 	Blacklist clauses: 44
[     2.665][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.666][MainProcess][DEBUG] 	0: Counter({'summarise': 172, 'natural_join': 82, 'left_join': 71, 'union': 38})
[     2.666][MainProcess][DEBUG] 	1: Counter({'summarise': 102, 'mutate': 89, 'natural_join3': 45, 'left_join': 39, 'union': 37, 'natural_join': 35, 'inner_join': 12, 'semi_join': 4})
[     2.666][MainProcess][INFO] Solution found: natural_join3(summarise(@param0, cost = max(cost), P_id), @param0, @param1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/18-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/18-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/18.out", col_types = cols(P_id = col_character(),S_name = col_character()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = max(cost)) %>% ungroup()
df4 <- inner_join(df3, input1) %>% inner_join(input2)
out <- df4 %>% select(P_id, S_name) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_id,
       S_name
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.cost AS cost,
          LHS.S_key AS S_key,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.cost AS cost,
             RHS.S_key AS S_key
      FROM
        (SELECT P_id,
                MAX(cost) AS cost
         FROM input1
         GROUP BY P_id) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id
                                   AND LHS.cost = RHS.cost)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY P_id
