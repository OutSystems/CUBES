[     1.569][MainProcess][INFO] Parsing specification...
[     1.572][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.572][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.573][MainProcess][DEBUG] Reading input files...
[     1.580][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.585][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/employees.txt: ['int64', 'string', 'int64']
[     1.589][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/certified.txt: ['int64', 'int64']
[     1.593][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/24.out: ['string']
[     1.622][MainProcess][DEBUG] Generating DSL...
[     1.641][MainProcess][INFO] Creating 16 processes
[     1.717][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.718][MainProcess][DEBUG] Increasing generator loc to 2
[     1.719][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.729][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.743][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.747][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.747][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.750][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.763][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.772][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.049][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.050][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     2.051][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.075][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     2.080][cube-solver-9][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.083][cube-solver-9][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.086][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.088][cube-solver-9][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     2.089][cube-solver-12][DEBUG] Solving cube (l0 = filter(), l1 = semi_join())
[     2.091][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     2.093][MainProcess][DEBUG] Increasing generator loc to 3
[     2.094][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.094][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.110][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     2.113][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.120][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     2.124][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.129][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     2.134][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.143][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     2.146][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter())
[     2.148][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.149][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.218][cube-solver-14][DEBUG] Solving cube (l0 = filter(), l1 = inner_join())
[     2.223][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.263][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     2.267][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.281][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.337][cube-solver-4][DEBUG] Solving cube (l0 = filter([4]), l1 = natural_join())
[     2.344][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.363][cube-solver-10][DEBUG] Solving cube (l0 = filter([6]), l1 = union())
[     2.371][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.421][cube-solver-5][DEBUG] Solving cube (l0 = filter([9]), l1 = natural_join3())
[     2.422][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([9]))
[     2.442][cube-solver-11][DEBUG] Solving cube (l0 = filter([10]), l1 = intersect())
[     2.452][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.504][cube-solver-2][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter([9]))
[     2.505][MainProcess][INFO] Statistics:
[     2.505][MainProcess][INFO] 	Generated cubes: 34
[     2.505][MainProcess][INFO] 	Attempted programs: 1
[     2.505][MainProcess][INFO] 		Rejected: 0
[     2.505][MainProcess][INFO] 		Failed: 0
[     2.505][MainProcess][INFO] 	Blacklist clauses: 10
[     2.506][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.506][MainProcess][DEBUG] 	0: Counter({'natural_join3': 4, 'filter': 4})
[     2.506][MainProcess][DEBUG] 	1: Counter({'filter': 4, 'natural_join3': 3, 'natural_join4': 1})
[     2.506][MainProcess][INFO] Solution found: filter(natural_join3(@param0, @param2, @param1), salary > 80000)
[     2.549][cube-solver-5][DEBUG] Found solution with cube (l0 = filter([9]), l1 = natural_join3())
[     2.741][cube-solver-6][DEBUG] Found solution with cube (l0 = filter(), l1 = natural_join4())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/employees.txt", col_types = cols(eid = col_integer(),ename = col_character(),salary = col_integer()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/24.out", col_types = cols(aname = col_character()))

df4 <- inner_join(input1, input3) %>% inner_join(input2)
df5 <- df4 %>% filter(salary > 80000)
out <- df5 %>% select(aname) %>% distinct() %>% arrange(aname)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT aname
FROM
  (SELECT LHS.aid AS aid,
          LHS.aname AS aname,
          LHS.crusingrange AS crusingrange,
          LHS.eid AS eid,
          RHS.ename AS ename,
          RHS.salary AS salary
   FROM
     (SELECT LHS.aid AS aid,
             LHS.aname AS aname,
             LHS.crusingrange AS crusingrange,
             RHS.eid AS eid
      FROM input1 AS LHS
      INNER JOIN input3 AS RHS ON (LHS.aid = RHS.aid)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.eid = RHS.eid))
WHERE (salary > 80000.0)
ORDER BY aname
