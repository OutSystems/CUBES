[     3.291][MainProcess][INFO] Parsing specification...
[     3.302][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.303][MainProcess][DEBUG] Reading input files...
[     3.313][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/14-1.txt: ['string', 'string']
[     3.319][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/14-2.txt: ['string', 'string']
[     3.324][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/14-3.txt: ['string', 'string']
[     3.329][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/14.out: ['string']
[     3.365][MainProcess][DEBUG] Generating DSL...
[     3.393][MainProcess][INFO] Creating 16 processes
[     3.468][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.468][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.468][MainProcess][DEBUG] Increasing generator loc to 3
[     3.468][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.468][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.469][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.474][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.478][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.486][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.490][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.491][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.500][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.505][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     3.505][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.518][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     3.525][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.530][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     3.975][cube-solver-2][WARNING] There is no solution for current loc (2).
[     3.976][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.977][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.011][cube-solver-3][WARNING] There is no solution for current loc (2).
[     4.011][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     4.013][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.029][cube-solver-1][WARNING] There is no solution for current loc (2).
[     4.029][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     4.031][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.101][cube-solver-0][WARNING] There is no solution for current loc (2).
[     4.101][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     4.103][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.347][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     4.349][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     4.351][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     4.353][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     4.354][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     4.356][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     4.358][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     4.359][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     4.362][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     4.363][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     4.367][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     4.372][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = left_join())
[     4.372][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([1]), l2 = filter())
[     4.377][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = union())
[     4.381][cube-solver-12][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = intersect())
[     4.382][cube-solver-10][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = semi_join())
[     4.388][cube-solver-10][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = cross_join())
[     4.389][cube-solver-12][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = mutate())
[     4.395][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     4.396][cube-solver-12][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = inner_join())
[     4.396][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = anti_join(), l2 = filter())
[     4.401][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise([5]))
[     4.404][cube-solver-12][DEBUG] Solving cube (l0 = summarise([5]), l1 = union(), l2 = filter())
[     4.404][cube-solver-15][DEBUG] Solving cube (l0 = summarise([5]), l1 = left_join(), l2 = filter())
[     4.404][cube-solver-10][DEBUG] Solving cube (l0 = summarise([5]), l1 = intersect(), l2 = filter())
[     4.410][cube-solver-9][DEBUG] Solving cube (l0 = summarise([5]), l1 = semi_join(), l2 = filter([1]))
[     4.412][cube-solver-10][DEBUG] Solving cube (l0 = summarise([5]), l1 = cross_join(), l2 = filter([1]))
[     4.413][cube-solver-12][DEBUG] Solving cube (l0 = summarise([5]), l1 = mutate(), l2 = filter([1]))
[     4.413][cube-solver-15][DEBUG] Solving cube (l0 = summarise([5]), l1 = inner_join(), l2 = filter([1]))
[     4.416][cube-solver-8][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     4.418][MainProcess][INFO] Statistics:
[     4.418][MainProcess][INFO] 	Generated cubes: 42
[     4.419][MainProcess][INFO] 	Attempted programs: 1
[     4.419][cube-solver-9][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join(), l2 = summarise([6]))
[     4.419][MainProcess][INFO] 		Rejected: 0
[     4.419][MainProcess][INFO] 		Failed: 0
[     4.419][MainProcess][INFO] 	Blacklist clauses: 7
[     4.419][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     4.419][MainProcess][DEBUG] 	0: Counter({'natural_join3': 3})
[     4.420][MainProcess][DEBUG] 	1: Counter({'mutate': 2, 'summarise': 1})
[     4.420][MainProcess][DEBUG] 	2: Counter({'filter': 3})
[     4.420][MainProcess][INFO] Solution found: filter(summarise(natural_join3(@param0, @param1, @param2), n = n(), S_name), n == max(n))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/14-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/14-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/14-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/14.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input1, input2) %>% inner_join(input3)
df5 <- df4 %>% group_by(S_name) %>% summarise(n = n()) %>% ungroup()
df6 <- df5 %>% filter(n == max(n))
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT S_name,
          n
   FROM
     (SELECT S_name,
             n,
             MAX(n) OVER () AS zzz4
      FROM
        (SELECT S_name,
                COUNT() AS n
         FROM
           (SELECT LHS.S_key AS S_key,
                   LHS.P_id AS P_id,
                   LHS.color AS color,
                   RHS.S_name AS S_name
            FROM
              (SELECT LHS.S_key AS S_key,
                      LHS.P_id AS P_id,
                      RHS.color AS color
               FROM input1 AS LHS
               INNER JOIN input2 AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
            INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
         GROUP BY S_name))
   WHERE (n = zzz4))
ORDER BY S_name
