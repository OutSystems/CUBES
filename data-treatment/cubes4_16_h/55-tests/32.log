[     1.587][MainProcess][INFO] Parsing specification...
[     1.603][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.603][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.603][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.604][MainProcess][DEBUG] Reading input files...
[     1.613][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.618][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.623][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.628][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/32.out: ['string', 'int64']
[     1.660][MainProcess][DEBUG] Generating DSL...
[     1.711][MainProcess][INFO] Creating 16 processes
[     1.787][MainProcess][DEBUG] Increasing generator loc to 3
[     1.797][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.800][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.804][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.806][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.808][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.813][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.817][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.826][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.830][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.839][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.845][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.847][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.851][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.854][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.857][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.899][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     4.186][cube-solver-3][WARNING] There is no solution for current loc (2).
[     4.187][cube-solver-0][WARNING] There is no solution for current loc (2).
[     4.187][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     4.187][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     4.189][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.190][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.196][cube-solver-2][WARNING] There is no solution for current loc (2).
[     4.197][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     4.197][cube-solver-1][WARNING] There is no solution for current loc (2).
[     4.198][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     4.200][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.200][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     5.179][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     5.187][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     5.194][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     5.198][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     5.201][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     5.201][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     5.216][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     5.218][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     5.227][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     5.227][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3([1]), l1 = filter(), l2 = mutate())
[     5.237][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([1]), l2 = filter())
[     5.245][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([1]), l2 = filter([1]))
[     5.253][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([1]), l2 = summarise([1]))
[     5.266][cube-solver-12][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([1]), l2 = filter([1]))
[     5.270][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([2]), l2 = anti_join())
[     5.275][cube-solver-14][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([2]), l2 = left_join())
[     5.285][cube-solver-12][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([2]), l2 = union())
[     5.296][cube-solver-14][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([2]), l2 = intersect())
[     5.297][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([2]), l2 = semi_join())
[     5.305][cube-solver-12][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([2]), l2 = cross_join())
[     5.313][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([2]), l2 = summarise([4]))
[     5.315][cube-solver-14][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([2]), l2 = mutate())
[     5.316][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([2]), l2 = inner_join())
[     5.332][cube-solver-14][DEBUG] Solving cube (l0 = summarise([4]), l1 = anti_join(), l2 = filter([2]))
[     5.337][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = left_join(), l2 = filter([2]))
[     5.346][cube-solver-5][DEBUG] Solving cube (l0 = summarise([5]), l1 = union(), l2 = filter([2]))
[     5.351][cube-solver-12][DEBUG] Solving cube (l0 = summarise([5]), l1 = intersect(), l2 = filter([2]))
[     5.356][cube-solver-14][DEBUG] Solving cube (l0 = summarise([5]), l1 = semi_join(), l2 = filter([2]))
[     5.356][cube-solver-4][DEBUG] Solving cube (l0 = summarise([5]), l1 = cross_join(), l2 = filter([2]))
[     5.371][cube-solver-5][DEBUG] Solving cube (l0 = summarise([6]), l1 = mutate(), l2 = filter([2]))
[     5.373][cube-solver-12][DEBUG] Solving cube (l0 = summarise([6]), l1 = inner_join(), l2 = filter([2]))
[     5.375][cube-solver-14][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join(), l2 = summarise([6]))
[     5.376][cube-solver-4][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join(), l2 = mutate())
[     5.386][cube-solver-14][DEBUG] Solving cube (l0 = filter([3]), l1 = natural_join4(), l2 = summarise([7]))
[     5.387][cube-solver-4][DEBUG] Solving cube (l0 = filter([3]), l1 = natural_join3([2]), l2 = summarise([7]))
[     5.387][cube-solver-5][DEBUG] Solving cube (l0 = filter([3]), l1 = natural_join3([2]), l2 = mutate())
[     5.395][cube-solver-12][DEBUG] Solving cube (l0 = filter([3]), l1 = natural_join4(), l2 = mutate())
[     5.590][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([24]))
[     5.623][cube-solver-7][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([14]), l2 = natural_join())
[     5.661][cube-solver-7][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([14]), l2 = natural_join3([2]))
[     5.672][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([24]))
[     5.695][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([14]), l2 = natural_join4())
[     5.715][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([14]), l2 = summarise([14]))
[     5.722][cube-solver-7][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([14]), l2 = filter([24]))
[     5.739][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([14]), l2 = anti_join())
[     5.767][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([16]), l2 = union())
[     5.768][cube-solver-7][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([16]), l2 = left_join())
[     5.790][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([17]), l2 = intersect())
[     5.793][cube-solver-7][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([17]), l2 = semi_join())
[     5.814][cube-solver-7][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([17]), l2 = cross_join())
[     5.815][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([17]), l2 = mutate())
[     5.837][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([17]), l2 = inner_join())
[     5.838][cube-solver-7][DEBUG] Solving cube (l0 = filter([24]), l1 = filter([24]), l2 = summarise([17]))
[     5.862][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = filter([24]), l2 = mutate())
[     5.866][cube-solver-7][DEBUG] Solving cube (l0 = filter([24]), l1 = anti_join(), l2 = summarise([17]))
[     5.883][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = anti_join(), l2 = mutate())
[     5.890][cube-solver-7][DEBUG] Solving cube (l0 = filter([24]), l1 = left_join(), l2 = summarise([17]))
[     5.899][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = left_join(), l2 = mutate())
[     5.911][cube-solver-7][DEBUG] Solving cube (l0 = filter([24]), l1 = union(), l2 = summarise([17]))
[     5.914][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = union(), l2 = mutate())
[     5.928][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = intersect(), l2 = summarise([17]))
[     5.932][cube-solver-7][DEBUG] Solving cube (l0 = filter([24]), l1 = intersect(), l2 = mutate())
[     5.946][cube-solver-7][DEBUG] Solving cube (l0 = filter([24]), l1 = semi_join(), l2 = summarise([17]))
[     5.952][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = semi_join(), l2 = mutate())
[     5.962][cube-solver-9][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     5.963][MainProcess][INFO] Statistics:
[     5.964][MainProcess][INFO] 	Generated cubes: 73
[     5.964][MainProcess][INFO] 	Attempted programs: 16
[     5.964][MainProcess][INFO] 		Rejected: 13
[     5.964][MainProcess][INFO] 		Failed: 2
[     5.964][MainProcess][INFO] 	Blacklist clauses: 43
[     5.964][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     5.965][MainProcess][DEBUG] 	0: Counter({'natural_join3': 204})
[     5.965][MainProcess][DEBUG] 	1: Counter({'filter': 134, 'mutate': 70})
[     5.965][MainProcess][DEBUG] 	2: Counter({'mutate': 73, 'filter': 70, 'summarise': 61})
[     5.965][MainProcess][INFO] Solution found: summarise(filter(natural_join3(@param0, @param2, @param1), color == 'green' & S_key != 'S4'), n = n(), P_id)
[     5.967][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = cross_join(), l2 = summarise([17]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/32.out", col_types = cols(P_id = col_character(),n = col_integer()))

df4 <- inner_join(input1, input3) %>% inner_join(input2)
df5 <- df4 %>% filter(color == 'green' & S_key != 'S4')
df6 <- df5 %>% group_by(P_id) %>% summarise(n = n()) %>% ungroup()
out <- df6 %>% select(P_id, n) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `P_id`,
       `n`
FROM
  (SELECT `P_id`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`P_id` AS `P_id`,
                `LHS`.`S_name` AS `S_name`,
                `RHS`.`color` AS `color`
         FROM
           (SELECT `LHS`.`S_key` AS `S_key`,
                   `LHS`.`P_id` AS `P_id`,
                   `RHS`.`S_name` AS `S_name`
            FROM `input1` AS `LHS`
            INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
         INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
      WHERE (`color` = 'green'
             AND `S_key` != 'S4'))
   GROUP BY P_id)
ORDER BY P_id
