[     1.580][MainProcess][INFO] Parsing specification...
[     1.583][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.583][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.583][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.584][MainProcess][DEBUG] Reading input files...
[     1.591][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.595][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.600][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/30.out: ['string', 'int64']
[     1.635][MainProcess][DEBUG] Generating DSL...
[     1.656][MainProcess][INFO] Creating 16 processes
[     1.721][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.721][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.721][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.721][MainProcess][DEBUG] Increasing generator loc to 3
[     1.721][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.722][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.725][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.727][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.732][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.735][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.740][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.742][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.750][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.767][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.771][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.774][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.777][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.149][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.150][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.151][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.210][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.210][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.212][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.335][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.336][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.339][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.411][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.411][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.413][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.416][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.421][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.425][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.431][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.437][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.440][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.446][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.470][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([1]), l2 = filter())
[     2.476][cube-solver-4][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = summarise([2]))
[     2.479][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([2]))
[     2.484][cube-solver-4][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = filter())
[     2.488][cube-solver-13][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = anti_join())
[     2.487][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([2]), l2 = filter())
[     2.490][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([1]), l2 = left_join())
[     2.495][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([1]), l2 = union())
[     2.497][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([1]), l2 = intersect())
[     2.502][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([1]), l2 = semi_join())
[     2.505][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([1]), l2 = cross_join())
[     2.507][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([2]))
[     2.508][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([2]), l2 = mutate())
[     2.509][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([2]))
[     2.512][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([2]), l2 = inner_join())
[     2.515][cube-solver-7][DEBUG] Solving cube (l0 = summarise([4]), l1 = anti_join(), l2 = filter([2]))
[     2.516][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = left_join(), l2 = filter([2]))
[     2.522][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = union(), l2 = filter([2]))
[     2.524][cube-solver-7][DEBUG] Solving cube (l0 = summarise([4]), l1 = intersect(), l2 = filter([2]))
[     2.524][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = semi_join(), l2 = filter([2]))
[     2.530][cube-solver-4][DEBUG] Solving cube (l0 = summarise([5]), l1 = cross_join(), l2 = filter([2]))
[     2.531][cube-solver-7][DEBUG] Solving cube (l0 = summarise([5]), l1 = mutate(), l2 = filter([2]))
[     2.531][cube-solver-13][DEBUG] Solving cube (l0 = summarise([5]), l1 = inner_join(), l2 = filter([2]))
[     2.538][cube-solver-4][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join(), l2 = summarise([5]))
[     2.539][cube-solver-7][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join(), l2 = mutate())
[     2.540][cube-solver-13][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join3(), l2 = summarise([5]))
[     2.544][cube-solver-7][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join3([1]), l2 = mutate())
[     2.547][cube-solver-4][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join4(), l2 = summarise([6]))
[     2.559][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([3]), l2 = mutate())
[     2.567][cube-solver-14][DEBUG] Solving cube (l0 = filter([5]), l1 = natural_join4(), l2 = mutate())
[     2.725][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([22]), l2 = summarise([11]))
[     2.754][cube-solver-5][DEBUG] Solving cube (l0 = filter([22]), l1 = summarise([13]), l2 = natural_join())
[     2.773][cube-solver-5][DEBUG] Solving cube (l0 = filter([22]), l1 = summarise([13]), l2 = natural_join3([2]))
[     2.914][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([24]))
[     2.936][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([20]), l2 = natural_join4())
[     2.957][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([21]), l2 = summarise([21]))
[     2.988][cube-solver-15][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([21]), l2 = filter([24]))
[     2.996][cube-solver-10][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.997][MainProcess][INFO] Statistics:
[     2.997][MainProcess][INFO] 	Generated cubes: 52
[     2.997][MainProcess][INFO] 	Attempted programs: 2
[     2.997][MainProcess][INFO] 		Rejected: 1
[     2.998][MainProcess][INFO] 		Failed: 0
[     2.998][MainProcess][INFO] 	Blacklist clauses: 47
[     2.997][cube-solver-0][DEBUG] Solving cube (l0 = summarise([21]), l1 = natural_join(), l2 = filter([24]))
[     2.998][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.998][MainProcess][DEBUG] 	0: Counter({'natural_join3': 155})
[     2.998][MainProcess][DEBUG] 	1: Counter({'filter': 106, 'mutate': 49})
[     2.998][MainProcess][DEBUG] 	2: Counter({'mutate': 63, 'filter': 49, 'summarise': 43})
[     2.999][MainProcess][INFO] Solution found: mutate(filter(natural_join3(@param2, @param0, @param1), color == 'red' & S_key == 'S5'), n = n())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/30.out", col_types = cols(P_id = col_character(),n = col_integer()))

df4 <- inner_join(input3, input1) %>% inner_join(input2)
df5 <- df4 %>% filter(color == 'red' & S_key == 'S5')
df6 <- df5 %>% mutate(n = n())
out <- df6 %>% select(P_id, n) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `P_id`,
       COUNT(*) OVER () AS `n`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`S_name` AS `S_name`,
          `LHS`.`P_id` AS `P_id`,
          `RHS`.`color` AS `color`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`S_name` AS `S_name`,
             `RHS`.`P_id` AS `P_id`
      FROM `input3` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
   INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
WHERE (`color` = 'red'
       AND `S_key` = 'S5')
ORDER BY P_id
