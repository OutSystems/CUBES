[     1.589][MainProcess][INFO] Parsing specification...
[     1.597][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.597][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.598][MainProcess][DEBUG] Reading input files...
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.610][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/employees.txt: ['int64', 'string', 'int64']
[     1.613][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/certified.txt: ['int64', 'int64']
[     1.617][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/28.out: ['string']
[     1.646][MainProcess][DEBUG] Generating DSL...
[     1.672][MainProcess][INFO] Creating 16 processes
[     1.741][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.740][MainProcess][DEBUG] Increasing generator loc to 2
[     1.742][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.743][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.751][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.752][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.760][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.761][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.764][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.768][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.772][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.777][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.792][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.804][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.809][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.222][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.223][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     2.224][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.566][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     2.573][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.578][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     2.584][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.586][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     2.587][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.587][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     2.589][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([1]))
[     2.591][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([1]))
[     2.591][MainProcess][DEBUG] Increasing generator loc to 3
[     2.592][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.592][cube-solver-10][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([1]))
[     2.593][cube-solver-5][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join3([1]))
[     2.595][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.595][cube-solver-11][DEBUG] Solving cube (l0 = filter([1]), l1 = intersect())
[     2.596][cube-solver-12][DEBUG] Solving cube (l0 = filter([1]), l1 = semi_join())
[     2.597][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.600][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.603][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.604][cube-solver-4][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join())
[     2.608][cube-solver-7][DEBUG] Solving cube (l0 = filter([2]), l1 = filter([2]))
[     2.611][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.613][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([2]))
[     2.615][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.620][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.630][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([6]))
[     2.639][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.641][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([7]))
[     2.651][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.651][cube-solver-14][DEBUG] Solving cube (l0 = filter([8]), l1 = inner_join())
[     2.674][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.911][cube-solver-13][DEBUG] Solving cube (l0 = filter([32]), l1 = cross_join())
[     2.919][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([33]))
[     2.942][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.946][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.888][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([80]), l2 = union())
[     3.890][cube-solver-9][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([80]), l2 = natural_join())
[     4.005][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([80]), l2 = inner_join())
[     4.009][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([80]), l2 = anti_join())
[     4.021][cube-solver-9][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter([80]), l2 = natural_join())
[     4.022][MainProcess][INFO] Statistics:
[     4.022][MainProcess][INFO] 	Generated cubes: 35
[     4.022][MainProcess][INFO] 	Attempted programs: 2
[     4.022][MainProcess][INFO] 		Rejected: 0
[     4.022][MainProcess][INFO] 		Failed: 1
[     4.023][MainProcess][INFO] 	Blacklist clauses: 84
[     4.023][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     4.023][MainProcess][DEBUG] 	0: Counter({'filter': 125, 'natural_join3': 120})
[     4.023][MainProcess][DEBUG] 	1: Counter({'filter': 120, 'natural_join4': 113, 'natural_join3': 12})
[     4.023][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     4.023][MainProcess][DEBUG] 	0: Counter({'natural_join': 4})
[     4.023][MainProcess][DEBUG] 	1: Counter({'filter': 4})
[     4.024][MainProcess][DEBUG] 	2: Counter({'natural_join': 3, 'union': 1})
[     4.024][MainProcess][INFO] Solution found: natural_join(@param0, filter(natural_join(@param2, @param1), salary > 80000 & salary < 100000))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/employees.txt", col_types = cols(eid = col_integer(),ename = col_character(),salary = col_integer()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/28.out", col_types = cols(aname = col_character()))

df4 <- inner_join(input3, input2)
df5 <- df4 %>% filter(salary > 80000 & salary < 100000)
df6 <- inner_join(input1, df5)
out <- df6 %>% select(aname) %>% arrange(aname)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT aname
FROM
  (SELECT LHS.aid AS aid,
          LHS.aname AS aname,
          LHS.crusingrange AS crusingrange,
          RHS.eid AS eid,
          RHS.ename AS ename,
          RHS.salary AS salary
   FROM input1 AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT LHS.eid AS eid,
                LHS.aid AS aid,
                RHS.ename AS ename,
                RHS.salary AS salary
         FROM input3 AS LHS
         INNER JOIN input2 AS RHS ON (LHS.eid = RHS.eid))
      WHERE (salary > 80000.0
             AND salary < 100000.0)) AS RHS ON (LHS.aid = RHS.aid))
ORDER BY aname
