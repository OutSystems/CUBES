[     1.596][MainProcess][INFO] Parsing specification...
[     1.600][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.600][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.600][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.601][MainProcess][DEBUG] Reading input files...
[     1.610][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/9-1.txt: ['string', 'string', 'string']
[     1.616][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/9-2.txt: ['string', 'string']
[     1.621][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/45.out: ['string', 'string']
[     1.651][MainProcess][DEBUG] Generating DSL...
[     1.679][MainProcess][INFO] Creating 16 processes
[     1.746][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.746][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.746][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.747][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.747][MainProcess][DEBUG] Increasing generator loc to 3
[     1.748][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.748][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.749][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.759][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.763][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.764][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.766][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.771][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.773][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.777][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.799][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.809][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.317][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.318][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.319][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.468][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.469][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.471][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.548][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.548][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.550][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.619][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.619][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.621][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.646][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.669][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.672][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.678][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.680][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.694][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.699][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.701][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.704][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = summarise([1]))
[     2.708][cube-solver-9][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = anti_join())
[     2.708][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = filter())
[     2.715][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = left_join())
[     2.735][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([3]))
[     2.736][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]), l2 = filter())
[     2.744][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([4]), l2 = filter())
[     2.747][cube-solver-8][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([1]), l2 = union())
[     2.755][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([1]), l2 = intersect())
[     2.761][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = summarise([4]))
[     2.863][cube-solver-6][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.867][MainProcess][INFO] Statistics:
[     2.867][MainProcess][INFO] 	Generated cubes: 29
[     2.867][MainProcess][INFO] 	Attempted programs: 1
[     2.867][MainProcess][INFO] 		Rejected: 0
[     2.867][MainProcess][INFO] 		Failed: 0
[     2.867][MainProcess][INFO] 	Blacklist clauses: 5
[     2.867][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.868][MainProcess][DEBUG] 	0: Counter({'natural_join': 21, 'summarise': 4})
[     2.868][MainProcess][DEBUG] 	1: Counter({'filter': 22, 'summarise': 3})
[     2.868][MainProcess][DEBUG] 	2: Counter({'mutate': 14, 'summarise': 4, 'natural_join3': 4, 'filter': 3})
[     2.868][MainProcess][INFO] Solution found: mutate(filter(natural_join(@param1, @param0), Room == 'R128'), n = n())
[     3.217][cube-solver-11][DEBUG] Found solution with cube (l0 = summarise([2]), l1 = filter(), l2 = left_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/9-1.txt", col_types = cols(ID_class = col_character(),ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/9-2.txt", col_types = cols(ID_key = col_character(),F_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/45.out", col_types = cols(F_name = col_character(),Room = col_character()))

df3 <- inner_join(input2, input1)
df4 <- df3 %>% filter(Room == 'R128')
df5 <- df4 %>% mutate(n = n())
out <- df5 %>% select(F_name, Room) %>% distinct() %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `F_name`,
                `Room`
FROM
  (SELECT `LHS`.`ID_key` AS `ID_key`,
          `LHS`.`F_name` AS `F_name`,
          `RHS`.`ID_class` AS `ID_class`,
          `RHS`.`Room` AS `Room`
   FROM `input2` AS `LHS`
   INNER JOIN `input1` AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
WHERE (`Room` = 'R128')
ORDER BY F_name
