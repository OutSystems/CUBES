[     1.646][MainProcess][INFO] Parsing specification...
[     1.649][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.649][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.649][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.650][MainProcess][DEBUG] Reading input files...
[     1.658][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/9-1.txt: ['string', 'string', 'string']
[     1.663][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/9-2.txt: ['string', 'string']
[     1.667][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/45.out: ['string', 'string']
[     1.695][MainProcess][DEBUG] Generating DSL...
[     1.720][MainProcess][INFO] Creating 16 processes
[     1.790][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.790][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.790][MainProcess][DEBUG] Increasing generator loc to 3
[     1.790][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.790][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.791][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.791][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.791][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.791][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.796][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.802][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.804][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.809][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.822][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.825][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.828][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.842][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.261][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.262][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.263][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.267][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.268][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.270][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.309][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.310][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.311][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.451][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.457][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.460][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.469][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.470][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.473][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.475][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.479][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.481][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.483][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.483][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.484][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.486][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.486][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.486][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.488][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.488][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.494][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = intersect())
[     2.501][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([1]))
[     2.507][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = semi_join())
[     2.526][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.532][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.558][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.560][MainProcess][INFO] Statistics:
[     2.560][MainProcess][INFO] 	Generated cubes: 30
[     2.560][MainProcess][INFO] 	Attempted programs: 3
[     2.560][MainProcess][INFO] 		Rejected: 0
[     2.560][MainProcess][INFO] 		Failed: 2
[     2.560][MainProcess][INFO] 	Blacklist clauses: 3
[     2.560][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.561][MainProcess][DEBUG] 	0: Counter({'summarise': 12, 'natural_join': 1})
[     2.561][MainProcess][DEBUG] 	1: Counter({'filter': 12, 'summarise': 1})
[     2.561][MainProcess][DEBUG] 	2: Counter({'natural_join': 9, 'left_join': 2, 'filter': 1, 'natural_join3': 1})
[     2.561][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param1, @param0), n = n(), F_name, Room), Room == 'R128')
[     2.751][cube-solver-6][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter(), l2 = mutate())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/9-1.txt", col_types = cols(ID_class = col_character(),ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/9-2.txt", col_types = cols(ID_key = col_character(),F_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/45.out", col_types = cols(F_name = col_character(),Room = col_character()))

df3 <- inner_join(input2, input1)
df4 <- df3 %>% group_by(F_name, Room) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(Room == 'R128')
out <- df5 %>% select(F_name, Room) %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `F_name`,
       `Room`
FROM
  (SELECT `F_name`,
          `Room`,
          COUNT() AS `n`
   FROM
     (SELECT `LHS`.`ID_key` AS `ID_key`,
             `LHS`.`F_name` AS `F_name`,
             `RHS`.`ID_class` AS `ID_class`,
             `RHS`.`Room` AS `Room`
      FROM `input2` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
   GROUP BY `F_name`,
            `Room`)
WHERE (`Room` = 'R128')
ORDER BY F_name
