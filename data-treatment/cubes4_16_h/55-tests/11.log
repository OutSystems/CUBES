[     3.298][MainProcess][INFO] Parsing specification...
[     3.315][MainProcess][DEBUG] Reading input files...
[     3.328][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/11-1.txt: ['string', 'string']
[     3.335][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/11-2.txt: ['string', 'string']
[     3.341][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/11.out: ['string']
[     3.384][MainProcess][DEBUG] Generating DSL...
[     3.404][MainProcess][INFO] Creating 16 processes
[     3.471][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.471][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.471][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.471][MainProcess][DEBUG] Increasing generator loc to 2
[     3.471][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.471][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.471][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.471][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.475][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.477][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     3.485][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.487][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     3.490][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.497][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.499][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.507][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.512][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.561][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     3.562][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     3.582][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.584][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     3.593][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     3.611][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.612][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     3.613][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.613][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.613][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.613][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     3.615][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.618][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.650][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([1]))
[     3.655][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     3.657][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([1]))
[     3.658][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     3.661][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     3.663][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     3.665][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect())
[     3.667][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     3.667][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect())
[     3.669][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     3.673][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([1]))
[     3.676][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     3.677][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([2]))
[     3.678][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     3.680][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     3.683][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([3]))
[     3.687][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     3.689][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     3.691][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect())
[     3.693][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     3.695][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     3.699][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([1]))
[     3.701][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     3.703][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     3.705][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     3.708][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([6]), l1 = natural_join())
[     3.718][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.729][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     3.747][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.763][cube-solver-3][DEBUG] Found solution with cube (l0 = anti_join(),)
[     3.764][MainProcess][INFO] Statistics:
[     3.764][MainProcess][INFO] 	Generated cubes: 43
[     3.764][MainProcess][INFO] 	Attempted programs: 13
[     3.764][MainProcess][INFO] 		Rejected: 4
[     3.764][MainProcess][INFO] 		Failed: 8
[     3.764][MainProcess][INFO] 	Blacklist clauses: 14
[     3.764][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.765][MainProcess][DEBUG] 	0: Counter({'left_join': 12, 'union': 10, 'natural_join': 10, 'inner_join': 8, 'semi_join': 8, 'anti_join': 3})
[     3.765][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.765][MainProcess][DEBUG] 	0: Counter({'natural_join': 6})
[     3.765][MainProcess][DEBUG] 	1: Counter({'left_join': 6})
[     3.765][MainProcess][INFO] Solution found: anti_join(@param0, @param1, 'S_key')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/11-1.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/11-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/11.out", col_types = cols(S_name = col_character()))

df3 <- anti_join(input1, input2, by=c('S_key'))
out <- df3 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM input2 AS RHS
        WHERE (LHS.S_key = RHS.S_key) ))
ORDER BY S_name
