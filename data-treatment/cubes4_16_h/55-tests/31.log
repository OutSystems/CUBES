[     1.631][MainProcess][INFO] Parsing specification...
[     1.635][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.635][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.636][MainProcess][DEBUG] Reading input files...
[     1.642][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.645][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.648][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.655][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/31.out: ['string', 'string', 'string', 'string']
[     1.686][MainProcess][DEBUG] Generating DSL...
[     1.719][MainProcess][INFO] Creating 16 processes
[     1.792][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.792][MainProcess][DEBUG] Increasing generator loc to 2
[     1.794][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.794][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.794][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.795][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.799][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.803][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.807][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.811][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.814][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.822][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.826][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.830][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.830][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.861][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.876][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.539][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.540][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     2.542][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.717][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     2.725][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.730][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     2.730][cube-solver-4][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.731][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     2.735][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.737][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     2.737][cube-solver-7][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     2.738][MainProcess][DEBUG] Increasing generator loc to 3
[     2.739][cube-solver-8][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     2.741][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     2.742][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.743][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.747][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.747][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     2.750][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     2.750][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.751][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.751][cube-solver-12][DEBUG] Solving cube (l0 = filter(), l1 = semi_join())
[     2.752][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     2.753][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.758][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.760][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.760][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.781][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     2.785][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.810][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([2]))
[     2.820][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.870][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([7]))
[     2.882][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([9]))
[     2.899][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.309][cube-solver-14][DEBUG] Solving cube (l0 = filter([24]), l1 = inner_join())
[     3.331][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     3.485][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([24]))
[     3.506][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.492][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     4.529][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]), l2 = inner_join())
[     4.569][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]), l2 = semi_join())
[     4.735][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = cross_join())
[     4.754][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = natural_join4())
[     4.770][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = natural_join3([1]))
[     4.801][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = natural_join([2]))
[     4.820][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = union())
[     4.881][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = intersect())
[     5.040][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = left_join())
[     5.065][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = anti_join())
[     5.462][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([24]))
[     5.476][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = filter([24]))
[     5.486][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = filter([24]))
[     5.513][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([24]))
[     5.806][cube-solver-9][DEBUG] Found solution with cube (l0 = natural_join([2]), l1 = filter([24]), l2 = natural_join3([1]))
[     5.807][MainProcess][INFO] Statistics:
[     5.807][MainProcess][INFO] 	Generated cubes: 38
[     5.807][MainProcess][INFO] 	Attempted programs: 149
[     5.807][MainProcess][INFO] 		Rejected: 2
[     5.808][MainProcess][INFO] 		Failed: 146
[     5.808][MainProcess][INFO] 	Blacklist clauses: 27
[     5.808][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     5.808][MainProcess][DEBUG] 	0: Counter({'natural_join3': 258})
[     5.809][MainProcess][DEBUG] 	1: Counter({'filter': 258})
[     5.809][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     5.809][MainProcess][DEBUG] 	0: Counter({'natural_join': 536})
[     5.809][MainProcess][DEBUG] 	1: Counter({'filter': 536})
[     5.810][MainProcess][DEBUG] 	2: Counter({'natural_join': 102, 'natural_join3': 99, 'union': 96, 'natural_join4': 86, 'cross_join': 86, 'left_join': 67})
[     5.810][MainProcess][INFO] Solution found: natural_join3(filter(natural_join(@param0, @param1), color == 'green' & S_key != 'S4'), @param1, @param2)
[     6.165][cube-solver-7][DEBUG] Found solution with cube (l0 = natural_join([2]), l1 = filter([24]), l2 = natural_join4())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/31.out", col_types = cols(S_key = col_character(),P_id = col_character(),S_name = col_character(),color = col_character()))

df4 <- inner_join(input1, input2)
df5 <- df4 %>% filter(color == 'green' & S_key != 'S4')
df6 <- inner_join(df5, input2) %>% inner_join(input3)
out <- df6 %>% select(S_key, P_id, S_name, color) %>% arrange(S_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_key`,
       `P_id`,
       `S_name`,
       `color`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`,
          `RHS`.`S_name` AS `S_name`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`P_id` AS `P_id`,
             `LHS`.`color` AS `color`
      FROM
        (SELECT *
         FROM
           (SELECT `LHS`.`S_key` AS `S_key`,
                   `LHS`.`P_id` AS `P_id`,
                   `RHS`.`color` AS `color`
            FROM `input1` AS `LHS`
            INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
         WHERE (`color` = 'green'
                AND `S_key` != 'S4')) AS LHS
      INNER JOIN input2 AS RHS ON (LHS.P_id = RHS.P_id
                                   AND LHS.color = RHS.color)) AS LHS
   INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_key
