[     1.579][MainProcess][INFO] Parsing specification...
[     1.583][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.583][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.583][MainProcess][DEBUG] Reading input files...
[     1.589][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.592][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.596][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.602][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/31.out: ['string', 'string', 'string', 'string']
[     1.631][MainProcess][DEBUG] Generating DSL...
[     1.649][MainProcess][INFO] Creating 16 processes
[     1.707][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.707][MainProcess][DEBUG] Increasing generator loc to 2
[     1.708][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.712][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.720][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.732][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.734][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.748][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.754][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.756][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.881][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.882][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     1.883][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.043][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.051][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     2.057][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = filter([1]))
[     2.059][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = filter([1]))
[     2.061][cube-solver-8][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([1]))
[     2.064][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([2]))
[     2.065][cube-solver-12][DEBUG] Solving cube (l0 = filter([2]), l1 = semi_join())
[     2.066][cube-solver-8][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([2]))
[     2.068][MainProcess][DEBUG] Increasing generator loc to 3
[     2.068][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.068][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.078][cube-solver-11][DEBUG] Solving cube (l0 = filter([4]), l1 = intersect())
[     2.080][cube-solver-9][DEBUG] Solving cube (l0 = filter([4]), l1 = left_join())
[     2.084][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.089][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.104][cube-solver-7][DEBUG] Solving cube (l0 = filter([8]), l1 = filter([8]))
[     2.110][cube-solver-10][DEBUG] Solving cube (l0 = filter([8]), l1 = union())
[     2.115][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.116][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.131][cube-solver-4][DEBUG] Solving cube (l0 = filter([11]), l1 = natural_join())
[     2.141][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.166][cube-solver-13][DEBUG] Solving cube (l0 = filter([15]), l1 = cross_join())
[     2.177][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.181][cube-solver-5][DEBUG] Solving cube (l0 = filter([18]), l1 = natural_join3())
[     2.208][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([22]))
[     2.220][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([23]))
[     2.223][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.264][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]))
[     2.266][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([24]))
[     2.273][cube-solver-14][DEBUG] Solving cube (l0 = filter([24]), l1 = inner_join())
[     2.281][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([24]))
[     2.282][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.283][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.292][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.296][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.587][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.648][cube-solver-9][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]), l2 = natural_join4())
[     2.736][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([24]), l2 = anti_join())
[     2.776][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([24]), l2 = natural_join([1]))
[     2.816][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([24]), l2 = filter([24]))
[     2.843][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = filter([24]))
[     2.866][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = filter([24]))
[     2.887][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = natural_join3())
[     2.931][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = union())
[     2.959][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = left_join())
[     2.967][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = intersect())
[     2.984][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = inner_join())
[     3.068][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([24]))
[     3.077][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = semi_join())
[     3.080][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = cross_join())
[     3.087][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([24]))
[     3.203][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union(), l2 = filter([24]))
[     3.514][cube-solver-2][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter([23]))
[     3.515][MainProcess][INFO] Statistics:
[     3.515][MainProcess][INFO] 	Generated cubes: 38
[     3.515][MainProcess][INFO] 	Attempted programs: 40
[     3.515][MainProcess][INFO] 		Rejected: 2
[     3.515][MainProcess][INFO] 		Failed: 37
[     3.516][MainProcess][INFO] 	Blacklist clauses: 26
[     3.516][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     3.516][MainProcess][DEBUG] 	0: Counter({'natural_join3': 123})
[     3.516][MainProcess][DEBUG] 	1: Counter({'filter': 123})
[     3.516][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     3.517][MainProcess][DEBUG] 	0: Counter({'natural_join': 374})
[     3.517][MainProcess][DEBUG] 	1: Counter({'filter': 307, 'left_join': 49, 'union': 18})
[     3.517][MainProcess][DEBUG] 	2: Counter({'natural_join4': 82, 'natural_join': 72, 'filter': 67, 'natural_join3': 58, 'union': 40, 'left_join': 34, 'inner_join': 21})
[     3.518][MainProcess][INFO] Solution found: filter(natural_join3(@param1, @param0, @param2), color == 'green' & S_key != 'S4')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/31.out", col_types = cols(S_key = col_character(),P_id = col_character(),S_name = col_character(),color = col_character()))

df4 <- inner_join(input2, input1) %>% inner_join(input3)
df5 <- df4 %>% filter(color == 'green' & S_key != 'S4')
out <- df5 %>% select(S_key, P_id, S_name, color) %>% arrange(S_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_key`,
       `P_id`,
       `S_name`,
       `color`
FROM
  (SELECT `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`,
          `LHS`.`S_key` AS `S_key`,
          `RHS`.`S_name` AS `S_name`
   FROM
     (SELECT `LHS`.`P_id` AS `P_id`,
             `LHS`.`color` AS `color`,
             `RHS`.`S_key` AS `S_key`
      FROM `input2` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
   INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`color` = 'green'
       AND `S_key` != 'S4')
ORDER BY S_key
