[     3.456][MainProcess][INFO] Parsing specification...
[     3.465][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.465][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.467][MainProcess][DEBUG] Reading input files...
[     3.476][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-1.txt: ['string', 'string', 'int64']
[     3.494][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-3.txt: ['string', 'string']
[     3.501][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/53.out: ['string', 'string']
[     3.533][MainProcess][DEBUG] Generating DSL...
[     3.701][MainProcess][INFO] Creating 16 processes
[     3.783][MainProcess][DEBUG] Increasing generator loc to 2
[     3.896][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.899][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.900][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.903][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.908][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.919][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.921][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.926][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.928][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.939][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.940][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.951][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.969][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.973][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     4.010][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     4.023][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     7.055][cube-solver-1][WARNING] There is no solution for current loc (1).
[     7.057][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     7.060][cube-solver-0][WARNING] There is no solution for current loc (1).
[     7.061][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     7.072][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     7.075][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[    10.249][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[    10.272][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[    10.272][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[    10.278][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[    10.309][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[    10.314][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    10.334][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[    10.336][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[    10.346][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[    10.358][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = left_join())
[    10.360][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = summarise([1]))
[    10.377][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[    10.387][cube-solver-12][DEBUG] Solving cube (l0 = filter(), l1 = summarise([1]))
[    10.401][cube-solver-15][DEBUG] Solving cube (l0 = summarise([4]), l1 = union())
[    10.403][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    10.405][cube-solver-12][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([2]))
[    10.424][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[    10.443][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([5]))
[    10.450][cube-solver-10][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join4())
[    10.468][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[    10.485][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[    10.506][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = summarise([8]))
[    10.531][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([13]))
[    10.678][cube-solver-9][DEBUG] Solving cube (l0 = summarise([15]), l1 = natural_join3())
[    10.851][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise([15]), l1 = natural_join3())
[    10.853][MainProcess][INFO] Statistics:
[    10.853][MainProcess][INFO] 	Generated cubes: 28
[    10.853][MainProcess][INFO] 	Attempted programs: 1
[    10.853][MainProcess][INFO] 		Rejected: 0
[    10.853][MainProcess][INFO] 		Failed: 0
[    10.853][MainProcess][INFO] 	Blacklist clauses: 21
[    10.853][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    10.854][MainProcess][DEBUG] 	0: Counter({'summarise': 103, 'natural_join': 78, 'left_join': 66, 'union': 25, 'anti_join': 12})
[    10.854][MainProcess][DEBUG] 	1: Counter({'mutate': 107, 'summarise': 74, 'union': 40, 'natural_join': 24, 'natural_join3': 15, 'inner_join': 12, 'left_join': 12})
[    10.854][MainProcess][INFO] Solution found: natural_join3(@param1, @param0, summarise(@param0, cost = min(cost), P_id))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/17-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/17-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/53.out", col_types = cols(P_id = col_character(),S_name = col_character()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = min(cost)) %>% ungroup()
df4 <- inner_join(input2, input1) %>% inner_join(df3)
out <- df4 %>% select(P_id, S_name) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_id,
       S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.S_name AS S_name,
          LHS.P_id AS P_id,
          LHS.cost AS cost
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.S_name AS S_name,
             RHS.P_id AS P_id,
             RHS.cost AS cost
      FROM input2 AS LHS
      INNER JOIN input1 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
   INNER JOIN
     (SELECT P_id,
             MIN(cost) AS cost
      FROM input1
      GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id
                                AND LHS.cost = RHS.cost))
ORDER BY P_id
