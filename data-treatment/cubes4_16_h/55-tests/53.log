[     3.484][MainProcess][INFO] Parsing specification...
[     3.488][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.488][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.489][MainProcess][DEBUG] Reading input files...
[     3.498][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-1.txt: ['string', 'string', 'int64']
[     3.502][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-3.txt: ['string', 'string']
[     3.508][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/53.out: ['string', 'string']
[     3.539][MainProcess][DEBUG] Generating DSL...
[     3.564][MainProcess][INFO] Creating 16 processes
[     3.645][MainProcess][DEBUG] Increasing generator loc to 2
[     3.645][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.645][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.646][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.646][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.646][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.646][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.646][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.650][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.654][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.659][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.665][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.685][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.687][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.688][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.691][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.710][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.900][cube-solver-0][WARNING] There is no solution for current loc (1).
[     3.901][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     3.902][cube-solver-1][WARNING] There is no solution for current loc (1).
[     3.902][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.903][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.904][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.966][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     3.968][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     3.968][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     3.982][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     3.985][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = mutate())
[     3.985][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join4())
[     3.988][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = inner_join())
[     3.989][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = summarise([2]))
[     3.993][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.995][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([3]))
[     4.001][cube-solver-9][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join3())
[     4.006][cube-solver-14][DEBUG] Solving cube (l0 = summarise([3]), l1 = left_join())
[     4.012][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     4.029][cube-solver-15][DEBUG] Solving cube (l0 = summarise([8]), l1 = union())
[     4.122][cube-solver-13][DEBUG] Solving cube (l0 = summarise([13]), l1 = anti_join([6]))
[     4.209][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([17]))
[     4.220][cube-solver-4][DEBUG] Solving cube (l0 = anti_join([9]), l1 = mutate())
[     4.226][cube-solver-11][DEBUG] Solving cube (l0 = summarise([17]), l1 = summarise([17]))
[     4.247][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     4.247][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([20]))
[     4.251][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([20]))
[     4.254][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     4.275][cube-solver-12][DEBUG] Solving cube (l0 = summarise([22]), l1 = filter())
[     4.296][cube-solver-12][DEBUG] Solving cube (l0 = union(), l1 = summarise([23]))
[     4.325][cube-solver-1][DEBUG] Solving cube (l0 = summarise([24]), l1 = semi_join())
[     4.440][cube-solver-0][DEBUG] Solving cube (l0 = summarise([28]), l1 = intersect())
[     4.602][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = natural_join3())
[     4.604][MainProcess][INFO] Statistics:
[     4.604][MainProcess][INFO] 	Generated cubes: 28
[     4.604][MainProcess][INFO] 	Attempted programs: 4
[     4.604][MainProcess][INFO] 		Rejected: 1
[     4.605][MainProcess][INFO] 		Failed: 2
[     4.605][MainProcess][INFO] 	Blacklist clauses: 43
[     4.605][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     4.605][MainProcess][DEBUG] 	0: Counter({'summarise': 218, 'natural_join': 68, 'left_join': 59, 'anti_join': 29, 'union': 19})
[     4.606][MainProcess][DEBUG] 	1: Counter({'mutate': 116, 'left_join': 72, 'summarise': 59, 'natural_join3': 45, 'union': 39, 'natural_join': 38, 'anti_join': 12, 'semi_join': 11, 'inner_join': 1})
[     4.606][MainProcess][INFO] Solution found: natural_join3(summarise(@param0, cost = min(cost), P_id), @param0, @param1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/17-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/17-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/53.out", col_types = cols(P_id = col_character(),S_name = col_character()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = min(cost)) %>% ungroup()
df4 <- inner_join(df3, input1) %>% inner_join(input2)
out <- df4 %>% select(P_id, S_name) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_id,
       S_name
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.cost AS cost,
          LHS.S_key AS S_key,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.cost AS cost,
             RHS.S_key AS S_key
      FROM
        (SELECT P_id,
                MIN(cost) AS cost
         FROM input1
         GROUP BY P_id) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id
                                   AND LHS.cost = RHS.cost)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY P_id
