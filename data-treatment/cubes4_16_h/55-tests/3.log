[     1.576][MainProcess][INFO] Parsing specification...
[     1.579][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.579][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.580][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.580][MainProcess][DEBUG] Reading input files...
[     1.587][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3-1.txt: ['string', 'string']
[     1.592][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3-2.txt: ['string', 'string']
[     1.596][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3.out: ['string']
[     1.623][MainProcess][DEBUG] Generating DSL...
[     1.644][MainProcess][INFO] Creating 16 processes
[     1.702][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.702][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.702][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.702][MainProcess][DEBUG] Increasing generator loc to 3
[     1.703][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.703][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.708][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.709][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.710][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.715][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.719][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.722][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.729][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.745][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.749][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.750][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.753][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.070][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.071][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.073][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.142][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.142][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.144][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.228][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.228][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.229][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.272][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.277][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.279][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.280][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.285][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.289][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.289][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.291][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.291][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.293][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.294][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.295][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.296][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.296][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.296][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.297][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.298][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.298][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter([1]))
[     2.298][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[     2.303][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = summarise())
[     2.306][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = semi_join())
[     2.342][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([6]))
[     2.350][cube-solver-11][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([6]), l2 = cross_join())
[     2.407][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([12]), l2 = summarise([4]))
[     2.422][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([12]), l2 = mutate())
[     2.435][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([12]), l2 = inner_join())
[     2.484][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([14]), l2 = mutate())
[     2.497][cube-solver-14][DEBUG] Solving cube (l0 = summarise([6]), l1 = anti_join(), l2 = filter([15]))
[     2.739][cube-solver-2][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter([25]))
[     2.764][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([25]))
[     2.783][cube-solver-15][DEBUG] Solving cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([26]))
[     3.005][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter([27]))
[     3.043][cube-solver-3][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([28]), l2 = intersect())
[     3.199][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join4(), l2 = filter([33]))
[     3.229][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = union(), l2 = filter([33]))
[     4.193][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter([25]))
[     4.195][MainProcess][INFO] Statistics:
[     4.195][MainProcess][INFO] 	Generated cubes: 36
[     4.195][MainProcess][INFO] 	Attempted programs: 30
[     4.195][MainProcess][INFO] 		Rejected: 13
[     4.195][MainProcess][INFO] 		Failed: 16
[     4.195][MainProcess][INFO] 	Blacklist clauses: 39
[     4.195][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     4.196][MainProcess][DEBUG] 	0: Counter({'summarise': 658, 'natural_join': 321})
[     4.197][MainProcess][DEBUG] 	1: Counter({'filter': 204, 'mutate': 192, 'summarise': 129, 'left_join': 106, 'natural_join': 97, 'natural_join3': 95, 'anti_join': 80, 'union': 76})
[     4.197][MainProcess][DEBUG] 	2: Counter({'filter': 778, 'union': 64, 'semi_join': 54, 'natural_join': 40, 'natural_join3': 16, 'left_join': 16, 'inner_join': 8, 'anti_join': 6})
[     4.198][MainProcess][INFO] Solution found: filter(natural_join(@param0, summarise(@param1, n = n(), ID_key)), Room == 'R128' | n > 4)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/3-1.txt", col_types = cols(ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/3-2.txt", col_types = cols(ID_key_student = col_character(),ID_key = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/3.out", col_types = cols(ID_key = col_character()))

df3 <- input2 %>% group_by(ID_key) %>% summarise(n = n()) %>% ungroup()
df4 <- inner_join(input1, df3)
df5 <- df4 %>% filter(Room == 'R128' | n > 4)
out <- df5 %>% select(ID_key) %>% arrange(ID_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `ID_key`
FROM
  (SELECT `LHS`.`ID_key` AS `ID_key`,
          `LHS`.`Room` AS `Room`,
          `RHS`.`n` AS `n`
   FROM `input1` AS `LHS`
   INNER JOIN
     (SELECT `ID_key`,
             COUNT() AS `n`
      FROM `input2`
      GROUP BY `ID_key`) AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
WHERE (`Room` = 'R128'
       OR n > 4.0)
ORDER BY ID_key
