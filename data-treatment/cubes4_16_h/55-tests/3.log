[     1.575][MainProcess][INFO] Parsing specification...
[     1.579][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.579][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.579][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.580][MainProcess][DEBUG] Reading input files...
[     1.587][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3-1.txt: ['string', 'string']
[     1.593][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3-2.txt: ['string', 'string']
[     1.597][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3.out: ['string']
[     1.626][MainProcess][DEBUG] Generating DSL...
[     1.653][MainProcess][INFO] Creating 16 processes
[     1.718][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.718][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.718][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.719][MainProcess][DEBUG] Increasing generator loc to 3
[     1.720][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.721][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.724][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.729][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.732][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.733][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.740][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.744][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.747][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.748][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.764][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.771][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.321][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.322][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.324][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.348][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.349][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.350][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.685][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.685][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.687][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.690][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.691][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.693][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.731][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.737][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.738][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.744][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.750][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.751][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.755][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.756][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     2.758][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = summarise())
[     2.759][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     2.762][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.763][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.763][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     2.769][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     2.777][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = intersect())
[     2.779][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = summarise([1]))
[     2.788][cube-solver-9][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([1]), l2 = semi_join())
[     2.788][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[     2.825][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = mutate())
[     2.833][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([5]), l2 = mutate())
[     2.836][cube-solver-14][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([5]), l2 = cross_join())
[     2.844][cube-solver-10][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([5]), l2 = mutate())
[     2.856][cube-solver-10][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([7]), l2 = inner_join())
[     2.941][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([6]), l2 = filter([12]))
[     2.972][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([12]), l2 = summarise([6]))
[     2.989][cube-solver-5][DEBUG] Solving cube (l0 = summarise([6]), l1 = anti_join(), l2 = filter([13]))
[     3.566][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter([36]))
[     3.685][cube-solver-2][DEBUG] Solving cube (l0 = summarise([6]), l1 = summarise([6]), l2 = filter([37]))
[     3.721][cube-solver-2][DEBUG] Solving cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([37]))
[     3.753][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter([37]))
[     4.047][cube-solver-3][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join4(), l2 = filter([40]))
[     4.085][cube-solver-3][DEBUG] Solving cube (l0 = summarise([6]), l1 = union(), l2 = filter([40]))
[     4.396][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter([37]))
[     4.397][MainProcess][INFO] Statistics:
[     4.397][MainProcess][INFO] 	Generated cubes: 36
[     4.398][MainProcess][INFO] 	Attempted programs: 7
[     4.398][MainProcess][INFO] 		Rejected: 6
[     4.398][MainProcess][INFO] 		Failed: 0
[     4.398][MainProcess][INFO] 	Blacklist clauses: 46
[     4.398][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     4.398][MainProcess][DEBUG] 	0: Counter({'summarise': 284, 'natural_join': 166})
[     4.399][MainProcess][DEBUG] 	1: Counter({'mutate': 130, 'filter': 99, 'natural_join': 53, 'natural_join3': 50, 'anti_join': 44, 'summarise': 36, 'union': 24, 'left_join': 14})
[     4.399][MainProcess][DEBUG] 	2: Counter({'filter': 351, 'left_join': 48, 'union': 24, 'semi_join': 10, 'natural_join3': 9, 'natural_join': 8})
[     4.399][MainProcess][INFO] Solution found: filter(natural_join3(@param0, @param1, summarise(@param1, n = n(), ID_key)), Room == 'R128' | n > 4)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/3-1.txt", col_types = cols(ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/3-2.txt", col_types = cols(ID_key_student = col_character(),ID_key = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/3.out", col_types = cols(ID_key = col_character()))

df3 <- input2 %>% group_by(ID_key) %>% summarise(n = n()) %>% ungroup()
df4 <- inner_join(input1, input2) %>% inner_join(df3)
df5 <- df4 %>% filter(Room == 'R128' | n > 4)
out <- df5 %>% select(ID_key) %>% distinct() %>% arrange(ID_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `ID_key`
FROM
  (SELECT `LHS`.`ID_key` AS `ID_key`,
          `LHS`.`Room` AS `Room`,
          `LHS`.`ID_key_student` AS `ID_key_student`,
          `RHS`.`n` AS `n`
   FROM
     (SELECT `LHS`.`ID_key` AS `ID_key`,
             `LHS`.`Room` AS `Room`,
             `RHS`.`ID_key_student` AS `ID_key_student`
      FROM `input1` AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`)) AS `LHS`
   INNER JOIN
     (SELECT `ID_key`,
             COUNT() AS `n`
      FROM `input2`
      GROUP BY `ID_key`) AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
WHERE (`Room` = 'R128'
       OR n > 4.0)
ORDER BY ID_key
