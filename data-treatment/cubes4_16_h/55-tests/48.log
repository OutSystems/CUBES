[     1.620][MainProcess][INFO] Parsing specification...
[     1.624][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.624][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.624][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.625][MainProcess][DEBUG] Reading input files...
[     1.632][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-1.txt: ['string', 'string', 'int64']
[     1.637][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-3.txt: ['string', 'string']
[     1.642][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/48.out: ['string', 'string', 'int64']
[     1.671][MainProcess][DEBUG] Generating DSL...
[     1.697][MainProcess][INFO] Creating 16 processes
[     1.765][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.765][MainProcess][DEBUG] Increasing generator loc to 3
[     1.765][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.765][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.765][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.766][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.769][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.772][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.780][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.784][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.786][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.787][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.793][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.794][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.815][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.823][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.832][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.495][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.496][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.499][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.549][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.549][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.551][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.630][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.630][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.632][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.755][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.770][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.772][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.773][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.777][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.779][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.781][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.781][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.782][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.785][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.786][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.787][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.790][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.793][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.793][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.793][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.794][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.797][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.808][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     2.817][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([1]), l2 = intersect())
[     2.882][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([2]))
[     2.893][cube-solver-15][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([2]), l2 = semi_join())
[     2.896][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.897][MainProcess][INFO] Statistics:
[     2.897][MainProcess][INFO] 	Generated cubes: 30
[     2.897][MainProcess][INFO] 	Attempted programs: 6
[     2.898][MainProcess][INFO] 		Rejected: 0
[     2.898][MainProcess][INFO] 		Failed: 5
[     2.898][MainProcess][INFO] 	Blacklist clauses: 5
[     2.898][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.898][MainProcess][DEBUG] 	0: Counter({'natural_join': 9})
[     2.898][MainProcess][DEBUG] 	1: Counter({'filter': 8, 'summarise': 1})
[     2.899][MainProcess][DEBUG] 	2: Counter({'mutate': 7, 'filter': 1, 'summarise': 1})
[     2.899][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param0, @param1), n = n(), P_id, S_name), S_name != 'SN1')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/17-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/17-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/48.out", col_types = cols(P_id = col_character(),S_name = col_character(),n = col_integer()))

df3 <- inner_join(input1, input2)
df4 <- df3 %>% group_by(P_id, S_name) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(S_name != 'SN1')
out <- df5 %>% select(P_id, S_name, n) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `P_id`,
       `S_name`,
       `n`
FROM
  (SELECT `P_id`,
          `S_name`,
          COUNT() AS `n`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`P_id` AS `P_id`,
             `LHS`.`cost` AS `cost`,
             `RHS`.`S_name` AS `S_name`
      FROM `input1` AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
   GROUP BY `P_id`,
            `S_name`)
WHERE (`S_name` != 'SN1')
ORDER BY P_id
