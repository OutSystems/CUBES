[     1.668][MainProcess][INFO] Parsing specification...
[     1.671][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.671][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.671][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.672][MainProcess][DEBUG] Reading input files...
[     1.680][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-1.txt: ['string', 'string', 'int64']
[     1.684][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-3.txt: ['string', 'string']
[     1.690][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/48.out: ['string', 'string', 'int64']
[     1.717][MainProcess][DEBUG] Generating DSL...
[     1.738][MainProcess][INFO] Creating 16 processes
[     1.804][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.804][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.804][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.805][MainProcess][DEBUG] Increasing generator loc to 3
[     1.805][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.806][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.806][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.807][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.810][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.818][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.819][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.822][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.828][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.833][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.844][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.854][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.862][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.197][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.198][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.200][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.297][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.298][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.299][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.358][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.359][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.361][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.377][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.378][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.380][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.380][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.385][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.389][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.393][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.397][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.403][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.408][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.413][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = summarise([1]))
[     2.417][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = filter())
[     2.421][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = anti_join())
[     2.433][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.438][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = left_join())
[     2.450][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = mutate())
[     2.455][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([1]), l2 = union())
[     2.481][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[     2.555][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = mutate())
[     2.784][cube-solver-2][DEBUG] Solving cube (l0 = summarise([8]), l1 = natural_join(), l2 = filter([2]))
[     2.848][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([2]), l2 = mutate())
[     2.853][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([9]), l2 = filter([2]))
[     2.855][cube-solver-14][DEBUG] Solving cube (l0 = summarise([9]), l1 = filter([2]), l2 = intersect())
[     2.877][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([2]))
[     2.884][cube-solver-15][DEBUG] Solving cube (l0 = summarise([9]), l1 = filter([2]), l2 = semi_join())
[     2.915][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([10]), l2 = filter([2]))
[     2.929][cube-solver-12][DEBUG] Solving cube (l0 = summarise([10]), l1 = filter([2]), l2 = cross_join())
[     2.948][cube-solver-1][DEBUG] Solving cube (l0 = summarise([10]), l1 = natural_join4(), l2 = filter([2]))
[     2.958][cube-solver-1][DEBUG] Solving cube (l0 = summarise([10]), l1 = filter([2]), l2 = mutate())
[     2.967][cube-solver-1][DEBUG] Solving cube (l0 = summarise([10]), l1 = filter([2]), l2 = inner_join())
[     3.091][cube-solver-5][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.092][MainProcess][INFO] Statistics:
[     3.093][MainProcess][INFO] 	Generated cubes: 33
[     3.093][MainProcess][INFO] 	Attempted programs: 10
[     3.093][MainProcess][INFO] 		Rejected: 9
[     3.093][MainProcess][INFO] 		Failed: 0
[     3.093][MainProcess][INFO] 	Blacklist clauses: 12
[     3.093][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     3.094][MainProcess][DEBUG] 	0: Counter({'natural_join': 134, 'summarise': 134})
[     3.094][MainProcess][DEBUG] 	1: Counter({'filter': 207, 'mutate': 45, 'summarise': 10, 'natural_join': 6})
[     3.094][MainProcess][DEBUG] 	2: Counter({'filter': 61, 'natural_join3': 46, 'mutate': 42, 'summarise': 37, 'union': 34, 'natural_join': 24, 'left_join': 24})
[     3.094][MainProcess][INFO] Solution found: summarise(filter(natural_join(@param1, @param0), S_name != 'SN1'), n = n(), P_id, S_name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/17-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/17-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/48.out", col_types = cols(P_id = col_character(),S_name = col_character(),n = col_integer()))

df3 <- inner_join(input2, input1)
df4 <- df3 %>% filter(S_name != 'SN1')
df5 <- df4 %>% group_by(P_id, S_name) %>% summarise(n = n()) %>% ungroup()
out <- df5 %>% select(P_id, S_name, n) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `P_id`,
       `S_name`,
       `n`
FROM
  (SELECT `P_id`,
          `S_name`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`S_name` AS `S_name`,
                `RHS`.`P_id` AS `P_id`,
                `RHS`.`cost` AS `cost`
         FROM `input2` AS `LHS`
         INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
      WHERE (`S_name` != 'SN1'))
   GROUP BY P_id,
            S_name)
ORDER BY P_id
