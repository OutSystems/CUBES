[     1.588][MainProcess][INFO] Parsing specification...
[     1.592][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.592][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.592][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.593][MainProcess][DEBUG] Reading input files...
[     1.600][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.611][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.615][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/36.out: ['string']
[     1.645][MainProcess][DEBUG] Generating DSL...
[     1.671][MainProcess][INFO] Creating 16 processes
[     1.748][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.748][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.749][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.749][MainProcess][DEBUG] Increasing generator loc to 3
[     1.748][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.749][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.750][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.753][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.758][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.761][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.772][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.773][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.788][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.795][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.796][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.796][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.819][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.319][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.320][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.322][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.325][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.325][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.327][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.514][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.515][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.518][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.585][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.586][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.587][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.844][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.847][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.852][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.853][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.855][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.856][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.859][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.859][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.861][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.864][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.868][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.872][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.875][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([1]))
[     2.875][cube-solver-5][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = union())
[     2.880][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = intersect())
[     2.883][cube-solver-13][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = semi_join())
[     2.885][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise([2]))
[     2.886][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = cross_join())
[     2.885][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.889][cube-solver-13][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = mutate())
[     2.893][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = inner_join())
[     2.894][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = anti_join(), l2 = filter())
[     2.895][cube-solver-13][DEBUG] Solving cube (l0 = summarise([2]), l1 = left_join(), l2 = filter())
[     2.900][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = union(), l2 = filter([1]))
[     2.901][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = intersect(), l2 = filter([1]))
[     2.902][cube-solver-13][DEBUG] Solving cube (l0 = summarise([2]), l1 = semi_join(), l2 = filter([1]))
[     2.907][cube-solver-5][DEBUG] Solving cube (l0 = summarise([3]), l1 = cross_join(), l2 = filter([1]))
[     2.909][cube-solver-15][DEBUG] Solving cube (l0 = summarise([3]), l1 = mutate(), l2 = filter([1]))
[     2.909][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = inner_join(), l2 = filter([1]))
[     2.915][cube-solver-5][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join(), l2 = summarise([3]))
[     2.916][cube-solver-15][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join(), l2 = mutate())
[     2.917][cube-solver-13][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join3([1]), l2 = summarise([3]))
[     2.921][cube-solver-15][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join3([1]), l2 = mutate())
[     2.922][cube-solver-5][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join4(), l2 = summarise([5]))
[     2.970][cube-solver-10][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.971][MainProcess][INFO] Statistics:
[     2.971][MainProcess][INFO] 	Generated cubes: 46
[     2.971][MainProcess][INFO] 	Attempted programs: 2
[     2.971][MainProcess][INFO] 		Rejected: 0
[     2.971][MainProcess][INFO] 		Failed: 1
[     2.971][MainProcess][INFO] 	Blacklist clauses: 7
[     2.971][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.972][MainProcess][DEBUG] 	0: Counter({'natural_join3': 14})
[     2.972][MainProcess][DEBUG] 	1: Counter({'filter': 10, 'summarise': 4})
[     2.972][MainProcess][DEBUG] 	2: Counter({'mutate': 8, 'filter': 4, 'summarise': 2})
[     2.972][MainProcess][INFO] Solution found: mutate(filter(natural_join3(@param1, @param0, @param2), color == 'red'), n = n())
[     3.102][cube-solver-7][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     3.146][cube-solver-15][DEBUG] Found solution with cube (l0 = filter([1]), l1 = natural_join3([1]), l2 = mutate())
[     3.484][cube-solver-13][DEBUG] Found solution with cube (l0 = filter([1]), l1 = natural_join3([1]), l2 = summarise([3]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/36.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input2, input1) %>% inner_join(input3)
df5 <- df4 %>% filter(color == 'red')
df6 <- df5 %>% mutate(n = n())
out <- df6 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `S_name`
FROM
  (SELECT `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`,
          `LHS`.`S_key` AS `S_key`,
          `RHS`.`S_name` AS `S_name`
   FROM
     (SELECT `LHS`.`P_id` AS `P_id`,
             `LHS`.`color` AS `color`,
             `RHS`.`S_key` AS `S_key`
      FROM `input2` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
   INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`color` = 'red')
ORDER BY S_name
