[     1.677][MainProcess][INFO] Parsing specification...
[     1.681][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.681][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.681][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.682][MainProcess][DEBUG] Reading input files...
[     1.687][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.690][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.694][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.698][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/36.out: ['string']
[     1.727][MainProcess][DEBUG] Generating DSL...
[     1.748][MainProcess][INFO] Creating 16 processes
[     1.815][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.815][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.815][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.816][MainProcess][DEBUG] Increasing generator loc to 3
[     1.816][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.816][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.817][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.819][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.827][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.828][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.831][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.839][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.839][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.848][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.852][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.859][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.865][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.181][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.181][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.183][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.218][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.218][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.220][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.305][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.305][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.307][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.385][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.385][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.387][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.486][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.492][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.495][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.496][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.504][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.513][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.514][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.516][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.518][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.526][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([1]))
[     2.527][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.529][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.532][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = summarise([1]))
[     2.532][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = filter())
[     2.533][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = anti_join())
[     2.537][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = left_join())
[     2.537][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = union())
[     2.538][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = intersect())
[     2.540][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = semi_join())
[     2.542][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = cross_join())
[     2.544][cube-solver-7][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = inner_join())
[     2.544][cube-solver-15][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = mutate())
[     2.548][cube-solver-7][DEBUG] Solving cube (l0 = summarise([3]), l1 = anti_join(), l2 = filter())
[     2.549][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = left_join(), l2 = filter())
[     2.550][cube-solver-15][DEBUG] Solving cube (l0 = summarise([3]), l1 = union(), l2 = filter())
[     2.552][cube-solver-7][DEBUG] Solving cube (l0 = summarise([3]), l1 = intersect(), l2 = filter())
[     2.555][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = semi_join(), l2 = filter())
[     2.556][cube-solver-7][DEBUG] Solving cube (l0 = summarise([3]), l1 = cross_join(), l2 = filter())
[     2.557][cube-solver-15][DEBUG] Solving cube (l0 = summarise([3]), l1 = mutate(), l2 = filter())
[     2.560][cube-solver-7][DEBUG] Solving cube (l0 = summarise([4]), l1 = inner_join(), l2 = filter())
[     2.561][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = summarise([5]))
[     2.563][cube-solver-15][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = mutate())
[     2.565][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3([2]), l2 = summarise([5]))
[     2.567][cube-solver-15][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3([2]), l2 = mutate())
[     2.570][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4(), l2 = summarise([5]))
[     2.578][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.581][cube-solver-14][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4(), l2 = mutate())
[     2.686][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([3]), l2 = summarise([10]))
[     2.701][cube-solver-10][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.701][cube-solver-5][DEBUG] Solving cube (l0 = filter([3]), l1 = summarise([10]), l2 = natural_join())
[     2.702][MainProcess][INFO] Statistics:
[     2.702][MainProcess][INFO] 	Generated cubes: 48
[     2.702][MainProcess][INFO] 	Attempted programs: 5
[     2.702][MainProcess][INFO] 		Rejected: 0
[     2.702][MainProcess][INFO] 		Failed: 4
[     2.702][MainProcess][INFO] 	Blacklist clauses: 15
[     2.702][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.703][MainProcess][DEBUG] 	0: Counter({'natural_join3': 20, 'filter': 20})
[     2.703][MainProcess][DEBUG] 	1: Counter({'natural_join4': 13, 'mutate': 10, 'filter': 10, 'natural_join3': 7})
[     2.703][MainProcess][DEBUG] 	2: Counter({'mutate': 17, 'summarise': 13, 'filter': 10})
[     2.703][MainProcess][INFO] Solution found: mutate(filter(natural_join3(@param2, @param0, @param1), color == 'red'), n = n())
[     2.771][cube-solver-7][DEBUG] Found solution with cube (l0 = filter(), l1 = natural_join3([2]), l2 = summarise([5]))
[     2.791][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.791][cube-solver-11][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.870][cube-solver-15][DEBUG] Found solution with cube (l0 = filter(), l1 = natural_join3([2]), l2 = mutate())
[     2.953][cube-solver-14][DEBUG] Found solution with cube (l0 = filter(), l1 = natural_join4(), l2 = mutate())
[     2.981][cube-solver-9][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/36.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input3, input1) %>% inner_join(input2)
df5 <- df4 %>% filter(color == 'red')
df6 <- df5 %>% mutate(n = n())
out <- df6 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `S_name`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`S_name` AS `S_name`,
          `LHS`.`P_id` AS `P_id`,
          `RHS`.`color` AS `color`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`S_name` AS `S_name`,
             `RHS`.`P_id` AS `P_id`
      FROM `input3` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
   INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
WHERE (`color` = 'red')
ORDER BY S_name
