[     1.568][MainProcess][INFO] Parsing specification...
[     1.576][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.576][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.576][MainProcess][DEBUG] Reading input files...
[     1.592][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.598][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.604][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.611][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/20.out: ['string', 'string', 'string', 'string']
[     1.643][MainProcess][DEBUG] Generating DSL...
[     1.660][MainProcess][INFO] Creating 16 processes
[     1.725][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.725][MainProcess][DEBUG] Increasing generator loc to 2
[     1.727][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.728][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.735][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.744][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.755][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.761][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.765][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.773][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.776][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.963][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.964][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     1.966][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.991][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.000][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     2.005][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.006][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     2.007][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.009][cube-solver-8][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.011][cube-solver-10][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     2.011][cube-solver-8][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     2.013][MainProcess][DEBUG] Increasing generator loc to 3
[     2.013][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.013][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.016][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     2.021][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.024][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     2.028][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.037][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     2.041][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.069][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     2.069][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     2.073][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.073][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.108][cube-solver-6][DEBUG] Found solution with cube (l0 = filter(), l1 = natural_join4())
[     2.109][MainProcess][INFO] Statistics:
[     2.110][MainProcess][INFO] 	Generated cubes: 29
[     2.110][MainProcess][INFO] 	Attempted programs: 1
[     2.110][MainProcess][INFO] 		Rejected: 0
[     2.110][MainProcess][INFO] 		Failed: 0
[     2.110][MainProcess][INFO] 	Blacklist clauses: 0
[     2.110][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.111][MainProcess][DEBUG] 	0: Counter({'filter': 5})
[     2.111][MainProcess][DEBUG] 	1: Counter({'natural_join4': 5})
[     2.111][MainProcess][INFO] Solution found: natural_join4(@param2, @param0, @param1, filter(@param1, color == 'red'))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/20.out", col_types = cols(S_key = col_character(),P_id = col_character(),S_name = col_character(),color = col_character()))

df4 <- input2 %>% filter(color == 'red')
df5 <- inner_join(input3, input1) %>% inner_join(input2) %>% inner_join(df4)
out <- df5 %>% select(S_key, P_id, S_name, color) %>% arrange(S_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_key`,
       `P_id`,
       `S_name`,
       `color`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`S_name` AS `S_name`,
          `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`S_name` AS `S_name`,
             `LHS`.`P_id` AS `P_id`,
             `RHS`.`color` AS `color`
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`S_name` AS `S_name`,
                `RHS`.`P_id` AS `P_id`
         FROM `input3` AS `LHS`
         INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `input2`
      WHERE (`color` = 'red')) AS RHS ON (LHS.P_id = RHS.P_id
                                          AND LHS.color = RHS.color))
ORDER BY S_key
