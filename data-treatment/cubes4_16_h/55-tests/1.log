[     3.652][MainProcess][INFO] Parsing specification...
[     3.658][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.658][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.659][MainProcess][DEBUG] Reading input files...
[     3.669][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1-1.txt: ['string', 'string']
[     3.675][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1-2.txt: ['string', 'string']
[     3.681][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1-3.txt: ['string', 'string']
[     3.687][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1-4.txt: ['string', 'string', 'string']
[     3.692][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1.out: ['string']
[     3.740][MainProcess][DEBUG] Generating DSL...
[     3.784][MainProcess][INFO] Creating 16 processes
[     3.853][MainProcess][DEBUG] Increasing generator loc to 2
[     3.860][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.863][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.866][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.873][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.878][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.880][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.882][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.883][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.887][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.891][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.894][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.895][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.898][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.903][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.912][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.943][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     4.331][cube-solver-0][WARNING] There is no solution for current loc (1).
[     4.332][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     4.333][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     5.158][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     5.164][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     5.167][cube-solver-2][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     5.169][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     5.169][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     5.171][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     5.172][cube-solver-2][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     5.174][MainProcess][DEBUG] Increasing generator loc to 3
[     5.174][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     5.175][cube-solver-7][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     5.175][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     5.178][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     5.178][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     5.180][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     5.180][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     5.182][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     5.182][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     5.182][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     5.186][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     5.189][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     5.190][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     5.192][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     5.193][cube-solver-12][DEBUG] Solving cube (l0 = filter(), l1 = semi_join())
[     5.195][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     5.201][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     5.202][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     5.203][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     5.232][cube-solver-14][DEBUG] Solving cube (l0 = filter([4]), l1 = inner_join())
[     5.244][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([5]))
[     5.246][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     5.255][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     5.341][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([11]))
[     5.345][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([11]))
[     5.355][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     5.841][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([24]))
[     5.856][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     6.922][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([32]), l2 = natural_join4([11]))
[     6.983][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([32]), l2 = intersect())
[     7.021][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = filter([32]))
[     7.036][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = filter([32]))
[     7.051][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([32]))
[     7.067][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join(), l2 = filter([32]))
[     7.073][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([32]), l2 = natural_join3())
[     7.075][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join(), l2 = filter([32]))
[     7.090][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]), l2 = filter([32]))
[     7.096][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([32]), l2 = cross_join())
[     7.102][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3(), l2 = filter([32]))
[     7.109][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([3]), l1 = filter([32]), l2 = anti_join())
[     7.115][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([3]), l1 = natural_join4([12]), l2 = filter([32]))
[     7.126][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([32]), l2 = natural_join([4]))
[     7.130][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([32]), l2 = natural_join3())
[     7.133][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([32]), l2 = natural_join4([12]))
[     7.149][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([32]), l2 = filter([32]))
[     7.188][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([32]), l2 = anti_join())
[     7.190][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([5]), l1 = filter([32]), l2 = natural_join([5]))
[     7.205][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([5]), l1 = filter([32]), l2 = semi_join())
[     7.222][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([4]), l1 = filter([32]), l2 = left_join())
[     7.242][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3([6]), l1 = filter([32]), l2 = union())
[     7.303][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([5]), l1 = filter([32]), l2 = left_join())
[     7.303][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([5]), l1 = filter([32]), l2 = inner_join())
[     7.341][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([6]), l1 = filter([32]), l2 = filter([32]))
[     7.343][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3([12]), l1 = filter([32]), l2 = intersect())
[     7.348][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3([12]), l1 = filter([32]), l2 = semi_join())
[     7.387][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3([15]), l1 = filter([32]), l2 = cross_join())
[     7.584][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([6]), l1 = anti_join(), l2 = filter([32]))
[     7.611][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = filter([32]), l2 = inner_join())
[     7.747][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([6]), l1 = union(), l2 = filter([32]))
[     7.779][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = anti_join(), l2 = filter([32]))
[     8.052][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([6]), l1 = filter([32]), l2 = union())
[     8.090][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = left_join(), l2 = filter([32]))
[     9.639][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = union(), l2 = filter([32]))
[     9.999][cube-solver-5][DEBUG] Found solution with cube (l0 = natural_join3([16]), l1 = left_join(), l2 = filter([32]))
[    10.004][MainProcess][INFO] Statistics:
[    10.004][MainProcess][INFO] 	Generated cubes: 57
[    10.004][MainProcess][INFO] 	Attempted programs: 163
[    10.004][MainProcess][INFO] 		Rejected: 18
[    10.004][MainProcess][INFO] 		Failed: 144
[    10.004][MainProcess][INFO] 	Blacklist clauses: 70
[    10.005][MainProcess][DEBUG] Priting statistics for good programs of size 2
[    10.005][MainProcess][DEBUG] 	0: Counter({'natural_join4': 384})
[    10.006][MainProcess][DEBUG] 	1: Counter({'filter': 384})
[    10.006][MainProcess][DEBUG] Priting statistics for good programs of size 3
[    10.006][MainProcess][DEBUG] 	0: Counter({'natural_join3': 338})
[    10.006][MainProcess][DEBUG] 	1: Counter({'left_join': 219, 'anti_join': 83, 'union': 37})
[    10.007][MainProcess][DEBUG] 	2: Counter({'filter': 339})
[    10.007][MainProcess][INFO] Solution found: filter(left_join(@param3, natural_join3(@param0, @param2, @param1)), F_name == 'faculty1' & level == 'JR')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/1-1.txt", col_types = cols(C_name = col_character(),F_key = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/1-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/1-3.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input3 <- copy_to(con, input3)
input4 <- read_csv("tests-examples/55-tests/tables/1-4.txt", col_types = cols(S_key = col_character(),S_name = col_character(),level = col_character()))
input4 <- copy_to(con, input4)
expected_output <- read_csv("tests-examples/55-tests/tables/1.out", col_types = cols(S_name = col_character()))

df5 <- inner_join(input1, input3) %>% inner_join(input2)
df6 <- left_join(input4, df5)
df7 <- df6 %>% filter(F_name == 'faculty1' & level == 'JR')
out <- df7 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`S_name` AS `S_name`,
          `LHS`.`level` AS `level`,
          `RHS`.`C_name` AS `C_name`,
          `RHS`.`F_key` AS `F_key`,
          `RHS`.`F_name` AS `F_name`
   FROM `input4` AS `LHS`
   LEFT JOIN
     (SELECT `LHS`.`C_name` AS `C_name`,
             `LHS`.`F_key` AS `F_key`,
             `LHS`.`F_name` AS `F_name`,
             `RHS`.`S_key` AS `S_key`
      FROM
        (SELECT `LHS`.`C_name` AS `C_name`,
                `LHS`.`F_key` AS `F_key`,
                `RHS`.`F_name` AS `F_name`
         FROM `input1` AS `LHS`
         INNER JOIN `input3` AS `RHS` ON (`LHS`.`F_key` = `RHS`.`F_key`)) AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`C_name` = `RHS`.`C_name`)) AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`F_name` = 'faculty1'
       AND `level` = 'JR')
ORDER BY S_name
