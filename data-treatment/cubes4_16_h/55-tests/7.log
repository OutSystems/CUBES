[     1.569][MainProcess][INFO] Parsing specification...
[     1.572][MainProcess][DEBUG] Reading input files...
[     1.580][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/7-1.txt: ['string', 'string', 'int64']
[     1.585][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/7.out: ['string', 'int64']
[     1.610][MainProcess][DEBUG] Generating DSL...
[     1.626][MainProcess][INFO] Creating 16 processes
[     1.691][MainProcess][DEBUG] Increasing generator loc to 2
[     1.691][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.691][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.692][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.692][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.692][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.692][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.692][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.692][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.692][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.700][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.701][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.701][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.707][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.718][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.721][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.729][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.808][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.811][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.851][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     1.852][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     1.853][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     1.855][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     1.865][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     1.881][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     1.884][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     1.886][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     1.898][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())
[     1.900][MainProcess][INFO] Statistics:
[     1.900][MainProcess][INFO] 	Generated cubes: 18
[     1.900][MainProcess][INFO] 	Attempted programs: 1
[     1.900][MainProcess][INFO] 		Rejected: 0
[     1.900][MainProcess][INFO] 		Failed: 0
[     1.901][MainProcess][INFO] 	Blacklist clauses: 0
[     1.901][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     1.901][MainProcess][DEBUG] 	0: Counter({'mutate': 5, 'summarise': 5})
[     1.901][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     1.901][MainProcess][DEBUG] 	0: Counter({'summarise': 3})
[     1.901][MainProcess][DEBUG] 	1: Counter({'natural_join': 2, 'filter': 1})
[     1.902][MainProcess][INFO] Solution found: natural_join(summarise(@param0, meanage = mean(age), level), @param0)
[     1.996][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)
[     2.068][cube-solver-10][DEBUG] Found solution with cube (l0 = summarise(), l1 = semi_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/7-1.txt", col_types = cols(S_key = col_character(),level = col_character(),age = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/55-tests/tables/7.out", col_types = cols(level = col_character(),meanage = col_integer()))

df2 <- input1 %>% group_by(level) %>% summarise(meanage = mean(age)) %>% ungroup()
df3 <- inner_join(df2, input1)
out <- df3 %>% select(level, meanage) %>% distinct() %>% arrange(level)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT LEVEL,
                meanage
FROM
  (SELECT LHS.level AS LEVEL,
          LHS.meanage AS meanage,
          RHS.S_key AS S_key,
          RHS.age AS age
   FROM
     (SELECT LEVEL,
             AVG(age) AS meanage
      FROM input1
      GROUP BY LEVEL) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.level = RHS.level))
ORDER BY LEVEL
