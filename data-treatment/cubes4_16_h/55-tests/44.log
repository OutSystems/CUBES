[     1.585][MainProcess][INFO] Parsing specification...
[     1.589][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.589][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.589][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.590][MainProcess][DEBUG] Reading input files...
[     1.597][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-1.txt: ['string', 'string']
[     1.612][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-2.txt: ['string', 'string']
[     1.619][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-3.txt: ['string', 'string']
[     1.625][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/44.out: ['string']
[     1.665][MainProcess][DEBUG] Generating DSL...
[     1.691][MainProcess][INFO] Creating 16 processes
[     1.771][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.771][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.771][MainProcess][DEBUG] Increasing generator loc to 3
[     1.771][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.771][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.772][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.772][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.775][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.779][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.785][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.794][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.798][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.806][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.810][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.819][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.822][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.836][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.375][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.376][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.378][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.452][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.453][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.455][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.647][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.648][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.650][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.687][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.688][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.691][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.867][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.872][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.873][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.877][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.877][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.877][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.884][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.913][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.915][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.921][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = summarise([1]))
[     2.922][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = filter())
[     2.927][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = anti_join())
[     2.927][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = left_join())
[     2.930][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = union())
[     2.932][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = intersect())
[     2.934][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = semi_join())
[     2.937][cube-solver-13][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([1]), l2 = cross_join())
[     2.937][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([1]), l2 = mutate())
[     2.942][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([1]), l2 = inner_join())
[     2.945][cube-solver-13][DEBUG] Solving cube (l0 = summarise([2]), l1 = anti_join(), l2 = filter([1]))
[     2.947][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = left_join(), l2 = filter([1]))
[     2.952][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = intersect(), l2 = filter([1]))
[     2.952][cube-solver-13][DEBUG] Solving cube (l0 = summarise([2]), l1 = union(), l2 = filter([1]))
[     2.956][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]), l2 = filter([1]))
[     2.956][cube-solver-7][DEBUG] Solving cube (l0 = summarise([3]), l1 = semi_join(), l2 = filter([1]))
[     2.959][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = cross_join(), l2 = filter([1]))
[     2.962][cube-solver-7][DEBUG] Solving cube (l0 = summarise([3]), l1 = mutate(), l2 = filter([1]))
[     2.966][cube-solver-12][DEBUG] Solving cube (l0 = summarise([3]), l1 = inner_join(), l2 = filter([1]))
[     2.967][cube-solver-7][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join(), l2 = mutate())
[     2.967][cube-solver-13][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join(), l2 = summarise([3]))
[     2.970][cube-solver-7][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join3([1]), l2 = summarise([3]))
[     2.975][cube-solver-12][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join4(), l2 = summarise([3]))
[     2.975][cube-solver-13][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join3([1]), l2 = mutate())
[     2.994][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([2]), l2 = summarise([4]))
[     3.004][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = natural_join4(), l2 = mutate())
[     3.007][cube-solver-10][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.008][MainProcess][INFO] Statistics:
[     3.008][MainProcess][INFO] 	Generated cubes: 47
[     3.008][MainProcess][INFO] 	Attempted programs: 2
[     3.008][MainProcess][INFO] 		Rejected: 0
[     3.009][MainProcess][INFO] 		Failed: 1
[     3.009][MainProcess][INFO] 	Blacklist clauses: 9
[     3.009][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.009][MainProcess][DEBUG] 	0: Counter({'natural_join3': 8, 'summarise': 2})
[     3.009][MainProcess][DEBUG] 	1: Counter({'filter': 6, 'summarise': 4})
[     3.010][MainProcess][DEBUG] 	2: Counter({'filter': 4, 'mutate': 4, 'natural_join4': 2})
[     3.010][MainProcess][INFO] Solution found: mutate(filter(natural_join3(@param1, @param0, @param2), S_name == 'AWS'), n = n())
[     3.130][cube-solver-4][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     3.139][cube-solver-13][DEBUG] Found solution with cube (l0 = filter([1]), l1 = natural_join3([1]), l2 = mutate())
[     3.277][cube-solver-8][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.341][cube-solver-5][DEBUG] Found solution with cube (l0 = filter([4]), l1 = natural_join4(), l2 = mutate())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/16-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/16-2.txt", col_types = cols(P_id = col_character(),P_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/16-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/44.out", col_types = cols(P_name = col_character()))

df4 <- inner_join(input2, input1) %>% inner_join(input3)
df5 <- df4 %>% filter(S_name == 'AWS')
df6 <- df5 %>% mutate(n = n())
out <- df6 %>% select(P_name) %>% distinct() %>% arrange(P_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `P_name`
FROM
  (SELECT `LHS`.`P_id` AS `P_id`,
          `LHS`.`P_name` AS `P_name`,
          `LHS`.`S_key` AS `S_key`,
          `RHS`.`S_name` AS `S_name`
   FROM
     (SELECT `LHS`.`P_id` AS `P_id`,
             `LHS`.`P_name` AS `P_name`,
             `RHS`.`S_key` AS `S_key`
      FROM `input2` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
   INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`S_name` = 'AWS')
ORDER BY P_name
