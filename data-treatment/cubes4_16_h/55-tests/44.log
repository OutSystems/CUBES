[     1.581][MainProcess][INFO] Parsing specification...
[     1.584][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.585][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.585][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.585][MainProcess][DEBUG] Reading input files...
[     1.592][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-1.txt: ['string', 'string']
[     1.597][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-2.txt: ['string', 'string']
[     1.601][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-3.txt: ['string', 'string']
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/44.out: ['string']
[     1.635][MainProcess][DEBUG] Generating DSL...
[     1.655][MainProcess][INFO] Creating 16 processes
[     1.723][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.723][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.723][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.724][MainProcess][DEBUG] Increasing generator loc to 3
[     1.725][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.725][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.725][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.731][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.731][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.736][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.738][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.746][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.749][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.759][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.779][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.788][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.083][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.084][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.086][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.127][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.128][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.129][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.366][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.371][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.371][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.374][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.374][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.392][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.393][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.395][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.422][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.425][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.428][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3([2]))
[     2.439][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter(), l2 = summarise())
[     2.442][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = mutate())
[     2.448][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = natural_join4())
[     2.462][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([1]), l2 = filter([1]))
[     2.469][cube-solver-12][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([1]), l2 = summarise([2]))
[     2.476][cube-solver-12][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([1]), l2 = filter([1]))
[     2.483][cube-solver-12][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([1]), l2 = anti_join())
[     2.492][cube-solver-12][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([1]), l2 = left_join())
[     2.499][cube-solver-12][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([1]), l2 = union())
[     2.507][cube-solver-12][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([1]), l2 = intersect())
[     2.514][cube-solver-12][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter([1]), l2 = semi_join())
[     2.521][cube-solver-10][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.522][MainProcess][INFO] Statistics:
[     2.522][MainProcess][INFO] 	Generated cubes: 31
[     2.522][MainProcess][INFO] 	Attempted programs: 5
[     2.523][MainProcess][INFO] 		Rejected: 0
[     2.522][cube-solver-12][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter([1]), l2 = cross_join())
[     2.523][MainProcess][INFO] 		Failed: 4
[     2.523][MainProcess][INFO] 	Blacklist clauses: 8
[     2.523][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.523][MainProcess][DEBUG] 	0: Counter({'natural_join3': 11})
[     2.523][MainProcess][DEBUG] 	1: Counter({'filter': 11})
[     2.523][MainProcess][DEBUG] 	2: Counter({'mutate': 8, 'summarise': 3})
[     2.524][MainProcess][INFO] Solution found: mutate(filter(natural_join3(@param2, @param0, @param1), S_name == 'AWS'), n = n())
[     2.728][cube-solver-8][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.800][cube-solver-14][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter([1]), l2 = natural_join4())
[     2.962][cube-solver-9][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = filter(), l2 = summarise())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/16-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/16-2.txt", col_types = cols(P_id = col_character(),P_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/16-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/44.out", col_types = cols(P_name = col_character()))

df4 <- inner_join(input3, input1) %>% inner_join(input2)
df5 <- df4 %>% filter(S_name == 'AWS')
df6 <- df5 %>% mutate(n = n())
out <- df6 %>% select(P_name) %>% distinct() %>% arrange(P_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `P_name`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`S_name` AS `S_name`,
          `LHS`.`P_id` AS `P_id`,
          `RHS`.`P_name` AS `P_name`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`S_name` AS `S_name`,
             `RHS`.`P_id` AS `P_id`
      FROM `input3` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
   INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
WHERE (`S_name` = 'AWS')
ORDER BY P_name
