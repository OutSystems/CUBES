[     1.570][MainProcess][INFO] Parsing specification...
[     1.573][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.574][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.574][MainProcess][DEBUG] Reading input files...
[     1.581][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-1.txt: ['string', 'string', 'int64']
[     1.586][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-3.txt: ['string', 'string']
[     1.590][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/43.out: ['string', 'int64']
[     1.617][MainProcess][DEBUG] Generating DSL...
[     1.682][MainProcess][INFO] Creating 16 processes
[     1.752][MainProcess][DEBUG] Increasing generator loc to 3
[     1.785][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.789][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.793][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.804][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.805][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.807][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.808][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.808][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.818][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.820][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.822][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.823][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.828][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.829][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.860][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.886][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     3.338][cube-solver-2][WARNING] There is no solution for current loc (2).
[     3.339][cube-solver-1][WARNING] There is no solution for current loc (2).
[     3.339][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     3.339][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     3.342][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.342][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.351][cube-solver-3][WARNING] There is no solution for current loc (2).
[     3.351][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     3.353][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.386][cube-solver-0][WARNING] There is no solution for current loc (2).
[     3.387][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     3.388][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.700][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise())
[     4.705][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate())
[     4.711][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = summarise())
[     4.712][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise())
[     4.712][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise())
[     4.714][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = mutate())
[     4.718][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join())
[     4.720][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join3())
[     4.721][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join4())
[     4.723][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = mutate())
[     4.725][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = summarise())
[     4.725][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = summarise())
[     4.729][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     4.730][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = anti_join())
[     4.731][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = left_join())
[     4.732][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = summarise())
[     4.734][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = union())
[     4.740][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = intersect())
[     4.748][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([1]), l2 = mutate())
[     4.758][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([2]), l2 = mutate())
[     4.760][cube-solver-9][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = semi_join())
[     4.779][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[     4.784][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[     4.790][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise([7]))
[     4.793][cube-solver-15][DEBUG] Solving cube (l0 = summarise([8]), l1 = summarise([8]), l2 = cross_join())
[     4.804][cube-solver-14][DEBUG] Solving cube (l0 = summarise([10]), l1 = summarise([10]), l2 = mutate())
[     4.825][cube-solver-14][DEBUG] Solving cube (l0 = summarise([14]), l1 = summarise([14]), l2 = inner_join())
[     6.412][cube-solver-2][DEBUG] Solving cube (l0 = summarise([42]), l1 = natural_join(), l2 = mutate())
[     6.419][cube-solver-1][DEBUG] Solving cube (l0 = summarise([42]), l1 = natural_join(), l2 = summarise([42]))
[     6.419][cube-solver-0][DEBUG] Solving cube (l0 = summarise([42]), l1 = natural_join3(), l2 = mutate())
[     6.420][cube-solver-3][DEBUG] Solving cube (l0 = summarise([42]), l1 = natural_join3(), l2 = summarise([42]))
[     7.915][cube-solver-7][DEBUG] Solving cube (l0 = summarise([42]), l1 = filter(), l2 = summarise([42]))
[     7.965][cube-solver-7][DEBUG] Solving cube (l0 = summarise([42]), l1 = filter(), l2 = mutate())
[     7.991][cube-solver-7][DEBUG] Solving cube (l0 = summarise([42]), l1 = anti_join(), l2 = summarise([42]))
[    10.658][cube-solver-6][DEBUG] Solving cube (l0 = summarise([42]), l1 = anti_join(), l2 = mutate())
[    11.921][cube-solver-5][DEBUG] Solving cube (l0 = summarise([42]), l1 = left_join(), l2 = summarise([42]))
[    12.707][cube-solver-2][DEBUG] Solving cube (l0 = summarise([42]), l1 = left_join(), l2 = mutate())
[    19.439][cube-solver-15][DEBUG] Solving cube (l0 = summarise([42]), l1 = union(), l2 = summarise([42]))
[    19.463][cube-solver-2][DEBUG] Solving cube (l0 = summarise([42]), l1 = union(), l2 = mutate())
[    22.174][cube-solver-1][DEBUG] Solving cube (l0 = summarise([42]), l1 = intersect(), l2 = summarise([42]))
[    22.820][cube-solver-6][DEBUG] Solving cube (l0 = summarise([42]), l1 = intersect(), l2 = mutate())
[    24.795][cube-solver-9][DEBUG] Solving cube (l0 = summarise([42]), l1 = semi_join(), l2 = summarise([42]))
[    27.831][cube-solver-6][DEBUG] Solving cube (l0 = summarise([42]), l1 = semi_join(), l2 = mutate())
[    27.835][cube-solver-5][DEBUG] Solving cube (l0 = summarise([42]), l1 = cross_join(), l2 = summarise([42]))
[    30.706][cube-solver-6][DEBUG] Solving cube (l0 = summarise([42]), l1 = cross_join(), l2 = mutate())
[    30.909][cube-solver-13][DEBUG] Solving cube (l0 = summarise([42]), l1 = mutate(), l2 = natural_join())
[    31.024][cube-solver-3][DEBUG] Found solution with cube (l0 = summarise([42]), l1 = natural_join3(), l2 = summarise([42]))
[    31.025][MainProcess][INFO] Statistics:
[    31.026][MainProcess][INFO] 	Generated cubes: 50
[    31.026][MainProcess][INFO] 	Attempted programs: 6976
[    31.026][MainProcess][INFO] 		Rejected: 891
[    31.026][MainProcess][INFO] 		Failed: 6084
[    31.026][MainProcess][INFO] 	Blacklist clauses: 42
[    31.026][MainProcess][DEBUG] Priting statistics for good programs of size 3
[    31.038][MainProcess][DEBUG] 	0: Counter({'summarise': 20829, 'natural_join': 1872})
[    31.049][MainProcess][DEBUG] 	1: Counter({'summarise': 8192, 'natural_join3': 5850, 'union': 2708, 'natural_join': 1840, 'left_join': 1840, 'mutate': 1036, 'anti_join': 696, 'semi_join': 508, 'intersect': 32})
[    31.057][MainProcess][DEBUG] 	2: Counter({'mutate': 8629, 'summarise': 6717, 'natural_join3': 2276, 'union': 2272, 'natural_join': 1068, 'left_join': 1056, 'semi_join': 336, 'inner_join': 288, 'anti_join': 60})
[    31.057][MainProcess][INFO] Solution found: summarise(natural_join3(@param0, summarise(@param0, cost = max(cost), P_id), @param1), n = n(), S_name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/18-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/18-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/43.out", col_types = cols(S_name = col_character(),n = col_integer()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = max(cost)) %>% ungroup()
df4 <- inner_join(input1, df3) %>% inner_join(input2)
df5 <- df4 %>% group_by(S_name) %>% summarise(n = n()) %>% ungroup()
out <- df5 %>% select(S_name, n) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name,
       n
FROM
  (SELECT S_name,
          COUNT() AS n
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.P_id AS P_id,
             LHS.cost AS cost,
             RHS.S_name AS S_name
      FROM
        (SELECT LHS.S_key AS S_key,
                LHS.P_id AS P_id,
                LHS.cost AS cost
         FROM input1 AS LHS
         INNER JOIN
           (SELECT P_id,
                   MAX(cost) AS cost
            FROM input1
            GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id
                                      AND LHS.cost = RHS.cost)) AS LHS
      INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key))
   GROUP BY S_name)
ORDER BY S_name
