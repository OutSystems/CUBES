[     1.591][MainProcess][INFO] Parsing specification...
[     1.594][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.594][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.595][MainProcess][DEBUG] Reading input files...
[     1.600][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.603][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/certified.txt: ['int64', 'int64']
[     1.607][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/54.out: ['int64']
[     1.634][MainProcess][DEBUG] Generating DSL...
[     1.663][MainProcess][INFO] Creating 16 processes
[     1.726][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.727][MainProcess][DEBUG] Increasing generator loc to 3
[     1.729][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.731][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.734][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.737][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.738][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.742][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.745][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.748][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.754][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.758][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.760][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.761][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.770][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.798][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.265][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.266][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.266][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.267][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.268][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.268][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.278][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.278][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.281][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.367][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.368][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.370][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.785][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.788][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.791][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.795][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.797][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.798][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.801][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = summarise())
[     2.802][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter([1]))
[     2.804][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     2.806][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.806][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter([1]))
[     2.809][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     2.809][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = summarise())
[     2.813][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.813][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     2.813][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = intersect())
[     2.819][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([2]), l2 = mutate())
[     2.823][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]), l2 = mutate())
[     2.826][cube-solver-14][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([2]), l2 = semi_join())
[     2.830][cube-solver-10][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([2]), l2 = cross_join())
[     2.842][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([3]), l2 = mutate())
[     2.849][cube-solver-6][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([3]), l2 = mutate())
[     2.859][cube-solver-6][DEBUG] Solving cube (l0 = summarise([7]), l1 = filter([4]), l2 = inner_join())
[     2.874][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([5]))
[     2.916][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([6]))
[     2.924][cube-solver-15][DEBUG] Solving cube (l0 = summarise([10]), l1 = anti_join(), l2 = filter([6]))
[     3.345][cube-solver-2][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join4(), l2 = filter([10]))
[     3.366][cube-solver-2][DEBUG] Solving cube (l0 = summarise([11]), l1 = left_join(), l2 = filter([10]))
[     3.459][cube-solver-0][DEBUG] Solving cube (l0 = summarise([11]), l1 = summarise([11]), l2 = filter([10]))
[     3.460][cube-solver-3][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join3(), l2 = filter([10]))
[     3.486][cube-solver-0][DEBUG] Solving cube (l0 = summarise([11]), l1 = union(), l2 = filter([10]))
[     3.562][cube-solver-1][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join(), l2 = filter([10]))
[     3.786][cube-solver-7][DEBUG] Solving cube (l0 = summarise([11]), l1 = intersect(), l2 = filter([10]))
[     4.679][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([11]), l1 = union(), l2 = filter([10]))
[     4.680][MainProcess][INFO] Statistics:
[     4.681][MainProcess][INFO] 	Generated cubes: 37
[     4.681][MainProcess][INFO] 	Attempted programs: 27
[     4.681][MainProcess][INFO] 		Rejected: 26
[     4.681][MainProcess][INFO] 		Failed: 0
[     4.681][MainProcess][INFO] 	Blacklist clauses: 21
[     4.681][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     4.682][MainProcess][DEBUG] 	0: Counter({'summarise': 970, 'natural_join': 235})
[     4.683][MainProcess][DEBUG] 	1: Counter({'filter': 436, 'union': 139, 'summarise': 135, 'left_join': 127, 'natural_join3': 107, 'mutate': 100, 'natural_join': 100, 'anti_join': 62})
[     4.684][MainProcess][DEBUG] 	2: Counter({'filter': 770, 'union': 130, 'natural_join': 90, 'left_join': 85, 'natural_join3': 79, 'semi_join': 36, 'anti_join': 10, 'inner_join': 6})
[     4.684][MainProcess][INFO] Solution found: filter(union(@param0, summarise(@param1, n = n(), eid)), n < 3)
[     5.045][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/54.out", col_types = cols(eid = col_integer()))

df3 <- input2 %>% group_by(eid) %>% summarise(n = n()) %>% ungroup()
df4 <- bind_rows(input1, df3)
df5 <- df4 %>% filter(n < 3)
out <- df5 %>% select(eid) %>% arrange(eid)

Failed to generate SQL query
