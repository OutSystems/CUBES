[     1.579][MainProcess][INFO] Parsing specification...
[     1.582][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.582][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.583][MainProcess][DEBUG] Reading input files...
[     1.589][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.592][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.595][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.599][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21.out: ['string']
[     1.633][MainProcess][DEBUG] Generating DSL...
[     1.651][MainProcess][INFO] Creating 16 processes
[     1.730][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.730][MainProcess][DEBUG] Increasing generator loc to 2
[     1.732][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.732][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.732][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.732][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.733][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.732][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.735][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.756][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.756][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.757][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.759][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.783][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.783][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.981][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.981][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     1.983][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.048][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     2.057][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.061][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.063][cube-solver-8][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.065][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     2.066][cube-solver-8][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     2.067][MainProcess][DEBUG] Increasing generator loc to 3
[     2.067][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.080][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     2.083][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.083][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     2.086][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     2.089][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.097][cube-solver-12][DEBUG] Solving cube (l0 = filter(), l1 = semi_join())
[     2.097][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     2.101][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.102][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.128][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     2.131][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter())
[     2.133][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.135][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.187][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     2.216][cube-solver-7][DEBUG] Solving cube (l0 = filter([2]), l1 = filter([2]))
[     2.223][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.357][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([14]))
[     2.368][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.373][cube-solver-6][DEBUG] Solving cube (l0 = filter([16]), l1 = natural_join4())
[     2.375][cube-solver-11][DEBUG] Solving cube (l0 = filter([16]), l1 = intersect())
[     2.387][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.397][cube-solver-14][DEBUG] Solving cube (l0 = filter([16]), l1 = inner_join())
[     2.399][cube-solver-10][DEBUG] Solving cube (l0 = filter([16]), l1 = union())
[     2.411][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.412][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.509][cube-solver-6][DEBUG] Found solution with cube (l0 = filter([16]), l1 = natural_join4())
[     2.510][MainProcess][INFO] Statistics:
[     2.510][MainProcess][INFO] 	Generated cubes: 34
[     2.510][MainProcess][INFO] 	Attempted programs: 1
[     2.510][MainProcess][INFO] 		Rejected: 0
[     2.510][MainProcess][INFO] 		Failed: 0
[     2.510][MainProcess][INFO] 	Blacklist clauses: 17
[     2.511][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.511][MainProcess][DEBUG] 	0: Counter({'natural_join3': 32, 'filter': 24})
[     2.511][MainProcess][DEBUG] 	1: Counter({'filter': 32, 'natural_join3': 16, 'natural_join4': 8})
[     2.511][MainProcess][INFO] Solution found: natural_join4(@param1, @param0, @param2, filter(@param1, color == 'red' | color == 'green'))
[     2.687][cube-solver-5][DEBUG] Found solution with cube (l0 = filter(), l1 = natural_join3())
[     2.898][cube-solver-2][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/21.out", col_types = cols(S_name = col_character()))

df4 <- input2 %>% filter(color == 'red' | color == 'green')
df5 <- inner_join(input2, input1) %>% inner_join(input3) %>% inner_join(df4)
out <- df5 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `S_name`
FROM
  (SELECT `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`,
          `LHS`.`S_key` AS `S_key`,
          `LHS`.`S_name` AS `S_name`
   FROM
     (SELECT `LHS`.`P_id` AS `P_id`,
             `LHS`.`color` AS `color`,
             `LHS`.`S_key` AS `S_key`,
             `RHS`.`S_name` AS `S_name`
      FROM
        (SELECT `LHS`.`P_id` AS `P_id`,
                `LHS`.`color` AS `color`,
                `RHS`.`S_key` AS `S_key`
         FROM `input2` AS `LHS`
         INNER JOIN `input1` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
      INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `input2`
      WHERE (`color` = 'red'
             OR `color` = 'green')) AS RHS ON (LHS.P_id = RHS.P_id
                                               AND LHS.color = RHS.color))
ORDER BY S_name
