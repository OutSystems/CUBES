[     1.587][MainProcess][INFO] Parsing specification...
[     1.590][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.590][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.590][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.591][MainProcess][DEBUG] Reading input files...
[     1.598][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/8-1.txt: ['string', 'string', 'int64']
[     1.603][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/8.out: ['string', 'int64']
[     1.628][MainProcess][DEBUG] Generating DSL...
[     1.647][MainProcess][INFO] Creating 16 processes
[     1.713][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.713][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.713][MainProcess][DEBUG] Increasing generator loc to 3
[     1.713][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.714][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.714][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.714][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.714][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.715][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.715][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.725][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.733][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.734][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.736][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.742][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.754][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.760][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.957][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.103][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.107][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.123][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.127][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.129][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.131][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.134][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.146][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.146][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.148][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.149][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.150][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.151][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.154][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.156][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.197][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]), l2 = mutate())
[     2.203][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = filter([2]))
[     2.204][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([2]), l2 = mutate())
[     2.210][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = anti_join())
[     2.217][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([3]), l2 = mutate())
[     2.223][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = left_join())
[     2.280][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([6]), l2 = summarise())
[     2.287][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([6]), l2 = union())
[     2.372][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([9]))
[     2.381][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([9]), l2 = intersect())
[     2.411][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.445][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([9]))
[     2.454][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([10]), l2 = cross_join())
[     2.530][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([10]), l2 = summarise())
[     2.536][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([11]), l2 = mutate())
[     2.536][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([11]))
[     2.542][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([11]), l2 = inner_join())
[     2.757][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[     2.758][MainProcess][INFO] Statistics:
[     2.758][MainProcess][INFO] 	Generated cubes: 33
[     2.758][MainProcess][INFO] 	Attempted programs: 46
[     2.758][MainProcess][INFO] 		Rejected: 3
[     2.758][MainProcess][INFO] 		Failed: 42
[     2.759][MainProcess][INFO] 	Blacklist clauses: 11
[     2.759][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.759][MainProcess][DEBUG] 	0: Counter({'filter': 92, 'mutate': 48, 'summarise': 5})
[     2.759][MainProcess][DEBUG] 	1: Counter({'filter': 53, 'mutate': 48, 'summarise': 44})
[     2.759][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.760][MainProcess][DEBUG] 	0: Counter({'summarise': 115})
[     2.760][MainProcess][DEBUG] 	1: Counter({'filter': 67, 'natural_join': 48})
[     2.760][MainProcess][DEBUG] 	2: Counter({'filter': 68, 'natural_join3': 24, 'anti_join': 12, 'mutate': 7, 'summarise': 4})
[     2.760][MainProcess][INFO] Solution found: filter(summarise(@param0, meanage = mean(age), level), level != 'JR')
[     3.139][cube-solver-1][DEBUG] Found solution with cube (l0 = filter(), l1 = summarise())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/8-1.txt", col_types = cols(S_key = col_character(),level = col_character(),age = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/55-tests/tables/8.out", col_types = cols(level = col_character(),meanage = col_integer()))

df2 <- input1 %>% group_by(level) %>% summarise(meanage = mean(age)) %>% ungroup()
df3 <- df2 %>% filter(level != 'JR')
out <- df3 %>% select(level, meanage) %>% arrange(level)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `level`,
       `meanage`
FROM
  (SELECT `level`,
          AVG(`age`) AS `meanage`
   FROM `input1`
   GROUP BY `level`)
WHERE (`level` != 'JR')
ORDER BY LEVEL
