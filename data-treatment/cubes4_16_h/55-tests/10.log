[     1.887][MainProcess][INFO] Parsing specification...
[     1.891][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.892][MainProcess][DEBUG] Reading input files...
[     1.900][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10-1.txt: ['string', 'string']
[     1.905][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10-2.txt: ['string', 'string']
[     1.909][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10.out: ['string']
[     1.937][MainProcess][DEBUG] Generating DSL...
[     1.958][MainProcess][INFO] Creating 16 processes
[     2.026][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.026][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.026][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.026][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.026][MainProcess][DEBUG] Increasing generator loc to 3
[     2.028][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.028][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.028][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.029][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.030][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.038][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.041][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.053][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.057][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.061][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.065][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.078][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.261][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.262][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.264][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.338][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.338][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.340][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.383][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.387][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.390][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.392][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.392][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.396][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.409][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.412][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.413][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.417][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = summarise([1]))
[     2.422][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = filter())
[     2.422][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.425][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.425][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = anti_join())
[     2.425][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.427][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.432][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.432][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise([1]))
[     2.435][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.460][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]), l2 = summarise([1]))
[     2.465][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([2]), l2 = intersect())
[     2.496][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([3]))
[     2.502][cube-solver-15][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([3]), l2 = semi_join())
[     2.511][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.512][MainProcess][INFO] Statistics:
[     2.512][MainProcess][INFO] 	Generated cubes: 30
[     2.512][MainProcess][INFO] 	Attempted programs: 2
[     2.512][MainProcess][INFO] 		Rejected: 0
[     2.512][MainProcess][INFO] 		Failed: 1
[     2.512][MainProcess][INFO] 	Blacklist clauses: 6
[     2.513][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.513][MainProcess][DEBUG] 	0: Counter({'natural_join': 15, 'summarise': 11})
[     2.513][MainProcess][DEBUG] 	1: Counter({'filter': 11, 'mutate': 8, 'summarise': 7})
[     2.513][MainProcess][DEBUG] 	2: Counter({'filter': 15, 'natural_join3': 6, 'natural_join': 5})
[     2.514][MainProcess][INFO] Solution found: natural_join(filter(summarise(@param0, n = n(), S_key), n == max(n)), @param1)
[     2.583][cube-solver-15][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = filter([3]), l2 = semi_join())
[     2.774][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.811][cube-solver-10][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/10-1.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/10-2.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/10.out", col_types = cols(S_name = col_character()))

df3 <- input1 %>% group_by(S_key) %>% summarise(n = n()) %>% ungroup()
df4 <- df3 %>% filter(n == max(n))
df5 <- inner_join(df4, input2)
out <- df5 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.n AS n,
          RHS.S_name AS S_name
   FROM
     (SELECT S_key,
             n
      FROM
        (SELECT S_key,
                n,
                MAX(n) OVER () AS zzz3
         FROM
           (SELECT S_key,
                   COUNT() AS n
            FROM input1
            GROUP BY S_key))
      WHERE (n = zzz3)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_name
