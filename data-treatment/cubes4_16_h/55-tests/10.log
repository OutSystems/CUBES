[     1.976][MainProcess][INFO] Parsing specification...
[     1.987][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.988][MainProcess][DEBUG] Reading input files...
[     1.999][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10-1.txt: ['string', 'string']
[     2.005][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10-2.txt: ['string', 'string']
[     2.010][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10.out: ['string']
[     2.038][MainProcess][DEBUG] Generating DSL...
[     2.061][MainProcess][INFO] Creating 16 processes
[     2.130][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.130][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.130][MainProcess][DEBUG] Increasing generator loc to 3
[     2.130][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.131][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.131][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.131][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.131][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.137][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.142][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.150][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.151][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.154][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.157][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.173][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.184][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.186][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.432][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.433][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.435][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.481][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.482][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.483][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.661][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.666][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.667][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.668][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.669][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.669][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.671][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.693][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.694][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.694][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.696][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.698][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.700][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.703][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.720][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.726][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.742][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([1]))
[     2.742][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.747][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = union())
[     2.748][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = intersect())
[     2.753][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = mutate())
[     2.759][cube-solver-6][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([1]), l2 = semi_join())
[     2.768][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.769][MainProcess][INFO] Statistics:
[     2.769][MainProcess][INFO] 	Generated cubes: 30
[     2.769][MainProcess][INFO] 	Attempted programs: 1
[     2.769][MainProcess][INFO] 		Rejected: 0
[     2.769][MainProcess][INFO] 		Failed: 0
[     2.769][MainProcess][INFO] 	Blacklist clauses: 2
[     2.770][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.770][MainProcess][DEBUG] 	0: Counter({'summarise': 4})
[     2.770][MainProcess][DEBUG] 	1: Counter({'filter': 4})
[     2.770][MainProcess][DEBUG] 	2: Counter({'natural_join3': 4})
[     2.770][MainProcess][INFO] Solution found: natural_join3(@param1, @param0, filter(summarise(@param0, n = n(), S_key), n == max(n)))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/10-1.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/10-2.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/10.out", col_types = cols(S_name = col_character()))

df3 <- input1 %>% group_by(S_key) %>% summarise(n = n()) %>% ungroup()
df4 <- df3 %>% filter(n == max(n))
df5 <- inner_join(input2, input1) %>% inner_join(df4)
out <- df5 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.S_name AS S_name,
          LHS.C_name AS C_name,
          RHS.n AS n
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.S_name AS S_name,
             RHS.C_name AS C_name
      FROM input2 AS LHS
      INNER JOIN input1 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
   INNER JOIN
     (SELECT S_key,
             n
      FROM
        (SELECT S_key,
                n,
                MAX(n) OVER () AS zzz3
         FROM
           (SELECT S_key,
                   COUNT() AS n
            FROM input1
            GROUP BY S_key))
      WHERE (n = zzz3)) AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_name
