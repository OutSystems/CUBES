[     1.594][MainProcess][INFO] Parsing specification...
[     1.607][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.608][MainProcess][DEBUG] Reading input files...
[     1.617][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.622][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.626][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.632][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/51.out: ['string', 'int64']
[     1.662][MainProcess][DEBUG] Generating DSL...
[     1.684][MainProcess][INFO] Creating 16 processes
[     1.750][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.750][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.750][MainProcess][DEBUG] Increasing generator loc to 2
[     1.751][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.751][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.752][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.752][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.753][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.762][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.765][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.765][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.768][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.774][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.778][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.784][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.802][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.816][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.007][cube-solver-1][WARNING] There is no solution for current loc (1).
[     2.008][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.009][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.115][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.116][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.118][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.254][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.258][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.260][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.263][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.262][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.265][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.266][cube-solver-8][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.267][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.269][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.269][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.270][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     2.270][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     2.271][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.272][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[     2.272][cube-solver-8][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     2.274][cube-solver-6][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[     2.274][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[     2.275][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     2.276][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     2.277][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     2.277][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     2.278][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.279][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     2.281][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     2.283][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     2.285][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     2.288][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     2.290][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join())
[     2.292][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     2.293][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.294][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[     2.295][cube-solver-13][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise())
[     2.297][cube-solver-10][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[     2.297][MainProcess][DEBUG] Increasing generator loc to 3
[     2.297][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.297][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.299][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.301][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.309][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.313][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.332][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3([2]))
[     2.399][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = intersect())
[     2.404][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.436][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = summarise([1]))
[     2.486][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([1]))
[     2.491][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.544][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.548][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.580][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.586][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.676][cube-solver-1][DEBUG] Solving cube (l0 = summarise([1]), l1 = semi_join())
[     2.680][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.724][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = union())
[     2.730][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.892][cube-solver-0][DEBUG] Solving cube (l0 = summarise([5]), l1 = cross_join())
[     2.904][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.189][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([8]), l2 = natural_join())
[     3.250][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([9]), l2 = summarise([9]))
[     3.262][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([1]), l1 = summarise([9]), l2 = inner_join())
[     3.305][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([1]), l1 = summarise([11]), l2 = intersect())
[     3.320][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([11]), l2 = natural_join4())
[     3.336][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = summarise([13]))
[     3.351][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = mutate())
[     3.356][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = summarise([13]))
[     3.412][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([13]), l2 = union())
[     3.413][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([13]), l2 = semi_join())
[     3.457][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([14]), l2 = anti_join())
[     3.480][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([14]), l2 = left_join())
[     3.579][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([14]), l2 = natural_join3([2]))
[     3.620][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([16]), l2 = cross_join())
[     3.637][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.843][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([17]), l2 = mutate())
[     3.864][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union(), l2 = summarise([17]))
[     4.662][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = mutate())
[     5.519][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     6.281][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     6.536][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union(), l2 = mutate())
[     7.141][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = summarise([21]))
[     7.902][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = mutate())
[     7.904][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = summarise([21]))
[     8.219][cube-solver-10][DEBUG] Found solution with cube (l0 = natural_join([2]), l1 = summarise([14]), l2 = natural_join3([2]))
[     8.220][MainProcess][INFO] Statistics:
[     8.220][MainProcess][INFO] 	Generated cubes: 67
[     8.220][MainProcess][INFO] 	Attempted programs: 262
[     8.221][MainProcess][INFO] 		Rejected: 118
[     8.221][MainProcess][INFO] 		Failed: 143
[     8.221][MainProcess][INFO] 	Blacklist clauses: 25
[     8.221][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     8.223][MainProcess][DEBUG] 	0: Counter({'mutate': 1279, 'summarise': 632, 'natural_join3': 512})
[     8.224][MainProcess][DEBUG] 	1: Counter({'natural_join3': 1112, 'natural_join4': 799, 'summarise': 352, 'mutate': 160})
[     8.224][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     8.226][MainProcess][DEBUG] 	0: Counter({'natural_join': 4134})
[     8.229][MainProcess][DEBUG] 	1: Counter({'summarise': 2663, 'left_join': 764, 'union': 691, 'semi_join': 16})
[     8.231][MainProcess][DEBUG] 	2: Counter({'summarise': 936, 'union': 587, 'mutate': 535, 'natural_join': 513, 'natural_join3': 470, 'left_join': 444, 'semi_join': 320, 'inner_join': 264, 'anti_join': 65})
[     8.231][MainProcess][INFO] Solution found: natural_join3(summarise(natural_join(@param1, @param0), n = n(), P_id), @param0, @param2)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/51.out", col_types = cols(S_name = col_character(),n = col_integer()))

df4 <- inner_join(input2, input1)
df5 <- df4 %>% group_by(P_id) %>% summarise(n = n()) %>% ungroup()
df6 <- inner_join(df5, input1) %>% inner_join(input3)
out <- df6 %>% select(S_name, n) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT S_name,
                n
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.n AS n,
          LHS.S_key AS S_key,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.n AS n,
             RHS.S_key AS S_key
      FROM
        (SELECT P_id,
                COUNT() AS n
         FROM
           (SELECT LHS.P_id AS P_id,
                   LHS.color AS color,
                   RHS.S_key AS S_key
            FROM input2 AS LHS
            INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id))
         GROUP BY P_id) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
   INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_name
