[     1.599][MainProcess][INFO] Parsing specification...
[     1.603][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.604][MainProcess][DEBUG] Reading input files...
[     1.611][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.615][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.620][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.625][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/51.out: ['string', 'int64']
[     1.655][MainProcess][DEBUG] Generating DSL...
[     1.675][MainProcess][INFO] Creating 16 processes
[     1.736][MainProcess][DEBUG] Increasing generator loc to 2
[     1.737][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.737][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.737][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.738][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.743][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.747][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.751][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.754][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.759][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.762][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.767][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.779][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.780][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.786][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.964][cube-solver-1][WARNING] There is no solution for current loc (1).
[     1.965][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.966][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.013][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.014][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.015][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.089][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.092][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.094][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.095][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.095][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.096][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.097][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.099][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.099][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.099][cube-solver-8][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.100][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.101][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.102][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     2.102][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     2.102][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[     2.104][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     2.104][cube-solver-7][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[     2.105][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[     2.105][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     2.106][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     2.106][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.107][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     2.107][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     2.108][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     2.110][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     2.110][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     2.111][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     2.112][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     2.113][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join())
[     2.113][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.115][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[     2.114][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.115][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     2.117][cube-solver-6][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise([1]))
[     2.117][MainProcess][DEBUG] Increasing generator loc to 3
[     2.117][cube-solver-12][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[     2.117][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.118][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.118][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([1]))
[     2.119][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.119][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.123][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.123][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = intersect())
[     2.126][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([1]))
[     2.129][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.135][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.138][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.143][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.235][cube-solver-14][DEBUG] Solving cube (l0 = summarise([4]), l1 = union())
[     2.243][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.387][cube-solver-1][DEBUG] Solving cube (l0 = summarise([4]), l1 = semi_join())
[     2.395][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.406][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = left_join())
[     2.418][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.538][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = cross_join())
[     2.551][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.752][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([6]), l2 = left_join())
[     2.801][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([7]), l2 = intersect())
[     2.814][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([1]), l1 = summarise([7]), l2 = natural_join([1]))
[     2.882][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([7]), l2 = natural_join3([2]))
[     2.905][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([7]), l2 = natural_join4())
[     2.917][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([7]), l2 = inner_join())
[     2.971][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([7]), l2 = anti_join())
[     2.981][cube-solver-6][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([7]), l2 = summarise([7]))
[     2.998][cube-solver-6][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = summarise([7]))
[     3.008][cube-solver-6][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = mutate())
[     3.013][cube-solver-6][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = summarise([8]))
[     3.044][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([10]), l2 = cross_join())
[     3.056][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([10]), l2 = union())
[     3.180][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([14]), l2 = semi_join())
[     3.264][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([14]), l2 = mutate())
[     3.281][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = mutate())
[     3.876][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     4.535][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union(), l2 = summarise([15]))
[     4.995][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union(), l2 = mutate())
[     5.380][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     6.016][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = mutate())
[     6.048][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = summarise([21]))
[     6.131][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     6.780][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = summarise([21]))
[     6.790][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = mutate())
[     7.212][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join(), l2 = summarise([21]))
[     7.400][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join(), l2 = mutate())
[     7.502][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([2]), l1 = mutate(), l2 = natural_join([2]))
[     7.940][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = mutate(), l2 = natural_join3([2]))
[     8.219][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = mutate(), l2 = natural_join4())
[     8.389][cube-solver-11][DEBUG] Found solution with cube (l0 = natural_join([2]), l1 = summarise([7]), l2 = natural_join3([2]))
[     8.390][MainProcess][INFO] Statistics:
[     8.390][MainProcess][INFO] 	Generated cubes: 73
[     8.391][MainProcess][INFO] 	Attempted programs: 540
[     8.391][MainProcess][INFO] 		Rejected: 137
[     8.391][MainProcess][INFO] 		Failed: 402
[     8.391][MainProcess][INFO] 	Blacklist clauses: 25
[     8.391][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     8.393][MainProcess][DEBUG] 	0: Counter({'mutate': 1316, 'summarise': 666, 'natural_join3': 512})
[     8.395][MainProcess][DEBUG] 	1: Counter({'natural_join3': 1146, 'natural_join4': 836, 'summarise': 352, 'mutate': 160})
[     8.395][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     8.398][MainProcess][DEBUG] 	0: Counter({'natural_join': 4960})
[     8.400][MainProcess][DEBUG] 	1: Counter({'summarise': 2901, 'left_join': 842, 'union': 729, 'semi_join': 284, 'mutate': 204})
[     8.403][MainProcess][DEBUG] 	2: Counter({'summarise': 1071, 'mutate': 784, 'natural_join': 682, 'natural_join3': 637, 'union': 579, 'left_join': 472, 'semi_join': 320, 'anti_join': 200, 'inner_join': 192, 'natural_join4': 23})
[     8.403][MainProcess][INFO] Solution found: natural_join3(@param0, @param2, summarise(natural_join(@param1, @param0), n = n(), P_id, color))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/51.out", col_types = cols(S_name = col_character(),n = col_integer()))

df4 <- inner_join(input2, input1)
df5 <- df4 %>% group_by(P_id, color) %>% summarise(n = n()) %>% ungroup()
df6 <- inner_join(input1, input3) %>% inner_join(df5)
out <- df6 %>% select(S_name, n) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT S_name,
                n
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.P_id AS P_id,
          LHS.S_name AS S_name,
          RHS.color AS color,
          RHS.n AS n
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.P_id AS P_id,
             RHS.S_name AS S_name
      FROM input1 AS LHS
      INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
   INNER JOIN
     (SELECT P_id,
             color,
             COUNT() AS n
      FROM
        (SELECT LHS.P_id AS P_id,
                LHS.color AS color,
                RHS.S_key AS S_key
         FROM input2 AS LHS
         INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id))
      GROUP BY P_id,
               color) AS RHS ON (LHS.P_id = RHS.P_id))
ORDER BY S_name
