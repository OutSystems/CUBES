[     1.577][MainProcess][INFO] Parsing specification...
[     1.580][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.580][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.581][MainProcess][DEBUG] Reading input files...
[     1.588][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-1.txt: ['string', 'string', 'int64']
[     1.593][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-2.txt: ['string', 'string']
[     1.597][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/42.out: ['string', 'int64']
[     1.624][MainProcess][DEBUG] Generating DSL...
[     1.677][MainProcess][INFO] Creating 16 processes
[     1.738][MainProcess][DEBUG] Increasing generator loc to 3
[     1.759][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.763][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.769][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.772][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.777][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.779][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.783][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.787][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.789][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.792][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.798][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.799][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.800][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.806][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.819][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.855][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.920][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.921][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.923][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.926][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.927][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.928][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.933][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.934][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     2.935][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.951][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.952][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     2.955][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.146][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise())
[     4.149][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise())
[     4.156][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = summarise())
[     4.157][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = summarise())
[     4.158][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = mutate())
[     4.161][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = mutate())
[     4.162][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join())
[     4.164][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join3())
[     4.165][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join4())
[     4.168][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = summarise())
[     4.169][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = summarise())
[     4.170][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = mutate())
[     4.173][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     4.174][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = anti_join())
[     4.176][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = left_join())
[     4.178][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = union())
[     4.179][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[     4.199][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise([4]))
[     4.211][cube-solver-14][DEBUG] Solving cube (l0 = summarise([5]), l1 = summarise([5]), l2 = intersect())
[     4.222][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate())
[     4.229][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise([8]))
[     4.230][cube-solver-11][DEBUG] Solving cube (l0 = summarise([7]), l1 = summarise([7]), l2 = semi_join())
[     4.242][cube-solver-10][DEBUG] Solving cube (l0 = summarise([9]), l1 = summarise([9]), l2 = cross_join())
[     4.303][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[     4.308][cube-solver-15][DEBUG] Solving cube (l0 = summarise([14]), l1 = summarise([14]), l2 = mutate())
[     4.323][cube-solver-15][DEBUG] Solving cube (l0 = summarise([14]), l1 = summarise([14]), l2 = inner_join())
[     4.378][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([16]), l2 = mutate())
[     5.471][cube-solver-1][DEBUG] Solving cube (l0 = summarise([25]), l1 = natural_join(), l2 = mutate())
[     5.474][cube-solver-3][DEBUG] Solving cube (l0 = summarise([25]), l1 = natural_join3(), l2 = summarise([25]))
[     5.475][cube-solver-2][DEBUG] Solving cube (l0 = summarise([25]), l1 = natural_join3(), l2 = mutate())
[     5.475][cube-solver-0][DEBUG] Solving cube (l0 = summarise([25]), l1 = natural_join(), l2 = summarise([25]))
[     6.156][cube-solver-7][DEBUG] Solving cube (l0 = summarise([25]), l1 = filter(), l2 = summarise([25]))
[     6.190][cube-solver-7][DEBUG] Solving cube (l0 = summarise([25]), l1 = filter(), l2 = mutate())
[     6.204][cube-solver-7][DEBUG] Solving cube (l0 = summarise([25]), l1 = anti_join(), l2 = summarise([25]))
[     7.441][cube-solver-6][DEBUG] Solving cube (l0 = summarise([25]), l1 = anti_join(), l2 = mutate())
[     9.360][cube-solver-5][DEBUG] Solving cube (l0 = summarise([25]), l1 = left_join(), l2 = summarise([25]))
[     9.593][cube-solver-1][DEBUG] Solving cube (l0 = summarise([25]), l1 = left_join(), l2 = mutate())
[    10.511][cube-solver-10][DEBUG] Solving cube (l0 = summarise([25]), l1 = union(), l2 = summarise([25]))
[    10.754][cube-solver-5][DEBUG] Found solution with cube (l0 = summarise([25]), l1 = left_join(), l2 = summarise([25]))
[    10.758][MainProcess][INFO] Statistics:
[    10.758][MainProcess][INFO] 	Generated cubes: 42
[    10.758][MainProcess][INFO] 	Attempted programs: 627
[    10.758][MainProcess][INFO] 		Rejected: 96
[    10.758][MainProcess][INFO] 		Failed: 530
[    10.758][MainProcess][INFO] 	Blacklist clauses: 25
[    10.758][MainProcess][DEBUG] Priting statistics for good programs of size 3
[    10.762][MainProcess][DEBUG] 	0: Counter({'summarise': 4571, 'natural_join': 1144})
[    10.764][MainProcess][DEBUG] 	1: Counter({'summarise': 2540, 'natural_join3': 1273, 'natural_join': 801, 'mutate': 592, 'anti_join': 255, 'left_join': 242, 'union': 12})
[    10.767][MainProcess][DEBUG] 	2: Counter({'mutate': 2370, 'summarise': 1357, 'union': 650, 'natural_join3': 464, 'natural_join': 350, 'left_join': 272, 'semi_join': 152, 'anti_join': 64, 'inner_join': 36})
[    10.768][MainProcess][INFO] Solution found: summarise(left_join(@param1, summarise(@param0, meancost = mean(cost), P_id)), n = n(), S_name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/17-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/17-2.txt", col_types = cols(P_id = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/42.out", col_types = cols(S_name = col_character(),n = col_integer()))

df3 <- input1 %>% group_by(P_id) %>% summarise(meancost = mean(cost)) %>% ungroup()
df4 <- left_join(input2, df3)
df5 <- df4 %>% group_by(S_name) %>% summarise(n = n()) %>% ungroup()
out <- df5 %>% select(S_name, n) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name,
       n
FROM
  (SELECT S_name,
          COUNT() AS n
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.S_name AS S_name,
             RHS.meancost AS meancost
      FROM input2 AS LHS
      LEFT JOIN
        (SELECT P_id,
                AVG(cost) AS meancost
         FROM input1
         GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id))
   GROUP BY S_name)
ORDER BY S_name
