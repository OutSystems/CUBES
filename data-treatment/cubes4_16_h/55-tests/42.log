[     1.574][MainProcess][INFO] Parsing specification...
[     1.578][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.578][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.579][MainProcess][DEBUG] Reading input files...
[     1.587][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-1.txt: ['string', 'string', 'int64']
[     1.591][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-2.txt: ['string', 'string']
[     1.597][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/42.out: ['string', 'int64']
[     1.625][MainProcess][DEBUG] Generating DSL...
[     1.856][MainProcess][INFO] Creating 16 processes
[     1.923][MainProcess][DEBUG] Increasing generator loc to 3
[     2.178][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.183][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.191][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.197][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.197][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.200][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.206][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.218][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.220][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.230][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.230][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.233][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.239][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.241][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.365][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.428][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[    11.947][cube-solver-3][WARNING] There is no solution for current loc (2).
[    11.948][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[    11.968][cube-solver-2][WARNING] There is no solution for current loc (2).
[    11.969][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    11.970][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[    12.003][cube-solver-1][WARNING] There is no solution for current loc (2).
[    12.004][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    12.005][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    12.025][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    12.058][cube-solver-0][WARNING] There is no solution for current loc (2).
[    12.059][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[    12.093][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    18.198][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = mutate())
[    18.235][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[    18.258][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = mutate())
[    18.291][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise())
[    18.309][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = summarise())
[    18.316][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = summarise())
[    18.320][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise())
[    18.346][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = mutate())
[    18.370][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise())
[    18.374][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise())
[    18.379][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join())
[    18.404][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join3())
[    18.411][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = summarise())
[    18.449][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join4())
[    18.490][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = summarise([1]), l2 = summarise([1]))
[    18.498][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = summarise([1]), l2 = filter())
[    18.536][cube-solver-8][DEBUG] Solving cube (l0 = summarise([1]), l1 = summarise([1]), l2 = anti_join())
[    18.539][cube-solver-14][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]), l2 = union())
[    18.542][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]), l2 = intersect())
[    18.555][cube-solver-10][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]), l2 = left_join())
[    18.617][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([8]), l2 = mutate())
[    18.716][cube-solver-9][DEBUG] Solving cube (l0 = summarise([14]), l1 = summarise([14]), l2 = semi_join())
[    18.752][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[    18.850][cube-solver-15][DEBUG] Solving cube (l0 = summarise([22]), l1 = summarise([22]), l2 = cross_join())
[    18.902][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate())
[    19.023][cube-solver-11][DEBUG] Solving cube (l0 = summarise([24]), l1 = summarise([24]), l2 = mutate())
[    19.080][cube-solver-11][DEBUG] Solving cube (l0 = summarise([24]), l1 = summarise([24]), l2 = inner_join())
[    20.166][cube-solver-7][DEBUG] Solving cube (l0 = summarise([25]), l1 = filter(), l2 = summarise([25]))
[    20.260][cube-solver-7][DEBUG] Solving cube (l0 = summarise([25]), l1 = filter(), l2 = mutate())
[    20.311][cube-solver-7][DEBUG] Solving cube (l0 = summarise([25]), l1 = anti_join(), l2 = summarise([25]))
[    20.399][cube-solver-12][DEBUG] Found solution with cube (l0 = summarise(), l1 = summarise(), l2 = natural_join3())
[    20.400][MainProcess][INFO] Statistics:
[    20.400][MainProcess][INFO] 	Generated cubes: 38
[    20.400][MainProcess][INFO] 	Attempted programs: 55
[    20.400][MainProcess][INFO] 		Rejected: 5
[    20.401][MainProcess][INFO] 		Failed: 49
[    20.401][MainProcess][INFO] 	Blacklist clauses: 25
[    20.401][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    20.402][MainProcess][DEBUG] 	0: Counter({'natural_join': 639, 'summarise': 415})
[    20.402][MainProcess][DEBUG] 	1: Counter({'summarise': 659, 'mutate': 395})
[    20.403][MainProcess][DEBUG] 	2: Counter({'mutate': 484, 'summarise': 155, 'left_join': 110, 'natural_join': 100, 'union': 84, 'natural_join3': 70, 'semi_join': 28, 'inner_join': 24})
[    20.403][MainProcess][INFO] Solution found: natural_join3(@param1, summarise(@param1, n = n(), S_name), summarise(@param0, meancost = mean(cost), P_id))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/17-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/17-2.txt", col_types = cols(P_id = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/42.out", col_types = cols(S_name = col_character(),n = col_integer()))

df3 <- input2 %>% group_by(S_name) %>% summarise(n = n()) %>% ungroup()
df4 <- input1 %>% group_by(P_id) %>% summarise(meancost = mean(cost)) %>% ungroup()
df5 <- inner_join(input2, df3) %>% inner_join(df4)
out <- df5 %>% select(S_name, n) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT S_name,
                n
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.S_name AS S_name,
          LHS.n AS n,
          RHS.meancost AS meancost
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.S_name AS S_name,
             RHS.n AS n
      FROM input2 AS LHS
      INNER JOIN
        (SELECT S_name,
                COUNT() AS n
         FROM input2
         GROUP BY S_name) AS RHS ON (LHS.S_name = RHS.S_name)) AS LHS
   INNER JOIN
     (SELECT P_id,
             AVG(cost) AS meancost
      FROM input1
      GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id))
ORDER BY S_name
