[     1.614][MainProcess][INFO] Parsing specification...
[     1.617][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.617][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.617][MainProcess][DEBUG] Reading input files...
[     1.624][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i028_1.csv: ['string']
[     1.629][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i028_2.csv: ['string', 'int64', 'string']
[     1.634][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o028.csv: ['string', 'string']
[     1.663][MainProcess][DEBUG] Generating DSL...
[     1.683][MainProcess][INFO] Creating 16 processes
[     1.743][MainProcess][DEBUG] Increasing generator loc to 2
[     1.743][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.743][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.744][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.744][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.744][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.748][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.751][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.757][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.759][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.759][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.765][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.769][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.772][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.789][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.795][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.796][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.944][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.945][cube-solver-1][WARNING] There is no solution for current loc (1).
[     1.945][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.946][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.946][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.947][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.027][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.030][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     2.030][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.032][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.032][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.033][cube-solver-5][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.036][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.039][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.040][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.047][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.050][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.052][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.054][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.054][cube-solver-12][DEBUG] Solving cube (l0 = summarise([1]), l1 = anti_join())
[     2.064][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([2]))
[     2.069][cube-solver-8][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join())
[     2.094][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.099][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = summarise([4]))
[     2.138][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.227][cube-solver-15][DEBUG] Solving cube (l0 = summarise([5]), l1 = intersect())
[     2.231][cube-solver-13][DEBUG] Solving cube (l0 = summarise([5]), l1 = left_join())
[     2.234][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join3())
[     2.235][MainProcess][INFO] Statistics:
[     2.235][MainProcess][INFO] 	Generated cubes: 26
[     2.236][MainProcess][INFO] 	Attempted programs: 5
[     2.236][MainProcess][INFO] 		Rejected: 0
[     2.236][MainProcess][INFO] 		Failed: 4
[     2.236][MainProcess][INFO] 	Blacklist clauses: 8
[     2.236][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.236][MainProcess][DEBUG] 	0: Counter({'left_join': 21, 'summarise': 19, 'natural_join': 13, 'anti_join': 12, 'union': 4})
[     2.237][MainProcess][DEBUG] 	1: Counter({'mutate': 29, 'summarise': 21, 'natural_join': 7, 'anti_join': 6, 'natural_join3': 6})
[     2.237][MainProcess][INFO] Solution found: natural_join3(@param0, @param1, summarise(@param1, concatDesc = string_agg(Desc, ' '), PID))
[     2.400][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise([5]), l1 = left_join())
[     2.463][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i028_1.csv", col_types = cols(PID = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i028_2.csv", col_types = cols(PID = col_character(),SEQ = col_integer(),Desc = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o028.csv", col_types = cols(PID = col_character(),concatDesc = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df3 <- input2 %>% group_by(PID) %>% summarise(concatDesc = string_agg(Desc, ' ')) %>% ungroup()
df4 <- inner_join(input1, input2) %>% inner_join(df3)
out <- df4 %>% select(PID, concatDesc) %>% distinct() %>% arrange(PID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `PID`,
                `concatDesc`
FROM
  (SELECT `LHS`.`PID` AS `PID`,
          `LHS`.`SEQ` AS `SEQ`,
          `LHS`.`Desc` AS `Desc`,
          `RHS`.`concatDesc` AS `concatDesc`
   FROM
     (SELECT `LHS`.`PID` AS `PID`,
             `RHS`.`SEQ` AS `SEQ`,
             `RHS`.`Desc` AS `Desc`
      FROM `input1` AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`PID` = `RHS`.`PID`)) AS `LHS`
   INNER JOIN
     (SELECT `PID`,
             string_agg(`Desc`, ' ') AS concatDesc
      FROM input2
      GROUP BY PID) AS RHS ON (LHS.PID = RHS.PID))
ORDER BY PID
