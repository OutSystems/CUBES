[     1.562][MainProcess][INFO] Parsing specification...
[     1.569][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.570][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.571][MainProcess][DEBUG] Reading input files...
[     1.578][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i028_1.csv: ['string']
[     1.584][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i028_2.csv: ['string', 'int64', 'string']
[     1.589][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o028.csv: ['string', 'string']
[     1.620][MainProcess][DEBUG] Generating DSL...
[     1.656][MainProcess][INFO] Creating 16 processes
[     1.734][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.734][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.735][MainProcess][DEBUG] Increasing generator loc to 2
[     1.736][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.746][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.750][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.754][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.758][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.765][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.769][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.773][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.775][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.810][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.819][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.162][cube-solver-1][WARNING] There is no solution for current loc (1).
[     2.163][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.164][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.172][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.173][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.174][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.851][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.851][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.859][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.859][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     2.860][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.859][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.863][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.865][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.870][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.873][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.874][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.876][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.879][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.880][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.881][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.882][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.889][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = left_join())
[     2.890][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = summarise([1]))
[     2.921][cube-solver-14][DEBUG] Solving cube (l0 = summarise([4]), l1 = union())
[     2.927][cube-solver-15][DEBUG] Solving cube (l0 = summarise([6]), l1 = intersect())
[     2.977][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([9]))
[     3.004][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     3.164][cube-solver-0][DEBUG] Solving cube (l0 = summarise([17]), l1 = cross_join())
[     3.218][cube-solver-1][DEBUG] Solving cube (l0 = summarise([19]), l1 = semi_join())
[     3.365][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise([1]), l1 = left_join())
[     3.366][MainProcess][INFO] Statistics:
[     3.367][MainProcess][INFO] 	Generated cubes: 26
[     3.367][MainProcess][INFO] 	Attempted programs: 13
[     3.367][MainProcess][INFO] 		Rejected: 2
[     3.367][MainProcess][INFO] 		Failed: 10
[     3.367][MainProcess][INFO] 	Blacklist clauses: 27
[     3.367][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.368][MainProcess][DEBUG] 	0: Counter({'summarise': 124, 'left_join': 58, 'natural_join': 44, 'anti_join': 36, 'union': 26})
[     3.368][MainProcess][DEBUG] 	1: Counter({'mutate': 93, 'summarise': 71, 'natural_join3': 32, 'left_join': 25, 'anti_join': 24, 'natural_join': 23, 'union': 20})
[     3.368][MainProcess][INFO] Solution found: left_join(summarise(@param1, concatDesc = string_agg(Desc, ' '), PID), @param0)
[     3.496][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i028_1.csv", col_types = cols(PID = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i028_2.csv", col_types = cols(PID = col_character(),SEQ = col_integer(),Desc = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o028.csv", col_types = cols(PID = col_character(),concatDesc = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df3 <- input2 %>% group_by(PID) %>% summarise(concatDesc = string_agg(Desc, ' ')) %>% ungroup()
df4 <- left_join(df3, input1)
out <- df4 %>% select(PID, concatDesc) %>% arrange(PID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `PID`,
       `concatDesc`
FROM
  (SELECT `LHS`.`PID` AS `PID`,
          `LHS`.`concatDesc` AS `concatDesc`
   FROM
     (SELECT `PID`,
             string_agg(`Desc`, ' ') AS concatDesc
      FROM input2
      GROUP BY PID) AS LHS
   LEFT JOIN input1 AS RHS ON (LHS.PID = RHS.PID))
ORDER BY PID
