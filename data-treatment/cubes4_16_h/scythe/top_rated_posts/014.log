[     1.607][MainProcess][INFO] Parsing specification...
[     1.617][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.617][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.618][MainProcess][DEBUG] Reading input files...
[     1.627][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i014.csv: ['int64', 'string']
[     1.638][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o014.csv: ['int64', 'string']
[     1.668][MainProcess][DEBUG] Generating DSL...
[     1.700][MainProcess][INFO] Creating 16 processes
[     1.765][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.766][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.766][MainProcess][DEBUG] Increasing generator loc to 2
[     1.767][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.767][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.770][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.774][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.777][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.781][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.783][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.789][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.793][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.797][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.798][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.799][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.810][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.838][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.143][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.256][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.542][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.549][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.549][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     2.553][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.555][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.558][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.561][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     2.562][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.565][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.566][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.567][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.571][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.573][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.573][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.577][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.580][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.581][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.586][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.594][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.603][cube-solver-9][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.626][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.739][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)
[     2.741][MainProcess][INFO] Statistics:
[     2.741][MainProcess][INFO] 	Generated cubes: 26
[     2.741][MainProcess][INFO] 	Attempted programs: 12
[     2.741][MainProcess][INFO] 		Rejected: 11
[     2.741][MainProcess][INFO] 		Failed: 0
[     2.742][MainProcess][INFO] 	Blacklist clauses: 0
[     2.742][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     2.742][MainProcess][DEBUG] 	0: Counter({'summarise': 53, 'mutate': 48})
[     2.743][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.743][MainProcess][DEBUG] 	0: Counter({'summarise': 55, 'left_join': 16, 'union': 5})
[     2.743][MainProcess][DEBUG] 	1: Counter({'mutate': 22, 'summarise': 12, 'semi_join': 9, 'left_join': 9, 'natural_join': 9, 'inner_join': 8, 'anti_join': 7, 'union': 3})
[     2.744][MainProcess][INFO] Solution found: summarise(@param0, concatstring = string_agg(string, ', '), id)
[     3.037][cube-solver-10][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i014.csv", col_types = cols(id = col_integer(),string = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o014.csv", col_types = cols(id = col_integer(),concatstring = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df2 <- input1 %>% group_by(id) %>% summarise(concatstring = string_agg(string, ', ')) %>% ungroup()
out <- df2 %>% select(id, concatstring) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `id`,
       `concatstring`
FROM
  (SELECT `id`,
          string_agg(`string`, ', ') AS concatstring
   FROM input1
   GROUP BY id)
ORDER BY id
