[     1.645][MainProcess][INFO] Parsing specification...
[     1.648][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.648][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.649][MainProcess][DEBUG] Reading input files...
[     1.657][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i004.csv: ['int64', 'int64', 'string']
[     1.662][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o004.csv: ['int64', 'int64', 'string']
[     1.687][MainProcess][DEBUG] Generating DSL...
[     1.709][MainProcess][INFO] Creating 16 processes
[     1.767][MainProcess][DEBUG] Increasing generator loc to 2
[     1.768][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.767][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.768][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.768][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.768][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.768][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.770][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.779][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.782][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.784][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.788][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.793][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.799][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.799][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.807][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.816][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.973][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.991][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.059][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([1]))
[     2.060][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([1]))
[     2.062][cube-solver-6][DEBUG] Solving cube (l0 = summarise([1]), l1 = intersect())
[     2.066][cube-solver-2][DEBUG] Solving cube (l0 = summarise([1]), l1 = semi_join())
[     2.066][cube-solver-8][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join())
[     2.066][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.066][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join3())
[     2.069][cube-solver-5][DEBUG] Solving cube (l0 = summarise([1]), l1 = cross_join())
[     2.071][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = mutate())
[     2.071][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join4())
[     2.071][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.073][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = inner_join())
[     2.074][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = summarise([1]))
[     2.077][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.080][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([1]))
[     2.080][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = anti_join())
[     2.083][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.085][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([1]))
[     2.090][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = summarise([1]))
[     2.095][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.100][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = union())
[     2.126][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([1]))
[     2.133][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = summarise([1]))
[     2.176][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.180][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.235][cube-solver-12][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter())
[     2.244][cube-solver-14][DEBUG] Solving cube (l0 = summarise([2]), l1 = left_join())
[     2.304][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise([1]), l1 = natural_join())
[     2.305][MainProcess][INFO] Statistics:
[     2.305][MainProcess][INFO] 	Generated cubes: 29
[     2.306][MainProcess][INFO] 	Attempted programs: 2
[     2.306][MainProcess][INFO] 		Rejected: 1
[     2.306][MainProcess][INFO] 		Failed: 0
[     2.306][MainProcess][INFO] 	Blacklist clauses: 2
[     2.306][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     2.306][MainProcess][DEBUG] 	0: Counter({'mutate': 30, 'summarise': 24})
[     2.307][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.307][MainProcess][DEBUG] 	0: Counter({'summarise': 88, 'left_join': 23, 'union': 18})
[     2.307][MainProcess][DEBUG] 	1: Counter({'mutate': 35, 'summarise': 24, 'semi_join': 17, 'inner_join': 15, 'natural_join': 13, 'union': 12, 'anti_join': 12, 'left_join': 1})
[     2.307][MainProcess][INFO] Solution found: natural_join(@param0, summarise(@param0, rev = max(rev), id))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i004.csv", col_types = cols(id = col_integer(),rev = col_integer(),content = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o004.csv", col_types = cols(id = col_integer(),rev = col_integer(),content = col_character()))

df2 <- input1 %>% group_by(id) %>% summarise(rev = max(rev)) %>% ungroup()
df3 <- inner_join(input1, df2)
out <- df3 %>% select(id, rev, content) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       rev,
       content
FROM
  (SELECT LHS.id AS id,
          LHS.rev AS rev,
          LHS.content AS content
   FROM input1 AS LHS
   INNER JOIN
     (SELECT id,
             MAX(rev) AS rev
      FROM input1
      GROUP BY id) AS RHS ON (LHS.id = RHS.id
                              AND LHS.rev = RHS.rev))
ORDER BY id
