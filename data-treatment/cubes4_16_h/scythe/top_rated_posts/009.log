[     1.577][MainProcess][INFO] Parsing specification...
[     1.580][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.580][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.581][MainProcess][DEBUG] Reading input files...
[     1.589][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i009.csv: ['string', 'string', 'int64']
[     1.594][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o009.csv: ['string', 'string', 'int64']
[     1.620][MainProcess][DEBUG] Generating DSL...
[     1.638][MainProcess][INFO] Creating 16 processes
[     1.698][MainProcess][DEBUG] Increasing generator loc to 2
[     1.698][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.698][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.699][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.699][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.699][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.699][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.699][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.704][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.705][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.709][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.712][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.723][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.726][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.733][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.739][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.853][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.856][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.902][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     1.903][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     1.915][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = anti_join())
[     1.918][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([1]))
[     1.924][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join3())
[     1.925][cube-solver-2][DEBUG] Solving cube (l0 = summarise([1]), l1 = semi_join())
[     1.931][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = cross_join())
[     1.942][cube-solver-8][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join())
[     1.980][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise([1]), l1 = natural_join())
[     1.981][MainProcess][INFO] Statistics:
[     1.981][MainProcess][INFO] 	Generated cubes: 19
[     1.981][MainProcess][INFO] 	Attempted programs: 1
[     1.981][MainProcess][INFO] 		Rejected: 0
[     1.982][MainProcess][INFO] 		Failed: 0
[     1.982][MainProcess][INFO] 	Blacklist clauses: 1
[     1.982][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     1.982][MainProcess][DEBUG] 	0: Counter({'mutate': 7, 'summarise': 2})
[     1.982][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     1.983][MainProcess][DEBUG] 	0: Counter({'summarise': 6})
[     1.983][MainProcess][DEBUG] 	1: Counter({'anti_join': 4, 'semi_join': 1, 'natural_join': 1})
[     1.983][MainProcess][INFO] Solution found: natural_join(@param0, summarise(@param0, time_stamp = max(time_stamp), username))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i009.csv", col_types = cols(username = col_character(),ip = col_character(),time_stamp = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o009.csv", col_types = cols(username = col_character(),ip = col_character(),time_stamp = col_integer()))

df2 <- input1 %>% group_by(username) %>% summarise(time_stamp = max(time_stamp)) %>% ungroup()
df3 <- inner_join(input1, df2)
out <- df3 %>% select(username, ip, time_stamp) %>% arrange(username)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT username,
       ip,
       time_stamp
FROM
  (SELECT LHS.username AS username,
          LHS.ip AS ip,
          LHS.time_stamp AS time_stamp
   FROM input1 AS LHS
   INNER JOIN
     (SELECT username,
             MAX(time_stamp) AS time_stamp
      FROM input1
      GROUP BY username) AS RHS ON (LHS.username = RHS.username
                                    AND LHS.time_stamp = RHS.time_stamp))
ORDER BY username
