[     3.601][MainProcess][INFO] Parsing specification...
[     3.606][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.606][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.607][MainProcess][DEBUG] Reading input files...
[     3.617][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i047.csv: ['int64', 'int64', 'int64', 'string']
[     3.624][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o047.csv: ['int64', 'int64', 'int64', 'string']
[     3.662][MainProcess][DEBUG] Generating DSL...
[     3.703][MainProcess][INFO] Creating 16 processes
[     3.786][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.786][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.786][MainProcess][DEBUG] Increasing generator loc to 2
[     3.788][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.788][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.788][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.790][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.798][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.802][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.807][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.817][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.827][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.835][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.845][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.851][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.853][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.862][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     4.125][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.180][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     4.335][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.349][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([4]))
[     4.353][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     4.355][cube-solver-5][DEBUG] Solving cube (l0 = summarise([4]), l1 = semi_join())
[     4.356][cube-solver-6][DEBUG] Solving cube (l0 = summarise([4]), l1 = cross_join())
[     4.357][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     4.360][cube-solver-7][DEBUG] Solving cube (l0 = summarise([4]), l1 = mutate())
[     4.373][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join4())
[     4.380][cube-solver-14][DEBUG] Solving cube (l0 = summarise([4]), l1 = left_join())
[     4.381][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = inner_join())
[     4.398][cube-solver-8][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join())
[     4.400][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     4.402][cube-solver-11][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]))
[     4.403][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]))
[     4.406][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     4.407][cube-solver-9][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join3())
[     4.408][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([4]))
[     4.411][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     4.412][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([4]))
[     4.412][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     4.414][cube-solver-9][DEBUG] Solving cube (l0 = union(), l1 = summarise([4]))
[     4.493][cube-solver-12][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter())
[     4.549][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = anti_join())
[     4.563][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([4]))
[     4.570][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     4.585][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([4]))
[     4.593][cube-solver-2][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([4]))
[     4.679][cube-solver-15][DEBUG] Solving cube (l0 = summarise([4]), l1 = union())
[     4.752][cube-solver-9][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     4.795][cube-solver-11][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([4]))
[     4.955][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     5.031][cube-solver-0][DEBUG] Solving cube (l0 = summarise([4]), l1 = intersect())
[     5.169][cube-solver-11][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise([4]))
[     5.271][cube-solver-6][DEBUG] Solving cube (l0 = cross_join([1]), l1 = mutate())
[     5.275][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     5.323][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     5.326][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     5.329][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = summarise([4]))
[     5.441][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     5.998][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     6.038][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     6.292][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     7.071][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     7.299][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     7.499][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join([1]))
[     7.560][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     7.640][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     7.811][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[     8.144][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise([4]))
[     8.732][cube-solver-0][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[    10.142][MainProcess][DEBUG] Increasing generator loc to 3
[    10.143][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[    10.900][cube-solver-5][DEBUG] Found solution with cube (l0 = summarise([4]), l1 = semi_join())
[    10.901][MainProcess][INFO] Statistics:
[    10.901][MainProcess][INFO] 	Generated cubes: 51
[    10.901][MainProcess][INFO] 	Attempted programs: 637
[    10.901][MainProcess][INFO] 		Rejected: 282
[    10.901][MainProcess][INFO] 		Failed: 354
[    10.901][MainProcess][INFO] 	Blacklist clauses: 5
[    10.902][MainProcess][DEBUG] Priting statistics for good programs of size 1
[    10.902][MainProcess][DEBUG] 	0: Counter({'mutate': 288})
[    10.902][MainProcess][DEBUG] Priting statistics for good programs of size 2
[    10.904][MainProcess][DEBUG] 	0: Counter({'summarise': 4144, 'mutate': 3963, 'left_join': 288, 'union': 288, 'semi_join': 288, 'inner_join': 243})
[    10.907][MainProcess][DEBUG] 	1: Counter({'mutate': 1643, 'left_join': 1274, 'natural_join': 1269, 'anti_join': 1194, 'union': 1155, 'semi_join': 1074, 'inner_join': 1026, 'filter': 579})
[    10.907][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, time = max(time), user))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i047.csv", col_types = cols(id = col_integer(),user = col_integer(),time = col_integer(),io = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o047.csv", col_types = cols(id = col_integer(),user = col_integer(),time = col_integer(),io = col_character()))

df2 <- input1 %>% group_by(user) %>% summarise(time = max(time)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(id, user, time, io) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       USER,
       TIME,
       io
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT USER,
                  MAX(TIME) AS TIME
           FROM input1
           GROUP BY USER) AS RHS
        WHERE (LHS.user = RHS.user
               AND LHS.time = RHS.time) ))
ORDER BY id
