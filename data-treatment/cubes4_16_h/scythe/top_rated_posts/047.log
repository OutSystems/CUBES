[     3.319][MainProcess][INFO] Parsing specification...
[     3.340][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.340][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.341][MainProcess][DEBUG] Reading input files...
[     3.367][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i047.csv: ['int64', 'int64', 'int64', 'string']
[     3.386][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o047.csv: ['int64', 'int64', 'int64', 'string']
[     3.420][MainProcess][DEBUG] Generating DSL...
[     3.596][MainProcess][INFO] Creating 16 processes
[     3.660][MainProcess][DEBUG] Increasing generator loc to 2
[     3.802][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.804][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.806][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.811][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.814][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.821][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.825][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.827][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.831][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.835][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.838][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.841][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.842][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.855][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.902][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.949][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     7.094][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     7.229][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     7.515][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     9.306][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[    10.476][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([4]))
[    10.526][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[    10.538][cube-solver-2][DEBUG] Solving cube (l0 = summarise([4]), l1 = cross_join())
[    10.542][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([4]))
[    10.555][cube-solver-11][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]))
[    10.559][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([4]))
[    10.560][cube-solver-5][DEBUG] Solving cube (l0 = summarise([4]), l1 = mutate())
[    10.562][cube-solver-8][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join())
[    10.570][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[    10.591][cube-solver-6][DEBUG] Solving cube (l0 = summarise([4]), l1 = inner_join())
[    10.592][cube-solver-9][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join3())
[    10.593][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]))
[    10.603][cube-solver-12][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter())
[    10.612][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([4]))
[    10.619][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    10.621][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = anti_join())
[    10.631][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([4]))
[    10.635][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[    10.639][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join4())
[    10.640][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[    10.646][cube-solver-9][DEBUG] Solving cube (l0 = union(), l1 = summarise([4]))
[    10.663][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[    10.675][cube-solver-15][DEBUG] Solving cube (l0 = summarise([4]), l1 = union())
[    10.707][cube-solver-10][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([4]))
[    10.741][cube-solver-14][DEBUG] Solving cube (l0 = summarise([4]), l1 = left_join())
[    10.779][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[    10.811][cube-solver-3][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[    11.010][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([4]))
[    11.017][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[    11.039][cube-solver-9][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise([4]))
[    11.395][cube-solver-4][DEBUG] Solving cube (l0 = cross_join([17]), l1 = mutate())
[    11.452][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[    12.623][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[    12.633][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[    12.649][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = summarise([4]))
[    12.662][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    13.249][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[    13.349][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[    13.353][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[    13.541][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[    14.247][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[    14.251][cube-solver-0][DEBUG] Solving cube (l0 = summarise([4]), l1 = intersect())
[    16.422][cube-solver-1][DEBUG] Solving cube (l0 = summarise([4]), l1 = semi_join())
[    16.495][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise([4]), l1 = semi_join())
[    17.113][MainProcess][INFO] Statistics:
[    17.114][MainProcess][INFO] 	Generated cubes: 46
[    17.114][MainProcess][INFO] 	Attempted programs: 327
[    17.114][MainProcess][INFO] 		Rejected: 173
[    17.114][MainProcess][INFO] 		Failed: 153
[    17.114][MainProcess][INFO] 	Blacklist clauses: 339
[    17.114][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    17.115][MainProcess][DEBUG] 	0: Counter({'mutate': 288})
[    17.115][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    17.120][MainProcess][DEBUG] 	0: Counter({'summarise': 4406, 'mutate': 2771, 'left_join': 288, 'union': 288, 'semi_join': 288})
[    17.124][MainProcess][DEBUG] 	1: Counter({'natural_join': 1328, 'left_join': 1171, 'union': 1149, 'anti_join': 1080, 'mutate': 1008, 'cross_join': 720, 'inner_join': 713, 'filter': 536, 'semi_join': 336})
[    17.124][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, time = max(time), user))
[    17.384][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join([335]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i047.csv", col_types = cols(id = col_integer(),user = col_integer(),time = col_integer(),io = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o047.csv", col_types = cols(id = col_integer(),user = col_integer(),time = col_integer(),io = col_character()))

df2 <- input1 %>% group_by(user) %>% summarise(time = max(time)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(id, user, time, io) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       USER,
       TIME,
       io
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT USER,
                  MAX(TIME) AS TIME
           FROM input1
           GROUP BY USER) AS RHS
        WHERE (LHS.user = RHS.user
               AND LHS.time = RHS.time) ))
ORDER BY id
