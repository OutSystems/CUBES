[     3.187][MainProcess][INFO] Parsing specification...
[     3.191][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.191][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.192][MainProcess][DEBUG] Reading input files...
[     3.201][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i055.csv: ['int64', 'string', 'string', 'string']
[     3.207][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o055.csv: ['string', 'string', 'string']
[     3.238][MainProcess][DEBUG] Generating DSL...
[     3.274][MainProcess][INFO] Creating 16 processes
[     3.339][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.339][MainProcess][DEBUG] Increasing generator loc to 2
[     3.340][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.341][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.346][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.353][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.355][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.358][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.359][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.362][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.363][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.372][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.373][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.373][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.374][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.388][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.418][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.558][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.565][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     3.881][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     3.885][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     3.898][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     3.898][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     3.898][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     3.901][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     3.902][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     3.903][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     3.904][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     3.905][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     3.914][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     3.916][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     3.918][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     3.936][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     3.942][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     3.943][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     3.946][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     3.949][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     3.950][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     3.967][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     4.002][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     4.189][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     4.195][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     4.199][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     4.202][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     4.979][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)
[     4.980][MainProcess][INFO] Statistics:
[     4.980][MainProcess][INFO] 	Generated cubes: 27
[     4.981][MainProcess][INFO] 	Attempted programs: 26
[     4.981][MainProcess][INFO] 		Rejected: 25
[     4.981][MainProcess][INFO] 		Failed: 0
[     4.981][MainProcess][INFO] 	Blacklist clauses: 0
[     4.981][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     4.982][MainProcess][DEBUG] 	0: Counter({'mutate': 164, 'summarise': 149})
[     4.982][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     4.983][MainProcess][DEBUG] 	0: Counter({'summarise': 732, 'left_join': 217, 'union': 162})
[     4.983][MainProcess][DEBUG] 	1: Counter({'mutate': 306, 'summarise': 165, 'semi_join': 118, 'union': 116, 'inner_join': 115, 'natural_join': 110, 'left_join': 98, 'anti_join': 84})
[     4.983][MainProcess][INFO] Solution found: summarise(@param0, concatPageURL = string_agg(PageURL, ' '), Activity, User)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i055.csv", col_types = cols(ID = col_integer(),User = col_character(),Activity = col_character(),PageURL = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o055.csv", col_types = cols(User = col_character(),Activity = col_character(),concatPageURL = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df2 <- input1 %>% group_by(Activity, User) %>% summarise(concatPageURL = string_agg(PageURL, ' ')) %>% ungroup()
out <- df2 %>% select(User, Activity, concatPageURL) %>% arrange(User)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `User`,
       `Activity`,
       `concatPageURL`
FROM
  (SELECT `Activity`,
          `User`,
          string_agg(`PageURL`, ' ') AS concatPageURL
   FROM input1
   GROUP BY Activity,
            USER)
ORDER BY USER
