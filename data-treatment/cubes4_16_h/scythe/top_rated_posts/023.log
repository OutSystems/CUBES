[     1.604][MainProcess][INFO] Parsing specification...
[     1.608][MainProcess][DEBUG] Reading input files...
[     1.615][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i023.csv: ['int64', 'int64']
[     1.620][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o023.csv: ['int64', 'int64', 'int64']
[     1.647][MainProcess][DEBUG] Generating DSL...
[     1.670][MainProcess][INFO] Creating 16 processes
[     1.739][MainProcess][DEBUG] Increasing generator loc to 2
[     1.739][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.739][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.740][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.746][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.747][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.750][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.758][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.765][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.773][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.775][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.776][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.781][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.910][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.992][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.044][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.075][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.075][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([1]))
[     2.076][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([1]))
[     2.077][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = cross_join())
[     2.078][cube-solver-2][DEBUG] Solving cube (l0 = summarise([1]), l1 = mutate())
[     2.078][cube-solver-6][DEBUG] Solving cube (l0 = summarise([1]), l1 = inner_join())
[     2.081][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = summarise([1]))
[     2.086][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([1]))
[     2.089][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.091][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([1]))
[     2.091][cube-solver-8][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join())
[     2.096][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = union())
[     2.110][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = intersect())
[     2.111][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join3())
[     2.116][cube-solver-9][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.133][cube-solver-1][DEBUG] Found solution with cube (l0 = mutate(),)
[     2.134][MainProcess][INFO] Statistics:
[     2.134][MainProcess][INFO] 	Generated cubes: 24
[     2.134][MainProcess][INFO] 	Attempted programs: 4
[     2.134][MainProcess][INFO] 		Rejected: 2
[     2.134][MainProcess][INFO] 		Failed: 1
[     2.134][MainProcess][INFO] 	Blacklist clauses: 1
[     2.135][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     2.135][MainProcess][DEBUG] 	0: Counter({'summarise': 12, 'mutate': 9})
[     2.135][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.135][MainProcess][DEBUG] 	0: Counter({'summarise': 2})
[     2.135][MainProcess][DEBUG] 	1: Counter({'inner_join': 2})
[     2.135][MainProcess][INFO] Solution found: mutate(@param0, row_number = row_number())
[     2.270][cube-solver-9][DEBUG] Found solution with cube (l0 = left_join(), l1 = mutate())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i023.csv", col_types = cols(itemID = col_integer(),ordercount = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o023.csv", col_types = cols(rank = col_integer(),itemID = col_integer(),ordercount = col_integer()))

df2 <- input1 %>% mutate(row_number = row_number())
out <- df2 %>% select(rank = row_number, itemID, ordercount) %>% arrange(rank)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ROW_NUMBER() OVER () AS rank,
                         itemID,
                         ordercount
FROM input1
ORDER BY rank
