[     3.593][MainProcess][INFO] Parsing specification...
[     3.598][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.599][MainProcess][DEBUG] Reading input files...
[     3.608][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i019.csv: ['int64', 'int64']
[     3.613][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o019.csv: ['int64', 'int64', 'int64']
[     3.652][MainProcess][DEBUG] Generating DSL...
[     3.684][MainProcess][INFO] Creating 16 processes
[     3.751][MainProcess][DEBUG] Increasing generator loc to 2
[     3.751][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.752][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.752][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.752][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.753][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.753][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.754][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.758][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.762][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.770][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.773][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.774][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.786][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.787][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.789][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.792][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.887][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.931][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.004][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     4.005][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     4.011][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     4.012][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     4.015][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     4.019][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     4.020][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     4.025][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     4.033][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     4.043][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     4.046][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     4.047][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     4.049][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     4.051][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     4.053][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     4.055][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     4.071][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     4.071][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     4.074][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     4.074][cube-solver-9][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     4.098][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     4.101][cube-solver-5][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     4.109][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     4.112][cube-solver-2][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     4.119][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.120][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     4.147][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     4.188][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     4.195][cube-solver-3][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[     4.238][cube-solver-10][DEBUG] Solving cube (l0 = cross_join([1]), l1 = mutate())
[     4.241][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     4.241][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     4.243][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     4.243][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     4.244][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     4.273][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     4.292][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     4.310][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     4.355][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     4.387][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     4.389][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join([1]))
[     4.443][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     4.453][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise(), l1 = left_join())
[     4.455][MainProcess][INFO] Statistics:
[     4.455][MainProcess][INFO] 	Generated cubes: 43
[     4.455][MainProcess][INFO] 	Attempted programs: 49
[     4.455][MainProcess][INFO] 		Rejected: 29
[     4.455][MainProcess][INFO] 		Failed: 19
[     4.455][MainProcess][INFO] 	Blacklist clauses: 1
[     4.455][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     4.456][MainProcess][DEBUG] 	0: Counter({'mutate': 12, 'summarise': 12})
[     4.456][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     4.456][MainProcess][DEBUG] 	0: Counter({'summarise': 164, 'mutate': 63, 'left_join': 24, 'union': 24, 'semi_join': 12})
[     4.456][MainProcess][DEBUG] 	1: Counter({'left_join': 44, 'natural_join': 41, 'mutate': 38, 'anti_join': 37, 'summarise': 36, 'union': 35, 'inner_join': 29, 'semi_join': 27})
[     4.457][MainProcess][INFO] Solution found: left_join(summarise(@param0, n = n(), age), @param0)
[     4.590][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i019.csv", col_types = cols(id = col_integer(),age = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o019.csv", col_types = cols(id = col_integer(),age = col_integer(),n = col_integer()))

df2 <- input1 %>% group_by(age) %>% summarise(n = n()) %>% ungroup()
df3 <- left_join(df2, input1)
out <- df3 %>% select(id, age, n) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       age,
       n
FROM
  (SELECT LHS.age AS age,
          LHS.n AS n,
          RHS.id AS id
   FROM
     (SELECT age,
             COUNT() AS n
      FROM input1
      GROUP BY age) AS LHS
   LEFT JOIN input1 AS RHS ON (LHS.age = RHS.age))
ORDER BY id
