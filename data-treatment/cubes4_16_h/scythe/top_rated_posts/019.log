[     3.574][MainProcess][INFO] Parsing specification...
[     3.592][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.593][MainProcess][DEBUG] Reading input files...
[     3.621][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i019.csv: ['int64', 'int64']
[     3.642][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o019.csv: ['int64', 'int64', 'int64']
[     3.676][MainProcess][DEBUG] Generating DSL...
[     3.701][MainProcess][INFO] Creating 16 processes
[     3.771][MainProcess][DEBUG] Increasing generator loc to 2
[     3.771][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.771][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.771][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.772][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.772][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.772][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.772][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.777][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.778][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.785][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.794][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.798][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.799][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.808][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.808][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.823][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     4.040][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.049][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     4.111][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     4.122][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     4.124][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     4.124][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     4.126][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     4.126][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     4.126][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     4.126][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     4.128][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     4.129][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     4.136][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     4.159][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     4.162][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     4.163][cube-solver-9][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     4.166][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     4.166][cube-solver-9][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     4.168][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     4.183][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     4.186][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     4.239][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     4.257][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.305][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     4.324][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[     4.332][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     4.353][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     4.357][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())
[     4.359][MainProcess][INFO] Statistics:
[     4.360][MainProcess][INFO] 	Generated cubes: 30
[     4.360][MainProcess][INFO] 	Attempted programs: 15
[     4.360][MainProcess][INFO] 		Rejected: 14
[     4.360][MainProcess][INFO] 		Failed: 0
[     4.360][MainProcess][INFO] 	Blacklist clauses: 0
[     4.360][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     4.361][MainProcess][DEBUG] 	0: Counter({'mutate': 12, 'summarise': 12})
[     4.361][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     4.362][MainProcess][DEBUG] 	0: Counter({'summarise': 82, 'left_join': 23, 'union': 12, 'semi_join': 2})
[     4.362][MainProcess][DEBUG] 	1: Counter({'summarise': 25, 'mutate': 24, 'inner_join': 22, 'natural_join': 13, 'left_join': 12, 'semi_join': 12, 'cross_join': 11})
[     4.362][MainProcess][INFO] Solution found: natural_join(@param0, summarise(@param0, n = n(), age))
[     4.495][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise(), l1 = left_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i019.csv", col_types = cols(id = col_integer(),age = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o019.csv", col_types = cols(id = col_integer(),age = col_integer(),n = col_integer()))

df2 <- input1 %>% group_by(age) %>% summarise(n = n()) %>% ungroup()
df3 <- inner_join(input1, df2)
out <- df3 %>% select(id, age, n) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       age,
       n
FROM
  (SELECT LHS.id AS id,
          LHS.age AS age,
          RHS.n AS n
   FROM input1 AS LHS
   INNER JOIN
     (SELECT age,
             COUNT() AS n
      FROM input1
      GROUP BY age) AS RHS ON (LHS.age = RHS.age))
ORDER BY id
