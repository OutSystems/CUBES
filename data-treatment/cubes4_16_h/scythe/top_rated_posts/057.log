[     1.619][MainProcess][INFO] Parsing specification...
[     1.622][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.622][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.622][MainProcess][DEBUG] Reading input files...
[     1.630][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i057.csv: ['int64', 'string', 'string', 'int64']
[     1.635][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o057.csv: ['string', 'string', 'int64']
[     1.661][MainProcess][DEBUG] Generating DSL...
[     1.686][MainProcess][INFO] Creating 16 processes
[     1.761][MainProcess][DEBUG] Increasing generator loc to 2
[     1.761][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.761][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.762][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.762][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.762][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.762][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.762][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.768][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.774][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.776][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.778][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.788][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.791][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.796][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.815][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.825][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.025][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.041][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.110][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.131][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.134][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.136][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     2.142][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.143][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.147][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     2.150][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.153][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.260][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.264][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.271][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.276][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.296][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.300][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = summarise([1]))
[     2.304][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.306][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([1]))
[     2.309][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.310][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([1]))
[     2.361][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.364][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([1]))
[     2.367][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.367][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = summarise([1]))
[     2.433][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.438][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.469][cube-solver-15][DEBUG] Solving cube (l0 = summarise([4]), l1 = union())
[     2.487][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = anti_join())
[     2.947][cube-solver-9][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([4]))
[     3.331][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.468][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([4]))
[     3.477][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     3.492][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.754][cube-solver-0][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     3.837][cube-solver-3][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[     3.861][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     3.967][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     3.969][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     3.972][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = summarise([4]))
[     3.994][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     4.008][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([1]), l1 = summarise([4]))
[     4.013][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     4.365][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     4.398][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     4.542][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     4.837][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     4.929][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join([1]))
[     4.993][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     5.046][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[     6.244][cube-solver-0][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise([4]))
[     6.311][cube-solver-10][DEBUG] Found solution with cube (l0 = summarise(), l1 = semi_join())
[     6.312][MainProcess][INFO] Statistics:
[     6.312][MainProcess][INFO] 	Generated cubes: 49
[     6.313][MainProcess][INFO] 	Attempted programs: 434
[     6.313][MainProcess][INFO] 		Rejected: 196
[     6.313][MainProcess][INFO] 		Failed: 237
[     6.313][MainProcess][INFO] 	Blacklist clauses: 5
[     6.313][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     6.313][MainProcess][DEBUG] 	0: Counter({'mutate': 168, 'summarise': 108})
[     6.314][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     6.317][MainProcess][DEBUG] 	0: Counter({'summarise': 3291, 'mutate': 2059, 'left_join': 276, 'union': 276, 'semi_join': 276})
[     6.319][MainProcess][DEBUG] 	1: Counter({'mutate': 962, 'natural_join': 820, 'left_join': 765, 'anti_join': 687, 'union': 682, 'semi_join': 667, 'inner_join': 594, 'summarise': 540, 'filter': 461})
[     6.320][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, Birthyear = min(Birthyear), City))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i057.csv", col_types = cols(ID = col_integer(),Name = col_character(),City = col_character(),Birthyear = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o057.csv", col_types = cols(Name = col_character(),City = col_character(),minBirthyear = col_integer()))

df2 <- input1 %>% group_by(City) %>% summarise(Birthyear = min(Birthyear)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(Name, City, minBirthyear = Birthyear) %>% arrange(Name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Name,
       City,
       Birthyear AS minBirthyear
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT City,
                  MIN(Birthyear) AS Birthyear
           FROM input1
           GROUP BY City) AS RHS
        WHERE (LHS.City = RHS.City
               AND LHS.Birthyear = RHS.Birthyear) ))
ORDER BY Name
