[     1.586][MainProcess][INFO] Parsing specification...
[     1.589][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.589][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.590][MainProcess][DEBUG] Reading input files...
[     1.599][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i021.csv: ['int64', 'int64', 'string', 'datetime64[ns]']
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o021.csv: ['int64', 'string', 'datetime64[ns]']
[     1.640][MainProcess][DEBUG] Generating DSL...
[     1.658][MainProcess][INFO] Creating 16 processes
[     1.719][MainProcess][DEBUG] Increasing generator loc to 2
[     1.719][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.719][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.720][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.720][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.720][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.723][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.733][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.738][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.741][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.746][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.754][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.764][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.771][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.772][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.890][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.890][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.946][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     1.949][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     1.954][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     1.970][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     1.972][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     1.979][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     1.981][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     1.989][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     1.990][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     1.992][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     1.993][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     1.994][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     1.995][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     1.996][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.997][cube-solver-5][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     1.998][cube-solver-5][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     1.999][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.001][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.031][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.035][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.052][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.055][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.104][cube-solver-2][DEBUG] Found solution with cube (l0 = union(), l1 = summarise())
[     2.106][MainProcess][INFO] Statistics:
[     2.106][MainProcess][INFO] 	Generated cubes: 28
[     2.107][MainProcess][INFO] 	Attempted programs: 1
[     2.107][MainProcess][INFO] 		Rejected: 0
[     2.107][MainProcess][INFO] 		Failed: 0
[     2.107][MainProcess][INFO] 	Blacklist clauses: 0
[     2.107][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     2.107][MainProcess][DEBUG] 	0: Counter({'mutate': 13, 'summarise': 12})
[     2.107][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.108][MainProcess][DEBUG] 	0: Counter({'summarise': 21, 'left_join': 8, 'union': 1})
[     2.108][MainProcess][DEBUG] 	1: Counter({'natural_join': 10, 'semi_join': 7, 'summarise': 6, 'mutate': 5, 'filter': 2})
[     2.108][MainProcess][INFO] Solution found: summarise(union(@param0, @param0), maxSERVICEMONTH = max(SERVICEMONTH), CHARGEID, CHARGETYPE)
[     2.216][cube-solver-5][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise())
[     2.416][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i021.csv", col_types = cols(ID = col_integer(),CHARGEID = col_integer(),CHARGETYPE = col_character(),SERVICEMONTH = col_character()))
input1$SERVICEMONTH <- mdy(input1$SERVICEMONTH)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o021.csv", col_types = cols(CHARGEID = col_integer(),CHARGETYPE = col_character(),maxSERVICEMONTH = col_character()))
expected_output$maxSERVICEMONTH <- mdy(expected_output$maxSERVICEMONTH)

df2 <- bind_rows(input1, input1)
df3 <- df2 %>% group_by(CHARGEID, CHARGETYPE) %>% summarise(maxSERVICEMONTH = max(SERVICEMONTH)) %>% ungroup()
out <- df3 %>% select(CHARGEID, CHARGETYPE, maxSERVICEMONTH) %>% arrange(CHARGEID)

Failed to generate SQL query
