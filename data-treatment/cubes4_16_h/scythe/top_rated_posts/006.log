[     1.584][MainProcess][INFO] Parsing specification...
[     1.587][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.587][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.588][MainProcess][DEBUG] Reading input files...
[     1.595][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i006.csv: ['int64', 'string', 'string']
[     1.601][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o006.csv: ['int64', 'string', 'string']
[     1.627][MainProcess][DEBUG] Generating DSL...
[     1.645][MainProcess][INFO] Creating 16 processes
[     1.703][MainProcess][DEBUG] Increasing generator loc to 2
[     1.703][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.703][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.704][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.704][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.704][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.704][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.709][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.712][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.716][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.717][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.733][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.734][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.741][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.858][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.859][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.920][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     1.921][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     1.922][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = intersect())
[     1.923][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = semi_join())
[     1.925][cube-solver-8][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join())
[     1.929][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join3())
[     1.930][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join4())
[     1.932][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = cross_join())
[     1.934][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = mutate())
[     1.936][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([1]))
[     1.940][cube-solver-6][DEBUG] Solving cube (l0 = summarise([2]), l1 = inner_join())
[     1.954][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([2]))
[     1.958][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise([2]))
[     1.961][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.964][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([2]))
[     1.963][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = union())
[     1.967][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     1.969][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([2]))
[     1.974][cube-solver-14][DEBUG] Solving cube (l0 = summarise([2]), l1 = left_join())
[     1.981][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     1.984][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     1.987][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]))
[     1.994][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = summarise([3]))
[     2.031][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[     2.037][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.042][cube-solver-12][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter())
[     2.121][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = anti_join())
[     2.448][cube-solver-7][DEBUG] Found solution with cube (l0 = summarise([1]), l1 = semi_join())
[     2.449][MainProcess][INFO] Statistics:
[     2.449][MainProcess][INFO] 	Generated cubes: 29
[     2.449][MainProcess][INFO] 	Attempted programs: 13
[     2.449][MainProcess][INFO] 		Rejected: 10
[     2.449][MainProcess][INFO] 		Failed: 2
[     2.449][MainProcess][INFO] 	Blacklist clauses: 3
[     2.449][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     2.450][MainProcess][DEBUG] 	0: Counter({'mutate': 47, 'summarise': 35})
[     2.450][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.450][MainProcess][DEBUG] 	0: Counter({'summarise': 223, 'union': 63, 'left_join': 61})
[     2.450][MainProcess][DEBUG] 	1: Counter({'mutate': 96, 'summarise': 62, 'semi_join': 37, 'filter': 35, 'union': 32, 'natural_join': 30, 'left_join': 30, 'anti_join': 13, 'inner_join': 12})
[     2.450][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, Id = max(Id), Name))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i006.csv", col_types = cols(Id = col_integer(),Name = col_character(),Other_Columns = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o006.csv", col_types = cols(Id = col_integer(),Name = col_character(),Other_Columns = col_character()))

df2 <- input1 %>% group_by(Name) %>% summarise(Id = max(Id)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(Id, Name, Other_Columns) %>% arrange(Id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Id,
       Name,
       Other_Columns
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT Name,
                  MAX(Id) AS Id
           FROM input1
           GROUP BY Name) AS RHS
        WHERE (LHS.Id = RHS.Id
               AND LHS.Name = RHS.Name) ))
ORDER BY Id
