[     1.549][MainProcess][INFO] Parsing specification...
[     1.554][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.554][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.555][MainProcess][DEBUG] Reading input files...
[     1.564][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i002.csv: ['int64', 'string', 'string']
[     1.569][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o002.csv: ['string']
[     1.595][MainProcess][DEBUG] Generating DSL...
[     1.614][MainProcess][INFO] Creating 16 processes
[     1.672][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.672][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.672][MainProcess][DEBUG] Increasing generator loc to 3
[     1.672][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.672][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.673][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.673][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.676][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.683][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.683][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.686][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.691][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.692][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.704][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.704][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.707][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.708][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.987][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.051][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.053][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.172][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.233][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.236][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.251][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.256][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.259][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.259][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.261][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.264][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.267][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.272][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.275][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.284][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = mutate())
[     2.284][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     2.286][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter([1]))
[     2.288][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     2.289][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.291][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.299][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[     2.300][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = summarise())
[     2.304][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     2.305][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     2.306][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = intersect())
[     2.310][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = semi_join())
[     2.333][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.346][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[     2.347][MainProcess][INFO] Statistics:
[     2.347][MainProcess][INFO] 	Generated cubes: 31
[     2.347][MainProcess][INFO] 	Attempted programs: 9
[     2.348][MainProcess][INFO] 		Rejected: 8
[     2.348][MainProcess][INFO] 		Failed: 0
[     2.348][MainProcess][INFO] 	Blacklist clauses: 3
[     2.348][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.349][MainProcess][DEBUG] 	0: Counter({'mutate': 40, 'summarise': 15})
[     2.349][MainProcess][DEBUG] 	1: Counter({'filter': 55})
[     2.349][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.349][MainProcess][DEBUG] 	0: Counter({'summarise': 8})
[     2.350][MainProcess][DEBUG] 	1: Counter({'filter': 8})
[     2.350][MainProcess][DEBUG] 	2: Counter({'natural_join': 3, 'filter': 2, 'anti_join': 1, 'left_join': 1, 'union': 1})
[     2.350][MainProcess][INFO] Solution found: filter(summarise(@param0, n = n(), NAME), n > 1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i002.csv", col_types = cols(ID = col_integer(),NAME = col_character(),EMAIL = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o002.csv", col_types = cols(NAME = col_character()))

df2 <- input1 %>% group_by(NAME) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 1)
out <- df3 %>% select(NAME) %>% arrange(NAME)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT NAME
FROM
  (SELECT NAME,
          COUNT() AS n
   FROM input1
   GROUP BY NAME)
WHERE (n > 1.0)
ORDER BY NAME
