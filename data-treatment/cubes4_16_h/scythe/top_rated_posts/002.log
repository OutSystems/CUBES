[     1.610][MainProcess][INFO] Parsing specification...
[     1.613][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.613][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.614][MainProcess][DEBUG] Reading input files...
[     1.621][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i002.csv: ['int64', 'string', 'string']
[     1.626][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o002.csv: ['string']
[     1.654][MainProcess][DEBUG] Generating DSL...
[     1.678][MainProcess][INFO] Creating 16 processes
[     1.751][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.751][MainProcess][DEBUG] Increasing generator loc to 3
[     1.751][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.751][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.751][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.752][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.752][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.752][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.752][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.753][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.758][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.765][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.773][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.774][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.781][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.787][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.794][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.082][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.128][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.133][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.136][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.136][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.138][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.139][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.142][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.144][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.146][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.146][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.146][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.150][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.150][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.150][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.152][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.153][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.200][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = mutate())
[     2.205][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.227][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = mutate())
[     2.232][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.345][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter([2]))
[     2.350][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = union())
[     2.390][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([3]))
[     2.397][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = intersect())
[     2.482][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[     2.484][MainProcess][INFO] Statistics:
[     2.484][MainProcess][INFO] 	Generated cubes: 29
[     2.484][MainProcess][INFO] 	Attempted programs: 6
[     2.484][MainProcess][INFO] 		Rejected: 5
[     2.484][MainProcess][INFO] 		Failed: 0
[     2.484][MainProcess][INFO] 	Blacklist clauses: 3
[     2.484][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.485][MainProcess][DEBUG] 	0: Counter({'mutate': 32, 'summarise': 23})
[     2.485][MainProcess][DEBUG] 	1: Counter({'filter': 55})
[     2.485][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.485][MainProcess][DEBUG] 	0: Counter({'summarise': 104})
[     2.486][MainProcess][DEBUG] 	1: Counter({'filter': 81, 'natural_join': 23})
[     2.486][MainProcess][DEBUG] 	2: Counter({'filter': 42, 'natural_join3': 16, 'natural_join': 15, 'anti_join': 14, 'left_join': 12, 'union': 5})
[     2.486][MainProcess][INFO] Solution found: filter(summarise(@param0, n = n(), NAME), n > 1)
[     2.674][cube-solver-11][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.712][cube-solver-10][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.763][cube-solver-15][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i002.csv", col_types = cols(ID = col_integer(),NAME = col_character(),EMAIL = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o002.csv", col_types = cols(NAME = col_character()))

df2 <- input1 %>% group_by(NAME) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 1)
out <- df3 %>% select(NAME) %>% arrange(NAME)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT NAME
FROM
  (SELECT NAME,
          COUNT() AS n
   FROM input1
   GROUP BY NAME)
WHERE (n > 1.0)
ORDER BY NAME
