[     1.633][MainProcess][INFO] Parsing specification...
[     1.637][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.637][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.638][MainProcess][DEBUG] Reading input files...
[     1.645][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i011_1.csv: ['int64', 'string']
[     1.650][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i011_2.csv: ['int64', 'int64', 'string']
[     1.655][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o011.csv: ['int64', 'string', 'string']
[     1.684][MainProcess][DEBUG] Generating DSL...
[     1.707][MainProcess][INFO] Creating 16 processes
[     1.774][MainProcess][DEBUG] Increasing generator loc to 2
[     1.774][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.774][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.775][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.775][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.775][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.776][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.781][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.788][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.789][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.793][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.798][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.805][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.819][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.820][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.822][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.831][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.031][cube-solver-1][WARNING] There is no solution for current loc (1).
[     2.032][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.033][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.035][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.036][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.038][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.134][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.135][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.136][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     2.138][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.139][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.140][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.144][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.148][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.153][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.166][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.166][cube-solver-12][DEBUG] Solving cube (l0 = summarise([1]), l1 = anti_join())
[     2.168][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([2]))
[     2.172][cube-solver-4][DEBUG] Solving cube (l0 = anti_join([1]), l1 = mutate())
[     2.180][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = intersect())
[     2.210][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]))
[     2.216][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([2]))
[     2.220][cube-solver-10][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join4())
[     2.226][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.230][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.233][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = summarise([2]))
[     2.312][cube-solver-14][DEBUG] Solving cube (l0 = summarise([7]), l1 = union())
[     2.474][cube-solver-13][DEBUG] Solving cube (l0 = summarise([15]), l1 = left_join())
[     2.505][cube-solver-0][DEBUG] Solving cube (l0 = summarise([18]), l1 = cross_join())
[     2.557][cube-solver-1][DEBUG] Solving cube (l0 = summarise([19]), l1 = semi_join())
[     2.635][cube-solver-2][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise())
[     2.637][MainProcess][INFO] Statistics:
[     2.637][MainProcess][INFO] 	Generated cubes: 26
[     2.637][MainProcess][INFO] 	Attempted programs: 5
[     2.637][MainProcess][INFO] 		Rejected: 4
[     2.637][MainProcess][INFO] 		Failed: 0
[     2.637][MainProcess][INFO] 	Blacklist clauses: 32
[     2.637][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.638][MainProcess][DEBUG] 	0: Counter({'summarise': 90, 'natural_join': 63, 'left_join': 50, 'union': 24})
[     2.638][MainProcess][DEBUG] 	1: Counter({'summarise': 77, 'mutate': 60, 'natural_join3': 33, 'natural_join': 30, 'union': 14, 'inner_join': 7, 'left_join': 6})
[     2.638][MainProcess][INFO] Solution found: summarise(natural_join(@param0, @param1), concatCity = string_agg(City, ', '), Name, VehicleID)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i011_1.csv", col_types = cols(VehicleID = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i011_2.csv", col_types = cols(LocationID = col_integer(),VehicleID = col_integer(),City = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o011.csv", col_types = cols(VehicleID = col_integer(),Name = col_character(),concatCity = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df3 <- inner_join(input1, input2)
df4 <- df3 %>% group_by(Name, VehicleID) %>% summarise(concatCity = string_agg(City, ', ')) %>% ungroup()
out <- df4 %>% select(VehicleID, Name, concatCity) %>% arrange(VehicleID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `VehicleID`,
       `Name`,
       `concatCity`
FROM
  (SELECT `Name`,
          `VehicleID`,
          string_agg(`City`, ', ') AS concatCity
   FROM
     (SELECT LHS.VehicleID AS VehicleID,
             LHS.Name AS Name,
             RHS.LocationID AS LocationID,
             RHS.City AS City
      FROM input1 AS LHS
      INNER JOIN input2 AS RHS ON (LHS.VehicleID = RHS.VehicleID))
   GROUP BY Name,
            VehicleID)
ORDER BY VehicleID
