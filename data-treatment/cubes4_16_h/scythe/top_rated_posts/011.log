[     1.572][MainProcess][INFO] Parsing specification...
[     1.579][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.579][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.580][MainProcess][DEBUG] Reading input files...
[     1.597][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i011_1.csv: ['int64', 'string']
[     1.603][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i011_2.csv: ['int64', 'int64', 'string']
[     1.622][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o011.csv: ['int64', 'string', 'string']
[     1.656][MainProcess][DEBUG] Generating DSL...
[     1.694][MainProcess][INFO] Creating 16 processes
[     1.754][MainProcess][DEBUG] Increasing generator loc to 2
[     1.761][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.764][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.768][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.769][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.773][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.780][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.784][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.788][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.788][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.792][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.795][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.798][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.798][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.800][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.809][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.841][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.221][cube-solver-1][WARNING] There is no solution for current loc (1).
[     2.222][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.224][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.225][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.226][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.229][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.748][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.751][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.757][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.759][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.762][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.767][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     2.768][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.768][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.770][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.774][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.776][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.779][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.779][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.779][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.784][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.796][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = summarise([1]))
[     2.804][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([1]))
[     2.817][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.825][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.928][cube-solver-15][DEBUG] Solving cube (l0 = summarise([10]), l1 = intersect())
[     3.050][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     3.059][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = summarise([15]))
[     3.229][cube-solver-1][DEBUG] Solving cube (l0 = summarise([20]), l1 = semi_join())
[     3.429][cube-solver-0][DEBUG] Solving cube (l0 = summarise([32]), l1 = cross_join())
[     4.070][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())
[     4.071][MainProcess][INFO] Statistics:
[     4.071][MainProcess][INFO] 	Generated cubes: 26
[     4.071][MainProcess][INFO] 	Attempted programs: 35
[     4.072][MainProcess][INFO] 		Rejected: 3
[     4.072][MainProcess][INFO] 		Failed: 31
[     4.072][MainProcess][INFO] 	Blacklist clauses: 43
[     4.072][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     4.073][MainProcess][DEBUG] 	0: Counter({'summarise': 364, 'left_join': 227, 'natural_join': 210, 'union': 54, 'anti_join': 33})
[     4.073][MainProcess][DEBUG] 	1: Counter({'mutate': 296, 'summarise': 228, 'natural_join3': 100, 'union': 91, 'natural_join': 75, 'left_join': 50, 'anti_join': 24, 'semi_join': 24})
[     4.074][MainProcess][INFO] Solution found: natural_join(summarise(@param1, concatCity = string_agg(City, ', '), VehicleID), @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i011_1.csv", col_types = cols(VehicleID = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i011_2.csv", col_types = cols(LocationID = col_integer(),VehicleID = col_integer(),City = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o011.csv", col_types = cols(VehicleID = col_integer(),Name = col_character(),concatCity = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df3 <- input2 %>% group_by(VehicleID) %>% summarise(concatCity = string_agg(City, ', ')) %>% ungroup()
df4 <- inner_join(df3, input1)
out <- df4 %>% select(VehicleID, Name, concatCity) %>% arrange(VehicleID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `VehicleID`,
       `Name`,
       `concatCity`
FROM
  (SELECT `LHS`.`VehicleID` AS `VehicleID`,
          `LHS`.`concatCity` AS `concatCity`,
          `RHS`.`Name` AS `Name`
   FROM
     (SELECT `VehicleID`,
             string_agg(`City`, ', ') AS concatCity
      FROM input2
      GROUP BY VehicleID) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.VehicleID = RHS.VehicleID))
ORDER BY VehicleID
