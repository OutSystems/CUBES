[     1.584][MainProcess][INFO] Parsing specification...
[     1.587][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.587][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.588][MainProcess][DEBUG] Reading input files...
[     1.596][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i008_1.csv: ['int64', 'string', 'string']
[     1.601][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i008_2.csv: ['string', 'int64', 'int64', 'string']
[     1.607][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o008.csv: ['string', 'int64', 'string']
[     1.634][MainProcess][DEBUG] Generating DSL...
[     1.655][MainProcess][INFO] Creating 16 processes
[     1.720][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.720][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.720][MainProcess][DEBUG] Increasing generator loc to 2
[     1.721][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.722][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.722][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.722][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.722][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.726][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.731][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.739][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.744][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.751][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.756][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.759][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.770][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.970][cube-solver-1][WARNING] There is no solution for current loc (1).
[     1.971][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.973][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.056][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.057][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.058][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.116][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.119][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.119][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.121][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.126][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.126][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.128][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.131][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.131][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.139][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = left_join())
[     2.143][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]))
[     2.146][cube-solver-15][DEBUG] Solving cube (l0 = summarise([3]), l1 = intersect())
[     2.149][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([4]))
[     2.238][cube-solver-14][DEBUG] Solving cube (l0 = summarise([13]), l1 = union())
[     2.296][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.301][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.314][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([14]))
[     2.330][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = summarise([14]))
[     2.337][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.347][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.368][cube-solver-12][DEBUG] Solving cube (l0 = summarise([15]), l1 = anti_join([18]))
[     2.378][cube-solver-5][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([15]))
[     2.384][cube-solver-3][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     2.455][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([17]))
[     2.551][cube-solver-1][DEBUG] Solving cube (l0 = summarise([19]), l1 = semi_join())
[     2.630][cube-solver-0][DEBUG] Solving cube (l0 = summarise([19]), l1 = cross_join())
[     2.859][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([25]))
[     2.862][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     2.896][cube-solver-7][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise([25]))
[     3.411][cube-solver-0][DEBUG] Solving cube (l0 = cross_join([2]), l1 = mutate())
[     3.415][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     3.452][cube-solver-0][DEBUG] Solving cube (l0 = mutate([2]), l1 = natural_join3())
[     3.455][cube-solver-0][DEBUG] Solving cube (l0 = mutate([2]), l1 = natural_join4())
[     3.458][cube-solver-0][DEBUG] Solving cube (l0 = mutate([2]), l1 = summarise([26]))
[     3.474][cube-solver-0][DEBUG] Solving cube (l0 = mutate([2]), l1 = anti_join([40]))
[     3.474][cube-solver-7][DEBUG] Solving cube (l0 = mutate([2]), l1 = left_join())
[     3.479][cube-solver-7][DEBUG] Solving cube (l0 = mutate([2]), l1 = union())
[     3.484][cube-solver-7][DEBUG] Solving cube (l0 = mutate([2]), l1 = intersect([12]))
[     3.494][cube-solver-0][DEBUG] Solving cube (l0 = mutate([2]), l1 = semi_join())
[     3.496][cube-solver-7][DEBUG] Solving cube (l0 = mutate([2]), l1 = cross_join([2]))
[     3.497][cube-solver-0][DEBUG] Solving cube (l0 = mutate([2]), l1 = mutate([2]))
[     3.500][cube-solver-0][DEBUG] Solving cube (l0 = mutate([2]), l1 = inner_join())
[     3.502][cube-solver-7][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise([26]))
[     3.503][cube-solver-0][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate([2]))
[     3.535][cube-solver-11][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise([4]))
[     3.537][MainProcess][INFO] Statistics:
[     3.537][MainProcess][INFO] 	Generated cubes: 46
[     3.537][MainProcess][INFO] 	Attempted programs: 157
[     3.537][MainProcess][INFO] 		Rejected: 0
[     3.538][MainProcess][INFO] 		Failed: 156
[     3.538][MainProcess][INFO] 	Blacklist clauses: 82
[     3.538][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     3.539][MainProcess][DEBUG] 	0: Counter({'summarise': 835, 'natural_join': 124, 'left_join': 111, 'union': 97, 'semi_join': 49})
[     3.541][MainProcess][DEBUG] 	1: Counter({'summarise': 381, 'left_join': 153, 'union': 137, 'anti_join': 120, 'inner_join': 115, 'natural_join3': 108, 'natural_join': 105, 'semi_join': 100})
[     3.541][MainProcess][INFO] Solution found: summarise(left_join(@param0, @param1), all$first, OrderGUID)
[     4.181][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise([1]), l1 = left_join())
[     4.757][cube-solver-2][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise([17]))
[     4.793][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i008_1.csv", col_types = cols(OrderID = col_integer(),OrderGUID = col_character(),OrderNumber = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i008_2.csv", col_types = cols(LineItemGUID = col_character(),OrderID = col_integer(),Quantity = col_integer(),Description = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o008.csv", col_types = cols(OrderNumber = col_character(),Quantity = col_integer(),Description = col_character()))

df3 <- left_join(input1, input2)
df4 <- df3 %>% group_by(OrderGUID) %>% summarise_all(first) %>% ungroup()
out <- df4 %>% select(OrderNumber, Quantity, Description) %>% arrange(OrderNumber)

Failed to generate SQL query
