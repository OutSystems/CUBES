[     1.581][MainProcess][INFO] Parsing specification...
[     1.593][MainProcess][DEBUG] Reading input files...
[     1.613][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i050.csv: ['int64', 'int64', 'int64', 'int64']
[     1.632][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o050.csv: ['int64', 'int64', 'int64', 'int64', 'int64']
[     1.661][MainProcess][DEBUG] Generating DSL...
[     4.499][MainProcess][INFO] Creating 16 processes
[     4.583][MainProcess][DEBUG] Increasing generator loc to 2
[     8.015][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     8.064][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     8.108][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     8.119][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     8.129][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     8.135][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     8.136][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     8.137][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     8.138][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     8.139][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     8.145][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     8.154][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     8.157][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     8.180][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     8.198][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     8.200][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[   289.537][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[   293.598][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[   300.885][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[   305.733][cube-solver-1][DEBUG] Found solution with cube (l0 = mutate(),)
[   305.734][MainProcess][INFO] Statistics:
[   305.735][MainProcess][INFO] 	Generated cubes: 17
[   305.735][MainProcess][INFO] 	Attempted programs: 76
[   305.735][MainProcess][INFO] 		Rejected: 75
[   305.735][MainProcess][INFO] 		Failed: 0
[   305.735][MainProcess][INFO] 	Blacklist clauses: 0
[   305.735][MainProcess][DEBUG] Printing statistics for good programs of size 1
[   305.736][MainProcess][DEBUG] 	0: Counter({'mutate': 1201})
[   305.737][MainProcess][INFO] Solution found: mutate(@param0, pmin = pmin(Col1,Col2,Col3))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i050.csv", col_types = cols(ID = col_integer(),Col1 = col_integer(),Col2 = col_integer(),Col3 = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o050.csv", col_types = cols(ID = col_integer(),Col1 = col_integer(),Col2 = col_integer(),Col3 = col_integer(),TheMin = col_integer()))

df2 <- input1 %>% mutate(pmin = pmin(Col1,Col2,Col3))
out <- df2 %>% select(ID, Col1, Col2, Col3, TheMin = pmin) %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ID,
       Col1,
       Col2,
       Col3,
       MIN(Col1, Col2, Col3) AS TheMin
FROM input1
ORDER BY ID
