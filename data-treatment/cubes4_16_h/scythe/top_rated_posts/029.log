[     1.683][MainProcess][INFO] Parsing specification...
[     1.697][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.697][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.698][MainProcess][DEBUG] Reading input files...
[     1.708][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i029.csv: ['string', 'string']
[     1.714][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o029.csv: ['string', 'string']
[     1.743][MainProcess][DEBUG] Generating DSL...
[     1.778][MainProcess][INFO] Creating 16 processes
[     1.844][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.845][MainProcess][DEBUG] Increasing generator loc to 2
[     1.846][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.848][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.848][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.853][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.856][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.860][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.867][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.869][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.873][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.878][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.880][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.881][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.884][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.892][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.932][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.271][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.598][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.664][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.717][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.722][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.724][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.729][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.731][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.732][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     2.733][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.739][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.745][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.753][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.754][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.755][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.757][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.760][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.762][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.762][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.767][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.778][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.798][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.798][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.806][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.809][cube-solver-9][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.853][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.858][cube-solver-7][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     3.216][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)
[     3.217][MainProcess][INFO] Statistics:
[     3.217][MainProcess][INFO] 	Generated cubes: 28
[     3.218][MainProcess][INFO] 	Attempted programs: 10
[     3.218][MainProcess][INFO] 		Rejected: 9
[     3.218][MainProcess][INFO] 		Failed: 0
[     3.218][MainProcess][INFO] 	Blacklist clauses: 0
[     3.218][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.219][MainProcess][DEBUG] 	0: Counter({'summarise': 53, 'mutate': 48})
[     3.219][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.219][MainProcess][DEBUG] 	0: Counter({'summarise': 211, 'left_join': 56, 'union': 47, 'intersect': 9})
[     3.219][MainProcess][DEBUG] 	1: Counter({'mutate': 85, 'summarise': 58, 'cross_join': 32, 'inner_join': 29, 'left_join': 28, 'anti_join': 26, 'union': 26, 'natural_join': 24, 'unite': 15})
[     3.219][MainProcess][INFO] Solution found: summarise(@param0, concatPerson = string_agg(Person, ' '), TicketID)
[     3.329][cube-solver-10][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise())
[     3.452][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i029.csv", col_types = cols(TicketID = col_character(),Person = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o029.csv", col_types = cols(TicketID = col_character(),concatPerson = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df2 <- input1 %>% group_by(TicketID) %>% summarise(concatPerson = string_agg(Person, ' ')) %>% ungroup()
out <- df2 %>% select(TicketID, concatPerson) %>% arrange(TicketID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `TicketID`,
       `concatPerson`
FROM
  (SELECT `TicketID`,
          string_agg(`Person`, ' ') AS concatPerson
   FROM input1
   GROUP BY TicketID)
ORDER BY TicketID
