[     1.568][MainProcess][INFO] Parsing specification...
[     1.570][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.570][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.571][MainProcess][DEBUG] Reading input files...
[     1.578][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i029.csv: ['string', 'string']
[     1.582][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o029.csv: ['string', 'string']
[     1.609][MainProcess][DEBUG] Generating DSL...
[     1.629][MainProcess][INFO] Creating 16 processes
[     1.697][MainProcess][DEBUG] Increasing generator loc to 2
[     1.697][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.697][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.698][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.698][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.698][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.698][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.701][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.707][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.709][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.713][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.718][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.733][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.746][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.747][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.879][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.881][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.956][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     1.959][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     1.966][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     1.967][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     1.969][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     1.969][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     1.974][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.011][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.011][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.014][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.021][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.024][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.061][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.064][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.066][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.066][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.068][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.068][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.133][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     2.138][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.139][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.140][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.142][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.197][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.211][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.333][cube-solver-3][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise())
[     2.335][MainProcess][INFO] Statistics:
[     2.335][MainProcess][INFO] 	Generated cubes: 27
[     2.336][MainProcess][INFO] 	Attempted programs: 4
[     2.336][MainProcess][INFO] 		Rejected: 3
[     2.336][MainProcess][INFO] 		Failed: 0
[     2.336][MainProcess][INFO] 	Blacklist clauses: 0
[     2.336][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     2.337][MainProcess][DEBUG] 	0: Counter({'summarise': 38, 'mutate': 36})
[     2.337][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.338][MainProcess][DEBUG] 	0: Counter({'summarise': 113, 'left_join': 33, 'union': 30})
[     2.338][MainProcess][DEBUG] 	1: Counter({'mutate': 51, 'summarise': 36, 'left_join': 23, 'natural_join': 20, 'semi_join': 16, 'unite': 10, 'inner_join': 7, 'anti_join': 7, 'union': 6})
[     2.338][MainProcess][INFO] Solution found: summarise(left_join(@param0, @param0), concatPerson = string_agg(Person, ' '), TicketID)
[     2.424][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)
[     2.660][cube-solver-10][DEBUG] Found solution with cube (l0 = summarise(), l1 = semi_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i029.csv", col_types = cols(TicketID = col_character(),Person = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o029.csv", col_types = cols(TicketID = col_character(),concatPerson = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df2 <- left_join(input1, input1)
df3 <- df2 %>% group_by(TicketID) %>% summarise(concatPerson = string_agg(Person, ' ')) %>% ungroup()
out <- df3 %>% select(TicketID, concatPerson) %>% arrange(TicketID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `TicketID`,
       `concatPerson`
FROM
  (SELECT `TicketID`,
          string_agg(`Person`, ' ') AS concatPerson
   FROM
     (SELECT LHS.TicketID AS TicketID,
             LHS.Person AS Person
      FROM input1 AS LHS
      LEFT JOIN input1 AS RHS ON (LHS.TicketID = RHS.TicketID
                                  AND LHS.Person = RHS.Person))
   GROUP BY TicketID)
ORDER BY TicketID
