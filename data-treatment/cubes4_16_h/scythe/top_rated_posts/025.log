[     1.604][MainProcess][INFO] Parsing specification...
[     1.629][MainProcess][DEBUG] Reading input files...
[     1.638][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i025.csv: ['int64', 'string']
[     1.644][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o025.csv: ['int64', 'string']
[     1.670][MainProcess][DEBUG] Generating DSL...
[     1.699][MainProcess][INFO] Creating 16 processes
[     1.761][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.761][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.761][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.762][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.762][MainProcess][DEBUG] Increasing generator loc to 3
[     1.763][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.769][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.769][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.776][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.779][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.780][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.784][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.792][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.792][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.801][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.816][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.831][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.261][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.261][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.263][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.263][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.336][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.472][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.709][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.714][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.715][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.718][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.718][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.719][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.723][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.723][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.722][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.726][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.728][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.733][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.738][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.739][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.740][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.744][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.744][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.746][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.749][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = intersect())
[     2.834][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[     2.841][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = semi_join())
[     2.852][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     2.858][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = cross_join())
[     2.888][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter([2]))
[     2.895][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = mutate())
[     2.939][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([2]))
[     2.946][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = inner_join())
[     3.248][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter([13]))
[     3.355][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter([13]))
[     3.364][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = filter([13]))
[     6.354][cube-solver-3][DEBUG] Found solution with cube (l0 = mutate(), l1 = filter())
[     6.356][MainProcess][INFO] Statistics:
[     6.356][MainProcess][INFO] 	Generated cubes: 34
[     6.357][MainProcess][INFO] 	Attempted programs: 41
[     6.357][MainProcess][INFO] 		Rejected: 40
[     6.357][MainProcess][INFO] 		Failed: 0
[     6.357][MainProcess][INFO] 	Blacklist clauses: 13
[     6.357][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     6.359][MainProcess][DEBUG] 	0: Counter({'mutate': 481, 'summarise': 435})
[     6.360][MainProcess][DEBUG] 	1: Counter({'filter': 917})
[     6.360][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     6.363][MainProcess][DEBUG] 	0: Counter({'summarise': 4142})
[     6.366][MainProcess][DEBUG] 	1: Counter({'filter': 3497, 'natural_join': 360, 'anti_join': 287})
[     6.367][MainProcess][DEBUG] 	2: Counter({'filter': 987, 'union': 361, 'natural_join': 357, 'cross_join': 348, 'left_join': 343, 'mutate': 331, 'natural_join3': 324, 'semi_join': 315, 'anti_join': 263, 'inner_join': 259, 'summarise': 256})
[     6.367][MainProcess][INFO] Solution found: filter(mutate(@param0, row_number = row_number()), row_number >= 3 & row_number < 5)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i025.csv", col_types = cols(Id = col_integer(),Value = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o025.csv", col_types = cols(Id = col_integer(),Value = col_character()))

df2 <- input1 %>% mutate(row_number = row_number())
df3 <- df2 %>% filter(row_number >= 3 & row_number < 5)
out <- df3 %>% select(Id, Value) %>% arrange(Id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Id,
       Value
FROM
  (SELECT Id,
          Value,
          ROW_NUMBER() OVER () AS row_number
   FROM input1)
WHERE (row_number >= 3.0
       AND row_number < 5.0)
ORDER BY Id
