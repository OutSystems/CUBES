[     1.574][MainProcess][INFO] Parsing specification...
[     1.576][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.577][MainProcess][DEBUG] Reading input files...
[     1.583][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i040.csv: ['string', 'string']
[     1.589][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o040.csv: ['string', 'string', 'int64']
[     1.614][MainProcess][DEBUG] Generating DSL...
[     1.628][MainProcess][INFO] Creating 16 processes
[     1.706][MainProcess][DEBUG] Increasing generator loc to 2
[     1.706][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.707][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.707][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.707][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.707][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.707][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.707][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.707][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.707][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.707][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.714][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.728][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.744][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.748][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.799][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.804][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.825][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     1.828][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     1.827][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     1.830][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     1.834][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     1.835][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     1.835][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     1.837][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     1.844][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     1.847][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     1.854][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)
[     1.855][MainProcess][INFO] Statistics:
[     1.856][MainProcess][INFO] 	Generated cubes: 20
[     1.856][MainProcess][INFO] 	Attempted programs: 2
[     1.856][MainProcess][INFO] 		Rejected: 1
[     1.856][MainProcess][INFO] 		Failed: 0
[     1.856][MainProcess][INFO] 	Blacklist clauses: 0
[     1.856][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     1.857][MainProcess][DEBUG] 	0: Counter({'mutate': 1, 'summarise': 1})
[     1.857][MainProcess][INFO] Solution found: summarise(@param0, n = n(), group, subGroup)
[     1.897][cube-solver-10][DEBUG] Found solution with cube (l0 = summarise(), l1 = semi_join())
[     2.138][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())
[     2.138][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise(), l1 = left_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i040.csv", col_types = cols(group = col_character(),subGroup = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o040.csv", col_types = cols(group = col_character(),subGroup = col_character(),n = col_integer()))

df2 <- input1 %>% group_by(group, subGroup) %>% summarise(n = n()) %>% ungroup()
out <- df2 %>% select(group, subGroup, n) %>% arrange(group)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT GROUP,
       subGroup,
       n
FROM
  (SELECT GROUP,
          subGroup,
          COUNT() AS n
   FROM input1
   GROUP BY GROUP,
            subGroup)
ORDER BY GROUP
