[     1.675][MainProcess][INFO] Parsing specification...
[     1.679][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.679][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.680][MainProcess][DEBUG] Reading input files...
[     1.699][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i045.csv: ['int64', 'int64', 'int64', 'datetime64[ns]']
[     1.708][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o045.csv: ['int64', 'int64']
[     1.742][MainProcess][DEBUG] Generating DSL...
[     1.774][MainProcess][INFO] Creating 16 processes
[     1.841][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.841][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.842][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.842][MainProcess][DEBUG] Increasing generator loc to 3
[     1.848][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.849][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.853][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.855][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.859][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.862][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.864][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.874][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.876][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.880][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.884][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.890][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.919][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.475][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.479][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.480][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.483][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.484][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.569][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.089][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.091][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.096][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     3.096][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.097][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     3.100][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     3.101][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     3.102][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     3.103][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     3.105][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     3.107][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     3.117][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     3.121][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     3.126][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = mutate())
[     3.127][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = mutate())
[     3.128][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter([1]))
[     3.129][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[     3.134][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     3.134][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     3.136][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = intersect())
[     3.136][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = semi_join())
[     3.222][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([2]), l2 = summarise())
[     3.229][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = cross_join())
[     3.244][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([2]))
[     3.251][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = mutate())
[     3.382][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([2]))
[     3.389][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = inner_join())
[     3.910][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter([5]))
[     3.956][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter([5]))
[     3.966][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = filter([5]))
[     4.110][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     5.371][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = left_join(), l2 = filter([5]))
[     6.332][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     6.413][cube-solver-5][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter([2]), l2 = cross_join())
[     6.415][MainProcess][INFO] Statistics:
[     6.415][MainProcess][INFO] 	Generated cubes: 36
[     6.415][MainProcess][INFO] 	Attempted programs: 85
[     6.415][MainProcess][INFO] 		Rejected: 63
[     6.415][MainProcess][INFO] 		Failed: 21
[     6.415][MainProcess][INFO] 	Blacklist clauses: 5
[     6.415][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     6.416][MainProcess][DEBUG] 	0: Counter({'summarise': 440, 'mutate': 200})
[     6.417][MainProcess][DEBUG] 	1: Counter({'filter': 640})
[     6.417][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     6.419][MainProcess][DEBUG] 	0: Counter({'summarise': 3828})
[     6.421][MainProcess][DEBUG] 	1: Counter({'filter': 3165, 'natural_join': 291, 'anti_join': 237, 'left_join': 137})
[     6.422][MainProcess][DEBUG] 	2: Counter({'filter': 951, 'natural_join': 364, 'left_join': 357, 'semi_join': 340, 'cross_join': 330, 'union': 327, 'natural_join3': 321, 'mutate': 308, 'anti_join': 288, 'summarise': 164, 'inner_join': 80})
[     6.423][MainProcess][INFO] Solution found: cross_join(filter(summarise(@param0, n = n(), account_no, date), n <= 1), summarise(@param0, n = n(), account_no, date), n != n.other | n.other > n)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i045.csv", col_types = cols(user_id = col_integer(),account_no = col_integer(),zip = col_integer(),date = col_character()))
input1$date <- dmy(input1$date)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o045.csv", col_types = cols(user_id = col_integer(),n = col_integer()))

df2 <- input1 %>% group_by(account_no, date) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n <= 1)
df4 <- full_join(df3 %>% mutate(tmp.col=1), df2 %>% mutate(tmp.col=1), by="tmp.col", suffix = c("", ".other")) %>% select(-tmp.col) %>% filter(n != n.other | n.other > n)
out <- df4 %>% select(user_id = n, n = n.other) %>% distinct() %>% arrange(user_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT n AS user_id,
                n.other AS n
FROM
  (SELECT account_no, date, n,
                            account_no.other,
                            date.other,
                            n.other
   FROM
     (SELECT LHS.account_no AS account_no,
             LHS.date AS date,
             LHS.n AS n,
             COALESCE(LHS.tmp.col, RHS.tmp.col) AS tmp.col,
             RHS.account_no AS account_no.other,
             RHS.date AS date.other,
             RHS.n AS n.other
      FROM
        (SELECT account_no, date, n,
                                  1.0 AS tmp.col
         FROM
           (SELECT account_no, date, COUNT() AS n
            FROM input1
            GROUP BY account_no, date)
         WHERE (n <= 1.0)) AS LHS
      FULL JOIN
        (SELECT account_no, date, n,
                                  1.0 AS tmp.col
         FROM
           (SELECT account_no, date, COUNT() AS n
            FROM input1
            GROUP BY account_no, date)) AS RHS ON (LHS.tmp.col = RHS.tmp.col)))
WHERE (n != n.other
       OR n.other > n)
ORDER BY user_id
