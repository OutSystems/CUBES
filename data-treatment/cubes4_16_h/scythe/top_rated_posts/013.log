[     1.639][MainProcess][INFO] Parsing specification...
[     1.649][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.649][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.651][MainProcess][DEBUG] Reading input files...
[     1.660][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i013.csv: ['string', 'int64']
[     1.667][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o013.csv: ['string', 'int64', 'int64']
[     1.695][MainProcess][DEBUG] Generating DSL...
[     1.713][MainProcess][INFO] Creating 16 processes
[     1.791][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.791][MainProcess][DEBUG] Increasing generator loc to 3
[     1.791][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.791][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.791][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.792][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.792][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.792][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.792][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.794][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.798][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.807][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.807][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.814][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.823][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.839][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.841][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.172][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.246][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.246][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.248][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.251][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.254][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.257][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.259][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.259][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.259][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.263][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.283][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.286][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = natural_join4())
[     2.287][cube-solver-2][DEBUG] Solving cube (l0 = filter([1]), l1 = mutate())
[     2.289][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = summarise())
[     2.291][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.339][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = mutate())
[     2.345][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = anti_join())
[     2.367][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter([2]))
[     2.367][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([2]), l2 = mutate())
[     2.371][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = left_join())
[     2.372][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = union())
[     2.397][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([2]))
[     2.403][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = intersect())
[     2.484][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([3]), l2 = mutate())
[     2.490][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = semi_join())
[     2.557][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([4]), l2 = summarise())
[     2.564][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = cross_join())
[     2.595][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([4]))
[     2.602][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = mutate())
[     2.625][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([4]))
[     2.631][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = inner_join())
[     2.693][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = summarise())
[     2.699][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = filter([4]))
[     2.758][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.764][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter([2]), l2 = left_join())
[     2.765][MainProcess][INFO] Statistics:
[     2.766][MainProcess][INFO] 	Generated cubes: 35
[     2.766][MainProcess][INFO] 	Attempted programs: 24
[     2.766][MainProcess][INFO] 		Rejected: 19
[     2.766][MainProcess][INFO] 		Failed: 4
[     2.766][MainProcess][INFO] 	Blacklist clauses: 4
[     2.766][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.766][MainProcess][DEBUG] 	0: Counter({'summarise': 60, 'mutate': 54})
[     2.766][MainProcess][DEBUG] 	1: Counter({'filter': 114})
[     2.766][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.766][MainProcess][DEBUG] 	0: Counter({'summarise': 132})
[     2.767][MainProcess][DEBUG] 	1: Counter({'filter': 131, 'anti_join': 1})
[     2.767][MainProcess][DEBUG] 	2: Counter({'left_join': 25, 'natural_join3': 24, 'union': 24, 'anti_join': 14, 'natural_join': 12, 'semi_join': 12, 'mutate': 9, 'inner_join': 6, 'cross_join': 5, 'filter': 1})
[     2.767][MainProcess][INFO] Solution found: left_join(filter(summarise(@param0, n = n(), orgName), n > 1), @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i013.csv", col_types = cols(orgName = col_character(),id = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o013.csv", col_types = cols(orgName = col_character(),n = col_integer(),id = col_integer()))

df2 <- input1 %>% group_by(orgName) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 1)
df4 <- left_join(df3, input1)
out <- df4 %>% select(orgName, n, id) %>% arrange(orgName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT orgName,
       n,
       id
FROM
  (SELECT LHS.orgName AS orgName,
          LHS.n AS n,
          RHS.id AS id
   FROM
     (SELECT *
      FROM
        (SELECT orgName,
                COUNT() AS n
         FROM input1
         GROUP BY orgName)
      WHERE (n > 1.0)) AS LHS
   LEFT JOIN input1 AS RHS ON (LHS.orgName = RHS.orgName))
ORDER BY orgName
