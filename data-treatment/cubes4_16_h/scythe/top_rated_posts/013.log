[     1.648][MainProcess][INFO] Parsing specification...
[     1.651][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.651][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.652][MainProcess][DEBUG] Reading input files...
[     1.659][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i013.csv: ['string', 'int64']
[     1.664][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o013.csv: ['string', 'int64', 'int64']
[     1.690][MainProcess][DEBUG] Generating DSL...
[     1.706][MainProcess][INFO] Creating 16 processes
[     1.798][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.798][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.798][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.798][MainProcess][DEBUG] Increasing generator loc to 3
[     1.798][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.800][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.800][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.800][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.800][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.801][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.801][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.806][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.808][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.817][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.828][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.836][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.847][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.988][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     1.990][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.073][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.077][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.079][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.081][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.083][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.086][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.086][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.089][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.098][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.100][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.110][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]))
[     2.118][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = mutate())
[     2.120][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = summarise())
[     2.120][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = summarise())
[     2.122][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     2.157][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = mutate())
[     2.162][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.262][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     2.266][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.341][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter([2]))
[     2.344][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = union())
[     2.345][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]), l2 = mutate())
[     2.350][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = intersect())
[     2.366][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([2]))
[     2.368][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter([2]))
[     2.368][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]), l2 = summarise())
[     2.371][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = semi_join())
[     2.374][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = cross_join())
[     2.374][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = mutate())
[     2.389][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter([2]))
[     2.397][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = inner_join())
[     2.465][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter([2]))
[     2.573][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = natural_join4())
[     2.577][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = filter([3]))
[     2.835][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.881][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.173][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = left_join(), l2 = filter([5]))
[     3.176][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter([2]))
[     3.177][MainProcess][INFO] Statistics:
[     3.178][MainProcess][INFO] 	Generated cubes: 36
[     3.178][MainProcess][INFO] 	Attempted programs: 27
[     3.178][MainProcess][INFO] 		Rejected: 26
[     3.178][MainProcess][INFO] 		Failed: 0
[     3.178][MainProcess][INFO] 	Blacklist clauses: 5
[     3.178][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     3.178][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 60})
[     3.179][MainProcess][DEBUG] 	1: Counter({'filter': 120})
[     3.179][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     3.179][MainProcess][DEBUG] 	0: Counter({'summarise': 870})
[     3.180][MainProcess][DEBUG] 	1: Counter({'filter': 749, 'natural_join': 73, 'anti_join': 48})
[     3.180][MainProcess][DEBUG] 	2: Counter({'filter': 193, 'natural_join': 87, 'natural_join3': 84, 'union': 84, 'semi_join': 84, 'inner_join': 81, 'left_join': 77, 'summarise': 60, 'anti_join': 60, 'mutate': 60})
[     3.180][MainProcess][INFO] Solution found: filter(natural_join(summarise(@param0, n = n(), orgName), @param0), n > 1)
[     3.222][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i013.csv", col_types = cols(orgName = col_character(),id = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o013.csv", col_types = cols(orgName = col_character(),n = col_integer(),id = col_integer()))

df2 <- input1 %>% group_by(orgName) %>% summarise(n = n()) %>% ungroup()
df3 <- inner_join(df2, input1)
df4 <- df3 %>% filter(n > 1)
out <- df4 %>% select(orgName, n, id) %>% arrange(orgName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT orgName,
       n,
       id
FROM
  (SELECT LHS.orgName AS orgName,
          LHS.n AS n,
          RHS.id AS id
   FROM
     (SELECT orgName,
             COUNT() AS n
      FROM input1
      GROUP BY orgName) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.orgName = RHS.orgName))
WHERE (n > 1.0)
ORDER BY orgName
