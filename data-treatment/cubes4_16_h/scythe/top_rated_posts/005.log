[     3.155][MainProcess][INFO] Parsing specification...
[     3.159][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.159][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.160][MainProcess][DEBUG] Reading input files...
[     3.168][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i005.csv: ['int64', 'string', 'int64']
[     3.174][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o005.csv: ['int64', 'string', 'int64']
[     3.203][MainProcess][DEBUG] Generating DSL...
[     4.689][MainProcess][INFO] Creating 16 processes
[     4.777][MainProcess][DEBUG] Increasing generator loc to 3
[     6.752][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     6.765][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     6.773][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     6.785][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     6.807][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     6.812][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     6.825][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     6.831][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     6.833][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     6.845][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     6.876][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     6.887][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     6.892][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     6.898][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     6.902][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     6.922][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[    39.032][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    39.110][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[    39.112][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[    39.125][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    39.148][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    47.435][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    51.741][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[    52.769][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    71.941][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([12]), l2 = mutate())
[    72.019][cube-solver-5][DEBUG] Solving cube (l0 = summarise([12]), l1 = natural_join4(), l2 = summarise([12]))
[    72.036][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise([12]))
[    72.066][cube-solver-5][DEBUG] Solving cube (l0 = summarise([12]), l1 = natural_join4(), l2 = mutate())
[    72.104][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([12]), l2 = mutate())
[    72.116][cube-solver-5][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = natural_join())
[    72.130][cube-solver-6][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = natural_join3())
[    72.181][cube-solver-13][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = natural_join4())
[    72.224][cube-solver-13][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = summarise([12]))
[    72.229][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([12]), l2 = summarise([12]))
[    72.271][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[    72.273][cube-solver-13][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = filter())
[    72.305][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate())
[    72.329][cube-solver-8][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = anti_join())
[    72.335][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise([12]))
[    72.337][cube-solver-13][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = left_join())
[    72.379][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([12]), l2 = summarise([12]))
[    72.401][cube-solver-15][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = union())
[    72.428][cube-solver-14][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = semi_join())
[    72.439][cube-solver-11][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = intersect())
[    72.473][cube-solver-12][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = cross_join())
[    72.495][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[    72.527][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise([12]))
[    72.562][cube-solver-7][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = mutate())
[    72.602][cube-solver-10][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = inner_join())
[    72.619][cube-solver-7][DEBUG] Solving cube (l0 = summarise([12]), l1 = filter(), l2 = summarise([12]))
[    72.801][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([12]), l2 = mutate())
[    72.880][cube-solver-9][DEBUG] Solving cube (l0 = summarise([12]), l1 = filter(), l2 = mutate())
[    72.901][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([12]), l2 = summarise([12]))
[    72.982][cube-solver-4][DEBUG] Solving cube (l0 = summarise([12]), l1 = anti_join(), l2 = summarise([12]))
[    77.198][cube-solver-10][DEBUG] Found solution with cube (l0 = summarise([12]), l1 = summarise([12]), l2 = inner_join())
[    77.200][MainProcess][INFO] Statistics:
[    77.200][MainProcess][INFO] 	Generated cubes: 38
[    77.200][MainProcess][INFO] 	Attempted programs: 484
[    77.200][MainProcess][INFO] 		Rejected: 271
[    77.201][MainProcess][INFO] 		Failed: 212
[    77.201][MainProcess][INFO] 	Blacklist clauses: 12
[    77.201][MainProcess][DEBUG] Priting statistics for good programs of size 2
[    77.203][MainProcess][DEBUG] 	0: Counter({'mutate': 2592, 'summarise': 1680})
[    77.205][MainProcess][DEBUG] 	1: Counter({'mutate': 3504, 'summarise': 768})
[    77.205][MainProcess][DEBUG] Priting statistics for good programs of size 3
[    77.207][MainProcess][DEBUG] 	0: Counter({'summarise': 3843})
[    77.209][MainProcess][DEBUG] 	1: Counter({'summarise': 3257, 'filter': 442, 'anti_join': 144})
[    77.211][MainProcess][DEBUG] 	2: Counter({'natural_join': 617, 'natural_join3': 612, 'union': 571, 'left_join': 543, 'mutate': 418, 'semi_join': 367, 'inner_join': 307, 'anti_join': 240, 'summarise': 168})
[    77.211][MainProcess][INFO] Solution found: inner_join(summarise(@param0, minid = min(id), total), summarise(@param0, maxtotal = max(total), customer), 'total' = 'maxtotal','maxtotal' = 'maxtotal')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i005.csv", col_types = cols(id = col_integer(),customer = col_character(),total = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o005.csv", col_types = cols(minid = col_integer(),customer = col_character(),maxtotal = col_integer()))

df2 <- input1 %>% group_by(total) %>% summarise(minid = min(id)) %>% ungroup()
df3 <- input1 %>% group_by(customer) %>% summarise(maxtotal = max(total)) %>% ungroup()
df4 <- inner_join(df2, df3, by=c('total' = 'maxtotal','maxtotal' = 'maxtotal'), suffix = c('', '.other'))
out <- df4 %>% select(minid, customer, maxtotal = total) %>% arrange(minid)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT minid,
       customer,
       total AS maxtotal
FROM
  (SELECT LHS.total AS total,
          LHS.minid AS minid,
          RHS.customer AS customer
   FROM
     (SELECT total,
             MIN(id) AS minid
      FROM input1
      GROUP BY total) AS LHS
   INNER JOIN
     (SELECT customer,
             MAX(total) AS maxtotal
      FROM input1
      GROUP BY customer) AS RHS ON (LHS.total = RHS.maxtotal))
ORDER BY minid
