[     3.071][MainProcess][INFO] Parsing specification...
[     3.075][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.075][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.075][MainProcess][DEBUG] Reading input files...
[     3.084][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i038.csv: ['int64', 'string', 'string']
[     3.089][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o038.csv: ['int64', 'string', 'string']
[     3.118][MainProcess][DEBUG] Generating DSL...
[     3.141][MainProcess][INFO] Creating 16 processes
[     3.210][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.210][MainProcess][DEBUG] Increasing generator loc to 3
[     3.210][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.210][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.210][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.211][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.211][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.211][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.213][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.215][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.224][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.228][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.230][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     3.234][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.236][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.248][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     3.255][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     3.459][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     3.476][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.478][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.610][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.611][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.614][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     3.615][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.617][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     3.618][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.619][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     3.627][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     3.631][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     3.635][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     3.639][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     3.641][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     3.651][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = mutate())
[     3.651][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = mutate())
[     3.654][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     3.656][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     3.664][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     3.668][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     3.671][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = summarise())
[     3.675][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     3.682][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = mutate())
[     3.687][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = intersect())
[     3.857][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([2]))
[     3.862][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = semi_join())
[     3.889][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter([3]))
[     3.895][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = cross_join())
[     3.943][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter([3]))
[     3.953][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([3]), l2 = summarise())
[     3.958][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = mutate())
[     3.968][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([3]))
[     3.973][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = inner_join())
[     4.239][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter([4]))
[     4.246][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = filter([4]))
[     4.725][cube-solver-10][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     4.726][MainProcess][INFO] Statistics:
[     4.727][MainProcess][INFO] 	Generated cubes: 34
[     4.727][MainProcess][INFO] 	Attempted programs: 8
[     4.727][MainProcess][INFO] 		Rejected: 6
[     4.727][MainProcess][INFO] 		Failed: 1
[     4.727][MainProcess][INFO] 	Blacklist clauses: 4
[     4.727][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     4.728][MainProcess][DEBUG] 	0: Counter({'mutate': 120, 'summarise': 69})
[     4.728][MainProcess][DEBUG] 	1: Counter({'filter': 189})
[     4.728][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     4.729][MainProcess][DEBUG] 	0: Counter({'summarise': 731})
[     4.729][MainProcess][DEBUG] 	1: Counter({'filter': 647, 'natural_join': 60, 'anti_join': 24})
[     4.730][MainProcess][DEBUG] 	2: Counter({'filter': 148, 'natural_join': 94, 'natural_join3': 87, 'anti_join': 73, 'mutate': 68, 'left_join': 60, 'union': 60, 'summarise': 60, 'semi_join': 51, 'inner_join': 30})
[     4.730][MainProcess][INFO] Solution found: anti_join(@param0, filter(summarise(@param0, n = n(), city, name), n <= 1), )

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i038.csv", col_types = cols(id = col_integer(),name = col_character(),city = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o038.csv", col_types = cols(id = col_integer(),name = col_character(),city = col_character()))

df2 <- input1 %>% group_by(city, name) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n <= 1)
df4 <- anti_join(input1, df3, by=c())
out <- df4 %>% select(id, name, city) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       name,
       city
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT city,
                     name,
                     COUNT() AS n
              FROM input1
              GROUP BY city,
                       name)
           WHERE (n <= 1.0)) AS RHS
        WHERE (LHS.name = RHS.name
               AND LHS.city = RHS.city) ))
ORDER BY id
