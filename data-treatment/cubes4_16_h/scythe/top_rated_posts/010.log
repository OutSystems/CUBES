[     1.583][MainProcess][INFO] Parsing specification...
[     1.587][MainProcess][DEBUG] Reading input files...
[     1.594][MainProcess][WARNING] Using integers larger than 32 bits! Converting column phone_number to string.
[     1.595][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i010_1.csv: ['timedelta64[ns]', 'string', 'object']
[     1.602][MainProcess][WARNING] Using integers larger than 32 bits! Converting column phone_number to string.
[     1.603][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i010_2.csv: ['timedelta64[ns]', 'timedelta64[ns]', 'object']
[     1.609][MainProcess][WARNING] Using integers larger than 32 bits! Converting column phone_number to string.
[     1.610][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o010.csv: ['timedelta64[ns]', 'timedelta64[ns]', 'object']
[     1.646][MainProcess][DEBUG] Generating DSL...
[     1.659][MainProcess][INFO] Creating 16 processes
[     1.726][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.726][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.726][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     1.726][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     1.726][MainProcess][DEBUG] Increasing generator loc to 2
[     1.726][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     1.729][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     1.730][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     1.731][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     1.734][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     1.741][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     1.746][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.749][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.757][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.762][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.766][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.776][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.796][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     1.796][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     1.797][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     1.800][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     1.815][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     1.828][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.837][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     1.844][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     1.844][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     1.846][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.850][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     1.850][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     1.852][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.878][cube-solver-3][DEBUG] Found solution with cube (l0 = anti_join(),)
[     1.879][MainProcess][INFO] Statistics:
[     1.880][MainProcess][INFO] 	Generated cubes: 19
[     1.880][MainProcess][INFO] 	Attempted programs: 3
[     1.880][MainProcess][INFO] 		Rejected: 0
[     1.880][MainProcess][INFO] 		Failed: 2
[     1.880][MainProcess][INFO] 	Blacklist clauses: 4
[     1.880][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     1.881][MainProcess][DEBUG] 	0: Counter({'semi_join': 7, 'left_join': 3, 'anti_join': 1})
[     1.881][MainProcess][INFO] Solution found: anti_join(@param1, @param0, 'id', 'phone_number')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i010_1.csv", col_types = cols(id = col_time(),name = col_character(),phone_number = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i010_2.csv", col_types = cols(id = col_time(),date = col_time(),phone_number = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o010.csv", col_types = cols(id = col_time(),date = col_time(),phone_number = col_character()))

df3 <- anti_join(input2, input1, by=c('id', 'phone_number'))
out <- df3 %>% select(id, date, phone_number) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id, date, phone_number
FROM
  (SELECT *
   FROM input2 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM input1 AS RHS
        WHERE (LHS.id = RHS.id
               AND LHS.phone_number = RHS.phone_number) ))
ORDER BY id
