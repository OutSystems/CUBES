[     1.583][MainProcess][INFO] Parsing specification...
[     1.607][MainProcess][DEBUG] Reading input files...
[     1.645][MainProcess][WARNING] Using integers larger than 32 bits! Converting column phone_number to string.
[     1.645][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i010_1.csv: ['timedelta64[ns]', 'string', 'object']
[     1.652][MainProcess][WARNING] Using integers larger than 32 bits! Converting column phone_number to string.
[     1.653][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i010_2.csv: ['timedelta64[ns]', 'timedelta64[ns]', 'object']
[     1.681][MainProcess][WARNING] Using integers larger than 32 bits! Converting column phone_number to string.
[     1.682][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o010.csv: ['timedelta64[ns]', 'timedelta64[ns]', 'object']
[     1.722][MainProcess][DEBUG] Generating DSL...
[     1.735][MainProcess][INFO] Creating 16 processes
[     1.815][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.815][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     1.815][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.815][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     1.815][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     1.815][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     1.815][MainProcess][DEBUG] Increasing generator loc to 2
[     1.815][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     1.815][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     1.818][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     1.825][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     1.829][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.847][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.847][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.850][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.851][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.855][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.881][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     1.893][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     1.893][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     1.898][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.922][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     1.933][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     1.934][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     1.934][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     1.934][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     1.934][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     1.934][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     1.935][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.935][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.953][cube-solver-3][DEBUG] Found solution with cube (l0 = anti_join(),)
[     1.954][MainProcess][INFO] Statistics:
[     1.954][MainProcess][INFO] 	Generated cubes: 19
[     1.954][MainProcess][INFO] 	Attempted programs: 4
[     1.954][MainProcess][INFO] 		Rejected: 0
[     1.954][MainProcess][INFO] 		Failed: 3
[     1.954][MainProcess][INFO] 	Blacklist clauses: 5
[     1.954][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     1.955][MainProcess][DEBUG] 	0: Counter({'inner_join': 2, 'anti_join': 1})
[     1.955][MainProcess][INFO] Solution found: anti_join(@param1, @param0, )

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i010_1.csv", col_types = cols(id = col_time(),name = col_character(),phone_number = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i010_2.csv", col_types = cols(id = col_time(),date = col_time(),phone_number = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o010.csv", col_types = cols(id = col_time(),date = col_time(),phone_number = col_character()))

df3 <- anti_join(input2, input1, by=c())
out <- df3 %>% select(id, date, phone_number) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id, date, phone_number
FROM
  (SELECT *
   FROM input2 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM input1 AS RHS
        WHERE (LHS.id = RHS.id
               AND LHS.phone_number = RHS.phone_number) ))
ORDER BY id
