[     1.656][MainProcess][INFO] Parsing specification...
[     1.659][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.659][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.660][MainProcess][DEBUG] Reading input files...
[     1.667][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i027.csv: ['string', 'string', 'float64']
[     1.672][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o027.csv: ['string', 'string', 'float64']
[     1.697][MainProcess][DEBUG] Generating DSL...
[     1.715][MainProcess][INFO] Creating 16 processes
[     1.780][MainProcess][DEBUG] Increasing generator loc to 2
[     1.780][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.781][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.781][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.781][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.781][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.781][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.782][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.781][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.784][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.789][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.792][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.809][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.813][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.816][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.816][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.818][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.935][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.935][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.991][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     1.997][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.000][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     2.003][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.005][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     2.014][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.014][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.017][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.030][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.032][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.057][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.060][cube-solver-3][DEBUG] Solving cube (l0 = summarise([1]), l1 = inner_join())
[     2.066][cube-solver-12][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter())
[     2.077][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = union())
[     2.118][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]))
[     2.124][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = summarise([3]))
[     2.128][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.130][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([3]))
[     2.133][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = anti_join())
[     2.134][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.137][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([3]))
[     2.164][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]))
[     2.170][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.177][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.177][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[     2.180][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = summarise([3]))
[     2.185][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.504][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.580][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     2.673][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([3]))
[     2.681][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     2.682][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.692][cube-solver-6][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[     2.713][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     2.724][cube-solver-0][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([3]))
[     2.732][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     2.734][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     2.736][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = summarise([3]))
[     2.870][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.925][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([1]), l1 = summarise([3]))
[     2.929][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     2.960][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise(), l1 = semi_join())
[     2.961][MainProcess][INFO] Statistics:
[     2.962][MainProcess][INFO] 	Generated cubes: 41
[     2.962][MainProcess][INFO] 	Attempted programs: 104
[     2.962][MainProcess][INFO] 		Rejected: 48
[     2.962][MainProcess][INFO] 		Failed: 55
[     2.962][MainProcess][INFO] 	Blacklist clauses: 4
[     2.962][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     2.963][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 48})
[     2.963][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.963][MainProcess][DEBUG] 	0: Counter({'summarise': 629, 'left_join': 108, 'union': 108, 'mutate': 62, 'semi_join': 58})
[     2.964][MainProcess][DEBUG] 	1: Counter({'mutate': 249, 'summarise': 144, 'natural_join': 123, 'left_join': 97, 'union': 84, 'filter': 78, 'inner_join': 67, 'anti_join': 62, 'semi_join': 61})
[     2.964][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, avg = max(avg), cname))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i027.csv", col_types = cols(cname = col_character(),wmname = col_character(),avg = col_double()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o027.csv", col_types = cols(cname = col_character(),wmname = col_character(),maxavg = col_double()))

df2 <- input1 %>% group_by(cname) %>% summarise(avg = max(avg)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(cname, wmname, maxavg = avg) %>% arrange(cname)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT cname,
       wmname,
       AVG AS maxavg
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT cname,
                  MAX(AVG) AS AVG
           FROM input1
           GROUP BY cname) AS RHS
        WHERE (LHS.cname = RHS.cname
               AND LHS.avg = RHS.avg) ))
ORDER BY cname
