[     1.630][MainProcess][INFO] Parsing specification...
[     1.633][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.633][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.634][MainProcess][DEBUG] Reading input files...
[     1.642][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i043.csv: ['string', 'string']
[     1.647][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o043.csv: ['string', 'string']
[     1.672][MainProcess][DEBUG] Generating DSL...
[     1.688][MainProcess][INFO] Creating 16 processes
[     1.750][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.750][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.750][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.751][MainProcess][DEBUG] Increasing generator loc to 3
[     1.751][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.752][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.752][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.752][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.752][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.757][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.758][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.762][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.766][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.767][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.778][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.780][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.781][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.952][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     1.954][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.009][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.012][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.015][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.017][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.019][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.019][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.020][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.023][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.024][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.024][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.026][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.032][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.034][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.053][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.055][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.080][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.084][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.094][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.096][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.097][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.100][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.219][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.223][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = intersect())
[     2.234][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.240][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = semi_join())
[     2.240][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.242][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = cross_join())
[     2.245][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.246][MainProcess][INFO] Statistics:
[     2.247][MainProcess][INFO] 	Generated cubes: 31
[     2.247][MainProcess][INFO] 	Attempted programs: 3
[     2.247][MainProcess][INFO] 		Rejected: 1
[     2.247][MainProcess][INFO] 		Failed: 1
[     2.247][MainProcess][INFO] 	Blacklist clauses: 0
[     2.247][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.248][MainProcess][DEBUG] 	0: Counter({'summarise': 14, 'mutate': 14})
[     2.248][MainProcess][DEBUG] 	1: Counter({'filter': 28})
[     2.248][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.248][MainProcess][DEBUG] 	0: Counter({'summarise': 71})
[     2.248][MainProcess][DEBUG] 	1: Counter({'filter': 71})
[     2.248][MainProcess][DEBUG] 	2: Counter({'natural_join': 13, 'summarise': 12, 'natural_join3': 12, 'filter': 12, 'union': 9, 'left_join': 8, 'anti_join': 5})
[     2.249][MainProcess][INFO] Solution found: anti_join(@param0, filter(summarise(@param0, n = n(), EmailAddress), n <= 1), 'EmailAddress')
[     2.417][cube-solver-12][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i043.csv", col_types = cols(CustomerName = col_character(),EmailAddress = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o043.csv", col_types = cols(CustomerName = col_character(),EmailAddress = col_character()))

df2 <- input1 %>% group_by(EmailAddress) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n <= 1)
df4 <- anti_join(input1, df3, by=c('EmailAddress'))
out <- df4 %>% select(CustomerName, EmailAddress) %>% arrange(CustomerName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT CustomerName,
       EmailAddress
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT EmailAddress,
                     COUNT() AS n
              FROM input1
              GROUP BY EmailAddress)
           WHERE (n <= 1.0)) AS RHS
        WHERE (LHS.EmailAddress = RHS.EmailAddress) ))
ORDER BY CustomerName
