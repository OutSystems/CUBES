[     1.593][MainProcess][INFO] Parsing specification...
[     1.600][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.600][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.601][MainProcess][DEBUG] Reading input files...
[     1.629][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i043.csv: ['string', 'string']
[     1.638][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o043.csv: ['string', 'string']
[     1.667][MainProcess][DEBUG] Generating DSL...
[     1.684][MainProcess][INFO] Creating 16 processes
[     1.744][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.744][MainProcess][DEBUG] Increasing generator loc to 3
[     1.744][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.744][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.744][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.745][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.745][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.745][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.751][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.755][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.755][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.756][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.761][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.772][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.776][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.776][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.787][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.985][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.988][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.107][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.176][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.181][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.181][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.183][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.184][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.184][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.184][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.186][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.187][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.188][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.189][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.191][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.196][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.199][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.199][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.204][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.258][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([2]))
[     2.259][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([2]), l2 = mutate())
[     2.263][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = left_join())
[     2.265][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = union())
[     2.287][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter([2]))
[     2.293][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = intersect())
[     2.307][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([2]))
[     2.312][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = semi_join())
[     2.351][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter([2]))
[     2.357][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = cross_join())
[     2.422][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([3]), l2 = summarise())
[     2.426][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = mutate())
[     2.501][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([3]))
[     2.506][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = inner_join())
[     2.554][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter([3]))
[     2.772][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.903][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter([3]))
[     2.905][MainProcess][INFO] Statistics:
[     2.905][MainProcess][INFO] 	Generated cubes: 34
[     2.905][MainProcess][INFO] 	Attempted programs: 9
[     2.905][MainProcess][INFO] 		Rejected: 8
[     2.905][MainProcess][INFO] 		Failed: 0
[     2.905][MainProcess][INFO] 	Blacklist clauses: 5
[     2.906][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.906][MainProcess][DEBUG] 	0: Counter({'summarise': 61, 'mutate': 60})
[     2.906][MainProcess][DEBUG] 	1: Counter({'filter': 121})
[     2.906][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.907][MainProcess][DEBUG] 	0: Counter({'summarise': 485})
[     2.907][MainProcess][DEBUG] 	1: Counter({'filter': 448, 'natural_join': 37})
[     2.907][MainProcess][DEBUG] 	2: Counter({'filter': 89, 'natural_join': 62, 'mutate': 52, 'natural_join3': 42, 'union': 40, 'left_join': 39, 'summarise': 37, 'cross_join': 35, 'inner_join': 34, 'anti_join': 32, 'semi_join': 23})
[     2.907][MainProcess][INFO] Solution found: filter(natural_join(@param0, summarise(@param0, n = n(), EmailAddress)), n > 1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i043.csv", col_types = cols(CustomerName = col_character(),EmailAddress = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o043.csv", col_types = cols(CustomerName = col_character(),EmailAddress = col_character()))

df2 <- input1 %>% group_by(EmailAddress) %>% summarise(n = n()) %>% ungroup()
df3 <- inner_join(input1, df2)
df4 <- df3 %>% filter(n > 1)
out <- df4 %>% select(CustomerName, EmailAddress) %>% arrange(CustomerName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT CustomerName,
       EmailAddress
FROM
  (SELECT LHS.CustomerName AS CustomerName,
          LHS.EmailAddress AS EmailAddress,
          RHS.n AS n
   FROM input1 AS LHS
   INNER JOIN
     (SELECT EmailAddress,
             COUNT() AS n
      FROM input1
      GROUP BY EmailAddress) AS RHS ON (LHS.EmailAddress = RHS.EmailAddress))
WHERE (n > 1.0)
ORDER BY CustomerName
