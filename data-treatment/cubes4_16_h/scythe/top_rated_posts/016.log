[     1.555][MainProcess][INFO] Parsing specification...
[     1.567][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.567][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.568][MainProcess][DEBUG] Reading input files...
[     1.577][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i016.csv: ['int64', 'int64', 'string']
[     1.583][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o016.csv: ['int64', 'string']
[     1.611][MainProcess][DEBUG] Generating DSL...
[     1.644][MainProcess][INFO] Creating 16 processes
[     1.715][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.715][MainProcess][DEBUG] Increasing generator loc to 2
[     1.715][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.716][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.716][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.717][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.729][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.739][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.741][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.744][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.748][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.750][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.752][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.769][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.789][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.113][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.366][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.538][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.540][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.543][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     2.545][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.548][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.553][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     2.567][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.575][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.576][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.578][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.579][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.582][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.586][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.588][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.593][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.596][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     2.597][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.598][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.607][cube-solver-9][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.645][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.649][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.658][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.751][cube-solver-11][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise())
[     2.753][MainProcess][INFO] Statistics:
[     2.753][MainProcess][INFO] 	Generated cubes: 26
[     2.753][MainProcess][INFO] 	Attempted programs: 2
[     2.753][MainProcess][INFO] 		Rejected: 1
[     2.753][MainProcess][INFO] 		Failed: 0
[     2.754][MainProcess][INFO] 	Blacklist clauses: 0
[     2.754][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     2.754][MainProcess][DEBUG] 	0: Counter({'mutate': 76, 'summarise': 33})
[     2.754][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.755][MainProcess][DEBUG] 	0: Counter({'summarise': 49, 'left_join': 14, 'union': 2})
[     2.755][MainProcess][DEBUG] 	1: Counter({'mutate': 17, 'left_join': 13, 'semi_join': 12, 'unite': 9, 'natural_join': 7, 'summarise': 7})
[     2.755][MainProcess][INFO] Solution found: summarise(left_join(@param0, @param0), concatEMPLOYEE = string_agg(EMPLOYEE, ', '), COMPANY_ID)
[     3.054][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i016.csv", col_types = cols(ID = col_integer(),COMPANY_ID = col_integer(),EMPLOYEE = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o016.csv", col_types = cols(COMPANY_ID = col_integer(),concatEMPLOYEE = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df2 <- left_join(input1, input1)
df3 <- df2 %>% group_by(COMPANY_ID) %>% summarise(concatEMPLOYEE = string_agg(EMPLOYEE, ', ')) %>% ungroup()
out <- df3 %>% select(COMPANY_ID, concatEMPLOYEE) %>% arrange(COMPANY_ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `COMPANY_ID`,
       `concatEMPLOYEE`
FROM
  (SELECT `COMPANY_ID`,
          string_agg(`EMPLOYEE`, ', ') AS concatEMPLOYEE
   FROM
     (SELECT LHS.ID AS ID,
             LHS.COMPANY_ID AS COMPANY_ID,
             LHS.EMPLOYEE AS EMPLOYEE
      FROM input1 AS LHS
      LEFT JOIN input1 AS RHS ON (LHS.ID = RHS.ID
                                  AND LHS.COMPANY_ID = RHS.COMPANY_ID
                                  AND LHS.EMPLOYEE = RHS.EMPLOYEE))
   GROUP BY COMPANY_ID)
ORDER BY COMPANY_ID
