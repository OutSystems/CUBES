[     3.395][MainProcess][INFO] Parsing specification...
[     3.399][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.399][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.400][MainProcess][DEBUG] Reading input files...
[     3.408][MainProcess][WARNING] Using integers larger than 32 bits! Converting column isbn to string.
[     3.409][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/051_1.csv: ['object', 'string']
[     3.414][MainProcess][WARNING] Using integers larger than 32 bits! Converting column isbn to string.
[     3.415][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/051_2.csv: ['object', 'string']
[     3.420][MainProcess][WARNING] Using integers larger than 32 bits! Converting column isbn to string.
[     3.421][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/051_o.csv: ['object', 'string', 'string']
[     3.455][MainProcess][DEBUG] Generating DSL...
[     3.506][MainProcess][INFO] Creating 16 processes
[     3.585][MainProcess][DEBUG] Increasing generator loc to 2
[     3.589][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.592][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.598][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.601][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.602][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.605][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.620][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.624][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.628][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.632][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.636][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.637][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.639][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.641][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.653][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.695][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     4.106][cube-solver-1][WARNING] There is no solution for current loc (1).
[     4.107][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     4.108][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     4.150][cube-solver-0][WARNING] There is no solution for current loc (1).
[     4.151][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.153][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.723][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     4.729][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     4.734][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     4.734][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     4.739][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     4.740][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     4.741][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     4.744][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     4.744][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     4.745][cube-solver-5][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     4.750][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     4.751][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     4.752][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     4.755][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     4.755][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     4.754][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     4.765][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = left_join())
[     4.774][cube-solver-14][DEBUG] Solving cube (l0 = summarise([3]), l1 = union())
[     4.822][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([5]))
[     4.856][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([10]))
[     4.873][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = summarise([12]))
[     4.877][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise([1]), l1 = left_join())
[     4.879][MainProcess][INFO] Statistics:
[     4.879][MainProcess][INFO] 	Generated cubes: 26
[     4.879][MainProcess][INFO] 	Attempted programs: 5
[     4.879][MainProcess][INFO] 		Rejected: 0
[     4.879][MainProcess][INFO] 		Failed: 4
[     4.879][MainProcess][INFO] 	Blacklist clauses: 15
[     4.879][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     4.879][MainProcess][DEBUG] 	0: Counter({'left_join': 14, 'natural_join': 13, 'summarise': 4})
[     4.880][MainProcess][DEBUG] 	1: Counter({'mutate': 24, 'union': 3, 'summarise': 3, 'left_join': 1})
[     4.880][MainProcess][INFO] Solution found: left_join(@param0, summarise(@param1, concatAuthor = string_agg(Author, ', '), isbn))
[     4.911][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())
[     5.148][cube-solver-4][DEBUG] Found solution with cube (l0 = summarise(), l1 = inner_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/051_1.csv", col_types = cols(isbn = col_character(),title = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/051_2.csv", col_types = cols(isbn = col_character(),Author = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/051_o.csv", col_types = cols(isbn = col_character(),title = col_character(),author = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df3 <- input2 %>% group_by(isbn) %>% summarise(concatAuthor = string_agg(Author, ', ')) %>% ungroup()
df4 <- left_join(input1, df3)
out <- df4 %>% select(isbn, title, author = concatAuthor) %>% arrange(isbn)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `isbn`,
       `title`,
       `concatAuthor` AS `author`
FROM
  (SELECT `LHS`.`isbn` AS `isbn`,
          `LHS`.`title` AS `title`,
          `RHS`.`concatAuthor` AS `concatAuthor`
   FROM `input1` AS `LHS`
   LEFT JOIN
     (SELECT `isbn`,
             string_agg(`Author`, ', ') AS concatAuthor
      FROM input2
      GROUP BY isbn) AS RHS ON (LHS.isbn = RHS.isbn))
ORDER BY isbn
