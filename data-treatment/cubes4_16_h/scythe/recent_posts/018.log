[     1.670][MainProcess][INFO] Parsing specification...
[     1.676][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.676][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.676][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.677][MainProcess][DEBUG] Reading input files...
[     1.701][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/018.csv: ['int64', 'int64', 'datetime64[ns]', 'string']
[     1.707][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/018_o.csv: ['string', 'int64']
[     1.750][MainProcess][DEBUG] Generating DSL...
[     1.792][MainProcess][INFO] Creating 16 processes
[     1.880][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.880][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.881][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.881][MainProcess][DEBUG] Increasing generator loc to 3
[     1.886][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.887][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.890][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.894][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.905][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.911][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.914][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.916][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.925][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.925][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.928][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.937][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.991][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.967][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.967][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.971][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.154][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.161][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.213][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     4.018][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     4.023][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     4.027][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     4.027][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     4.030][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     4.037][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     4.038][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     4.045][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     4.048][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     4.050][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     4.055][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     4.056][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     4.060][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     4.062][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     4.069][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     4.073][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter([2]))
[     4.086][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = union())
[     4.109][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([2]), l2 = summarise())
[     4.117][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = intersect())
[     4.154][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([2]), l2 = mutate())
[     4.161][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]), l2 = summarise())
[     4.166][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = semi_join())
[     4.173][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = cross_join())
[     4.338][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([2]))
[     4.345][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = mutate())
[     4.389][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([2]))
[     4.400][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = inner_join())
[     4.555][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     4.556][MainProcess][INFO] Statistics:
[     4.557][MainProcess][INFO] 	Generated cubes: 33
[     4.557][MainProcess][INFO] 	Attempted programs: 8
[     4.557][MainProcess][INFO] 		Rejected: 1
[     4.557][MainProcess][INFO] 		Failed: 6
[     4.557][MainProcess][INFO] 	Blacklist clauses: 2
[     4.557][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     4.558][MainProcess][DEBUG] 	0: Counter({'mutate': 222, 'summarise': 149})
[     4.558][MainProcess][DEBUG] 	1: Counter({'filter': 371})
[     4.558][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     4.559][MainProcess][DEBUG] 	0: Counter({'summarise': 381})
[     4.559][MainProcess][DEBUG] 	1: Counter({'filter': 381})
[     4.559][MainProcess][DEBUG] 	2: Counter({'union': 50, 'left_join': 47, 'anti_join': 46, 'natural_join3': 44, 'filter': 40, 'natural_join': 36, 'cross_join': 36, 'semi_join': 33, 'summarise': 20, 'mutate': 18, 'inner_join': 12})
[     4.559][MainProcess][INFO] Solution found: natural_join3(filter(summarise(@param0, n = n(), Course, Date), n >= 2 | Date < mdy('10/17/2016')), summarise(@param0, n = n(), Course, Date), @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/018.csv", col_types = cols(OrderID = col_integer(),CustomerID = col_integer(),Date = col_character(),Course = col_character()))
input1$Date <- mdy(input1$Date)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/018_o.csv", col_types = cols(c1 = col_character(),c2 = col_integer()))

df2 <- input1 %>% group_by(Course, Date) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n >= 2 | Date < mdy('10/17/2016'))
df4 <- inner_join(df3, df2) %>% inner_join(input1)
out <- df4 %>% select(c1 = Course, c2 = n) %>% distinct() %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `Course` AS `c1`,
                `n` AS `c2`
FROM
  (SELECT `LHS`.`Course` AS `Course`,
          `LHS`.`Date` AS `Date`,
          `LHS`.`n` AS `n`,
          `RHS`.`OrderID` AS `OrderID`,
          `RHS`.`CustomerID` AS `CustomerID`
   FROM
     (SELECT `LHS`.`Course` AS `Course`,
             `LHS`.`Date` AS `Date`,
             `LHS`.`n` AS `n`
      FROM
        (SELECT *
         FROM
           (SELECT `Course`,
                   `Date`,
                   COUNT() AS `n`
            FROM `input1`
            GROUP BY `Course`,
                     `Date`)
         WHERE (`n` >= 2.0
                OR `Date` < mdy('10/17/2016'))) AS LHS
      INNER JOIN
        (SELECT Course, Date, COUNT() AS n
         FROM input1
         GROUP BY Course, Date) AS RHS ON (LHS.Course = RHS.Course
                                           AND LHS.Date = RHS.Date
                                           AND LHS.n = RHS.n)) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.Course = RHS.Course
                                AND LHS.Date = RHS.Date))
ORDER BY c1
