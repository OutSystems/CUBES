[     1.586][MainProcess][INFO] Parsing specification...
[     1.590][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.590][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.590][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.591][MainProcess][DEBUG] Reading input files...
[     1.600][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/018.csv: ['int64', 'int64', 'datetime64[ns]', 'string']
[     1.604][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/018_o.csv: ['string', 'int64']
[     1.637][MainProcess][DEBUG] Generating DSL...
[     1.668][MainProcess][INFO] Creating 16 processes
[     1.730][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.731][MainProcess][DEBUG] Increasing generator loc to 3
[     1.732][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.734][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.741][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.744][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.747][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.750][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.756][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.760][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.762][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.766][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.767][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.774][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.783][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.805][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.270][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.270][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.272][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.273][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.277][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.277][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.782][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.782][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.785][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.786][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.787][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.790][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.792][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.797][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.799][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = summarise())
[     2.801][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = summarise())
[     2.802][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     2.808][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]), l2 = mutate())
[     2.812][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([2]), l2 = summarise())
[     2.815][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = anti_join())
[     2.816][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = left_join())
[     2.835][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter([3]))
[     2.842][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = union())
[     2.852][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = mutate())
[     2.860][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = intersect())
[     2.868][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([4]))
[     2.873][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([5]), l2 = mutate())
[     2.876][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = semi_join())
[     2.882][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = cross_join())
[     3.011][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([16]))
[     3.026][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([16]), l2 = mutate())
[     3.200][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([18]))
[     3.215][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([18]), l2 = inner_join())
[     3.476][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter([24]))
[     3.707][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter([26]))
[     3.723][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = filter([26]))
[     4.408][cube-solver-5][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     4.409][MainProcess][INFO] Statistics:
[     4.409][MainProcess][INFO] 	Generated cubes: 34
[     4.409][MainProcess][INFO] 	Attempted programs: 25
[     4.409][MainProcess][INFO] 		Rejected: 6
[     4.409][MainProcess][INFO] 		Failed: 18
[     4.409][MainProcess][INFO] 	Blacklist clauses: 26
[     4.409][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     4.410][MainProcess][DEBUG] 	0: Counter({'mutate': 241, 'summarise': 228})
[     4.410][MainProcess][DEBUG] 	1: Counter({'filter': 469})
[     4.410][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     4.411][MainProcess][DEBUG] 	0: Counter({'summarise': 777})
[     4.411][MainProcess][DEBUG] 	1: Counter({'filter': 592, 'natural_join': 120, 'anti_join': 65})
[     4.412][MainProcess][DEBUG] 	2: Counter({'filter': 317, 'natural_join': 131, 'natural_join3': 116, 'mutate': 95, 'summarise': 66, 'anti_join': 16, 'left_join': 12, 'union': 12, 'semi_join': 12})
[     4.412][MainProcess][INFO] Solution found: natural_join(summarise(@param0, n = n(), Course, Date), filter(summarise(@param0, n = n(), Course, Date), n >= 2 | Date < mdy('10/17/2016')))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/018.csv", col_types = cols(OrderID = col_integer(),CustomerID = col_integer(),Date = col_character(),Course = col_character()))
input1$Date <- mdy(input1$Date)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/018_o.csv", col_types = cols(c1 = col_character(),c2 = col_integer()))

df2 <- input1 %>% group_by(Course, Date) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n >= 2 | Date < mdy('10/17/2016'))
df4 <- inner_join(df2, df3)
out <- df4 %>% select(c1 = Course, c2 = n) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `Course` AS `c1`,
       `n` AS `c2`
FROM
  (SELECT `LHS`.`Course` AS `Course`,
          `LHS`.`Date` AS `Date`,
          `LHS`.`n` AS `n`
   FROM
     (SELECT `Course`,
             `Date`,
             COUNT() AS `n`
      FROM `input1`
      GROUP BY `Course`,
               `Date`) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM
        (SELECT `Course`,
                `Date`,
                COUNT() AS `n`
         FROM `input1`
         GROUP BY `Course`,
                  `Date`)
      WHERE (`n` >= 2.0
             OR `Date` < mdy('10/17/2016'))) AS RHS ON (LHS.Course = RHS.Course
                                                        AND LHS.Date = RHS.Date
                                                        AND LHS.n = RHS.n))
ORDER BY c1
