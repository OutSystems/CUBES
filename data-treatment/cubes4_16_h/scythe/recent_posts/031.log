[     3.111][MainProcess][INFO] Parsing specification...
[     3.116][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.116][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.117][MainProcess][DEBUG] Reading input files...
[     3.126][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_1.csv: ['int64', 'string', 'int64']
[     3.133][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_2.csv: ['int64', 'string', 'string']
[     3.138][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_o.csv: ['int64', 'string', 'int64']
[     3.170][MainProcess][DEBUG] Generating DSL...
[     3.206][MainProcess][INFO] Creating 16 processes
[     3.267][MainProcess][DEBUG] Increasing generator loc to 2
[     3.273][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.274][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.274][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.277][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.278][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.284][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.285][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.290][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.294][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.298][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.302][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.303][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.304][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.307][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.319][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.349][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.773][cube-solver-0][WARNING] There is no solution for current loc (1).
[     3.774][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     3.776][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.140][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     4.142][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     4.145][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     4.146][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     4.149][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     4.150][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     4.155][cube-solver-3][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     4.158][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     4.162][cube-solver-7][DEBUG] Solving cube (l0 = filter([1]), l1 = filter([1]))
[     4.167][cube-solver-8][DEBUG] Solving cube (l0 = filter([1]), l1 = anti_join())
[     4.168][cube-solver-13][DEBUG] Solving cube (l0 = filter([1]), l1 = cross_join())
[     4.168][cube-solver-12][DEBUG] Solving cube (l0 = filter([1]), l1 = semi_join())
[     4.169][cube-solver-7][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([1]))
[     4.183][cube-solver-10][DEBUG] Solving cube (l0 = filter([2]), l1 = union())
[     4.186][cube-solver-9][DEBUG] Solving cube (l0 = filter([3]), l1 = left_join())
[     4.193][cube-solver-5][DEBUG] Solving cube (l0 = filter([6]), l1 = natural_join3())
[     4.195][cube-solver-14][DEBUG] Solving cube (l0 = filter([7]), l1 = inner_join())
[     4.215][cube-solver-11][DEBUG] Solving cube (l0 = filter([8]), l1 = intersect())
[     4.308][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([15]))
[     4.433][cube-solver-6][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([16]))
[     4.453][MainProcess][DEBUG] Increasing generator loc to 3
[     4.454][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     4.529][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     4.530][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     4.537][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     4.689][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([16]))
[     4.773][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     5.105][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     5.843][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     6.140][cube-solver-9][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join3())
[     6.403][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join())
[     6.461][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = filter([16]))
[     6.555][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = anti_join([27]))
[     6.572][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join4())
[     6.605][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = intersect([10]))
[     7.065][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = left_join())
[     7.659][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = union())
[     8.376][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     9.934][cube-solver-9][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join3())
[     9.938][MainProcess][INFO] Statistics:
[     9.938][MainProcess][INFO] 	Generated cubes: 31
[     9.938][MainProcess][INFO] 	Attempted programs: 837
[     9.939][MainProcess][INFO] 		Rejected: 4
[     9.939][MainProcess][INFO] 		Failed: 832
[     9.939][MainProcess][INFO] 	Blacklist clauses: 245
[     9.939][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     9.941][MainProcess][DEBUG] 	0: Counter({'union': 782, 'natural_join': 728, 'left_join': 669, 'inner_join': 626, 'anti_join': 369})
[     9.943][MainProcess][DEBUG] 	1: Counter({'filter': 3174})
[     9.943][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     9.945][MainProcess][DEBUG] 	0: Counter({'natural_join': 2413})
[     9.946][MainProcess][DEBUG] 	1: Counter({'filter': 2413})
[     9.947][MainProcess][DEBUG] 	2: Counter({'natural_join3': 497, 'natural_join': 465, 'anti_join': 444, 'filter': 394, 'left_join': 347, 'union': 266})
[     9.947][MainProcess][INFO] Solution found: natural_join3(filter(natural_join(@param1, @param0), type == 'public' & accountID == 'Dave'), @param1, @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/031_1.csv", col_types = cols(channelID = col_integer(),accountID = col_character(),role = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/031_2.csv", col_types = cols(channelID = col_integer(),channelName = col_character(),type = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/031_o.csv", col_types = cols(c1 = col_integer(),c2 = col_character(),c3 = col_integer()))

df3 <- inner_join(input2, input1)
df4 <- df3 %>% filter(type == 'public' & accountID == 'Dave')
df5 <- inner_join(df4, input2) %>% inner_join(input1)
out <- df5 %>% select(c1 = channelID, c2 = accountID, c3 = role) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `channelID` AS `c1`,
       `accountID` AS `c2`,
       `role` AS `c3`
FROM
  (SELECT `LHS`.`channelID` AS `channelID`,
          `LHS`.`channelName` AS `channelName`,
          `LHS`.`type` AS `type`,
          `LHS`.`accountID` AS `accountID`,
          `LHS`.`role` AS `role`
   FROM
     (SELECT `LHS`.`channelID` AS `channelID`,
             `LHS`.`channelName` AS `channelName`,
             `LHS`.`type` AS `type`,
             `LHS`.`accountID` AS `accountID`,
             `LHS`.`role` AS `role`
      FROM
        (SELECT *
         FROM
           (SELECT `LHS`.`channelID` AS `channelID`,
                   `LHS`.`channelName` AS `channelName`,
                   `LHS`.`type` AS `type`,
                   `RHS`.`accountID` AS `accountID`,
                   `RHS`.`role` AS `role`
            FROM `input2` AS `LHS`
            INNER JOIN `input1` AS `RHS` ON (`LHS`.`channelID` = `RHS`.`channelID`))
         WHERE (`type` = 'public'
                AND `accountID` = 'Dave')) AS LHS
      INNER JOIN input2 AS RHS ON (LHS.channelID = RHS.channelID
                                   AND LHS.channelName = RHS.channelName
                                   AND LHS.type = RHS.type)) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.channelID = RHS.channelID
                                AND LHS.accountID = RHS.accountID
                                AND LHS.role = RHS.role))
ORDER BY c1
