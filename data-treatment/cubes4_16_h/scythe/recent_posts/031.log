[     3.342][MainProcess][INFO] Parsing specification...
[     3.347][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.347][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.348][MainProcess][DEBUG] Reading input files...
[     3.357][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_1.csv: ['int64', 'string', 'int64']
[     3.364][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_2.csv: ['int64', 'string', 'string']
[     3.369][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_o.csv: ['int64', 'string', 'int64']
[     3.400][MainProcess][DEBUG] Generating DSL...
[     3.422][MainProcess][INFO] Creating 16 processes
[     3.481][MainProcess][DEBUG] Increasing generator loc to 2
[     3.481][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.482][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.482][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.482][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.482][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.484][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.488][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.491][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.493][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.497][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.502][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.504][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.517][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.518][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.525][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.527][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.713][cube-solver-0][WARNING] There is no solution for current loc (1).
[     3.714][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     3.715][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.744][cube-solver-12][DEBUG] Solving cube (l0 = filter(), l1 = semi_join())
[     3.754][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     3.754][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     3.755][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     3.759][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     3.759][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     3.770][cube-solver-10][DEBUG] Solving cube (l0 = filter([1]), l1 = union())
[     3.803][cube-solver-11][DEBUG] Solving cube (l0 = filter([7]), l1 = intersect())
[     3.815][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([9]))
[     3.824][cube-solver-2][DEBUG] Solving cube (l0 = intersect(), l1 = filter([9]))
[     3.827][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([10]))
[     3.836][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([12]))
[     3.838][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([13]))
[     3.911][cube-solver-14][DEBUG] Solving cube (l0 = filter([15]), l1 = inner_join())
[     3.935][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]))
[     3.947][cube-solver-4][DEBUG] Solving cube (l0 = filter([16]), l1 = natural_join())
[     3.951][cube-solver-7][DEBUG] Solving cube (l0 = filter([16]), l1 = filter([16]))
[     3.960][cube-solver-4][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([16]))
[     3.971][cube-solver-7][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([16]))
[     3.980][cube-solver-13][DEBUG] Solving cube (l0 = filter([16]), l1 = cross_join())
[     3.989][MainProcess][DEBUG] Increasing generator loc to 3
[     3.990][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     4.087][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.120][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     4.121][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([16]))
[     4.132][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     4.133][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     4.200][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     4.509][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join())
[     4.716][cube-solver-9][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = anti_join([15]))
[     4.724][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join3())
[     4.759][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     4.770][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     4.806][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = filter([16]))
[     4.855][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join4())
[     4.869][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = semi_join())
[     4.921][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = left_join())
[     5.248][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = intersect([10]))
[     5.249][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     5.282][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = union())
[     5.810][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = cross_join([2]))
[     5.866][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     6.347][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = inner_join([8]))
[     7.417][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     7.728][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join(), l2 = filter([16]))
[     7.990][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([28]), l2 = filter([16]))
[     8.023][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = union(), l2 = filter([16]))
[     8.031][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter([16]), l2 = left_join())
[     8.032][MainProcess][INFO] Statistics:
[     8.032][MainProcess][INFO] 	Generated cubes: 36
[     8.032][MainProcess][INFO] 	Attempted programs: 1202
[     8.032][MainProcess][INFO] 		Rejected: 3
[     8.032][MainProcess][INFO] 		Failed: 1198
[     8.032][MainProcess][INFO] 	Blacklist clauses: 79
[     8.033][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     8.034][MainProcess][DEBUG] 	0: Counter({'union': 466, 'natural_join': 431, 'left_join': 414, 'inner_join': 399, 'anti_join': 200})
[     8.035][MainProcess][DEBUG] 	1: Counter({'filter': 1910})
[     8.036][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     8.037][MainProcess][DEBUG] 	0: Counter({'natural_join': 2830})
[     8.039][MainProcess][DEBUG] 	1: Counter({'filter': 2790, 'left_join': 40})
[     8.040][MainProcess][DEBUG] 	2: Counter({'filter': 406, 'semi_join': 396, 'natural_join': 388, 'anti_join': 364, 'left_join': 361, 'natural_join3': 357, 'union': 337, 'inner_join': 221})
[     8.040][MainProcess][INFO] Solution found: left_join(filter(natural_join(@param0, @param1), type == 'public' & accountID == 'Dave'), @param1)
[     8.270][cube-solver-8][DEBUG] Found solution with cube (l0 = natural_join(), l1 = union(), l2 = filter([16]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/031_1.csv", col_types = cols(channelID = col_integer(),accountID = col_character(),role = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/031_2.csv", col_types = cols(channelID = col_integer(),channelName = col_character(),type = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/031_o.csv", col_types = cols(c1 = col_integer(),c2 = col_character(),c3 = col_integer()))

df3 <- inner_join(input1, input2)
df4 <- df3 %>% filter(type == 'public' & accountID == 'Dave')
df5 <- left_join(df4, input2)
out <- df5 %>% select(c1 = channelID, c2 = accountID, c3 = role) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `channelID` AS `c1`,
       `accountID` AS `c2`,
       `role` AS `c3`
FROM
  (SELECT `LHS`.`channelID` AS `channelID`,
          `LHS`.`accountID` AS `accountID`,
          `LHS`.`role` AS `role`,
          `LHS`.`channelName` AS `channelName`,
          `LHS`.`type` AS `type`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`channelID` AS `channelID`,
                `LHS`.`accountID` AS `accountID`,
                `LHS`.`role` AS `role`,
                `RHS`.`channelName` AS `channelName`,
                `RHS`.`type` AS `type`
         FROM `input1` AS `LHS`
         INNER JOIN `input2` AS `RHS` ON (`LHS`.`channelID` = `RHS`.`channelID`))
      WHERE (`type` = 'public'
             AND `accountID` = 'Dave')) AS LHS
   LEFT JOIN input2 AS RHS ON (LHS.channelID = RHS.channelID
                               AND LHS.channelName = RHS.channelName
                               AND LHS.type = RHS.type))
ORDER BY c1
