[     3.407][MainProcess][INFO] Parsing specification...
[     3.413][MainProcess][DEBUG] Reading input files...
[     3.423][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_1.csv: ['int64', 'string']
[     3.430][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_2.csv: ['string', 'string']
[     3.436][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_o.csv: ['int64', 'string']
[     3.478][MainProcess][DEBUG] Generating DSL...
[     3.501][MainProcess][INFO] Creating 16 processes
[     3.584][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.584][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.585][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.585][MainProcess][DEBUG] Increasing generator loc to 2
[     3.585][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.585][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     3.585][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.585][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.585][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.585][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.590][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     3.591][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.601][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.606][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.617][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.620][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.631][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.675][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     3.679][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     3.689][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.738][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.738][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     3.739][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.740][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     3.739][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     3.739][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join())
[     3.741][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.743][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3())
[     3.745][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     3.747][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join())
[     3.748][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.748][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     3.748][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     3.748][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.750][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     3.751][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.752][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     3.752][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect())
[     3.754][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     3.758][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([8]))
[     3.766][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join([1]))
[     3.769][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     3.771][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     3.773][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([1]))
[     3.777][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join([2]))
[     3.777][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.778][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.778][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.780][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     3.784][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([10]))
[     3.794][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join([2]))
[     3.797][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     3.799][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     3.801][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([4]), l1 = natural_join([2]))
[     3.807][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join([2]))
[     3.811][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join([2]))
[     3.812][cube-solver-11][DEBUG] Solving cube (l0 = anti_join([5]), l1 = natural_join3())
[     3.817][cube-solver-15][DEBUG] Solving cube (l0 = anti_join([6]), l1 = natural_join4())
[     3.818][cube-solver-11][DEBUG] Solving cube (l0 = anti_join([6]), l1 = anti_join([6]))
[     3.826][cube-solver-15][DEBUG] Solving cube (l0 = anti_join([6]), l1 = left_join([2]))
[     3.829][cube-solver-11][DEBUG] Solving cube (l0 = anti_join([7]), l1 = union())
[     3.882][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join([2]))
[     3.886][cube-solver-9][DEBUG] Found solution with cube (l0 = inner_join(),)
[     3.887][MainProcess][INFO] Statistics:
[     3.888][MainProcess][INFO] 	Generated cubes: 46
[     3.888][MainProcess][INFO] 	Attempted programs: 23
[     3.888][MainProcess][INFO] 		Rejected: 0
[     3.888][MainProcess][INFO] 		Failed: 22
[     3.888][MainProcess][INFO] 	Blacklist clauses: 36
[     3.888][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.888][MainProcess][DEBUG] 	0: Counter({'union': 10, 'inner_join': 3})
[     3.889][MainProcess][INFO] Solution found: inner_join(@param0, @param1, 'item' = 'f2')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/003_1.csv", col_types = cols(ID = col_integer(),item = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/003_2.csv", col_types = cols(f1 = col_character(),f2 = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/003_o.csv", col_types = cols(ID = col_integer(),item = col_character()))

df3 <- inner_join(input1, input2, by=c('item' = 'f2'), suffix = c('', '.other'))
out <- df3 %>% select(ID, item = f1) %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ID,
       f1 AS item
FROM
  (SELECT LHS.ID AS ID,
          LHS.item AS item,
          RHS.f1 AS f1
   FROM input1 AS LHS
   INNER JOIN input2 AS RHS ON (LHS.item = RHS.f2))
ORDER BY ID
