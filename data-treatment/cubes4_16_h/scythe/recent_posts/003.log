[     3.032][MainProcess][INFO] Parsing specification...
[     3.037][MainProcess][DEBUG] Reading input files...
[     3.046][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_1.csv: ['int64', 'string']
[     3.051][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_2.csv: ['string', 'string']
[     3.056][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_o.csv: ['int64', 'string']
[     3.087][MainProcess][DEBUG] Generating DSL...
[     3.105][MainProcess][INFO] Creating 16 processes
[     3.186][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.186][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.186][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.186][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.186][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.186][MainProcess][DEBUG] Increasing generator loc to 2
[     3.186][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.186][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.186][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     3.187][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.191][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     3.195][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.201][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.204][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.206][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.214][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.226][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.266][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     3.276][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     3.280][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     3.280][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.283][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     3.306][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.306][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     3.309][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.312][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.338][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.337][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.338][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     3.338][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.340][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.371][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([1]), l1 = intersect())
[     3.374][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.375][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.378][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union())
[     3.378][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join([2]))
[     3.383][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     3.384][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect())
[     3.385][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join([2]))
[     3.386][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     3.388][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join([8]))
[     3.388][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([3]))
[     3.389][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join([2]))
[     3.392][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     3.392][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     3.394][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([9]))
[     3.394][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join([2]))
[     3.397][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     3.398][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect())
[     3.400][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join([2]))
[     3.400][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     3.402][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([3]))
[     3.403][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join([2]))
[     3.403][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     3.405][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     3.406][cube-solver-12][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join([2]))
[     3.406][cube-solver-15][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join3())
[     3.407][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join4())
[     3.411][cube-solver-15][DEBUG] Solving cube (l0 = anti_join([10]), l1 = anti_join([10]))
[     3.414][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([10]), l1 = left_join([2]))
[     3.420][cube-solver-15][DEBUG] Solving cube (l0 = anti_join([11]), l1 = union())
[     3.428][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join([2]))
[     3.432][cube-solver-14][DEBUG] Solving cube (l0 = anti_join([13]), l1 = intersect())
[     3.489][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join([9]))
[     3.505][cube-solver-4][DEBUG] Solving cube (l0 = anti_join([22]), l1 = semi_join([2]))
[     3.511][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join([2]))
[     3.520][cube-solver-4][DEBUG] Solving cube (l0 = anti_join([22]), l1 = cross_join([2]))
[     3.521][cube-solver-11][DEBUG] Solving cube (l0 = anti_join([22]), l1 = inner_join([12]))
[     3.534][cube-solver-4][DEBUG] Solving cube (l0 = left_join([2]), l1 = natural_join([2]))
[     3.540][cube-solver-11][DEBUG] Solving cube (l0 = left_join([2]), l1 = natural_join3())
[     3.544][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.600][cube-solver-13][DEBUG] Solving cube (l0 = left_join([2]), l1 = anti_join([22]))
[     3.601][cube-solver-4][DEBUG] Solving cube (l0 = left_join([2]), l1 = left_join([2]))
[     3.601][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3())
[     3.601][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]))
[     3.602][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([22]))
[     3.605][cube-solver-8][DEBUG] Solving cube (l0 = left_join([2]), l1 = union())
[     3.607][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join4())
[     3.607][cube-solver-1][DEBUG] Solving cube (l0 = left_join([2]), l1 = intersect([7]))
[     3.611][cube-solver-2][DEBUG] Solving cube (l0 = left_join([2]), l1 = semi_join([2]))
[     3.611][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.615][cube-solver-9][DEBUG] Found solution with cube (l0 = inner_join(),)
[     3.616][MainProcess][INFO] Statistics:
[     3.616][MainProcess][INFO] 	Generated cubes: 59
[     3.616][MainProcess][INFO] 	Attempted programs: 85
[     3.616][MainProcess][INFO] 		Rejected: 2
[     3.616][MainProcess][INFO] 		Failed: 82
[     3.617][MainProcess][INFO] 	Blacklist clauses: 58
[     3.617][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     3.617][MainProcess][DEBUG] 	0: Counter({'union': 44, 'inner_join': 19})
[     3.617][MainProcess][INFO] Solution found: inner_join(@param0, @param1, 'item' = 'f2','f2' = 'f2')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/003_1.csv", col_types = cols(ID = col_integer(),item = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/003_2.csv", col_types = cols(f1 = col_character(),f2 = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/003_o.csv", col_types = cols(ID = col_integer(),item = col_character()))

df3 <- inner_join(input1, input2, by=c('item' = 'f2','f2' = 'f2'), suffix = c('', '.other'))
out <- df3 %>% select(ID, item = f1) %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ID,
       f1 AS item
FROM
  (SELECT LHS.ID AS ID,
          LHS.item AS item,
          RHS.f1 AS f1
   FROM input1 AS LHS
   INNER JOIN input2 AS RHS ON (LHS.item = RHS.f2))
ORDER BY ID
