[     3.092][MainProcess][INFO] Parsing specification...
[     3.099][MainProcess][DEBUG] Reading input files...
[     3.108][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_1.csv: ['int64', 'string']
[     3.113][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_2.csv: ['int64', 'string']
[     3.119][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_o.csv: ['int64', 'string', 'string', 'int64']
[     3.152][MainProcess][DEBUG] Generating DSL...
[     3.202][MainProcess][INFO] Creating 16 processes
[     3.273][MainProcess][DEBUG] Increasing generator loc to 2
[     3.283][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.286][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.288][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.299][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.300][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.300][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.303][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.305][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     3.316][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.318][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     3.321][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.327][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.331][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.337][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.341][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.376][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     4.078][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     4.078][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     4.083][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     4.085][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     4.097][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     4.103][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     4.104][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     4.107][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     4.108][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     4.113][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     4.135][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     4.147][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     4.183][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     4.222][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.231][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     4.240][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     4.267][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     4.397][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     4.407][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     4.924][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]))
[     4.940][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([13]))
[     4.956][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([23]))
[     4.956][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     4.957][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     4.970][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     4.975][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     4.979][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     4.980][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([13]))
[     4.984][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([10]))
[     4.992][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     4.996][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     4.996][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     5.000][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect([4]))
[     5.006][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     5.012][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([13]))
[     5.028][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([23]))
[     5.041][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     5.042][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect([4]))
[     5.046][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     5.050][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     5.054][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join())
[     5.131][cube-solver-12][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join3())
[     5.140][cube-solver-12][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join4())
[     5.154][cube-solver-12][DEBUG] Solving cube (l0 = anti_join([10]), l1 = anti_join([10]))
[     5.167][cube-solver-12][DEBUG] Solving cube (l0 = anti_join([10]), l1 = left_join())
[     5.181][cube-solver-14][DEBUG] Solving cube (l0 = anti_join([10]), l1 = union())
[     5.196][cube-solver-11][DEBUG] Solving cube (l0 = anti_join([10]), l1 = intersect([4]))
[     5.279][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([10]), l1 = semi_join())
[     5.426][cube-solver-14][DEBUG] Solving cube (l0 = anti_join([10]), l1 = cross_join([20]))
[     5.437][cube-solver-12][DEBUG] Solving cube (l0 = anti_join([10]), l1 = inner_join([23]))
[     5.546][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join())
[     5.590][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join([23]))
[     5.670][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join())
[     5.680][cube-solver-13][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join3())
[     5.694][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3())
[     5.702][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join4())
[     5.707][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = anti_join([10]))
[     5.711][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = left_join())
[     5.754][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([10]))
[     5.766][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     5.775][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = union())
[     5.775][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = intersect([4]))
[     5.789][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     5.796][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = semi_join())
[     5.812][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = cross_join([21]))
[     5.911][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     5.928][cube-solver-9][DEBUG] Solving cube (l0 = left_join(), l1 = inner_join([23]))
[     5.953][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = natural_join())
[     5.970][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = natural_join3())
[     5.986][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = natural_join4())
[     5.994][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = anti_join([10]))
[     6.028][cube-solver-6][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect([4]))
[     6.041][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = left_join())
[     6.075][cube-solver-13][DEBUG] Solving cube (l0 = union(), l1 = union())
[     6.099][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = intersect([4]))
[     6.205][cube-solver-7][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     6.217][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = semi_join())
[     6.229][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = cross_join([21]))
[     6.303][cube-solver-13][DEBUG] Solving cube (l0 = union(), l1 = inner_join([23]))
[     6.341][cube-solver-5][DEBUG] Solving cube (l0 = intersect([4]), l1 = natural_join())
[     6.385][cube-solver-6][DEBUG] Solving cube (l0 = intersect([4]), l1 = natural_join3())
[     6.490][cube-solver-11][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join4())
[     6.504][cube-solver-11][DEBUG] Solving cube (l0 = intersect([6]), l1 = anti_join([10]))
[     6.771][cube-solver-10][DEBUG] Solving cube (l0 = intersect([6]), l1 = left_join())
[     6.794][cube-solver-5][DEBUG] Solving cube (l0 = intersect([6]), l1 = union())
[     6.901][cube-solver-3][DEBUG] Solving cube (l0 = intersect([6]), l1 = intersect([6]))
[     6.972][cube-solver-2][DEBUG] Solving cube (l0 = intersect([6]), l1 = semi_join())
[     7.095][cube-solver-0][DEBUG] Solving cube (l0 = intersect([6]), l1 = cross_join([27]))
[     7.126][cube-solver-10][DEBUG] Solving cube (l0 = intersect([6]), l1 = inner_join([23]))
[     7.169][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join())
[     7.304][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join3())
[     7.308][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join4())
[     7.313][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = anti_join([10]))
[     7.330][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = left_join())
[     7.525][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = union())
[     7.632][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = intersect([6]))
[     7.694][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = semi_join())
[     7.895][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = cross_join([28]))
[     8.201][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = inner_join([23]))
[     8.357][cube-solver-2][DEBUG] Solving cube (l0 = cross_join([32]), l1 = natural_join())
[     8.411][cube-solver-11][DEBUG] Solving cube (l0 = cross_join([34]), l1 = natural_join3())
[     8.443][cube-solver-6][DEBUG] Solving cube (l0 = cross_join([39]), l1 = natural_join4())
[     8.507][cube-solver-6][DEBUG] Solving cube (l0 = cross_join([39]), l1 = anti_join([10]))
[     9.303][cube-solver-12][DEBUG] Solving cube (l0 = cross_join([61]), l1 = left_join())
[    11.000][cube-solver-3][DEBUG] Solving cube (l0 = cross_join([141]), l1 = union())
[    12.144][cube-solver-10][DEBUG] Solving cube (l0 = cross_join([222]), l1 = intersect([6]))
[    54.799][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([353]), l1 = semi_join())
[    55.183][cube-solver-9][DEBUG] Solving cube (l0 = cross_join([499]), l1 = cross_join([499]))
[    56.129][cube-solver-13][DEBUG] Solving cube (l0 = cross_join([980]), l1 = inner_join([23]))
[   169.825][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[   171.923][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([23]), l1 = natural_join())
[   179.490][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([23]), l1 = natural_join3())
[   201.218][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([23]), l1 = natural_join4())
[   201.356][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([23]), l1 = anti_join([10]))
[   208.419][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([23]), l1 = left_join())
[   215.970][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([23]), l1 = union())
[   224.459][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([23]), l1 = intersect([6]))
[   229.013][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([23]), l1 = semi_join())
[   232.159][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([23]), l1 = cross_join([2292]))
[   278.605][cube-solver-13][DEBUG] Found solution with cube (l0 = cross_join([980]), l1 = inner_join([23]))
[   278.647][MainProcess][INFO] Statistics:
[   278.648][MainProcess][INFO] 	Generated cubes: 109
[   278.648][MainProcess][INFO] 	Attempted programs: 7688
[   278.648][MainProcess][INFO] 		Rejected: 2006
[   278.649][MainProcess][INFO] 		Failed: 5681
[   278.649][MainProcess][INFO] 	Blacklist clauses: 2331
[   278.649][MainProcess][DEBUG] Printing statistics for good programs of size 1
[   278.679][MainProcess][DEBUG] 	0: Counter({'cross_join': 17280})
[   278.679][MainProcess][DEBUG] Printing statistics for good programs of size 2
[   278.793][MainProcess][DEBUG] 	0: Counter({'cross_join': 208869, 'natural_join': 39091, 'union': 38849, 'left_join': 38311, 'anti_join': 29521, 'semi_join': 26879, 'inner_join': 9264})
[   278.889][MainProcess][DEBUG] 	1: Counter({'cross_join': 186961, 'inner_join': 42027, 'natural_join3': 33900, 'union': 31522, 'natural_join': 31367, 'left_join': 31033, 'semi_join': 19968, 'anti_join': 14016})
[   278.889][MainProcess][INFO] Solution found: inner_join(cross_join(@param1, @param0, ID == ID.other & Name != Company_group), @param0, 'Company_group' = 'Name')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/013_1.csv", col_types = cols(ID = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/013_2.csv", col_types = cols(ID = col_integer(),Company_group = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/013_o.csv", col_types = cols(ID = col_integer(),Name = col_character(),RootName = col_character(),RootId = col_integer()))

df3 <- full_join(input2 %>% mutate(tmp.col=1), input1 %>% mutate(tmp.col=1), by="tmp.col", suffix = c("", ".other")) %>% select(-tmp.col) %>% filter(ID == ID.other & Name != Company_group)
df4 <- inner_join(df3, input1, by=c('Company_group' = 'Name'), suffix = c('', '.other'))
out <- df4 %>% select(ID, Name, RootName = Company_group, RootId = ID.other.other) %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ID,
       Name,
       Company_group AS RootName,
       ID.other.other AS RootId
FROM
  (SELECT LHS.ID AS ID,
          LHS.Company_group AS Company_group,
          LHS.ID.other AS ID.other,
          LHS.Name AS Name,
          RHS.ID AS ID.other.other
   FROM
     (SELECT *
      FROM
        (SELECT ID,
                Company_group,
                ID.other,
                Name
         FROM
           (SELECT LHS.ID AS ID,
                   LHS.Company_group AS Company_group,
                   COALESCE(LHS.tmp.col, RHS.tmp.col) AS tmp.col,
                   RHS.ID AS ID.other,
                   RHS.Name AS Name
            FROM
              (SELECT ID,
                      Company_group,
                      1.0 AS tmp.col
               FROM input2) AS LHS
            FULL JOIN
              (SELECT ID,
                      Name,
                      1.0 AS tmp.col
               FROM input1) AS RHS ON (LHS.tmp.col = RHS.tmp.col)))
      WHERE (ID = ID.other
             AND Name != Company_group)) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.Company_group = RHS.Name))
ORDER BY ID
