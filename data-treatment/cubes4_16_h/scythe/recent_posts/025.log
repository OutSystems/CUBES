[     1.584][MainProcess][INFO] Parsing specification...
[     1.587][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.587][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.587][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.588][MainProcess][DEBUG] Reading input files...
[     1.595][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/025.csv: ['int64', 'float64', 'string']
[     1.601][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/025_o.csv: ['int64', 'float64', 'string']
[     1.626][MainProcess][DEBUG] Generating DSL...
[     1.879][MainProcess][INFO] Creating 16 processes
[     1.955][MainProcess][DEBUG] Increasing generator loc to 3
[     2.242][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.244][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.253][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.254][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.259][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.262][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.269][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.279][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.286][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.286][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.293][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.294][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.297][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.318][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.326][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.345][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     8.241][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     8.251][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     8.280][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     8.353][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[    13.440][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[    13.481][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([4]))
[    13.481][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[    13.484][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([4]), l2 = filter())
[    13.488][cube-solver-6][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join(), l2 = filter())
[    13.497][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([4]), l2 = filter())
[    13.498][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join3(), l2 = filter())
[    13.509][cube-solver-7][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join4(), l2 = filter())
[    13.511][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]), l2 = filter())
[    13.522][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[    13.527][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = natural_join3())
[    13.532][cube-solver-7][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = natural_join())
[    13.548][cube-solver-8][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = natural_join4())
[    13.549][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = filter())
[    13.558][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = summarise([4]))
[    13.559][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = summarise([4]))
[    13.571][cube-solver-8][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([1]), l2 = anti_join())
[    13.576][cube-solver-5][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([1]), l2 = left_join())
[    13.601][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([5]), l2 = filter([2]))
[    13.620][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([3]), l2 = mutate())
[    13.633][cube-solver-12][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter([3]), l2 = union())
[    13.648][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([3]))
[    13.652][cube-solver-14][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([3]), l2 = intersect())
[    13.665][cube-solver-15][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([4]), l2 = semi_join())
[    13.806][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([5]))
[    13.812][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([5]), l2 = summarise([6]))
[    13.834][cube-solver-11][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([5]), l2 = cross_join())
[    13.838][cube-solver-9][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([5]), l2 = mutate())
[    58.476][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    61.088][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    70.441][cube-solver-2][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([181]), l2 = inner_join())
[    73.019][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = anti_join(), l2 = filter([197]))
[   115.015][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise([4]), l1 = natural_join(), l2 = filter())
[   115.025][MainProcess][INFO] Statistics:
[   115.025][MainProcess][INFO] 	Generated cubes: 34
[   115.025][MainProcess][INFO] 	Attempted programs: 1768
[   115.025][MainProcess][INFO] 		Rejected: 1445
[   115.025][MainProcess][INFO] 		Failed: 322
[   115.026][MainProcess][INFO] 	Blacklist clauses: 203
[   115.026][MainProcess][DEBUG] Priting statistics for good programs of size 2
[   115.055][MainProcess][DEBUG] 	0: Counter({'mutate': 13510, 'filter': 11232, 'summarise': 9315})
[   115.076][MainProcess][DEBUG] 	1: Counter({'filter': 22827, 'mutate': 6240, 'summarise': 4992})
[   115.076][MainProcess][DEBUG] Priting statistics for good programs of size 3
[   115.120][MainProcess][DEBUG] 	0: Counter({'summarise': 99457})
[   115.163][MainProcess][DEBUG] 	1: Counter({'filter': 83285, 'natural_join': 12541, 'anti_join': 3634})
[   115.209][MainProcess][DEBUG] 	2: Counter({'filter': 22903, 'natural_join3': 11375, 'left_join': 11127, 'union': 11079, 'natural_join': 11004, 'mutate': 10055, 'semi_join': 8214, 'anti_join': 7116, 'inner_join': 4383, 'summarise': 2209})
[   115.210][MainProcess][INFO] Solution found: filter(natural_join(@param0, summarise(@param0, minid = min(id), gallery_id)), is.na(gallery_id) | minid == id)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/025.csv", col_types = cols(id = col_integer(),gallery_id = col_double(),path = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/025_o.csv", col_types = cols(id = col_integer(),gallery_id = col_double(),path = col_character()))

df2 <- input1 %>% group_by(gallery_id) %>% summarise(minid = min(id)) %>% ungroup()
df3 <- inner_join(input1, df2)
df4 <- df3 %>% filter(is.na(gallery_id) | minid == id)
out <- df4 %>% select(id, gallery_id, path) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       gallery_id,
       PATH
FROM
  (SELECT LHS.id AS id,
          LHS.gallery_id AS gallery_id,
          LHS.path AS PATH,
          RHS.minid AS minid
   FROM input1 AS LHS
   INNER JOIN
     (SELECT gallery_id,
             MIN(id) AS minid
      FROM input1
      GROUP BY gallery_id) AS RHS ON (LHS.gallery_id = RHS.gallery_id))
WHERE (((gallery_id) IS NULL)
       OR minid = id)
ORDER BY id
