[     1.590][MainProcess][INFO] Parsing specification...
[     1.594][MainProcess][DEBUG] Reading input files...
[     1.602][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/044_1.csv: ['int64', 'string']
[     1.607][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/044_2.csv: ['string', 'int64']
[     1.613][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/044_o.csv: ['int64', 'string']
[     1.643][MainProcess][DEBUG] Generating DSL...
[     1.656][MainProcess][INFO] Creating 16 processes
[     1.719][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.719][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     1.719][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     1.719][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.719][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     1.719][MainProcess][DEBUG] Increasing generator loc to 2
[     1.719][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     1.719][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     1.719][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     1.722][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     1.727][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.728][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     1.734][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.745][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.746][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.748][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.772][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     1.773][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     1.775][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     1.783][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     1.790][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.813][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     1.813][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     1.814][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     1.814][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     1.815][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.815][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.816][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     1.816][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     1.837][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join())
[     1.839][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     1.842][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([1]))
[     1.845][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     1.847][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     1.848][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect())
[     1.850][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     1.852][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     1.855][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([3]))
[     1.858][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([2]))
[     1.859][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     1.861][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     1.862][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     1.863][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     1.865][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([2]))
[     1.868][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     1.870][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     1.872][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect())
[     1.873][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     1.874][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.875][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([3]))
[     1.879][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     1.881][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     1.883][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     1.885][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([2]), l1 = natural_join())
[     1.887][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     1.955][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     1.961][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect([2]))
[     1.965][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join([5]))
[     1.996][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join())
[     2.010][cube-solver-15][DEBUG] Solving cube (l0 = anti_join([6]), l1 = natural_join3())
[     2.015][cube-solver-15][DEBUG] Solving cube (l0 = anti_join([6]), l1 = natural_join4())
[     2.021][cube-solver-15][DEBUG] Solving cube (l0 = anti_join([6]), l1 = anti_join([6]))
[     2.027][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3())
[     2.028][cube-solver-15][DEBUG] Solving cube (l0 = anti_join([6]), l1 = left_join())
[     2.031][cube-solver-2][DEBUG] Solving cube (l0 = anti_join([6]), l1 = union())
[     2.038][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     2.043][cube-solver-7][DEBUG] Solving cube (l0 = anti_join([6]), l1 = intersect([5]))
[     2.050][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     2.093][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.113][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     2.139][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     2.174][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.236][cube-solver-6][DEBUG] Solving cube (l0 = anti_join([10]), l1 = semi_join())
[     2.241][cube-solver-5][DEBUG] Solving cube (l0 = anti_join([10]), l1 = inner_join([10]))
[     2.314][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([10]), l1 = cross_join([2]))
[     2.359][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join())
[     2.388][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join3())
[     2.540][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join4())
[     2.544][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = anti_join([10]))
[     2.593][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     2.681][cube-solver-14][DEBUG] Solving cube (l0 = left_join(), l1 = union())
[     2.767][cube-solver-13][DEBUG] Solving cube (l0 = left_join(), l1 = intersect([6]))
[     2.804][cube-solver-9][DEBUG] Solving cube (l0 = left_join(), l1 = left_join())
[     2.890][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = semi_join())
[     2.900][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = cross_join([2]))
[     3.107][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = inner_join([23]))
[     3.243][cube-solver-10][DEBUG] Solving cube (l0 = union(), l1 = natural_join())
[     3.280][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = natural_join3())
[     3.414][cube-solver-12][DEBUG] Solving cube (l0 = union(), l1 = natural_join4())
[     3.419][cube-solver-12][DEBUG] Solving cube (l0 = union(), l1 = anti_join([10]))
[     3.580][cube-solver-13][DEBUG] Solving cube (l0 = union(), l1 = left_join())
[     3.782][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = union())
[     4.020][cube-solver-15][DEBUG] Solving cube (l0 = union(), l1 = intersect([6]))
[     4.084][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = semi_join())
[     4.199][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = cross_join([2]))
[     4.302][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = inner_join([23]))
[     4.350][cube-solver-10][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join())
[     4.464][cube-solver-7][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join3())
[     4.466][cube-solver-9][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join4())
[     4.475][cube-solver-9][DEBUG] Solving cube (l0 = intersect([6]), l1 = anti_join([10]))
[     4.507][cube-solver-14][DEBUG] Solving cube (l0 = intersect([7]), l1 = left_join())
[     4.798][cube-solver-10][DEBUG] Solving cube (l0 = intersect([8]), l1 = union())
[     4.919][cube-solver-14][DEBUG] Solving cube (l0 = intersect([8]), l1 = intersect([8]))
[     4.977][cube-solver-4][DEBUG] Solving cube (l0 = intersect([8]), l1 = semi_join())
[     5.011][cube-solver-13][DEBUG] Solving cube (l0 = intersect([8]), l1 = cross_join([2]))
[     5.045][cube-solver-15][DEBUG] Solving cube (l0 = intersect([8]), l1 = inner_join([23]))
[     5.121][cube-solver-13][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join())
[     5.168][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join3())
[     5.249][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join4())
[     5.253][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = anti_join([10]))
[     5.302][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = left_join())
[     5.391][cube-solver-10][DEBUG] Solving cube (l0 = semi_join(), l1 = union())
[     5.568][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = intersect([8]))
[     5.603][cube-solver-14][DEBUG] Solving cube (l0 = semi_join(), l1 = semi_join())
[     5.984][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = cross_join([2]))
[     6.071][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = inner_join([23]))
[     6.097][cube-solver-13][DEBUG] Solving cube (l0 = cross_join([2]), l1 = natural_join())
[     6.123][cube-solver-0][DEBUG] Solving cube (l0 = cross_join([4]), l1 = natural_join3())
[     6.125][cube-solver-13][DEBUG] Solving cube (l0 = cross_join([4]), l1 = natural_join4())
[     6.129][cube-solver-13][DEBUG] Solving cube (l0 = cross_join([4]), l1 = anti_join([10]))
[     6.131][cube-solver-0][DEBUG] Solving cube (l0 = cross_join([4]), l1 = left_join())
[     6.137][cube-solver-0][DEBUG] Solving cube (l0 = cross_join([4]), l1 = union())
[     6.141][cube-solver-0][DEBUG] Solving cube (l0 = cross_join([4]), l1 = intersect([8]))
[     6.141][cube-solver-13][DEBUG] Solving cube (l0 = cross_join([4]), l1 = semi_join())
[     6.146][cube-solver-13][DEBUG] Solving cube (l0 = cross_join([4]), l1 = cross_join([4]))
[     6.148][cube-solver-0][DEBUG] Solving cube (l0 = cross_join([4]), l1 = inner_join([23]))
[     6.155][cube-solver-13][DEBUG] Solving cube (l0 = inner_join([23]), l1 = natural_join())
[     6.161][cube-solver-0][DEBUG] Solving cube (l0 = inner_join([23]), l1 = natural_join3())
[     6.207][cube-solver-14][DEBUG] Solving cube (l0 = inner_join([23]), l1 = natural_join4())
[     6.227][cube-solver-14][DEBUG] Solving cube (l0 = inner_join([23]), l1 = anti_join([10]))
[     6.358][cube-solver-3][DEBUG] Solving cube (l0 = inner_join([26]), l1 = left_join())
[     6.384][cube-solver-6][DEBUG] Solving cube (l0 = inner_join([27]), l1 = union())
[     6.399][cube-solver-10][DEBUG] Solving cube (l0 = inner_join([27]), l1 = intersect([8]))
[     6.453][cube-solver-14][DEBUG] Found solution with cube (l0 = inner_join([23]), l1 = anti_join([10]))
[     6.454][MainProcess][INFO] Statistics:
[     6.455][MainProcess][INFO] 	Generated cubes: 107
[     6.455][MainProcess][INFO] 	Attempted programs: 1053
[     6.455][MainProcess][INFO] 		Rejected: 457
[     6.455][MainProcess][INFO] 		Failed: 595
[     6.455][MainProcess][INFO] 	Blacklist clauses: 49
[     6.455][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     6.456][MainProcess][DEBUG] 	0: Counter({'inner_join': 68, 'union': 24, 'natural_join': 24, 'left_join': 24, 'anti_join': 16, 'semi_join': 8})
[     6.456][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     6.459][MainProcess][DEBUG] 	0: Counter({'left_join': 1533, 'union': 1404, 'natural_join': 900, 'anti_join': 804, 'semi_join': 615, 'intersect': 341, 'inner_join': 82})
[     6.461][MainProcess][DEBUG] 	1: Counter({'inner_join': 1442, 'natural_join3': 937, 'union': 785, 'left_join': 746, 'natural_join': 676, 'anti_join': 653, 'semi_join': 440})
[     6.462][MainProcess][INFO] Solution found: anti_join(@param0, inner_join(@param0, @param1, 'OriginalID' = 'OriginalID','Area' = 'Part'), 'Area', 'OriginalID')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/044_1.csv", col_types = cols(OriginalID = col_integer(),Area = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/044_2.csv", col_types = cols(Part = col_character(),OriginalID = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/044_o.csv", col_types = cols(OriginalID = col_integer(),Area = col_character()))

df3 <- inner_join(input1, input2, by=c('OriginalID' = 'OriginalID','Area' = 'Part'), suffix = c('', '.other'))
df4 <- anti_join(input1, df3, by=c('Area', 'OriginalID'))
out <- df4 %>% select(OriginalID, Area) %>% arrange(OriginalID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT OriginalID,
       Area
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT LHS.OriginalID AS OriginalID,
                  LHS.Area AS Area
           FROM input1 AS LHS
           INNER JOIN input2 AS RHS ON (LHS.OriginalID = RHS.OriginalID
                                        AND LHS.Area = RHS.Part)) AS RHS
        WHERE (LHS.Area = RHS.Area
               AND LHS.OriginalID = RHS.OriginalID) ))
ORDER BY OriginalID
