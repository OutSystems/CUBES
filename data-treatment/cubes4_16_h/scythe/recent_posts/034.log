[     3.414][MainProcess][INFO] Parsing specification...
[     3.425][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.426][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.427][MainProcess][DEBUG] Reading input files...
[     3.456][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/034.csv: ['string', 'datetime64[ns]', 'datetime64[ns]']
[     3.464][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/034_o.csv: ['string', 'datetime64[ns]', 'datetime64[ns]']
[     3.507][MainProcess][DEBUG] Generating DSL...
[     3.688][MainProcess][INFO] Creating 16 processes
[     3.759][MainProcess][DEBUG] Increasing generator loc to 2
[     3.908][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.910][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.917][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.917][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.925][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.929][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.932][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.933][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.937][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.939][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.944][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.950][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.956][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.969][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     4.012][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     4.082][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     7.125][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     7.281][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     7.566][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     7.701][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[    10.266][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[    10.309][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[    10.324][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[    10.333][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[    10.336][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[    10.342][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[    10.347][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    10.348][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[    10.343][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[    10.362][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[    10.369][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[    10.371][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[    10.382][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[    10.398][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[    10.399][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[    10.406][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[    10.417][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[    10.418][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[    10.420][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[    10.438][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[    10.445][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[    10.446][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    10.452][cube-solver-2][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[    10.459][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[    10.467][cube-solver-7][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[    10.525][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[    10.570][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[    10.592][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[    10.688][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[    10.865][cube-solver-10][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[    10.923][cube-solver-3][DEBUG] Solving cube (l0 = cross_join([2]), l1 = mutate())
[    10.964][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[    10.989][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[    10.992][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[    11.014][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    11.017][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    11.052][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[    11.092][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[    11.412][cube-solver-5][DEBUG] Found solution with cube (l0 = mutate(), l1 = filter())
[    11.430][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[    11.433][MainProcess][INFO] Statistics:
[    11.433][MainProcess][INFO] 	Generated cubes: 43
[    11.433][MainProcess][INFO] 	Attempted programs: 63
[    11.433][MainProcess][INFO] 		Rejected: 40
[    11.433][MainProcess][INFO] 		Failed: 22
[    11.433][MainProcess][INFO] 	Blacklist clauses: 56
[    11.433][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    11.433][MainProcess][DEBUG] 	0: Counter({'mutate': 48, 'summarise': 36})
[    11.434][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    11.434][MainProcess][DEBUG] 	0: Counter({'summarise': 604, 'mutate': 219, 'left_join': 84, 'union': 84, 'semi_join': 84})
[    11.434][MainProcess][DEBUG] 	1: Counter({'mutate': 168, 'natural_join': 168, 'summarise': 144, 'left_join': 122, 'filter': 106, 'cross_join': 104, 'union': 103, 'anti_join': 88, 'inner_join': 72})
[    11.434][MainProcess][INFO] Solution found: filter(mutate(@param0, maxDATE_UPDATE = max(DATE_UPDATE)), maxDATE_UPDATE <= DATE_UPDATE)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/034.csv", col_types = cols(MATERIAL = col_character(),DISCO_DATE = col_character(),DATE_UPDATE = col_character()))
input1$DISCO_DATE <- ymd(input1$DISCO_DATE)
input1$DATE_UPDATE <- ymd(input1$DATE_UPDATE)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/034_o.csv", col_types = cols(c1 = col_character(),c2 = col_character(),c3 = col_character()))
expected_output$c2 <- ymd(expected_output$c2)
expected_output$c3 <- ymd(expected_output$c3)

df2 <- input1 %>% mutate(maxDATE_UPDATE = max(DATE_UPDATE))
df3 <- df2 %>% filter(maxDATE_UPDATE <= DATE_UPDATE)
out <- df3 %>% select(c1 = MATERIAL, c2 = DISCO_DATE, c3 = DATE_UPDATE) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT MATERIAL AS c1,
       DISCO_DATE AS c2,
       DATE_UPDATE AS c3
FROM
  (SELECT MATERIAL,
          DISCO_DATE,
          DATE_UPDATE,
          MAX(DATE_UPDATE) OVER () AS maxDATE_UPDATE
   FROM input1)
WHERE (maxDATE_UPDATE <= DATE_UPDATE)
ORDER BY c1
