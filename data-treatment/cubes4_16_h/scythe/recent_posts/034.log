[     3.435][MainProcess][INFO] Parsing specification...
[     3.441][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.441][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.443][MainProcess][DEBUG] Reading input files...
[     3.456][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/034.csv: ['string', 'datetime64[ns]', 'datetime64[ns]']
[     3.465][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/034_o.csv: ['string', 'datetime64[ns]', 'datetime64[ns]']
[     3.523][MainProcess][DEBUG] Generating DSL...
[     3.557][MainProcess][INFO] Creating 16 processes
[     3.640][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.640][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.641][MainProcess][DEBUG] Increasing generator loc to 2
[     3.642][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.642][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.643][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.647][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.651][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.656][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.660][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.661][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.665][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.673][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.674][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.676][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.697][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.710][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.773][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.854][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     3.932][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     3.935][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     3.935][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     3.937][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     3.937][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     3.938][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     3.938][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     3.940][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     3.941][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     3.941][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     3.944][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     3.951][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.953][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     3.962][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     3.965][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.967][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.969][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     3.970][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     3.972][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     4.009][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     4.016][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     4.016][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     4.018][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     4.020][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     4.057][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     4.062][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     4.189][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     4.248][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.258][cube-solver-9][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     4.278][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     4.343][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     4.343][cube-solver-6][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[     4.405][cube-solver-3][DEBUG] Solving cube (l0 = cross_join([1]), l1 = mutate())
[     4.407][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     4.427][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     4.429][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     4.431][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     4.446][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     4.467][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     4.477][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     4.536][cube-solver-0][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     4.568][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[     4.733][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     4.829][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     4.968][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     5.039][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join([1]))
[     5.046][cube-solver-7][DEBUG] Found solution with cube (l0 = mutate(), l1 = filter())
[     5.047][MainProcess][INFO] Statistics:
[     5.048][MainProcess][INFO] 	Generated cubes: 46
[     5.048][MainProcess][INFO] 	Attempted programs: 90
[     5.048][MainProcess][INFO] 		Rejected: 43
[     5.048][MainProcess][INFO] 		Failed: 46
[     5.048][MainProcess][INFO] 	Blacklist clauses: 1
[     5.048][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     5.049][MainProcess][DEBUG] 	0: Counter({'mutate': 48, 'summarise': 36})
[     5.049][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     5.049][MainProcess][DEBUG] 	0: Counter({'summarise': 738, 'mutate': 305, 'left_join': 84, 'union': 84, 'semi_join': 79})
[     5.050][MainProcess][DEBUG] 	1: Counter({'natural_join': 193, 'mutate': 168, 'anti_join': 167, 'filter': 144, 'summarise': 139, 'left_join': 135, 'union': 127, 'semi_join': 126, 'inner_join': 91})
[     5.050][MainProcess][INFO] Solution found: filter(mutate(@param0, maxDATE_UPDATE = max(DATE_UPDATE)), maxDATE_UPDATE <= DATE_UPDATE)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/034.csv", col_types = cols(MATERIAL = col_character(),DISCO_DATE = col_character(),DATE_UPDATE = col_character()))
input1$DISCO_DATE <- ymd(input1$DISCO_DATE)
input1$DATE_UPDATE <- ymd(input1$DATE_UPDATE)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/034_o.csv", col_types = cols(c1 = col_character(),c2 = col_character(),c3 = col_character()))
expected_output$c2 <- ymd(expected_output$c2)
expected_output$c3 <- ymd(expected_output$c3)

df2 <- input1 %>% mutate(maxDATE_UPDATE = max(DATE_UPDATE))
df3 <- df2 %>% filter(maxDATE_UPDATE <= DATE_UPDATE)
out <- df3 %>% select(c1 = MATERIAL, c2 = DISCO_DATE, c3 = DATE_UPDATE) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT MATERIAL AS c1,
       DISCO_DATE AS c2,
       DATE_UPDATE AS c3
FROM
  (SELECT MATERIAL,
          DISCO_DATE,
          DATE_UPDATE,
          MAX(DATE_UPDATE) OVER () AS maxDATE_UPDATE
   FROM input1)
WHERE (maxDATE_UPDATE <= DATE_UPDATE)
ORDER BY c1
