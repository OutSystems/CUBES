[     1.590][MainProcess][INFO] Parsing specification...
[     1.593][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.593][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.593][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.594][MainProcess][DEBUG] Reading input files...
[     1.603][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/005.csv: ['int64', 'int64', 'int64', 'datetime64[ns]']
[     1.609][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/005_o.csv: ['int64', 'int64', 'int64', 'datetime64[ns]']
[     1.641][MainProcess][DEBUG] Generating DSL...
[     1.694][MainProcess][INFO] Creating 16 processes
[     1.766][MainProcess][DEBUG] Increasing generator loc to 3
[     1.780][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.786][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.792][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.795][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.797][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.800][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.802][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.808][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.814][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.819][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.822][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.825][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.827][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.832][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.836][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.898][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.891][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.892][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.898][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.905][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     4.001][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.164][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     4.167][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]), l2 = filter())
[     4.171][cube-solver-6][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join3(), l2 = filter())
[     4.176][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join4(), l2 = filter())
[     4.176][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]), l2 = filter())
[     4.179][cube-solver-6][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]), l2 = filter())
[     4.182][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = natural_join())
[     4.186][cube-solver-8][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = natural_join3())
[     4.188][cube-solver-6][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = natural_join4())
[     4.190][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]), l2 = filter())
[     4.195][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise([3]))
[     4.195][cube-solver-6][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = summarise([3]))
[     4.197][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([3]))
[     4.200][cube-solver-9][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = anti_join())
[     4.200][cube-solver-12][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = filter())
[     4.203][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = left_join())
[     4.205][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[     4.205][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = mutate())
[     4.211][cube-solver-7][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([2]), l2 = union())
[     4.213][cube-solver-14][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([2]), l2 = intersect())
[     4.220][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([2]))
[     4.227][cube-solver-11][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([2]), l2 = semi_join())
[     4.250][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]), l2 = mutate())
[     4.259][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([2]), l2 = cross_join())
[     4.284][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([2]))
[     4.293][cube-solver-15][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([3]), l2 = mutate())
[     4.340][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([3]), l2 = summarise([4]))
[     4.351][cube-solver-5][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([3]), l2 = inner_join())
[     6.475][cube-solver-1][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join(), l2 = filter([34]))
[    14.795][cube-solver-11][DEBUG] Found solution with cube (l0 = summarise([4]), l1 = filter([2]), l2 = semi_join())
[    14.797][MainProcess][INFO] Statistics:
[    14.797][MainProcess][INFO] 	Generated cubes: 33
[    14.798][MainProcess][INFO] 	Attempted programs: 319
[    14.798][MainProcess][INFO] 		Rejected: 157
[    14.798][MainProcess][INFO] 		Failed: 161
[    14.798][MainProcess][INFO] 	Blacklist clauses: 38
[    14.798][MainProcess][DEBUG] Priting statistics for good programs of size 2
[    14.801][MainProcess][DEBUG] 	0: Counter({'mutate': 1450, 'filter': 1402})
[    14.803][MainProcess][DEBUG] 	1: Counter({'filter': 1451, 'mutate': 1402})
[    14.803][MainProcess][DEBUG] Priting statistics for good programs of size 3
[    14.807][MainProcess][DEBUG] 	0: Counter({'summarise': 8679})
[    14.811][MainProcess][DEBUG] 	1: Counter({'filter': 7668, 'natural_join': 1011})
[    14.815][MainProcess][DEBUG] 	2: Counter({'left_join': 1230, 'union': 1222, 'natural_join3': 1206, 'natural_join': 1142, 'inner_join': 1139, 'filter': 1011, 'semi_join': 913, 'anti_join': 528, 'mutate': 288})
[    14.815][MainProcess][INFO] Solution found: semi_join(@param0, filter(summarise(@param0, event_id = max(event_id), prim_cid), event_id <= 17))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/005.csv", col_types = cols(g_event_id = col_integer(),prim_cid = col_integer(),event_id = col_integer(),event_time = col_character()))
input1$event_time <- dmy(input1$event_time)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/005_o.csv", col_types = cols(g_event_id = col_integer(),prim_cid = col_integer(),event_id = col_integer(),event_time = col_character()))
expected_output$event_time <- dmy(expected_output$event_time)

df2 <- input1 %>% group_by(prim_cid) %>% summarise(event_id = max(event_id)) %>% ungroup()
df3 <- df2 %>% filter(event_id <= 17)
df4 <- semi_join(input1, df3)
out <- df4 %>% select(g_event_id, prim_cid, event_id, event_time) %>% arrange(g_event_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT g_event_id,
       prim_cid,
       event_id,
       event_time
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT prim_cid,
                     MAX(event_id) AS event_id
              FROM input1
              GROUP BY prim_cid)
           WHERE (event_id <= 17.0)) AS RHS
        WHERE (LHS.prim_cid = RHS.prim_cid
               AND LHS.event_id = RHS.event_id) ))
ORDER BY g_event_id
