[     1.600][MainProcess][INFO] Parsing specification...
[     1.604][MainProcess][DEBUG] Reading input files...
[     1.608][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/022_2.csv: ['int64', 'int64']
[     1.611][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/022_o.csv: ['int64']
[     1.635][MainProcess][DEBUG] Generating DSL...
[     2.582][MainProcess][INFO] Creating 16 processes
[     2.656][MainProcess][DEBUG] Increasing generator loc to 4
[     3.827][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.837][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.849][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.858][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.868][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.869][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.869][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.874][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.874][cube-solver-14][DEBUG] Initialising process for 4 lines of code.
[     3.874][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.879][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.879][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.882][cube-solver-13][DEBUG] Initialising process for 4 lines of code.
[     3.895][cube-solver-12][DEBUG] Initialising process for 4 lines of code.
[     3.900][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.914][cube-solver-15][DEBUG] Initialising process for 4 lines of code.
[   130.668][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[   131.241][cube-solver-0][DEBUG] Initialising process for 4 lines of code.
[   131.525][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = summarise(), l2 = filter())
[   132.229][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = mutate())
[   132.488][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = summarise())
[   132.526][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[   132.535][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = summarise())
[   132.626][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = summarise())
[   133.071][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = mutate(), l2 = filter())
[   133.103][cube-solver-4][DEBUG] Initialising process for 4 lines of code.
[   133.231][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = mutate())
[   133.416][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[   133.419][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = mutate(), l2 = filter())
[   133.459][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = mutate())
[   135.485][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[   135.487][MainProcess][INFO] Statistics:
[   135.488][MainProcess][INFO] 	Generated cubes: 18
[   135.488][MainProcess][INFO] 	Attempted programs: 30
[   135.488][MainProcess][INFO] 		Rejected: 15
[   135.488][MainProcess][INFO] 		Failed: 14
[   135.488][MainProcess][INFO] 	Blacklist clauses: 0
[   135.488][MainProcess][DEBUG] Printing statistics for good programs of size 3
[   135.489][MainProcess][DEBUG] 	0: Counter({'mutate': 444, 'filter': 329, 'summarise': 242})
[   135.490][MainProcess][DEBUG] 	1: Counter({'mutate': 466, 'filter': 424, 'summarise': 125})
[   135.491][MainProcess][DEBUG] 	2: Counter({'mutate': 441, 'summarise': 312, 'filter': 262})
[   135.491][MainProcess][INFO] Solution found: mutate(filter(summarise(@param0, n = n(), c1), n >= 3 | n >= c1), c1 = max(c1))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/022_2.csv", col_types = cols(c1 = col_integer(),c2 = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/022_o.csv", col_types = cols(c3 = col_integer()))

df2 <- input1 %>% group_by(c1) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n >= 3 | n >= c1)
df4 <- df3 %>% mutate(c1 = max(c1))
out <- df4 %>% select(c3 = c1) %>% distinct() %>% arrange(c3)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT MAX(c1) OVER () AS c3
FROM
  (SELECT c1,
          COUNT() AS n
   FROM input1
   GROUP BY c1)
WHERE (n >= 3.0
       OR n >= c1)
ORDER BY c3
