[     8.693][MainProcess][INFO] Parsing specification...
[     8.701][MainProcess][DEBUG] Reading input files...
[     8.713][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/040.csv: ['int64', 'int64', 'string', 'string', 'string']
[     8.722][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/040_o.csv: ['int64', 'int64', 'string', 'string', 'string']
[     8.795][MainProcess][DEBUG] Generating DSL...
[     8.851][MainProcess][INFO] Creating 16 processes
[     8.937][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     8.938][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     8.938][MainProcess][DEBUG] Increasing generator loc to 3
[     8.940][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     8.945][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     8.947][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     8.951][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     8.954][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     8.958][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     8.963][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     8.966][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     8.970][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     8.974][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     8.979][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     8.980][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     8.991][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     9.026][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     9.688][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     9.693][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     9.703][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     9.751][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     9.756][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     9.768][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[    10.391][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[    10.396][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[    10.398][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[    10.400][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[    10.401][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[    10.402][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[    10.405][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[    10.407][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[    10.411][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[    10.415][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[    10.423][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[    10.425][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[    10.434][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[    10.442][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[    10.450][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[    10.478][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[    10.483][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[    10.485][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[    10.493][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = intersect())
[    10.509][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[    10.511][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[    10.518][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = semi_join())
[    10.519][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = cross_join())
[    10.597][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[    10.603][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = mutate())
[    10.662][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    10.691][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([2]), l2 = summarise())
[    10.700][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = filter([2]))
[    11.305][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter([4]))
[    11.404][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter([4]))
[    11.414][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = left_join(), l2 = filter([4]))
[    11.861][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = union(), l2 = filter([5]))
[    12.149][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = inner_join())
[    16.715][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = intersect(), l2 = filter([5]))
[    26.064][cube-solver-12][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[    26.066][MainProcess][INFO] Statistics:
[    26.066][MainProcess][INFO] 	Generated cubes: 37
[    26.066][MainProcess][INFO] 	Attempted programs: 927
[    26.066][MainProcess][INFO] 		Rejected: 516
[    26.066][MainProcess][INFO] 		Failed: 410
[    26.066][MainProcess][INFO] 	Blacklist clauses: 5
[    26.066][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    26.068][MainProcess][DEBUG] 	0: Counter({'mutate': 1871})
[    26.070][MainProcess][DEBUG] 	1: Counter({'filter': 1871})
[    26.070][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    26.078][MainProcess][DEBUG] 	0: Counter({'summarise': 19131})
[    26.087][MainProcess][DEBUG] 	1: Counter({'filter': 12666, 'natural_join': 1654, 'left_join': 1646, 'union': 1604, 'anti_join': 1561})
[    26.095][MainProcess][DEBUG] 	2: Counter({'filter': 6465, 'cross_join': 1806, 'natural_join': 1757, 'natural_join3': 1747, 'left_join': 1702, 'union': 1673, 'inner_join': 1539, 'semi_join': 1482, 'anti_join': 961})
[    26.096][MainProcess][INFO] Solution found: anti_join(@param0, filter(summarise(@param0, n_distinct = n_distinct(action), first_name, last_name), n_distinct < 2), 'first_name', 'last_name')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/040.csv", col_types = cols(id = col_integer(),timestamp = col_integer(),first_name = col_character(),last_name = col_character(),action = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/040_o.csv", col_types = cols(id = col_integer(),timestamp = col_integer(),first_name = col_character(),last_name = col_character(),action = col_character()))

df2 <- input1 %>% group_by(first_name, last_name) %>% summarise(n_distinct = n_distinct(action)) %>% ungroup()
df3 <- df2 %>% filter(n_distinct < 2)
df4 <- anti_join(input1, df3, by=c('first_name', 'last_name'))
out <- df4 %>% select(id, timestamp, first_name, last_name, action) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       TIMESTAMP,
       first_name,
       last_name,
       action
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT first_name,
                     last_name,
                     COUNT(DISTINCT action) AS n_distinct
              FROM input1
              GROUP BY first_name,
                       last_name)
           WHERE (n_distinct < 2.0)) AS RHS
        WHERE (LHS.first_name = RHS.first_name
               AND LHS.last_name = RHS.last_name) ))
ORDER BY id
