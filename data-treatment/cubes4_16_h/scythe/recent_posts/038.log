[     3.320][MainProcess][INFO] Parsing specification...
[     3.332][MainProcess][DEBUG] Reading input files...
[     3.346][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_1.csv: ['float64', 'int64']
[     3.352][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_2.csv: ['float64', 'int64']
[     3.358][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_o.csv: ['float64', 'int64', 'float64']
[     3.392][MainProcess][DEBUG] Generating DSL...
[     3.409][MainProcess][INFO] Creating 16 processes
[     3.471][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.471][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.471][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.471][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.471][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.471][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.472][MainProcess][DEBUG] Increasing generator loc to 2
[     3.471][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.472][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.480][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     3.484][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     3.488][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.500][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.500][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.503][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.517][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.517][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.528][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     3.533][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.535][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.541][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     3.547][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     3.561][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.569][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     3.569][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     3.577][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.578][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     3.580][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.586][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.588][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.599][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.619][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join())
[     3.622][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([1]))
[     3.625][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     3.627][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     3.629][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect())
[     3.630][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     3.632][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     3.633][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect())
[     3.635][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([5]))
[     3.641][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     3.642][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     3.644][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     3.646][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([1]))
[     3.649][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     3.650][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     3.652][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect())
[     3.653][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     3.655][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     3.658][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([6]))
[     3.665][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     3.667][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     3.669][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     3.671][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([2]), l1 = natural_join())
[     3.681][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     3.694][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join([8]))
[     3.731][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     3.738][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([2]))
[     3.747][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     3.749][cube-solver-7][DEBUG] Solving cube (l0 = anti_join([9]), l1 = natural_join3())
[     3.752][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     3.758][cube-solver-7][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join4())
[     3.758][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.769][cube-solver-7][DEBUG] Solving cube (l0 = anti_join([10]), l1 = left_join())
[     3.772][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join())
[     3.802][cube-solver-4][DEBUG] Found solution with cube (l0 = left_join(),)
[     3.803][MainProcess][INFO] Statistics:
[     3.803][MainProcess][INFO] 	Generated cubes: 45
[     3.804][MainProcess][INFO] 	Attempted programs: 20
[     3.804][MainProcess][INFO] 		Rejected: 7
[     3.804][MainProcess][INFO] 		Failed: 12
[     3.804][MainProcess][INFO] 	Blacklist clauses: 23
[     3.804][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.804][MainProcess][DEBUG] 	0: Counter({'union': 14, 'natural_join': 13, 'left_join': 13, 'inner_join': 8})
[     3.805][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.805][MainProcess][DEBUG] 	0: Counter({'natural_join': 16, 'anti_join': 1})
[     3.805][MainProcess][DEBUG] 	1: Counter({'union': 9, 'inner_join': 4, 'left_join': 2, 'natural_join': 1, 'semi_join': 1})
[     3.805][MainProcess][INFO] Solution found: left_join(@param1, @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/038_1.csv", col_types = cols(Date = col_double(),Sold = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/038_2.csv", col_types = cols(Date = col_double(),Tapped = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/038_o.csv", col_types = cols(Date = col_double(),Tapped = col_integer(),Sold = col_double()))

df3 <- left_join(input2, input1)
out <- df3 %>% select(Date, Tapped, Sold) %>% arrange(Date)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Date, Tapped,
             Sold
FROM
  (SELECT LHS.Date AS Date,
          LHS.Tapped AS Tapped,
          RHS.Sold AS Sold
   FROM input2 AS LHS
   LEFT JOIN input1 AS RHS ON (LHS.Date = RHS.Date))
ORDER BY Date
