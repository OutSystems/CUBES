[     3.043][MainProcess][INFO] Parsing specification...
[     3.047][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.047][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.048][MainProcess][DEBUG] Reading input files...
[     3.055][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/032.csv: ['int64', 'int64', 'int64', 'string']
[     3.061][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/032_o.csv: ['int64', 'int64', 'string']
[     3.089][MainProcess][DEBUG] Generating DSL...
[     3.125][MainProcess][INFO] Creating 16 processes
[     3.191][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.191][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.191][MainProcess][DEBUG] Increasing generator loc to 2
[     3.193][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.199][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.200][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.202][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.206][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.208][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.209][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.217][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.217][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.224][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.224][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.225][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.241][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.259][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.413][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.569][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     3.749][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     3.751][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     3.752][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     3.755][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     3.756][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     3.757][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.758][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     3.760][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     3.760][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     3.766][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     3.772][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     3.776][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = inner_join())
[     3.776][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = union())
[     3.777][cube-solver-8][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join())
[     3.786][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([1]))
[     3.790][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise([1]))
[     3.792][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.794][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([1]))
[     3.794][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = summarise([1]))
[     3.798][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     3.801][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([2]))
[     3.801][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     3.874][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[     3.883][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = summarise([3]))
[     3.978][cube-solver-14][DEBUG] Solving cube (l0 = summarise([3]), l1 = left_join())
[     3.980][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     3.986][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     4.066][cube-solver-14][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = left_join())
[     4.067][MainProcess][INFO] Statistics:
[     4.067][MainProcess][INFO] 	Generated cubes: 29
[     4.067][MainProcess][INFO] 	Attempted programs: 1
[     4.067][MainProcess][INFO] 		Rejected: 0
[     4.068][MainProcess][INFO] 		Failed: 0
[     4.068][MainProcess][INFO] 	Blacklist clauses: 3
[     4.068][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     4.068][MainProcess][DEBUG] 	0: Counter({'mutate': 72, 'summarise': 36})
[     4.068][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     4.069][MainProcess][DEBUG] 	0: Counter({'summarise': 114, 'left_join': 48, 'union': 17})
[     4.069][MainProcess][DEBUG] 	1: Counter({'mutate': 53, 'summarise': 30, 'filter': 21, 'natural_join': 18, 'union': 15, 'inner_join': 15, 'semi_join': 14, 'anti_join': 10, 'left_join': 3})
[     4.069][MainProcess][INFO] Solution found: left_join(summarise(@param0, Id = max(Id), crit1, crit2), @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/032.csv", col_types = cols(Id = col_integer(),crit1 = col_integer(),crit2 = col_integer(),value = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/032_o.csv", col_types = cols(crit1 = col_integer(),crit2 = col_integer(),value = col_character()))

df2 <- input1 %>% group_by(crit1, crit2) %>% summarise(Id = max(Id)) %>% ungroup()
df3 <- left_join(df2, input1)
out <- df3 %>% select(crit1, crit2, value) %>% arrange(crit1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT crit1,
       crit2,
       value
FROM
  (SELECT LHS.crit1 AS crit1,
          LHS.crit2 AS crit2,
          LHS.Id AS Id,
          RHS.value AS value
   FROM
     (SELECT crit1,
             crit2,
             MAX(Id) AS Id
      FROM input1
      GROUP BY crit1,
               crit2) AS LHS
   LEFT JOIN input1 AS RHS ON (LHS.crit1 = RHS.crit1
                               AND LHS.crit2 = RHS.crit2
                               AND LHS.Id = RHS.Id))
ORDER BY crit1
