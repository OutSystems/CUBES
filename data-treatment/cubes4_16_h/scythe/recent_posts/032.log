[     3.096][MainProcess][INFO] Parsing specification...
[     3.101][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.101][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.102][MainProcess][DEBUG] Reading input files...
[     3.112][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/032.csv: ['int64', 'int64', 'int64', 'string']
[     3.118][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/032_o.csv: ['int64', 'int64', 'string']
[     3.146][MainProcess][DEBUG] Generating DSL...
[     3.323][MainProcess][INFO] Creating 16 processes
[     3.385][MainProcess][DEBUG] Increasing generator loc to 2
[     3.512][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.534][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.536][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.537][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.541][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.541][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.545][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.547][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.548][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.557][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.560][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.567][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.567][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.574][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.591][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.629][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     6.754][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     6.820][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     7.904][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.959][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[    10.234][cube-solver-11][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]))
[    10.254][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join4())
[    10.257][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = anti_join())
[    10.257][cube-solver-14][DEBUG] Solving cube (l0 = summarise([4]), l1 = left_join())
[    10.258][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[    10.258][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[    10.262][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([4]))
[    10.269][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([4]))
[    10.270][cube-solver-11][DEBUG] Solving cube (l0 = summarise([4]), l1 = cross_join())
[    10.281][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([4]))
[    10.294][cube-solver-3][DEBUG] Solving cube (l0 = summarise([4]), l1 = mutate())
[    10.300][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = inner_join())
[    10.303][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]))
[    10.322][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[    10.325][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    10.332][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([4]))
[    10.339][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([4]))
[    10.339][cube-solver-12][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter())
[    10.344][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[    10.350][cube-solver-9][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join3())
[    10.350][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[    10.357][cube-solver-8][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join())
[    10.363][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = summarise([4]))
[    10.404][cube-solver-7][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([4]))
[    10.406][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[    10.427][cube-solver-9][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[    10.432][cube-solver-15][DEBUG] Solving cube (l0 = summarise([4]), l1 = union())
[    10.661][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([4]))
[    11.598][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[    11.626][cube-solver-4][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise([4]))
[    11.767][cube-solver-5][DEBUG] Solving cube (l0 = cross_join([7]), l1 = mutate())
[    11.818][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[    11.881][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[    11.915][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[    11.941][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise([4]))
[    12.079][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    12.584][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[    12.967][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[    13.079][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[    14.359][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[    14.393][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[    14.699][cube-solver-1][DEBUG] Solving cube (l0 = summarise([4]), l1 = semi_join())
[    14.718][cube-solver-0][DEBUG] Solving cube (l0 = summarise([4]), l1 = intersect())
[    15.235][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join([101]))
[    16.693][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[    16.909][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[    16.926][cube-solver-3][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise([4]))
[    17.717][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[    19.445][MainProcess][DEBUG] Increasing generator loc to 3
[    19.471][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    19.797][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[    22.749][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise([4]), l1 = semi_join())
[    22.755][MainProcess][INFO] Statistics:
[    22.755][MainProcess][INFO] 	Generated cubes: 52
[    22.755][MainProcess][INFO] 	Attempted programs: 589
[    22.755][MainProcess][INFO] 		Rejected: 294
[    22.755][MainProcess][INFO] 		Failed: 294
[    22.755][MainProcess][INFO] 	Blacklist clauses: 110
[    22.756][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    22.756][MainProcess][DEBUG] 	0: Counter({'mutate': 168, 'summarise': 108})
[    22.756][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    22.765][MainProcess][DEBUG] 	0: Counter({'summarise': 10436, 'mutate': 5968, 'cross_join': 1326, 'inner_join': 1194, 'left_join': 276, 'union': 276, 'semi_join': 276})
[    22.775][MainProcess][DEBUG] 	1: Counter({'mutate': 3192, 'anti_join': 2631, 'cross_join': 2490, 'inner_join': 2166, 'union': 2070, 'left_join': 2063, 'natural_join': 1919, 'semi_join': 1375, 'summarise': 1068, 'filter': 780})
[    22.775][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, Id = max(Id), crit1, crit2))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/032.csv", col_types = cols(Id = col_integer(),crit1 = col_integer(),crit2 = col_integer(),value = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/032_o.csv", col_types = cols(crit1 = col_integer(),crit2 = col_integer(),value = col_character()))

df2 <- input1 %>% group_by(crit1, crit2) %>% summarise(Id = max(Id)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(crit1, crit2, value) %>% arrange(crit1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT crit1,
       crit2,
       value
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT crit1,
                  crit2,
                  MAX(Id) AS Id
           FROM input1
           GROUP BY crit1,
                    crit2) AS RHS
        WHERE (LHS.Id = RHS.Id
               AND LHS.crit1 = RHS.crit1
               AND LHS.crit2 = RHS.crit2) ))
ORDER BY crit1
