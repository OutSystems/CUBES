[     3.244][MainProcess][INFO] Parsing specification...
[     3.248][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.248][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.249][MainProcess][DEBUG] Reading input files...
[     3.257][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/045_1.csv: ['int64', 'string']
[     3.262][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/045_2.csv: ['int64', 'int64', 'int64']
[     3.267][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/045_o.csv: ['string', 'float64']
[     3.298][MainProcess][DEBUG] Generating DSL...
[     3.480][MainProcess][INFO] Creating 16 processes
[     3.549][MainProcess][DEBUG] Increasing generator loc to 2
[     3.693][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.694][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.702][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.702][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.705][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.706][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.714][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.718][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.725][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.727][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.738][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.738][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.744][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.752][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.814][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.845][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     6.972][cube-solver-0][WARNING] There is no solution for current loc (1).
[     6.974][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     6.985][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.008][cube-solver-1][WARNING] There is no solution for current loc (1).
[     7.010][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     7.021][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[    10.264][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[    10.265][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[    10.305][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[    10.314][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[    10.315][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[    10.319][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[    10.336][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    10.340][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[    10.351][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[    10.354][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[    10.358][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[    10.370][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = summarise([1]))
[    10.374][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    10.390][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([1]))
[    10.409][cube-solver-5][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[    10.416][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([3]))
[    10.426][cube-solver-9][DEBUG] Solving cube (l0 = summarise([5]), l1 = natural_join3())
[    10.461][cube-solver-10][DEBUG] Solving cube (l0 = summarise([5]), l1 = natural_join4())
[    10.475][cube-solver-15][DEBUG] Solving cube (l0 = summarise([5]), l1 = union())
[    10.509][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[    10.512][cube-solver-8][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join())
[    10.536][cube-solver-12][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter())
[    10.576][cube-solver-12][DEBUG] Solving cube (l0 = union(), l1 = summarise([6]))
[    10.815][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[    10.832][cube-solver-11][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise([3]))
[    10.834][MainProcess][INFO] Statistics:
[    10.834][MainProcess][INFO] 	Generated cubes: 28
[    10.834][MainProcess][INFO] 	Attempted programs: 3
[    10.834][MainProcess][INFO] 		Rejected: 2
[    10.834][MainProcess][INFO] 		Failed: 0
[    10.834][MainProcess][INFO] 	Blacklist clauses: 28
[    10.834][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    10.835][MainProcess][DEBUG] 	0: Counter({'summarise': 134, 'left_join': 60, 'natural_join': 32, 'anti_join': 24, 'union': 24})
[    10.835][MainProcess][DEBUG] 	1: Counter({'summarise': 79, 'mutate': 61, 'natural_join3': 36, 'union': 32, 'left_join': 29, 'inner_join': 24, 'natural_join': 14})
[    10.836][MainProcess][INFO] Solution found: summarise(left_join(@param0, @param1), sumQuantity = sum(Quantity), Menu_id, Name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/045_1.csv", col_types = cols(Menu_id = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/045_2.csv", col_types = cols(ID = col_integer(),Quantity = col_integer(),Menu_id = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/045_o.csv", col_types = cols(MenuName = col_character(),Quantity = col_double()))

df3 <- left_join(input1, input2)
df4 <- df3 %>% group_by(Menu_id, Name) %>% summarise(sumQuantity = sum(Quantity)) %>% ungroup()
out <- df4 %>% select(MenuName = Name, Quantity = sumQuantity) %>% arrange(MenuName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Name AS MenuName,
       sumQuantity AS Quantity
FROM
  (SELECT Menu_id,
          Name,
          SUM(Quantity) AS sumQuantity
   FROM
     (SELECT LHS.Menu_id AS Menu_id,
             LHS.Name AS Name,
             RHS.ID AS ID,
             RHS.Quantity AS Quantity
      FROM input1 AS LHS
      LEFT JOIN input2 AS RHS ON (LHS.Menu_id = RHS.Menu_id))
   GROUP BY Menu_id,
            Name)
ORDER BY MenuName
