[     1.576][MainProcess][INFO] Parsing specification...
[     1.579][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.579][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.580][MainProcess][DEBUG] Reading input files...
[     1.586][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/045_1.csv: ['int64', 'string']
[     1.591][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/045_2.csv: ['int64', 'int64', 'int64']
[     1.595][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/045_o.csv: ['string', 'float64']
[     1.623][MainProcess][DEBUG] Generating DSL...
[     1.655][MainProcess][INFO] Creating 16 processes
[     1.719][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.719][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.719][MainProcess][DEBUG] Increasing generator loc to 2
[     1.720][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.721][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.732][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.734][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.735][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.739][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.743][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.747][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.752][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.753][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.755][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.764][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.794][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.925][cube-solver-1][WARNING] There is no solution for current loc (1).
[     1.926][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.927][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.957][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.958][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.959][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.257][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.259][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.263][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.265][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.270][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.272][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.273][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.279][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.284][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.289][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.290][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.291][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.292][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.294][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.296][cube-solver-12][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.298][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]))
[     2.299][cube-solver-14][DEBUG] Solving cube (l0 = summarise([2]), l1 = left_join())
[     2.300][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.305][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([3]))
[     2.305][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.333][cube-solver-15][DEBUG] Solving cube (l0 = summarise([10]), l1 = union())
[     2.522][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.522][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([13]))
[     2.527][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = summarise([13]))
[     2.553][cube-solver-1][DEBUG] Solving cube (l0 = summarise([14]), l1 = intersect())
[     2.645][cube-solver-0][DEBUG] Solving cube (l0 = summarise([14]), l1 = semi_join())
[     2.820][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     3.111][cube-solver-14][DEBUG] Found solution with cube (l0 = summarise([2]), l1 = left_join())
[     3.113][MainProcess][INFO] Statistics:
[     3.113][MainProcess][INFO] 	Generated cubes: 29
[     3.113][MainProcess][INFO] 	Attempted programs: 61
[     3.114][MainProcess][INFO] 		Rejected: 3
[     3.114][MainProcess][INFO] 		Failed: 57
[     3.114][MainProcess][INFO] 	Blacklist clauses: 26
[     3.114][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     3.115][MainProcess][DEBUG] 	0: Counter({'summarise': 318, 'natural_join': 130, 'left_join': 122, 'union': 82, 'anti_join': 48})
[     3.116][MainProcess][DEBUG] 	1: Counter({'mutate': 224, 'summarise': 158, 'natural_join3': 67, 'left_join': 67, 'union': 60, 'natural_join': 60, 'semi_join': 40, 'inner_join': 24})
[     3.116][MainProcess][INFO] Solution found: left_join(@param0, summarise(@param1, sumQuantity = sum(Quantity), Menu_id))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/045_1.csv", col_types = cols(Menu_id = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/045_2.csv", col_types = cols(ID = col_integer(),Quantity = col_integer(),Menu_id = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/045_o.csv", col_types = cols(MenuName = col_character(),Quantity = col_double()))

df3 <- input2 %>% group_by(Menu_id) %>% summarise(sumQuantity = sum(Quantity)) %>% ungroup()
df4 <- left_join(input1, df3)
out <- df4 %>% select(MenuName = Name, Quantity = sumQuantity) %>% arrange(MenuName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Name AS MenuName,
       sumQuantity AS Quantity
FROM
  (SELECT LHS.Menu_id AS Menu_id,
          LHS.Name AS Name,
          RHS.sumQuantity AS sumQuantity
   FROM input1 AS LHS
   LEFT JOIN
     (SELECT Menu_id,
             SUM(Quantity) AS sumQuantity
      FROM input2
      GROUP BY Menu_id) AS RHS ON (LHS.Menu_id = RHS.Menu_id))
ORDER BY MenuName
