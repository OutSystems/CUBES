[     3.711][MainProcess][INFO] Parsing specification...
[     3.719][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.719][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.719][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.720][MainProcess][DEBUG] Reading input files...
[     3.732][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/016_2.csv: ['string', 'datetime64[ns]']
[     3.740][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/016_o.csv: ['string', 'datetime64[ns]', 'int64']
[     3.794][MainProcess][DEBUG] Generating DSL...
[     4.117][MainProcess][INFO] Creating 16 processes
[     4.203][MainProcess][DEBUG] Increasing generator loc to 4
[     4.495][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     4.501][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.503][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.503][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     4.510][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.515][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     4.522][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     4.523][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     4.531][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     4.532][cube-solver-12][DEBUG] Initialising process for 4 lines of code.
[     4.536][cube-solver-14][DEBUG] Initialising process for 4 lines of code.
[     4.537][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     4.556][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.583][cube-solver-13][DEBUG] Initialising process for 4 lines of code.
[     4.585][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     4.629][cube-solver-15][DEBUG] Initialising process for 4 lines of code.
[    22.421][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[    22.438][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = summarise())
[    22.456][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = mutate(), l2 = filter())
[    22.460][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = summarise(), l2 = filter())
[    22.474][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = mutate(), l2 = filter())
[    22.481][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = summarise())
[    22.500][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = mutate())
[    22.519][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[    22.531][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[    22.549][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = summarise())
[    22.564][cube-solver-7][DEBUG] Initialising process for 4 lines of code.
[    22.568][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = mutate())
[    22.592][cube-solver-4][DEBUG] Initialising process for 4 lines of code.
[    22.639][cube-solver-0][DEBUG] Initialising process for 4 lines of code.
[    22.681][cube-solver-6][DEBUG] Initialising process for 4 lines of code.
[    22.774][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = mutate())
[    22.842][cube-solver-5][DEBUG] Initialising process for 4 lines of code.
[    30.305][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise(), l3 = filter())
[    30.361][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter(), l3 = mutate())
[    30.386][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter(), l3 = summarise())
[    30.437][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter(), l3 = mutate())
[    30.451][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter(), l3 = summarise())
[    30.474][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate(), l3 = filter())
[    30.512][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter(), l3 = mutate())
[    30.515][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = summarise(), l3 = filter())
[    30.527][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter(), l3 = summarise())
[    30.550][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = mutate(), l3 = filter())
[    30.564][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise(), l3 = summarise())
[    30.588][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate(), l3 = summarise())
[    30.591][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise(), l3 = mutate())
[    30.603][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate(), l3 = mutate())
[    30.625][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise(), l3 = filter())
[    30.642][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter(), l3 = mutate())
[    30.654][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter(), l3 = summarise())
[    30.662][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate(), l3 = filter())
[    30.681][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = summarise(), l3 = filter())
[    30.701][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter(), l3 = mutate())
[    30.717][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter(), l3 = summarise())
[    30.719][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = mutate(), l3 = filter())
[    30.738][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise(), l3 = summarise())
[    30.758][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate(), l3 = summarise())
[    30.776][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate(), l3 = mutate())
[    30.781][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise(), l3 = mutate())
[    30.795][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise(), l3 = filter())
[    30.816][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter(), l3 = summarise())
[    30.835][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = summarise(), l3 = filter())
[    30.838][cube-solver-9][DEBUG] Initialising process for 4 lines of code.
[    30.844][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter(), l3 = mutate())
[    30.855][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter(), l3 = summarise())
[    30.907][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter(), l3 = mutate())
[    31.598][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = mutate(), l3 = filter())
[    31.673][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = mutate(), l3 = filter())
[    37.505][cube-solver-1][DEBUG] Initialising process for 4 lines of code.
[    40.437][cube-solver-8][DEBUG] Initialising process for 4 lines of code.
[    41.135][cube-solver-10][DEBUG] Initialising process for 4 lines of code.
[    42.548][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter(), l3 = mutate())
[    42.550][MainProcess][INFO] Statistics:
[    42.550][MainProcess][INFO] 	Generated cubes: 55
[    42.550][MainProcess][INFO] 	Attempted programs: 1281
[    42.550][MainProcess][INFO] 		Rejected: 530
[    42.550][MainProcess][INFO] 		Failed: 750
[    42.551][MainProcess][INFO] 	Blacklist clauses: 0
[    42.551][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    42.556][MainProcess][DEBUG] 	0: Counter({'mutate': 6243, 'summarise': 5479})
[    42.561][MainProcess][DEBUG] 	1: Counter({'filter': 5976, 'mutate': 5147, 'summarise': 600})
[    42.566][MainProcess][DEBUG] 	2: Counter({'filter': 5747, 'mutate': 4776, 'summarise': 1200})
[    42.567][MainProcess][DEBUG] Printing statistics for good programs of size 4
[    42.569][MainProcess][DEBUG] 	0: Counter({'summarise': 3738})
[    42.571][MainProcess][DEBUG] 	1: Counter({'natural_join': 3738})
[    42.573][MainProcess][DEBUG] 	2: Counter({'filter': 2266, 'mutate': 1364, 'summarise': 108})
[    42.575][MainProcess][DEBUG] 	3: Counter({'filter': 1473, 'mutate': 1450, 'summarise': 816})
[    42.575][MainProcess][INFO] Solution found: mutate(filter(natural_join(summarise(@param0, n = n(), CustomerId), @param0), n >= 1 & ReportDt > mdy('10/19/2016')), maxReportDt = max(ReportDt))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/016_2.csv", col_types = cols(CustomerId = col_character(),ReportDt = col_character()))
input1$ReportDt <- mdy(input1$ReportDt)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/016_o.csv", col_types = cols(c1 = col_character(),c2 = col_character(),c3 = col_integer()))
expected_output$c2 <- mdy(expected_output$c2)

df2 <- input1 %>% group_by(CustomerId) %>% summarise(n = n()) %>% ungroup()
df3 <- inner_join(df2, input1)
df4 <- df3 %>% filter(n >= 1 & ReportDt > mdy('10/19/2016'))
df5 <- df4 %>% mutate(maxReportDt = max(ReportDt))
out <- df5 %>% select(c1 = CustomerId, c2 = maxReportDt, c3 = n) %>% distinct() %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `CustomerId` AS `c1`,
                MAX(`ReportDt`) OVER () AS `c2`,
                                     `n` AS `c3`
FROM
  (SELECT `LHS`.`CustomerId` AS `CustomerId`,
          `LHS`.`n` AS `n`,
          `RHS`.`ReportDt` AS `ReportDt`
   FROM
     (SELECT `CustomerId`,
             COUNT() AS `n`
      FROM `input1`
      GROUP BY `CustomerId`) AS `LHS`
   INNER JOIN `input1` AS `RHS` ON (`LHS`.`CustomerId` = `RHS`.`CustomerId`))
WHERE (`n` >= 1.0
       AND `ReportDt` > mdy('10/19/2016'))
ORDER BY c1
