[     3.844][MainProcess][INFO] Parsing specification...
[     3.847][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.847][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.847][MainProcess][DEBUG] Reading input files...
[     3.854][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/011.csv: ['int64', 'string', 'string']
[     3.858][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/011_o.csv: ['int64', 'string']
[     3.890][MainProcess][DEBUG] Generating DSL...
[     3.930][MainProcess][INFO] Creating 16 processes
[     3.997][MainProcess][DEBUG] Increasing generator loc to 2
[     4.000][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     4.003][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     4.008][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     4.010][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     4.013][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     4.016][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     4.020][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     4.023][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     4.031][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     4.032][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     4.040][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     4.041][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     4.044][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     4.046][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     4.048][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     4.085][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     4.436][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.440][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     4.925][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     4.925][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     4.932][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     4.932][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     4.933][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     4.939][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     4.940][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     4.941][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     4.944][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     4.946][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     4.947][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     4.949][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     4.953][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     4.962][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     4.962][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     4.968][cube-solver-2][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     4.971][cube-solver-2][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     4.974][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     4.975][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     4.981][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     5.021][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     5.029][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     5.074][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     5.124][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     5.132][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     5.264][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     5.287][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)
[     5.288][MainProcess][INFO] Statistics:
[     5.288][MainProcess][INFO] 	Generated cubes: 28
[     5.288][MainProcess][INFO] 	Attempted programs: 18
[     5.289][MainProcess][INFO] 		Rejected: 17
[     5.289][MainProcess][INFO] 		Failed: 0
[     5.289][MainProcess][INFO] 	Blacklist clauses: 0
[     5.289][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     5.289][MainProcess][DEBUG] 	0: Counter({'summarise': 101, 'mutate': 96})
[     5.289][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     5.290][MainProcess][DEBUG] 	0: Counter({'summarise': 141, 'left_join': 34, 'union': 22})
[     5.290][MainProcess][DEBUG] 	1: Counter({'mutate': 40, 'semi_join': 28, 'summarise': 24, 'natural_join': 21, 'union': 20, 'cross_join': 19, 'left_join': 17, 'anti_join': 16, 'inner_join': 12})
[     5.290][MainProcess][INFO] Solution found: summarise(@param0, concatValue = string_agg(Value, ', '), ID)
[     5.424][cube-solver-2][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise())
[     5.709][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise(), l1 = left_join())
[     5.732][cube-solver-14][DEBUG] Found solution with cube (l0 = summarise(), l1 = union())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/011.csv", col_types = cols(ID = col_integer(),Name = col_character(),Value = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/011_o.csv", col_types = cols(ID = col_integer(),Value = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df2 <- input1 %>% group_by(ID) %>% summarise(concatValue = string_agg(Value, ', ')) %>% ungroup()
out <- df2 %>% select(ID, Value = concatValue) %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `ID`,
       `concatValue` AS `Value`
FROM
  (SELECT `ID`,
          string_agg(`Value`, ', ') AS concatValue
   FROM input1
   GROUP BY ID)
ORDER BY ID
