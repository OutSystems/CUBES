[     1.614][MainProcess][INFO] Parsing specification...
[     1.628][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.629][MainProcess][DEBUG] Reading input files...
[     1.668][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/009.csv: ['int64', 'int64', 'datetime64[ns]', 'string', 'int64']
[     1.674][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/009_o.csv: ['int64', 'string', 'int64']
[     1.708][MainProcess][DEBUG] Generating DSL...
[     1.741][MainProcess][INFO] Creating 16 processes
[     1.808][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.809][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.808][MainProcess][DEBUG] Increasing generator loc to 2
[     1.809][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.810][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.813][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.816][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.818][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.829][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.832][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.836][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.839][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.839][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.844][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.844][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.856][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.885][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.075][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.280][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.452][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.452][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.455][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     2.455][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.457][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.458][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.466][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.468][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.471][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.473][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.474][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.478][cube-solver-9][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.478][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.480][cube-solver-9][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.481][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.487][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.488][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.520][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.531][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.536][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.549][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.555][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.637][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)
[     2.638][MainProcess][INFO] Statistics:
[     2.638][MainProcess][INFO] 	Generated cubes: 26
[     2.638][MainProcess][INFO] 	Attempted programs: 3
[     2.638][MainProcess][INFO] 		Rejected: 2
[     2.639][MainProcess][INFO] 		Failed: 0
[     2.639][MainProcess][INFO] 	Blacklist clauses: 0
[     2.639][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     2.639][MainProcess][DEBUG] 	0: Counter({'mutate': 64, 'summarise': 25})
[     2.639][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.640][MainProcess][DEBUG] 	0: Counter({'summarise': 50, 'left_join': 17, 'union': 11})
[     2.640][MainProcess][DEBUG] 	1: Counter({'mutate': 26, 'summarise': 14, 'semi_join': 11, 'natural_join': 9, 'left_join': 9, 'union': 5, 'inner_join': 3, 'anti_join': 1})
[     2.640][MainProcess][INFO] Solution found: summarise(@param0, n = n(), c2, c4)
[     2.833][cube-solver-5][DEBUG] Found solution with cube (l0 = summarise(), l1 = mutate())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/009.csv", col_types = cols(c1 = col_integer(),c2 = col_integer(),c3 = col_character(),c4 = col_character(),c5 = col_integer()))
input1$c3 <- dmy(input1$c3)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/009_o.csv", col_types = cols(c1 = col_integer(),c2 = col_character(),c3 = col_integer()))

df2 <- input1 %>% group_by(c2, c4) %>% summarise(n = n()) %>% ungroup()
out <- df2 %>% select(c1 = c2, c2 = c4, c3 = n) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT c2 AS c1,
       c4 AS c2,
       n AS c3
FROM
  (SELECT c2,
          c4,
          COUNT() AS n
   FROM input1
   GROUP BY c2,
            c4)
ORDER BY c1
