[     1.550][MainProcess][INFO] Parsing specification...
[     1.568][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.568][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.569][MainProcess][DEBUG] Reading input files...
[     1.608][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/176.csv: ['int64', 'int64']
[     1.615][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/176_o.csv: ['int64']
[     1.641][MainProcess][DEBUG] Generating DSL...
[     1.671][MainProcess][INFO] Creating 16 processes
[     1.742][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.741][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.742][MainProcess][DEBUG] Increasing generator loc to 3
[     1.743][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.747][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.753][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.753][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.757][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.761][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.765][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.773][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.775][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.788][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.792][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.813][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.302][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.302][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.401][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.482][cube-solver-2][DEBUG] Found solution with cube (l0 = filter(), l1 = mutate())
[     2.484][MainProcess][INFO] Statistics:
[     2.484][MainProcess][INFO] 	Generated cubes: 16
[     2.484][MainProcess][INFO] 	Attempted programs: 4
[     2.484][MainProcess][INFO] 		Rejected: 3
[     2.484][MainProcess][INFO] 		Failed: 0
[     2.484][MainProcess][INFO] 	Blacklist clauses: 0
[     2.484][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.485][MainProcess][DEBUG] 	0: Counter({'filter': 36, 'summarise': 7})
[     2.485][MainProcess][DEBUG] 	1: Counter({'mutate': 20, 'summarise': 16, 'filter': 7})
[     2.485][MainProcess][INFO] Solution found: mutate(filter(@param0, Id == max(Salary) | Salary != max(Salary)), Salary = max(Salary))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/176.csv", col_types = cols(Id = col_integer(),Salary = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/176_o.csv", col_types = cols(SecondHighestSalary = col_integer()))

df2 <- input1 %>% filter(Id == max(Salary) | Salary != max(Salary))
df3 <- df2 %>% mutate(Salary = max(Salary))
out <- df3 %>% select(SecondHighestSalary = Salary) %>% distinct() %>% arrange(SecondHighestSalary)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT MAX(Salary) OVER () AS SecondHighestSalary
FROM
  (SELECT Id,
          Salary
   FROM
     (SELECT Id,
             Salary,
             MAX(Salary) OVER () AS zzz2,
                              MAX(Salary) OVER () AS zzz3
      FROM input1)
   WHERE (Id = zzz2
          OR Salary != zzz3))
ORDER BY SecondHighestSalary
