[     3.256][MainProcess][INFO] Parsing specification...
[     3.268][MainProcess][DEBUG] Reading input files...
[     3.282][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/183_1.csv: ['int64', 'string']
[     3.288][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/183_2.csv: ['int64', 'int64']
[     3.293][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/183_o.csv: ['string']
[     3.325][MainProcess][DEBUG] Generating DSL...
[     3.342][MainProcess][INFO] Creating 16 processes
[     3.429][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.429][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.429][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.430][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.429][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.429][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.430][MainProcess][DEBUG] Increasing generator loc to 2
[     3.430][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.430][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     3.429][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.434][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     3.435][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.440][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.448][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.455][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.463][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.471][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.488][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     3.497][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.499][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     3.536][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.536][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     3.539][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.539][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     3.541][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.541][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     3.542][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.543][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.544][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     3.568][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.569][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([1]))
[     3.572][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     3.572][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     3.574][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([2]))
[     3.578][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     3.580][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     3.582][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect())
[     3.584][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     3.584][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     3.586][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     3.587][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect())
[     3.588][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([2]))
[     3.590][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([2]))
[     3.592][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     3.594][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     3.596][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     3.597][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([2]))
[     3.601][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     3.603][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     3.604][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect())
[     3.606][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     3.608][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     3.611][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([3]))
[     3.615][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     3.617][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     3.618][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     3.620][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([2]), l1 = natural_join())
[     3.643][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.649][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.697][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     3.699][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.706][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join())
[     3.717][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.743][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join([3]))
[     3.759][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.760][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3())
[     3.762][cube-solver-8][DEBUG] Solving cube (l0 = anti_join([10]), l1 = intersect([6]))
[     3.789][cube-solver-15][DEBUG] Solving cube (l0 = anti_join([10]), l1 = semi_join())
[     3.801][cube-solver-7][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join3())
[     3.811][cube-solver-7][DEBUG] Solving cube (l0 = anti_join([10]), l1 = cross_join([2]))
[     3.839][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.853][cube-solver-4][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join4())
[     3.864][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join())
[     3.902][cube-solver-5][DEBUG] Solving cube (l0 = anti_join([10]), l1 = anti_join([10]))
[     3.918][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join3())
[     3.923][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([10]), l1 = left_join())
[     3.945][cube-solver-6][DEBUG] Solving cube (l0 = anti_join([10]), l1 = union())
[     3.994][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = inner_join([6]))
[     4.098][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join4())
[     4.101][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = anti_join([10]))
[     4.308][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = left_join())
[     4.329][cube-solver-12][DEBUG] Solving cube (l0 = left_join(), l1 = union())
[     4.343][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = intersect([6]))
[     4.381][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     4.440][cube-solver-14][DEBUG] Solving cube (l0 = left_join(), l1 = cross_join([2]))
[     4.462][cube-solver-13][DEBUG] Solving cube (l0 = left_join(), l1 = inner_join([22]))
[     4.586][cube-solver-9][DEBUG] Solving cube (l0 = left_join(), l1 = semi_join())
[     4.667][cube-solver-14][DEBUG] Solving cube (l0 = union(), l1 = natural_join())
[     4.736][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = natural_join3())
[     4.758][cube-solver-15][DEBUG] Solving cube (l0 = union(), l1 = natural_join4())
[     4.760][cube-solver-15][DEBUG] Solving cube (l0 = union(), l1 = anti_join([10]))
[     4.786][cube-solver-10][DEBUG] Solving cube (l0 = union(), l1 = left_join())
[     4.934][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = union())
[     5.016][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = intersect([6]))
[     5.048][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = semi_join())
[     5.172][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = cross_join([2]))
[     5.225][cube-solver-12][DEBUG] Solving cube (l0 = union(), l1 = inner_join([22]))
[     5.279][cube-solver-14][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join())
[     5.308][cube-solver-8][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join3())
[     5.490][cube-solver-9][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join4())
[     5.495][cube-solver-9][DEBUG] Solving cube (l0 = intersect([6]), l1 = anti_join([10]))
[     5.496][cube-solver-2][DEBUG] Solving cube (l0 = intersect([6]), l1 = left_join())
[     5.522][cube-solver-5][DEBUG] Solving cube (l0 = intersect([7]), l1 = union())
[     5.652][cube-solver-11][DEBUG] Solving cube (l0 = intersect([8]), l1 = intersect([8]))
[     5.681][cube-solver-14][DEBUG] Solving cube (l0 = intersect([8]), l1 = semi_join())
[     5.728][cube-solver-10][DEBUG] Solving cube (l0 = intersect([8]), l1 = cross_join([2]))
[     5.780][cube-solver-6][DEBUG] Solving cube (l0 = intersect([8]), l1 = inner_join([22]))
[     5.806][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join())
[     5.886][cube-solver-14][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join3())
[     5.928][cube-solver-10][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join4())
[     5.931][cube-solver-10][DEBUG] Solving cube (l0 = semi_join(), l1 = anti_join([10]))
[     5.975][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = left_join())
[     6.102][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = union())
[     6.283][cube-solver-11][DEBUG] Solving cube (l0 = semi_join(), l1 = intersect([8]))
[     6.414][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = semi_join())
[     6.580][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = cross_join([2]))
[     6.584][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(), l1 = inner_join([22]))
[     6.609][cube-solver-4][DEBUG] Solving cube (l0 = cross_join([2]), l1 = natural_join())
[     6.666][cube-solver-4][DEBUG] Solving cube (l0 = cross_join([4]), l1 = natural_join3())
[     6.670][cube-solver-4][DEBUG] Solving cube (l0 = cross_join([4]), l1 = natural_join4())
[     6.675][cube-solver-4][DEBUG] Solving cube (l0 = cross_join([4]), l1 = anti_join([10]))
[     6.686][cube-solver-4][DEBUG] Solving cube (l0 = cross_join([4]), l1 = left_join())
[     6.690][cube-solver-4][DEBUG] Solving cube (l0 = cross_join([4]), l1 = union())
[     6.694][cube-solver-4][DEBUG] Solving cube (l0 = cross_join([4]), l1 = intersect([8]))
[     6.704][cube-solver-4][DEBUG] Solving cube (l0 = cross_join([4]), l1 = semi_join())
[     6.708][cube-solver-4][DEBUG] Solving cube (l0 = cross_join([4]), l1 = cross_join([4]))
[     6.714][cube-solver-4][DEBUG] Solving cube (l0 = cross_join([4]), l1 = inner_join([22]))
[     6.722][cube-solver-5][DEBUG] Solving cube (l0 = inner_join([22]), l1 = natural_join())
[     6.734][cube-solver-4][DEBUG] Solving cube (l0 = inner_join([22]), l1 = natural_join3())
[     6.776][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([22]), l1 = natural_join4())
[     6.787][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([22]), l1 = anti_join([10]))
[     6.845][cube-solver-0][DEBUG] Solving cube (l0 = inner_join([25]), l1 = left_join())
[     6.899][cube-solver-15][DEBUG] Solving cube (l0 = inner_join([27]), l1 = union())
[     6.965][cube-solver-2][DEBUG] Solving cube (l0 = inner_join([29]), l1 = intersect([8]))
[     7.131][cube-solver-9][DEBUG] Solving cube (l0 = inner_join([33]), l1 = semi_join())
[     7.135][cube-solver-14][DEBUG] Solving cube (l0 = inner_join([33]), l1 = cross_join([4]))
[     7.280][cube-solver-11][DEBUG] Solving cube (l0 = inner_join([35]), l1 = inner_join([35]))
[     7.868][MainProcess][DEBUG] Increasing generator loc to 3
[     7.869][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     8.080][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     8.238][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]), l2 = natural_join())
[     8.286][cube-solver-8][DEBUG] Found solution with cube (l0 = inner_join([22]), l1 = anti_join([10]))
[     8.287][MainProcess][INFO] Statistics:
[     8.288][MainProcess][INFO] 	Generated cubes: 112
[     8.288][MainProcess][INFO] 	Attempted programs: 1363
[     8.288][MainProcess][INFO] 		Rejected: 597
[     8.288][MainProcess][INFO] 		Failed: 765
[     8.288][MainProcess][INFO] 	Blacklist clauses: 60
[     8.288][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     8.289][MainProcess][DEBUG] 	0: Counter({'inner_join': 46, 'anti_join': 16, 'left_join': 12, 'union': 12, 'natural_join': 12, 'semi_join': 8})
[     8.289][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     8.291][MainProcess][DEBUG] 	0: Counter({'left_join': 1051, 'union': 1005, 'inner_join': 868, 'anti_join': 701, 'semi_join': 683, 'natural_join': 658, 'intersect': 286})
[     8.294][MainProcess][DEBUG] 	1: Counter({'inner_join': 1726, 'natural_join3': 729, 'anti_join': 593, 'union': 565, 'left_join': 538, 'natural_join': 530, 'semi_join': 461, 'intersect': 110})
[     8.294][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     8.294][MainProcess][DEBUG] 	0: Counter({'natural_join': 2})
[     8.294][MainProcess][DEBUG] 	1: Counter({'anti_join': 2})
[     8.294][MainProcess][DEBUG] 	2: Counter({'natural_join': 2})
[     8.294][MainProcess][INFO] Solution found: anti_join(@param0, inner_join(@param0, @param1, 'Id' = 'CustomerId'), 'Name')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/183_1.csv", col_types = cols(Id = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/leetcode/tables/183_2.csv", col_types = cols(Id = col_integer(),CustomerId = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/leetcode/tables/183_o.csv", col_types = cols(Customers = col_character()))

df3 <- inner_join(input1, input2, by=c('Id' = 'CustomerId'), suffix = c('', '.other'))
df4 <- anti_join(input1, df3, by=c('Name'))
out <- df4 %>% select(Customers = Name) %>% arrange(Customers)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Name AS Customers
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT LHS.Id AS Id,
                  LHS.Name AS Name,
                  RHS.Id AS Id.other
           FROM input1 AS LHS
           INNER JOIN input2 AS RHS ON (LHS.Id = RHS.CustomerId)) AS RHS
        WHERE (LHS.Name = RHS.Name) ))
ORDER BY Customers
