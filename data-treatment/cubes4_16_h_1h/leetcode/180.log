[     3.313][MainProcess][INFO] Parsing specification...
[     3.346][MainProcess][DEBUG] Reading input files...
[     3.378][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/180.csv: ['int64', 'int64']
[     3.385][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/180_o.csv: ['int64']
[     3.424][MainProcess][DEBUG] Generating DSL...
[     3.525][MainProcess][INFO] Creating 16 processes
[     3.606][MainProcess][DEBUG] Increasing generator loc to 3
[     3.642][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.648][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.652][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.653][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.663][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.664][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.667][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.667][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.672][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.680][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.683][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.684][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.684][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     3.686][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.733][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     3.744][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     5.193][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     5.247][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise([2]))
[     5.252][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     5.279][cube-solver-0][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]))
[     5.283][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     5.422][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     5.463][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     5.585][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     6.755][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([2]), l2 = summarise([2]))
[     6.763][cube-solver-4][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join4(), l2 = summarise([2]))
[     6.767][cube-solver-4][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join4(), l2 = mutate())
[     6.770][cube-solver-4][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = natural_join())
[     6.817][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([2]), l2 = mutate())
[     6.818][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise([2]))
[     6.820][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise([2]))
[     6.822][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = natural_join3())
[     6.823][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([2]), l2 = summarise([2]))
[     6.825][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate())
[     6.828][cube-solver-10][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = natural_join4())
[     6.830][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = filter())
[     6.830][cube-solver-6][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = summarise([2]))
[     6.834][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = union())
[     6.835][cube-solver-8][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = anti_join())
[     6.835][cube-solver-10][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = left_join())
[     6.837][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[     6.838][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([2]), l2 = summarise([2]))
[     6.839][cube-solver-6][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = intersect())
[     6.840][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[     6.844][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = semi_join())
[     6.847][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = cross_join())
[     6.849][cube-solver-12][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = mutate())
[     6.857][cube-solver-12][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = inner_join())
[     6.894][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([2]), l2 = mutate())
[     6.904][cube-solver-9][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = summarise([2]))
[     6.906][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise([2]))
[     6.915][cube-solver-14][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = mutate())
[     6.941][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([2]), l2 = mutate())
[     6.951][cube-solver-13][DEBUG] Solving cube (l0 = summarise([2]), l1 = anti_join(), l2 = summarise([2]))
[     7.272][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = anti_join(), l2 = mutate())
[     7.291][cube-solver-12][DEBUG] Found solution with cube (l0 = summarise([2]), l1 = summarise([2]), l2 = inner_join())
[     7.293][MainProcess][INFO] Statistics:
[     7.293][MainProcess][INFO] 	Generated cubes: 39
[     7.293][MainProcess][INFO] 	Attempted programs: 41
[     7.293][MainProcess][INFO] 		Rejected: 11
[     7.294][MainProcess][INFO] 		Failed: 29
[     7.294][MainProcess][INFO] 	Blacklist clauses: 2
[     7.294][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     7.295][MainProcess][DEBUG] 	0: Counter({'mutate': 36, 'summarise': 16})
[     7.295][MainProcess][DEBUG] 	1: Counter({'mutate': 32, 'summarise': 20})
[     7.295][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     7.295][MainProcess][DEBUG] 	0: Counter({'summarise': 312})
[     7.296][MainProcess][DEBUG] 	1: Counter({'summarise': 256, 'filter': 46, 'anti_join': 10})
[     7.296][MainProcess][DEBUG] 	2: Counter({'natural_join': 51, 'left_join': 42, 'inner_join': 36, 'union': 34, 'semi_join': 33, 'summarise': 31, 'natural_join3': 28, 'mutate': 25, 'anti_join': 24, 'intersect': 8})
[     7.297][MainProcess][INFO] Solution found: inner_join(summarise(@param0, lagNum = lag(Num), Id, Num), summarise(@param0, leadNum = lead(Num), Id, Num), 'Num' = 'Id')
[     7.695][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/180.csv", col_types = cols(Id = col_integer(),Num = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/180_o.csv", col_types = cols(ConsecutiveNums = col_integer()))

df2 <- input1 %>% group_by(Id, Num) %>% summarise(lagNum = lag(Num)) %>% ungroup()
df3 <- input1 %>% group_by(Id, Num) %>% summarise(leadNum = lead(Num)) %>% ungroup()
df4 <- inner_join(df2, df3, by=c('Num' = 'Id'), suffix = c('', '.other'))
out <- df4 %>% select(ConsecutiveNums = Num.other) %>% distinct() %>% arrange(ConsecutiveNums)

Failed to generate SQL query
