[     1.588][MainProcess][INFO] Parsing specification...
[     1.605][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.605][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.606][MainProcess][DEBUG] Reading input files...
[     1.615][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/596.csv: ['string', 'string']
[     1.620][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/596_o.csv: ['string']
[     1.647][MainProcess][DEBUG] Generating DSL...
[     1.663][MainProcess][INFO] Creating 16 processes
[     1.723][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.723][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.723][MainProcess][DEBUG] Increasing generator loc to 3
[     1.723][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.723][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.724][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.724][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.724][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.727][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.730][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.734][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.735][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.739][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.749][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.753][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.754][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.899][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.901][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     1.914][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     1.987][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     1.990][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     1.989][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.001][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.004][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.006][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.008][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.008][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.009][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.010][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.012][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.014][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.015][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.015][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.018][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.018][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.019][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.023][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.023][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.026][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.040][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[     2.041][MainProcess][INFO] Statistics:
[     2.042][MainProcess][INFO] 	Generated cubes: 28
[     2.042][MainProcess][INFO] 	Attempted programs: 3
[     2.042][MainProcess][INFO] 		Rejected: 2
[     2.042][MainProcess][INFO] 		Failed: 0
[     2.042][MainProcess][INFO] 	Blacklist clauses: 0
[     2.042][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.042][MainProcess][DEBUG] 	0: Counter({'summarise': 11, 'mutate': 1})
[     2.043][MainProcess][DEBUG] 	1: Counter({'filter': 12})
[     2.043][MainProcess][INFO] Solution found: filter(summarise(@param0, n = n(), class), n > 5)
[     2.277][cube-solver-12][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/596.csv", col_types = cols(student = col_character(),class = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/596_o.csv", col_types = cols(class = col_character()))

df2 <- input1 %>% group_by(class) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 5)
out <- df3 %>% select(class) %>% arrange(class)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT CLASS
FROM
  (SELECT CLASS,
          COUNT() AS n
   FROM input1
   GROUP BY CLASS)
WHERE (n > 5.0)
ORDER BY CLASS
