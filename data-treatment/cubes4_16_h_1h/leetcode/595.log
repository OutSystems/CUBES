[     1.593][MainProcess][INFO] Parsing specification...
[     1.598][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.598][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.599][MainProcess][DEBUG] Reading input files...
[     1.608][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/595.csv: ['string', 'string', 'int64', 'int64', 'int64']
[     1.614][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/595_o.csv: ['string', 'int64', 'int64']
[     1.640][MainProcess][DEBUG] Generating DSL...
[     1.691][MainProcess][INFO] Creating 16 processes
[     1.765][MainProcess][DEBUG] Increasing generator loc to 2
[     1.767][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.769][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.772][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.778][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.780][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.785][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.789][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.793][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.797][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.804][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.807][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.811][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.816][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.818][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.828][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.868][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.586][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     3.242][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     3.247][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = filter())
[     3.248][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     3.258][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     3.263][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     3.264][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     3.272][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     3.272][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     3.273][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     3.277][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     3.277][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     3.279][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     3.279][cube-solver-12][DEBUG] Solving cube (l0 = filter(), l1 = semi_join())
[     3.283][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     3.285][cube-solver-14][DEBUG] Solving cube (l0 = filter(), l1 = inner_join())
[     3.292][cube-solver-2][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     3.307][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     3.309][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     3.327][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = cross_join([1]))
[     3.443][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter())
[     3.449][cube-solver-15][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     4.443][cube-solver-7][DEBUG] Found solution with cube (l0 = filter(), l1 = filter())
[     4.444][MainProcess][INFO] Statistics:
[     4.445][MainProcess][INFO] 	Generated cubes: 22
[     4.445][MainProcess][INFO] 	Attempted programs: 2
[     4.445][MainProcess][INFO] 		Rejected: 1
[     4.445][MainProcess][INFO] 		Failed: 0
[     4.445][MainProcess][INFO] 	Blacklist clauses: 1
[     4.445][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     4.446][MainProcess][DEBUG] 	0: Counter({'filter': 220})
[     4.446][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     4.446][MainProcess][DEBUG] 	0: Counter({'filter': 834, 'inner_join': 116, 'left_join': 104, 'union': 103, 'semi_join': 93})
[     4.447][MainProcess][DEBUG] 	1: Counter({'filter': 545, 'union': 134, 'anti_join': 125, 'left_join': 123, 'inner_join': 116, 'natural_join': 105, 'semi_join': 102})
[     4.447][MainProcess][INFO] Solution found: filter(filter(@param0, population >= 3000000 | population >= 25000000), population > 3000000 & population > 25000000)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/595.csv", col_types = cols(name = col_character(),continent = col_character(),area = col_integer(),population = col_integer(),gdp = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/595_o.csv", col_types = cols(name = col_character(),area = col_integer(),population = col_integer()))

df2 <- input1 %>% filter(population >= 3000000 | population >= 25000000)
df3 <- df2 %>% filter(population > 3000000 & population > 25000000)
out <- df3 %>% select(name, area, population) %>% arrange(name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT name,
       area,
       population
FROM
  (SELECT *
   FROM input1
   WHERE (population >= 3000000.0
          OR population >= 25000000.0))
WHERE (population > 3000000.0
       AND population > 25000000.0)
ORDER BY name
