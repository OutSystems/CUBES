[     2.919][MainProcess][INFO] Parsing specification...
[     2.924][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     2.924][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     2.924][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     2.925][MainProcess][DEBUG] Reading input files...
[     2.933][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2-1.txt: ['string', 'string']
[     2.938][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2-2.txt: ['string', 'string']
[     2.943][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2-3.txt: ['string', 'string']
[     2.948][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2-4.txt: ['string', 'string', 'int64']
[     2.952][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/2.out: ['int64']
[     2.987][MainProcess][DEBUG] Generating DSL...
[     3.035][MainProcess][INFO] Creating 16 processes
[     3.126][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.126][MainProcess][DEBUG] Increasing generator loc to 3
[     3.128][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.132][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.133][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.138][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.141][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.147][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.153][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.157][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.165][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.168][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.172][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.174][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     3.179][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.189][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     3.244][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     4.430][cube-solver-3][WARNING] There is no solution for current loc (2).
[     4.431][cube-solver-2][WARNING] There is no solution for current loc (2).
[     4.431][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     4.432][cube-solver-1][WARNING] There is no solution for current loc (2).
[     4.432][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     4.433][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     4.435][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.435][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.436][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.546][cube-solver-0][WARNING] There is no solution for current loc (2).
[     4.547][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     4.551][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     5.283][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     5.288][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     5.291][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     5.299][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     5.300][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     5.310][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     5.312][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     5.317][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     5.319][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = summarise([1]))
[     5.319][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = filter())
[     5.324][cube-solver-6][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = anti_join())
[     5.325][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = left_join())
[     5.325][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = union())
[     5.330][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([1]), l2 = filter())
[     5.332][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = intersect())
[     5.332][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = semi_join())
[     5.335][cube-solver-6][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = cross_join())
[     5.339][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = mutate())
[     5.340][cube-solver-8][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = inner_join())
[     5.340][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = anti_join(), l2 = filter())
[     5.343][cube-solver-6][DEBUG] Solving cube (l0 = summarise([2]), l1 = left_join(), l2 = filter())
[     5.345][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = union(), l2 = filter())
[     5.346][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = intersect(), l2 = filter())
[     5.351][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = cross_join(), l2 = filter())
[     5.351][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = semi_join(), l2 = filter())
[     5.354][cube-solver-6][DEBUG] Solving cube (l0 = summarise([2]), l1 = mutate(), l2 = filter())
[     5.356][cube-solver-7][DEBUG] Solving cube (l0 = summarise([3]), l1 = inner_join(), l2 = filter())
[     5.356][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     5.357][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = summarise([3]))
[     5.362][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = summarise([3]))
[     5.363][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = mutate())
[     5.363][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = mutate())
[     5.368][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4(), l2 = mutate())
[     5.369][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4(), l2 = summarise([3]))
[     5.369][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = summarise([3]), l2 = natural_join3())
[     5.371][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = summarise([3]), l2 = natural_join())
[     5.376][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([4]))
[     5.377][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]), l2 = natural_join4())
[     5.379][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]), l2 = filter())
[     5.379][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([4]), l2 = filter())
[     5.380][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]), l2 = summarise([4]))
[     5.385][cube-solver-7][DEBUG] Solving cube (l0 = filter([1]), l1 = summarise([4]), l2 = left_join())
[     5.385][cube-solver-8][DEBUG] Solving cube (l0 = filter([1]), l1 = summarise([4]), l2 = anti_join())
[     5.393][cube-solver-7][DEBUG] Solving cube (l0 = filter([2]), l1 = summarise([4]), l2 = intersect())
[     5.394][cube-solver-6][DEBUG] Solving cube (l0 = filter([1]), l1 = summarise([4]), l2 = union())
[     5.396][cube-solver-4][DEBUG] Solving cube (l0 = filter([2]), l1 = summarise([4]), l2 = semi_join())
[     5.398][cube-solver-8][DEBUG] Solving cube (l0 = filter([3]), l1 = summarise([5]), l2 = cross_join())
[     5.401][cube-solver-7][DEBUG] Solving cube (l0 = filter([3]), l1 = summarise([5]), l2 = mutate())
[     5.405][cube-solver-6][DEBUG] Solving cube (l0 = filter([3]), l1 = summarise([5]), l2 = inner_join())
[     5.409][cube-solver-4][DEBUG] Solving cube (l0 = filter([4]), l1 = filter([4]), l2 = summarise([5]))
[     5.409][cube-solver-7][DEBUG] Solving cube (l0 = filter([4]), l1 = filter([4]), l2 = mutate())
[     5.411][cube-solver-8][DEBUG] Solving cube (l0 = filter([4]), l1 = anti_join(), l2 = summarise([5]))
[     5.414][cube-solver-6][DEBUG] Solving cube (l0 = filter([5]), l1 = anti_join(), l2 = mutate())
[     5.416][cube-solver-7][DEBUG] Solving cube (l0 = filter([5]), l1 = left_join(), l2 = summarise([5]))
[     5.419][cube-solver-6][DEBUG] Solving cube (l0 = filter([6]), l1 = left_join(), l2 = mutate())
[     5.420][cube-solver-8][DEBUG] Solving cube (l0 = filter([6]), l1 = union(), l2 = summarise([5]))
[     5.424][cube-solver-7][DEBUG] Solving cube (l0 = filter([6]), l1 = union(), l2 = mutate())
[     5.424][cube-solver-6][DEBUG] Solving cube (l0 = filter([6]), l1 = intersect(), l2 = summarise([5]))
[     5.426][cube-solver-4][DEBUG] Solving cube (l0 = filter([6]), l1 = intersect(), l2 = mutate())
[     5.429][cube-solver-8][DEBUG] Solving cube (l0 = filter([6]), l1 = semi_join(), l2 = summarise([5]))
[     5.431][cube-solver-7][DEBUG] Solving cube (l0 = filter([6]), l1 = semi_join(), l2 = mutate())
[     5.432][cube-solver-4][DEBUG] Solving cube (l0 = filter([7]), l1 = cross_join(), l2 = summarise([6]))
[     5.433][cube-solver-6][DEBUG] Solving cube (l0 = filter([7]), l1 = cross_join(), l2 = mutate())
[     5.437][cube-solver-7][DEBUG] Solving cube (l0 = filter([7]), l1 = mutate(), l2 = natural_join())
[     5.438][cube-solver-8][DEBUG] Solving cube (l0 = filter([7]), l1 = mutate(), l2 = natural_join3())
[     5.439][cube-solver-6][DEBUG] Solving cube (l0 = filter([7]), l1 = mutate(), l2 = natural_join4([1]))
[     5.441][cube-solver-4][DEBUG] Solving cube (l0 = filter([7]), l1 = mutate(), l2 = summarise([6]))
[     5.444][cube-solver-7][DEBUG] Solving cube (l0 = filter([8]), l1 = mutate(), l2 = filter([8]))
[     5.449][cube-solver-8][DEBUG] Solving cube (l0 = filter([9]), l1 = mutate(), l2 = anti_join())
[     5.449][cube-solver-4][DEBUG] Solving cube (l0 = filter([9]), l1 = mutate(), l2 = left_join())
[     5.453][cube-solver-7][DEBUG] Solving cube (l0 = filter([9]), l1 = mutate(), l2 = union())
[     5.456][cube-solver-8][DEBUG] Solving cube (l0 = filter([10]), l1 = mutate(), l2 = intersect())
[     5.456][cube-solver-4][DEBUG] Solving cube (l0 = filter([10]), l1 = mutate(), l2 = semi_join())
[     5.460][cube-solver-7][DEBUG] Solving cube (l0 = filter([10]), l1 = mutate(), l2 = cross_join())
[     5.463][cube-solver-4][DEBUG] Solving cube (l0 = filter([10]), l1 = mutate(), l2 = mutate())
[     5.464][cube-solver-8][DEBUG] Solving cube (l0 = filter([10]), l1 = mutate(), l2 = inner_join())
[     5.467][cube-solver-7][DEBUG] Solving cube (l0 = filter([10]), l1 = inner_join(), l2 = summarise([6]))
[     5.469][cube-solver-4][DEBUG] Solving cube (l0 = filter([10]), l1 = inner_join(), l2 = mutate())
[     5.471][cube-solver-8][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([6]), l2 = filter([10]))
[     5.476][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([10]), l2 = summarise([6]))
[     5.477][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([10]), l2 = mutate())
[     5.482][cube-solver-8][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate(), l2 = filter([11]))
[     5.486][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([6]), l2 = filter([11]))
[     5.489][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = filter([12]), l2 = summarise([7]))
[     5.490][cube-solver-8][DEBUG] Solving cube (l0 = left_join(), l1 = filter([12]), l2 = mutate())
[     5.495][cube-solver-14][DEBUG] Found solution with cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     5.496][MainProcess][INFO] Statistics:
[     5.496][MainProcess][INFO] 	Generated cubes: 97
[     5.496][MainProcess][INFO] 	Attempted programs: 1
[     5.496][MainProcess][INFO] 		Rejected: 0
[     5.496][MainProcess][INFO] 		Failed: 0
[     5.496][MainProcess][INFO] 	Blacklist clauses: 23
[     5.496][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     5.496][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = mutate(), l2 = filter([13]))
[     5.497][MainProcess][DEBUG] 	0: Counter({'natural_join4': 12})
[     5.497][MainProcess][DEBUG] 	1: Counter({'filter': 12})
[     5.499][MainProcess][DEBUG] 	2: Counter({'mutate': 12})
[     5.499][MainProcess][INFO] Solution found: mutate(filter(natural_join4(@param0, @param2, @param1, @param3), F_name == 'faculty1' & major != 'History'), age = max(age))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/2-1.txt", col_types = cols(C_name = col_character(),F_key = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/2-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/2-3.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input3 <- copy_to(con, input3)
input4 <- read_csv("tests-examples/textbook/tables/2-4.txt", col_types = cols(S_key = col_character(),major = col_character(),age = col_integer()))
input4 <- copy_to(con, input4)
expected_output <- read_csv("tests-examples/textbook/tables/2.out", col_types = cols(maxage = col_integer()))

df5 <- inner_join(input1, input3) %>% inner_join(input2) %>% inner_join(input4)
df6 <- df5 %>% filter(F_name == 'faculty1' & major != 'History')
df7 <- df6 %>% mutate(age = max(age))
out <- df7 %>% select(maxage = age) %>% distinct() %>% arrange(maxage)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT MAX(`age`) OVER () AS `maxage`
FROM
  (SELECT `LHS`.`C_name` AS `C_name`,
          `LHS`.`F_key` AS `F_key`,
          `LHS`.`F_name` AS `F_name`,
          `LHS`.`S_key` AS `S_key`,
          `RHS`.`major` AS `major`,
          `RHS`.`age` AS `age`
   FROM
     (SELECT `LHS`.`C_name` AS `C_name`,
             `LHS`.`F_key` AS `F_key`,
             `LHS`.`F_name` AS `F_name`,
             `RHS`.`S_key` AS `S_key`
      FROM
        (SELECT `LHS`.`C_name` AS `C_name`,
                `LHS`.`F_key` AS `F_key`,
                `RHS`.`F_name` AS `F_name`
         FROM `input1` AS `LHS`
         INNER JOIN `input3` AS `RHS` ON (`LHS`.`F_key` = `RHS`.`F_key`)) AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`C_name` = `RHS`.`C_name`)) AS `LHS`
   INNER JOIN `input4` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`F_name` = 'faculty1'
       AND `major` != 'History')
ORDER BY maxage
