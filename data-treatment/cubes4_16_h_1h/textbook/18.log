[     1.628][MainProcess][INFO] Parsing specification...
[     1.631][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.631][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.632][MainProcess][DEBUG] Reading input files...
[     1.639][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/18-1.txt: ['string', 'string', 'int64']
[     1.644][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/18-3.txt: ['string', 'string']
[     1.649][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/18.out: ['string', 'string']
[     1.677][MainProcess][DEBUG] Generating DSL...
[     1.697][MainProcess][INFO] Creating 16 processes
[     1.769][MainProcess][DEBUG] Increasing generator loc to 2
[     1.769][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.769][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.770][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.770][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.770][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.770][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.770][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.775][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.775][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.781][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.783][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.799][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.805][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.811][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.821][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.828][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.009][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.010][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.011][cube-solver-1][WARNING] There is no solution for current loc (1).
[     2.012][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.012][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.013][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.054][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.061][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.064][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.079][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = anti_join())
[     2.102][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([4]))
[     2.109][cube-solver-6][DEBUG] Solving cube (l0 = summarise([4]), l1 = mutate())
[     2.115][cube-solver-6][DEBUG] Solving cube (l0 = summarise([5]), l1 = inner_join())
[     2.120][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([5]))
[     2.131][cube-solver-9][DEBUG] Solving cube (l0 = summarise([5]), l1 = natural_join3())
[     2.371][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([23]))
[     2.371][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.371][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.371][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.375][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.375][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = summarise([23]))
[     2.378][cube-solver-5][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([23]))
[     2.386][cube-solver-12][DEBUG] Solving cube (l0 = summarise([23]), l1 = filter())
[     2.391][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.394][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([24]))
[     2.400][cube-solver-11][DEBUG] Solving cube (l0 = summarise([24]), l1 = summarise([24]))
[     2.403][cube-solver-14][DEBUG] Solving cube (l0 = summarise([24]), l1 = left_join())
[     2.406][cube-solver-12][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.413][cube-solver-15][DEBUG] Solving cube (l0 = summarise([25]), l1 = union())
[     2.437][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = summarise([26]))
[     2.542][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise([5]), l1 = natural_join3())
[     2.543][MainProcess][INFO] Statistics:
[     2.543][MainProcess][INFO] 	Generated cubes: 28
[     2.543][MainProcess][INFO] 	Attempted programs: 4
[     2.543][MainProcess][INFO] 		Rejected: 1
[     2.543][MainProcess][INFO] 		Failed: 2
[     2.543][MainProcess][INFO] 	Blacklist clauses: 29
[     2.543][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.544][MainProcess][DEBUG] 	0: Counter({'summarise': 91, 'natural_join': 38, 'left_join': 17, 'union': 4})
[     2.544][MainProcess][DEBUG] 	1: Counter({'natural_join3': 45, 'summarise': 37, 'natural_join': 25, 'mutate': 22, 'inner_join': 16, 'union': 5})
[     2.544][MainProcess][INFO] Solution found: natural_join3(summarise(@param0, cost = max(cost), P_id), @param0, @param1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/18-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/18-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/18.out", col_types = cols(P_id = col_character(),S_name = col_character()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = max(cost)) %>% ungroup()
df4 <- inner_join(df3, input1) %>% inner_join(input2)
out <- df4 %>% select(P_id, S_name) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_id,
       S_name
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.cost AS cost,
          LHS.S_key AS S_key,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.cost AS cost,
             RHS.S_key AS S_key
      FROM
        (SELECT P_id,
                MAX(cost) AS cost
         FROM input1
         GROUP BY P_id) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id
                                   AND LHS.cost = RHS.cost)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY P_id
