[     1.561][MainProcess][INFO] Parsing specification...
[     1.564][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.564][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.564][MainProcess][DEBUG] Reading input files...
[     1.570][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/employees.txt: ['int64', 'string', 'int64']
[     1.574][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.576][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     1.580][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/28.out: ['string']
[     1.609][MainProcess][DEBUG] Generating DSL...
[     1.628][MainProcess][INFO] Creating 16 processes
[     1.691][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.691][MainProcess][DEBUG] Increasing generator loc to 2
[     1.692][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.692][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.693][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.693][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.693][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.693][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.699][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.701][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.703][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.712][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.713][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.716][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.717][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.733][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.743][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.904][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.905][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     1.906][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.067][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     2.067][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.071][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.071][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.072][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.074][cube-solver-3][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     2.074][cube-solver-6][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     2.075][MainProcess][DEBUG] Increasing generator loc to 3
[     2.075][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     2.075][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.076][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     2.077][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.078][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.085][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     2.085][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     2.088][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.090][cube-solver-12][DEBUG] Solving cube (l0 = filter(), l1 = semi_join())
[     2.091][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.092][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     2.095][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.095][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.106][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter())
[     2.111][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.131][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     2.136][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.158][cube-solver-14][DEBUG] Solving cube (l0 = filter(), l1 = inner_join())
[     2.162][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.195][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     2.199][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.252][cube-solver-2][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter())
[     2.253][MainProcess][INFO] Statistics:
[     2.254][MainProcess][INFO] 	Generated cubes: 33
[     2.254][MainProcess][INFO] 	Attempted programs: 3
[     2.254][MainProcess][INFO] 		Rejected: 0
[     2.254][MainProcess][INFO] 		Failed: 2
[     2.254][MainProcess][INFO] 	Blacklist clauses: 2
[     2.254][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.254][MainProcess][DEBUG] 	0: Counter({'natural_join3': 10})
[     2.255][MainProcess][DEBUG] 	1: Counter({'filter': 10})
[     2.255][MainProcess][INFO] Solution found: filter(natural_join3(@param2, @param1, @param0), str_detect(aname, 'Boeing'))
[     2.807][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/employees.txt", col_types = cols(eid = col_integer(),ename = col_character(),salary = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/28.out", col_types = cols(ename = col_character()))

df4 <- inner_join(input3, input2) %>% inner_join(input1)
df5 <- df4 %>% filter(str_detect(aname, 'Boeing'))
out <- df5 %>% select(ename) %>% distinct() %>% arrange(ename)

Failed to generate SQL query
