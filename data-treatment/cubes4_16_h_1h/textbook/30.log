[     1.569][MainProcess][INFO] Parsing specification...
[     1.572][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.572][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.573][MainProcess][DEBUG] Reading input files...
[     1.580][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.590][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/flights.txt: ['int64', 'string', 'string', 'int64', 'datetime64[ns]', 'datetime64[ns]', 'int64']
[     1.595][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     1.600][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/employees.txt: ['int64', 'string', 'int64']
[     1.604][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/30.out: ['object', 'object']
[     1.643][MainProcess][DEBUG] Generating DSL...
[     1.756][MainProcess][INFO] Creating 16 processes
[     1.821][MainProcess][DEBUG] Increasing generator loc to 2
[     1.986][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.995][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.997][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     2.003][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.012][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     2.013][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.016][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     2.017][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     2.022][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     2.022][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     2.023][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     2.024][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     2.024][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     2.028][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     2.043][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.087][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     4.293][cube-solver-0][WARNING] There is no solution for current loc (1).
[     4.294][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     4.299][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.646][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     7.665][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     7.671][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     7.672][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     7.676][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     7.687][cube-solver-1][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     7.689][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     7.693][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     7.697][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     7.704][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     7.707][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     7.721][cube-solver-11][DEBUG] Solving cube (l0 = filter([1]), l1 = intersect())
[     7.722][cube-solver-12][DEBUG] Solving cube (l0 = filter([1]), l1 = semi_join())
[     7.722][cube-solver-2][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     7.723][cube-solver-13][DEBUG] Solving cube (l0 = filter([1]), l1 = cross_join())
[     7.726][MainProcess][DEBUG] Increasing generator loc to 3
[     7.727][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     7.763][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     7.768][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([2]))
[     7.769][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     7.770][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     7.770][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     7.770][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     7.774][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     7.776][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     7.777][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     7.789][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     7.791][cube-solver-9][DEBUG] Solving cube (l0 = filter([3]), l1 = left_join())
[     7.815][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     7.818][cube-solver-7][DEBUG] Solving cube (l0 = filter([4]), l1 = filter([4]))
[     7.822][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     7.843][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     8.130][cube-solver-14][DEBUG] Solving cube (l0 = filter([21]), l1 = inner_join())
[     8.213][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[    12.508][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([137]))
[    12.614][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    15.758][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([249]), l2 = intersect())
[    15.847][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([256]), l2 = anti_join())
[    15.905][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([260]), l2 = cross_join())
[    15.972][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([262]), l2 = left_join())
[    16.054][cube-solver-9][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([267]), l2 = inner_join())
[    16.156][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([269]), l2 = filter([269]))
[    16.246][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect(), l2 = filter([271]))
[    16.318][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join(), l2 = filter([276]))
[    16.409][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([279]), l2 = semi_join())
[    16.480][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([283]), l2 = natural_join4([22]))
[    16.570][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join(), l2 = filter([287]))
[    16.659][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join(), l2 = filter([296]))
[    16.740][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join(), l2 = filter([300]))
[    16.822][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([1]), l1 = natural_join([1]), l2 = filter([303]))
[    16.898][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3(), l2 = filter([306]))
[    17.020][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([3]), l1 = filter([311]), l2 = union())
[    17.118][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([5]), l1 = left_join(), l2 = filter([316]))
[    17.227][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([5]), l1 = natural_join4([22]), l2 = filter([318]))
[    17.386][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([393]), l2 = natural_join([5]))
[    17.485][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([398]), l2 = natural_join3())
[    17.620][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([429]), l2 = natural_join4([22]))
[    17.716][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([430]), l2 = filter([430]))
[    17.830][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([437]), l2 = anti_join())
[    17.945][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3([3]), l1 = filter([442]), l2 = left_join())
[    18.134][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3([9]), l1 = filter([449]), l2 = union())
[    18.356][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3([9]), l1 = filter([476]), l2 = intersect())
[    18.591][cube-solver-7][DEBUG] Solving cube (l0 = natural_join3([14]), l1 = filter([491]), l2 = semi_join())
[    18.824][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3([15]), l1 = filter([504]), l2 = cross_join())
[    19.108][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = filter([524]), l2 = inner_join())
[    19.515][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([8]), l1 = filter([621]), l2 = natural_join3([18]))
[    19.917][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([8]), l1 = filter([635]), l2 = natural_join([8]))
[    20.338][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([8]), l1 = union(), l2 = filter([667]))
[    20.802][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3([20]), l1 = anti_join(), l2 = filter([702]))
[    21.218][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([20]), l1 = left_join(), l2 = filter([725]))
[    60.544][cube-solver-15][DEBUG] Found solution with cube (l0 = natural_join3([16]), l1 = filter([524]), l2 = inner_join())
[    60.549][MainProcess][INFO] Statistics:
[    60.550][MainProcess][INFO] 	Generated cubes: 56
[    60.550][MainProcess][INFO] 	Attempted programs: 1943
[    60.550][MainProcess][INFO] 		Rejected: 0
[    60.550][MainProcess][INFO] 		Failed: 1942
[    60.550][MainProcess][INFO] 	Blacklist clauses: 777
[    60.550][MainProcess][DEBUG] Priting statistics for good programs of size 3
[    60.553][MainProcess][DEBUG] 	0: Counter({'natural_join3': 4492})
[    60.556][MainProcess][DEBUG] 	1: Counter({'filter': 4492})
[    60.558][MainProcess][DEBUG] 	2: Counter({'union': 4469, 'inner_join': 23})
[    60.558][MainProcess][INFO] Solution found: inner_join(@param1, filter(natural_join3(@param3, @param2, @param0), crusingrange < 100000), 'flno' = 'aid','price' = 'eid')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/flights.txt", col_types = cols(flno = col_integer(),origin = col_character(),destination = col_character(),distance = col_integer(),departs = col_character(),arrives = col_character(),price = col_integer()))
input2$departs <- dmy(input2$departs)
input2$arrives <- dmy(input2$arrives)
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input3 <- copy_to(con, input3)
input4 <- read_csv("tests-examples/textbook/tables/employees.txt", col_types = cols(eid = col_integer(),ename = col_character(),salary = col_integer()))
input4 <- copy_to(con, input4)
expected_output <- read_csv("tests-examples/textbook/tables/30.out", col_types = cols(origin = col_character(),destination = col_character()))

df5 <- inner_join(input4, input3) %>% inner_join(input1)
df6 <- df5 %>% filter(crusingrange < 100000)
df7 <- inner_join(input2, df6, by=c('flno' = 'aid','price' = 'eid'), suffix = c('', '.other'))
out <- df7 %>% select(origin, destination) %>% arrange(origin)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT origin,
       destination
FROM
  (SELECT LHS.flno AS flno,
          LHS.origin AS origin,
          LHS.destination AS destination,
          LHS.distance AS distance,
          LHS.departs AS departs,
          LHS.arrives AS arrives,
          LHS.price AS price,
          RHS.ename AS ename,
          RHS.salary AS salary,
          RHS.aname AS aname,
          RHS.crusingrange AS crusingrange
   FROM input2 AS LHS
   INNER JOIN
     (SELECT *
      FROM
        (SELECT LHS.eid AS eid,
                LHS.ename AS ename,
                LHS.salary AS salary,
                LHS.aid AS aid,
                RHS.aname AS aname,
                RHS.crusingrange AS crusingrange
         FROM
           (SELECT LHS.eid AS eid,
                   LHS.ename AS ename,
                   LHS.salary AS salary,
                   RHS.aid AS aid
            FROM input4 AS LHS
            INNER JOIN input3 AS RHS ON (LHS.eid = RHS.eid)) AS LHS
         INNER JOIN input1 AS RHS ON (LHS.aid = RHS.aid))
      WHERE (crusingrange < 100000.0)) AS RHS ON (LHS.flno = RHS.aid
                                                  AND LHS.price = RHS.eid))
ORDER BY origin
