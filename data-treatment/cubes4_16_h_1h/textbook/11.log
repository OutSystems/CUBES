[     3.027][MainProcess][INFO] Parsing specification...
[     3.031][MainProcess][DEBUG] Reading input files...
[     3.039][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/11-1.txt: ['string', 'string']
[     3.044][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/11-2.txt: ['string', 'string']
[     3.048][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/11.out: ['string']
[     3.078][MainProcess][DEBUG] Generating DSL...
[     3.097][MainProcess][INFO] Creating 16 processes
[     3.178][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.178][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.178][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.178][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.179][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.179][MainProcess][DEBUG] Increasing generator loc to 2
[     3.178][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.179][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     3.178][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.179][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.189][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     3.189][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.190][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.200][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.208][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.214][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.220][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.253][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     3.265][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     3.280][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.282][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.313][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.313][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     3.316][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     3.320][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.324][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     3.325][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     3.325][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.327][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.332][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     3.342][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.345][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect())
[     3.356][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([2]))
[     3.360][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     3.361][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([3]))
[     3.362][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.364][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     3.365][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect())
[     3.366][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     3.368][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     3.369][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join())
[     3.370][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     3.372][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     3.373][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     3.374][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([3]))
[     3.376][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     3.377][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     3.378][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect())
[     3.380][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     3.381][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     3.382][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join())
[     3.383][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     3.385][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     3.386][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     3.387][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([3]), l1 = natural_join())
[     3.408][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     3.418][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.418][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([2]))
[     3.442][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.453][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     3.473][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.505][cube-solver-3][DEBUG] Found solution with cube (l0 = anti_join(),)
[     3.506][MainProcess][INFO] Statistics:
[     3.506][MainProcess][INFO] 	Generated cubes: 44
[     3.506][MainProcess][INFO] 	Attempted programs: 18
[     3.506][MainProcess][INFO] 		Rejected: 9
[     3.506][MainProcess][INFO] 		Failed: 8
[     3.507][MainProcess][INFO] 	Blacklist clauses: 12
[     3.507][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     3.507][MainProcess][DEBUG] 	0: Counter({'union': 12, 'left_join': 12, 'natural_join': 12, 'inner_join': 10, 'semi_join': 8, 'anti_join': 7})
[     3.507][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     3.507][MainProcess][DEBUG] 	0: Counter({'natural_join': 15})
[     3.507][MainProcess][DEBUG] 	1: Counter({'left_join': 9, 'semi_join': 5, 'union': 1})
[     3.507][MainProcess][INFO] Solution found: anti_join(@param0, @param1, )
[     3.580][cube-solver-10][DEBUG] Found solution with cube (l0 = anti_join([3]), l1 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/11-1.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/11-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/11.out", col_types = cols(S_name = col_character()))

df3 <- anti_join(input1, input2, by=c())
out <- df3 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM input2 AS RHS
        WHERE (LHS.S_key = RHS.S_key) ))
ORDER BY S_name
