[     1.636][MainProcess][INFO] Parsing specification...
[     1.639][MainProcess][DEBUG] Reading input files...
[     1.646][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/13-1.txt: ['string', 'string']
[     1.651][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/13-2.txt: ['string', 'string']
[     1.655][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/13.out: ['string']
[     1.683][MainProcess][DEBUG] Generating DSL...
[     1.696][MainProcess][INFO] Creating 16 processes
[     1.773][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.773][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     1.773][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     1.773][MainProcess][DEBUG] Increasing generator loc to 2
[     1.773][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     1.773][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     1.773][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     1.773][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     1.773][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     1.773][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.774][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     1.781][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.794][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.801][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.801][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.804][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.812][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.843][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     1.843][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     1.843][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     1.843][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     1.846][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     1.852][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     1.877][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.909][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     1.912][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     1.912][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     1.912][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     1.914][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.915][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.941][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([3]))
[     1.942][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     1.947][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     1.949][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     1.950][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([3]))
[     1.951][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([2]))
[     1.955][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     1.957][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.958][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect([1]))
[     1.962][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     1.963][cube-solver-4][DEBUG] Found solution with cube (l0 = left_join(),)
[     1.964][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     1.965][MainProcess][INFO] Statistics:
[     1.965][MainProcess][INFO] 	Generated cubes: 26
[     1.965][MainProcess][INFO] 	Attempted programs: 6
[     1.965][MainProcess][INFO] 		Rejected: 3
[     1.966][MainProcess][INFO] 		Failed: 2
[     1.966][MainProcess][INFO] 	Blacklist clauses: 9
[     1.966][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     1.967][MainProcess][DEBUG] 	0: Counter({'union': 12, 'left_join': 11, 'inner_join': 6, 'anti_join': 2, 'natural_join': 2, 'semi_join': 2})
[     1.967][MainProcess][INFO] Solution found: left_join(@param0, @param1)
[     1.976][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join(),)
[     1.977][cube-solver-7][DEBUG] Found solution with cube (l0 = semi_join(),)
[     1.999][cube-solver-11][DEBUG] Found solution with cube (l0 = natural_join(), l1 = left_join())
[     2.019][cube-solver-14][DEBUG] Found solution with cube (l0 = natural_join(), l1 = semi_join())
[     2.168][cube-solver-9][DEBUG] Found solution with cube (l0 = inner_join(),)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/13-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/13-2.txt", col_types = cols(P_id = col_character(),P_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/13.out", col_types = cols(P_name = col_character()))

df3 <- left_join(input1, input2)
out <- df3 %>% select(P_name) %>% arrange(P_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.P_id AS P_id,
          RHS.P_name AS P_name
   FROM input1 AS LHS
   LEFT JOIN input2 AS RHS ON (LHS.P_id = RHS.P_id))
ORDER BY P_name
