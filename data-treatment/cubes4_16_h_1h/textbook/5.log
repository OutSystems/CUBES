[     1.564][MainProcess][INFO] Parsing specification...
[     1.567][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.568][MainProcess][DEBUG] Reading input files...
[     1.575][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5-1.txt: ['string', 'string', 'string']
[     1.580][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5-2.txt: ['string', 'string']
[     1.584][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5.out: ['string']
[     1.611][MainProcess][DEBUG] Generating DSL...
[     1.631][MainProcess][INFO] Creating 16 processes
[     1.692][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.692][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.692][MainProcess][DEBUG] Increasing generator loc to 3
[     1.692][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.692][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.693][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.694][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.695][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.706][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.707][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.707][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.711][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.717][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.719][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.735][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.740][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.743][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.076][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.077][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.079][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.204][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.205][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.207][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.246][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.247][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.248][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.325][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.326][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.328][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.341][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.343][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.344][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.349][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.354][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.354][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.357][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.359][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.361][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.363][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = filter())
[     2.365][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = anti_join())
[     2.365][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = left_join())
[     2.368][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([1]), l2 = filter())
[     2.375][cube-solver-12][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter(), l2 = union())
[     2.409][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([2]))
[     2.416][cube-solver-11][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([2]), l2 = intersect())
[     2.420][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([4]), l2 = filter([2]))
[     2.431][cube-solver-8][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([2]), l2 = semi_join())
[     2.440][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([3]))
[     2.593][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = summarise([10]))
[     2.608][cube-solver-13][DEBUG] Solving cube (l0 = summarise([10]), l1 = filter([4]), l2 = cross_join())
[     2.733][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = mutate())
[     2.738][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.740][MainProcess][INFO] Statistics:
[     2.740][MainProcess][INFO] 	Generated cubes: 31
[     2.740][MainProcess][INFO] 	Attempted programs: 13
[     2.740][MainProcess][INFO] 		Rejected: 1
[     2.740][MainProcess][INFO] 		Failed: 11
[     2.740][MainProcess][INFO] 	Blacklist clauses: 15
[     2.740][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.741][MainProcess][DEBUG] 	0: Counter({'summarise': 67, 'natural_join': 48})
[     2.741][MainProcess][DEBUG] 	1: Counter({'filter': 67, 'mutate': 26, 'summarise': 22})
[     2.741][MainProcess][DEBUG] 	2: Counter({'filter': 48, 'union': 19, 'left_join': 16, 'natural_join3': 13, 'semi_join': 11, 'natural_join': 8})
[     2.741][MainProcess][INFO] Solution found: natural_join3(@param1, filter(summarise(@param0, n = n(), F_key), n == max(n)), summarise(@param0, n = n(), F_key))
[     3.080][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.141][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise([4]), l1 = filter([2]), l2 = semi_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/5-1.txt", col_types = cols(C_name = col_character(),F_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/5-2.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/5.out", col_types = cols(F_name = col_character()))

df3 <- input1 %>% group_by(F_key) %>% summarise(n = n()) %>% ungroup()
df4 <- df3 %>% filter(n == max(n))
df5 <- inner_join(input2, df4) %>% inner_join(df3)
out <- df5 %>% select(F_name) %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT F_name
FROM
  (SELECT LHS.F_key AS F_key,
          LHS.F_name AS F_name,
          LHS.n AS n
   FROM
     (SELECT LHS.F_key AS F_key,
             LHS.F_name AS F_name,
             RHS.n AS n
      FROM input2 AS LHS
      INNER JOIN
        (SELECT F_key,
                n
         FROM
           (SELECT F_key,
                   n,
                   MAX(n) OVER () AS zzz3
            FROM
              (SELECT F_key,
                      COUNT() AS n
               FROM input1
               GROUP BY F_key))
         WHERE (n = zzz3)) AS RHS ON (LHS.F_key = RHS.F_key)) AS LHS
   INNER JOIN
     (SELECT F_key,
             COUNT() AS n
      FROM input1
      GROUP BY F_key) AS RHS ON (LHS.F_key = RHS.F_key
                                 AND LHS.n = RHS.n))
ORDER BY F_name
