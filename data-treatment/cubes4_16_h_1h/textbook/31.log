[     1.606][MainProcess][INFO] Parsing specification...
[     1.610][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.610][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.611][MainProcess][DEBUG] Reading input files...
[     1.618][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.622][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     1.627][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/employees.txt: ['int64', 'string', 'int64']
[     1.631][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/31.out: ['string']
[     1.660][MainProcess][DEBUG] Generating DSL...
[     1.681][MainProcess][INFO] Creating 16 processes
[     1.743][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.743][MainProcess][DEBUG] Increasing generator loc to 2
[     1.745][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.745][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.745][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.745][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.745][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.749][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.757][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.760][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.761][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.765][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.769][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.773][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.785][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.787][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.797][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.087][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.088][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     2.089][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.248][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.253][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     2.254][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     2.257][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.258][cube-solver-4][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.258][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     2.260][cube-solver-8][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.260][cube-solver-4][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     2.261][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     2.262][MainProcess][DEBUG] Increasing generator loc to 3
[     2.262][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.263][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.265][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.273][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     2.274][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     2.275][cube-solver-12][DEBUG] Solving cube (l0 = filter(), l1 = semi_join())
[     2.277][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.278][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.280][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     2.281][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.282][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter())
[     2.283][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.288][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.339][cube-solver-14][DEBUG] Solving cube (l0 = filter([3]), l1 = inner_join())
[     2.339][cube-solver-10][DEBUG] Solving cube (l0 = filter([3]), l1 = union())
[     2.343][cube-solver-5][DEBUG] Solving cube (l0 = filter([3]), l1 = natural_join3())
[     2.346][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.346][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.482][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([12]))
[     2.529][cube-solver-13][DEBUG] Solving cube (l0 = filter([12]), l1 = cross_join())
[     2.540][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.554][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([12]))
[     2.565][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.626][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([14]))
[     2.639][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.076][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([20]), l2 = filter([20]))
[     3.092][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = union(), l2 = filter([20]))
[     3.133][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([20]), l2 = cross_join())
[     3.161][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([20]), l2 = semi_join())
[     3.187][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([20]), l2 = anti_join())
[     3.187][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([20]), l2 = natural_join())
[     3.224][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([20]), l2 = union())
[     3.292][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = natural_join3([1]))
[     3.390][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = left_join())
[     3.414][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = intersect())
[     3.457][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([20]))
[     3.474][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = filter([20]))
[     3.532][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = natural_join4())
[     3.656][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = inner_join())
[     3.711][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = filter([20]))
[     5.778][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([20]))
[     7.045][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     7.687][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     7.690][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join(), l2 = filter([20]))
[     8.478][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join(), l2 = filter([20]))
[     8.701][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]), l2 = filter([20]))
[     8.870][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3([2]), l2 = filter([20]))
[     8.881][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join4(), l2 = filter([20]))
[     8.891][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = natural_join([2]))
[     8.909][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = natural_join3([2]))
[    11.539][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = natural_join4())
[    11.564][cube-solver-7][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = filter([20]))
[    11.667][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = anti_join())
[    11.801][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = left_join())
[    12.453][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = union())
[    13.588][cube-solver-12][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = anti_join())
[    13.590][MainProcess][INFO] Statistics:
[    13.590][MainProcess][INFO] 	Generated cubes: 50
[    13.590][MainProcess][INFO] 	Attempted programs: 1397
[    13.590][MainProcess][INFO] 		Rejected: 608
[    13.590][MainProcess][INFO] 		Failed: 788
[    13.590][MainProcess][INFO] 	Blacklist clauses: 24
[    13.590][MainProcess][DEBUG] Priting statistics for good programs of size 2
[    13.592][MainProcess][DEBUG] 	0: Counter({'filter': 1555, 'natural_join3': 480})
[    13.593][MainProcess][DEBUG] 	1: Counter({'natural_join4': 1075, 'filter': 480, 'natural_join3': 480})
[    13.594][MainProcess][DEBUG] Priting statistics for good programs of size 3
[    13.599][MainProcess][DEBUG] 	0: Counter({'natural_join': 9050, 'natural_join3': 2218})
[    13.604][MainProcess][DEBUG] 	1: Counter({'filter': 8064, 'union': 960, 'left_join': 960, 'natural_join': 660, 'inner_join': 344, 'semi_join': 280})
[    13.610][MainProcess][DEBUG] 	2: Counter({'filter': 3470, 'natural_join3': 1735, 'natural_join': 1584, 'natural_join4': 1282, 'left_join': 1196, 'union': 1110, 'semi_join': 560, 'inner_join': 172, 'anti_join': 162})
[    13.610][MainProcess][INFO] Solution found: anti_join(natural_join3(@param0, @param1, @param2), filter(@param0, str_detect(aname, 'Boeing') | crusingrange < 3000), 'aid', 'aname')
[    14.237][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/employees.txt", col_types = cols(eid = col_integer(),ename = col_character(),salary = col_integer()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/31.out", col_types = cols(ename = col_character()))

df4 <- inner_join(input1, input2) %>% inner_join(input3)
df5 <- input1 %>% filter(str_detect(aname, 'Boeing') | crusingrange < 3000)
df6 <- anti_join(df4, df5, by=c('aid', 'aname'))
out <- df6 %>% select(ename) %>% distinct() %>% arrange(ename)

Failed to generate SQL query
