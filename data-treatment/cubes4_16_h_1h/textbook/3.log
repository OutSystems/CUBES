[     1.621][MainProcess][INFO] Parsing specification...
[     1.624][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.625][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.625][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.625][MainProcess][DEBUG] Reading input files...
[     1.633][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3-1.txt: ['string', 'string']
[     1.638][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3-2.txt: ['string', 'string']
[     1.642][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3.out: ['string']
[     1.669][MainProcess][DEBUG] Generating DSL...
[     1.691][MainProcess][INFO] Creating 16 processes
[     1.750][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.750][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.750][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.751][MainProcess][DEBUG] Increasing generator loc to 3
[     1.751][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.752][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.752][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.755][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.763][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.767][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.769][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.771][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.778][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.779][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.790][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.791][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.802][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.085][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.086][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.088][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.147][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.148][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.149][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.166][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.167][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.168][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.241][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.241][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.243][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.330][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.334][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.337][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.339][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.339][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.340][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.344][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.345][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.348][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.348][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.348][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.351][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.353][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     2.423][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[     2.443][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     2.449][cube-solver-15][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([1]), l2 = intersect())
[     2.458][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = mutate())
[     2.463][cube-solver-14][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([1]), l2 = semi_join())
[     2.481][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = summarise([4]))
[     2.487][cube-solver-5][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter([5]), l2 = cross_join())
[     2.531][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([8]), l2 = summarise([6]))
[     2.546][cube-solver-13][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([9]), l2 = mutate())
[     2.559][cube-solver-13][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([12]), l2 = inner_join())
[     2.682][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([17]))
[     2.683][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([6]), l2 = filter([17]))
[     2.690][cube-solver-2][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter([17]))
[     2.696][cube-solver-11][DEBUG] Solving cube (l0 = summarise([6]), l1 = anti_join(), l2 = filter([18]))
[     2.888][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join4(), l2 = filter([22]))
[     2.909][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([24]))
[     2.913][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = summarise([6]), l2 = filter([25]))
[     2.930][cube-solver-3][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter([25]))
[     2.940][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = union(), l2 = filter([25]))
[     5.076][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise([6]), l2 = filter([17]))
[     5.078][MainProcess][INFO] Statistics:
[     5.078][MainProcess][INFO] 	Generated cubes: 36
[     5.078][MainProcess][INFO] 	Attempted programs: 42
[     5.078][MainProcess][INFO] 		Rejected: 39
[     5.078][MainProcess][INFO] 		Failed: 2
[     5.078][MainProcess][INFO] 	Blacklist clauses: 31
[     5.079][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     5.080][MainProcess][DEBUG] 	0: Counter({'summarise': 1136, 'natural_join': 477})
[     5.081][MainProcess][DEBUG] 	1: Counter({'filter': 328, 'mutate': 244, 'summarise': 233, 'natural_join3': 226, 'union': 198, 'natural_join': 180, 'left_join': 160, 'anti_join': 44})
[     5.081][MainProcess][DEBUG] 	2: Counter({'filter': 1285, 'union': 128, 'natural_join': 80, 'semi_join': 54, 'left_join': 42, 'natural_join3': 24})
[     5.082][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param1, @param0), n = n(), ID_key, Room), Room == 'R128' | n > 4)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/3-1.txt", col_types = cols(ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/3-2.txt", col_types = cols(ID_key_student = col_character(),ID_key = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/3.out", col_types = cols(ID_key = col_character()))

df3 <- inner_join(input2, input1)
df4 <- df3 %>% group_by(ID_key, Room) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(Room == 'R128' | n > 4)
out <- df5 %>% select(ID_key) %>% arrange(ID_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `ID_key`
FROM
  (SELECT `ID_key`,
          `Room`,
          COUNT() AS `n`
   FROM
     (SELECT `LHS`.`ID_key_student` AS `ID_key_student`,
             `LHS`.`ID_key` AS `ID_key`,
             `RHS`.`Room` AS `Room`
      FROM `input2` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
   GROUP BY `ID_key`,
            `Room`)
WHERE (`Room` = 'R128'
       OR n > 4.0)
ORDER BY ID_key
