[     1.572][MainProcess][INFO] Parsing specification...
[     1.575][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.575][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.576][MainProcess][DEBUG] Reading input files...
[     1.583][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21-1.txt: ['string', 'string']
[     1.588][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21-2.txt: ['string', 'string']
[     1.593][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21-3.txt: ['string', 'string']
[     1.597][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21.out: ['string']
[     1.626][MainProcess][DEBUG] Generating DSL...
[     1.643][MainProcess][INFO] Creating 16 processes
[     1.706][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.706][MainProcess][DEBUG] Increasing generator loc to 2
[     1.707][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.707][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.707][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.707][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.709][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.714][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.720][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.721][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.741][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.745][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.745][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.747][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.954][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.955][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     1.956][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.054][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     2.055][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.057][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.059][cube-solver-4][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.060][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.061][cube-solver-4][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     2.063][cube-solver-4][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     2.064][MainProcess][DEBUG] Increasing generator loc to 3
[     2.064][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.064][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     2.067][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.067][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     2.070][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.079][cube-solver-8][DEBUG] Solving cube (l0 = filter([1]), l1 = anti_join())
[     2.086][cube-solver-14][DEBUG] Solving cube (l0 = filter([1]), l1 = inner_join())
[     2.087][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.092][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([1]))
[     2.092][cube-solver-5][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join3())
[     2.093][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.097][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.116][cube-solver-10][DEBUG] Solving cube (l0 = filter([2]), l1 = union())
[     2.122][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.153][cube-solver-11][DEBUG] Solving cube (l0 = filter([5]), l1 = intersect())
[     2.161][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.185][cube-solver-12][DEBUG] Solving cube (l0 = filter([5]), l1 = semi_join())
[     2.193][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.333][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([15]))
[     2.335][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([15]))
[     2.335][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([15]))
[     2.344][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.347][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.354][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([16]))
[     2.365][cube-solver-13][DEBUG] Solving cube (l0 = filter([16]), l1 = cross_join())
[     2.367][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.377][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.662][cube-solver-6][DEBUG] Found solution with cube (l0 = filter(), l1 = natural_join4())
[     2.663][MainProcess][INFO] Statistics:
[     2.664][MainProcess][INFO] 	Generated cubes: 35
[     2.664][MainProcess][INFO] 	Attempted programs: 7
[     2.664][MainProcess][INFO] 		Rejected: 5
[     2.664][MainProcess][INFO] 		Failed: 1
[     2.664][MainProcess][INFO] 	Blacklist clauses: 16
[     2.664][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.665][MainProcess][DEBUG] 	0: Counter({'filter': 64, 'natural_join3': 20})
[     2.665][MainProcess][DEBUG] 	1: Counter({'natural_join4': 44, 'filter': 20, 'natural_join3': 20})
[     2.665][MainProcess][INFO] Solution found: natural_join4(@param2, @param0, filter(@param1, color == 'red' | color == 'green'), @param1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/21.out", col_types = cols(S_name = col_character()))

df4 <- input2 %>% filter(color == 'red' | color == 'green')
df5 <- inner_join(input3, input1) %>% inner_join(df4) %>% inner_join(input2)
out <- df5 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `S_name`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`S_name` AS `S_name`,
          `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`S_name` AS `S_name`,
             `LHS`.`P_id` AS `P_id`,
             `RHS`.`color` AS `color`
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`S_name` AS `S_name`,
                `RHS`.`P_id` AS `P_id`
         FROM `input3` AS `LHS`
         INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `input2`
         WHERE (`color` = 'red'
                OR `color` = 'green')) AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.P_id = RHS.P_id
                                AND LHS.color = RHS.color))
ORDER BY S_name
