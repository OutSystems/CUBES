[     1.574][MainProcess][INFO] Parsing specification...
[     1.578][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.578][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.579][MainProcess][DEBUG] Reading input files...
[     1.586][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/1-1.txt: ['string', 'string']
[     1.591][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/1-2.txt: ['string', 'string']
[     1.596][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/1-3.txt: ['string', 'string']
[     1.601][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/1-4.txt: ['string', 'string', 'string']
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/1.out: ['string']
[     1.637][MainProcess][DEBUG] Generating DSL...
[     1.670][MainProcess][INFO] Creating 16 processes
[     1.731][MainProcess][DEBUG] Increasing generator loc to 2
[     1.733][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.738][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.741][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.744][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.746][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.753][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.755][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.759][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.760][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.766][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.766][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.770][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.773][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.774][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.785][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.812][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.177][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.178][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     2.179][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.015][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     3.020][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     3.022][cube-solver-1][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     3.022][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     3.025][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     3.028][cube-solver-1][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     3.029][MainProcess][DEBUG] Increasing generator loc to 3
[     3.030][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.031][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     3.031][cube-solver-2][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     3.036][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.036][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     3.036][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     3.039][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.045][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.046][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     3.048][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     3.053][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.054][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     3.055][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.056][cube-solver-12][DEBUG] Solving cube (l0 = filter(), l1 = semi_join())
[     3.060][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     3.064][cube-solver-14][DEBUG] Solving cube (l0 = filter(), l1 = inner_join())
[     3.065][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.065][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     3.069][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     3.076][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     3.080][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.090][cube-solver-11][DEBUG] Solving cube (l0 = filter([1]), l1 = intersect())
[     3.102][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.162][cube-solver-5][DEBUG] Solving cube (l0 = filter([6]), l1 = natural_join3())
[     3.179][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.192][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([9]))
[     3.205][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     3.781][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([24]))
[     3.801][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.711][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([32]), l2 = natural_join4([14]))
[     4.770][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([32]), l2 = natural_join())
[     4.779][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([32]), l2 = union())
[     4.788][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([32]), l2 = natural_join3())
[     4.802][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect(), l2 = filter([32]))
[     4.823][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([1]), l1 = semi_join(), l2 = filter([32]))
[     4.831][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join(), l2 = filter([32]))
[     4.840][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join(), l2 = filter([32]))
[     4.849][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]), l2 = filter([32]))
[     4.856][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3(), l2 = filter([32]))
[     4.861][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([3]), l1 = anti_join(), l2 = filter([32]))
[     4.864][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([3]), l1 = natural_join4([15]), l2 = filter([32]))
[     4.871][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([32]), l2 = natural_join([3]))
[     4.879][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([32]), l2 = natural_join3())
[     4.886][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([32]), l2 = natural_join4([15]))
[     5.049][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([5]), l1 = filter([32]), l2 = semi_join())
[     5.095][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3([11]), l1 = filter([32]), l2 = filter([32]))
[     5.128][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([5]), l1 = filter([32]), l2 = inner_join())
[     5.132][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3([11]), l1 = filter([32]), l2 = anti_join())
[     5.164][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3([13]), l1 = filter([32]), l2 = left_join())
[     5.191][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([5]), l1 = filter([32]), l2 = filter([32]))
[     5.195][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([5]), l1 = filter([32]), l2 = cross_join())
[     5.218][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([6]), l1 = filter([32]), l2 = left_join())
[     5.227][cube-solver-7][DEBUG] Solving cube (l0 = natural_join3([14]), l1 = filter([32]), l2 = union())
[     5.234][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3([14]), l1 = filter([32]), l2 = intersect())
[     5.255][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([6]), l1 = filter([32]), l2 = anti_join())
[     5.259][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([6]), l1 = left_join(), l2 = filter([32]))
[     5.260][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3([14]), l1 = filter([32]), l2 = semi_join())
[     5.280][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3([15]), l1 = filter([32]), l2 = cross_join())
[     5.281][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = filter([32]), l2 = inner_join())
[     5.577][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([6]), l1 = filter([32]), l2 = intersect())
[     5.604][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = anti_join(), l2 = filter([32]))
[     5.635][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([6]), l1 = union(), l2 = filter([32]))
[     5.670][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = left_join(), l2 = filter([32]))
[     7.662][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = union(), l2 = filter([32]))
[     7.668][cube-solver-7][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = intersect(), l2 = filter([32]))
[     7.669][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = semi_join(), l2 = filter([32]))
[     7.810][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = cross_join(), l2 = filter([32]))
[     8.006][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join3([16]), l1 = left_join(), l2 = filter([32]))
[     8.007][MainProcess][INFO] Statistics:
[     8.008][MainProcess][INFO] 	Generated cubes: 60
[     8.008][MainProcess][INFO] 	Attempted programs: 663
[     8.008][MainProcess][INFO] 		Rejected: 22
[     8.008][MainProcess][INFO] 		Failed: 640
[     8.008][MainProcess][INFO] 	Blacklist clauses: 70
[     8.008][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     8.009][MainProcess][DEBUG] 	0: Counter({'natural_join4': 464})
[     8.009][MainProcess][DEBUG] 	1: Counter({'filter': 464})
[     8.009][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     8.010][MainProcess][DEBUG] 	0: Counter({'natural_join3': 343})
[     8.010][MainProcess][DEBUG] 	1: Counter({'left_join': 269, 'union': 40, 'anti_join': 34})
[     8.010][MainProcess][DEBUG] 	2: Counter({'filter': 344})
[     8.010][MainProcess][INFO] Solution found: filter(left_join(natural_join3(@param1, @param3, @param0), @param2), F_name == 'faculty1' & level == 'JR')
[     8.076][cube-solver-3][DEBUG] Found solution with cube (l0 = natural_join4(), l1 = filter())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/1-1.txt", col_types = cols(C_name = col_character(),F_key = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/1-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/1-3.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input3 <- copy_to(con, input3)
input4 <- read_csv("tests-examples/textbook/tables/1-4.txt", col_types = cols(S_key = col_character(),S_name = col_character(),level = col_character()))
input4 <- copy_to(con, input4)
expected_output <- read_csv("tests-examples/textbook/tables/1.out", col_types = cols(S_name = col_character()))

df5 <- inner_join(input2, input4) %>% inner_join(input1)
df6 <- left_join(df5, input3)
df7 <- df6 %>% filter(F_name == 'faculty1' & level == 'JR')
out <- df7 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`C_name` AS `C_name`,
          `LHS`.`S_name` AS `S_name`,
          `LHS`.`level` AS `level`,
          `LHS`.`F_key` AS `F_key`,
          `RHS`.`F_name` AS `F_name`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`C_name` AS `C_name`,
             `LHS`.`S_name` AS `S_name`,
             `LHS`.`level` AS `level`,
             `RHS`.`F_key` AS `F_key`
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`C_name` AS `C_name`,
                `RHS`.`S_name` AS `S_name`,
                `RHS`.`level` AS `level`
         FROM `input2` AS `LHS`
         INNER JOIN `input4` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`C_name` = `RHS`.`C_name`)) AS `LHS`
   LEFT JOIN `input3` AS `RHS` ON (`LHS`.`F_key` = `RHS`.`F_key`))
WHERE (`F_name` = 'faculty1'
       AND `level` = 'JR')
ORDER BY S_name
