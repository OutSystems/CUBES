[     1.922][MainProcess][INFO] Parsing specification...
[     1.925][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.926][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.926][MainProcess][DEBUG] Reading input files...
[     1.937][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i002.csv: ['int64', 'string', 'string']
[     1.941][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o002.csv: ['string']
[     1.968][MainProcess][DEBUG] Generating DSL...
[     1.988][MainProcess][INFO] Creating 16 processes
[     2.052][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.053][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.053][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.053][MainProcess][DEBUG] Increasing generator loc to 3
[     2.053][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.054][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.054][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.054][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.054][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.055][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.063][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.065][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.066][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.078][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.083][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.086][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.086][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.282][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.341][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.343][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.395][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.448][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.452][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.454][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.455][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.456][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.457][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.458][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.458][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.460][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.463][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.464][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.466][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.467][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.469][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.475][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.477][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.479][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.480][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.481][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.484][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = intersect())
[     2.578][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]), l2 = summarise())
[     2.582][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter([2]))
[     2.583][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = semi_join())
[     2.585][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = cross_join())
[     2.648][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.721][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([3]), l2 = summarise())
[     2.723][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([3]), l2 = mutate())
[     2.727][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = inner_join())
[     2.729][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = filter([4]))
[     2.735][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[     2.737][MainProcess][INFO] Statistics:
[     2.738][MainProcess][INFO] 	Generated cubes: 34
[     2.738][MainProcess][INFO] 	Attempted programs: 11
[     2.738][MainProcess][INFO] 		Rejected: 10
[     2.738][MainProcess][INFO] 		Failed: 0
[     2.738][MainProcess][INFO] 	Blacklist clauses: 4
[     2.738][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.739][MainProcess][DEBUG] 	0: Counter({'mutate': 40, 'summarise': 23})
[     2.739][MainProcess][DEBUG] 	1: Counter({'filter': 63})
[     2.740][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.740][MainProcess][DEBUG] 	0: Counter({'summarise': 101})
[     2.740][MainProcess][DEBUG] 	1: Counter({'filter': 101})
[     2.740][MainProcess][DEBUG] 	2: Counter({'summarise': 18, 'anti_join': 17, 'natural_join': 16, 'filter': 15, 'left_join': 12, 'semi_join': 12, 'union': 11})
[     2.741][MainProcess][INFO] Solution found: filter(summarise(@param0, n = n(), NAME), n > 1)
[     2.929][cube-solver-4][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.963][cube-solver-7][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = anti_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i002.csv", col_types = cols(ID = col_integer(),NAME = col_character(),EMAIL = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o002.csv", col_types = cols(NAME = col_character()))

df2 <- input1 %>% group_by(NAME) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 1)
out <- df3 %>% select(NAME) %>% arrange(NAME)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT NAME
FROM
  (SELECT NAME,
          COUNT() AS n
   FROM input1
   GROUP BY NAME)
WHERE (n > 1.0)
ORDER BY NAME
