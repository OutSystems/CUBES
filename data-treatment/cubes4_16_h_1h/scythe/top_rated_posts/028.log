[     1.650][MainProcess][INFO] Parsing specification...
[     1.652][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.653][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.653][MainProcess][DEBUG] Reading input files...
[     1.659][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i028_1.csv: ['string']
[     1.664][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i028_2.csv: ['string', 'int64', 'string']
[     1.669][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o028.csv: ['string', 'string']
[     1.698][MainProcess][DEBUG] Generating DSL...
[     1.718][MainProcess][INFO] Creating 16 processes
[     1.783][MainProcess][DEBUG] Increasing generator loc to 2
[     1.784][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.784][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.785][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.784][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.784][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.785][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.787][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.795][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.796][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.800][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.803][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.807][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.819][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.822][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.825][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.832][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.963][cube-solver-1][WARNING] There is no solution for current loc (1).
[     1.964][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.965][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.984][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.984][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.985][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.072][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.075][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     2.077][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.078][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.078][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.079][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.080][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.097][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = summarise([1]))
[     2.099][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.101][cube-solver-5][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.102][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([1]))
[     2.102][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.105][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.106][cube-solver-14][DEBUG] Solving cube (l0 = summarise([2]), l1 = union())
[     2.107][cube-solver-9][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join3())
[     2.109][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = intersect())
[     2.115][cube-solver-10][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join4())
[     2.121][cube-solver-10][DEBUG] Solving cube (l0 = union(), l1 = summarise([3]))
[     2.164][cube-solver-13][DEBUG] Solving cube (l0 = summarise([8]), l1 = left_join())
[     2.286][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.292][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([13]))
[     2.319][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise([2]), l1 = natural_join3())
[     2.320][MainProcess][INFO] Statistics:
[     2.320][MainProcess][INFO] 	Generated cubes: 26
[     2.320][MainProcess][INFO] 	Attempted programs: 5
[     2.320][MainProcess][INFO] 		Rejected: 0
[     2.320][MainProcess][INFO] 		Failed: 4
[     2.320][MainProcess][INFO] 	Blacklist clauses: 17
[     2.320][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.321][MainProcess][DEBUG] 	0: Counter({'left_join': 29, 'summarise': 25, 'union': 9, 'natural_join': 1})
[     2.321][MainProcess][DEBUG] 	1: Counter({'summarise': 21, 'mutate': 18, 'natural_join': 12, 'natural_join3': 6, 'union': 5, 'left_join': 2})
[     2.321][MainProcess][INFO] Solution found: natural_join3(@param0, @param1, summarise(@param1, concatDesc = string_agg(Desc, ' '), PID))
[     2.437][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise([8]), l1 = left_join())
[     2.623][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i028_1.csv", col_types = cols(PID = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i028_2.csv", col_types = cols(PID = col_character(),SEQ = col_integer(),Desc = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o028.csv", col_types = cols(PID = col_character(),concatDesc = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df3 <- input2 %>% group_by(PID) %>% summarise(concatDesc = string_agg(Desc, ' ')) %>% ungroup()
df4 <- inner_join(input1, input2) %>% inner_join(df3)
out <- df4 %>% select(PID, concatDesc) %>% distinct() %>% arrange(PID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `PID`,
                `concatDesc`
FROM
  (SELECT `LHS`.`PID` AS `PID`,
          `LHS`.`SEQ` AS `SEQ`,
          `LHS`.`Desc` AS `Desc`,
          `RHS`.`concatDesc` AS `concatDesc`
   FROM
     (SELECT `LHS`.`PID` AS `PID`,
             `RHS`.`SEQ` AS `SEQ`,
             `RHS`.`Desc` AS `Desc`
      FROM `input1` AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`PID` = `RHS`.`PID`)) AS `LHS`
   INNER JOIN
     (SELECT `PID`,
             string_agg(`Desc`, ' ') AS concatDesc
      FROM input2
      GROUP BY PID) AS RHS ON (LHS.PID = RHS.PID))
ORDER BY PID
