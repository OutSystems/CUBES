[     2.977][MainProcess][INFO] Parsing specification...
[     2.981][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     2.981][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     2.982][MainProcess][DEBUG] Reading input files...
[     2.990][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i005.csv: ['int64', 'string', 'int64']
[     2.995][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o005.csv: ['int64', 'string', 'int64']
[     3.024][MainProcess][DEBUG] Generating DSL...
[     4.504][MainProcess][INFO] Creating 16 processes
[     4.599][MainProcess][DEBUG] Increasing generator loc to 3
[     6.782][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     6.788][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     6.811][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     6.817][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     6.818][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     6.883][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     6.887][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     6.925][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     6.938][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     6.938][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     6.943][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     6.961][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     6.981][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     6.988][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     6.996][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     6.997][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[    38.854][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    39.138][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[    39.212][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    39.213][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[    39.275][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    46.950][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    52.059][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[    53.144][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    71.618][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[    71.754][cube-solver-15][DEBUG] Solving cube (l0 = summarise([12]), l1 = natural_join4(), l2 = summarise([12]))
[    71.824][cube-solver-15][DEBUG] Solving cube (l0 = summarise([12]), l1 = natural_join4(), l2 = mutate())
[    71.881][cube-solver-15][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = natural_join())
[    72.036][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([12]), l2 = summarise([12]))
[    72.117][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise([12]))
[    72.169][cube-solver-12][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = natural_join3())
[    72.227][cube-solver-14][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = natural_join4())
[    72.256][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[    72.273][cube-solver-14][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = summarise([12]))
[    72.325][cube-solver-14][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = filter())
[    72.391][cube-solver-7][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = anti_join())
[    72.395][cube-solver-14][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = left_join())
[    72.459][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate())
[    72.473][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([12]), l2 = summarise([12]))
[    72.565][cube-solver-11][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = union())
[    72.600][cube-solver-4][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = intersect())
[    72.618][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([12]), l2 = mutate())
[    72.635][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([12]), l2 = mutate())
[    72.761][cube-solver-9][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = cross_join())
[    72.761][cube-solver-13][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = semi_join())
[    72.773][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([12]), l2 = summarise([12]))
[    72.827][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([12]), l2 = mutate())
[    72.838][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise([12]))
[    72.884][cube-solver-8][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = mutate())
[    72.954][cube-solver-5][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = inner_join())
[    72.959][cube-solver-10][DEBUG] Solving cube (l0 = summarise([12]), l1 = filter(), l2 = summarise([12]))
[    72.977][cube-solver-8][DEBUG] Solving cube (l0 = summarise([12]), l1 = filter(), l2 = mutate())
[    73.330][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise([12]))
[    73.443][cube-solver-6][DEBUG] Solving cube (l0 = summarise([12]), l1 = anti_join(), l2 = summarise([12]))
[    74.114][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise([12]), l1 = summarise([12]), l2 = semi_join())
[    74.116][MainProcess][INFO] Statistics:
[    74.116][MainProcess][INFO] 	Generated cubes: 38
[    74.116][MainProcess][INFO] 	Attempted programs: 443
[    74.116][MainProcess][INFO] 		Rejected: 281
[    74.117][MainProcess][INFO] 		Failed: 161
[    74.117][MainProcess][INFO] 	Blacklist clauses: 12
[    74.117][MainProcess][DEBUG] Priting statistics for good programs of size 2
[    74.119][MainProcess][DEBUG] 	0: Counter({'mutate': 2592, 'summarise': 1680})
[    74.121][MainProcess][DEBUG] 	1: Counter({'mutate': 3504, 'summarise': 768})
[    74.121][MainProcess][DEBUG] Priting statistics for good programs of size 3
[    74.122][MainProcess][DEBUG] 	0: Counter({'summarise': 1052})
[    74.122][MainProcess][DEBUG] 	1: Counter({'summarise': 961, 'filter': 60, 'anti_join': 33})
[    74.123][MainProcess][DEBUG] 	2: Counter({'natural_join3': 229, 'natural_join': 212, 'left_join': 177, 'union': 139, 'anti_join': 84, 'inner_join': 63, 'mutate': 60, 'semi_join': 57, 'summarise': 33})
[    74.123][MainProcess][INFO] Solution found: semi_join(summarise(@param0, minid = min(id), customer, total), summarise(@param0, total = max(total), customer))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i005.csv", col_types = cols(id = col_integer(),customer = col_character(),total = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o005.csv", col_types = cols(minid = col_integer(),customer = col_character(),maxtotal = col_integer()))

df2 <- input1 %>% group_by(customer, total) %>% summarise(minid = min(id)) %>% ungroup()
df3 <- input1 %>% group_by(customer) %>% summarise(total = max(total)) %>% ungroup()
df4 <- semi_join(df2, df3)
out <- df4 %>% select(minid, customer, maxtotal = total) %>% arrange(minid)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT minid,
       customer,
       total AS maxtotal
FROM
  (SELECT *
   FROM
     (SELECT customer,
             total,
             MIN(id) AS minid
      FROM input1
      GROUP BY customer,
               total) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT customer,
                  MAX(total) AS total
           FROM input1
           GROUP BY customer) AS RHS
        WHERE (LHS.customer = RHS.customer
               AND LHS.total = RHS.total) ))
ORDER BY minid
