[     2.650][MainProcess][INFO] Parsing specification...
[     2.653][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     2.653][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     2.654][MainProcess][DEBUG] Reading input files...
[     2.663][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i055.csv: ['int64', 'string', 'string', 'string']
[     2.669][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o055.csv: ['string', 'string', 'string']
[     2.698][MainProcess][DEBUG] Generating DSL...
[     2.733][MainProcess][INFO] Creating 16 processes
[     2.799][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     2.799][MainProcess][DEBUG] Increasing generator loc to 2
[     2.800][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     2.801][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.801][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.804][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     2.812][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     2.813][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     2.819][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     2.819][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     2.824][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     2.827][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     2.833][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     2.833][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     2.836][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     2.844][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.889][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.072][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     3.130][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.334][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     3.337][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     3.337][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     3.341][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     3.342][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     3.346][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     3.349][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     3.352][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     3.353][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     3.356][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     3.357][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     3.360][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     3.360][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     3.363][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     3.364][cube-solver-9][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     3.366][cube-solver-9][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     3.369][cube-solver-9][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     3.370][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     3.376][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     3.379][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     3.381][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     3.385][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     3.419][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     3.449][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     3.453][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     4.729][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)
[     4.731][MainProcess][INFO] Statistics:
[     4.731][MainProcess][INFO] 	Generated cubes: 27
[     4.731][MainProcess][INFO] 	Attempted programs: 26
[     4.731][MainProcess][INFO] 		Rejected: 25
[     4.731][MainProcess][INFO] 		Failed: 0
[     4.731][MainProcess][INFO] 	Blacklist clauses: 0
[     4.731][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     4.732][MainProcess][DEBUG] 	0: Counter({'mutate': 168, 'summarise': 149})
[     4.732][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     4.733][MainProcess][DEBUG] 	0: Counter({'summarise': 885, 'union': 241, 'left_join': 229})
[     4.734][MainProcess][DEBUG] 	1: Counter({'mutate': 357, 'summarise': 233, 'left_join': 155, 'natural_join': 147, 'union': 120, 'inner_join': 120, 'semi_join': 118, 'anti_join': 93, 'unite': 12})
[     4.734][MainProcess][INFO] Solution found: summarise(@param0, concatPageURL = string_agg(PageURL, ' '), Activity, User)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i055.csv", col_types = cols(ID = col_integer(),User = col_character(),Activity = col_character(),PageURL = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o055.csv", col_types = cols(User = col_character(),Activity = col_character(),concatPageURL = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df2 <- input1 %>% group_by(Activity, User) %>% summarise(concatPageURL = string_agg(PageURL, ' ')) %>% ungroup()
out <- df2 %>% select(User, Activity, concatPageURL) %>% arrange(User)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `User`,
       `Activity`,
       `concatPageURL`
FROM
  (SELECT `Activity`,
          `User`,
          string_agg(`PageURL`, ' ') AS concatPageURL
   FROM input1
   GROUP BY Activity,
            USER)
ORDER BY USER
