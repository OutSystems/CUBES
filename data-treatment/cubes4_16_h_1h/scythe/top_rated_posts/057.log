[     1.596][MainProcess][INFO] Parsing specification...
[     1.599][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.599][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.600][MainProcess][DEBUG] Reading input files...
[     1.607][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i057.csv: ['int64', 'string', 'string', 'int64']
[     1.613][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o057.csv: ['string', 'string', 'int64']
[     1.638][MainProcess][DEBUG] Generating DSL...
[     1.662][MainProcess][INFO] Creating 16 processes
[     1.722][MainProcess][DEBUG] Increasing generator loc to 2
[     1.722][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.722][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.724][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.731][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.732][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.743][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.747][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.748][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.771][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.783][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.885][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.984][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.085][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.088][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     2.090][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.092][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     2.093][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.096][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.097][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.097][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.099][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.099][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.100][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.107][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.107][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.108][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.111][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.112][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.113][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.115][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.115][cube-solver-5][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.117][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.117][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.160][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.267][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.271][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.285][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.289][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.365][cube-solver-14][DEBUG] Solving cube (l0 = summarise([2]), l1 = left_join())
[     3.003][cube-solver-4][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([4]))
[     3.232][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.497][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.592][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     3.594][cube-solver-1][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     3.655][cube-solver-11][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise([4]))
[     3.790][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([1]), l1 = mutate())
[     3.794][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     3.818][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     3.821][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     3.824][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = summarise([4]))
[     3.838][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     4.036][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([4]))
[     4.194][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     4.294][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     4.323][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     4.944][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     5.284][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     5.390][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join([1]))
[     5.450][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     5.885][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[     6.049][cube-solver-5][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise([4]))
[     6.544][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[     6.625][MainProcess][DEBUG] Increasing generator loc to 3
[     6.626][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     6.771][cube-solver-7][DEBUG] Found solution with cube (l0 = summarise(), l1 = semi_join())
[     6.772][MainProcess][INFO] Statistics:
[     6.772][MainProcess][INFO] 	Generated cubes: 51
[     6.772][MainProcess][INFO] 	Attempted programs: 696
[     6.772][MainProcess][INFO] 		Rejected: 247
[     6.773][MainProcess][INFO] 		Failed: 448
[     6.773][MainProcess][INFO] 	Blacklist clauses: 5
[     6.773][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     6.773][MainProcess][DEBUG] 	0: Counter({'mutate': 168, 'summarise': 108})
[     6.773][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     6.777][MainProcess][DEBUG] 	0: Counter({'summarise': 3364, 'mutate': 2340, 'left_join': 276, 'union': 276, 'semi_join': 276, 'inner_join': 62})
[     6.780][MainProcess][DEBUG] 	1: Counter({'mutate': 981, 'union': 842, 'natural_join': 823, 'left_join': 808, 'anti_join': 765, 'semi_join': 669, 'inner_join': 595, 'summarise': 576, 'filter': 538})
[     6.780][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, Birthyear = min(Birthyear), City))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i057.csv", col_types = cols(ID = col_integer(),Name = col_character(),City = col_character(),Birthyear = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o057.csv", col_types = cols(Name = col_character(),City = col_character(),minBirthyear = col_integer()))

df2 <- input1 %>% group_by(City) %>% summarise(Birthyear = min(Birthyear)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(Name, City, minBirthyear = Birthyear) %>% arrange(Name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Name,
       City,
       Birthyear AS minBirthyear
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT City,
                  MIN(Birthyear) AS Birthyear
           FROM input1
           GROUP BY City) AS RHS
        WHERE (LHS.City = RHS.City
               AND LHS.Birthyear = RHS.Birthyear) ))
ORDER BY Name
