[     2.895][MainProcess][INFO] Parsing specification...
[     2.899][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     2.899][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     2.900][MainProcess][DEBUG] Reading input files...
[     2.908][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i001.csv: ['int64', 'string']
[     2.913][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o001.csv: ['int64', 'string']
[     2.943][MainProcess][DEBUG] Generating DSL...
[     2.965][MainProcess][INFO] Creating 16 processes
[     3.022][MainProcess][DEBUG] Increasing generator loc to 2
[     3.022][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.022][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.023][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.023][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.023][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.023][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.023][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.030][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.032][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.034][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.035][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.042][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.051][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.051][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.052][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.056][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.149][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.153][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     3.179][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     3.185][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     3.187][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     3.192][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     3.194][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     3.200][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     3.202][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     3.223][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     3.223][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     3.225][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     3.226][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     3.253][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     3.253][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     3.256][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     3.277][cube-solver-10][DEBUG] Found solution with cube (l0 = summarise(), l1 = semi_join())
[     3.278][MainProcess][INFO] Statistics:
[     3.278][MainProcess][INFO] 	Generated cubes: 21
[     3.278][MainProcess][INFO] 	Attempted programs: 1
[     3.278][MainProcess][INFO] 		Rejected: 0
[     3.279][MainProcess][INFO] 		Failed: 0
[     3.279][MainProcess][INFO] 	Blacklist clauses: 0
[     3.279][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     3.279][MainProcess][DEBUG] 	0: Counter({'mutate': 9, 'summarise': 4})
[     3.279][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     3.279][MainProcess][DEBUG] 	0: Counter({'summarise': 2})
[     3.279][MainProcess][DEBUG] 	1: Counter({'natural_join': 1, 'semi_join': 1})
[     3.279][MainProcess][INFO] Solution found: semi_join(summarise(@param0, concatStudentName = string_agg(StudentName, ', '), SubjectID), @param0)
[     3.284][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())
[     3.356][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise(), l1 = left_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i001.csv", col_types = cols(SubjectID = col_integer(),StudentName = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o001.csv", col_types = cols(SubjectID = col_integer(),concatStudentName = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df2 <- input1 %>% group_by(SubjectID) %>% summarise(concatStudentName = string_agg(StudentName, ', ')) %>% ungroup()
df3 <- semi_join(df2, input1)
out <- df3 %>% select(SubjectID, concatStudentName) %>% arrange(SubjectID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `SubjectID`,
       `concatStudentName`
FROM
  (SELECT *
   FROM
     (SELECT `SubjectID`,
             string_agg(`StudentName`, ', ') AS concatStudentName
      FROM input1
      GROUP BY SubjectID) AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM input1 AS RHS
        WHERE (LHS.SubjectID = RHS.SubjectID) ))
ORDER BY SubjectID
