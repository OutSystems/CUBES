[     1.562][MainProcess][INFO] Parsing specification...
[     1.565][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.565][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.566][MainProcess][DEBUG] Reading input files...
[     1.573][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i006.csv: ['int64', 'string', 'string']
[     1.579][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o006.csv: ['int64', 'string', 'string']
[     1.604][MainProcess][DEBUG] Generating DSL...
[     1.628][MainProcess][INFO] Creating 16 processes
[     1.707][MainProcess][DEBUG] Increasing generator loc to 2
[     1.707][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.708][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.708][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.709][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.709][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.709][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.709][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.713][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.726][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.728][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.735][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.745][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.746][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.862][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.863][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.928][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     1.930][cube-solver-5][DEBUG] Solving cube (l0 = summarise([1]), l1 = intersect())
[     1.937][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = summarise([1]))
[     1.941][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = semi_join())
[     1.941][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = left_join())
[     1.942][cube-solver-12][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter())
[     1.943][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join3())
[     1.948][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = cross_join())
[     1.962][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = union())
[     2.024][cube-solver-8][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join())
[     2.064][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]))
[     2.065][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = natural_join())
[     2.066][MainProcess][INFO] Statistics:
[     2.067][MainProcess][INFO] 	Generated cubes: 19
[     2.067][MainProcess][INFO] 	Attempted programs: 1
[     2.067][MainProcess][INFO] 		Rejected: 0
[     2.067][MainProcess][INFO] 		Failed: 0
[     2.067][MainProcess][INFO] 	Blacklist clauses: 3
[     2.068][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     2.068][MainProcess][DEBUG] 	0: Counter({'mutate': 13, 'summarise': 8})
[     2.069][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.069][MainProcess][DEBUG] 	0: Counter({'summarise': 20})
[     2.069][MainProcess][DEBUG] 	1: Counter({'union': 10, 'semi_join': 5, 'left_join': 4, 'natural_join': 1})
[     2.069][MainProcess][INFO] Solution found: natural_join(@param0, summarise(@param0, Id = max(Id), Name))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i006.csv", col_types = cols(Id = col_integer(),Name = col_character(),Other_Columns = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o006.csv", col_types = cols(Id = col_integer(),Name = col_character(),Other_Columns = col_character()))

df2 <- input1 %>% group_by(Name) %>% summarise(Id = max(Id)) %>% ungroup()
df3 <- inner_join(input1, df2)
out <- df3 %>% select(Id, Name, Other_Columns) %>% arrange(Id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Id,
       Name,
       Other_Columns
FROM
  (SELECT LHS.Id AS Id,
          LHS.Name AS Name,
          LHS.Other_Columns AS Other_Columns
   FROM input1 AS LHS
   INNER JOIN
     (SELECT Name,
             MAX(Id) AS Id
      FROM input1
      GROUP BY Name) AS RHS ON (LHS.Id = RHS.Id
                                AND LHS.Name = RHS.Name))
ORDER BY Id
