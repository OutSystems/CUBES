[     1.588][MainProcess][INFO] Parsing specification...
[     1.591][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.591][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.592][MainProcess][DEBUG] Reading input files...
[     1.600][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i008_1.csv: ['int64', 'string', 'string']
[     1.606][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i008_2.csv: ['string', 'int64', 'int64', 'string']
[     1.611][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o008.csv: ['string', 'int64', 'string']
[     1.639][MainProcess][DEBUG] Generating DSL...
[     1.661][MainProcess][INFO] Creating 16 processes
[     1.729][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.729][MainProcess][DEBUG] Increasing generator loc to 2
[     1.730][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.731][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.731][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.731][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.731][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.731][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.743][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.745][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.759][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.767][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.773][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.783][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.786][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.068][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.069][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.071][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.084][cube-solver-1][WARNING] There is no solution for current loc (1).
[     2.084][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.085][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.086][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.098][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.102][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.105][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.105][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.120][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join3())
[     2.126][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([2]))
[     2.130][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([4]))
[     2.136][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([5]))
[     2.281][cube-solver-12][DEBUG] Solving cube (l0 = summarise([10]), l1 = anti_join([6]))
[     2.319][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.324][cube-solver-5][DEBUG] Solving cube (l0 = anti_join([7]), l1 = mutate())
[     2.358][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([12]))
[     2.374][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([13]))
[     2.376][cube-solver-11][DEBUG] Solving cube (l0 = summarise([14]), l1 = summarise([14]))
[     2.397][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.428][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = summarise([16]))
[     2.428][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.435][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.452][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.464][cube-solver-7][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([16]))
[     2.482][cube-solver-15][DEBUG] Solving cube (l0 = summarise([16]), l1 = intersect())
[     2.495][cube-solver-3][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     2.510][cube-solver-14][DEBUG] Solving cube (l0 = summarise([17]), l1 = union())
[     2.666][cube-solver-0][DEBUG] Solving cube (l0 = summarise([21]), l1 = semi_join())
[     2.667][cube-solver-1][DEBUG] Solving cube (l0 = summarise([21]), l1 = cross_join())
[     2.819][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([25]))
[     2.852][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     2.874][cube-solver-5][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise([25]))
[     3.256][cube-solver-5][DEBUG] Solving cube (l0 = cross_join([2]), l1 = mutate())
[     3.261][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     3.261][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     3.303][cube-solver-1][DEBUG] Solving cube (l0 = mutate([2]), l1 = natural_join4())
[     3.308][cube-solver-1][DEBUG] Solving cube (l0 = mutate([2]), l1 = summarise([26]))
[     3.324][cube-solver-1][DEBUG] Solving cube (l0 = mutate([2]), l1 = anti_join([40]))
[     3.344][cube-solver-1][DEBUG] Solving cube (l0 = mutate([2]), l1 = left_join())
[     3.347][cube-solver-1][DEBUG] Solving cube (l0 = mutate([2]), l1 = union())
[     3.350][cube-solver-1][DEBUG] Solving cube (l0 = mutate([2]), l1 = intersect([12]))
[     3.358][cube-solver-1][DEBUG] Solving cube (l0 = mutate([2]), l1 = semi_join())
[     3.361][cube-solver-1][DEBUG] Solving cube (l0 = mutate([2]), l1 = cross_join([2]))
[     3.364][cube-solver-1][DEBUG] Solving cube (l0 = mutate([2]), l1 = mutate([2]))
[     3.368][cube-solver-1][DEBUG] Solving cube (l0 = mutate([2]), l1 = inner_join())
[     3.371][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise([26]))
[     3.409][cube-solver-5][DEBUG] Solving cube (l0 = inner_join([2]), l1 = mutate([2]))
[     4.158][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise(), l1 = left_join())
[     4.160][MainProcess][INFO] Statistics:
[     4.160][MainProcess][INFO] 	Generated cubes: 46
[     4.160][MainProcess][INFO] 	Attempted programs: 159
[     4.160][MainProcess][INFO] 		Rejected: 0
[     4.160][MainProcess][INFO] 		Failed: 158
[     4.161][MainProcess][INFO] 	Blacklist clauses: 84
[     4.161][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     4.162][MainProcess][DEBUG] 	0: Counter({'summarise': 1222, 'natural_join': 223, 'left_join': 213, 'union': 213, 'semi_join': 138, 'inner_join': 79})
[     4.163][MainProcess][DEBUG] 	1: Counter({'summarise': 866, 'natural_join': 248, 'natural_join3': 235, 'left_join': 213, 'union': 203, 'semi_join': 163, 'inner_join': 91, 'anti_join': 69})
[     4.164][MainProcess][INFO] Solution found: left_join(summarise(@param1, all$first, OrderID, Quantity), @param0)
[     4.556][cube-solver-2][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise([5]))
[     6.225][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i008_1.csv", col_types = cols(OrderID = col_integer(),OrderGUID = col_character(),OrderNumber = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i008_2.csv", col_types = cols(LineItemGUID = col_character(),OrderID = col_integer(),Quantity = col_integer(),Description = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o008.csv", col_types = cols(OrderNumber = col_character(),Quantity = col_integer(),Description = col_character()))

df3 <- input2 %>% group_by(OrderID, Quantity) %>% summarise_all(first) %>% ungroup()
df4 <- left_join(df3, input1)
out <- df4 %>% select(OrderNumber, Quantity, Description) %>% arrange(OrderNumber)

Failed to generate SQL query
