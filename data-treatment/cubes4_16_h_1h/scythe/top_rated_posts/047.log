[     3.309][MainProcess][INFO] Parsing specification...
[     3.315][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.315][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.315][MainProcess][DEBUG] Reading input files...
[     3.326][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i047.csv: ['int64', 'int64', 'int64', 'string']
[     3.333][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o047.csv: ['int64', 'int64', 'int64', 'string']
[     3.370][MainProcess][DEBUG] Generating DSL...
[     3.418][MainProcess][INFO] Creating 16 processes
[     3.503][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.503][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.503][MainProcess][DEBUG] Increasing generator loc to 2
[     3.505][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.505][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.505][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.511][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.512][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.522][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.523][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.528][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.531][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.538][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.551][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.562][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.571][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.581][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.754][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.894][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.042][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]))
[     4.046][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = intersect())
[     4.059][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]))
[     4.066][cube-solver-6][DEBUG] Solving cube (l0 = summarise([4]), l1 = semi_join())
[     4.069][cube-solver-8][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join())
[     4.074][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     4.076][cube-solver-7][DEBUG] Solving cube (l0 = summarise([4]), l1 = cross_join())
[     4.077][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join4())
[     4.084][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = mutate())
[     4.084][cube-solver-11][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]))
[     4.090][cube-solver-11][DEBUG] Solving cube (l0 = summarise([4]), l1 = inner_join())
[     4.095][cube-solver-14][DEBUG] Solving cube (l0 = summarise([4]), l1 = left_join())
[     4.104][cube-solver-9][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join3())
[     4.107][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.112][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     4.114][cube-solver-9][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([4]))
[     4.119][cube-solver-9][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     4.122][cube-solver-9][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([4]))
[     4.123][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = anti_join())
[     4.232][cube-solver-15][DEBUG] Solving cube (l0 = summarise([4]), l1 = union())
[     4.234][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     4.237][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     4.240][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([4]))
[     4.247][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = summarise([4]))
[     4.252][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     4.255][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     4.521][cube-solver-9][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([4]))
[     4.538][cube-solver-12][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter())
[     4.605][cube-solver-2][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     4.784][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]))
[     4.791][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([4]))
[     4.826][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     4.891][cube-solver-7][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise([4]))
[     5.162][cube-solver-0][DEBUG] Solving cube (l0 = cross_join([1]), l1 = mutate())
[     5.165][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     5.183][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     5.186][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     5.189][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = summarise([4]))
[     5.380][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     5.844][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     5.874][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     6.140][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     6.505][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     6.894][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     7.029][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join([1]))
[     7.046][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     7.092][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     7.506][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[     7.682][cube-solver-2][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise([4]))
[     8.127][cube-solver-4][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[     9.297][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise([4]), l1 = semi_join())
[     9.298][MainProcess][INFO] Statistics:
[     9.298][MainProcess][INFO] 	Generated cubes: 50
[     9.298][MainProcess][INFO] 	Attempted programs: 631
[     9.298][MainProcess][INFO] 		Rejected: 264
[     9.298][MainProcess][INFO] 		Failed: 366
[     9.298][MainProcess][INFO] 	Blacklist clauses: 5
[     9.299][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     9.299][MainProcess][DEBUG] 	0: Counter({'mutate': 288})
[     9.299][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     9.303][MainProcess][DEBUG] 	0: Counter({'summarise': 3265, 'mutate': 2752, 'left_join': 288, 'union': 288, 'semi_join': 288, 'inner_join': 110})
[     9.306][MainProcess][DEBUG] 	1: Counter({'mutate': 1381, 'natural_join': 970, 'anti_join': 929, 'left_join': 918, 'union': 915, 'semi_join': 760, 'inner_join': 671, 'filter': 447})
[     9.306][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, time = max(time), user))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i047.csv", col_types = cols(id = col_integer(),user = col_integer(),time = col_integer(),io = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o047.csv", col_types = cols(id = col_integer(),user = col_integer(),time = col_integer(),io = col_character()))

df2 <- input1 %>% group_by(user) %>% summarise(time = max(time)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(id, user, time, io) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       USER,
       TIME,
       io
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT USER,
                  MAX(TIME) AS TIME
           FROM input1
           GROUP BY USER) AS RHS
        WHERE (LHS.user = RHS.user
               AND LHS.time = RHS.time) ))
ORDER BY id
