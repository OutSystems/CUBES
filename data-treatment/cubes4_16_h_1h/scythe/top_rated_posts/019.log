[     3.111][MainProcess][INFO] Parsing specification...
[     3.116][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.117][MainProcess][DEBUG] Reading input files...
[     3.124][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i019.csv: ['int64', 'int64']
[     3.129][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o019.csv: ['int64', 'int64', 'int64']
[     3.157][MainProcess][DEBUG] Generating DSL...
[     3.182][MainProcess][INFO] Creating 16 processes
[     3.239][MainProcess][DEBUG] Increasing generator loc to 2
[     3.239][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.239][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.240][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.240][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.240][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.243][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.246][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.249][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.251][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.259][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.263][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.265][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.267][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.278][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.281][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.286][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.383][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     3.426][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.482][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     3.484][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     3.497][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     3.499][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     3.502][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     3.503][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     3.503][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     3.504][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     3.506][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     3.506][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     3.508][cube-solver-2][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     3.509][cube-solver-2][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     3.510][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     3.513][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     3.515][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     3.516][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     3.530][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     3.534][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.548][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     3.551][cube-solver-10][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     3.565][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     3.621][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.635][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     3.639][cube-solver-9][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     3.670][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[     3.677][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     3.680][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     3.703][cube-solver-11][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[     3.709][cube-solver-7][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[     3.715][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     3.718][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     3.724][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     3.726][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     3.727][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     3.743][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     3.749][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     3.756][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     3.873][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     3.885][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     3.918][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join([1]))
[     3.955][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     3.959][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     3.960][cube-solver-1][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     3.967][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[     4.011][cube-solver-7][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise())
[     4.071][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[     4.082][MainProcess][DEBUG] Increasing generator loc to 3
[     4.083][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     4.087][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.118][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise(), l1 = left_join())
[     4.119][MainProcess][INFO] Statistics:
[     4.120][MainProcess][INFO] 	Generated cubes: 48
[     4.120][MainProcess][INFO] 	Attempted programs: 65
[     4.120][MainProcess][INFO] 		Rejected: 44
[     4.120][MainProcess][INFO] 		Failed: 20
[     4.120][MainProcess][INFO] 	Blacklist clauses: 1
[     4.120][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     4.120][MainProcess][DEBUG] 	0: Counter({'summarise': 12, 'mutate': 12})
[     4.120][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     4.121][MainProcess][DEBUG] 	0: Counter({'summarise': 223, 'mutate': 168, 'left_join': 24, 'semi_join': 24, 'union': 21, 'inner_join': 13})
[     4.121][MainProcess][DEBUG] 	1: Counter({'left_join': 69, 'union': 69, 'mutate': 64, 'natural_join': 62, 'inner_join': 59, 'anti_join': 56, 'summarise': 54, 'semi_join': 40})
[     4.121][MainProcess][INFO] Solution found: left_join(summarise(@param0, n = n(), age), @param0)
[     4.178][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i019.csv", col_types = cols(id = col_integer(),age = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o019.csv", col_types = cols(id = col_integer(),age = col_integer(),n = col_integer()))

df2 <- input1 %>% group_by(age) %>% summarise(n = n()) %>% ungroup()
df3 <- left_join(df2, input1)
out <- df3 %>% select(id, age, n) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       age,
       n
FROM
  (SELECT LHS.age AS age,
          LHS.n AS n,
          RHS.id AS id
   FROM
     (SELECT age,
             COUNT() AS n
      FROM input1
      GROUP BY age) AS LHS
   LEFT JOIN input1 AS RHS ON (LHS.age = RHS.age))
ORDER BY id
