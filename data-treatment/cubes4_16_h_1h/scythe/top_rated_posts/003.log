[     1.594][MainProcess][INFO] Parsing specification...
[     1.598][MainProcess][DEBUG] Reading input files...
[     1.604][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i003.csv: ['string']
[     1.607][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o003.csv: ['string']
[     1.634][MainProcess][DEBUG] Generating DSL...
[     1.650][MainProcess][INFO] Creating 16 processes
[     1.709][MainProcess][DEBUG] Increasing generator loc to 2
[     1.709][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.709][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.710][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.711][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.711][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.715][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.717][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.720][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.735][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.739][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.814][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.814][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.849][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     1.852][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     1.855][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     1.857][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     1.858][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     1.861][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     1.861][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     1.861][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     1.862][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     1.864][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     1.864][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     1.875][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     1.878][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     1.905][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     1.909][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     1.911][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     1.913][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     1.926][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     1.929][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     1.968][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     1.968][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     1.971][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     1.971][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     1.993][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     1.999][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.054][cube-solver-1][DEBUG] Found solution with cube (l0 = mutate(),)
[     2.056][MainProcess][INFO] Statistics:
[     2.057][MainProcess][INFO] 	Generated cubes: 27
[     2.057][MainProcess][INFO] 	Attempted programs: 4
[     2.057][MainProcess][INFO] 		Rejected: 3
[     2.057][MainProcess][INFO] 		Failed: 0
[     2.057][MainProcess][INFO] 	Blacklist clauses: 0
[     2.057][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     2.058][MainProcess][DEBUG] 	0: Counter({'mutate': 16, 'summarise': 15})
[     2.058][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.059][MainProcess][DEBUG] 	0: Counter({'summarise': 45, 'left_join': 11, 'union': 5})
[     2.059][MainProcess][DEBUG] 	1: Counter({'mutate': 16, 'natural_join': 9, 'union': 8, 'summarise': 8, 'semi_join': 7, 'unite': 7, 'inner_join': 4, 'intersect': 2})
[     2.059][MainProcess][INFO] Solution found: mutate(@param0, concatc = string_agg(c, ', '))
[     2.186][cube-solver-4][DEBUG] Found solution with cube (l0 = left_join(), l1 = mutate())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i003.csv", col_types = cols(c = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o003.csv", col_types = cols(concatc = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df2 <- input1 %>% mutate(concatc = string_agg(c, ', '))
out <- df2 %>% select(concatc) %>% distinct() %>% arrange(concatc)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT string_agg(`c`, ', ') AS concatc
FROM input1
ORDER BY concatc
