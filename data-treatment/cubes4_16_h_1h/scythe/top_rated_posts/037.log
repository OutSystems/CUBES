[     1.680][MainProcess][INFO] Parsing specification...
[     1.683][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.683][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.684][MainProcess][DEBUG] Reading input files...
[     1.693][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i037.csv: ['int64', 'string', 'string']
[     1.699][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o037.csv: ['int64', 'string', 'string']
[     1.724][MainProcess][DEBUG] Generating DSL...
[     1.743][MainProcess][INFO] Creating 16 processes
[     1.804][MainProcess][DEBUG] Increasing generator loc to 2
[     1.804][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.805][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.805][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.805][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.806][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.806][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.806][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.809][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.810][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.814][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.817][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.822][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.830][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.831][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.837][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.851][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.960][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.979][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.004][cube-solver-8][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join())
[     2.013][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join4())
[     2.017][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = intersect())
[     2.021][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([1]))
[     2.023][cube-solver-6][DEBUG] Solving cube (l0 = summarise([1]), l1 = semi_join())
[     2.023][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = anti_join())
[     2.031][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join3())
[     2.035][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = cross_join())
[     2.036][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.038][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = mutate())
[     2.040][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = union())
[     2.054][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]))
[     2.060][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = inner_join())
[     2.112][cube-solver-12][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter())
[     2.195][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.195][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]))
[     2.199][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise([3]))
[     2.200][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.201][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([3]))
[     2.204][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.206][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([3]))
[     2.207][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.216][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.216][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[     2.219][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = summarise([3]))
[     2.221][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.252][cube-solver-14][DEBUG] Solving cube (l0 = summarise([3]), l1 = left_join())
[     2.609][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.633][cube-solver-9][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     2.697][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([3]))
[     2.709][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise([1]), l1 = natural_join())
[     2.710][MainProcess][INFO] Statistics:
[     2.710][MainProcess][INFO] 	Generated cubes: 32
[     2.710][MainProcess][INFO] 	Attempted programs: 51
[     2.710][MainProcess][INFO] 		Rejected: 13
[     2.710][MainProcess][INFO] 		Failed: 37
[     2.710][MainProcess][INFO] 	Blacklist clauses: 3
[     2.710][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     2.711][MainProcess][DEBUG] 	0: Counter({'mutate': 53, 'summarise': 48})
[     2.711][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.711][MainProcess][DEBUG] 	0: Counter({'summarise': 322, 'left_join': 102, 'union': 58})
[     2.712][MainProcess][DEBUG] 	1: Counter({'mutate': 146, 'summarise': 66, 'natural_join': 61, 'union': 46, 'anti_join': 39, 'semi_join': 36, 'inner_join': 33, 'left_join': 29, 'filter': 27})
[     2.712][MainProcess][INFO] Solution found: natural_join(@param0, summarise(@param0, c1 = min(c1), c2))
[     2.737][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise([1]), l1 = semi_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i037.csv", col_types = cols(c1 = col_integer(),c2 = col_character(),c3 = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o037.csv", col_types = cols(c1 = col_integer(),c2 = col_character(),c3 = col_character()))

df2 <- input1 %>% group_by(c2) %>% summarise(c1 = min(c1)) %>% ungroup()
df3 <- inner_join(input1, df2)
out <- df3 %>% select(c1, c2, c3) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT c1,
       c2,
       c3
FROM
  (SELECT LHS.c1 AS c1,
          LHS.c2 AS c2,
          LHS.c3 AS c3
   FROM input1 AS LHS
   INNER JOIN
     (SELECT c2,
             MIN(c1) AS c1
      FROM input1
      GROUP BY c2) AS RHS ON (LHS.c1 = RHS.c1
                              AND LHS.c2 = RHS.c2))
ORDER BY c1
