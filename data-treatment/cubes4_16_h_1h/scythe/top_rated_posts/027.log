[     1.577][MainProcess][INFO] Parsing specification...
[     1.580][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.580][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.581][MainProcess][DEBUG] Reading input files...
[     1.588][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i027.csv: ['string', 'string', 'float64']
[     1.593][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o027.csv: ['string', 'string', 'float64']
[     1.619][MainProcess][DEBUG] Generating DSL...
[     1.637][MainProcess][INFO] Creating 16 processes
[     1.707][MainProcess][DEBUG] Increasing generator loc to 2
[     1.707][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.707][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.708][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.715][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.722][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.731][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.741][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.752][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.846][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.866][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.905][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     1.917][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     1.920][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     1.922][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     1.924][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     1.924][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     1.926][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     1.928][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     1.928][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     1.931][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     1.949][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     1.952][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     1.959][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = union())
[     2.009][cube-solver-12][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter())
[     2.069][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[     2.074][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = summarise([3]))
[     2.079][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.081][cube-solver-2][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([3]))
[     2.082][cube-solver-14][DEBUG] Solving cube (l0 = summarise([3]), l1 = left_join())
[     2.085][cube-solver-2][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.087][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([3]))
[     2.091][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.094][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.120][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]))
[     2.120][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.123][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = summarise([3]))
[     2.125][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.446][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.483][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.554][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([3]))
[     2.659][cube-solver-0][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([3]))
[     2.694][cube-solver-1][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     2.721][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     2.769][cube-solver-4][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise([3]))
[     2.783][cube-solver-5][DEBUG] Solving cube (l0 = cross_join([1]), l1 = mutate())
[     2.785][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     2.798][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     2.801][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     2.804][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = summarise([3]))
[     2.835][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = semi_join())
[     2.836][MainProcess][INFO] Statistics:
[     2.836][MainProcess][INFO] 	Generated cubes: 39
[     2.836][MainProcess][INFO] 	Attempted programs: 97
[     2.837][MainProcess][INFO] 		Rejected: 43
[     2.837][MainProcess][INFO] 		Failed: 53
[     2.837][MainProcess][INFO] 	Blacklist clauses: 4
[     2.837][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     2.837][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 48})
[     2.837][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.838][MainProcess][DEBUG] 	0: Counter({'summarise': 517, 'union': 108, 'left_join': 101, 'semi_join': 37, 'mutate': 4})
[     2.839][MainProcess][DEBUG] 	1: Counter({'mutate': 185, 'summarise': 120, 'filter': 84, 'union': 75, 'left_join': 72, 'natural_join': 71, 'inner_join': 60, 'anti_join': 54, 'semi_join': 49})
[     2.839][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, avg = max(avg), cname))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i027.csv", col_types = cols(cname = col_character(),wmname = col_character(),avg = col_double()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o027.csv", col_types = cols(cname = col_character(),wmname = col_character(),maxavg = col_double()))

df2 <- input1 %>% group_by(cname) %>% summarise(avg = max(avg)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(cname, wmname, maxavg = avg) %>% arrange(cname)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT cname,
       wmname,
       AVG AS maxavg
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT cname,
                  MAX(AVG) AS AVG
           FROM input1
           GROUP BY cname) AS RHS
        WHERE (LHS.cname = RHS.cname
               AND LHS.avg = RHS.avg) ))
ORDER BY cname
