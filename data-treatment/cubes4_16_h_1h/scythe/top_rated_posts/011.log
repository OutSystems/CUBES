[     1.574][MainProcess][INFO] Parsing specification...
[     1.578][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.578][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.578][MainProcess][DEBUG] Reading input files...
[     1.585][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i011_1.csv: ['int64', 'string']
[     1.590][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i011_2.csv: ['int64', 'int64', 'string']
[     1.595][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o011.csv: ['int64', 'string', 'string']
[     1.625][MainProcess][DEBUG] Generating DSL...
[     1.648][MainProcess][INFO] Creating 16 processes
[     1.709][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.709][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.709][MainProcess][DEBUG] Increasing generator loc to 2
[     1.710][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.714][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.717][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.722][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.726][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.730][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.734][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.754][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.767][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.855][cube-solver-1][WARNING] There is no solution for current loc (1).
[     1.856][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.857][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.919][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.919][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.921][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.071][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.071][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.075][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     2.078][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.079][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.081][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.082][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.083][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.083][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.086][cube-solver-5][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.086][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.100][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.100][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.115][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = intersect())
[     2.135][cube-solver-11][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]))
[     2.146][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([4]))
[     2.152][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join4())
[     2.158][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.203][cube-solver-14][DEBUG] Solving cube (l0 = summarise([6]), l1 = union())
[     2.299][cube-solver-1][DEBUG] Solving cube (l0 = summarise([10]), l1 = semi_join())
[     2.359][cube-solver-0][DEBUG] Solving cube (l0 = summarise([11]), l1 = cross_join())
[     2.363][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.380][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.386][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = summarise([12]))
[     2.586][cube-solver-2][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise())
[     2.588][MainProcess][INFO] Statistics:
[     2.588][MainProcess][INFO] 	Generated cubes: 26
[     2.589][MainProcess][INFO] 	Attempted programs: 5
[     2.589][MainProcess][INFO] 		Rejected: 4
[     2.589][MainProcess][INFO] 		Failed: 0
[     2.589][MainProcess][INFO] 	Blacklist clauses: 24
[     2.589][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.590][MainProcess][DEBUG] 	0: Counter({'summarise': 140, 'left_join': 52, 'natural_join': 49, 'union': 16})
[     2.591][MainProcess][DEBUG] 	1: Counter({'summarise': 69, 'mutate': 48, 'natural_join3': 35, 'left_join': 34, 'natural_join': 31, 'inner_join': 21, 'union': 19})
[     2.591][MainProcess][INFO] Solution found: summarise(natural_join(@param0, @param1), concatCity = string_agg(City, ', '), Name, VehicleID)
[     3.204][cube-solver-11][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise([4]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i011_1.csv", col_types = cols(VehicleID = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i011_2.csv", col_types = cols(LocationID = col_integer(),VehicleID = col_integer(),City = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o011.csv", col_types = cols(VehicleID = col_integer(),Name = col_character(),concatCity = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df3 <- inner_join(input1, input2)
df4 <- df3 %>% group_by(Name, VehicleID) %>% summarise(concatCity = string_agg(City, ', ')) %>% ungroup()
out <- df4 %>% select(VehicleID, Name, concatCity) %>% arrange(VehicleID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `VehicleID`,
       `Name`,
       `concatCity`
FROM
  (SELECT `Name`,
          `VehicleID`,
          string_agg(`City`, ', ') AS concatCity
   FROM
     (SELECT LHS.VehicleID AS VehicleID,
             LHS.Name AS Name,
             RHS.LocationID AS LocationID,
             RHS.City AS City
      FROM input1 AS LHS
      INNER JOIN input2 AS RHS ON (LHS.VehicleID = RHS.VehicleID))
   GROUP BY Name,
            VehicleID)
ORDER BY VehicleID
