[     1.657][MainProcess][INFO] Parsing specification...
[     1.660][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.660][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.661][MainProcess][DEBUG] Reading input files...
[     1.668][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i013.csv: ['string', 'int64']
[     1.673][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o013.csv: ['string', 'int64', 'int64']
[     1.699][MainProcess][DEBUG] Generating DSL...
[     1.716][MainProcess][INFO] Creating 16 processes
[     1.781][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.781][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.782][MainProcess][DEBUG] Increasing generator loc to 3
[     1.781][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.782][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.783][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.783][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.783][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.783][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.787][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.792][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.798][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.799][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.800][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.808][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.814][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.815][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.953][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.060][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.076][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.078][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.079][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.080][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.105][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.109][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.110][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.111][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.112][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.113][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.114][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.115][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.116][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.119][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.119][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.130][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.133][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.136][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = summarise())
[     2.140][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.148][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = mutate())
[     2.153][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     2.181][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = mutate())
[     2.185][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = intersect())
[     2.185][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     2.189][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = semi_join())
[     2.273][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([2]))
[     2.276][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = cross_join())
[     2.311][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([2]), l2 = summarise())
[     2.314][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = mutate())
[     2.345][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([2]))
[     2.353][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = inner_join())
[     2.467][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter([3]))
[     2.471][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = filter([3]))
[     2.513][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter([3]))
[     2.560][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter([3]))
[     2.562][MainProcess][INFO] Statistics:
[     2.562][MainProcess][INFO] 	Generated cubes: 34
[     2.563][MainProcess][INFO] 	Attempted programs: 1
[     2.563][MainProcess][INFO] 		Rejected: 0
[     2.563][MainProcess][INFO] 		Failed: 0
[     2.563][MainProcess][INFO] 	Blacklist clauses: 3
[     2.563][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.564][MainProcess][DEBUG] 	0: Counter({'mutate': 50, 'summarise': 36})
[     2.564][MainProcess][DEBUG] 	1: Counter({'filter': 86})
[     2.565][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.565][MainProcess][DEBUG] 	0: Counter({'summarise': 243})
[     2.565][MainProcess][DEBUG] 	1: Counter({'filter': 236, 'anti_join': 7, 'natural_join': 1})
[     2.566][MainProcess][DEBUG] 	2: Counter({'natural_join': 39, 'filter': 32, 'summarise': 27, 'left_join': 25, 'union': 23, 'mutate': 23, 'semi_join': 21, 'natural_join3': 20, 'anti_join': 18, 'inner_join': 16})
[     2.566][MainProcess][INFO] Solution found: filter(natural_join(summarise(@param0, n = n(), orgName), @param0), n > 1)
[     2.841][cube-solver-12][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i013.csv", col_types = cols(orgName = col_character(),id = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o013.csv", col_types = cols(orgName = col_character(),n = col_integer(),id = col_integer()))

df2 <- input1 %>% group_by(orgName) %>% summarise(n = n()) %>% ungroup()
df3 <- inner_join(df2, input1)
df4 <- df3 %>% filter(n > 1)
out <- df4 %>% select(orgName, n, id) %>% arrange(orgName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT orgName,
       n,
       id
FROM
  (SELECT LHS.orgName AS orgName,
          LHS.n AS n,
          RHS.id AS id
   FROM
     (SELECT orgName,
             COUNT() AS n
      FROM input1
      GROUP BY orgName) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.orgName = RHS.orgName))
WHERE (n > 1.0)
ORDER BY orgName
