[     1.594][MainProcess][INFO] Parsing specification...
[     1.596][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.597][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.597][MainProcess][DEBUG] Reading input files...
[     1.604][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i043.csv: ['string', 'string']
[     1.608][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o043.csv: ['string', 'string']
[     1.633][MainProcess][DEBUG] Generating DSL...
[     1.649][MainProcess][INFO] Creating 16 processes
[     1.706][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.706][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.706][MainProcess][DEBUG] Increasing generator loc to 3
[     1.706][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.706][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.707][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.707][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.707][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.708][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.710][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.715][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.717][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.728][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.731][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.732][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.743][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.744][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.949][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     1.952][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     1.954][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     1.958][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     1.960][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     1.963][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     1.967][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     1.970][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.971][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     1.972][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     1.973][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     1.974][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     1.976][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     1.985][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     1.987][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     1.992][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     1.992][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     1.995][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     1.995][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.010][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.013][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.122][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.126][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.140][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.143][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = intersect())
[     2.155][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.155][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.157][MainProcess][INFO] Statistics:
[     2.157][MainProcess][INFO] 	Generated cubes: 29
[     2.157][MainProcess][INFO] 	Attempted programs: 3
[     2.157][MainProcess][INFO] 		Rejected: 1
[     2.158][MainProcess][INFO] 		Failed: 1
[     2.158][MainProcess][INFO] 	Blacklist clauses: 0
[     2.158][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.158][MainProcess][DEBUG] 	0: Counter({'summarise': 57})
[     2.158][MainProcess][DEBUG] 	1: Counter({'filter': 45, 'natural_join': 12})
[     2.159][MainProcess][DEBUG] 	2: Counter({'filter': 22, 'summarise': 12, 'natural_join': 11, 'left_join': 7, 'anti_join': 5})
[     2.159][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.159][MainProcess][DEBUG] 	0: Counter({'summarise': 13, 'mutate': 12})
[     2.159][MainProcess][DEBUG] 	1: Counter({'filter': 25})
[     2.159][MainProcess][INFO] Solution found: anti_join(@param0, filter(summarise(@param0, n = n(), EmailAddress), n <= 1), 'EmailAddress')
[     2.476][cube-solver-10][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i043.csv", col_types = cols(CustomerName = col_character(),EmailAddress = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o043.csv", col_types = cols(CustomerName = col_character(),EmailAddress = col_character()))

df2 <- input1 %>% group_by(EmailAddress) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n <= 1)
df4 <- anti_join(input1, df3, by=c('EmailAddress'))
out <- df4 %>% select(CustomerName, EmailAddress) %>% arrange(CustomerName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT CustomerName,
       EmailAddress
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT EmailAddress,
                     COUNT() AS n
              FROM input1
              GROUP BY EmailAddress)
           WHERE (n <= 1.0)) AS RHS
        WHERE (LHS.EmailAddress = RHS.EmailAddress) ))
ORDER BY CustomerName
