[     1.703][MainProcess][INFO] Parsing specification...
[     1.706][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.706][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.707][MainProcess][DEBUG] Reading input files...
[     1.714][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i016.csv: ['int64', 'int64', 'string']
[     1.718][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o016.csv: ['int64', 'string']
[     1.746][MainProcess][DEBUG] Generating DSL...
[     1.765][MainProcess][INFO] Creating 16 processes
[     1.827][MainProcess][DEBUG] Increasing generator loc to 2
[     1.827][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.827][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.828][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.828][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.828][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.828][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.828][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.835][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.835][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.841][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.842][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.857][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.858][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.864][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.873][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.874][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.981][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.001][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.023][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.030][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.035][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     2.041][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.043][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.047][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.051][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     2.057][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.060][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.067][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.203][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.205][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.206][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.207][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.209][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.210][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.211][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.213][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.219][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.223][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.232][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.247][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     2.251][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.254][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.263][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.575][cube-solver-3][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise())
[     2.576][MainProcess][INFO] Statistics:
[     2.576][MainProcess][INFO] 	Generated cubes: 27
[     2.576][MainProcess][INFO] 	Attempted programs: 5
[     2.577][MainProcess][INFO] 		Rejected: 4
[     2.577][MainProcess][INFO] 		Failed: 0
[     2.577][MainProcess][INFO] 	Blacklist clauses: 0
[     2.577][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     2.577][MainProcess][DEBUG] 	0: Counter({'summarise': 48, 'mutate': 40})
[     2.577][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.577][MainProcess][DEBUG] 	0: Counter({'summarise': 217, 'left_join': 41, 'union': 38})
[     2.577][MainProcess][DEBUG] 	1: Counter({'mutate': 74, 'semi_join': 49, 'natural_join': 48, 'left_join': 33, 'summarise': 33, 'union': 18, 'unite': 16, 'anti_join': 13, 'inner_join': 12})
[     2.577][MainProcess][INFO] Solution found: summarise(left_join(@param0, @param0), concatEMPLOYEE = string_agg(EMPLOYEE, ', '), COMPANY_ID)
[     2.837][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i016.csv", col_types = cols(ID = col_integer(),COMPANY_ID = col_integer(),EMPLOYEE = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o016.csv", col_types = cols(COMPANY_ID = col_integer(),concatEMPLOYEE = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df2 <- left_join(input1, input1)
df3 <- df2 %>% group_by(COMPANY_ID) %>% summarise(concatEMPLOYEE = string_agg(EMPLOYEE, ', ')) %>% ungroup()
out <- df3 %>% select(COMPANY_ID, concatEMPLOYEE) %>% arrange(COMPANY_ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `COMPANY_ID`,
       `concatEMPLOYEE`
FROM
  (SELECT `COMPANY_ID`,
          string_agg(`EMPLOYEE`, ', ') AS concatEMPLOYEE
   FROM
     (SELECT LHS.ID AS ID,
             LHS.COMPANY_ID AS COMPANY_ID,
             LHS.EMPLOYEE AS EMPLOYEE
      FROM input1 AS LHS
      LEFT JOIN input1 AS RHS ON (LHS.ID = RHS.ID
                                  AND LHS.COMPANY_ID = RHS.COMPANY_ID
                                  AND LHS.EMPLOYEE = RHS.EMPLOYEE))
   GROUP BY COMPANY_ID)
ORDER BY COMPANY_ID
