[     3.037][MainProcess][INFO] Parsing specification...
[     3.042][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.042][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.043][MainProcess][DEBUG] Reading input files...
[     3.057][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i051.csv: ['int64', 'string', 'datetime64[ns]']
[     3.063][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o051.csv: ['int64', 'string', 'datetime64[ns]']
[     3.102][MainProcess][DEBUG] Generating DSL...
[     3.124][MainProcess][INFO] Creating 16 processes
[     3.206][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.206][MainProcess][DEBUG] Increasing generator loc to 2
[     3.206][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.207][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.207][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.207][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.207][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.208][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.213][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.216][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.224][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.230][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.240][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.246][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.246][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.250][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.264][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.352][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.353][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     3.413][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     3.413][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     3.415][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     3.415][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     3.417][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     3.420][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     3.422][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     3.424][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     3.430][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     3.434][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     3.435][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     3.436][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     3.436][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     3.438][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.440][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.440][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     3.442][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     3.444][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     3.446][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     3.458][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     3.461][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     3.510][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     3.512][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     3.528][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     3.531][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     3.577][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.594][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     3.732][cube-solver-10][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     3.817][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.836][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[     3.913][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     3.921][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.103][cube-solver-4][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[     4.106][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     4.117][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     4.119][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     4.120][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     4.121][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     4.136][cube-solver-1][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     4.138][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise(), l1 = inner_join())
[     4.140][MainProcess][INFO] Statistics:
[     4.140][MainProcess][INFO] 	Generated cubes: 40
[     4.140][MainProcess][INFO] 	Attempted programs: 69
[     4.140][MainProcess][INFO] 		Rejected: 25
[     4.140][MainProcess][INFO] 		Failed: 43
[     4.141][MainProcess][INFO] 	Blacklist clauses: 1
[     4.141][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     4.141][MainProcess][DEBUG] 	0: Counter({'mutate': 48, 'summarise': 36})
[     4.141][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     4.142][MainProcess][DEBUG] 	0: Counter({'summarise': 344, 'left_join': 84, 'union': 80, 'semi_join': 53, 'mutate': 1})
[     4.142][MainProcess][DEBUG] 	1: Counter({'mutate': 144, 'summarise': 97, 'inner_join': 57, 'natural_join': 50, 'left_join': 50, 'union': 49, 'semi_join': 48, 'filter': 36, 'anti_join': 31})
[     4.142][MainProcess][INFO] Solution found: inner_join(summarise(@param0, maxdate = max(date), category), @param0, 'category' = 'category','maxdate' = 'date')
[     4.146][cube-solver-7][DEBUG] Found solution with cube (l0 = mutate(), l1 = filter())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i051.csv", col_types = cols(id = col_integer(),category = col_character(),date = col_character()))
input1$date <- ymd(input1$date)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o051.csv", col_types = cols(id = col_integer(),category = col_character(),date = col_character()))
expected_output$date <- ymd(expected_output$date)

df2 <- input1 %>% group_by(category) %>% summarise(maxdate = max(date)) %>% ungroup()
df3 <- inner_join(df2, input1, by=c('category' = 'category','maxdate' = 'date'), suffix = c('', '.other'))
out <- df3 %>% select(id, category, date = maxdate) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       category,
       maxdate AS date
FROM
  (SELECT LHS.category AS category,
          LHS.maxdate AS maxdate,
          RHS.id AS id
   FROM
     (SELECT category,
             MAX(date) AS maxdate
      FROM input1
      GROUP BY category) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.category = RHS.category
                                AND LHS.maxdate = RHS.date))
ORDER BY id
