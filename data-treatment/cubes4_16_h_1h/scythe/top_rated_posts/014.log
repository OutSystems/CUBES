[     1.563][MainProcess][INFO] Parsing specification...
[     1.565][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.565][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.566][MainProcess][DEBUG] Reading input files...
[     1.573][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i014.csv: ['int64', 'string']
[     1.577][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o014.csv: ['int64', 'string']
[     1.603][MainProcess][DEBUG] Generating DSL...
[     1.620][MainProcess][INFO] Creating 16 processes
[     1.677][MainProcess][DEBUG] Increasing generator loc to 2
[     1.677][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.677][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.678][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.678][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.678][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.678][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.678][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.682][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.682][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.688][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.690][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.701][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.705][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.709][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.717][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.721][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.793][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.796][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.822][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     1.829][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     1.831][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     1.837][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     1.839][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     1.843][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     1.846][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     1.861][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     1.862][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     1.866][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     1.873][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)
[     1.875][MainProcess][INFO] Statistics:
[     1.876][MainProcess][INFO] 	Generated cubes: 20
[     1.876][MainProcess][INFO] 	Attempted programs: 1
[     1.876][MainProcess][INFO] 		Rejected: 0
[     1.876][MainProcess][INFO] 		Failed: 0
[     1.876][MainProcess][INFO] 	Blacklist clauses: 0
[     1.876][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     1.877][MainProcess][DEBUG] 	0: Counter({'mutate': 4, 'summarise': 1})
[     1.877][MainProcess][INFO] Solution found: summarise(@param0, concatstring = string_agg(string, ', '), id)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i014.csv", col_types = cols(id = col_integer(),string = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o014.csv", col_types = cols(id = col_integer(),concatstring = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df2 <- input1 %>% group_by(id) %>% summarise(concatstring = string_agg(string, ', ')) %>% ungroup()
out <- df2 %>% select(id, concatstring) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `id`,
       `concatstring`
FROM
  (SELECT `id`,
          string_agg(`string`, ', ') AS concatstring
   FROM input1
   GROUP BY id)
ORDER BY id
