[     1.568][MainProcess][INFO] Parsing specification...
[     1.571][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.571][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.572][MainProcess][DEBUG] Reading input files...
[     1.581][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i021.csv: ['int64', 'int64', 'string', 'datetime64[ns]']
[     1.588][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o021.csv: ['int64', 'string', 'datetime64[ns]']
[     1.622][MainProcess][DEBUG] Generating DSL...
[     1.640][MainProcess][INFO] Creating 16 processes
[     1.707][MainProcess][DEBUG] Increasing generator loc to 2
[     1.707][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.707][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.708][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.715][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.722][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.731][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.732][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.735][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.751][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.754][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.758][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.878][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.878][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.940][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     1.943][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     1.951][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     1.954][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     1.957][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     1.959][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     1.962][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     1.963][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     1.963][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     1.965][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     1.965][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     1.968][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     1.969][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     1.972][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     1.974][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.974][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     1.977][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     1.977][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     1.979][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     1.979][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     1.989][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.029][cube-solver-10][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise())
[     2.031][MainProcess][INFO] Statistics:
[     2.031][MainProcess][INFO] 	Generated cubes: 27
[     2.031][MainProcess][INFO] 	Attempted programs: 1
[     2.031][MainProcess][INFO] 		Rejected: 0
[     2.032][MainProcess][INFO] 		Failed: 0
[     2.032][MainProcess][INFO] 	Blacklist clauses: 0
[     2.032][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     2.032][MainProcess][DEBUG] 	0: Counter({'mutate': 9, 'summarise': 7})
[     2.032][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.032][MainProcess][DEBUG] 	0: Counter({'summarise': 2, 'left_join': 2})
[     2.033][MainProcess][DEBUG] 	1: Counter({'natural_join': 2, 'mutate': 1, 'summarise': 1})
[     2.033][MainProcess][INFO] Solution found: summarise(left_join(@param0, @param0), maxSERVICEMONTH = max(SERVICEMONTH), CHARGEID, CHARGETYPE)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i021.csv", col_types = cols(ID = col_integer(),CHARGEID = col_integer(),CHARGETYPE = col_character(),SERVICEMONTH = col_character()))
input1$SERVICEMONTH <- mdy(input1$SERVICEMONTH)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o021.csv", col_types = cols(CHARGEID = col_integer(),CHARGETYPE = col_character(),maxSERVICEMONTH = col_character()))
expected_output$maxSERVICEMONTH <- mdy(expected_output$maxSERVICEMONTH)

df2 <- left_join(input1, input1)
df3 <- df2 %>% group_by(CHARGEID, CHARGETYPE) %>% summarise(maxSERVICEMONTH = max(SERVICEMONTH)) %>% ungroup()
out <- df3 %>% select(CHARGEID, CHARGETYPE, maxSERVICEMONTH) %>% arrange(CHARGEID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT CHARGEID,
       CHARGETYPE,
       maxSERVICEMONTH
FROM
  (SELECT CHARGEID,
          CHARGETYPE,
          MAX(SERVICEMONTH) AS maxSERVICEMONTH
   FROM
     (SELECT LHS.ID AS ID,
             LHS.CHARGEID AS CHARGEID,
             LHS.CHARGETYPE AS CHARGETYPE,
             LHS.SERVICEMONTH AS SERVICEMONTH
      FROM input1 AS LHS
      LEFT JOIN input1 AS RHS ON (LHS.ID = RHS.ID
                                  AND LHS.CHARGEID = RHS.CHARGEID
                                  AND LHS.CHARGETYPE = RHS.CHARGETYPE
                                  AND LHS.SERVICEMONTH = RHS.SERVICEMONTH))
   GROUP BY CHARGEID,
            CHARGETYPE)
ORDER BY CHARGEID
