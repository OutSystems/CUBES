[     3.010][MainProcess][INFO] Parsing specification...
[     3.015][MainProcess][DEBUG] Reading input files...
[     3.022][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_1.csv: ['int64', 'string']
[     3.027][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_2.csv: ['string', 'string']
[     3.032][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_o.csv: ['int64', 'string']
[     3.063][MainProcess][DEBUG] Generating DSL...
[     3.080][MainProcess][INFO] Creating 16 processes
[     3.146][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.146][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.146][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.146][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.146][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.146][MainProcess][DEBUG] Increasing generator loc to 2
[     3.146][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.146][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.150][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     3.150][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.155][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     3.161][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.165][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.169][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.175][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.187][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.190][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.221][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     3.227][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     3.254][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.257][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     3.272][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.273][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     3.274][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.297][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     3.297][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.298][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     3.300][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.301][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.302][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.319][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect())
[     3.331][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.334][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join([1]))
[     3.335][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.339][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join([2]))
[     3.339][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.343][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect())
[     3.345][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join([2]))
[     3.348][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     3.351][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([3]))
[     3.355][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join([2]))
[     3.358][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     3.360][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     3.362][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([3]))
[     3.361][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join([2]))
[     3.366][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join([2]))
[     3.367][cube-solver-11][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     3.369][cube-solver-11][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect())
[     3.369][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join([2]))
[     3.371][cube-solver-11][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     3.372][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([3]))
[     3.374][cube-solver-11][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join([2]))
[     3.376][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     3.377][cube-solver-11][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     3.378][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([5]), l1 = natural_join([2]))
[     3.379][cube-solver-11][DEBUG] Solving cube (l0 = anti_join([5]), l1 = natural_join3())
[     3.385][cube-solver-11][DEBUG] Solving cube (l0 = anti_join([5]), l1 = natural_join4())
[     3.392][cube-solver-11][DEBUG] Solving cube (l0 = anti_join([6]), l1 = anti_join([6]))
[     3.403][cube-solver-11][DEBUG] Solving cube (l0 = anti_join([7]), l1 = left_join([2]))
[     3.480][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join([2]))
[     3.487][cube-solver-15][DEBUG] Solving cube (l0 = anti_join([19]), l1 = union())
[     3.487][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union())
[     3.492][cube-solver-12][DEBUG] Solving cube (l0 = anti_join([19]), l1 = intersect([5]))
[     3.499][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join([2]))
[     3.505][cube-solver-14][DEBUG] Solving cube (l0 = anti_join([20]), l1 = semi_join([2]))
[     3.535][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.542][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.550][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join([8]))
[     3.561][cube-solver-8][DEBUG] Solving cube (l0 = left_join([2]), l1 = natural_join([2]))
[     3.566][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]))
[     3.571][cube-solver-2][DEBUG] Solving cube (l0 = left_join([2]), l1 = natural_join3())
[     3.598][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3())
[     3.602][cube-solver-1][DEBUG] Solving cube (l0 = left_join([2]), l1 = natural_join4())
[     3.607][cube-solver-1][DEBUG] Solving cube (l0 = left_join([2]), l1 = anti_join([22]))
[     3.619][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join4())
[     3.623][cube-solver-7][DEBUG] Solving cube (l0 = left_join([2]), l1 = left_join([2]))
[     3.629][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([22]))
[     3.634][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     3.638][cube-solver-4][DEBUG] Solving cube (l0 = left_join([2]), l1 = union())
[     3.647][cube-solver-0][DEBUG] Solving cube (l0 = left_join([2]), l1 = intersect([8]))
[     3.652][cube-solver-8][DEBUG] Solving cube (l0 = left_join([2]), l1 = semi_join([2]))
[     3.675][cube-solver-13][DEBUG] Solving cube (l0 = left_join([2]), l1 = cross_join([2]))
[     3.692][cube-solver-14][DEBUG] Solving cube (l0 = left_join([2]), l1 = inner_join([16]))
[     3.703][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = natural_join([2]))
[     3.720][cube-solver-6][DEBUG] Solving cube (l0 = anti_join([22]), l1 = cross_join([2]))
[     3.730][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = natural_join3())
[     3.733][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = natural_join4())
[     3.736][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = anti_join([22]))
[     3.737][cube-solver-13][DEBUG] Solving cube (l0 = union(), l1 = left_join([2]))
[     3.750][cube-solver-15][DEBUG] Solving cube (l0 = union(), l1 = union())
[     3.779][cube-solver-9][DEBUG] Found solution with cube (l0 = inner_join(),)
[     3.780][MainProcess][INFO] Statistics:
[     3.780][MainProcess][INFO] 	Generated cubes: 66
[     3.780][MainProcess][INFO] 	Attempted programs: 142
[     3.780][MainProcess][INFO] 		Rejected: 2
[     3.781][MainProcess][INFO] 		Failed: 139
[     3.781][MainProcess][INFO] 	Blacklist clauses: 58
[     3.781][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     3.781][MainProcess][DEBUG] 	0: Counter({'union': 48, 'inner_join': 19})
[     3.781][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     3.781][MainProcess][DEBUG] 	0: Counter({'left_join': 9, 'union': 6})
[     3.781][MainProcess][DEBUG] 	1: Counter({'union': 9, 'natural_join': 4, 'left_join': 2})
[     3.782][MainProcess][INFO] Solution found: inner_join(@param0, @param1, 'item' = 'f2','f2' = 'f2')
[     4.207][cube-solver-14][DEBUG] Found solution with cube (l0 = left_join([2]), l1 = inner_join([16]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/003_1.csv", col_types = cols(ID = col_integer(),item = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/003_2.csv", col_types = cols(f1 = col_character(),f2 = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/003_o.csv", col_types = cols(ID = col_integer(),item = col_character()))

df3 <- inner_join(input1, input2, by=c('item' = 'f2','f2' = 'f2'), suffix = c('', '.other'))
out <- df3 %>% select(ID, item = f1) %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ID,
       f1 AS item
FROM
  (SELECT LHS.ID AS ID,
          LHS.item AS item,
          RHS.f1 AS f1
   FROM input1 AS LHS
   INNER JOIN input2 AS RHS ON (LHS.item = RHS.f2))
ORDER BY ID
