[     1.896][MainProcess][INFO] Parsing specification...
[     1.899][MainProcess][DEBUG] Reading input files...
[     1.903][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/022_2.csv: ['int64', 'int64']
[     1.906][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/022_o.csv: ['int64']
[     1.932][MainProcess][DEBUG] Generating DSL...
[     2.138][MainProcess][INFO] Creating 16 processes
[     2.206][MainProcess][DEBUG] Increasing generator loc to 4
[     2.367][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.372][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.379][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.379][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.388][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.389][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.390][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.391][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.396][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.399][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.399][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.403][cube-solver-12][DEBUG] Initialising process for 4 lines of code.
[     2.412][cube-solver-13][DEBUG] Initialising process for 4 lines of code.
[     2.431][cube-solver-14][DEBUG] Initialising process for 4 lines of code.
[     2.492][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.556][cube-solver-15][DEBUG] Initialising process for 4 lines of code.
[    11.056][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = summarise())
[    11.056][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = mutate())
[    11.070][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = summarise())
[    11.087][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = summarise(), l2 = filter())
[    11.088][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[    11.089][cube-solver-4][DEBUG] Initialising process for 4 lines of code.
[    11.092][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = mutate())
[    11.110][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[    11.119][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = mutate(), l2 = filter())
[    11.121][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = summarise())
[    11.136][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = mutate(), l2 = filter())
[    11.198][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[    11.217][cube-solver-0][DEBUG] Initialising process for 4 lines of code.
[    11.323][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = mutate())
[    12.554][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[    12.556][MainProcess][INFO] Statistics:
[    12.556][MainProcess][INFO] 	Generated cubes: 18
[    12.556][MainProcess][INFO] 	Attempted programs: 26
[    12.557][MainProcess][INFO] 		Rejected: 17
[    12.557][MainProcess][INFO] 		Failed: 8
[    12.557][MainProcess][INFO] 	Blacklist clauses: 0
[    12.557][MainProcess][DEBUG] Priting statistics for good programs of size 3
[    12.558][MainProcess][DEBUG] 	0: Counter({'mutate': 432, 'filter': 390, 'summarise': 324})
[    12.558][MainProcess][DEBUG] 	1: Counter({'mutate': 531, 'filter': 461, 'summarise': 155})
[    12.559][MainProcess][DEBUG] 	2: Counter({'mutate': 545, 'summarise': 307, 'filter': 296})
[    12.559][MainProcess][INFO] Solution found: mutate(filter(summarise(@param0, n = n(), c1), c1 < 3 | n == 3), maxc1 = max(c1))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/022_2.csv", col_types = cols(c1 = col_integer(),c2 = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/022_o.csv", col_types = cols(c3 = col_integer()))

df2 <- input1 %>% group_by(c1) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(c1 < 3 | n == 3)
df4 <- df3 %>% mutate(maxc1 = max(c1))
out <- df4 %>% select(c3 = maxc1) %>% distinct() %>% arrange(c3)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT MAX(c1) OVER () AS c3
FROM
  (SELECT c1,
          COUNT() AS n
   FROM input1
   GROUP BY c1)
WHERE (c1 < 3.0
       OR n = 3.0)
ORDER BY c3
