[     3.393][MainProcess][INFO] Parsing specification...
[     3.398][MainProcess][DEBUG] Reading input files...
[     3.406][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_1.csv: ['float64', 'int64']
[     3.410][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_2.csv: ['float64', 'int64']
[     3.415][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_o.csv: ['float64', 'int64', 'float64']
[     3.445][MainProcess][DEBUG] Generating DSL...
[     3.462][MainProcess][INFO] Creating 16 processes
[     3.537][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.537][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.537][MainProcess][DEBUG] Increasing generator loc to 2
[     3.537][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.537][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.537][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.537][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.537][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.537][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.540][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     3.548][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.548][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     3.557][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.561][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.565][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.572][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.573][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.599][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     3.601][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     3.627][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.633][cube-solver-4][DEBUG] Found solution with cube (l0 = left_join(),)
[     3.634][MainProcess][INFO] Statistics:
[     3.635][MainProcess][INFO] 	Generated cubes: 17
[     3.635][MainProcess][INFO] 	Attempted programs: 3
[     3.635][MainProcess][INFO] 		Rejected: 0
[     3.635][MainProcess][INFO] 		Failed: 2
[     3.635][MainProcess][INFO] 	Blacklist clauses: 2
[     3.635][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     3.636][MainProcess][DEBUG] 	0: Counter({'left_join': 1})
[     3.636][MainProcess][INFO] Solution found: left_join(@param1, @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/038_1.csv", col_types = cols(Date = col_double(),Sold = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/038_2.csv", col_types = cols(Date = col_double(),Tapped = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/038_o.csv", col_types = cols(Date = col_double(),Tapped = col_integer(),Sold = col_double()))

df3 <- left_join(input2, input1)
out <- df3 %>% select(Date, Tapped, Sold) %>% arrange(Date)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Date, Tapped,
             Sold
FROM
  (SELECT LHS.Date AS Date,
          LHS.Tapped AS Tapped,
          RHS.Sold AS Sold
   FROM input2 AS LHS
   LEFT JOIN input1 AS RHS ON (LHS.Date = RHS.Date))
ORDER BY Date
