[     3.299][MainProcess][INFO] Parsing specification...
[     3.305][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.305][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.306][MainProcess][DEBUG] Reading input files...
[     3.314][MainProcess][WARNING] Using integers larger than 32 bits! Converting column isbn to string.
[     3.316][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/051_1.csv: ['object', 'string']
[     3.321][MainProcess][WARNING] Using integers larger than 32 bits! Converting column isbn to string.
[     3.322][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/051_2.csv: ['object', 'string']
[     3.328][MainProcess][WARNING] Using integers larger than 32 bits! Converting column isbn to string.
[     3.329][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/051_o.csv: ['object', 'string', 'string']
[     3.365][MainProcess][DEBUG] Generating DSL...
[     3.400][MainProcess][INFO] Creating 16 processes
[     3.461][MainProcess][DEBUG] Increasing generator loc to 2
[     3.466][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.469][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.471][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.474][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.476][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.477][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.479][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.489][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.492][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.494][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.495][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.498][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.502][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.508][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.509][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.540][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.674][cube-solver-0][WARNING] There is no solution for current loc (1).
[     3.675][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     3.676][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.678][cube-solver-1][WARNING] There is no solution for current loc (1).
[     3.678][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.679][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.969][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     3.973][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     3.976][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     3.977][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     3.978][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     3.980][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     3.985][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     3.986][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     3.989][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     3.996][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     3.997][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     3.999][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join3())
[     3.999][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([1]))
[     3.999][cube-solver-12][DEBUG] Solving cube (l0 = summarise([1]), l1 = anti_join())
[     3.999][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     4.015][cube-solver-14][DEBUG] Solving cube (l0 = summarise([3]), l1 = union())
[     4.034][cube-solver-8][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join())
[     4.044][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     4.049][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     4.167][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     4.172][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = summarise([15]))
[     4.203][cube-solver-15][DEBUG] Solving cube (l0 = summarise([17]), l1 = intersect())
[     4.209][cube-solver-1][DEBUG] Solving cube (l0 = summarise([17]), l1 = cross_join())
[     4.315][cube-solver-0][DEBUG] Solving cube (l0 = summarise([24]), l1 = semi_join())
[     4.403][cube-solver-2][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise())
[     4.404][MainProcess][INFO] Statistics:
[     4.404][MainProcess][INFO] 	Generated cubes: 26
[     4.404][MainProcess][INFO] 	Attempted programs: 9
[     4.405][MainProcess][INFO] 		Rejected: 8
[     4.405][MainProcess][INFO] 		Failed: 0
[     4.405][MainProcess][INFO] 	Blacklist clauses: 32
[     4.405][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     4.405][MainProcess][DEBUG] 	0: Counter({'summarise': 77, 'natural_join': 54, 'left_join': 46, 'union': 10})
[     4.406][MainProcess][DEBUG] 	1: Counter({'summarise': 58, 'mutate': 52, 'left_join': 23, 'natural_join3': 19, 'union': 19, 'natural_join': 16})
[     4.406][MainProcess][INFO] Solution found: summarise(natural_join(@param0, @param1), concatAuthor = string_agg(Author, ', '), isbn, title)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/051_1.csv", col_types = cols(isbn = col_character(),title = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/051_2.csv", col_types = cols(isbn = col_character(),Author = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/051_o.csv", col_types = cols(isbn = col_character(),title = col_character(),author = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df3 <- inner_join(input1, input2)
df4 <- df3 %>% group_by(isbn, title) %>% summarise(concatAuthor = string_agg(Author, ', ')) %>% ungroup()
out <- df4 %>% select(isbn, title, author = concatAuthor) %>% arrange(isbn)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `isbn`,
       `title`,
       `concatAuthor` AS `author`
FROM
  (SELECT `isbn`,
          `title`,
          string_agg(`Author`, ', ') AS concatAuthor
   FROM
     (SELECT LHS.isbn AS isbn,
             LHS.title AS title,
             RHS.Author AS Author
      FROM input1 AS LHS
      INNER JOIN input2 AS RHS ON (LHS.isbn = RHS.isbn))
   GROUP BY isbn,
            title)
ORDER BY isbn
