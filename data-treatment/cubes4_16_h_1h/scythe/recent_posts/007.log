[     3.043][MainProcess][INFO] Parsing specification...
[     3.047][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.047][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.048][MainProcess][DEBUG] Reading input files...
[     3.059][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/007.csv: ['string', 'datetime64[ns]', 'datetime64[ns]', 'int64']
[     3.067][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/007_o.csv: ['string', 'datetime64[ns]', 'datetime64[ns]', 'int64']
[     3.109][MainProcess][DEBUG] Generating DSL...
[     4.617][MainProcess][INFO] Creating 16 processes
[     4.691][MainProcess][DEBUG] Increasing generator loc to 3
[     6.924][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     6.929][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     6.999][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     7.013][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     7.027][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     7.058][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     7.066][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     7.067][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     7.075][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     7.094][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     7.118][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     7.127][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.146][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     7.150][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     7.153][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     7.155][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[    39.276][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    39.479][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[    39.480][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[    39.546][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    39.615][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    40.549][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    49.333][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    72.803][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise())
[    72.895][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = mutate())
[    72.985][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = summarise())
[    72.988][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate())
[    73.027][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = mutate())
[    73.039][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = summarise())
[    73.051][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = summarise())
[    73.074][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join())
[    73.091][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise())
[    73.101][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join3())
[    73.103][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = mutate())
[    73.143][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join4())
[    73.147][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[    73.198][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = summarise())
[    73.200][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[    73.210][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = anti_join())
[    73.254][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = union())
[    73.254][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = left_join())
[    73.287][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = semi_join())
[    73.304][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = intersect())
[    73.346][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = mutate())
[    73.431][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = cross_join())
[    73.531][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = mutate())
[    73.659][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = mutate())
[    73.719][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = inner_join())
[    73.995][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[    74.022][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise())
[    74.111][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[    74.149][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[    75.206][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise())
[    75.307][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = summarise())
[    82.182][cube-solver-14][DEBUG] Found solution with cube (l0 = summarise(), l1 = summarise(), l2 = left_join())
[    82.183][MainProcess][INFO] Statistics:
[    82.184][MainProcess][INFO] 	Generated cubes: 38
[    82.184][MainProcess][INFO] 	Attempted programs: 182
[    82.184][MainProcess][INFO] 		Rejected: 126
[    82.184][MainProcess][INFO] 		Failed: 55
[    82.184][MainProcess][INFO] 	Blacklist clauses: 0
[    82.184][MainProcess][DEBUG] Priting statistics for good programs of size 2
[    82.189][MainProcess][DEBUG] 	0: Counter({'mutate': 5667, 'summarise': 1152})
[    82.193][MainProcess][DEBUG] 	1: Counter({'mutate': 6819})
[    82.193][MainProcess][DEBUG] Priting statistics for good programs of size 3
[    82.196][MainProcess][DEBUG] 	0: Counter({'summarise': 5144})
[    82.198][MainProcess][DEBUG] 	1: Counter({'summarise': 4692, 'filter': 454})
[    82.200][MainProcess][DEBUG] 	2: Counter({'natural_join3': 1085, 'union': 1074, 'left_join': 995, 'natural_join': 773, 'inner_join': 768, 'mutate': 454})
[    82.201][MainProcess][INFO] Solution found: left_join(summarise(@param0, maxToDate = max(ToDate), Code), summarise(@param0, minFromDate = min(FromDate), Code, Employee))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/007.csv", col_types = cols(Employee = col_character(),FromDate = col_character(),ToDate = col_character(),Code = col_integer()))
input1$FromDate <- mdy(input1$FromDate)
input1$ToDate <- mdy(input1$ToDate)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/007_o.csv", col_types = cols(Employee = col_character(),FromDate = col_character(),ToDate = col_character(),Code = col_integer()))
expected_output$FromDate <- mdy(expected_output$FromDate)
expected_output$ToDate <- mdy(expected_output$ToDate)

df2 <- input1 %>% group_by(Code) %>% summarise(maxToDate = max(ToDate)) %>% ungroup()
df3 <- input1 %>% group_by(Code, Employee) %>% summarise(minFromDate = min(FromDate)) %>% ungroup()
df4 <- left_join(df2, df3)
out <- df4 %>% select(Employee, FromDate = minFromDate, ToDate = maxToDate, Code) %>% arrange(Employee)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Employee,
       minFromDate AS FromDate,
       maxToDate AS ToDate,
       Code
FROM
  (SELECT LHS.Code AS Code,
          LHS.maxToDate AS maxToDate,
          RHS.Employee AS Employee,
          RHS.minFromDate AS minFromDate
   FROM
     (SELECT Code,
             MAX(ToDate) AS maxToDate
      FROM input1
      GROUP BY Code) AS LHS
   LEFT JOIN
     (SELECT Code,
             Employee,
             MIN(FromDate) AS minFromDate
      FROM input1
      GROUP BY Code,
               Employee) AS RHS ON (LHS.Code = RHS.Code))
ORDER BY Employee
