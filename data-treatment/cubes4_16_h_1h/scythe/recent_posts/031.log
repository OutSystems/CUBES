[     3.382][MainProcess][INFO] Parsing specification...
[     3.387][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.387][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.388][MainProcess][DEBUG] Reading input files...
[     3.395][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_1.csv: ['int64', 'string', 'int64']
[     3.401][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_2.csv: ['int64', 'string', 'string']
[     3.406][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_o.csv: ['int64', 'string', 'int64']
[     3.436][MainProcess][DEBUG] Generating DSL...
[     3.459][MainProcess][INFO] Creating 16 processes
[     3.548][MainProcess][DEBUG] Increasing generator loc to 2
[     3.548][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.549][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.549][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.549][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.549][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.549][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.549][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.549][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.549][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.554][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.561][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.561][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.572][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.585][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.588][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.602][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.775][cube-solver-0][WARNING] There is no solution for current loc (1).
[     3.775][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     3.777][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.778][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     3.791][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     3.800][cube-solver-6][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join4())
[     3.804][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = filter([1]))
[     3.824][cube-solver-10][DEBUG] Solving cube (l0 = filter([2]), l1 = union())
[     3.829][cube-solver-4][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join())
[     3.855][cube-solver-14][DEBUG] Solving cube (l0 = filter([6]), l1 = inner_join())
[     3.866][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([8]))
[     3.893][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([13]))
[     3.977][cube-solver-12][DEBUG] Solving cube (l0 = filter([16]), l1 = semi_join())
[     3.990][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([16]))
[     3.990][cube-solver-12][DEBUG] Solving cube (l0 = intersect(), l1 = filter([16]))
[     3.994][cube-solver-8][DEBUG] Solving cube (l0 = filter([16]), l1 = anti_join([5]))
[     4.000][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([16]))
[     4.001][cube-solver-9][DEBUG] Solving cube (l0 = filter([16]), l1 = left_join())
[     4.013][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([16]))
[     4.014][cube-solver-7][DEBUG] Solving cube (l0 = filter([16]), l1 = filter([16]))
[     4.014][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([16]))
[     4.020][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([16]))
[     4.026][cube-solver-5][DEBUG] Solving cube (l0 = filter([16]), l1 = natural_join3())
[     4.029][MainProcess][DEBUG] Increasing generator loc to 3
[     4.029][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.033][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     4.041][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     4.134][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     4.134][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     4.134][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     4.163][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.163][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([16]))
[     4.178][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     4.501][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join4())
[     4.502][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join())
[     4.508][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join3())
[     4.514][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = semi_join())
[     4.559][cube-solver-5][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter([16]), l2 = semi_join())
[     4.561][MainProcess][INFO] Statistics:
[     4.561][MainProcess][INFO] 	Generated cubes: 31
[     4.561][MainProcess][INFO] 	Attempted programs: 121
[     4.561][MainProcess][INFO] 		Rejected: 0
[     4.561][MainProcess][INFO] 		Failed: 120
[     4.561][MainProcess][INFO] 	Blacklist clauses: 52
[     4.562][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     4.562][MainProcess][DEBUG] 	0: Counter({'union': 95, 'natural_join': 73, 'left_join': 36, 'inner_join': 25})
[     4.562][MainProcess][DEBUG] 	1: Counter({'filter': 229})
[     4.562][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     4.562][MainProcess][DEBUG] 	0: Counter({'natural_join': 2})
[     4.562][MainProcess][DEBUG] 	1: Counter({'filter': 2})
[     4.563][MainProcess][DEBUG] 	2: Counter({'natural_join': 1, 'semi_join': 1})
[     4.563][MainProcess][INFO] Solution found: semi_join(natural_join(@param0, @param1), filter(natural_join(@param0, @param1), type == 'public' & accountID == 'Dave'))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/031_1.csv", col_types = cols(channelID = col_integer(),accountID = col_character(),role = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/031_2.csv", col_types = cols(channelID = col_integer(),channelName = col_character(),type = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/031_o.csv", col_types = cols(c1 = col_integer(),c2 = col_character(),c3 = col_integer()))

df3 <- inner_join(input1, input2)
df4 <- df3 %>% filter(type == 'public' & accountID == 'Dave')
df5 <- semi_join(df3, df4)
out <- df5 %>% select(c1 = channelID, c2 = accountID, c3 = role) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `channelID` AS `c1`,
       `accountID` AS `c2`,
       `role` AS `c3`
FROM
  (SELECT *
   FROM
     (SELECT `LHS`.`channelID` AS `channelID`,
             `LHS`.`accountID` AS `accountID`,
             `LHS`.`role` AS `role`,
             `RHS`.`channelName` AS `channelName`,
             `RHS`.`type` AS `type`
      FROM `input1` AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`channelID` = `RHS`.`channelID`)) AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT `LHS`.`channelID` AS `channelID`,
                     `LHS`.`accountID` AS `accountID`,
                     `LHS`.`role` AS `role`,
                     `RHS`.`channelName` AS `channelName`,
                     `RHS`.`type` AS `type`
              FROM `input1` AS `LHS`
              INNER JOIN `input2` AS `RHS` ON (`LHS`.`channelID` = `RHS`.`channelID`))
           WHERE (`type` = 'public'
                  AND `accountID` = 'Dave')) AS RHS
        WHERE (LHS.channelID = RHS.channelID
               AND LHS.accountID = RHS.accountID
               AND LHS.role = RHS.role
               AND LHS.channelName = RHS.channelName
               AND LHS.type = RHS.type) ))
ORDER BY c1
