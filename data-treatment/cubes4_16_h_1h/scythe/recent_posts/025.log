[     1.571][MainProcess][INFO] Parsing specification...
[     1.574][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.574][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.574][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.575][MainProcess][DEBUG] Reading input files...
[     1.582][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/025.csv: ['int64', 'float64', 'string']
[     1.587][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/025_o.csv: ['int64', 'float64', 'string']
[     1.612][MainProcess][DEBUG] Generating DSL...
[     1.865][MainProcess][INFO] Creating 16 processes
[     1.935][MainProcess][DEBUG] Increasing generator loc to 3
[     2.254][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.272][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.275][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.275][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.279][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.280][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.284][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.289][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.292][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.293][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.294][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.304][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.308][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.309][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.315][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.329][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     8.245][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     8.255][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     8.275][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     8.313][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[    13.389][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([4]))
[    13.389][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[    13.405][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join(), l2 = filter())
[    13.409][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[    13.416][cube-solver-6][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join3(), l2 = filter())
[    13.431][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([4]), l2 = filter())
[    13.441][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([4]), l2 = filter())
[    13.441][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join4(), l2 = filter())
[    13.444][cube-solver-6][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]), l2 = filter())
[    13.449][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[    13.452][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([4]), l2 = filter())
[    13.455][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[    13.467][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[    13.471][cube-solver-7][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = natural_join4())
[    13.474][cube-solver-12][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = natural_join())
[    13.474][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = natural_join3())
[    13.484][cube-solver-14][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = filter())
[    13.485][cube-solver-6][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = summarise([4]))
[    13.488][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = anti_join())
[    13.490][cube-solver-7][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = union())
[    13.498][cube-solver-8][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = left_join())
[    13.508][cube-solver-11][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = intersect())
[    13.624][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[    13.645][cube-solver-15][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter(), l2 = semi_join())
[    13.673][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise([6]))
[    13.682][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise([6]))
[    13.703][cube-solver-5][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = cross_join())
[    13.713][cube-solver-9][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = mutate())
[    59.201][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    62.714][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    71.342][cube-solver-2][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([255]), l2 = inner_join())
[    74.649][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = anti_join(), l2 = filter([263]))
[   115.917][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise([4]), l1 = natural_join(), l2 = filter())
[   115.943][MainProcess][INFO] Statistics:
[   115.944][MainProcess][INFO] 	Generated cubes: 34
[   115.944][MainProcess][INFO] 	Attempted programs: 1768
[   115.944][MainProcess][INFO] 		Rejected: 1445
[   115.944][MainProcess][INFO] 		Failed: 322
[   115.945][MainProcess][INFO] 	Blacklist clauses: 269
[   115.945][MainProcess][DEBUG] Priting statistics for good programs of size 2
[   115.987][MainProcess][DEBUG] 	0: Counter({'mutate': 13473, 'filter': 11232, 'summarise': 9366})
[   116.010][MainProcess][DEBUG] 	1: Counter({'filter': 22841, 'mutate': 6240, 'summarise': 4992})
[   116.011][MainProcess][DEBUG] Priting statistics for good programs of size 3
[   116.058][MainProcess][DEBUG] 	0: Counter({'summarise': 96083})
[   116.101][MainProcess][DEBUG] 	1: Counter({'filter': 80096, 'natural_join': 12541, 'anti_join': 3456})
[   116.146][MainProcess][DEBUG] 	2: Counter({'filter': 23341, 'natural_join3': 11220, 'union': 10655, 'natural_join': 10428, 'left_join': 10235, 'mutate': 9581, 'semi_join': 7776, 'anti_join': 6168, 'inner_join': 5064, 'summarise': 1632})
[   116.147][MainProcess][INFO] Solution found: filter(natural_join(@param0, summarise(@param0, minid = min(id), gallery_id)), is.na(gallery_id) | minid == id)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/025.csv", col_types = cols(id = col_integer(),gallery_id = col_double(),path = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/025_o.csv", col_types = cols(id = col_integer(),gallery_id = col_double(),path = col_character()))

df2 <- input1 %>% group_by(gallery_id) %>% summarise(minid = min(id)) %>% ungroup()
df3 <- inner_join(input1, df2)
df4 <- df3 %>% filter(is.na(gallery_id) | minid == id)
out <- df4 %>% select(id, gallery_id, path) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       gallery_id,
       PATH
FROM
  (SELECT LHS.id AS id,
          LHS.gallery_id AS gallery_id,
          LHS.path AS PATH,
          RHS.minid AS minid
   FROM input1 AS LHS
   INNER JOIN
     (SELECT gallery_id,
             MIN(id) AS minid
      FROM input1
      GROUP BY gallery_id) AS RHS ON (LHS.gallery_id = RHS.gallery_id))
WHERE (((gallery_id) IS NULL)
       OR minid = id)
ORDER BY id
