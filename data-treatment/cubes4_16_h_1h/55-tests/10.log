[     1.956][MainProcess][INFO] Parsing specification...
[     1.960][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.961][MainProcess][DEBUG] Reading input files...
[     1.969][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10-1.txt: ['string', 'string']
[     1.974][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10-2.txt: ['string', 'string']
[     1.978][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10.out: ['string']
[     2.006][MainProcess][DEBUG] Generating DSL...
[     2.026][MainProcess][INFO] Creating 16 processes
[     2.094][MainProcess][DEBUG] Increasing generator loc to 3
[     2.094][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.094][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.094][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.094][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.095][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.095][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.095][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.096][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.102][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.103][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.108][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.109][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.112][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.134][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.135][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.143][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.392][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.393][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.394][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.470][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.470][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.472][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.474][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.478][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.479][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.481][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.482][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.483][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.483][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.483][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.485][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.486][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.487][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.488][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.489][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.489][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.491][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.491][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.495][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = intersect())
[     2.495][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.498][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = semi_join())
[     2.506][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.506][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.507][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.507][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.509][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.509][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.525][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     2.530][cube-solver-15][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([1]), l2 = inner_join())
[     2.597][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([3]), l2 = mutate())
[     2.603][cube-solver-14][DEBUG] Solving cube (l0 = summarise([6]), l1 = anti_join(), l2 = filter([3]))
[     2.665][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = summarise([6]))
[     2.676][cube-solver-13][DEBUG] Solving cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([4]))
[     2.717][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([4]))
[     2.761][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([6]), l2 = filter([4]))
[     2.939][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.941][MainProcess][INFO] Statistics:
[     2.941][MainProcess][INFO] 	Generated cubes: 35
[     2.941][MainProcess][INFO] 	Attempted programs: 17
[     2.941][MainProcess][INFO] 		Rejected: 3
[     2.941][MainProcess][INFO] 		Failed: 13
[     2.941][MainProcess][INFO] 	Blacklist clauses: 10
[     2.941][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.941][MainProcess][DEBUG] 	0: Counter({'summarise': 116, 'natural_join': 23})
[     2.941][MainProcess][DEBUG] 	1: Counter({'filter': 93, 'left_join': 14, 'mutate': 14, 'summarise': 9, 'anti_join': 9})
[     2.942][MainProcess][DEBUG] 	2: Counter({'filter': 46, 'union': 22, 'left_join': 18, 'anti_join': 15, 'natural_join': 14, 'natural_join3': 12, 'semi_join': 12})
[     2.942][MainProcess][INFO] Solution found: anti_join(@param1, filter(summarise(@param0, n = n(), S_key), n != max(n)), )
[     3.054][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     3.190][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise([6]), l2 = filter([4]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/10-1.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/10-2.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/10.out", col_types = cols(S_name = col_character()))

df3 <- input1 %>% group_by(S_key) %>% summarise(n = n()) %>% ungroup()
df4 <- df3 %>% filter(n != max(n))
df5 <- anti_join(input2, df4, by=c())
out <- df5 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT *
   FROM input2 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT S_key,
                  n
           FROM
             (SELECT S_key,
                     n,
                     MAX(n) OVER () AS zzz3
              FROM
                (SELECT S_key,
                        COUNT() AS n
                 FROM input1
                 GROUP BY S_key))
           WHERE (n != zzz3)) AS RHS
        WHERE (LHS.S_key = RHS.S_key) ))
ORDER BY S_name
