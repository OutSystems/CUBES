[     1.612][MainProcess][INFO] Parsing specification...
[     1.615][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.616][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.616][MainProcess][DEBUG] Reading input files...
[     1.623][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.628][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.632][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.638][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/20.out: ['string', 'string', 'string', 'string']
[     1.668][MainProcess][DEBUG] Generating DSL...
[     1.685][MainProcess][INFO] Creating 16 processes
[     1.753][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.753][MainProcess][DEBUG] Increasing generator loc to 2
[     1.755][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.755][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.755][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.755][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.755][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.755][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.761][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.762][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.767][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.770][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.775][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.783][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.787][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.792][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.800][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.982][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.983][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     1.984][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.060][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     2.061][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.064][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.067][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.069][cube-solver-8][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.069][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     2.071][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     2.071][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     2.073][cube-solver-8][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([1]))
[     2.073][MainProcess][DEBUG] Increasing generator loc to 3
[     2.073][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.074][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.074][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]))
[     2.076][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.081][cube-solver-13][DEBUG] Solving cube (l0 = filter([1]), l1 = cross_join())
[     2.084][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.098][cube-solver-11][DEBUG] Solving cube (l0 = filter([2]), l1 = intersect())
[     2.099][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([2]))
[     2.104][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.104][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.170][cube-solver-7][DEBUG] Solving cube (l0 = filter([3]), l1 = filter([3]))
[     2.176][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.190][cube-solver-14][DEBUG] Solving cube (l0 = filter([4]), l1 = inner_join())
[     2.191][cube-solver-4][DEBUG] Solving cube (l0 = filter([4]), l1 = natural_join())
[     2.197][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.197][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.261][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]))
[     2.266][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.307][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]))
[     2.307][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = natural_join3())
[     2.313][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.331][cube-solver-12][DEBUG] Solving cube (l0 = filter([4]), l1 = semi_join())
[     2.337][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.457][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([4]))
[     2.462][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.463][cube-solver-5][DEBUG] Found solution with cube (l0 = filter([4]), l1 = natural_join3())
[     2.464][MainProcess][INFO] Statistics:
[     2.464][MainProcess][INFO] 	Generated cubes: 35
[     2.464][MainProcess][INFO] 	Attempted programs: 3
[     2.464][MainProcess][INFO] 		Rejected: 0
[     2.464][MainProcess][INFO] 		Failed: 2
[     2.465][MainProcess][INFO] 	Blacklist clauses: 4
[     2.465][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.465][MainProcess][DEBUG] 	0: Counter({'natural_join3': 25, 'filter': 5})
[     2.465][MainProcess][DEBUG] 	1: Counter({'filter': 25, 'natural_join3': 5})
[     2.465][MainProcess][INFO] Solution found: natural_join3(@param2, @param0, filter(@param1, color == 'red'))
[     2.928][cube-solver-6][DEBUG] Found solution with cube (l0 = filter(), l1 = natural_join4())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/20.out", col_types = cols(S_key = col_character(),P_id = col_character(),S_name = col_character(),color = col_character()))

df4 <- input2 %>% filter(color == 'red')
df5 <- inner_join(input3, input1) %>% inner_join(df4)
out <- df5 %>% select(S_key, P_id, S_name, color) %>% arrange(S_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_key`,
       `P_id`,
       `S_name`,
       `color`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`S_name` AS `S_name`,
          `LHS`.`P_id` AS `P_id`,
          `RHS`.`color` AS `color`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`S_name` AS `S_name`,
             `RHS`.`P_id` AS `P_id`
      FROM `input3` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `input2`
      WHERE (`color` = 'red')) AS RHS ON (LHS.P_id = RHS.P_id))
ORDER BY S_key
