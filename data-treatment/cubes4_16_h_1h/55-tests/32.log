[     1.914][MainProcess][INFO] Parsing specification...
[     1.919][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.919][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.919][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.920][MainProcess][DEBUG] Reading input files...
[     1.928][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.932][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.938][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.942][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/32.out: ['string', 'int64']
[     1.973][MainProcess][DEBUG] Generating DSL...
[     1.997][MainProcess][INFO] Creating 16 processes
[     2.081][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.081][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.081][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.081][MainProcess][DEBUG] Increasing generator loc to 3
[     2.082][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.082][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.082][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.083][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.091][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.092][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.092][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.102][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.116][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.121][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.122][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.125][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.131][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.481][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.482][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.483][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.483][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.484][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.485][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.526][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.526][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.529][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.605][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.606][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.607][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.785][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.802][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.808][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.828][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.830][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.833][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.836][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.836][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.837][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.843][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.846][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.850][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.854][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.857][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.860][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = intersect())
[     2.864][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = semi_join())
[     2.866][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = cross_join())
[     2.869][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[     2.872][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = inner_join())
[     2.875][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = filter())
[     2.878][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = left_join(), l2 = filter())
[     2.881][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = union(), l2 = filter([1]))
[     2.885][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = intersect(), l2 = filter([1]))
[     2.889][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = semi_join(), l2 = filter([1]))
[     2.894][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = cross_join(), l2 = filter([1]))
[     2.898][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = mutate(), l2 = filter([1]))
[     2.903][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = inner_join(), l2 = filter([1]))
[     2.903][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     2.903][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = mutate())
[     2.908][cube-solver-15][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join(), l2 = summarise([2]))
[     2.911][cube-solver-14][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join(), l2 = mutate())
[     2.914][cube-solver-15][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join3(), l2 = summarise([2]))
[     2.915][cube-solver-14][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join3(), l2 = mutate())
[     2.965][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([4]), l2 = filter([6]))
[     2.978][cube-solver-12][DEBUG] Solving cube (l0 = filter([8]), l1 = natural_join4(), l2 = summarise([4]))
[     3.066][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([15]), l2 = summarise([6]))
[     3.090][cube-solver-13][DEBUG] Solving cube (l0 = filter([16]), l1 = natural_join4(), l2 = mutate())
[     3.135][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([20]))
[     3.151][cube-solver-7][DEBUG] Solving cube (l0 = filter([21]), l1 = summarise([7]), l2 = natural_join())
[     3.159][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([21]), l2 = summarise([7]))
[     3.171][cube-solver-7][DEBUG] Solving cube (l0 = filter([22]), l1 = summarise([8]), l2 = natural_join3([2]))
[     3.182][cube-solver-9][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     3.182][cube-solver-5][DEBUG] Solving cube (l0 = filter([22]), l1 = summarise([9]), l2 = natural_join4())
[     3.183][MainProcess][INFO] Statistics:
[     3.183][MainProcess][INFO] 	Generated cubes: 50
[     3.183][MainProcess][INFO] 	Attempted programs: 3
[     3.184][MainProcess][INFO] 		Rejected: 2
[     3.184][MainProcess][INFO] 		Failed: 0
[     3.184][MainProcess][INFO] 	Blacklist clauses: 33
[     3.184][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     3.184][MainProcess][DEBUG] 	0: Counter({'natural_join3': 70})
[     3.184][MainProcess][DEBUG] 	1: Counter({'filter': 54, 'mutate': 16})
[     3.185][MainProcess][DEBUG] 	2: Counter({'summarise': 27, 'mutate': 27, 'filter': 16})
[     3.185][MainProcess][INFO] Solution found: summarise(filter(natural_join3(@param0, @param2, @param1), color == 'green' & S_key != 'S4'), n = n(), P_id, S_name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/32.out", col_types = cols(P_id = col_character(),n = col_integer()))

df4 <- inner_join(input1, input3) %>% inner_join(input2)
df5 <- df4 %>% filter(color == 'green' & S_key != 'S4')
df6 <- df5 %>% group_by(P_id, S_name) %>% summarise(n = n()) %>% ungroup()
out <- df6 %>% select(P_id, n) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `P_id`,
       `n`
FROM
  (SELECT `P_id`,
          `S_name`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`P_id` AS `P_id`,
                `LHS`.`S_name` AS `S_name`,
                `RHS`.`color` AS `color`
         FROM
           (SELECT `LHS`.`S_key` AS `S_key`,
                   `LHS`.`P_id` AS `P_id`,
                   `RHS`.`S_name` AS `S_name`
            FROM `input1` AS `LHS`
            INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
         INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
      WHERE (`color` = 'green'
             AND `S_key` != 'S4'))
   GROUP BY P_id,
            S_name)
ORDER BY P_id
