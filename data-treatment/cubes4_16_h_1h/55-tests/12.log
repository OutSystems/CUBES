[     1.594][MainProcess][INFO] Parsing specification...
[     1.597][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.598][MainProcess][DEBUG] Reading input files...
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/12-1.txt: ['string', 'int64', 'string']
[     1.610][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/12.out: ['int64', 'string']
[     1.635][MainProcess][DEBUG] Generating DSL...
[     1.654][MainProcess][INFO] Creating 16 processes
[     1.718][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.718][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.718][MainProcess][DEBUG] Increasing generator loc to 3
[     1.718][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.720][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.720][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.723][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.723][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.728][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.728][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.735][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.745][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.748][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.749][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.755][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.961][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.963][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.116][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.150][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.152][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.152][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.164][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.168][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.168][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.170][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.172][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.173][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.177][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.180][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.181][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.184][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.186][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.188][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.190][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.190][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.191][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.194][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.194][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.218][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([2]))
[     2.223][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = intersect())
[     2.234][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter([2]))
[     2.240][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = semi_join())
[     2.318][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter([4]))
[     2.324][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = cross_join())
[     2.408][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[     2.410][MainProcess][INFO] Statistics:
[     2.410][MainProcess][INFO] 	Generated cubes: 31
[     2.410][MainProcess][INFO] 	Attempted programs: 6
[     2.411][MainProcess][INFO] 		Rejected: 2
[     2.411][MainProcess][INFO] 		Failed: 3
[     2.411][MainProcess][INFO] 	Blacklist clauses: 4
[     2.411][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.412][MainProcess][DEBUG] 	0: Counter({'mutate': 18, 'summarise': 17})
[     2.412][MainProcess][DEBUG] 	1: Counter({'filter': 35})
[     2.412][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.413][MainProcess][DEBUG] 	0: Counter({'summarise': 87})
[     2.413][MainProcess][DEBUG] 	1: Counter({'filter': 87})
[     2.413][MainProcess][DEBUG] 	2: Counter({'natural_join': 15, 'left_join': 14, 'natural_join3': 14, 'filter': 13, 'union': 13, 'semi_join': 10, 'summarise': 8})
[     2.413][MainProcess][INFO] Solution found: filter(summarise(@param0, n = n(), age, level), age != max(n) & n == max(n))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/12-1.txt", col_types = cols(S_key = col_character(),age = col_integer(),level = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/55-tests/tables/12.out", col_types = cols(age = col_integer(),level = col_character()))

df2 <- input1 %>% group_by(age, level) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(age != max(n) & n == max(n))
out <- df3 %>% select(age, level) %>% arrange(age)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT age,
       LEVEL
FROM
  (SELECT age,
          LEVEL,
          n
   FROM
     (SELECT age,
             LEVEL,
             n,
             MAX(n) OVER () AS zzz2,
                         MAX(n) OVER () AS zzz3
      FROM
        (SELECT age,
                LEVEL,
                COUNT() AS n
         FROM input1
         GROUP BY age,
                  LEVEL))
   WHERE (age != zzz2
          AND n = zzz3))
ORDER BY age
