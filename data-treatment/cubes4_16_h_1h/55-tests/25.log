[     1.578][MainProcess][INFO] Parsing specification...
[     1.582][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.582][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.582][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.583][MainProcess][DEBUG] Reading input files...
[     1.588][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.591][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/certified.txt: ['int64', 'int64']
[     1.595][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/25.out: ['int64']
[     1.622][MainProcess][DEBUG] Generating DSL...
[     1.854][MainProcess][INFO] Creating 16 processes
[     1.924][MainProcess][DEBUG] Increasing generator loc to 4
[     2.219][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.225][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.228][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.234][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.239][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.241][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.241][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.245][cube-solver-12][DEBUG] Initialising process for 4 lines of code.
[     2.249][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.251][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.251][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.264][cube-solver-13][DEBUG] Initialising process for 4 lines of code.
[     2.268][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.275][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.276][cube-solver-14][DEBUG] Initialising process for 4 lines of code.
[     2.313][cube-solver-15][DEBUG] Initialising process for 4 lines of code.
[    14.647][cube-solver-2][WARNING] There is no solution for current loc (3).
[    14.648][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[    14.664][cube-solver-4][WARNING] There is no solution for current loc (3).
[    14.665][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = summarise())
[    14.674][cube-solver-1][WARNING] There is no solution for current loc (3).
[    14.675][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[    14.683][cube-solver-0][WARNING] There is no solution for current loc (3).
[    14.683][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[    14.684][cube-solver-6][WARNING] There is no solution for current loc (3).
[    14.685][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = summarise())
[    14.695][cube-solver-1][DEBUG] Initialising process for 4 lines of code.
[    14.696][cube-solver-8][WARNING] There is no solution for current loc (3).
[    14.696][cube-solver-2][DEBUG] Initialising process for 4 lines of code.
[    14.697][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = summarise(), l2 = filter())
[    14.703][cube-solver-0][DEBUG] Initialising process for 4 lines of code.
[    14.707][cube-solver-10][WARNING] There is no solution for current loc (3).
[    14.707][cube-solver-7][WARNING] There is no solution for current loc (3).
[    14.707][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = mutate())
[    14.707][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = mutate())
[    14.714][cube-solver-4][DEBUG] Initialising process for 4 lines of code.
[    14.724][cube-solver-7][DEBUG] Initialising process for 4 lines of code.
[    14.729][cube-solver-3][WARNING] There is no solution for current loc (3).
[    14.730][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = mutate(), l2 = filter())
[    14.733][cube-solver-6][DEBUG] Initialising process for 4 lines of code.
[    14.744][cube-solver-8][DEBUG] Initialising process for 4 lines of code.
[    14.747][cube-solver-3][DEBUG] Initialising process for 4 lines of code.
[    14.752][cube-solver-10][DEBUG] Initialising process for 4 lines of code.
[    14.758][cube-solver-5][WARNING] There is no solution for current loc (3).
[    14.758][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = mutate())
[    14.768][cube-solver-5][DEBUG] Initialising process for 4 lines of code.
[    14.826][cube-solver-11][WARNING] There is no solution for current loc (3).
[    14.827][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = mutate(), l2 = filter())
[    14.836][cube-solver-11][DEBUG] Initialising process for 4 lines of code.
[    15.022][cube-solver-9][WARNING] There is no solution for current loc (3).
[    15.023][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = summarise())
[    15.032][cube-solver-9][DEBUG] Initialising process for 4 lines of code.
[    19.455][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise(), l3 = filter())
[    19.540][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise(), l3 = summarise())
[    19.561][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise(), l3 = mutate())
[    19.592][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate(), l3 = summarise())
[    19.593][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter(), l3 = mutate())
[    19.594][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = mutate(), l3 = filter())
[    19.614][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate(), l3 = mutate())
[    19.637][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise(), l3 = filter())
[    19.651][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter(), l3 = summarise())
[    19.659][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter(), l3 = summarise())
[    19.682][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter(), l3 = mutate())
[    19.705][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate(), l3 = filter())
[    19.728][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = summarise(), l3 = filter())
[    19.746][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter(), l3 = summarise())
[    19.763][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter(), l3 = mutate())
[    19.781][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = mutate(), l3 = filter())
[    19.799][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise(), l3 = summarise())
[    19.817][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise(), l3 = mutate())
[    19.835][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate(), l3 = summarise())
[    19.853][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate(), l3 = mutate())
[    19.871][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise(), l3 = filter())
[    19.889][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter(), l3 = summarise())
[    19.907][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter(), l3 = mutate())
[    19.925][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate(), l3 = filter())
[    19.943][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = summarise(), l3 = filter())
[    31.112][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([18]), l2 = filter(), l3 = summarise([18]))
[    31.171][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise([23]), l3 = summarise([23]))
[    31.239][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter(), l3 = mutate())
[    31.241][cube-solver-5][DEBUG] Solving cube (l0 = summarise([23]), l1 = natural_join(), l2 = filter(), l3 = summarise([23]))
[    31.243][cube-solver-2][DEBUG] Solving cube (l0 = summarise([23]), l1 = natural_join(), l2 = filter(), l3 = mutate())
[    31.273][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate(), l3 = filter())
[    32.150][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate(), l3 = summarise([28]))
[    32.183][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate(), l3 = mutate())
[    32.274][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise([28]), l3 = mutate())
[    32.324][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([28]), l2 = filter(), l3 = mutate())
[    32.326][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([28]), l2 = summarise([28]), l3 = filter())
[    32.348][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter(), l3 = summarise([28]))
[    32.379][cube-solver-3][DEBUG] Solving cube (l0 = summarise([28]), l1 = natural_join(), l2 = mutate(), l3 = filter())
[    32.408][cube-solver-11][DEBUG] Solving cube (l0 = summarise([28]), l1 = natural_join3(), l2 = summarise([28]), l3 = filter())
[    32.557][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([32]), l2 = mutate(), l3 = filter())
[    32.609][cube-solver-9][DEBUG] Solving cube (l0 = summarise([32]), l1 = natural_join3(), l2 = filter(), l3 = summarise([32]))
[    32.890][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise([34]), l3 = filter())
[    36.142][cube-solver-0][DEBUG] Solving cube (l0 = summarise([39]), l1 = natural_join3(), l2 = filter(), l3 = mutate())
[    36.731][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([39]), l1 = natural_join3(), l2 = filter(), l3 = mutate())
[    36.734][MainProcess][INFO] Statistics:
[    36.734][MainProcess][INFO] 	Generated cubes: 55
[    36.734][MainProcess][INFO] 	Attempted programs: 49
[    36.735][MainProcess][INFO] 		Rejected: 45
[    36.735][MainProcess][INFO] 		Failed: 3
[    36.735][MainProcess][INFO] 	Blacklist clauses: 39
[    36.735][MainProcess][DEBUG] Priting statistics for good programs of size 4
[    36.739][MainProcess][DEBUG] 	0: Counter({'natural_join': 5483, 'summarise': 881})
[    36.743][MainProcess][DEBUG] 	1: Counter({'summarise': 2741, 'mutate': 1680, 'filter': 1063, 'natural_join': 583, 'natural_join3': 298})
[    36.746][MainProcess][DEBUG] 	2: Counter({'mutate': 3068, 'filter': 2724, 'summarise': 573})
[    36.749][MainProcess][DEBUG] 	3: Counter({'filter': 2578, 'mutate': 2436, 'summarise': 1351})
[    36.750][MainProcess][INFO] Solution found: mutate(filter(natural_join3(@param1, summarise(@param1, n = n(), eid), @param0), crusingrange > 3 & n > 3), maxcrusingrange = max(crusingrange))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/25.out", col_types = cols(eid = col_integer()))

df3 <- input2 %>% group_by(eid) %>% summarise(n = n()) %>% ungroup()
df4 <- inner_join(input2, df3) %>% inner_join(input1)
df5 <- df4 %>% filter(crusingrange > 3 & n > 3)
df6 <- df5 %>% mutate(maxcrusingrange = max(crusingrange))
out <- df6 %>% select(eid) %>% distinct() %>% arrange(eid)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT eid
FROM
  (SELECT LHS.eid AS eid,
          LHS.aid AS aid,
          LHS.n AS n,
          RHS.aname AS aname,
          RHS.crusingrange AS crusingrange
   FROM
     (SELECT LHS.eid AS eid,
             LHS.aid AS aid,
             RHS.n AS n
      FROM input2 AS LHS
      INNER JOIN
        (SELECT eid,
                COUNT() AS n
         FROM input2
         GROUP BY eid) AS RHS ON (LHS.eid = RHS.eid)) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.aid = RHS.aid))
WHERE (crusingrange > 3.0
       AND n > 3.0)
ORDER BY eid
