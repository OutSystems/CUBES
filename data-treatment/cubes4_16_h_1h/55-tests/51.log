[     1.556][MainProcess][INFO] Parsing specification...
[     1.558][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.559][MainProcess][DEBUG] Reading input files...
[     1.566][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.571][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.575][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.580][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/51.out: ['string', 'int64']
[     1.609][MainProcess][DEBUG] Generating DSL...
[     1.629][MainProcess][INFO] Creating 16 processes
[     1.697][MainProcess][DEBUG] Increasing generator loc to 2
[     1.697][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.697][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.698][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.698][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.698][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.698][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.698][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.705][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.713][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.718][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.722][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.728][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.734][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.744][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.753][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.946][cube-solver-1][WARNING] There is no solution for current loc (1).
[     1.947][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.948][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.976][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.976][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.978][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.045][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.048][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.049][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.051][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.053][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.053][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.055][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.056][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.056][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.057][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.058][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     2.059][cube-solver-2][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     2.059][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[     2.060][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     2.060][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.060][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.061][cube-solver-6][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[     2.062][cube-solver-2][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[     2.063][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     2.063][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     2.064][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     2.064][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     2.066][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     2.067][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     2.068][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     2.069][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.070][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     2.071][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.071][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.072][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     2.073][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     2.073][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.074][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join())
[     2.075][cube-solver-6][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise())
[     2.075][cube-solver-13][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[     2.076][MainProcess][DEBUG] Increasing generator loc to 3
[     2.076][cube-solver-8][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[     2.077][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.077][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.078][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.079][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.101][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = intersect())
[     2.103][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.108][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.108][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.161][cube-solver-14][DEBUG] Solving cube (l0 = summarise([4]), l1 = union())
[     2.168][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.291][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.291][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([4]))
[     2.295][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.361][cube-solver-12][DEBUG] Solving cube (l0 = summarise([4]), l1 = anti_join())
[     2.369][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.463][cube-solver-1][DEBUG] Solving cube (l0 = summarise([5]), l1 = semi_join())
[     2.468][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.605][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = cross_join())
[     2.613][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.663][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([6]), l2 = left_join())
[     2.841][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([8]), l2 = natural_join4())
[     2.853][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([8]), l2 = inner_join())
[     2.933][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([8]), l2 = union())
[     2.945][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([8]), l2 = natural_join([2]))
[     2.979][cube-solver-6][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([8]), l2 = natural_join3([2]))
[     3.140][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([11]), l2 = cross_join())
[     3.146][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([11]), l2 = anti_join())
[     3.157][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([11]), l2 = summarise([11]))
[     3.178][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = summarise([11]))
[     3.186][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = mutate())
[     3.189][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = summarise([11]))
[     3.230][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([13]), l2 = intersect())
[     3.453][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([15]), l2 = semi_join())
[     3.580][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([16]), l2 = mutate())
[     3.598][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = mutate())
[     3.775][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.842][cube-solver-6][DEBUG] Found solution with cube (l0 = natural_join([2]), l1 = summarise([8]), l2 = natural_join3([2]))
[     3.843][MainProcess][INFO] Statistics:
[     3.844][MainProcess][INFO] 	Generated cubes: 63
[     3.844][MainProcess][INFO] 	Attempted programs: 10
[     3.844][MainProcess][INFO] 		Rejected: 6
[     3.844][MainProcess][INFO] 		Failed: 3
[     3.844][MainProcess][INFO] 	Blacklist clauses: 20
[     3.844][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     3.845][MainProcess][DEBUG] 	0: Counter({'mutate': 393, 'natural_join3': 295, 'summarise': 120})
[     3.846][MainProcess][DEBUG] 	1: Counter({'natural_join3': 345, 'natural_join4': 168, 'mutate': 160, 'summarise': 135})
[     3.846][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     3.846][MainProcess][DEBUG] 	0: Counter({'natural_join': 460})
[     3.847][MainProcess][DEBUG] 	1: Counter({'summarise': 372, 'left_join': 89})
[     3.847][MainProcess][DEBUG] 	2: Counter({'union': 103, 'natural_join3': 102, 'left_join': 73, 'natural_join': 70, 'summarise': 67, 'semi_join': 24, 'mutate': 22})
[     3.847][MainProcess][INFO] Solution found: natural_join3(summarise(natural_join(@param1, @param0), n = n(), P_id, color), @param0, @param2)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/51.out", col_types = cols(S_name = col_character(),n = col_integer()))

df4 <- inner_join(input2, input1)
df5 <- df4 %>% group_by(P_id, color) %>% summarise(n = n()) %>% ungroup()
df6 <- inner_join(df5, input1) %>% inner_join(input3)
out <- df6 %>% select(S_name, n) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT S_name,
                n
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.color AS color,
          LHS.n AS n,
          LHS.S_key AS S_key,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.color AS color,
             LHS.n AS n,
             RHS.S_key AS S_key
      FROM
        (SELECT P_id,
                color,
                COUNT() AS n
         FROM
           (SELECT LHS.P_id AS P_id,
                   LHS.color AS color,
                   RHS.S_key AS S_key
            FROM input2 AS LHS
            INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id))
         GROUP BY P_id,
                  color) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
   INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_name
