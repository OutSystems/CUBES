[     1.566][MainProcess][INFO] Parsing specification...
[     1.569][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.569][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.569][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.570][MainProcess][DEBUG] Reading input files...
[     1.576][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.579][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.582][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.586][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/36.out: ['string']
[     1.615][MainProcess][DEBUG] Generating DSL...
[     1.635][MainProcess][INFO] Creating 16 processes
[     1.700][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.700][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.700][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.700][MainProcess][DEBUG] Increasing generator loc to 3
[     1.700][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.701][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.701][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.707][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.716][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.719][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.720][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.728][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.731][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.737][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.744][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.749][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.755][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.059][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.060][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.062][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.200][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.200][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.202][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.317][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.318][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.321][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.348][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.348][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.351][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.360][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.366][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.370][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.373][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.377][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.390][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.397][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([1]), l2 = filter())
[     2.427][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.433][cube-solver-6][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = summarise([4]))
[     2.443][cube-solver-6][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = filter())
[     2.450][cube-solver-6][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter(), l2 = anti_join())
[     2.452][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter(), l2 = summarise([6]))
[     2.458][cube-solver-6][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = left_join())
[     2.462][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.467][cube-solver-6][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = intersect())
[     2.467][cube-solver-14][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = union())
[     2.476][cube-solver-6][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = semi_join())
[     2.477][cube-solver-14][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = cross_join())
[     2.479][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = mutate(), l2 = filter())
[     2.484][cube-solver-6][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = mutate())
[     2.485][cube-solver-14][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = inner_join())
[     2.493][cube-solver-6][DEBUG] Solving cube (l0 = summarise([7]), l1 = anti_join(), l2 = filter([1]))
[     2.494][cube-solver-14][DEBUG] Solving cube (l0 = summarise([7]), l1 = left_join(), l2 = filter([1]))
[     2.503][cube-solver-6][DEBUG] Solving cube (l0 = summarise([7]), l1 = union(), l2 = filter([1]))
[     2.503][cube-solver-10][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.504][MainProcess][INFO] Statistics:
[     2.504][MainProcess][INFO] 	Generated cubes: 37
[     2.504][MainProcess][INFO] 	Attempted programs: 5
[     2.504][MainProcess][INFO] 		Rejected: 0
[     2.505][MainProcess][INFO] 		Failed: 4
[     2.505][MainProcess][INFO] 	Blacklist clauses: 10
[     2.505][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.505][cube-solver-14][DEBUG] Solving cube (l0 = summarise([7]), l1 = intersect(), l2 = filter([1]))
[     2.505][MainProcess][DEBUG] 	0: Counter({'natural_join3': 4})
[     2.505][MainProcess][DEBUG] 	1: Counter({'filter': 4})
[     2.506][MainProcess][DEBUG] 	2: Counter({'mutate': 4})
[     2.506][MainProcess][INFO] Solution found: mutate(filter(natural_join3(@param2, @param0, @param1), color == 'red'), n = n())
[     2.550][cube-solver-9][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = filter(), l2 = summarise([6]))
[     2.686][cube-solver-11][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = mutate(), l2 = filter())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/36.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input3, input1) %>% inner_join(input2)
df5 <- df4 %>% filter(color == 'red')
df6 <- df5 %>% mutate(n = n())
out <- df6 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `S_name`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`S_name` AS `S_name`,
          `LHS`.`P_id` AS `P_id`,
          `RHS`.`color` AS `color`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`S_name` AS `S_name`,
             `RHS`.`P_id` AS `P_id`
      FROM `input3` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
   INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
WHERE (`color` = 'red')
ORDER BY S_name
