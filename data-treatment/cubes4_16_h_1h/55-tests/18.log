[     1.584][MainProcess][INFO] Parsing specification...
[     1.587][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.587][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.588][MainProcess][DEBUG] Reading input files...
[     1.595][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-1.txt: ['string', 'string', 'int64']
[     1.600][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-3.txt: ['string', 'string']
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18.out: ['string', 'string']
[     1.632][MainProcess][DEBUG] Generating DSL...
[     1.653][MainProcess][INFO] Creating 16 processes
[     1.718][MainProcess][DEBUG] Increasing generator loc to 2
[     1.718][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.718][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.718][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.720][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.732][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.735][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.749][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.754][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.774][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.779][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.957][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.957][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.959][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.975][cube-solver-1][WARNING] There is no solution for current loc (1).
[     1.976][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.977][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.026][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.029][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.032][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.040][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.042][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.043][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.045][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.046][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.048][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.050][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.055][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.057][cube-solver-9][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join3())
[     2.058][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.061][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = anti_join())
[     2.088][cube-solver-11][DEBUG] Solving cube (l0 = summarise([6]), l1 = summarise([6]))
[     2.099][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([7]))
[     2.191][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.199][cube-solver-12][DEBUG] Solving cube (l0 = summarise([12]), l1 = filter())
[     2.211][cube-solver-12][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.258][cube-solver-14][DEBUG] Solving cube (l0 = summarise([16]), l1 = left_join())
[     2.258][cube-solver-15][DEBUG] Solving cube (l0 = summarise([16]), l1 = union())
[     2.305][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.305][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([17]))
[     2.309][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = summarise([17]))
[     2.464][cube-solver-1][DEBUG] Solving cube (l0 = summarise([25]), l1 = semi_join())
[     2.522][cube-solver-0][DEBUG] Solving cube (l0 = summarise([28]), l1 = intersect())
[     2.674][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise([2]), l1 = natural_join3())
[     2.675][MainProcess][INFO] Statistics:
[     2.675][MainProcess][INFO] 	Generated cubes: 28
[     2.676][MainProcess][INFO] 	Attempted programs: 4
[     2.676][MainProcess][INFO] 		Rejected: 1
[     2.676][MainProcess][INFO] 		Failed: 2
[     2.676][MainProcess][INFO] 	Blacklist clauses: 42
[     2.676][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.677][MainProcess][DEBUG] 	0: Counter({'summarise': 192, 'left_join': 87, 'natural_join': 58, 'union': 20, 'anti_join': 6})
[     2.677][MainProcess][DEBUG] 	1: Counter({'summarise': 93, 'mutate': 78, 'inner_join': 48, 'natural_join3': 45, 'natural_join': 36, 'union': 27, 'left_join': 24, 'semi_join': 12})
[     2.677][MainProcess][INFO] Solution found: natural_join3(summarise(@param0, cost = max(cost), P_id), @param0, @param1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/18-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/18-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/18.out", col_types = cols(P_id = col_character(),S_name = col_character()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = max(cost)) %>% ungroup()
df4 <- inner_join(df3, input1) %>% inner_join(input2)
out <- df4 %>% select(P_id, S_name) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_id,
       S_name
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.cost AS cost,
          LHS.S_key AS S_key,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.cost AS cost,
             RHS.S_key AS S_key
      FROM
        (SELECT P_id,
                MAX(cost) AS cost
         FROM input1
         GROUP BY P_id) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id
                                   AND LHS.cost = RHS.cost)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY P_id
