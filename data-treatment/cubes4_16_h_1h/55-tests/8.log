[     1.592][MainProcess][INFO] Parsing specification...
[     1.595][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.595][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.595][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.596][MainProcess][DEBUG] Reading input files...
[     1.603][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/8-1.txt: ['string', 'string', 'int64']
[     1.608][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/8.out: ['string', 'int64']
[     1.633][MainProcess][DEBUG] Generating DSL...
[     1.651][MainProcess][INFO] Creating 16 processes
[     1.719][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.720][MainProcess][DEBUG] Increasing generator loc to 3
[     1.719][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.720][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.720][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.721][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.721][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.721][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.722][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.727][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.735][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.739][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.746][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.753][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.757][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.769][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.966][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     1.994][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.090][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.138][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.142][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.154][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.157][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.157][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.157][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.159][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.159][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.160][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.161][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.161][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.163][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.165][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.166][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.169][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.170][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.173][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.208][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([3]))
[     2.213][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = left_join())
[     2.230][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter([4]))
[     2.237][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = union())
[     2.326][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([5]), l2 = mutate())
[     2.334][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = intersect())
[     2.431][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([5]), l2 = summarise())
[     2.438][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = semi_join())
[     2.443][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([5]), l2 = mutate())
[     2.449][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = cross_join())
[     2.510][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([5]))
[     2.511][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[     2.513][MainProcess][INFO] Statistics:
[     2.513][MainProcess][INFO] 	Generated cubes: 31
[     2.513][MainProcess][INFO] 	Attempted programs: 44
[     2.513][MainProcess][INFO] 		Rejected: 1
[     2.513][MainProcess][INFO] 		Failed: 42
[     2.513][MainProcess][INFO] 	Blacklist clauses: 5
[     2.513][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.514][MainProcess][DEBUG] 	0: Counter({'filter': 54, 'mutate': 53, 'summarise': 5})
[     2.514][MainProcess][DEBUG] 	1: Counter({'filter': 58, 'summarise': 30, 'mutate': 24})
[     2.514][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.514][MainProcess][DEBUG] 	0: Counter({'summarise': 80})
[     2.514][MainProcess][DEBUG] 	1: Counter({'filter': 56, 'natural_join': 24})
[     2.514][MainProcess][DEBUG] 	2: Counter({'filter': 42, 'natural_join3': 27, 'anti_join': 9, 'natural_join': 2})
[     2.515][MainProcess][INFO] Solution found: filter(summarise(@param0, meanage = mean(age), level), level != 'JR')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/8-1.txt", col_types = cols(S_key = col_character(),level = col_character(),age = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/55-tests/tables/8.out", col_types = cols(level = col_character(),meanage = col_integer()))

df2 <- input1 %>% group_by(level) %>% summarise(meanage = mean(age)) %>% ungroup()
df3 <- df2 %>% filter(level != 'JR')
out <- df3 %>% select(level, meanage) %>% arrange(level)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `level`,
       `meanage`
FROM
  (SELECT `level`,
          AVG(`age`) AS `meanage`
   FROM `input1`
   GROUP BY `level`)
WHERE (`level` != 'JR')
ORDER BY LEVEL
