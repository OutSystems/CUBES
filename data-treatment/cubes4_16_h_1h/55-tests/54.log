[     1.593][MainProcess][INFO] Parsing specification...
[     1.596][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.596][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.597][MainProcess][DEBUG] Reading input files...
[     1.603][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.606][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/certified.txt: ['int64', 'int64']
[     1.610][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/54.out: ['int64']
[     1.636][MainProcess][DEBUG] Generating DSL...
[     1.665][MainProcess][INFO] Creating 16 processes
[     1.728][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.728][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.729][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.729][MainProcess][DEBUG] Increasing generator loc to 3
[     1.731][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.734][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.738][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.743][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.744][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.750][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.752][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.755][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.758][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.762][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.768][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.771][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.799][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.269][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.270][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.272][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.300][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.300][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.303][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.321][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.321][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.323][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.332][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.332][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.335][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.791][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.805][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.805][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.811][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.811][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.812][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.813][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.816][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.819][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.820][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.821][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.823][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.823][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.824][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.824][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.825][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.826][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.829][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = intersect())
[     2.833][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = semi_join())
[     2.833][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = cross_join())
[     2.917][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([6]))
[     2.925][cube-solver-15][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([6]), l2 = mutate())
[     2.937][cube-solver-15][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([6]), l2 = inner_join())
[     2.992][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([9]), l2 = summarise([8]))
[     3.007][cube-solver-5][DEBUG] Solving cube (l0 = summarise([8]), l1 = anti_join(), l2 = filter([10]))
[     3.147][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([10]))
[     3.417][cube-solver-0][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join4(), l2 = filter([10]))
[     3.436][cube-solver-0][DEBUG] Solving cube (l0 = summarise([11]), l1 = left_join(), l2 = filter([10]))
[     3.658][cube-solver-3][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join(), l2 = filter([10]))
[     3.673][cube-solver-2][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join3(), l2 = filter([10]))
[     3.695][cube-solver-1][DEBUG] Solving cube (l0 = summarise([11]), l1 = summarise([11]), l2 = filter([10]))
[     3.722][cube-solver-1][DEBUG] Solving cube (l0 = summarise([11]), l1 = union(), l2 = filter([10]))
[     4.299][cube-solver-7][DEBUG] Solving cube (l0 = summarise([11]), l1 = intersect(), l2 = filter([10]))
[     4.963][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise([11]), l1 = union(), l2 = filter([10]))
[     4.966][MainProcess][INFO] Statistics:
[     4.966][MainProcess][INFO] 	Generated cubes: 37
[     4.966][MainProcess][INFO] 	Attempted programs: 27
[     4.966][MainProcess][INFO] 		Rejected: 26
[     4.966][MainProcess][INFO] 		Failed: 0
[     4.966][MainProcess][INFO] 	Blacklist clauses: 21
[     4.966][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     4.968][MainProcess][DEBUG] 	0: Counter({'summarise': 1114, 'natural_join': 268})
[     4.968][MainProcess][DEBUG] 	1: Counter({'filter': 555, 'summarise': 168, 'natural_join3': 140, 'union': 139, 'left_join': 136, 'mutate': 100, 'natural_join': 94, 'anti_join': 50})
[     4.969][MainProcess][DEBUG] 	2: Counter({'filter': 827, 'union': 143, 'natural_join': 103, 'left_join': 102, 'natural_join3': 93, 'semi_join': 50, 'inner_join': 36, 'anti_join': 28})
[     4.969][MainProcess][INFO] Solution found: filter(union(@param0, summarise(@param1, n = n(), eid)), n < 3)
[     5.366][cube-solver-10][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     5.505][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/54.out", col_types = cols(eid = col_integer()))

df3 <- input2 %>% group_by(eid) %>% summarise(n = n()) %>% ungroup()
df4 <- bind_rows(input1, df3)
df5 <- df4 %>% filter(n < 3)
out <- df5 %>% select(eid) %>% arrange(eid)

Failed to generate SQL query
