[     1.598][MainProcess][INFO] Parsing specification...
[     1.601][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.601][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.601][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.602][MainProcess][DEBUG] Reading input files...
[     1.609][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-1.txt: ['string', 'string']
[     1.614][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-2.txt: ['string', 'string']
[     1.619][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-3.txt: ['string', 'string']
[     1.623][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/44.out: ['string']
[     1.652][MainProcess][DEBUG] Generating DSL...
[     1.673][MainProcess][INFO] Creating 16 processes
[     1.736][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.736][MainProcess][DEBUG] Increasing generator loc to 3
[     1.736][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.740][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.740][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.749][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.751][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.752][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.756][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.761][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.767][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.782][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.788][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.791][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.139][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.140][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.142][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.184][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.184][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.186][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.312][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.312][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.314][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.385][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.386][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.388][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.409][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.410][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.412][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.415][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.415][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.418][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.427][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.433][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([1]), l2 = summarise([1]))
[     2.436][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = summarise([1]))
[     2.436][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     2.439][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([1]), l2 = filter([1]))
[     2.444][cube-solver-4][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([1]), l2 = anti_join())
[     2.451][cube-solver-4][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([1]), l2 = left_join())
[     2.457][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([1]), l2 = union())
[     2.465][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([1]), l2 = intersect())
[     2.473][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([1]), l2 = semi_join())
[     2.480][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([1]), l2 = cross_join())
[     2.487][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([1]), l2 = mutate())
[     2.487][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[     2.492][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([1]), l2 = mutate())
[     2.494][cube-solver-7][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter([1]), l2 = inner_join())
[     2.494][cube-solver-4][DEBUG] Solving cube (l0 = summarise([5]), l1 = anti_join(), l2 = filter([1]))
[     2.503][cube-solver-4][DEBUG] Solving cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([1]))
[     2.503][cube-solver-7][DEBUG] Solving cube (l0 = summarise([6]), l1 = union(), l2 = filter([1]))
[     2.513][cube-solver-4][DEBUG] Solving cube (l0 = summarise([7]), l1 = intersect(), l2 = filter([1]))
[     2.513][cube-solver-7][DEBUG] Solving cube (l0 = summarise([7]), l1 = semi_join(), l2 = filter([1]))
[     2.523][cube-solver-7][DEBUG] Solving cube (l0 = summarise([8]), l1 = mutate(), l2 = filter([1]))
[     2.523][cube-solver-4][DEBUG] Solving cube (l0 = summarise([8]), l1 = cross_join(), l2 = filter([1]))
[     2.529][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([8]), l2 = filter([1]))
[     2.529][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     2.533][cube-solver-7][DEBUG] Solving cube (l0 = summarise([8]), l1 = inner_join(), l2 = filter([1]))
[     2.533][cube-solver-4][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join(), l2 = summarise([8]))
[     2.535][cube-solver-15][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join(), l2 = mutate())
[     2.539][cube-solver-15][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join3([2]), l2 = summarise([8]))
[     2.541][cube-solver-12][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join3([2]), l2 = mutate())
[     2.544][cube-solver-7][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join4(), l2 = summarise([8]))
[     2.544][cube-solver-4][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join4(), l2 = mutate())
[     2.604][cube-solver-10][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = filter([1]), l2 = mutate())
[     2.605][MainProcess][INFO] Statistics:
[     2.605][MainProcess][INFO] 	Generated cubes: 47
[     2.606][MainProcess][INFO] 	Attempted programs: 1
[     2.606][MainProcess][INFO] 		Rejected: 0
[     2.606][MainProcess][INFO] 		Failed: 0
[     2.606][MainProcess][INFO] 	Blacklist clauses: 11
[     2.606][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.606][MainProcess][DEBUG] 	0: Counter({'natural_join3': 22, 'filter': 1})
[     2.607][MainProcess][DEBUG] 	1: Counter({'filter': 12, 'mutate': 10, 'natural_join3': 1})
[     2.607][MainProcess][DEBUG] 	2: Counter({'filter': 10, 'mutate': 7, 'summarise': 6})
[     2.607][MainProcess][INFO] Solution found: mutate(filter(natural_join3(@param0, @param1, @param2), S_name == 'AWS'), n = n())
[     2.634][cube-solver-12][DEBUG] Found solution with cube (l0 = filter([1]), l1 = natural_join3([2]), l2 = mutate())
[     2.667][cube-solver-4][DEBUG] Found solution with cube (l0 = filter([1]), l1 = natural_join4(), l2 = mutate())
[     2.714][cube-solver-11][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     2.793][cube-solver-7][DEBUG] Found solution with cube (l0 = filter([1]), l1 = natural_join4(), l2 = summarise([8]))
[     2.823][cube-solver-8][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/16-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/16-2.txt", col_types = cols(P_id = col_character(),P_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/16-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/44.out", col_types = cols(P_name = col_character()))

df4 <- inner_join(input1, input2) %>% inner_join(input3)
df5 <- df4 %>% filter(S_name == 'AWS')
df6 <- df5 %>% mutate(n = n())
out <- df6 %>% select(P_name) %>% distinct() %>% arrange(P_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `P_name`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`P_id` AS `P_id`,
          `LHS`.`P_name` AS `P_name`,
          `RHS`.`S_name` AS `S_name`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`P_id` AS `P_id`,
             `RHS`.`P_name` AS `P_name`
      FROM `input1` AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
   INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`S_name` = 'AWS')
ORDER BY P_name
