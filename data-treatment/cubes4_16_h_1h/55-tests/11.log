[     1.586][MainProcess][INFO] Parsing specification...
[     1.589][MainProcess][DEBUG] Reading input files...
[     1.595][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/11-1.txt: ['string', 'string']
[     1.600][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/11-2.txt: ['string', 'string']
[     1.604][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/11.out: ['string']
[     1.631][MainProcess][DEBUG] Generating DSL...
[     1.645][MainProcess][INFO] Creating 16 processes
[     1.718][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.718][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     1.718][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     1.718][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     1.718][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     1.718][MainProcess][DEBUG] Increasing generator loc to 2
[     1.718][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     1.718][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     1.718][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.720][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     1.722][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     1.731][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.732][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.739][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.746][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.758][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.761][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.791][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     1.791][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     1.814][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     1.842][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     1.845][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     1.845][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     1.845][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     1.847][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     1.847][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.851][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     1.852][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     1.854][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.868][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     1.875][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.876][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect())
[     1.903][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([3]))
[     1.909][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     1.912][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([3]))
[     1.920][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     1.923][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     1.926][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect([2]))
[     1.929][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     1.930][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     1.933][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([2]))
[     1.936][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     1.937][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     1.939][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     1.941][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([3]))
[     1.944][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     1.945][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     1.947][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect([3]))
[     1.949][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     1.950][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     1.952][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([3]))
[     1.953][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.955][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     1.956][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     1.957][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([3]), l1 = natural_join())
[     1.990][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.998][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     2.019][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.020][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     2.020][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     2.032][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     2.033][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([2]))
[     2.037][cube-solver-3][DEBUG] Found solution with cube (l0 = anti_join(),)
[     2.038][MainProcess][INFO] Statistics:
[     2.039][MainProcess][INFO] 	Generated cubes: 45
[     2.039][MainProcess][INFO] 	Attempted programs: 24
[     2.039][MainProcess][INFO] 		Rejected: 9
[     2.039][MainProcess][INFO] 		Failed: 14
[     2.039][MainProcess][INFO] 	Blacklist clauses: 17
[     2.039][MainProcess][DEBUG] Priting statistics for good programs of size 1
[     2.039][MainProcess][DEBUG] 	0: Counter({'inner_join': 17, 'union': 12, 'natural_join': 12, 'left_join': 12, 'semi_join': 8, 'anti_join': 7})
[     2.040][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.040][MainProcess][DEBUG] 	0: Counter({'natural_join': 13, 'anti_join': 6})
[     2.040][MainProcess][DEBUG] 	1: Counter({'left_join': 13, 'natural_join': 6})
[     2.040][MainProcess][INFO] Solution found: anti_join(@param0, @param1, )
[     2.116][cube-solver-10][DEBUG] Found solution with cube (l0 = anti_join([3]), l1 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/11-1.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/11-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/11.out", col_types = cols(S_name = col_character()))

df3 <- anti_join(input1, input2, by=c())
out <- df3 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM input2 AS RHS
        WHERE (LHS.S_key = RHS.S_key) ))
ORDER BY S_name
