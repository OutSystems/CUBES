[     1.643][MainProcess][INFO] Parsing specification...
[     1.646][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.646][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.646][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.647][MainProcess][DEBUG] Reading input files...
[     1.654][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2-1.txt: ['string', 'string']
[     1.659][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2-2.txt: ['string', 'string']
[     1.665][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2-3.txt: ['string', 'string']
[     1.670][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2-4.txt: ['string', 'string', 'int64']
[     1.674][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2.out: ['int64']
[     1.707][MainProcess][DEBUG] Generating DSL...
[     1.750][MainProcess][INFO] Creating 16 processes
[     1.829][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.829][MainProcess][DEBUG] Increasing generator loc to 3
[     1.832][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.839][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.841][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.844][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.848][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.852][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.861][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.865][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.872][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.873][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.880][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.881][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.882][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.891][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.932][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     3.120][cube-solver-0][WARNING] There is no solution for current loc (2).
[     3.121][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.122][cube-solver-1][WARNING] There is no solution for current loc (2).
[     3.122][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.124][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.125][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.136][cube-solver-3][WARNING] There is no solution for current loc (2).
[     3.136][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     3.138][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.141][cube-solver-2][WARNING] There is no solution for current loc (2).
[     3.141][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.146][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.983][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.985][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.989][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     3.995][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     3.995][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     4.000][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     4.004][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     4.008][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     4.009][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     4.015][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     4.015][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     4.016][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     4.016][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     4.017][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     4.020][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     4.022][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = intersect())
[     4.023][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = semi_join())
[     4.026][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[     4.028][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = anti_join(), l2 = filter())
[     4.028][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = cross_join())
[     4.029][cube-solver-8][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = inner_join())
[     4.030][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = left_join(), l2 = filter())
[     4.034][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = union(), l2 = filter())
[     4.035][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = intersect(), l2 = filter())
[     4.036][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     4.039][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = cross_join(), l2 = filter())
[     4.039][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = semi_join(), l2 = filter())
[     4.039][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = mutate(), l2 = filter())
[     4.041][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     4.044][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = inner_join(), l2 = filter())
[     4.045][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = summarise([1]))
[     4.048][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = mutate())
[     4.048][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = summarise([2]))
[     4.052][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3(), l2 = mutate())
[     4.055][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = summarise([2]), l2 = natural_join3())
[     4.056][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4([1]), l2 = summarise([2]))
[     4.056][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4([1]), l2 = mutate())
[     4.056][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = summarise([2]), l2 = natural_join())
[     4.060][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise([2]), l2 = natural_join4([1]))
[     4.064][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = summarise([2]), l2 = summarise([2]))
[     4.067][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = summarise([2]), l2 = filter())
[     4.069][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise([2]), l2 = anti_join())
[     4.070][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = summarise([3]), l2 = left_join())
[     4.074][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise([3]), l2 = union())
[     4.076][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = summarise([3]), l2 = semi_join())
[     4.078][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = summarise([3]), l2 = intersect())
[     4.079][cube-solver-4][DEBUG] Solving cube (l0 = filter([1]), l1 = summarise([3]), l2 = cross_join())
[     4.081][cube-solver-9][DEBUG] Solving cube (l0 = filter([2]), l1 = summarise([3]), l2 = mutate())
[     4.085][cube-solver-4][DEBUG] Solving cube (l0 = filter([2]), l1 = summarise([3]), l2 = inner_join())
[     4.088][cube-solver-9][DEBUG] Solving cube (l0 = filter([2]), l1 = filter([2]), l2 = summarise([3]))
[     4.090][cube-solver-10][DEBUG] Solving cube (l0 = filter([2]), l1 = filter([2]), l2 = mutate())
[     4.092][cube-solver-4][DEBUG] Solving cube (l0 = filter([2]), l1 = anti_join(), l2 = summarise([4]))
[     4.094][cube-solver-9][DEBUG] Solving cube (l0 = filter([3]), l1 = anti_join(), l2 = mutate())
[     4.099][cube-solver-4][DEBUG] Solving cube (l0 = filter([4]), l1 = left_join(), l2 = mutate())
[     4.100][cube-solver-9][DEBUG] Solving cube (l0 = filter([4]), l1 = union(), l2 = summarise([4]))
[     4.100][cube-solver-10][DEBUG] Solving cube (l0 = filter([4]), l1 = left_join(), l2 = summarise([4]))
[     4.104][cube-solver-4][DEBUG] Solving cube (l0 = filter([4]), l1 = union(), l2 = mutate())
[     4.108][cube-solver-9][DEBUG] Solving cube (l0 = filter([4]), l1 = intersect(), l2 = summarise([4]))
[     4.110][cube-solver-4][DEBUG] Solving cube (l0 = filter([5]), l1 = intersect(), l2 = mutate())
[     4.114][cube-solver-10][DEBUG] Solving cube (l0 = filter([5]), l1 = semi_join(), l2 = summarise([5]))
[     4.115][cube-solver-9][DEBUG] Solving cube (l0 = filter([5]), l1 = semi_join(), l2 = mutate())
[     4.116][cube-solver-4][DEBUG] Solving cube (l0 = filter([5]), l1 = cross_join(), l2 = summarise([5]))
[     4.121][cube-solver-9][DEBUG] Solving cube (l0 = filter([5]), l1 = cross_join(), l2 = mutate())
[     4.123][cube-solver-10][DEBUG] Solving cube (l0 = filter([5]), l1 = mutate(), l2 = natural_join())
[     4.124][cube-solver-4][DEBUG] Solving cube (l0 = filter([5]), l1 = mutate(), l2 = natural_join3())
[     4.127][cube-solver-9][DEBUG] Solving cube (l0 = filter([5]), l1 = mutate(), l2 = natural_join4([5]))
[     4.130][cube-solver-10][DEBUG] Solving cube (l0 = filter([5]), l1 = mutate(), l2 = summarise([5]))
[     4.132][cube-solver-4][DEBUG] Solving cube (l0 = filter([5]), l1 = mutate(), l2 = filter([5]))
[     4.139][cube-solver-10][DEBUG] Solving cube (l0 = filter([5]), l1 = mutate(), l2 = anti_join())
[     4.139][cube-solver-4][DEBUG] Solving cube (l0 = filter([5]), l1 = mutate(), l2 = left_join())
[     4.145][cube-solver-4][DEBUG] Solving cube (l0 = filter([6]), l1 = mutate(), l2 = union())
[     4.147][cube-solver-10][DEBUG] Solving cube (l0 = filter([6]), l1 = mutate(), l2 = intersect())
[     4.149][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([6]))
[     4.151][cube-solver-4][DEBUG] Solving cube (l0 = filter([6]), l1 = mutate(), l2 = semi_join())
[     4.157][cube-solver-4][DEBUG] Solving cube (l0 = filter([7]), l1 = mutate(), l2 = mutate())
[     4.157][cube-solver-10][DEBUG] Solving cube (l0 = filter([6]), l1 = mutate(), l2 = cross_join())
[     4.163][cube-solver-4][DEBUG] Solving cube (l0 = filter([7]), l1 = mutate(), l2 = inner_join())
[     4.168][cube-solver-10][DEBUG] Solving cube (l0 = filter([7]), l1 = inner_join(), l2 = summarise([7]))
[     4.169][cube-solver-11][DEBUG] Solving cube (l0 = filter([7]), l1 = inner_join(), l2 = mutate([1]))
[     4.170][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([8]), l2 = filter([8]))
[     4.179][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([9]), l2 = summarise([8]))
[     4.179][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([9]), l2 = mutate([1]))
[     4.180][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate([1]), l2 = filter([9]))
[     4.187][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([8]), l2 = filter([11]))
[     4.188][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = filter([12]), l2 = summarise([9]))
[     4.192][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = filter([12]), l2 = mutate([1]))
[     4.192][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate([1]), l2 = filter([12]))
[     4.198][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = mutate([1]), l2 = filter([12]))
[     4.201][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = summarise([9]), l2 = filter([12]))
[     4.206][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = filter([13]), l2 = mutate([1]))
[     4.207][cube-solver-10][DEBUG] Solving cube (l0 = union(), l1 = filter([12]), l2 = summarise([9]))
[     4.210][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = mutate([1]), l2 = filter([13]))
[     4.213][cube-solver-11][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([9]), l2 = filter([14]))
[     4.216][cube-solver-4][DEBUG] Solving cube (l0 = intersect(), l1 = filter([14]), l2 = summarise([9]))
[     4.224][cube-solver-7][DEBUG] Solving cube (l0 = intersect(), l1 = filter([15]), l2 = mutate([1]))
[     4.224][cube-solver-11][DEBUG] Solving cube (l0 = intersect(), l1 = mutate([1]), l2 = filter([15]))
[     4.228][cube-solver-10][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([9]), l2 = filter([15]))
[     4.229][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([15]), l2 = summarise([9]))
[     4.231][cube-solver-14][DEBUG] Found solution with cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     4.233][cube-solver-11][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([15]), l2 = mutate([1]))
[     4.233][MainProcess][INFO] Statistics:
[     4.233][MainProcess][INFO] 	Generated cubes: 108
[     4.233][MainProcess][INFO] 	Attempted programs: 1
[     4.233][MainProcess][INFO] 		Rejected: 0
[     4.233][MainProcess][INFO] 		Failed: 0
[     4.233][MainProcess][INFO] 	Blacklist clauses: 36
[     4.234][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     4.234][MainProcess][DEBUG] 	0: Counter({'natural_join4': 12})
[     4.234][MainProcess][DEBUG] 	1: Counter({'filter': 12})
[     4.234][MainProcess][DEBUG] 	2: Counter({'mutate': 12})
[     4.234][MainProcess][INFO] Solution found: mutate(filter(natural_join4(@param0, @param2, @param1, @param3), F_name == 'faculty1' & major != 'History'), age = max(age))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/2-1.txt", col_types = cols(C_name = col_character(),F_key = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/2-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/2-3.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input3 <- copy_to(con, input3)
input4 <- read_csv("tests-examples/55-tests/tables/2-4.txt", col_types = cols(S_key = col_character(),major = col_character(),age = col_integer()))
input4 <- copy_to(con, input4)
expected_output <- read_csv("tests-examples/55-tests/tables/2.out", col_types = cols(maxage = col_integer()))

df5 <- inner_join(input1, input3) %>% inner_join(input2) %>% inner_join(input4)
df6 <- df5 %>% filter(F_name == 'faculty1' & major != 'History')
df7 <- df6 %>% mutate(age = max(age))
out <- df7 %>% select(maxage = age) %>% distinct() %>% arrange(maxage)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT MAX(`age`) OVER () AS `maxage`
FROM
  (SELECT `LHS`.`C_name` AS `C_name`,
          `LHS`.`F_key` AS `F_key`,
          `LHS`.`F_name` AS `F_name`,
          `LHS`.`S_key` AS `S_key`,
          `RHS`.`major` AS `major`,
          `RHS`.`age` AS `age`
   FROM
     (SELECT `LHS`.`C_name` AS `C_name`,
             `LHS`.`F_key` AS `F_key`,
             `LHS`.`F_name` AS `F_name`,
             `RHS`.`S_key` AS `S_key`
      FROM
        (SELECT `LHS`.`C_name` AS `C_name`,
                `LHS`.`F_key` AS `F_key`,
                `RHS`.`F_name` AS `F_name`
         FROM `input1` AS `LHS`
         INNER JOIN `input3` AS `RHS` ON (`LHS`.`F_key` = `RHS`.`F_key`)) AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`C_name` = `RHS`.`C_name`)) AS `LHS`
   INNER JOIN `input4` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`F_name` = 'faculty1'
       AND `major` != 'History')
ORDER BY maxage
