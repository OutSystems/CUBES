[     1.578][MainProcess][INFO] Parsing specification...
[     1.581][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.582][MainProcess][DEBUG] Reading input files...
[     1.587][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.591][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.594][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.599][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/37.out: ['string']
[     1.628][MainProcess][DEBUG] Generating DSL...
[     1.648][MainProcess][INFO] Creating 16 processes
[     1.741][MainProcess][DEBUG] Increasing generator loc to 2
[     1.741][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.741][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.742][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.748][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.754][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.758][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.773][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.779][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.785][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.787][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.953][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.953][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.954][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.018][cube-solver-1][WARNING] There is no solution for current loc (1).
[     2.019][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.020][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.078][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.080][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.082][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.084][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.085][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.087][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.088][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.090][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.091][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.092][cube-solver-11][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     2.092][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.094][cube-solver-11][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     2.094][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.095][cube-solver-11][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[     2.096][cube-solver-14][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     2.097][cube-solver-11][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[     2.097][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.098][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     2.098][cube-solver-14][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[     2.097][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.099][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     2.099][cube-solver-14][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     2.100][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     2.100][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     2.101][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     2.103][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     2.103][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     2.103][cube-solver-15][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     2.105][cube-solver-15][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     2.105][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join())
[     2.106][cube-solver-15][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     2.106][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[     2.108][cube-solver-15][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise())
[     2.108][cube-solver-6][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[     2.108][MainProcess][DEBUG] Increasing generator loc to 3
[     2.109][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.109][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.110][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.152][cube-solver-11][DEBUG] Found solution with cube (l0 = mutate(), l1 = natural_join3())
[     2.154][MainProcess][INFO] Statistics:
[     2.154][MainProcess][INFO] 	Generated cubes: 49
[     2.155][MainProcess][INFO] 	Attempted programs: 1
[     2.155][MainProcess][INFO] 		Rejected: 0
[     2.155][MainProcess][INFO] 		Failed: 0
[     2.155][MainProcess][INFO] 	Blacklist clauses: 0
[     2.155][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     2.156][MainProcess][DEBUG] 	0: Counter({'mutate': 4})
[     2.156][MainProcess][DEBUG] 	1: Counter({'natural_join3': 4, 'natural_join4': 1})
[     2.157][MainProcess][INFO] Solution found: natural_join3(@param2, mutate(@param0, n = n()), @param1)
[     2.218][cube-solver-14][DEBUG] Found solution with cube (l0 = mutate(), l1 = natural_join4())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/37.out", col_types = cols(S_name = col_character()))

df4 <- input1 %>% mutate(n = n())
df5 <- inner_join(input3, df4) %>% inner_join(input2)
out <- df5 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.S_name AS S_name,
          LHS.P_id AS P_id,
          LHS.n AS n,
          RHS.color AS color
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.S_name AS S_name,
             RHS.P_id AS P_id,
             RHS.n AS n
      FROM input3 AS LHS
      INNER JOIN
        (SELECT S_key,
                P_id,
                COUNT(*) OVER () AS n
         FROM input1) AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.P_id = RHS.P_id))
ORDER BY S_name
