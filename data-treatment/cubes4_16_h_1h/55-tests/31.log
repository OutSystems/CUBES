[     1.554][MainProcess][INFO] Parsing specification...
[     1.557][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.557][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.558][MainProcess][DEBUG] Reading input files...
[     1.564][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.567][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.570][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.577][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/31.out: ['string', 'string', 'string', 'string']
[     1.606][MainProcess][DEBUG] Generating DSL...
[     1.623][MainProcess][INFO] Creating 16 processes
[     1.689][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.689][MainProcess][DEBUG] Increasing generator loc to 2
[     1.691][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.691][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.691][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.691][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.691][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.691][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.698][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.699][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.703][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.706][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.720][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.723][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.739][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.942][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.942][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     1.944][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.009][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     2.016][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.016][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     2.019][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.021][cube-solver-10][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.021][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     2.023][MainProcess][DEBUG] Increasing generator loc to 3
[     2.023][cube-solver-10][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     2.023][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.025][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.029][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     2.034][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.039][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.055][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]))
[     2.059][cube-solver-9][DEBUG] Solving cube (l0 = filter([1]), l1 = left_join())
[     2.063][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.121][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([9]))
[     2.131][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.214][cube-solver-5][DEBUG] Solving cube (l0 = filter([17]), l1 = natural_join3())
[     2.290][cube-solver-4][DEBUG] Solving cube (l0 = filter([23]), l1 = natural_join())
[     2.300][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.304][cube-solver-11][DEBUG] Solving cube (l0 = filter([24]), l1 = intersect())
[     2.311][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([24]))
[     2.316][cube-solver-7][DEBUG] Solving cube (l0 = filter([24]), l1 = filter([24]))
[     2.322][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.329][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.339][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]))
[     2.343][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.344][cube-solver-12][DEBUG] Solving cube (l0 = filter([24]), l1 = semi_join())
[     2.356][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.360][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.387][cube-solver-14][DEBUG] Solving cube (l0 = filter([24]), l1 = inner_join())
[     2.406][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.532][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([24]))
[     2.547][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.617][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.718][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]), l2 = natural_join())
[     2.729][cube-solver-9][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]), l2 = filter([24]))
[     2.759][cube-solver-9][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect(), l2 = filter([24]))
[     2.779][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]), l2 = natural_join4())
[     2.801][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([24]), l2 = natural_join3())
[     2.980][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([24]), l2 = anti_join())
[     3.090][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = intersect())
[     3.180][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([24]))
[     3.187][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union(), l2 = filter([24]))
[     3.190][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([24]))
[     3.242][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = union())
[     3.248][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = left_join())
[     3.278][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = inner_join())
[     3.287][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = cross_join())
[     3.294][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = semi_join())
[     3.389][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = filter([24]))
[     3.552][cube-solver-2][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter([1]))
[     3.553][MainProcess][INFO] Statistics:
[     3.554][MainProcess][INFO] 	Generated cubes: 38
[     3.554][MainProcess][INFO] 	Attempted programs: 46
[     3.554][MainProcess][INFO] 		Rejected: 2
[     3.554][MainProcess][INFO] 		Failed: 43
[     3.554][MainProcess][INFO] 	Blacklist clauses: 27
[     3.554][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     3.555][MainProcess][DEBUG] 	0: Counter({'natural_join3': 123})
[     3.555][MainProcess][DEBUG] 	1: Counter({'filter': 123})
[     3.555][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     3.555][MainProcess][DEBUG] 	0: Counter({'natural_join': 231})
[     3.555][MainProcess][DEBUG] 	1: Counter({'filter': 201, 'union': 24, 'left_join': 6})
[     3.556][MainProcess][DEBUG] 	2: Counter({'natural_join4': 48, 'natural_join3': 48, 'natural_join': 48, 'filter': 30, 'union': 27, 'left_join': 17, 'inner_join': 13})
[     3.556][MainProcess][INFO] Solution found: filter(natural_join3(@param1, @param0, @param2), color == 'green' & S_key != 'S4')
[     3.844][cube-solver-10][DEBUG] Found solution with cube (l0 = natural_join([1]), l1 = filter([24]), l2 = natural_join3())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/31.out", col_types = cols(S_key = col_character(),P_id = col_character(),S_name = col_character(),color = col_character()))

df4 <- inner_join(input2, input1) %>% inner_join(input3)
df5 <- df4 %>% filter(color == 'green' & S_key != 'S4')
out <- df5 %>% select(S_key, P_id, S_name, color) %>% arrange(S_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_key`,
       `P_id`,
       `S_name`,
       `color`
FROM
  (SELECT `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`,
          `LHS`.`S_key` AS `S_key`,
          `RHS`.`S_name` AS `S_name`
   FROM
     (SELECT `LHS`.`P_id` AS `P_id`,
             `LHS`.`color` AS `color`,
             `RHS`.`S_key` AS `S_key`
      FROM `input2` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
   INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`color` = 'green'
       AND `S_key` != 'S4')
ORDER BY S_key
