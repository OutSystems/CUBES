[     1.568][MainProcess][INFO] Parsing specification...
[     1.571][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.572][MainProcess][DEBUG] Reading input files...
[     1.579][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/5-1.txt: ['string', 'string', 'string']
[     1.584][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/5-2.txt: ['string', 'string']
[     1.588][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/5.out: ['string']
[     1.614][MainProcess][DEBUG] Generating DSL...
[     1.634][MainProcess][INFO] Creating 16 processes
[     1.725][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.725][MainProcess][DEBUG] Increasing generator loc to 3
[     1.725][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.726][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.726][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.726][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.726][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.727][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.728][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.731][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.735][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.745][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.750][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.756][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.769][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.781][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.144][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.145][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.146][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.200][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.201][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.202][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.273][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.273][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.275][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.362][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.363][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.365][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.372][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.377][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.377][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.380][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.382][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.383][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.385][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.387][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.388][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.389][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.391][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.394][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.400][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.453][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([5]), l2 = filter([3]))
[     2.465][cube-solver-12][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter([3]), l2 = intersect())
[     2.533][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([3]))
[     2.541][cube-solver-11][DEBUG] Solving cube (l0 = summarise([8]), l1 = filter([3]), l2 = semi_join())
[     2.548][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([3]))
[     2.555][cube-solver-15][DEBUG] Solving cube (l0 = summarise([8]), l1 = filter([3]), l2 = cross_join())
[     2.635][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = summarise([11]))
[     2.651][cube-solver-13][DEBUG] Solving cube (l0 = summarise([11]), l1 = filter([4]), l2 = mutate())
[     2.667][cube-solver-13][DEBUG] Solving cube (l0 = summarise([11]), l1 = filter([4]), l2 = inner_join())
[     2.740][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([11]), l2 = filter([4]))
[     2.810][cube-solver-3][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join(), l2 = filter([4]))
[     2.871][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([4]))
[     2.960][cube-solver-1][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join4(), l2 = filter([4]))
[     2.973][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = summarise([11]))
[     2.976][cube-solver-1][DEBUG] Solving cube (l0 = summarise([11]), l1 = anti_join(), l2 = filter([4]))
[     2.990][cube-solver-5][DEBUG] Solving cube (l0 = summarise([11]), l1 = left_join(), l2 = filter([4]))
[     3.220][cube-solver-0][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join3(), l2 = filter([4]))
[     3.307][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     3.309][MainProcess][INFO] Statistics:
[     3.309][MainProcess][INFO] 	Generated cubes: 35
[     3.309][MainProcess][INFO] 	Attempted programs: 42
[     3.309][MainProcess][INFO] 		Rejected: 3
[     3.310][MainProcess][INFO] 		Failed: 38
[     3.310][MainProcess][INFO] 	Blacklist clauses: 15
[     3.310][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     3.311][MainProcess][DEBUG] 	0: Counter({'summarise': 236, 'natural_join': 64})
[     3.311][MainProcess][DEBUG] 	1: Counter({'filter': 152, 'natural_join': 36, 'left_join': 36, 'summarise': 34, 'mutate': 30, 'anti_join': 6, 'natural_join3': 6})
[     3.312][MainProcess][DEBUG] 	2: Counter({'filter': 148, 'union': 48, 'semi_join': 40, 'left_join': 33, 'natural_join': 24, 'inner_join': 8})
[     3.312][MainProcess][INFO] Solution found: left_join(filter(summarise(@param0, n = n(), F_key), n == max(n)), @param1)
[     3.489][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise([11]), l2 = filter([4]))
[     3.539][cube-solver-11][DEBUG] Found solution with cube (l0 = summarise([8]), l1 = filter([3]), l2 = semi_join())
[     3.682][cube-solver-10][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/5-1.txt", col_types = cols(C_name = col_character(),F_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/5-2.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/5.out", col_types = cols(F_name = col_character()))

df3 <- input1 %>% group_by(F_key) %>% summarise(n = n()) %>% ungroup()
df4 <- df3 %>% filter(n == max(n))
df5 <- left_join(df4, input2)
out <- df5 %>% select(F_name) %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT F_name
FROM
  (SELECT LHS.F_key AS F_key,
          LHS.n AS n,
          RHS.F_name AS F_name
   FROM
     (SELECT F_key,
             n
      FROM
        (SELECT F_key,
                n,
                MAX(n) OVER () AS zzz3
         FROM
           (SELECT F_key,
                   COUNT() AS n
            FROM input1
            GROUP BY F_key))
      WHERE (n = zzz3)) AS LHS
   LEFT JOIN input2 AS RHS ON (LHS.F_key = RHS.F_key))
ORDER BY F_name
