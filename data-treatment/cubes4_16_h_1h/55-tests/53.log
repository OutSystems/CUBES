[     3.204][MainProcess][INFO] Parsing specification...
[     3.208][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.208][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.208][MainProcess][DEBUG] Reading input files...
[     3.216][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-1.txt: ['string', 'string', 'int64']
[     3.220][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-3.txt: ['string', 'string']
[     3.225][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/53.out: ['string', 'string']
[     3.255][MainProcess][DEBUG] Generating DSL...
[     3.279][MainProcess][INFO] Creating 16 processes
[     3.346][MainProcess][DEBUG] Increasing generator loc to 2
[     3.346][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.346][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.347][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.347][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.347][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.348][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.351][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.355][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.359][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.365][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.369][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.377][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.391][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.394][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.400][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.404][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.537][cube-solver-0][WARNING] There is no solution for current loc (1).
[     3.537][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     3.539][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.607][cube-solver-1][WARNING] There is no solution for current loc (1).
[     3.608][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.609][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.686][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     3.690][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     3.693][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     3.694][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     3.695][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     3.697][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     3.703][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     3.705][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.707][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.707][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     3.708][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     3.711][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     3.714][cube-solver-9][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join3())
[     3.720][cube-solver-12][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter())
[     3.726][cube-solver-12][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([4]))
[     3.730][cube-solver-11][DEBUG] Solving cube (l0 = summarise([5]), l1 = summarise([5]))
[     3.736][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     3.740][cube-solver-13][DEBUG] Solving cube (l0 = summarise([6]), l1 = anti_join([3]))
[     3.883][cube-solver-15][DEBUG] Solving cube (l0 = summarise([14]), l1 = union())
[     3.912][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     3.917][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([19]))
[     3.934][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     3.938][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = summarise([20]))
[     3.992][cube-solver-0][DEBUG] Solving cube (l0 = summarise([20]), l1 = intersect())
[     3.993][cube-solver-14][DEBUG] Solving cube (l0 = summarise([20]), l1 = left_join())
[     4.142][cube-solver-1][DEBUG] Solving cube (l0 = summarise([26]), l1 = semi_join())
[     4.302][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = natural_join3())
[     4.304][MainProcess][INFO] Statistics:
[     4.304][MainProcess][INFO] 	Generated cubes: 28
[     4.304][MainProcess][INFO] 	Attempted programs: 3
[     4.304][MainProcess][INFO] 		Rejected: 1
[     4.304][MainProcess][INFO] 		Failed: 1
[     4.304][MainProcess][INFO] 	Blacklist clauses: 40
[     4.304][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     4.305][MainProcess][DEBUG] 	0: Counter({'summarise': 122, 'left_join': 79, 'natural_join': 64, 'union': 19, 'anti_join': 17})
[     4.305][MainProcess][DEBUG] 	1: Counter({'summarise': 91, 'mutate': 88, 'natural_join3': 45, 'natural_join': 35, 'union': 25, 'left_join': 12, 'semi_join': 5})
[     4.305][MainProcess][INFO] Solution found: natural_join3(summarise(@param0, cost = min(cost), P_id), @param0, @param1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/17-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/17-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/53.out", col_types = cols(P_id = col_character(),S_name = col_character()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = min(cost)) %>% ungroup()
df4 <- inner_join(df3, input1) %>% inner_join(input2)
out <- df4 %>% select(P_id, S_name) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_id,
       S_name
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.cost AS cost,
          LHS.S_key AS S_key,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.cost AS cost,
             RHS.S_key AS S_key
      FROM
        (SELECT P_id,
                MIN(cost) AS cost
         FROM input1
         GROUP BY P_id) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id
                                   AND LHS.cost = RHS.cost)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY P_id
