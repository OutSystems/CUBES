[     1.592][MainProcess][INFO] Parsing specification...
[     1.595][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.595][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.595][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.596][MainProcess][DEBUG] Reading input files...
[     1.603][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.608][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.613][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.618][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/30.out: ['string', 'int64']
[     1.648][MainProcess][DEBUG] Generating DSL...
[     1.669][MainProcess][INFO] Creating 16 processes
[     1.737][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.737][MainProcess][DEBUG] Increasing generator loc to 3
[     1.738][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.738][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.740][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.746][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.749][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.752][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.759][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.760][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.776][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.777][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.780][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.781][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.146][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.146][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.148][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.222][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.223][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.224][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.295][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.296][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.297][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.445][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.451][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.452][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.454][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.454][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.455][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.457][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.458][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.467][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.469][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.474][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.477][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.480][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.481][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = filter())
[     2.481][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.484][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = anti_join())
[     2.488][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = left_join())
[     2.489][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.490][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = union())
[     2.494][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = intersect())
[     2.494][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = semi_join())
[     2.497][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = cross_join())
[     2.498][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = mutate())
[     2.498][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = inner_join())
[     2.502][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = anti_join(), l2 = filter())
[     2.502][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.503][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = left_join(), l2 = filter())
[     2.505][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = union(), l2 = filter())
[     2.506][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = intersect(), l2 = filter())
[     2.507][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = semi_join(), l2 = filter())
[     2.508][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = cross_join(), l2 = filter())
[     2.510][cube-solver-4][DEBUG] Solving cube (l0 = summarise([1]), l1 = mutate(), l2 = filter())
[     2.512][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = summarise([1]))
[     2.512][cube-solver-14][DEBUG] Solving cube (l0 = filter(), l1 = natural_join(), l2 = mutate())
[     2.513][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = inner_join(), l2 = filter())
[     2.515][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3([1]), l2 = summarise([1]))
[     2.516][cube-solver-14][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3([1]), l2 = mutate())
[     2.516][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4(), l2 = summarise([1]))
[     2.519][cube-solver-15][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4(), l2 = mutate())
[     2.561][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([7]), l2 = summarise([2]))
[     2.573][cube-solver-5][DEBUG] Solving cube (l0 = filter([9]), l1 = summarise([2]), l2 = natural_join())
[     2.584][cube-solver-5][DEBUG] Solving cube (l0 = filter([12]), l1 = summarise([2]), l2 = natural_join3([1]))
[     2.725][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([21]), l2 = summarise([7]))
[     2.751][cube-solver-13][DEBUG] Solving cube (l0 = filter([22]), l1 = summarise([7]), l2 = natural_join4())
[     2.771][cube-solver-13][DEBUG] Solving cube (l0 = filter([22]), l1 = summarise([8]), l2 = summarise([8]))
[     2.798][cube-solver-13][DEBUG] Solving cube (l0 = filter([22]), l1 = summarise([11]), l2 = filter([22]))
[     2.835][cube-solver-13][DEBUG] Solving cube (l0 = filter([22]), l1 = summarise([11]), l2 = anti_join())
[     2.861][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([11]), l2 = left_join())
[     2.886][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([11]), l2 = union())
[     2.911][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([12]), l2 = intersect())
[     2.936][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([12]), l2 = semi_join())
[     2.962][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([13]), l2 = cross_join())
[     2.969][cube-solver-3][DEBUG] Solving cube (l0 = summarise([13]), l1 = natural_join(), l2 = filter([24]))
[     2.972][cube-solver-2][DEBUG] Solving cube (l0 = summarise([13]), l1 = natural_join3([2]), l2 = filter([24]))
[     2.987][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([14]), l2 = mutate())
[     2.990][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([14]), l2 = filter([24]))
[     2.996][cube-solver-3][DEBUG] Solving cube (l0 = filter([24]), l1 = summarise([14]), l2 = inner_join())
[     3.012][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = filter([24]), l2 = summarise([14]))
[     3.018][cube-solver-12][DEBUG] Solving cube (l0 = filter([24]), l1 = filter([24]), l2 = mutate())
[     3.022][cube-solver-3][DEBUG] Solving cube (l0 = filter([24]), l1 = anti_join(), l2 = summarise([14]))
[     3.046][cube-solver-12][DEBUG] Solving cube (l0 = filter([24]), l1 = anti_join(), l2 = mutate())
[     3.048][cube-solver-3][DEBUG] Solving cube (l0 = filter([24]), l1 = left_join(), l2 = summarise([14]))
[     3.050][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = left_join(), l2 = mutate())
[     3.064][cube-solver-12][DEBUG] Solving cube (l0 = filter([24]), l1 = union(), l2 = summarise([14]))
[     3.065][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = union(), l2 = mutate())
[     3.073][cube-solver-3][DEBUG] Solving cube (l0 = filter([24]), l1 = intersect(), l2 = summarise([15]))
[     3.081][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = intersect(), l2 = mutate())
[     3.093][cube-solver-12][DEBUG] Solving cube (l0 = filter([24]), l1 = semi_join(), l2 = summarise([15]))
[     3.096][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = semi_join(), l2 = mutate())
[     3.099][cube-solver-3][DEBUG] Solving cube (l0 = filter([24]), l1 = cross_join(), l2 = summarise([15]))
[     3.112][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = cross_join(), l2 = mutate())
[     3.121][cube-solver-12][DEBUG] Solving cube (l0 = filter([24]), l1 = mutate(), l2 = natural_join())
[     3.125][cube-solver-3][DEBUG] Solving cube (l0 = filter([24]), l1 = mutate(), l2 = natural_join3([2]))
[     3.127][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = mutate(), l2 = natural_join4())
[     3.138][cube-solver-12][DEBUG] Solving cube (l0 = filter([24]), l1 = mutate(), l2 = summarise([15]))
[     3.144][cube-solver-3][DEBUG] Solving cube (l0 = filter([24]), l1 = mutate(), l2 = filter([24]))
[     3.147][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = mutate(), l2 = anti_join())
[     3.163][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = mutate(), l2 = left_join())
[     3.164][cube-solver-12][DEBUG] Solving cube (l0 = filter([24]), l1 = mutate(), l2 = union())
[     3.171][cube-solver-3][DEBUG] Solving cube (l0 = filter([24]), l1 = mutate(), l2 = intersect())
[     3.178][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = mutate(), l2 = semi_join())
[     3.179][cube-solver-12][DEBUG] Solving cube (l0 = filter([24]), l1 = mutate(), l2 = cross_join())
[     3.188][cube-solver-3][DEBUG] Solving cube (l0 = filter([24]), l1 = mutate(), l2 = mutate())
[     3.194][cube-solver-13][DEBUG] Solving cube (l0 = filter([24]), l1 = mutate(), l2 = inner_join())
[     3.195][cube-solver-12][DEBUG] Solving cube (l0 = filter([24]), l1 = inner_join(), l2 = summarise([15]))
[     3.204][cube-solver-3][DEBUG] Solving cube (l0 = filter([24]), l1 = inner_join(), l2 = mutate())
[     3.210][cube-solver-13][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([16]), l2 = filter([24]))
[     3.220][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([24]), l2 = summarise([16]))
[     3.221][cube-solver-12][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([24]), l2 = mutate())
[     3.238][cube-solver-12][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate(), l2 = filter([24]))
[     3.239][cube-solver-13][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([17]), l2 = filter([24]))
[     3.248][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = filter([24]), l2 = summarise([18]))
[     3.253][cube-solver-12][DEBUG] Solving cube (l0 = left_join(), l1 = filter([24]), l2 = mutate())
[     3.260][cube-solver-10][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.262][MainProcess][INFO] Statistics:
[     3.262][MainProcess][INFO] 	Generated cubes: 96
[     3.262][MainProcess][INFO] 	Attempted programs: 2
[     3.262][MainProcess][INFO] 		Rejected: 1
[     3.262][MainProcess][INFO] 		Failed: 0
[     3.262][MainProcess][INFO] 	Blacklist clauses: 44
[     3.262][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     3.263][MainProcess][DEBUG] 	0: Counter({'natural_join3': 206, 'summarise': 16})
[     3.263][MainProcess][DEBUG] 	1: Counter({'filter': 146, 'mutate': 60, 'natural_join3': 16})
[     3.263][MainProcess][DEBUG] 	2: Counter({'summarise': 83, 'filter': 76, 'mutate': 63})
[     3.264][MainProcess][INFO] Solution found: mutate(filter(natural_join3(@param2, @param0, @param1), color == 'red' & S_key == 'S5'), n = n())
[     3.555][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise([13]), l1 = natural_join3([2]), l2 = filter([24]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/30.out", col_types = cols(P_id = col_character(),n = col_integer()))

df4 <- inner_join(input3, input1) %>% inner_join(input2)
df5 <- df4 %>% filter(color == 'red' & S_key == 'S5')
df6 <- df5 %>% mutate(n = n())
out <- df6 %>% select(P_id, n) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `P_id`,
       COUNT(*) OVER () AS `n`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`S_name` AS `S_name`,
          `LHS`.`P_id` AS `P_id`,
          `RHS`.`color` AS `color`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`S_name` AS `S_name`,
             `RHS`.`P_id` AS `P_id`
      FROM `input3` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
   INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
WHERE (`color` = 'red'
       AND `S_key` = 'S5')
ORDER BY P_id
