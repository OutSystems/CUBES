[     1.580][MainProcess][INFO] Parsing specification...
[     1.583][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.583][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.583][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.584][MainProcess][DEBUG] Reading input files...
[     1.591][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/9-1.txt: ['string', 'string', 'string']
[     1.596][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/9-2.txt: ['string', 'string']
[     1.601][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/45.out: ['string', 'string']
[     1.629][MainProcess][DEBUG] Generating DSL...
[     1.649][MainProcess][INFO] Creating 16 processes
[     1.716][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.716][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.716][MainProcess][DEBUG] Increasing generator loc to 3
[     1.716][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.716][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.717][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.717][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.717][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.722][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.725][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.730][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.734][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.738][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.747][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.750][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.754][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.766][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.181][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.181][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.183][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.243][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.244][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.245][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.291][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.291][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.293][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.300][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.301][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.303][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.354][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.368][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.369][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.373][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.374][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.377][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.383][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.384][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.386][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.388][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.390][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.389][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.391][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.392][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.393][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.395][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = intersect())
[     2.394][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.445][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([2]), l2 = filter([1]))
[     2.469][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]), l2 = filter([1]))
[     2.471][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = summarise([3]))
[     2.474][cube-solver-12][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([1]), l2 = semi_join())
[     2.556][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise([2]), l2 = filter([1]))
[     2.558][MainProcess][INFO] Statistics:
[     2.558][MainProcess][INFO] 	Generated cubes: 30
[     2.558][MainProcess][INFO] 	Attempted programs: 3
[     2.558][MainProcess][INFO] 		Rejected: 0
[     2.558][MainProcess][INFO] 		Failed: 2
[     2.558][MainProcess][INFO] 	Blacklist clauses: 4
[     2.558][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     2.559][MainProcess][DEBUG] 	0: Counter({'natural_join': 32, 'summarise': 26})
[     2.559][MainProcess][DEBUG] 	1: Counter({'filter': 42, 'mutate': 15, 'summarise': 1})
[     2.559][MainProcess][DEBUG] 	2: Counter({'filter': 16, 'mutate': 13, 'left_join': 11, 'union': 8, 'natural_join3': 7, 'summarise': 3})
[     2.560][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param1, @param0), n = n(), F_name, Room), Room == 'R128')
[     2.567][cube-solver-6][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.924][cube-solver-7][DEBUG] Found solution with cube (l0 = natural_join(), l1 = mutate(), l2 = filter())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/9-1.txt", col_types = cols(ID_class = col_character(),ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/9-2.txt", col_types = cols(ID_key = col_character(),F_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/45.out", col_types = cols(F_name = col_character(),Room = col_character()))

df3 <- inner_join(input2, input1)
df4 <- df3 %>% group_by(F_name, Room) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(Room == 'R128')
out <- df5 %>% select(F_name, Room) %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `F_name`,
       `Room`
FROM
  (SELECT `F_name`,
          `Room`,
          COUNT() AS `n`
   FROM
     (SELECT `LHS`.`ID_key` AS `ID_key`,
             `LHS`.`F_name` AS `F_name`,
             `RHS`.`ID_class` AS `ID_class`,
             `RHS`.`Room` AS `Room`
      FROM `input2` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
   GROUP BY `F_name`,
            `Room`)
WHERE (`Room` = 'R128')
ORDER BY F_name
