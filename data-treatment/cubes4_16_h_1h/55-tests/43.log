[     1.563][MainProcess][INFO] Parsing specification...
[     1.567][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.567][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.568][MainProcess][DEBUG] Reading input files...
[     1.575][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-1.txt: ['string', 'string', 'int64']
[     1.580][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-3.txt: ['string', 'string']
[     1.585][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/43.out: ['string', 'int64']
[     1.612][MainProcess][DEBUG] Generating DSL...
[     1.677][MainProcess][INFO] Creating 16 processes
[     1.767][MainProcess][DEBUG] Increasing generator loc to 3
[     1.784][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.784][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.787][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.794][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.795][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.813][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.816][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.818][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.836][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.837][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.843][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.848][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.850][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.859][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.859][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.893][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     3.350][cube-solver-2][WARNING] There is no solution for current loc (2).
[     3.351][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     3.354][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.356][cube-solver-1][WARNING] There is no solution for current loc (2).
[     3.356][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     3.358][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.363][cube-solver-0][WARNING] There is no solution for current loc (2).
[     3.363][cube-solver-3][WARNING] There is no solution for current loc (2).
[     3.363][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     3.363][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     3.365][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.365][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.704][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise())
[     4.712][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = summarise())
[     4.723][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = summarise())
[     4.725][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = mutate())
[     4.725][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise())
[     4.731][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join())
[     4.735][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join3())
[     4.742][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = mutate())
[     4.747][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join4())
[     4.750][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = summarise())
[     4.752][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     4.755][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = anti_join())
[     4.761][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[     4.764][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = summarise())
[     4.771][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = summarise([1]), l2 = left_join())
[     4.772][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([2]), l2 = mutate())
[     4.777][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([2]), l2 = mutate())
[     4.784][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[     4.787][cube-solver-12][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = union())
[     4.790][cube-solver-9][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]), l2 = intersect())
[     4.811][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate())
[     4.813][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise([6]))
[     4.821][cube-solver-11][DEBUG] Solving cube (l0 = summarise([7]), l1 = summarise([7]), l2 = semi_join())
[     4.823][cube-solver-14][DEBUG] Solving cube (l0 = summarise([8]), l1 = summarise([8]), l2 = cross_join())
[     4.824][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise([7]))
[     4.849][cube-solver-10][DEBUG] Solving cube (l0 = summarise([15]), l1 = summarise([15]), l2 = mutate())
[     4.865][cube-solver-10][DEBUG] Solving cube (l0 = summarise([20]), l1 = summarise([20]), l2 = inner_join())
[     6.470][cube-solver-2][DEBUG] Solving cube (l0 = summarise([42]), l1 = natural_join(), l2 = summarise([42]))
[     6.475][cube-solver-0][DEBUG] Solving cube (l0 = summarise([42]), l1 = natural_join3(), l2 = summarise([42]))
[     6.476][cube-solver-1][DEBUG] Solving cube (l0 = summarise([42]), l1 = natural_join(), l2 = mutate())
[     6.688][cube-solver-3][DEBUG] Solving cube (l0 = summarise([42]), l1 = natural_join3(), l2 = mutate())
[     7.856][cube-solver-7][DEBUG] Solving cube (l0 = summarise([42]), l1 = filter(), l2 = summarise([42]))
[     7.900][cube-solver-7][DEBUG] Solving cube (l0 = summarise([42]), l1 = filter(), l2 = mutate())
[     7.922][cube-solver-7][DEBUG] Solving cube (l0 = summarise([42]), l1 = anti_join(), l2 = summarise([42]))
[    10.699][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([42]), l1 = natural_join3(), l2 = summarise([42]))
[    10.700][MainProcess][INFO] Statistics:
[    10.701][MainProcess][INFO] 	Generated cubes: 38
[    10.701][MainProcess][INFO] 	Attempted programs: 98
[    10.701][MainProcess][INFO] 		Rejected: 47
[    10.701][MainProcess][INFO] 		Failed: 50
[    10.701][MainProcess][INFO] 	Blacklist clauses: 42
[    10.701][MainProcess][DEBUG] Priting statistics for good programs of size 3
[    10.704][MainProcess][DEBUG] 	0: Counter({'summarise': 3480, 'natural_join': 1702})
[    10.707][MainProcess][DEBUG] 	1: Counter({'summarise': 2400, 'mutate': 1018, 'natural_join3': 899, 'natural_join': 854, 'anti_join': 11})
[    10.710][MainProcess][DEBUG] 	2: Counter({'mutate': 2121, 'summarise': 1345, 'union': 580, 'natural_join3': 464, 'natural_join': 424, 'semi_join': 136, 'left_join': 100, 'inner_join': 12})
[    10.710][MainProcess][INFO] Solution found: summarise(natural_join3(@param1, @param0, summarise(@param0, cost = max(cost), P_id)), n = n(), S_name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/18-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/18-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/43.out", col_types = cols(S_name = col_character(),n = col_integer()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = max(cost)) %>% ungroup()
df4 <- inner_join(input2, input1) %>% inner_join(df3)
df5 <- df4 %>% group_by(S_name) %>% summarise(n = n()) %>% ungroup()
out <- df5 %>% select(S_name, n) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name,
       n
FROM
  (SELECT S_name,
          COUNT() AS n
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.S_name AS S_name,
             LHS.P_id AS P_id,
             LHS.cost AS cost
      FROM
        (SELECT LHS.S_key AS S_key,
                LHS.S_name AS S_name,
                RHS.P_id AS P_id,
                RHS.cost AS cost
         FROM input2 AS LHS
         INNER JOIN input1 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
      INNER JOIN
        (SELECT P_id,
                MAX(cost) AS cost
         FROM input1
         GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id
                                   AND LHS.cost = RHS.cost))
   GROUP BY S_name)
ORDER BY S_name
