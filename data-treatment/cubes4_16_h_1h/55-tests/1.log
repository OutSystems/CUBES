[     2.954][MainProcess][INFO] Parsing specification...
[     2.958][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     2.959][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     2.959][MainProcess][DEBUG] Reading input files...
[     2.968][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1-1.txt: ['string', 'string']
[     2.972][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1-2.txt: ['string', 'string']
[     2.977][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1-3.txt: ['string', 'string']
[     2.982][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1-4.txt: ['string', 'string', 'string']
[     2.986][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1.out: ['string']
[     3.020][MainProcess][DEBUG] Generating DSL...
[     3.058][MainProcess][INFO] Creating 16 processes
[     3.137][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.137][MainProcess][DEBUG] Increasing generator loc to 2
[     3.139][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.139][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.139][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.141][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.151][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.155][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.158][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.162][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.169][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.170][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.178][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.179][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.183][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.194][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.234][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.669][cube-solver-0][WARNING] There is no solution for current loc (1).
[     3.670][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     3.671][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.518][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     4.527][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     4.532][cube-solver-4][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     4.534][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     4.536][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     4.536][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     4.537][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     4.538][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     4.540][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     4.541][cube-solver-4][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     4.543][MainProcess][DEBUG] Increasing generator loc to 3
[     4.544][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     4.545][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     4.546][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     4.550][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     4.550][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.553][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     4.553][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     4.560][cube-solver-9][DEBUG] Solving cube (l0 = filter([1]), l1 = left_join())
[     4.561][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     4.565][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     4.569][cube-solver-14][DEBUG] Solving cube (l0 = filter([1]), l1 = inner_join())
[     4.580][cube-solver-11][DEBUG] Solving cube (l0 = filter([1]), l1 = intersect())
[     4.581][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     4.590][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     4.603][cube-solver-8][DEBUG] Solving cube (l0 = filter([3]), l1 = anti_join())
[     4.608][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([3]))
[     4.615][cube-solver-12][DEBUG] Solving cube (l0 = filter([4]), l1 = semi_join())
[     4.618][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     4.619][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     4.625][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     4.632][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([5]))
[     4.657][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([6]))
[     4.665][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     5.106][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([24]))
[     5.121][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     6.194][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([32]), l2 = intersect())
[     6.232][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect(), l2 = filter([32]))
[     6.259][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join(), l2 = filter([32]))
[     6.283][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join(), l2 = filter([32]))
[     6.308][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join(), l2 = filter([32]))
[     6.323][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join(), l2 = filter([32]))
[     6.337][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3(), l2 = filter([32]))
[     6.352][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4([13]), l2 = filter([32]))
[     6.373][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([32]), l2 = natural_join())
[     6.534][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([32]), l2 = natural_join4([14]))
[     6.575][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([32]), l2 = natural_join3([2]))
[     6.613][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([32]), l2 = cross_join())
[     6.618][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([32]), l2 = anti_join())
[     6.636][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3([3]), l1 = filter([32]), l2 = natural_join3([3]))
[     6.648][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3([3]), l1 = filter([32]), l2 = natural_join4([14]))
[     6.682][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([3]), l1 = left_join(), l2 = filter([32]))
[     6.703][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([3]), l1 = filter([32]), l2 = left_join())
[     6.718][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([7]), l1 = filter([32]), l2 = filter([32]))
[     6.721][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([3]), l1 = filter([32]), l2 = union())
[     6.728][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3([7]), l1 = filter([32]), l2 = anti_join())
[     6.741][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3([7]), l1 = filter([32]), l2 = left_join())
[     6.767][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([9]), l1 = filter([32]), l2 = union())
[     6.777][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([3]), l1 = filter([32]), l2 = inner_join())
[     6.788][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([3]), l1 = anti_join(), l2 = filter([32]))
[     6.807][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3([11]), l1 = filter([32]), l2 = intersect())
[     6.830][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([3]), l1 = filter([32]), l2 = filter([32]))
[     6.832][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3([12]), l1 = filter([32]), l2 = semi_join())
[     6.861][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([14]), l1 = filter([32]), l2 = cross_join())
[     6.895][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([4]), l1 = filter([32]), l2 = semi_join())
[     6.920][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = filter([32]), l2 = inner_join())
[     6.971][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([5]), l1 = filter([32]), l2 = natural_join([5]))
[     7.011][cube-solver-7][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = anti_join(), l2 = filter([32]))
[     7.160][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([6]), l1 = union(), l2 = filter([32]))
[     7.195][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = left_join(), l2 = filter([32]))
[     9.406][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = union(), l2 = filter([32]))
[     9.644][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3([16]), l1 = intersect(), l2 = filter([32]))
[     9.810][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join3([16]), l1 = left_join(), l2 = filter([32]))
[     9.813][MainProcess][INFO] Statistics:
[     9.813][MainProcess][INFO] 	Generated cubes: 58
[     9.813][MainProcess][INFO] 	Attempted programs: 375
[     9.813][MainProcess][INFO] 		Rejected: 22
[     9.813][MainProcess][INFO] 		Failed: 352
[     9.813][MainProcess][INFO] 	Blacklist clauses: 70
[     9.813][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     9.814][MainProcess][DEBUG] 	0: Counter({'natural_join4': 410})
[     9.814][MainProcess][DEBUG] 	1: Counter({'filter': 410})
[     9.814][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     9.815][MainProcess][DEBUG] 	0: Counter({'natural_join3': 436})
[     9.815][MainProcess][DEBUG] 	1: Counter({'left_join': 271, 'anti_join': 129, 'union': 36})
[     9.815][MainProcess][DEBUG] 	2: Counter({'filter': 436})
[     9.815][MainProcess][INFO] Solution found: filter(left_join(@param2, natural_join3(@param3, @param1, @param0)), F_name == 'faculty1' & level == 'JR')
[    10.355][cube-solver-3][DEBUG] Found solution with cube (l0 = natural_join4(), l1 = filter([5]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/1-1.txt", col_types = cols(C_name = col_character(),F_key = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/1-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/1-3.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input3 <- copy_to(con, input3)
input4 <- read_csv("tests-examples/55-tests/tables/1-4.txt", col_types = cols(S_key = col_character(),S_name = col_character(),level = col_character()))
input4 <- copy_to(con, input4)
expected_output <- read_csv("tests-examples/55-tests/tables/1.out", col_types = cols(S_name = col_character()))

df5 <- inner_join(input4, input2) %>% inner_join(input1)
df6 <- left_join(input3, df5)
df7 <- df6 %>% filter(F_name == 'faculty1' & level == 'JR')
out <- df7 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT `LHS`.`F_key` AS `F_key`,
          `LHS`.`F_name` AS `F_name`,
          `RHS`.`S_key` AS `S_key`,
          `RHS`.`S_name` AS `S_name`,
          `RHS`.`level` AS `level`,
          `RHS`.`C_name` AS `C_name`
   FROM `input3` AS `LHS`
   LEFT JOIN
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`S_name` AS `S_name`,
             `LHS`.`level` AS `level`,
             `LHS`.`C_name` AS `C_name`,
             `RHS`.`F_key` AS `F_key`
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`S_name` AS `S_name`,
                `LHS`.`level` AS `level`,
                `RHS`.`C_name` AS `C_name`
         FROM `input4` AS `LHS`
         INNER JOIN `input2` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`C_name` = `RHS`.`C_name`)) AS `RHS` ON (`LHS`.`F_key` = `RHS`.`F_key`))
WHERE (`F_name` = 'faculty1'
       AND `level` = 'JR')
ORDER BY S_name
