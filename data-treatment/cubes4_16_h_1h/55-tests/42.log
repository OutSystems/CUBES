[     1.558][MainProcess][INFO] Parsing specification...
[     1.561][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.561][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.562][MainProcess][DEBUG] Reading input files...
[     1.569][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-1.txt: ['string', 'string', 'int64']
[     1.574][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-2.txt: ['string', 'string']
[     1.578][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/42.out: ['string', 'int64']
[     1.605][MainProcess][DEBUG] Generating DSL...
[     1.657][MainProcess][INFO] Creating 16 processes
[     1.728][MainProcess][DEBUG] Increasing generator loc to 3
[     1.741][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.745][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.749][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.754][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.756][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.765][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.767][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.773][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.776][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.783][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.788][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.789][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.790][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.799][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.801][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.847][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.835][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.836][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.836][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.837][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.838][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.839][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.845][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.846][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     2.849][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.855][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.856][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     2.858][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.990][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise())
[     3.997][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = summarise())
[     4.001][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = mutate())
[     4.003][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise())
[     4.005][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join())
[     4.006][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = summarise())
[     4.006][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = mutate())
[     4.011][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join3())
[     4.012][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join4())
[     4.015][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = summarise())
[     4.018][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     4.022][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = anti_join())
[     4.040][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise([2]))
[     4.043][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate())
[     4.049][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]), l2 = left_join())
[     4.050][cube-solver-11][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]), l2 = union())
[     4.052][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([4]), l2 = summarise([4]))
[     4.063][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[     4.065][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([7]), l2 = mutate())
[     4.066][cube-solver-12][DEBUG] Solving cube (l0 = summarise([7]), l1 = summarise([7]), l2 = intersect())
[     4.078][cube-solver-13][DEBUG] Solving cube (l0 = summarise([8]), l1 = summarise([8]), l2 = semi_join())
[     4.095][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise([10]))
[     4.111][cube-solver-14][DEBUG] Solving cube (l0 = summarise([12]), l1 = summarise([12]), l2 = cross_join())
[     4.139][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([15]), l2 = mutate())
[     4.202][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[     4.207][cube-solver-15][DEBUG] Solving cube (l0 = summarise([16]), l1 = summarise([16]), l2 = mutate())
[     4.223][cube-solver-15][DEBUG] Solving cube (l0 = summarise([16]), l1 = summarise([16]), l2 = inner_join())
[     5.242][cube-solver-1][DEBUG] Solving cube (l0 = summarise([25]), l1 = natural_join(), l2 = mutate())
[     5.311][cube-solver-2][DEBUG] Solving cube (l0 = summarise([25]), l1 = natural_join3(), l2 = summarise([25]))
[     5.319][cube-solver-0][DEBUG] Solving cube (l0 = summarise([25]), l1 = natural_join(), l2 = summarise([25]))
[     5.356][cube-solver-3][DEBUG] Solving cube (l0 = summarise([25]), l1 = natural_join3(), l2 = mutate())
[     6.292][cube-solver-7][DEBUG] Solving cube (l0 = summarise([25]), l1 = filter(), l2 = summarise([25]))
[     6.341][cube-solver-7][DEBUG] Solving cube (l0 = summarise([25]), l1 = filter(), l2 = mutate())
[     6.364][cube-solver-7][DEBUG] Solving cube (l0 = summarise([25]), l1 = anti_join(), l2 = summarise([25]))
[     7.344][cube-solver-6][DEBUG] Solving cube (l0 = summarise([25]), l1 = anti_join(), l2 = mutate())
[     8.891][cube-solver-5][DEBUG] Solving cube (l0 = summarise([25]), l1 = left_join(), l2 = summarise([25]))
[     9.291][cube-solver-1][DEBUG] Solving cube (l0 = summarise([25]), l1 = left_join(), l2 = mutate())
[     9.347][cube-solver-14][DEBUG] Solving cube (l0 = summarise([25]), l1 = union(), l2 = summarise([25]))
[    11.588][cube-solver-5][DEBUG] Found solution with cube (l0 = summarise([25]), l1 = left_join(), l2 = summarise([25]))
[    11.590][MainProcess][INFO] Statistics:
[    11.590][MainProcess][INFO] 	Generated cubes: 42
[    11.590][MainProcess][INFO] 	Attempted programs: 596
[    11.590][MainProcess][INFO] 		Rejected: 109
[    11.590][MainProcess][INFO] 		Failed: 486
[    11.590][MainProcess][INFO] 	Blacklist clauses: 25
[    11.590][MainProcess][DEBUG] Priting statistics for good programs of size 3
[    11.593][MainProcess][DEBUG] 	0: Counter({'summarise': 5506, 'natural_join': 1144})
[    11.595][MainProcess][DEBUG] 	1: Counter({'summarise': 2670, 'natural_join3': 1479, 'natural_join': 871, 'mutate': 592, 'left_join': 491, 'anti_join': 306, 'union': 241})
[    11.597][MainProcess][DEBUG] 	2: Counter({'mutate': 2683, 'summarise': 1849, 'union': 672, 'natural_join3': 616, 'left_join': 398, 'semi_join': 208, 'natural_join': 136, 'anti_join': 64, 'inner_join': 24})
[    11.597][MainProcess][INFO] Solution found: summarise(left_join(@param1, summarise(@param0, meancost = mean(cost), P_id)), n = n(), S_name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/17-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/17-2.txt", col_types = cols(P_id = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/42.out", col_types = cols(S_name = col_character(),n = col_integer()))

df3 <- input1 %>% group_by(P_id) %>% summarise(meancost = mean(cost)) %>% ungroup()
df4 <- left_join(input2, df3)
df5 <- df4 %>% group_by(S_name) %>% summarise(n = n()) %>% ungroup()
out <- df5 %>% select(S_name, n) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name,
       n
FROM
  (SELECT S_name,
          COUNT() AS n
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.S_name AS S_name,
             RHS.meancost AS meancost
      FROM input2 AS LHS
      LEFT JOIN
        (SELECT P_id,
                AVG(cost) AS meancost
         FROM input1
         GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id))
   GROUP BY S_name)
ORDER BY S_name
