[     1.577][MainProcess][INFO] Parsing specification...
[     1.580][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.580][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.580][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.581][MainProcess][DEBUG] Reading input files...
[     1.588][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-1.txt: ['string', 'string', 'int64']
[     1.593][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-3.txt: ['string', 'string']
[     1.598][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/48.out: ['string', 'string', 'int64']
[     1.625][MainProcess][DEBUG] Generating DSL...
[     1.646][MainProcess][INFO] Creating 16 processes
[     1.712][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.712][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.712][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.713][MainProcess][DEBUG] Increasing generator loc to 3
[     1.713][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.713][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.714][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.714][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.719][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.726][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.727][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.735][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.735][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.741][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.748][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.764][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.765][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.036][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.037][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.039][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.141][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.141][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.142][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.208][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.208][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.210][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.269][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.270][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.272][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.292][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.297][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.302][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.306][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.311][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.315][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.319][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.320][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.324][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.324][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.324][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.328][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = anti_join())
[     2.328][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = left_join())
[     2.329][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = union())
[     2.383][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[     2.438][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = summarise([2]))
[     2.452][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = summarise([2]))
[     2.459][cube-solver-9][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([1]), l2 = intersect())
[     2.523][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([5]), l2 = filter([1]))
[     2.533][cube-solver-12][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([1]), l2 = semi_join())
[     2.536][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = mutate())
[     2.795][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([2]))
[     2.802][cube-solver-15][DEBUG] Solving cube (l0 = summarise([10]), l1 = filter([2]), l2 = cross_join())
[     2.842][cube-solver-2][DEBUG] Solving cube (l0 = summarise([10]), l1 = natural_join3(), l2 = filter([2]))
[     2.869][cube-solver-1][DEBUG] Solving cube (l0 = summarise([10]), l1 = natural_join(), l2 = filter([2]))
[     3.033][cube-solver-10][DEBUG] Found solution with cube (l0 = summarise([1]), l1 = filter(), l2 = left_join())
[     3.034][MainProcess][INFO] Statistics:
[     3.034][MainProcess][INFO] 	Generated cubes: 31
[     3.035][MainProcess][INFO] 	Attempted programs: 2
[     3.035][MainProcess][INFO] 		Rejected: 0
[     3.035][MainProcess][INFO] 		Failed: 1
[     3.035][MainProcess][INFO] 	Blacklist clauses: 12
[     3.035][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     3.035][MainProcess][DEBUG] 	0: Counter({'summarise': 217, 'natural_join': 169})
[     3.036][MainProcess][DEBUG] 	1: Counter({'filter': 267, 'mutate': 62, 'summarise': 46, 'natural_join3': 11})
[     3.036][MainProcess][DEBUG] 	2: Counter({'filter': 119, 'left_join': 81, 'natural_join3': 54, 'union': 47, 'mutate': 34, 'summarise': 27, 'natural_join': 24})
[     3.036][MainProcess][INFO] Solution found: left_join(filter(summarise(@param1, n = n(), S_key, S_name), S_name != 'SN1'), @param0)
[     3.175][cube-solver-5][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter([1]), l2 = summarise([2]))
[     3.191][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise([10]), l1 = natural_join(), l2 = filter([2]))
[     3.981][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/17-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/17-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/48.out", col_types = cols(P_id = col_character(),S_name = col_character(),n = col_integer()))

df3 <- input2 %>% group_by(S_key, S_name) %>% summarise(n = n()) %>% ungroup()
df4 <- df3 %>% filter(S_name != 'SN1')
df5 <- left_join(df4, input1)
out <- df5 %>% select(P_id, S_name, n) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `P_id`,
       `S_name`,
       `n`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`S_name` AS `S_name`,
          `LHS`.`n` AS `n`,
          `RHS`.`P_id` AS `P_id`,
          `RHS`.`cost` AS `cost`
   FROM
     (SELECT *
      FROM
        (SELECT `S_key`,
                `S_name`,
                COUNT() AS `n`
         FROM `input2`
         GROUP BY `S_key`,
                  `S_name`)
      WHERE (`S_name` != 'SN1')) AS LHS
   LEFT JOIN input1 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY P_id
