[     1.550][MainProcess][INFO] Parsing specification...
[     1.553][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.554][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.554][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.554][MainProcess][DEBUG] Reading input files...
[     1.561][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3-1.txt: ['string', 'string']
[     1.566][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3-2.txt: ['string', 'string']
[     1.570][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3.out: ['string']
[     1.598][MainProcess][DEBUG] Generating DSL...
[     1.618][MainProcess][INFO] Creating 16 processes
[     1.689][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.690][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.690][MainProcess][DEBUG] Increasing generator loc to 3
[     1.690][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.690][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.691][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.691][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.691][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.695][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.696][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.702][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.707][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.718][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.726][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.727][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.742][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.748][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.124][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.125][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.127][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.176][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.176][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.178][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.242][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.247][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.250][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.252][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.253][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.258][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.263][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.268][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.273][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.276][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     2.280][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = anti_join())
[     2.289][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.290][cube-solver-1][DEBUG] Solving cube (l0 = filter([2]), l1 = summarise())
[     2.293][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.297][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]), l2 = summarise())
[     2.301][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.302][cube-solver-2][DEBUG] Solving cube (l0 = filter([2]), l1 = mutate())
[     2.303][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([2]), l2 = union())
[     2.303][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([2]), l2 = mutate())
[     2.305][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.306][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([3]))
[     2.309][cube-solver-6][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([3]), l2 = semi_join())
[     2.313][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([3]), l2 = cross_join())
[     2.320][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([4]))
[     2.484][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([15]), l2 = summarise([6]))
[     2.501][cube-solver-5][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([15]), l2 = mutate())
[     2.518][cube-solver-5][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([15]), l2 = inner_join())
[     2.550][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([16]))
[     2.565][cube-solver-11][DEBUG] Solving cube (l0 = summarise([6]), l1 = anti_join(), l2 = filter([16]))
[     2.566][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([6]), l2 = filter([16]))
[     2.587][cube-solver-12][DEBUG] Solving cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([16]))
[     2.628][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([6]), l2 = filter([19]))
[     2.779][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([29]), l2 = mutate())
[     2.801][cube-solver-14][DEBUG] Solving cube (l0 = summarise([6]), l1 = union(), l2 = filter([29]))
[     2.992][cube-solver-3][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter([32]))
[     3.027][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter([32]))
[     3.070][cube-solver-2][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([33]), l2 = intersect())
[     3.081][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([33]), l2 = left_join())
[     4.208][cube-solver-3][DEBUG] Found solution with cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter([32]))
[     4.210][MainProcess][INFO] Statistics:
[     4.210][MainProcess][INFO] 	Generated cubes: 36
[     4.210][MainProcess][INFO] 	Attempted programs: 30
[     4.210][MainProcess][INFO] 		Rejected: 13
[     4.210][MainProcess][INFO] 		Failed: 16
[     4.210][MainProcess][INFO] 	Blacklist clauses: 39
[     4.210][MainProcess][DEBUG] Priting statistics for good programs of size 3
[     4.211][MainProcess][DEBUG] 	0: Counter({'summarise': 842, 'natural_join': 369})
[     4.212][MainProcess][DEBUG] 	1: Counter({'filter': 358, 'mutate': 203, 'summarise': 166, 'left_join': 153, 'natural_join3': 120, 'natural_join': 97, 'union': 96, 'anti_join': 18})
[     4.213][MainProcess][DEBUG] 	2: Counter({'filter': 853, 'natural_join': 104, 'union': 70, 'left_join': 56, 'natural_join3': 48, 'semi_join': 48, 'inner_join': 32})
[     4.213][MainProcess][INFO] Solution found: filter(natural_join(@param0, summarise(@param1, n = n(), ID_key)), Room == 'R128' | n > 4)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/3-1.txt", col_types = cols(ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/3-2.txt", col_types = cols(ID_key_student = col_character(),ID_key = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/3.out", col_types = cols(ID_key = col_character()))

df3 <- input2 %>% group_by(ID_key) %>% summarise(n = n()) %>% ungroup()
df4 <- inner_join(input1, df3)
df5 <- df4 %>% filter(Room == 'R128' | n > 4)
out <- df5 %>% select(ID_key) %>% arrange(ID_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `ID_key`
FROM
  (SELECT `LHS`.`ID_key` AS `ID_key`,
          `LHS`.`Room` AS `Room`,
          `RHS`.`n` AS `n`
   FROM `input1` AS `LHS`
   INNER JOIN
     (SELECT `ID_key`,
             COUNT() AS `n`
      FROM `input2`
      GROUP BY `ID_key`) AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
WHERE (`Room` = 'R128'
       OR n > 4.0)
ORDER BY ID_key
