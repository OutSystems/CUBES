[     2.966][MainProcess][INFO] Parsing specification...
[     2.970][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     2.970][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     2.971][MainProcess][DEBUG] Reading input files...
[     2.979][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     2.983][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     2.988][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     2.994][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19.out: ['string', 'string', 'string', 'string']
[     3.027][MainProcess][DEBUG] Generating DSL...
[     3.049][MainProcess][INFO] Creating 16 processes
[     3.111][MainProcess][DEBUG] Increasing generator loc to 2
[     3.112][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.113][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.113][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.113][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.113][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.114][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.116][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.122][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.122][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.135][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.138][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.141][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.141][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.156][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.160][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.166][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.358][cube-solver-0][WARNING] There is no solution for current loc (1).
[     3.359][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     3.360][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.406][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     3.413][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     3.417][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     3.420][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     3.422][cube-solver-8][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     3.424][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([1]))
[     3.427][cube-solver-8][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([1]))
[     3.429][MainProcess][DEBUG] Increasing generator loc to 3
[     3.429][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.438][cube-solver-7][DEBUG] Solving cube (l0 = filter([2]), l1 = filter([2]))
[     3.442][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.454][cube-solver-12][DEBUG] Solving cube (l0 = filter([2]), l1 = semi_join())
[     3.459][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     3.473][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]))
[     3.478][cube-solver-11][DEBUG] Solving cube (l0 = filter([2]), l1 = intersect())
[     3.483][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.493][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([2]))
[     3.495][cube-solver-10][DEBUG] Solving cube (l0 = filter([2]), l1 = union())
[     3.495][cube-solver-4][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join())
[     3.498][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     3.500][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.500][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.579][cube-solver-5][DEBUG] Solving cube (l0 = filter([4]), l1 = natural_join3())
[     3.583][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]))
[     3.583][cube-solver-14][DEBUG] Solving cube (l0 = filter([4]), l1 = inner_join())
[     3.588][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.591][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     3.674][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]))
[     3.679][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.694][cube-solver-9][DEBUG] Solving cube (l0 = filter([4]), l1 = left_join())
[     3.700][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.708][cube-solver-13][DEBUG] Solving cube (l0 = filter([4]), l1 = cross_join())
[     3.713][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.734][cube-solver-5][DEBUG] Found solution with cube (l0 = filter([4]), l1 = natural_join3())
[     3.735][MainProcess][INFO] Statistics:
[     3.735][MainProcess][INFO] 	Generated cubes: 34
[     3.735][MainProcess][INFO] 	Attempted programs: 3
[     3.736][MainProcess][INFO] 		Rejected: 0
[     3.736][MainProcess][INFO] 		Failed: 2
[     3.736][MainProcess][INFO] 	Blacklist clauses: 4
[     3.736][MainProcess][DEBUG] Priting statistics for good programs of size 2
[     3.736][MainProcess][DEBUG] 	0: Counter({'natural_join3': 25, 'filter': 5})
[     3.736][MainProcess][DEBUG] 	1: Counter({'filter': 25, 'natural_join3': 5})
[     3.736][MainProcess][INFO] Solution found: natural_join3(@param2, @param0, filter(@param1, color == 'red'))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/19.out", col_types = cols(S_key = col_character(),P_id = col_character(),S_name = col_character(),color = col_character()))

df4 <- input2 %>% filter(color == 'red')
df5 <- inner_join(input3, input1) %>% inner_join(df4)
out <- df5 %>% select(S_key, P_id, S_name, color) %>% arrange(S_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_key`,
       `P_id`,
       `S_name`,
       `color`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`S_name` AS `S_name`,
          `LHS`.`P_id` AS `P_id`,
          `RHS`.`color` AS `color`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`S_name` AS `S_name`,
             `RHS`.`P_id` AS `P_id`
      FROM `input3` AS `LHS`
      INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
   INNER JOIN
     (SELECT *
      FROM `input2`
      WHERE (`color` = 'red')) AS RHS ON (LHS.P_id = RHS.P_id))
ORDER BY S_key
