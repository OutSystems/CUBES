R[write to console]: 
Attaching package: ‘dplyr’


R[write to console]: The following objects are masked from ‘package:stats’:

    filter, lag


R[write to console]: The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


R[write to console]: 
Attaching package: ‘dbplyr’


R[write to console]: The following objects are masked from ‘package:dplyr’:

    ident, sql


# First, specify the types that will be used

enum Cols {
  "P_id, S_key", "P_id, S_name", "P_id, color", "S_key, P_id", "S_key, S_name", "S_key, color", "S_name, P_id", "S_name, S_key", "S_name, color", "color, P_id", "color, S_key", "color, S_name", "P_id", "S_key", "S_name", "color"
}

enum Col {
  "P_id", "S_key", "S_name", "color"
}

enum SelectCols{
  "S_name"
}

enum Distinct {
	"distinct", ""
}

enum FilterCondition{
"color == red", "color != red", "color == green", "color != green"
}


enum Op{
 "|", "&"
}

value Table {
  col: int;
  row: int;
}

value TableSelect {
  col: int;
  row: int;
}

value Empty;

# Next, specify the input/output of the synthesized program
program Squares(Table, Table, Table) -> TableSelect;

# Finally, specify the production rules
func empty: Empty -> Empty;

func inner_join: Table r -> Table a, Table b
{
  col(r) <= col(a) + col(b);
}

func inner_join3: Table r -> Table a, Table b, Table c
{
  col(r) < col(a) + col(b) + col(c);
}

func inner_join4: Table r -> Table a, Table b, Table c, Table d {
  col(r) < col(a) + col(b) + col(c) + col(d);
}

func anti_join: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func left_join: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a);
}

func bind_rows: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a) + row(b);
}

func intersect: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func select: TableSelect r -> Table a, SelectCols c, Distinct d{
	row(r) <= row(a);
	col(r) <= col(a);
}




func filter: Table r -> Table a, FilterCondition f {
 row(r) <= row(a);
 col(r) == col(a);
}
func filters: Table r -> Table a, FilterCondition f, FilterCondition g, Op o {
 row(r) <= row(a);
 col(r) == col(a);
}


predicate distinct_filters(filters, 1, 2);

predicate is_not_parent(filters, filter, 100);
predicate is_not_parent(filter, filters, 100);
predicate is_not_parent(filter, filter, 100);
predicate is_not_parent(filters, filters, 100);

predicate constant_occurs("color == red,color != red");
predicate constant_occurs("color == green,color != green");
predicate is_not_parent(inner_join, inner_join3, 100);
predicate is_not_parent(inner_join, inner_join4, 100);
#predicate is_not_parent(inner_join, anti_join, 100);
predicate is_not_parent(inner_join3, inner_join, 100);
predicate is_not_parent(inner_join3, inner_join3, 100);
predicate is_not_parent(inner_join3, inner_join4, 100);
predicate is_not_parent(inner_join3, anti_join, 100);
predicate is_not_parent(inner_join4, inner_join, 100);
predicate is_not_parent(inner_join4, inner_join3, 100);
predicate is_not_parent(inner_join4, inner_join4, 100);
#predicate is_not_parent(inner_join4, anti_join, 100);
predicate is_not_parent(anti_join, anti_join, 100);
predicate is_not_parent(anti_join, inner_join, 100);
predicate is_not_parent(anti_join, inner_join4, 100);
predicate distinct_inputs(inner_join4);
predicate distinct_inputs(inner_join3);
predicate distinct_inputs(inner_join);
predicate distinct_inputs(anti_join);

Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = c("P_id", "color")
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = "P_id"
Joining, by = "S_key"
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = "P_id"
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = "S_key"
Joining, by = "P_id"
Joining, by = "S_key"

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input0 <- read.table("tests-examples/55-tests/tables/21-1.txt", sep =",", header=T)
input0
input0 <- copy_to(con,input0)
input1 <- read.table("tests-examples/55-tests/tables/21-2.txt", sep =",", header=T)
input1
input1 <- copy_to(con,input1)
input2 <- read.table("tests-examples/55-tests/tables/21-3.txt", sep =",", header=T)
input2
input2 <- copy_to(con,input2)
expected_output <- read.table("tests-examples/55-tests/tables/21.out", sep =",", header=T)
expected_output

RET_DF422 <- input1 %>% ungroup() %>% filter(color == "red" | color == "green")
RET_DF423 <- inner_join(inner_join(RET_DF422, input0), input2)
RET_DF424 <- RET_DF423 %>% ungroup() %>% select(S_name) %>% distinct()



+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

Joining, by = "P_id"
Joining, by = "S_key"
SELECT DISTINCT `S_name`
FROM
  (SELECT `P_id`,
          `color`,
          `S_key`,
          `S_name`
   FROM
     (SELECT `P_id`,
             `color`,
             `S_key`
      FROM
        (SELECT *
         FROM `input1`
         WHERE (`color` = 'red'
                OR `color` = 'green')) AS `LHS`
      INNER JOIN `input0` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
   INNER JOIN `input2` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))

