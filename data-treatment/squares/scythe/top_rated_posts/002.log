R[write to console]: 
Attaching package: ‘dplyr’


R[write to console]: The following objects are masked from ‘package:stats’:

    filter, lag


R[write to console]: The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


R[write to console]: 
Attaching package: ‘dbplyr’


R[write to console]: The following objects are masked from ‘package:dplyr’:

    ident, sql


# First, specify the types that will be used

enum Cols {
  "EMAIL, ID", "EMAIL, NAME", "ID, EMAIL", "ID, NAME", "NAME, EMAIL", "NAME, ID", "EMAIL", "ID", "NAME"
}

enum Col {
  "EMAIL", "ID", "NAME"
}

enum SelectCols{
  "NAME"
}

enum Distinct {
	"distinct", ""
}

enum FilterCondition{
"n == 1", "n > 1", "n < 1", "n >= 1", "n <= 1"
}

enum SummariseCondition{
"n = n()"
}

enum Op{
 "|", "&"
}

value Table {
  col: int;
  row: int;
}

value TableSelect {
  col: int;
  row: int;
}

value Empty;

# Next, specify the input/output of the synthesized program
program Squares(Table) -> TableSelect;

# Finally, specify the production rules
func empty: Empty -> Empty;

func inner_join: Table r -> Table a, Table b
{
  col(r) <= col(a) + col(b);
}

func inner_join3: Table r -> Table a, Table b, Table c
{
  col(r) < col(a) + col(b) + col(c);
}

func inner_join4: Table r -> Table a, Table b, Table c, Table d {
  col(r) < col(a) + col(b) + col(c) + col(d);
}

func anti_join: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func left_join: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a);
}

func bind_rows: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a) + row(b);
}

func intersect: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func select: TableSelect r -> Table a, SelectCols c, Distinct d{
	row(r) <= row(a);
	col(r) <= col(a);
}




func filter: Table r -> Table a, FilterCondition f {
 row(r) <= row(a);
 col(r) == col(a);
}
func filters: Table r -> Table a, FilterCondition f, FilterCondition g, Op o {
 row(r) <= row(a);
 col(r) == col(a);
}


func summariseGrouped: Table r -> Table a, SummariseCondition s, Cols b {
 row(r) <= row(a);
 col(r) <= 3;
}

predicate is_not_parent(inner_join4, summariseGrouped, 100);
predicate is_not_parent(summariseGrouped, summariseGrouped, 100);
predicate distinct_filters(filters, 1, 2);

predicate is_not_parent(filters, filter, 100);
predicate is_not_parent(filter, filters, 100);
predicate is_not_parent(filter, filter, 100);
predicate is_not_parent(filters, filters, 100);

predicate constant_occurs("n = n()");
predicate constant_occurs("n == 1,n > 1,n < 1,n >= 1,n <= 1");
predicate happens_before("n == 1","n = n()");
predicate happens_before("n > 1","n = n()");
predicate happens_before("n < 1","n = n()");
predicate happens_before("n >= 1","n = n()");
predicate happens_before("n <= 1","n = n()");
predicate is_not_parent(inner_join, inner_join3, 100);
predicate is_not_parent(inner_join, inner_join4, 100);
#predicate is_not_parent(inner_join, anti_join, 100);
predicate is_not_parent(inner_join3, inner_join, 100);
predicate is_not_parent(inner_join3, inner_join3, 100);
predicate is_not_parent(inner_join3, inner_join4, 100);
predicate is_not_parent(inner_join3, anti_join, 100);
predicate is_not_parent(inner_join4, inner_join, 100);
predicate is_not_parent(inner_join4, inner_join3, 100);
predicate is_not_parent(inner_join4, inner_join4, 100);
#predicate is_not_parent(inner_join4, anti_join, 100);
predicate is_not_parent(anti_join, anti_join, 100);
predicate is_not_parent(anti_join, inner_join, 100);
predicate is_not_parent(anti_join, inner_join4, 100);
predicate distinct_inputs(inner_join4);
predicate distinct_inputs(inner_join3);
predicate distinct_inputs(inner_join);
predicate distinct_inputs(anti_join);


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input0 <- read.table("tests-examples/scythe/top_rated_posts/tables/i002.csv", sep =",", header=T)
input0
input0 <- copy_to(con,input0)
expected_output <- read.table("tests-examples/scythe/top_rated_posts/tables/o002.csv", sep =",", header=T)
expected_output

RET_DF731 <- input0 %>% group_by(EMAIL, NAME) %>% summarise(n = n())
RET_DF732 <- RET_DF731 %>% ungroup() %>% filter(n > 1 & n >= 1)
RET_DF733 <- RET_DF732 %>% ungroup() %>% select(NAME) %>% distinct()



+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `NAME`
FROM
  (SELECT `EMAIL`,
          `NAME`,
          COUNT() AS `n`
   FROM `input0`
   GROUP BY `EMAIL`,
            `NAME`)
WHERE (`n` > 1.0
       AND `n` >= 1.0)

