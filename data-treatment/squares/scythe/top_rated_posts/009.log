R[write to console]: 
Attaching package: ‘dplyr’


R[write to console]: The following objects are masked from ‘package:stats’:

    filter, lag


R[write to console]: The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


R[write to console]: 
Attaching package: ‘dbplyr’


R[write to console]: The following objects are masked from ‘package:dplyr’:

    ident, sql


# First, specify the types that will be used

enum Cols {
  "ip, time_stamp", "ip, username", "time_stamp, ip", "time_stamp, username", "username, ip", "username, time_stamp", "ip", "time_stamp", "username"
}

enum Col {
  "ip", "time_stamp", "username"
}

enum SelectCols{
  "username,ip,time_stamp"
}

enum Distinct {
	"distinct", ""
}

enum FilterCondition{
"time_stamp == maxtime_stamp", "time_stamp > maxtime_stamp", "time_stamp < maxtime_stamp", "time_stamp >= maxtime_stamp", "time_stamp <= maxtime_stamp"
}

enum SummariseCondition{
"maxtime_stamp = max(time_stamp)"
}



value Table {
  col: int;
  row: int;
}

value TableSelect {
  col: int;
  row: int;
}

value Empty;

# Next, specify the input/output of the synthesized program
program Squares(Table) -> TableSelect;

# Finally, specify the production rules
func empty: Empty -> Empty;

func inner_join: Table r -> Table a, Table b
{
  col(r) <= col(a) + col(b);
}

func inner_join3: Table r -> Table a, Table b, Table c
{
  col(r) < col(a) + col(b) + col(c);
}

func inner_join4: Table r -> Table a, Table b, Table c, Table d {
  col(r) < col(a) + col(b) + col(c) + col(d);
}

func anti_join: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func left_join: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a);
}

func bind_rows: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a) + row(b);
}

func intersect: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func select: TableSelect r -> Table a, SelectCols c, Distinct d{
	row(r) <= row(a);
	col(r) <= col(a);
}




func filter: Table r -> Table a, FilterCondition f {
 row(r) <= row(a);
 col(r) == col(a);
}


func summariseGrouped: Table r -> Table a, SummariseCondition s, Cols b {
 row(r) <= row(a);
 col(r) <= 3;
}

predicate is_not_parent(inner_join4, summariseGrouped, 100);
predicate is_not_parent(summariseGrouped, summariseGrouped, 100);

predicate is_not_parent(filter, filter, 100);

predicate constant_occurs("maxtime_stamp = max(time_stamp)");
predicate happens_before("time_stamp == maxtime_stamp","maxtime_stamp = max(time_stamp)");
predicate happens_before("time_stamp > maxtime_stamp","maxtime_stamp = max(time_stamp)");
predicate happens_before("time_stamp < maxtime_stamp","maxtime_stamp = max(time_stamp)");
predicate happens_before("time_stamp >= maxtime_stamp","maxtime_stamp = max(time_stamp)");
predicate happens_before("time_stamp <= maxtime_stamp","maxtime_stamp = max(time_stamp)");
predicate is_not_parent(inner_join, inner_join3, 100);
predicate is_not_parent(inner_join, inner_join4, 100);
#predicate is_not_parent(inner_join, anti_join, 100);
predicate is_not_parent(inner_join3, inner_join, 100);
predicate is_not_parent(inner_join3, inner_join3, 100);
predicate is_not_parent(inner_join3, inner_join4, 100);
predicate is_not_parent(inner_join3, anti_join, 100);
predicate is_not_parent(inner_join4, inner_join, 100);
predicate is_not_parent(inner_join4, inner_join3, 100);
predicate is_not_parent(inner_join4, inner_join4, 100);
#predicate is_not_parent(inner_join4, anti_join, 100);
predicate is_not_parent(anti_join, anti_join, 100);
predicate is_not_parent(anti_join, inner_join, 100);
predicate is_not_parent(anti_join, inner_join4, 100);
predicate distinct_inputs(inner_join4);
predicate distinct_inputs(inner_join3);
predicate distinct_inputs(inner_join);
predicate distinct_inputs(anti_join);

Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = "time_stamp"
Joining, by = c("username", "ip")
Joining, by = c("ip", "time_stamp")
Joining, by = "ip"
Joining, by = c("username", "time_stamp")
Joining, by = c("username", "ip")
Joining, by = c("username", "time_stamp")
Joining, by = c("ip", "time_stamp")
Joining, by = "username"
Joining, by = "time_stamp"
Joining, by = c("username", "time_stamp")
Joining, by = c("username", "ip")
Joining, by = c("ip", "time_stamp")
Joining, by = c("username", "time_stamp")
Joining, by = c("username", "ip")
Joining, by = "username"
Joining, by = c("ip", "time_stamp")
Joining, by = "ip"
Joining, by = "username"
Joining, by = c("ip", "time_stamp")
Joining, by = c("username", "ip")
Joining, by = "ip"
Joining, by = c("ip", "time_stamp")
Joining, by = "time_stamp"
Joining, by = c("username", "ip")
Joining, by = c("username", "time_stamp")
Joining, by = c("username", "time_stamp")
Joining, by = "ip"
Joining, by = c("ip", "time_stamp")
Joining, by = c("username", "ip")
Joining, by = c("username", "time_stamp")
Joining, by = c("username", "time_stamp")
Joining, by = "time_stamp"
Joining, by = c("ip", "time_stamp")
Joining, by = c("username", "ip")
Joining, by = "username"
Joining, by = "ip"
Joining, by = c("ip", "time_stamp")
Joining, by = c("time_stamp", "ip")
Joining, by = c("time_stamp", "username")
Joining, by = c("username", "time_stamp")
Joining, by = "username"
Joining, by = c("ip", "username")
Joining, by = "time_stamp"
Joining, by = c("username", "ip")
Joining, by = "time_stamp"
Joining, by = c("username", "time_stamp")
Joining, by = c("username", "time_stamp")
Joining, by = c("time_stamp", "ip")
Joining, by = "username"
Joining, by = c("time_stamp", "username")
Joining, by = c("username", "ip")
Joining, by = c("ip", "time_stamp")
Joining, by = c("ip", "username")
Joining, by = c("ip", "username")
Joining, by = c("username", "ip")
Joining, by = c("ip", "time_stamp")
Joining, by = c("time_stamp", "username")
Joining, by = c("time_stamp", "ip")
Joining, by = "username"
Joining, by = c("username", "ip")
Joining, by = c("time_stamp", "username")
Joining, by = c("ip", "time_stamp")
Joining, by = c("time_stamp", "ip")
Joining, by = c("ip", "username")
Joining, by = c("username", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = c("username", "ip", "time_stamp")
Joining, by = "time_stamp"
Joining, by = c("time_stamp", "ip")
Joining, by = "ip"
Joining, by = c("time_stamp", "ip")
Joining, by = c("ip", "maxtime_stamp")
Joining, by = c("time_stamp", "ip", "username")
Joining, by = c("ip", "maxtime_stamp")
Joining, by = c("time_stamp", "ip")
Joining, by = c("time_stamp", "ip", "maxtime_stamp")
Joining, by = c("time_stamp", "ip")
Joining, by = c("ip", "maxtime_stamp")
Joining, by = c("time_stamp", "ip", "username")
Joining, by = "maxtime_stamp"
Joining, by = c("time_stamp", "ip", "username")
Joining, by = "maxtime_stamp"
Joining, by = c("time_stamp", "ip", "username")

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input0 <- read.table("tests-examples/scythe/top_rated_posts/tables/i009.csv", sep =",", header=T)
input0
input0 <- copy_to(con,input0)
expected_output <- read.table("tests-examples/scythe/top_rated_posts/tables/o009.csv", sep =",", header=T)
expected_output

RET_DF849 <- input0 %>% group_by(time_stamp, ip) %>% summarise(maxtime_stamp = max(time_stamp))
RET_DF850 <- input0 %>% group_by(username) %>% summarise(maxtime_stamp = max(time_stamp))
RET_DF851 <- inner_join(inner_join(RET_DF849, RET_DF850), input0)
RET_DF852 <- RET_DF851 %>% ungroup() %>% select(username,ip,time_stamp) %>% distinct()



+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

Joining, by = "maxtime_stamp"
Joining, by = c("time_stamp", "ip", "username")
SELECT DISTINCT `username`,
                `ip`,
                `time_stamp`
FROM
  (SELECT `time_stamp`,
          `ip`,
          `maxtime_stamp`,
          `username`
   FROM
     (SELECT `time_stamp`,
             `ip`,
             `maxtime_stamp`,
             `username`
      FROM
        (SELECT `time_stamp`,
                `ip`,
                MAX(`time_stamp`) AS `maxtime_stamp`
         FROM `input0`
         GROUP BY `time_stamp`,
                  `ip`) AS `LHS`
      INNER JOIN
        (SELECT `username`,
                MAX(`time_stamp`) AS `maxtime_stamp`
         FROM `input0`
         GROUP BY `username`) AS `RHS` ON (`LHS`.`maxtime_stamp` = `RHS`.`maxtime_stamp`)) AS `LHS`
   INNER JOIN `input0` AS `RHS` ON (`LHS`.`time_stamp` = `RHS`.`time_stamp`
                                    AND `LHS`.`ip` = `RHS`.`ip`
                                    AND `LHS`.`username` = `RHS`.`username`))

