R[write to console]: 
Attaching package: ‘dplyr’


R[write to console]: The following objects are masked from ‘package:stats’:

    filter, lag


R[write to console]: The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


R[write to console]: 
Attaching package: ‘dbplyr’


R[write to console]: The following objects are masked from ‘package:dplyr’:

    ident, sql


# First, specify the types that will be used

enum Cols {
  "content, id", "content, rev", "id, content", "id, rev", "rev, content", "rev, id", "content", "id", "rev"
}

enum Col {
  "content", "id", "rev"
}

enum SelectCols{
  "id,rev,content"
}

enum Distinct {
	"distinct", ""
}

enum FilterCondition{
"rev == maxrev", "rev > maxrev", "rev < maxrev", "rev >= maxrev", "rev <= maxrev"
}

enum SummariseCondition{
"maxrev = max(rev)"
}



value Table {
  col: int;
  row: int;
}

value TableSelect {
  col: int;
  row: int;
}

value Empty;

# Next, specify the input/output of the synthesized program
program Squares(Table) -> TableSelect;

# Finally, specify the production rules
func empty: Empty -> Empty;

func inner_join: Table r -> Table a, Table b
{
  col(r) <= col(a) + col(b);
}

func inner_join3: Table r -> Table a, Table b, Table c
{
  col(r) < col(a) + col(b) + col(c);
}

func inner_join4: Table r -> Table a, Table b, Table c, Table d {
  col(r) < col(a) + col(b) + col(c) + col(d);
}

func anti_join: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func left_join: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a);
}

func bind_rows: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a) + row(b);
}

func intersect: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func select: TableSelect r -> Table a, SelectCols c, Distinct d{
	row(r) <= row(a);
	col(r) <= col(a);
}




func filter: Table r -> Table a, FilterCondition f {
 row(r) <= row(a);
 col(r) == col(a);
}


func summariseGrouped: Table r -> Table a, SummariseCondition s, Cols b {
 row(r) <= row(a);
 col(r) <= 3;
}

predicate is_not_parent(inner_join4, summariseGrouped, 100);
predicate is_not_parent(summariseGrouped, summariseGrouped, 100);

predicate is_not_parent(filter, filter, 100);

predicate constant_occurs("maxrev = max(rev)");
predicate happens_before("rev == maxrev","maxrev = max(rev)");
predicate happens_before("rev > maxrev","maxrev = max(rev)");
predicate happens_before("rev < maxrev","maxrev = max(rev)");
predicate happens_before("rev >= maxrev","maxrev = max(rev)");
predicate happens_before("rev <= maxrev","maxrev = max(rev)");
predicate is_not_parent(inner_join, inner_join3, 100);
predicate is_not_parent(inner_join, inner_join4, 100);
#predicate is_not_parent(inner_join, anti_join, 100);
predicate is_not_parent(inner_join3, inner_join, 100);
predicate is_not_parent(inner_join3, inner_join3, 100);
predicate is_not_parent(inner_join3, inner_join4, 100);
predicate is_not_parent(inner_join3, anti_join, 100);
predicate is_not_parent(inner_join4, inner_join, 100);
predicate is_not_parent(inner_join4, inner_join3, 100);
predicate is_not_parent(inner_join4, inner_join4, 100);
#predicate is_not_parent(inner_join4, anti_join, 100);
predicate is_not_parent(anti_join, anti_join, 100);
predicate is_not_parent(anti_join, inner_join, 100);
predicate is_not_parent(anti_join, inner_join4, 100);
predicate distinct_inputs(inner_join4);
predicate distinct_inputs(inner_join3);
predicate distinct_inputs(inner_join);
predicate distinct_inputs(anti_join);

Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "content")
Joining, by = c("id", "content")
Joining, by = c("id", "rev")
Joining, by = c("rev", "content")
Joining, by = "id"
Joining, by = "content"
Joining, by = c("rev", "content")
Joining, by = c("id", "rev")
Joining, by = "rev"
Joining, by = c("id", "rev")
Joining, by = c("id", "content")
Joining, by = "content"
Joining, by = c("rev", "content")
Joining, by = "id"
Joining, by = "rev"
Joining, by = c("id", "rev")
Joining, by = c("id", "content")
Joining, by = c("rev", "content")
Joining, by = c("id", "rev")
Joining, by = c("id", "content")
Joining, by = "rev"
Joining, by = c("rev", "content")
Joining, by = c("rev", "content")
Joining, by = c("id", "rev")
Joining, by = "content"
Joining, by = "id"
Joining, by = c("id", "content")
Joining, by = c("rev", "content")
Joining, by = c("id", "content")
Joining, by = c("id", "rev")
Joining, by = "rev"
Joining, by = "id"
Joining, by = c("rev", "content")
Joining, by = c("id", "content")
Joining, by = "content"
Joining, by = c("id", "rev")
Joining, by = c("rev", "content")
Joining, by = c("content", "id")
Joining, by = c("id", "content")
Joining, by = "id"
Joining, by = "rev"
Joining, by = c("id", "rev")
Joining, by = "content"
Joining, by = c("content", "rev")
Joining, by = c("rev", "id")
Joining, by = c("content", "rev")
Joining, by = c("content", "rev")
Joining, by = c("content", "rev")
Joining, by = "rev"
Joining, by = c("rev", "content")
Joining, by = "id"
Joining, by = c("rev", "id")
Joining, by = c("content", "id")
Joining, by = c("id", "content")
Joining, by = c("id", "rev")
Joining, by = "content"
Joining, by = c("rev", "id")
Joining, by = c("rev", "id")
Joining, by = c("id", "rev")
Joining, by = c("id", "rev")
Joining, by = c("content", "id")
Joining, by = c("content", "id")
Joining, by = c("rev", "content")
Joining, by = c("rev", "content")
Joining, by = c("id", "content")
Joining, by = c("id", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = c("id", "rev", "content")
Joining, by = "id"
Joining, by = c("id", "content")
Joining, by = "content"
Joining, by = c("id", "content")
Joining, by = c("content", "maxrev")
Joining, by = c("id", "content", "rev")
Joining, by = c("content", "maxrev")
Joining, by = c("id", "content")
Joining, by = c("id", "content", "maxrev")
Joining, by = c("id", "content")
Joining, by = c("content", "maxrev")
Joining, by = c("id", "content", "rev")
Joining, by = "maxrev"
Joining, by = c("id", "content", "rev")
Joining, by = c("id", "maxrev")
Joining, by = c("id", "content")
Joining, by = c("id", "maxrev")
Joining, by = c("id", "content")

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input0 <- read.table("tests-examples/scythe/dev_set/tables/01-1.txt", sep =",", header=T)
input0
input0 <- copy_to(con,input0)
expected_output <- read.table("tests-examples/scythe/dev_set/tables/01.out", sep =",", header=T)
expected_output

RET_DF852 <- input0 %>% group_by(id, content) %>% summarise(maxrev = max(rev))
RET_DF853 <- input0 %>% group_by(id) %>% summarise(maxrev = max(rev))
RET_DF854 <- inner_join(inner_join(RET_DF852, RET_DF853), input0)
RET_DF855 <- RET_DF854 %>% ungroup() %>% select(id,rev,content) %>% distinct()



+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

Joining, by = c("id", "maxrev")
Joining, by = c("id", "content")
SELECT DISTINCT `id`,
                `rev`,
                `content`
FROM
  (SELECT `id`,
          `content`,
          `maxrev`,
          `rev`
   FROM
     (SELECT `id`,
             `content`,
             `maxrev`
      FROM
        (SELECT `id`,
                `content`,
                MAX(`rev`) AS `maxrev`
         FROM `input0`
         GROUP BY `id`,
                  `content`) AS `LHS`
      INNER JOIN
        (SELECT `id`,
                MAX(`rev`) AS `maxrev`
         FROM `input0`
         GROUP BY `id`) AS `RHS` ON (`LHS`.`id` = `RHS`.`id`
                                     AND `LHS`.`maxrev` = `RHS`.`maxrev`)) AS `LHS`
   INNER JOIN `input0` AS `RHS` ON (`LHS`.`id` = `RHS`.`id`
                                    AND `LHS`.`content` = `RHS`.`content`))

