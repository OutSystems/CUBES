R[write to console]: 
Attaching package: ‘dplyr’


R[write to console]: The following objects are masked from ‘package:stats’:

    filter, lag


R[write to console]: The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


R[write to console]: 
Attaching package: ‘dbplyr’


R[write to console]: The following objects are masked from ‘package:dplyr’:

    ident, sql


# First, specify the types that will be used

enum Cols {
  "ID, code", "ID, product_name", "ID, product_variants_id", "ID, variants", "ID, variants_value", "code, ID", "code, product_name", "code, product_variants_id", "code, variants", "code, variants_value", "product_name, ID", "product_name, code", "product_name, product_variants_id", "product_name, variants", "product_name, variants_value", "product_variants_id, ID", "product_variants_id, code", "product_variants_id, product_name", "product_variants_id, variants", "product_variants_id, variants_value", "variants, ID", "variants, code", "variants, product_name", "variants, product_variants_id", "variants, variants_value", "variants_value, ID", "variants_value, code", "variants_value, product_name", "variants_value, product_variants_id", "variants_value, variants", "ID", "code", "product_name", "product_variants_id", "variants", "variants_value"
}

enum Col {
  "ID", "code", "product_name", "product_variants_id", "variants", "variants_value"
}

enum SelectCols{
  "code,product_variants_id,product_name,variants"
}

enum Distinct {
	"distinct", ""
}

enum FilterCondition{
"str_detect(variants|:hot)", "str_detect(variants_value|:hot)"
}




value Table {
  col: int;
  row: int;
}

value TableSelect {
  col: int;
  row: int;
}

value Empty;

# Next, specify the input/output of the synthesized program
program Squares(Table) -> TableSelect;

# Finally, specify the production rules
func empty: Empty -> Empty;

func inner_join: Table r -> Table a, Table b
{
  col(r) <= col(a) + col(b);
}

func inner_join3: Table r -> Table a, Table b, Table c
{
  col(r) < col(a) + col(b) + col(c);
}

func inner_join4: Table r -> Table a, Table b, Table c, Table d {
  col(r) < col(a) + col(b) + col(c) + col(d);
}

func anti_join: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func left_join: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a);
}

func bind_rows: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a) + row(b);
}

func intersect: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func select: TableSelect r -> Table a, SelectCols c, Distinct d{
	row(r) <= row(a);
	col(r) <= col(a);
}


func unite: Table r -> Table a, Col c, Col d {
 row(r) <= row(a);
 col(r) < col(a);
}


func filter: Table r -> Table a, FilterCondition f {
 row(r) <= row(a);
 col(r) == col(a);
}



predicate is_not_parent(inner_join3, filter, 100);
predicate is_not_parent(inner_join4, filter, 100);
predicate is_not_parent(filter, filter, 100);
predicate distinct_inputs(filter);


predicate constant_occurs("str_detect(variants|:hot),str_detect(variants_value|:hot)");
predicate is_not_parent(inner_join, inner_join3, 100);
predicate is_not_parent(inner_join, inner_join4, 100);
#predicate is_not_parent(inner_join, anti_join, 100);
predicate is_not_parent(inner_join3, inner_join, 100);
predicate is_not_parent(inner_join3, inner_join3, 100);
predicate is_not_parent(inner_join3, inner_join4, 100);
predicate is_not_parent(inner_join3, anti_join, 100);
predicate is_not_parent(inner_join4, inner_join, 100);
predicate is_not_parent(inner_join4, inner_join3, 100);
predicate is_not_parent(inner_join4, inner_join4, 100);
#predicate is_not_parent(inner_join4, anti_join, 100);
predicate is_not_parent(anti_join, anti_join, 100);
predicate is_not_parent(anti_join, inner_join, 100);
predicate is_not_parent(anti_join, inner_join4, 100);
predicate distinct_inputs(inner_join4);
predicate distinct_inputs(inner_join3);
predicate distinct_inputs(inner_join);
predicate distinct_inputs(anti_join);

Joining, by = c("ID", "code", "product_variants_id", "product_name", "variants", "variants_value")
Joining, by = c("ID", "code", "product_variants_id", "product_name", "variants", "variants_value")

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input0 <- read.table("tests-examples/scythe/recent_posts/tables/06-1.txt", sep =",", header=T)
input0
input0 <- copy_to(con,input0)
expected_output <- read.table("tests-examples/scythe/recent_posts/tables/06.out", sep =",", header=T)
expected_output

RET_DF138 <- unite(input0, variants, which(colnames(input0)=="variants"), variants_value, which(colnames(input0)=="variants_value"), sep=":")
RET_DF139 <- RET_DF138 %>% ungroup() %>% filter(str_detect(variants, ":hot"))
RET_DF140 <- RET_DF139 %>% ungroup() %>% select(code,product_variants_id,product_name,variants)



+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

