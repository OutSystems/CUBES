R[write to console]: 
Attaching package: ‘dplyr’


R[write to console]: The following objects are masked from ‘package:stats’:

    filter, lag


R[write to console]: The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


R[write to console]: 
Attaching package: ‘dbplyr’


R[write to console]: The following objects are masked from ‘package:dplyr’:

    ident, sql


# First, specify the types that will be used

enum Cols {
  "Course, CustomerID", "Course, Date", "Course, OrderID", "CustomerID, Course", "CustomerID, Date", "CustomerID, OrderID", "Date, Course", "Date, CustomerID", "Date, OrderID", "OrderID, Course", "OrderID, CustomerID", "OrderID, Date", "Course", "CustomerID", "Date", "OrderID"
}

enum Col {
  "Course", "CustomerID", "Date", "OrderID"
}

enum SelectCols{
  "Course,n"
}

enum Distinct {
	"distinct", ""
}

enum FilterCondition{
"Date == 10172016", "Date > 10172016", "Date < 10172016", "Date >= 10172016", "Date <= 10172016", "n == 10172016", "n > 10172016", "n < 10172016", "n >= 10172016", "n <= 10172016", "Date == 2", "Date > 2", "Date < 2", "Date >= 2", "Date <= 2", "n == 2", "n > 2", "n < 2", "n >= 2", "n <= 2"
}

enum SummariseCondition{
"n = n()"
}

enum Op{
 "|", "&"
}

value Table {
  col: int;
  row: int;
}

value TableSelect {
  col: int;
  row: int;
}

value Empty;

# Next, specify the input/output of the synthesized program
program Squares(Table) -> TableSelect;

# Finally, specify the production rules
func empty: Empty -> Empty;

func inner_join: Table r -> Table a, Table b
{
  col(r) <= col(a) + col(b);
}

func inner_join3: Table r -> Table a, Table b, Table c
{
  col(r) < col(a) + col(b) + col(c);
}

func inner_join4: Table r -> Table a, Table b, Table c, Table d {
  col(r) < col(a) + col(b) + col(c) + col(d);
}

func anti_join: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func left_join: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a);
}

func bind_rows: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a) + row(b);
}

func intersect: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func select: TableSelect r -> Table a, SelectCols c, Distinct d{
	row(r) <= row(a);
	col(r) <= col(a);
}




func filter: Table r -> Table a, FilterCondition f {
 row(r) <= row(a);
 col(r) == col(a);
}
func filters: Table r -> Table a, FilterCondition f, FilterCondition g, Op o {
 row(r) <= row(a);
 col(r) == col(a);
}


func summariseGrouped: Table r -> Table a, SummariseCondition s, Cols b {
 row(r) <= row(a);
 col(r) <= 3;
}

predicate is_not_parent(inner_join4, summariseGrouped, 100);
predicate is_not_parent(summariseGrouped, summariseGrouped, 100);
predicate distinct_filters(filters, 1, 2);

predicate is_not_parent(filters, filter, 100);
predicate is_not_parent(filter, filters, 100);
predicate is_not_parent(filter, filter, 100);
predicate is_not_parent(filters, filters, 100);

predicate constant_occurs("n = n()");
predicate constant_occurs("Date == 10172016,Date > 10172016,Date < 10172016,Date >= 10172016,Date <= 10172016,n == 10172016,n > 10172016,n < 10172016,n >= 10172016,n <= 10172016");
predicate constant_occurs("Date == 2,Date > 2,Date < 2,Date >= 2,Date <= 2,n == 2,n > 2,n < 2,n >= 2,n <= 2");
predicate happens_before("n == 10172016","n = n()");
predicate happens_before("n > 10172016","n = n()");
predicate happens_before("n < 10172016","n = n()");
predicate happens_before("n >= 10172016","n = n()");
predicate happens_before("n <= 10172016","n = n()");
predicate happens_before("n == 2","n = n()");
predicate happens_before("n > 2","n = n()");
predicate happens_before("n < 2","n = n()");
predicate happens_before("n >= 2","n = n()");
predicate happens_before("n <= 2","n = n()");
predicate is_not_parent(inner_join, inner_join3, 100);
predicate is_not_parent(inner_join, inner_join4, 100);
#predicate is_not_parent(inner_join, anti_join, 100);
predicate is_not_parent(inner_join3, inner_join, 100);
predicate is_not_parent(inner_join3, inner_join3, 100);
predicate is_not_parent(inner_join3, inner_join4, 100);
predicate is_not_parent(inner_join3, anti_join, 100);
predicate is_not_parent(inner_join4, inner_join, 100);
predicate is_not_parent(inner_join4, inner_join3, 100);
predicate is_not_parent(inner_join4, inner_join4, 100);
#predicate is_not_parent(inner_join4, anti_join, 100);
predicate is_not_parent(anti_join, anti_join, 100);
predicate is_not_parent(anti_join, inner_join, 100);
predicate is_not_parent(anti_join, inner_join4, 100);
predicate distinct_inputs(inner_join4);
predicate distinct_inputs(inner_join3);
predicate distinct_inputs(inner_join);
predicate distinct_inputs(anti_join);


------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input0 <- read.table("tests-examples/scythe/recent_posts/tables/18-1.txt", sep =",", header=T)
input0
input0 <- copy_to(con,input0)
expected_output <- read.table("tests-examples/scythe/recent_posts/tables/18.out", sep =",", header=T)
expected_output

RET_DF2357 <- input0 %>% group_by(Course, Date) %>% summarise(n = n())
RET_DF2358 <- RET_DF2357 %>% ungroup() %>% filter(Date < 10172016 | n >= 2)
RET_DF2359 <- RET_DF2358 %>% ungroup() %>% select(Course,n)



+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `Course`,
       `n`
FROM
  (SELECT `Course`,
          `Date`,
          COUNT() AS `n`
   FROM `input0`
   GROUP BY `Course`,
            `Date`)
WHERE (`Date` < 10172016.0
       OR `n` >= 2.0)

