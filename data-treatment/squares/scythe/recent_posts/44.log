R[write to console]: 
Attaching package: ‘dplyr’


R[write to console]: The following objects are masked from ‘package:stats’:

    filter, lag


R[write to console]: The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


R[write to console]: 
Attaching package: ‘dbplyr’


R[write to console]: The following objects are masked from ‘package:dplyr’:

    ident, sql


# First, specify the types that will be used

enum Cols {
  "Area, OriginalID", "Area, Part", "OriginalID, Area", "OriginalID, Part", "Part, Area", "Part, OriginalID", "Area", "OriginalID", "Part"
}

enum Col {
  "Area", "OriginalID", "Part"
}

enum SelectCols{
  "OriginalID,Area"
}

enum Distinct {
	"distinct", ""
}





value Table {
  col: int;
  row: int;
}

value TableSelect {
  col: int;
  row: int;
}

value Empty;

# Next, specify the input/output of the synthesized program
program Squares(Table, Table) -> TableSelect;

# Finally, specify the production rules
func empty: Empty -> Empty;

func inner_join: Table r -> Table a, Table b
{
  col(r) <= col(a) + col(b);
}

func inner_join3: Table r -> Table a, Table b, Table c
{
  col(r) < col(a) + col(b) + col(c);
}

func inner_join4: Table r -> Table a, Table b, Table c, Table d {
  col(r) < col(a) + col(b) + col(c) + col(d);
}

func anti_join: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func left_join: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a);
}

func bind_rows: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a) + row(b);
}

func intersect: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func select: TableSelect r -> Table a, SelectCols c, Distinct d{
	row(r) <= row(a);
	col(r) <= col(a);
}








predicate is_not_parent(inner_join, inner_join3, 100);
predicate is_not_parent(inner_join, inner_join4, 100);
#predicate is_not_parent(inner_join, anti_join, 100);
predicate is_not_parent(inner_join3, inner_join, 100);
predicate is_not_parent(inner_join3, inner_join3, 100);
predicate is_not_parent(inner_join3, inner_join4, 100);
predicate is_not_parent(inner_join3, anti_join, 100);
predicate is_not_parent(inner_join4, inner_join, 100);
predicate is_not_parent(inner_join4, inner_join3, 100);
predicate is_not_parent(inner_join4, inner_join4, 100);
#predicate is_not_parent(inner_join4, anti_join, 100);
predicate is_not_parent(anti_join, anti_join, 100);
predicate is_not_parent(anti_join, inner_join, 100);
predicate is_not_parent(anti_join, inner_join4, 100);
predicate distinct_inputs(inner_join4);
predicate distinct_inputs(inner_join3);
predicate distinct_inputs(inner_join);
predicate distinct_inputs(anti_join);

Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = c("Part", "OriginalID")
Joining, by = "OriginalID"
Joining, by = c("Part", "OriginalID")
Joining, by = "OriginalID"
Joining, by = c("Part", "OriginalID")
Joining, by = "OriginalID"
Joining, by = c("Part", "OriginalID")
Joining, by = "OriginalID"
Joining, by = "Part"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = c("Part", "OriginalID")
Joining, by = c("Part", "OriginalID")
Joining, by = "OriginalID"
Joining, by = c("Part", "OriginalID")
Joining, by = c("Part", "OriginalID")
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "Part"
Joining, by = "OriginalID"
Joining, by = c("Part", "OriginalID")
Joining, by = c("Part", "OriginalID")
Joining, by = "OriginalID"
Joining, by = "Part"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = c("Part", "OriginalID")
Joining, by = c("Part", "OriginalID")
Joining, by = "OriginalID"
Joining, by = "Part"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = c("Part", "OriginalID")
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = c("Part", "OriginalID")
Joining, by = c("OriginalID", "Area")
Joining, by = c("Part", "OriginalID")
Joining, by = c("OriginalID", "Area")
Joining, by = c("Part", "OriginalID")
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = c("OriginalID", "Part")
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = c("OriginalID", "Part")
Joining, by = c("OriginalID", "Area")
Joining, by = c("OriginalID", "Part")
Joining, by = c("OriginalID", "Area")
Joining, by = c("OriginalID", "Part")
Joining, by = c("OriginalID", "Area")
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = c("OriginalID", "Area")
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = c("OriginalID", "Area")
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = c("OriginalID", "Area")
Joining, by = c("Part", "OriginalID")
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = c("Part", "OriginalID")
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = c("Part", "OriginalID")
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = c("Part", "OriginalID")
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = c("Part", "OriginalID")
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = c("Part", "OriginalID")
Joining, by = c("OriginalID", "Area")
Joining, by = c("Part", "OriginalID")
Joining, by = c("OriginalID", "Area")
Joining, by = c("Part", "OriginalID")
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = c("OriginalID", "Area")
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"
Joining, by = "OriginalID"

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input0 <- read.table("tests-examples/scythe/recent_posts/tables/44-1.txt", sep =",", header=T)
input0
input0 <- copy_to(con,input0)
input1 <- read.table("tests-examples/scythe/recent_posts/tables/44-2.txt", sep =",", header=T)
input1
input1 <- copy_to(con,input1)
expected_output <- read.table("tests-examples/scythe/recent_posts/tables/44.out", sep =",", header=T)
expected_output

RET_DF284 <- anti_join(select(input0,OriginalID), select(input1, OriginalID))
RET_DF285 <- inner_join(RET_DF284, input0)
RET_DF286 <- RET_DF285 %>% ungroup() %>% select(OriginalID,Area) %>% distinct()



+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

Joining, by = "OriginalID"
Joining, by = "OriginalID"
SELECT DISTINCT `OriginalID`,
                `Area`
FROM
  (SELECT `OriginalID`,
          `Area`
   FROM
     (SELECT *
      FROM
        (SELECT `OriginalID`
         FROM `input0`) AS `LHS`
      WHERE NOT EXISTS
          (SELECT 1
           FROM
             (SELECT `OriginalID`
              FROM `input1`) AS `RHS`
           WHERE (`LHS`.`OriginalID` = `RHS`.`OriginalID`) )) AS `LHS`
   INNER JOIN `input0` AS `RHS` ON (`LHS`.`OriginalID` = `RHS`.`OriginalID`))

