R[write to console]: 
Attaching package: ‘dplyr’


R[write to console]: The following objects are masked from ‘package:stats’:

    filter, lag


R[write to console]: The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


R[write to console]: 
Attaching package: ‘dbplyr’


R[write to console]: The following objects are masked from ‘package:dplyr’:

    ident, sql


# First, specify the types that will be used

enum Cols {
  "company, id_demand", "company, id_invitation", "id_demand, company", "id_demand, id_invitation", "id_invitation, company", "id_invitation, id_demand", "company", "id_demand", "id_invitation"
}

enum Col {
  "company", "id_demand", "id_invitation"
}

enum SelectCols{
  "company,id_demand"
}

enum Distinct {
	"distinct", ""
}

enum FilterCondition{
"company == NULL[str]", "company != NULL[str]"
}




value Table {
  col: int;
  row: int;
}

value TableSelect {
  col: int;
  row: int;
}

value Empty;

# Next, specify the input/output of the synthesized program
program Squares(Table, Table) -> TableSelect;

# Finally, specify the production rules
func empty: Empty -> Empty;

func inner_join: Table r -> Table a, Table b
{
  col(r) <= col(a) + col(b);
}

func inner_join3: Table r -> Table a, Table b, Table c
{
  col(r) < col(a) + col(b) + col(c);
}

func inner_join4: Table r -> Table a, Table b, Table c, Table d {
  col(r) < col(a) + col(b) + col(c) + col(d);
}

func anti_join: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func left_join: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a);
}

func bind_rows: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a) + row(b);
}

func intersect: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func select: TableSelect r -> Table a, SelectCols c, Distinct d{
	row(r) <= row(a);
	col(r) <= col(a);
}




func filter: Table r -> Table a, FilterCondition f {
 row(r) <= row(a);
 col(r) == col(a);
}



predicate is_not_parent(inner_join3, filter, 100);
predicate is_not_parent(inner_join4, filter, 100);
predicate is_not_parent(filter, filter, 100);
predicate distinct_inputs(filter);


predicate constant_occurs("company == NULL[str],company != NULL[str]");
predicate is_not_parent(inner_join, inner_join3, 100);
predicate is_not_parent(inner_join, inner_join4, 100);
#predicate is_not_parent(inner_join, anti_join, 100);
predicate is_not_parent(inner_join3, inner_join, 100);
predicate is_not_parent(inner_join3, inner_join3, 100);
predicate is_not_parent(inner_join3, inner_join4, 100);
predicate is_not_parent(inner_join3, anti_join, 100);
predicate is_not_parent(inner_join4, inner_join, 100);
predicate is_not_parent(inner_join4, inner_join3, 100);
predicate is_not_parent(inner_join4, inner_join4, 100);
#predicate is_not_parent(inner_join4, anti_join, 100);
predicate is_not_parent(anti_join, anti_join, 100);
predicate is_not_parent(anti_join, inner_join, 100);
predicate is_not_parent(anti_join, inner_join4, 100);
predicate distinct_inputs(inner_join4);
predicate distinct_inputs(inner_join3);
predicate distinct_inputs(inner_join);
predicate distinct_inputs(anti_join);

Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")
Joining, by = c("id_invitation", "id_demand", "company")

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input0 <- read.table("tests-examples/scythe/recent_posts/tables/01-1.txt", sep =",", header=T)
input0
input0 <- copy_to(con,input0)
input1 <- read.table("tests-examples/scythe/recent_posts/tables/01-2.txt", sep =",", header=T)
input1
input1 <- copy_to(con,input1)
expected_output <- read.table("tests-examples/scythe/recent_posts/tables/01.out", sep =",", header=T)
expected_output

RET_DF119 <- bind_rows(input0, input1)
RET_DF120 <- RET_DF119 %>% ungroup() %>% filter(company != "NULL[str]")
RET_DF121 <- RET_DF120 %>% ungroup() %>% select(company,id_demand) %>% distinct()



+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

