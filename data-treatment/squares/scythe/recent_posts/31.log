R[write to console]: 
Attaching package: ‘dplyr’


R[write to console]: The following objects are masked from ‘package:stats’:

    filter, lag


R[write to console]: The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


R[write to console]: 
Attaching package: ‘dbplyr’


R[write to console]: The following objects are masked from ‘package:dplyr’:

    ident, sql


# First, specify the types that will be used

enum Cols {
  "accountID, channelID", "accountID, channelName", "accountID, role", "accountID, type", "channelID, accountID", "channelID, channelName", "channelID, role", "channelID, type", "channelName, accountID", "channelName, channelID", "channelName, role", "channelName, type", "role, accountID", "role, channelID", "role, channelName", "role, type", "type, accountID", "type, channelID", "type, channelName", "type, role", "accountID", "channelID", "channelName", "role", "type"
}

enum Col {
  "accountID", "channelID", "channelName", "role", "type"
}

enum SelectCols{
  "channelID,accountID,role"
}

enum Distinct {
	"distinct", ""
}

enum FilterCondition{
"type == public", "type != public", "accountID == Dave", "accountID != Dave"
}


enum Op{
 "|", "&"
}

value Table {
  col: int;
  row: int;
}

value TableSelect {
  col: int;
  row: int;
}

value Empty;

# Next, specify the input/output of the synthesized program
program Squares(Table, Table) -> TableSelect;

# Finally, specify the production rules
func empty: Empty -> Empty;

func inner_join: Table r -> Table a, Table b
{
  col(r) <= col(a) + col(b);
}

func inner_join3: Table r -> Table a, Table b, Table c
{
  col(r) < col(a) + col(b) + col(c);
}

func inner_join4: Table r -> Table a, Table b, Table c, Table d {
  col(r) < col(a) + col(b) + col(c) + col(d);
}

func anti_join: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func left_join: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a);
}

func bind_rows: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a) + row(b);
}

func intersect: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func select: TableSelect r -> Table a, SelectCols c, Distinct d{
	row(r) <= row(a);
	col(r) <= col(a);
}




func filter: Table r -> Table a, FilterCondition f {
 row(r) <= row(a);
 col(r) == col(a);
}
func filters: Table r -> Table a, FilterCondition f, FilterCondition g, Op o {
 row(r) <= row(a);
 col(r) == col(a);
}


predicate distinct_filters(filters, 1, 2);

predicate is_not_parent(filters, filter, 100);
predicate is_not_parent(filter, filters, 100);
predicate is_not_parent(filter, filter, 100);
predicate is_not_parent(filters, filters, 100);

predicate constant_occurs("type == public,type != public");
predicate constant_occurs("accountID == Dave,accountID != Dave");
predicate is_not_parent(inner_join, inner_join3, 100);
predicate is_not_parent(inner_join, inner_join4, 100);
#predicate is_not_parent(inner_join, anti_join, 100);
predicate is_not_parent(inner_join3, inner_join, 100);
predicate is_not_parent(inner_join3, inner_join3, 100);
predicate is_not_parent(inner_join3, inner_join4, 100);
predicate is_not_parent(inner_join3, anti_join, 100);
predicate is_not_parent(inner_join4, inner_join, 100);
predicate is_not_parent(inner_join4, inner_join3, 100);
predicate is_not_parent(inner_join4, inner_join4, 100);
#predicate is_not_parent(inner_join4, anti_join, 100);
predicate is_not_parent(anti_join, anti_join, 100);
predicate is_not_parent(anti_join, inner_join, 100);
predicate is_not_parent(anti_join, inner_join4, 100);
predicate distinct_inputs(inner_join4);
predicate distinct_inputs(inner_join3);
predicate distinct_inputs(inner_join);
predicate distinct_inputs(anti_join);

Joining, by = "channelID"
Joining, by = "channelID"
Joining, by = "channelID"
Joining, by = "channelID"
Joining, by = "channelID"

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input0 <- read.table("tests-examples/scythe/recent_posts/tables/31-1.txt", sep =",", header=T)
input0
input0 <- copy_to(con,input0)
input1 <- read.table("tests-examples/scythe/recent_posts/tables/31-2.txt", sep =",", header=T)
input1
input1 <- copy_to(con,input1)
expected_output <- read.table("tests-examples/scythe/recent_posts/tables/31.out", sep =",", header=T)
expected_output

RET_DF18 <- left_join(input0, input1)
RET_DF19 <- RET_DF18 %>% ungroup() %>% filter(accountID == "Dave" & type == "public")
RET_DF20 <- RET_DF19 %>% ungroup() %>% select(channelID,accountID,role) %>% distinct()



+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

Joining, by = "channelID"
SELECT DISTINCT `channelID`,
                `accountID`,
                `role`
FROM
  (SELECT `channelID`,
          `accountID`,
          `role`,
          `channelName`,
          `type`
   FROM `input0` AS `LHS`
   LEFT JOIN `input1` AS `RHS` ON (`LHS`.`channelID` = `RHS`.`channelID`))
WHERE (`accountID` = 'Dave'
       AND `type` = 'public')

