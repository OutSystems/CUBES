R[write to console]: 
Attaching package: ‘dplyr’


R[write to console]: The following objects are masked from ‘package:stats’:

    filter, lag


R[write to console]: The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


R[write to console]: 
Attaching package: ‘dbplyr’


R[write to console]: The following objects are masked from ‘package:dplyr’:

    ident, sql


# First, specify the types that will be used

enum Cols {
  "aid, aname", "aid, crusingrange", "aid, eid", "aid, ename", "aid, salary", "aname, aid", "aname, crusingrange", "aname, eid", "aname, ename", "aname, salary", "crusingrange, aid", "crusingrange, aname", "crusingrange, eid", "crusingrange, ename", "crusingrange, salary", "eid, aid", "eid, aname", "eid, crusingrange", "eid, ename", "eid, salary", "ename, aid", "ename, aname", "ename, crusingrange", "ename, eid", "ename, salary", "salary, aid", "salary, aname", "salary, crusingrange", "salary, eid", "salary, ename", "aid", "aname", "crusingrange", "eid", "ename", "salary"
}

enum Col {
  "aid", "aname", "crusingrange", "eid", "ename", "salary"
}

enum SelectCols{
  "aname"
}

enum Distinct {
	"distinct", ""
}

enum FilterCondition{
"salary == 80000", "salary > 80000", "salary < 80000", "salary >= 80000", "salary <= 80000"
}




value Table {
  col: int;
  row: int;
}

value TableSelect {
  col: int;
  row: int;
}

value Empty;

# Next, specify the input/output of the synthesized program
program Squares(Table, Table, Table) -> TableSelect;

# Finally, specify the production rules
func empty: Empty -> Empty;

func inner_join: Table r -> Table a, Table b
{
  col(r) <= col(a) + col(b);
}

func inner_join3: Table r -> Table a, Table b, Table c
{
  col(r) < col(a) + col(b) + col(c);
}

func inner_join4: Table r -> Table a, Table b, Table c, Table d {
  col(r) < col(a) + col(b) + col(c) + col(d);
}

func anti_join: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func left_join: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a);
}

func bind_rows: Table r ->  Table a, Table b{
  col(r) <= col(a) + col(b);
  row(r) == row(a) + row(b);
}

func intersect: Table r ->  Table a, Table b, Col c {
  #col(r) <= col(a) + col(b);
  col(r) == 1;
  row(r) <= row(a);
}

func select: TableSelect r -> Table a, SelectCols c, Distinct d{
	row(r) <= row(a);
	col(r) <= col(a);
}




func filter: Table r -> Table a, FilterCondition f {
 row(r) <= row(a);
 col(r) == col(a);
}



predicate is_not_parent(inner_join3, filter, 100);
predicate is_not_parent(inner_join4, filter, 100);
predicate is_not_parent(filter, filter, 100);
predicate distinct_inputs(filter);


predicate constant_occurs("salary == 80000,salary > 80000,salary < 80000,salary >= 80000,salary <= 80000");
predicate is_not_parent(inner_join, inner_join3, 100);
predicate is_not_parent(inner_join, inner_join4, 100);
#predicate is_not_parent(inner_join, anti_join, 100);
predicate is_not_parent(inner_join3, inner_join, 100);
predicate is_not_parent(inner_join3, inner_join3, 100);
predicate is_not_parent(inner_join3, inner_join4, 100);
predicate is_not_parent(inner_join3, anti_join, 100);
predicate is_not_parent(inner_join4, inner_join, 100);
predicate is_not_parent(inner_join4, inner_join3, 100);
predicate is_not_parent(inner_join4, inner_join4, 100);
#predicate is_not_parent(inner_join4, anti_join, 100);
predicate is_not_parent(anti_join, anti_join, 100);
predicate is_not_parent(anti_join, inner_join, 100);
predicate is_not_parent(anti_join, inner_join4, 100);
predicate distinct_inputs(inner_join4);
predicate distinct_inputs(inner_join3);
predicate distinct_inputs(inner_join);
predicate distinct_inputs(anti_join);

Joining, by = "aid"
Joining, by = "eid"
Joining, by = "aid"
Joining, by = "eid"

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input0 <- read.table("tests-examples/textbook/tables/aircraft.txt", sep =",", header=T)
input0
input0 <- copy_to(con,input0)
input1 <- read.table("tests-examples/textbook/tables/employees.txt", sep =",", header=T)
input1
input1 <- copy_to(con,input1)
input2 <- read.table("tests-examples/textbook/tables/certified.txt", sep =",", header=T)
input2
input2 <- copy_to(con,input2)
expected_output <- read.table("tests-examples/textbook/tables/24.out", sep =",", header=T)
expected_output

RET_DF8 <- inner_join(inner_join(input0, input2), input1)
RET_DF9 <- RET_DF8 %>% ungroup() %>% filter(salary > 80000)
RET_DF10 <- RET_DF9 %>% ungroup() %>% select(aname) %>% distinct()



+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

Joining, by = "aid"
Joining, by = "eid"
SELECT DISTINCT `aname`
FROM
  (SELECT `aid`,
          `aname`,
          `crusingrange`,
          `eid`,
          `ename`,
          `salary`
   FROM
     (SELECT `aid`,
             `aname`,
             `crusingrange`,
             `eid`
      FROM `input0` AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`aid` = `RHS`.`aid`)) AS `LHS`
   INNER JOIN `input1` AS `RHS` ON (`LHS`.`eid` = `RHS`.`eid`))
WHERE (`salary` > 80000.0)

