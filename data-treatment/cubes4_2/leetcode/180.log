[     3.348][MainProcess][INFO] Parsing specification...
[     3.353][MainProcess][DEBUG] Reading input files...
[     3.360][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/180.csv: ['int64', 'int64']
[     3.364][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/180_o.csv: ['int64']
[     3.392][MainProcess][DEBUG] Generating DSL...
[     4.260][MainProcess][INFO] Creating 2 processes
[     5.140][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     5.223][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[    47.787][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[    48.032][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    48.063][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    48.441][MainProcess][DEBUG] Increasing generator loc to 3
[    48.468][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[    48.531][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    48.705][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[   112.508][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([2]), l2 = summarise([2]))
[   112.763][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise([2]))
[   112.876][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[   112.989][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([2]), l2 = summarise([2]))
[   113.091][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([2]), l2 = mutate())
[   113.194][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise([2]))
[   113.295][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate())
[   113.396][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([2]), l2 = summarise([2]))
[   113.508][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([2]), l2 = mutate())
[   113.621][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise([2]))
[   113.732][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[   113.846][cube-solver-1][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join(), l2 = summarise([2]))
[   115.582][cube-solver-1][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join(), l2 = mutate())
[   116.404][cube-solver-1][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join3(), l2 = summarise([2]))
[   116.557][cube-solver-1][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join3(), l2 = mutate())
[   116.679][cube-solver-1][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join4(), l2 = summarise([2]))
[   116.792][cube-solver-1][DEBUG] Solving cube (l0 = summarise([2]), l1 = natural_join4(), l2 = mutate())
[   116.913][cube-solver-1][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = natural_join())
[   118.436][cube-solver-1][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = natural_join3())
[   118.811][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([2]), l2 = mutate())
[   119.092][cube-solver-0][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = natural_join4())
[   119.203][cube-solver-0][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = summarise([2]))
[   119.317][cube-solver-0][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = filter())
[   119.570][cube-solver-0][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = anti_join())
[   122.824][cube-solver-1][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = left_join())
[   123.836][cube-solver-0][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = union())
[   124.233][cube-solver-1][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = intersect())
[   125.315][cube-solver-0][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = semi_join())
[   126.182][cube-solver-1][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = cross_join())
[   126.580][cube-solver-0][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = mutate())
[   126.701][cube-solver-0][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = inner_join())
[   128.301][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([2]), l1 = summarise([2]), l2 = inner_join())
[   128.303][MainProcess][INFO] Statistics:
[   128.303][MainProcess][INFO] 	Generated cubes: 35
[   128.303][MainProcess][INFO] 	Attempted programs: 279
[   128.303][MainProcess][INFO] 		Rejected: 214
[   128.303][MainProcess][INFO] 		Failed: 64
[   128.304][MainProcess][INFO] 	Blacklist clauses: 2
[   128.304][MainProcess][DEBUG] Printing statistics for good programs of size 2
[   128.304][MainProcess][DEBUG] 	0: Counter({'mutate': 36, 'summarise': 16})
[   128.305][MainProcess][DEBUG] 	1: Counter({'mutate': 32, 'summarise': 20})
[   128.305][MainProcess][DEBUG] Printing statistics for good programs of size 3
[   128.306][MainProcess][DEBUG] 	0: Counter({'summarise': 1399})
[   128.307][MainProcess][DEBUG] 	1: Counter({'summarise': 1255, 'natural_join': 144})
[   128.308][MainProcess][DEBUG] 	2: Counter({'natural_join3': 384, 'anti_join': 208, 'natural_join': 120, 'left_join': 120, 'union': 120, 'cross_join': 96, 'inner_join': 87, 'summarise': 80, 'semi_join': 80, 'mutate': 64, 'intersect': 40})
[   128.308][MainProcess][INFO] Solution found: inner_join(summarise(@param0, lagNum = lag(Num), Id, Num), summarise(@param0, leadNum = lead(Num), Id, Num), 'Id' = 'Id','Id' = 'Num')
[   128.638][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/180.csv", col_types = cols(Id = col_integer(),Num = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/180_o.csv", col_types = cols(ConsecutiveNums = col_integer()))

df2 <- input1 %>% group_by(Id, Num) %>% summarise(lagNum = lag(Num)) %>% ungroup()
df3 <- input1 %>% group_by(Id, Num) %>% summarise(leadNum = lead(Num)) %>% ungroup()
df4 <- inner_join(df2, df3, by=c('Id' = 'Id','Id' = 'Num'), suffix = c('', '.other'))
out <- df4 %>% select(ConsecutiveNums = Id) %>% arrange(ConsecutiveNums)

Failed to generate SQL query
