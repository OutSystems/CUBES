[     3.481][MainProcess][INFO] Parsing specification...
[     3.486][MainProcess][DEBUG] Reading input files...
[     3.494][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/183_1.csv: ['int64', 'string']
[     3.498][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/183_2.csv: ['int64', 'int64']
[     3.502][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/183_o.csv: ['string']
[     3.534][MainProcess][DEBUG] Generating DSL...
[     3.551][MainProcess][INFO] Creating 2 processes
[     3.594][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.597][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.655][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.658][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.659][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.660][cube-solver-1][DEBUG] Solving cube (l0 = anti_join(),)
[     3.769][cube-solver-0][DEBUG] Solving cube (l0 = left_join(),)
[     3.857][cube-solver-0][DEBUG] Solving cube (l0 = union(),)
[     3.878][cube-solver-1][DEBUG] Solving cube (l0 = intersect(),)
[     3.964][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(),)
[     4.025][cube-solver-0][DEBUG] Solving cube (l0 = cross_join(),)
[     4.036][cube-solver-0][DEBUG] Solving cube (l0 = inner_join(),)
[     4.042][MainProcess][DEBUG] Increasing generator loc to 2
[     4.043][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     4.142][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]))
[     4.147][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     4.454][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.547][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect([6]))
[     4.554][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     4.968][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     5.170][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([2]))
[     5.234][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join([22]))
[     5.355][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join())
[     5.703][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3())
[     5.707][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     5.710][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([10]))
[     5.719][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     5.720][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     5.721][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect([6]))
[     5.724][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     5.725][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     5.728][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([22]))
[     5.736][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     5.737][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     5.738][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     5.740][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([10]))
[     5.744][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     5.745][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     5.746][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect([6]))
[     5.749][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     5.751][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     5.753][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([22]))
[     5.761][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     5.762][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     5.763][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     5.764][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join())
[     6.341][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join3())
[     6.351][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join4())
[     6.357][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([10]), l1 = anti_join([10]))
[     6.365][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([10]), l1 = left_join())
[     7.010][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([10]), l1 = union())
[     7.723][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([10]), l1 = intersect([6]))
[     8.736][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([10]), l1 = semi_join())
[     9.310][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([10]), l1 = cross_join([2]))
[     9.489][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([10]), l1 = inner_join([22]))
[    10.272][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join())
[    10.710][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join3())
[    11.588][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join4())
[    11.590][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = anti_join([10]))
[    13.120][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = left_join())
[    13.616][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = union())
[    14.098][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = intersect([6]))
[    14.841][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = semi_join())
[    15.098][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = cross_join([2]))
[    15.260][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = natural_join())
[    15.260][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = inner_join([22]))
[    15.672][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = natural_join3())
[    16.507][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = natural_join4())
[    16.508][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = anti_join([10]))
[    17.964][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = left_join())
[    18.446][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = union())
[    18.915][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = intersect([6]))
[    19.522][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = semi_join())
[    19.931][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = cross_join([2]))
[    20.005][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = inner_join([22]))
[    21.236][cube-solver-0][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join())
[    21.525][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = natural_join3())
[    22.449][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = natural_join4())
[    22.459][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = anti_join([10]))
[    23.271][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = left_join())
[    23.488][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = union())
[    23.793][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = intersect([8]))
[    24.257][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = semi_join())
[    24.459][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = cross_join([2]))
[    24.541][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = inner_join([22]))
[    25.424][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join())
[    25.808][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join3())
[    26.242][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join4())
[    26.246][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = anti_join([10]))
[    26.668][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = left_join())
[    27.109][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = union())
[    27.538][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = intersect([8]))
[    27.553][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = semi_join())
[    27.967][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = cross_join([2]))
[    28.090][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = inner_join([22]))
[    28.190][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([2]), l1 = natural_join())
[    28.214][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([4]), l1 = natural_join3())
[    28.217][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([4]), l1 = natural_join4())
[    28.219][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([4]), l1 = anti_join([10]))
[    28.225][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([4]), l1 = left_join())
[    28.228][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([4]), l1 = union())
[    28.231][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([4]), l1 = intersect([8]))
[    28.236][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([4]), l1 = semi_join())
[    28.238][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([4]), l1 = cross_join([4]))
[    28.243][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([4]), l1 = inner_join([22]))
[    28.253][cube-solver-1][DEBUG] Solving cube (l0 = inner_join([22]), l1 = natural_join())
[    30.795][cube-solver-1][DEBUG] Solving cube (l0 = inner_join([38]), l1 = natural_join3())
[    31.824][cube-solver-0][DEBUG] Solving cube (l0 = inner_join([38]), l1 = natural_join4())
[    31.851][cube-solver-0][DEBUG] Solving cube (l0 = inner_join([38]), l1 = anti_join([10]))
[    32.818][cube-solver-0][DEBUG] Found solution with cube (l0 = inner_join([38]), l1 = anti_join([10]))
[    32.820][MainProcess][INFO] Statistics:
[    32.820][MainProcess][INFO] 	Generated cubes: 104
[    32.820][MainProcess][INFO] 	Attempted programs: 2457
[    32.820][MainProcess][INFO] 		Rejected: 1195
[    32.820][MainProcess][INFO] 		Failed: 1261
[    32.821][MainProcess][INFO] 	Blacklist clauses: 60
[    32.821][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    32.821][MainProcess][DEBUG] 	0: Counter({'inner_join': 46, 'anti_join': 16, 'natural_join': 12, 'left_join': 12, 'union': 12, 'semi_join': 8})
[    32.822][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    32.827][MainProcess][DEBUG] 	0: Counter({'left_join': 1524, 'union': 1508, 'natural_join': 1008, 'anti_join': 996, 'semi_join': 962, 'inner_join': 813, 'intersect': 286})
[    32.831][MainProcess][DEBUG] 	1: Counter({'inner_join': 3556, 'natural_join3': 882, 'natural_join': 752, 'anti_join': 619, 'union': 436, 'left_join': 412, 'semi_join': 336, 'intersect': 104})
[    32.832][MainProcess][INFO] Solution found: anti_join(@param0, inner_join(@param1, @param0, 'CustomerId' = 'Id'), 'Name')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/183_1.csv", col_types = cols(Id = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/leetcode/tables/183_2.csv", col_types = cols(Id = col_integer(),CustomerId = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/leetcode/tables/183_o.csv", col_types = cols(Customers = col_character()))

df3 <- inner_join(input2, input1, by=c('CustomerId' = 'Id'), suffix = c('', '.other'))
df4 <- anti_join(input1, df3, by=c('Name'))
out <- df4 %>% select(Customers = Name) %>% arrange(Customers)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Name AS Customers
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT LHS.Id AS Id,
                  LHS.CustomerId AS CustomerId,
                  RHS.Name AS Name
           FROM input2 AS LHS
           INNER JOIN input1 AS RHS ON (LHS.CustomerId = RHS.Id)) AS RHS
        WHERE (LHS.Name = RHS.Name) ))
ORDER BY Customers
