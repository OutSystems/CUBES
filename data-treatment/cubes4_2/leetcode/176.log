[     1.696][MainProcess][INFO] Parsing specification...
[     1.700][MainProcess][DEBUG] Reading input files...
[     1.706][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/176.csv: ['int64', 'int64']
[     1.710][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/176_o.csv: ['int64']
[     1.735][MainProcess][DEBUG] Generating DSL...
[     1.911][MainProcess][INFO] Creating 2 processes
[     2.074][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.089][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     7.357][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     7.367][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     9.353][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     9.411][cube-solver-1][DEBUG] Found solution with cube (l0 = filter(), l1 = mutate())
[     9.413][MainProcess][INFO] Statistics:
[     9.414][MainProcess][INFO] 	Generated cubes: 3
[     9.414][MainProcess][INFO] 	Attempted programs: 74
[     9.414][MainProcess][INFO] 		Rejected: 49
[     9.414][MainProcess][INFO] 		Failed: 24
[     9.415][MainProcess][INFO] 	Blacklist clauses: 2
[     9.415][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     9.416][MainProcess][DEBUG] 	0: Counter({'filter': 224, 'summarise': 183})
[     9.416][MainProcess][DEBUG] 	1: Counter({'summarise': 216, 'filter': 183, 'mutate': 8})
[     9.416][MainProcess][INFO] Solution found: mutate(filter(@param0, Id == max(Salary) | Salary != max(Salary)), Salary = max(Salary))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/176.csv", col_types = cols(Id = col_integer(),Salary = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/176_o.csv", col_types = cols(SecondHighestSalary = col_integer()))

df2 <- input1 %>% filter(Id == max(Salary) | Salary != max(Salary))
df3 <- df2 %>% mutate(Salary = max(Salary))
out <- df3 %>% select(SecondHighestSalary = Salary) %>% distinct() %>% arrange(SecondHighestSalary)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT MAX(Salary) OVER () AS SecondHighestSalary
FROM
  (SELECT Id,
          Salary
   FROM
     (SELECT Id,
             Salary,
             MAX(Salary) OVER () AS zzz2,
                              MAX(Salary) OVER () AS zzz3
      FROM input1)
   WHERE (Id = zzz2
          OR Salary != zzz3))
ORDER BY SecondHighestSalary
