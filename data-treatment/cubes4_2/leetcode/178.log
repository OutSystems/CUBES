[     3.507][MainProcess][INFO] Parsing specification...
[     3.513][MainProcess][DEBUG] Reading input files...
[     3.521][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/178.csv: ['int64', 'float64']
[     3.527][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/178_o.csv: ['float64', 'int64']
[     3.559][MainProcess][DEBUG] Generating DSL...
[     3.818][MainProcess][INFO] Creating 2 processes
[     4.124][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     4.144][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     7.842][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     7.871][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     7.996][cube-solver-1][DEBUG] Found solution with cube (l0 = mutate(),)
[     7.998][MainProcess][INFO] Statistics:
[     7.999][MainProcess][INFO] 	Generated cubes: 2
[     7.999][MainProcess][INFO] 	Attempted programs: 2
[     7.999][MainProcess][INFO] 		Rejected: 1
[     7.999][MainProcess][INFO] 		Failed: 0
[     8.000][MainProcess][INFO] 	Blacklist clauses: 0
[     8.000][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     8.000][MainProcess][DEBUG] 	0: Counter({'mutate': 19, 'summarise': 8})
[     8.001][MainProcess][INFO] Solution found: mutate(@param0, rankdScore = dense_rank(desc(Score)))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/178.csv", col_types = cols(Id = col_integer(),Score = col_double()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/178_o.csv", col_types = cols(Score = col_double(),Rank = col_integer()))

df2 <- input1 %>% mutate(rankdScore = dense_rank(desc(Score)))
out <- df2 %>% select(Score, Rank = rankdScore) %>% arrange(Score)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Score,
       DENSE_RANK() OVER (
                          ORDER BY Score DESC) AS Rank
FROM input1
ORDER BY Score
