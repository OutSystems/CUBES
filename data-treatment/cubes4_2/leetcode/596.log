[     1.568][MainProcess][INFO] Parsing specification...
[     1.570][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.571][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.571][MainProcess][DEBUG] Reading input files...
[     1.578][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/596.csv: ['string', 'string']
[     1.582][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/596_o.csv: ['string']
[     1.607][MainProcess][DEBUG] Generating DSL...
[     1.625][MainProcess][INFO] Creating 2 processes
[     1.663][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.667][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.866][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     1.902][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     1.907][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.910][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.175][MainProcess][DEBUG] Increasing generator loc to 3
[     2.176][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.203][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[     2.205][MainProcess][INFO] Statistics:
[     2.205][MainProcess][INFO] 	Generated cubes: 5
[     2.206][MainProcess][INFO] 	Attempted programs: 15
[     2.206][MainProcess][INFO] 		Rejected: 14
[     2.206][MainProcess][INFO] 		Failed: 0
[     2.206][MainProcess][INFO] 	Blacklist clauses: 0
[     2.206][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.207][MainProcess][DEBUG] 	0: Counter({'summarise': 45, 'mutate': 30})
[     2.207][MainProcess][DEBUG] 	1: Counter({'filter': 75})
[     2.207][MainProcess][INFO] Solution found: filter(summarise(@param0, n = n(), class), n >= 5)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/596.csv", col_types = cols(student = col_character(),class = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/596_o.csv", col_types = cols(class = col_character()))

df2 <- input1 %>% group_by(class) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n >= 5)
out <- df3 %>% select(class) %>% arrange(class)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT CLASS
FROM
  (SELECT CLASS,
          COUNT() AS n
   FROM input1
   GROUP BY CLASS)
WHERE (n >= 5.0)
ORDER BY CLASS
