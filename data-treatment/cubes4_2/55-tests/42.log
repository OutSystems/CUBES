[     1.634][MainProcess][INFO] Parsing specification...
[     1.638][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.638][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.639][MainProcess][DEBUG] Reading input files...
[     1.646][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-1.txt: ['string', 'string', 'int64']
[     1.652][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-2.txt: ['string', 'string']
[     1.657][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/42.out: ['string', 'int64']
[     1.685][MainProcess][DEBUG] Generating DSL...
[     1.932][MainProcess][INFO] Creating 2 processes
[     2.200][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.211][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     9.978][cube-solver-0][WARNING] There is no solution for current loc (2).
[     9.978][cube-solver-1][WARNING] There is no solution for current loc (2).
[     9.979][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     9.979][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     9.998][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    10.000][MainProcess][DEBUG] Increasing generator loc to 3
[    10.013][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[    10.014][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    10.036][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    23.025][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = mutate())
[    23.113][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise())
[    23.163][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise())
[    25.897][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[    26.871][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = summarise())
[    26.894][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = mutate())
[    26.917][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise())
[    26.939][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate())
[    26.961][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = summarise())
[    26.984][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = mutate())
[    27.007][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise())
[    27.029][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[    27.052][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = summarise())
[    27.253][cube-solver-1][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join(), l2 = mutate())
[    31.001][cube-solver-1][DEBUG] Solving cube (l0 = summarise([25]), l1 = natural_join3(), l2 = summarise([25]))
[    37.049][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = summarise())
[    37.051][MainProcess][INFO] Statistics:
[    37.052][MainProcess][INFO] 	Generated cubes: 19
[    37.052][MainProcess][INFO] 	Attempted programs: 668
[    37.052][MainProcess][INFO] 		Rejected: 127
[    37.052][MainProcess][INFO] 		Failed: 540
[    37.052][MainProcess][INFO] 	Blacklist clauses: 25
[    37.052][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    37.055][MainProcess][DEBUG] 	0: Counter({'summarise': 1705, 'natural_join': 1144})
[    37.057][MainProcess][DEBUG] 	1: Counter({'natural_join': 861, 'natural_join3': 845, 'mutate': 592, 'summarise': 552})
[    37.059][MainProcess][DEBUG] 	2: Counter({'summarise': 1570, 'mutate': 1280})
[    37.059][MainProcess][INFO] Solution found: summarise(natural_join(@param1, summarise(@param0, meancost = mean(cost), P_id)), n = n(), S_name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/17-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/17-2.txt", col_types = cols(P_id = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/42.out", col_types = cols(S_name = col_character(),n = col_integer()))

df3 <- input1 %>% group_by(P_id) %>% summarise(meancost = mean(cost)) %>% ungroup()
df4 <- inner_join(input2, df3)
df5 <- df4 %>% group_by(S_name) %>% summarise(n = n()) %>% ungroup()
out <- df5 %>% select(S_name, n) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name,
       n
FROM
  (SELECT S_name,
          COUNT() AS n
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.S_name AS S_name,
             RHS.meancost AS meancost
      FROM input2 AS LHS
      INNER JOIN
        (SELECT P_id,
                AVG(cost) AS meancost
         FROM input1
         GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id))
   GROUP BY S_name)
ORDER BY S_name
