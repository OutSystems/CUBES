[     1.658][MainProcess][INFO] Parsing specification...
[     1.661][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.661][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.661][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.662][MainProcess][DEBUG] Reading input files...
[     1.670][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/15-1.txt: ['string', 'string']
[     1.675][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/15-2.txt: ['string', 'string']
[     1.680][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/15-3.txt: ['string', 'string']
[     1.683][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/15.out: ['string']
[     1.713][MainProcess][DEBUG] Generating DSL...
[     1.740][MainProcess][INFO] Creating 2 processes
[     1.795][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.801][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.304][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.305][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.310][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.314][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.316][MainProcess][DEBUG] Increasing generator loc to 3
[     2.318][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.321][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.322][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.324][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.294][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.298][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.300][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     3.303][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.307][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.317][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     3.321][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.324][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     3.430][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.432][MainProcess][INFO] Statistics:
[     3.432][MainProcess][INFO] 	Generated cubes: 12
[     3.432][MainProcess][INFO] 	Attempted programs: 6
[     3.432][MainProcess][INFO] 		Rejected: 1
[     3.432][MainProcess][INFO] 		Failed: 4
[     3.433][MainProcess][INFO] 	Blacklist clauses: 0
[     3.433][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.433][MainProcess][DEBUG] 	0: Counter({'natural_join3': 5})
[     3.433][MainProcess][DEBUG] 	1: Counter({'summarise': 5})
[     3.433][MainProcess][DEBUG] 	2: Counter({'filter': 5})
[     3.434][MainProcess][INFO] Solution found: filter(summarise(natural_join3(@param1, @param0, @param2), n = n(), S_name, color), color == 'red' & n == max(n))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/15-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/15-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/15-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/15.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input2, input1) %>% inner_join(input3)
df5 <- df4 %>% group_by(S_name, color) %>% summarise(n = n()) %>% ungroup()
df6 <- df5 %>% filter(color == 'red' & n == max(n))
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT `S_name`,
          `color`,
          `n`
   FROM
     (SELECT `S_name`,
             `color`,
             `n`,
             MAX(`n`) OVER () AS `zzz4`
      FROM
        (SELECT `S_name`,
                `color`,
                COUNT() AS `n`
         FROM
           (SELECT `LHS`.`P_id` AS `P_id`,
                   `LHS`.`color` AS `color`,
                   `LHS`.`S_key` AS `S_key`,
                   `RHS`.`S_name` AS `S_name`
            FROM
              (SELECT `LHS`.`P_id` AS `P_id`,
                      `LHS`.`color` AS `color`,
                      `RHS`.`S_key` AS `S_key`
               FROM `input2` AS `LHS`
               INNER JOIN `input1` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
            INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
         GROUP BY `S_name`,
                  `color`))
   WHERE (`color` = 'red'
          AND n = zzz4))
ORDER BY S_name
