[     1.583][MainProcess][INFO] Parsing specification...
[     1.586][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.587][MainProcess][DEBUG] Reading input files...
[     1.592][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.596][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.599][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.603][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/37.out: ['string']
[     1.632][MainProcess][DEBUG] Generating DSL...
[     1.654][MainProcess][INFO] Creating 2 processes
[     1.699][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.701][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.866][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.866][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.867][cube-solver-1][WARNING] There is no solution for current loc (1).
[     1.867][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.867][MainProcess][DEBUG] Increasing generator loc to 2
[     1.868][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.868][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.270][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.272][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.279][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.285][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.345][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise())
[     2.347][MainProcess][INFO] Statistics:
[     2.347][MainProcess][INFO] 	Generated cubes: 6
[     2.348][MainProcess][INFO] 	Attempted programs: 2
[     2.348][MainProcess][INFO] 		Rejected: 1
[     2.348][MainProcess][INFO] 		Failed: 0
[     2.348][MainProcess][INFO] 	Blacklist clauses: 0
[     2.348][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.349][MainProcess][DEBUG] 	0: Counter({'natural_join3': 13})
[     2.349][MainProcess][DEBUG] 	1: Counter({'summarise': 7, 'mutate': 6})
[     2.349][MainProcess][INFO] Solution found: summarise(natural_join3(@param1, @param0, @param2), n = n(), S_key, S_name)
[     2.358][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = mutate())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/37.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input2, input1) %>% inner_join(input3)
df5 <- df4 %>% group_by(S_key, S_name) %>% summarise(n = n()) %>% ungroup()
out <- df5 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT S_key,
          S_name,
          COUNT() AS n
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.color AS color,
             LHS.S_key AS S_key,
             RHS.S_name AS S_name
      FROM
        (SELECT LHS.P_id AS P_id,
                LHS.color AS color,
                RHS.S_key AS S_key
         FROM input2 AS LHS
         INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
      INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
   GROUP BY S_key,
            S_name)
ORDER BY S_name
