[     3.170][MainProcess][INFO] Parsing specification...
[     3.175][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.175][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.176][MainProcess][DEBUG] Reading input files...
[     3.183][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1-1.txt: ['string', 'string']
[     3.189][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1-2.txt: ['string', 'string']
[     3.194][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1-3.txt: ['string', 'string']
[     3.200][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1-4.txt: ['string', 'string', 'string']
[     3.204][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/1.out: ['string']
[     3.238][MainProcess][DEBUG] Generating DSL...
[     3.290][MainProcess][INFO] Creating 2 processes
[     3.300][MainProcess][DEBUG] Increasing generator loc to 2
[     3.366][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.380][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     4.062][cube-solver-0][WARNING] There is no solution for current loc (1).
[     4.063][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     4.069][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     5.019][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     5.031][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     5.712][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     5.720][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     5.724][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     5.731][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4([3]))
[     6.961][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join4(), l1 = filter())
[     6.962][MainProcess][INFO] Statistics:
[     6.963][MainProcess][INFO] 	Generated cubes: 7
[     6.963][MainProcess][INFO] 	Attempted programs: 39
[     6.963][MainProcess][INFO] 		Rejected: 25
[     6.963][MainProcess][INFO] 		Failed: 13
[     6.963][MainProcess][INFO] 	Blacklist clauses: 3
[     6.963][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     6.964][MainProcess][DEBUG] 	0: Counter({'natural_join4': 309})
[     6.964][MainProcess][DEBUG] 	1: Counter({'filter': 309})
[     6.964][MainProcess][INFO] Solution found: filter(natural_join4(@param0, @param2, @param1, @param3), F_name == 'faculty1' & level == 'JR')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/1-1.txt", col_types = cols(C_name = col_character(),F_key = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/1-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/1-3.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input3 <- copy_to(con, input3)
input4 <- read_csv("tests-examples/55-tests/tables/1-4.txt", col_types = cols(S_key = col_character(),S_name = col_character(),level = col_character()))
input4 <- copy_to(con, input4)
expected_output <- read_csv("tests-examples/55-tests/tables/1.out", col_types = cols(S_name = col_character()))

df5 <- inner_join(input1, input3) %>% inner_join(input2) %>% inner_join(input4)
df6 <- df5 %>% filter(F_name == 'faculty1' & level == 'JR')
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT `LHS`.`C_name` AS `C_name`,
          `LHS`.`F_key` AS `F_key`,
          `LHS`.`F_name` AS `F_name`,
          `LHS`.`S_key` AS `S_key`,
          `RHS`.`S_name` AS `S_name`,
          `RHS`.`level` AS `level`
   FROM
     (SELECT `LHS`.`C_name` AS `C_name`,
             `LHS`.`F_key` AS `F_key`,
             `LHS`.`F_name` AS `F_name`,
             `RHS`.`S_key` AS `S_key`
      FROM
        (SELECT `LHS`.`C_name` AS `C_name`,
                `LHS`.`F_key` AS `F_key`,
                `RHS`.`F_name` AS `F_name`
         FROM `input1` AS `LHS`
         INNER JOIN `input3` AS `RHS` ON (`LHS`.`F_key` = `RHS`.`F_key`)) AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`C_name` = `RHS`.`C_name`)) AS `LHS`
   INNER JOIN `input4` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
WHERE (`F_name` = 'faculty1'
       AND `level` = 'JR')
ORDER BY S_name
