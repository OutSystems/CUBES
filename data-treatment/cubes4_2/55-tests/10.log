[     3.344][MainProcess][INFO] Parsing specification...
[     3.348][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.349][MainProcess][DEBUG] Reading input files...
[     3.356][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10-1.txt: ['string', 'string']
[     3.361][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10-2.txt: ['string', 'string']
[     3.365][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10.out: ['string']
[     3.396][MainProcess][DEBUG] Generating DSL...
[     3.420][MainProcess][INFO] Creating 2 processes
[     3.464][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.468][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.718][cube-solver-1][WARNING] There is no solution for current loc (2).
[     3.719][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.724][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.726][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     3.728][MainProcess][DEBUG] Increasing generator loc to 3
[     3.729][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.743][cube-solver-0][WARNING] There is no solution for current loc (2).
[     3.744][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.745][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.200][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     4.202][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     4.204][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     4.223][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     4.261][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     4.263][MainProcess][INFO] Statistics:
[     4.263][MainProcess][INFO] 	Generated cubes: 8
[     4.263][MainProcess][INFO] 	Attempted programs: 1
[     4.263][MainProcess][INFO] 		Rejected: 0
[     4.263][MainProcess][INFO] 		Failed: 0
[     4.264][MainProcess][INFO] 	Blacklist clauses: 0
[     4.264][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     4.264][MainProcess][DEBUG] 	0: Counter({'natural_join': 7})
[     4.265][MainProcess][DEBUG] 	1: Counter({'mutate': 6, 'summarise': 1})
[     4.265][MainProcess][DEBUG] 	2: Counter({'filter': 7})
[     4.265][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param1, @param0), n = n(), S_name), n == max(n))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/10-1.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/10-2.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/10.out", col_types = cols(S_name = col_character()))

df3 <- inner_join(input2, input1)
df4 <- df3 %>% group_by(S_name) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(n == max(n))
out <- df5 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT S_name,
          n
   FROM
     (SELECT S_name,
             n,
             MAX(n) OVER () AS zzz3
      FROM
        (SELECT S_name,
                COUNT() AS n
         FROM
           (SELECT LHS.S_key AS S_key,
                   LHS.S_name AS S_name,
                   RHS.C_name AS C_name
            FROM input2 AS LHS
            INNER JOIN input1 AS RHS ON (LHS.S_key = RHS.S_key))
         GROUP BY S_name))
   WHERE (n = zzz3))
ORDER BY S_name
