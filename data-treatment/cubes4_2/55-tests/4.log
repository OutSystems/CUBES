[     1.748][MainProcess][INFO] Parsing specification...
[     1.751][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.751][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.752][MainProcess][DEBUG] Reading input files...
[     1.760][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/4-1.txt: ['string', 'string']
[     1.765][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/4-2.txt: ['string', 'string']
[     1.770][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/4-3.txt: ['string', 'string']
[     1.774][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/4.out: ['string']
[     1.805][MainProcess][DEBUG] Generating DSL...
[     1.830][MainProcess][INFO] Creating 2 processes
[     1.877][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.880][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.296][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.297][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.298][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.299][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.300][MainProcess][DEBUG] Increasing generator loc to 3
[     2.301][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.333][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.334][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.337][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.008][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.017][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.021][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     3.023][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.052][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.055][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     3.057][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.059][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     4.399][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     4.400][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     4.402][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     4.404][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     4.406][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     4.409][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3([2]), l2 = filter())
[     4.838][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     4.839][MainProcess][INFO] Statistics:
[     4.840][MainProcess][INFO] 	Generated cubes: 18
[     4.840][MainProcess][INFO] 	Attempted programs: 97
[     4.840][MainProcess][INFO] 		Rejected: 65
[     4.840][MainProcess][INFO] 		Failed: 31
[     4.840][MainProcess][INFO] 	Blacklist clauses: 2
[     4.840][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     4.841][MainProcess][DEBUG] 	0: Counter({'natural_join3': 391, 'summarise': 10})
[     4.841][MainProcess][DEBUG] 	1: Counter({'mutate': 200, 'summarise': 191, 'natural_join3': 10})
[     4.841][MainProcess][DEBUG] 	2: Counter({'filter': 401})
[     4.842][MainProcess][INFO] Solution found: filter(summarise(natural_join3(@param1, @param2, @param0), n = n(), S_name, meets_at), n == 2)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/4-1.txt", col_types = cols(C_name = col_character(),meets_at = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/4-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/4-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/4.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input2, input3) %>% inner_join(input1)
df5 <- df4 %>% group_by(S_name, meets_at) %>% summarise(n = n()) %>% ungroup()
df6 <- df5 %>% filter(n == 2)
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT S_name,
          meets_at,
          COUNT() AS n
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.C_name AS C_name,
             LHS.S_name AS S_name,
             RHS.meets_at AS meets_at
      FROM
        (SELECT LHS.S_key AS S_key,
                LHS.C_name AS C_name,
                RHS.S_name AS S_name
         FROM input2 AS LHS
         INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.C_name = RHS.C_name))
   GROUP BY S_name,
            meets_at)
WHERE (n = 2.0)
ORDER BY S_name
