[     1.581][MainProcess][INFO] Parsing specification...
[     1.584][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.584][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.585][MainProcess][DEBUG] Reading input files...
[     1.592][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.596][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.601][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.606][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/35.out: ['string']
[     1.635][MainProcess][DEBUG] Generating DSL...
[     1.659][MainProcess][INFO] Creating 2 processes
[     1.705][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.707][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.125][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.125][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.127][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.128][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.128][MainProcess][DEBUG] Increasing generator loc to 3
[     2.129][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.135][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.136][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.139][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.828][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.831][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.833][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.835][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.869][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.873][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.876][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.879][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     4.264][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     4.267][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     4.270][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     4.273][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     4.276][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     4.279][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3([2]), l2 = filter())
[    11.211][cube-solver-1][DEBUG] Solving cube (l0 = summarise([21]), l1 = natural_join4(), l2 = filter())
[    11.227][cube-solver-1][DEBUG] Solving cube (l0 = summarise([21]), l1 = summarise([21]), l2 = filter())
[    11.242][cube-solver-1][DEBUG] Solving cube (l0 = summarise([21]), l1 = filter(), l2 = natural_join())
[    11.251][cube-solver-1][DEBUG] Solving cube (l0 = summarise([21]), l1 = filter(), l2 = natural_join3([2]))
[    16.669][cube-solver-0][DEBUG] Solving cube (l0 = summarise([21]), l1 = filter([15]), l2 = natural_join4())
[    21.393][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([21]), l1 = filter([15]), l2 = natural_join4())
[    21.398][MainProcess][INFO] Statistics:
[    21.398][MainProcess][INFO] 	Generated cubes: 23
[    21.398][MainProcess][INFO] 	Attempted programs: 1410
[    21.399][MainProcess][INFO] 		Rejected: 369
[    21.399][MainProcess][INFO] 		Failed: 1040
[    21.399][MainProcess][INFO] 	Blacklist clauses: 38
[    21.399][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    21.402][MainProcess][DEBUG] 	0: Counter({'summarise': 2164, 'natural_join3': 1240})
[    21.404][MainProcess][DEBUG] 	1: Counter({'filter': 1244, 'summarise': 1040, 'natural_join3': 920, 'mutate': 200})
[    21.406][MainProcess][DEBUG] 	2: Counter({'filter': 2160, 'natural_join3': 745, 'natural_join4': 499})
[    21.406][MainProcess][INFO] Solution found: natural_join4(@param0, filter(summarise(@param0, n = n(), P_id), n == 2), @param1, @param2)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/35.out", col_types = cols(S_name = col_character()))

df4 <- input1 %>% group_by(P_id) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(n == 2)
df6 <- inner_join(input1, df5) %>% inner_join(input2) %>% inner_join(input3)
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.P_id AS P_id,
          LHS.n AS n,
          LHS.color AS color,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.P_id AS P_id,
             LHS.n AS n,
             RHS.color AS color
      FROM
        (SELECT LHS.S_key AS S_key,
                LHS.P_id AS P_id,
                RHS.n AS n
         FROM input1 AS LHS
         INNER JOIN
           (SELECT *
            FROM
              (SELECT P_id,
                      COUNT() AS n
               FROM input1
               GROUP BY P_id)
            WHERE (n = 2.0)) AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
      INNER JOIN input2 AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
   INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_name
