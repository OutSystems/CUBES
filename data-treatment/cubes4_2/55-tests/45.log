[     1.651][MainProcess][INFO] Parsing specification...
[     1.655][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.655][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.655][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.656][MainProcess][DEBUG] Reading input files...
[     1.665][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/9-1.txt: ['string', 'string', 'string']
[     1.670][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/9-2.txt: ['string', 'string']
[     1.674][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/45.out: ['string', 'string']
[     1.702][MainProcess][DEBUG] Generating DSL...
[     1.729][MainProcess][INFO] Creating 2 processes
[     1.774][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.778][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.237][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.238][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.239][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.241][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.242][MainProcess][DEBUG] Increasing generator loc to 3
[     2.243][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.249][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.250][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.255][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.973][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.141][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.731][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.734][MainProcess][INFO] Statistics:
[     3.734][MainProcess][INFO] 	Generated cubes: 6
[     3.734][MainProcess][INFO] 	Attempted programs: 25
[     3.734][MainProcess][INFO] 		Rejected: 9
[     3.734][MainProcess][INFO] 		Failed: 15
[     3.735][MainProcess][INFO] 	Blacklist clauses: 0
[     3.735][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.735][MainProcess][DEBUG] 	0: Counter({'natural_join': 162})
[     3.736][MainProcess][DEBUG] 	1: Counter({'filter': 85, 'summarise': 77})
[     3.736][MainProcess][DEBUG] 	2: Counter({'summarise': 85, 'filter': 77})
[     3.736][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param0, @param1), n = n(), F_name, Room), Room == 'R128')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/9-1.txt", col_types = cols(ID_class = col_character(),ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/9-2.txt", col_types = cols(ID_key = col_character(),F_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/45.out", col_types = cols(F_name = col_character(),Room = col_character()))

df3 <- inner_join(input1, input2)
df4 <- df3 %>% group_by(F_name, Room) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(Room == 'R128')
out <- df5 %>% select(F_name, Room) %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `F_name`,
       `Room`
FROM
  (SELECT `F_name`,
          `Room`,
          COUNT() AS `n`
   FROM
     (SELECT `LHS`.`ID_class` AS `ID_class`,
             `LHS`.`ID_key` AS `ID_key`,
             `LHS`.`Room` AS `Room`,
             `RHS`.`F_name` AS `F_name`
      FROM `input1` AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
   GROUP BY `F_name`,
            `Room`)
WHERE (`Room` = 'R128')
ORDER BY F_name
