[     1.670][MainProcess][INFO] Parsing specification...
[     1.673][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.674][MainProcess][DEBUG] Reading input files...
[     1.681][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.686][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.691][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.695][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/51.out: ['string', 'int64']
[     1.726][MainProcess][DEBUG] Generating DSL...
[     1.748][MainProcess][INFO] Creating 2 processes
[     1.793][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.796][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.962][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.963][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.964][MainProcess][DEBUG] Increasing generator loc to 2
[     1.964][cube-solver-1][WARNING] There is no solution for current loc (1).
[     1.964][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.965][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     1.966][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.376][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.377][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.391][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.396][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     3.408][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     3.410][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     3.411][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     3.413][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3([2]))
[     4.945][cube-solver-0][DEBUG] Solving cube (l0 = summarise([17]), l1 = natural_join4())
[     4.965][cube-solver-0][DEBUG] Solving cube (l0 = summarise([17]), l1 = summarise([17]))
[     4.982][cube-solver-0][DEBUG] Solving cube (l0 = summarise([17]), l1 = anti_join())
[     4.991][cube-solver-0][DEBUG] Solving cube (l0 = summarise([17]), l1 = left_join())
[     5.001][cube-solver-0][DEBUG] Solving cube (l0 = summarise([17]), l1 = union())
[     5.010][cube-solver-0][DEBUG] Solving cube (l0 = summarise([17]), l1 = intersect())
[     5.022][cube-solver-0][DEBUG] Solving cube (l0 = summarise([17]), l1 = semi_join())
[     5.032][cube-solver-0][DEBUG] Solving cube (l0 = summarise([18]), l1 = cross_join())
[     5.043][cube-solver-0][DEBUG] Solving cube (l0 = summarise([18]), l1 = mutate())
[     5.053][cube-solver-0][DEBUG] Solving cube (l0 = summarise([18]), l1 = inner_join())
[     5.064][cube-solver-0][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([18]))
[     5.074][cube-solver-0][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     5.076][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([18]))
[     5.085][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     5.088][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = summarise([18]))
[     5.097][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     5.099][cube-solver-0][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([18]))
[     5.111][cube-solver-0][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     5.115][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([18]))
[     5.125][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     5.127][cube-solver-0][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise([18]))
[     5.140][cube-solver-0][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[     5.142][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     5.144][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3([2]))
[     7.915][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     8.248][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = summarise([21]))
[     8.257][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     8.258][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     8.259][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     8.260][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     8.261][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     8.262][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join())
[     8.264][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     8.265][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[     8.267][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise([21]))
[     8.274][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[     8.275][MainProcess][DEBUG] Increasing generator loc to 3
[     8.276][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     8.875][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([21]), l2 = natural_join())
[    15.655][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = natural_join3([2]))
[    18.384][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    19.173][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = natural_join4())
[    19.192][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = summarise([21]))
[    19.213][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = anti_join())
[    19.451][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join([2]), l1 = summarise([21]), l2 = natural_join3([2]))
[    19.452][MainProcess][INFO] Statistics:
[    19.452][MainProcess][INFO] 	Generated cubes: 51
[    19.452][MainProcess][INFO] 	Attempted programs: 554
[    19.453][MainProcess][INFO] 		Rejected: 180
[    19.453][MainProcess][INFO] 		Failed: 373
[    19.453][MainProcess][INFO] 	Blacklist clauses: 25
[    19.453][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    19.456][MainProcess][DEBUG] 	0: Counter({'mutate': 2400, 'summarise': 672, 'natural_join3': 512})
[    19.459][MainProcess][DEBUG] 	1: Counter({'natural_join4': 1920, 'natural_join3': 1152, 'summarise': 352, 'mutate': 160})
[    19.459][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    19.460][MainProcess][DEBUG] 	0: Counter({'natural_join': 1604})
[    19.462][MainProcess][DEBUG] 	1: Counter({'summarise': 1604})
[    19.463][MainProcess][DEBUG] 	2: Counter({'natural_join': 992, 'natural_join3': 600, 'anti_join': 12})
[    19.463][MainProcess][INFO] Solution found: natural_join3(@param0, summarise(natural_join(@param0, @param1), n = n(), P_id), @param2)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/51.out", col_types = cols(S_name = col_character(),n = col_integer()))

df4 <- inner_join(input1, input2)
df5 <- df4 %>% group_by(P_id) %>% summarise(n = n()) %>% ungroup()
df6 <- inner_join(input1, df5) %>% inner_join(input3)
out <- df6 %>% select(S_name, n) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT S_name,
                n
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.P_id AS P_id,
          LHS.n AS n,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.P_id AS P_id,
             RHS.n AS n
      FROM input1 AS LHS
      INNER JOIN
        (SELECT P_id,
                COUNT() AS n
         FROM
           (SELECT LHS.S_key AS S_key,
                   LHS.P_id AS P_id,
                   RHS.color AS color
            FROM input1 AS LHS
            INNER JOIN input2 AS RHS ON (LHS.P_id = RHS.P_id))
         GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
   INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_name
