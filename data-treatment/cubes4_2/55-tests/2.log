[     3.014][MainProcess][INFO] Parsing specification...
[     3.019][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.019][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.019][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.020][MainProcess][DEBUG] Reading input files...
[     3.032][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2-1.txt: ['string', 'string']
[     3.037][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2-2.txt: ['string', 'string']
[     3.042][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2-3.txt: ['string', 'string']
[     3.047][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2-4.txt: ['string', 'string', 'int64']
[     3.050][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/2.out: ['int64']
[     3.085][MainProcess][DEBUG] Generating DSL...
[     3.380][MainProcess][INFO] Creating 2 processes
[     3.690][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.697][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[    16.820][cube-solver-1][WARNING] There is no solution for current loc (2).
[    16.821][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[    16.846][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    16.866][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    16.868][MainProcess][DEBUG] Increasing generator loc to 3
[    16.887][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    16.993][cube-solver-0][WARNING] There is no solution for current loc (2).
[    16.994][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[    17.038][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    34.928][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[    35.009][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[    35.057][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[    35.098][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[    35.153][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[    35.211][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[    35.257][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[    35.281][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[    35.306][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[    35.457][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4([1]), l1 = filter(), l2 = summarise())
[    40.203][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join4([1]), l1 = filter(), l2 = summarise())
[    40.204][MainProcess][INFO] Statistics:
[    40.205][MainProcess][INFO] 	Generated cubes: 14
[    40.205][MainProcess][INFO] 	Attempted programs: 184
[    40.205][MainProcess][INFO] 		Rejected: 34
[    40.205][MainProcess][INFO] 		Failed: 149
[    40.205][MainProcess][INFO] 	Blacklist clauses: 1
[    40.205][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    40.206][MainProcess][DEBUG] 	0: Counter({'natural_join4': 201})
[    40.207][MainProcess][DEBUG] 	1: Counter({'filter': 183, 'summarise': 18})
[    40.207][MainProcess][DEBUG] 	2: Counter({'summarise': 183, 'filter': 18})
[    40.207][MainProcess][INFO] Solution found: summarise(filter(natural_join4(@param1, @param0, @param2, @param3), F_name == 'faculty1' & major != 'History'), age = max(age), F_key, F_name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/2-1.txt", col_types = cols(C_name = col_character(),F_key = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/2-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/2-3.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input3 <- copy_to(con, input3)
input4 <- read_csv("tests-examples/55-tests/tables/2-4.txt", col_types = cols(S_key = col_character(),major = col_character(),age = col_integer()))
input4 <- copy_to(con, input4)
expected_output <- read_csv("tests-examples/55-tests/tables/2.out", col_types = cols(maxage = col_integer()))

df5 <- inner_join(input2, input1) %>% inner_join(input3) %>% inner_join(input4)
df6 <- df5 %>% filter(F_name == 'faculty1' & major != 'History')
df7 <- df6 %>% group_by(F_key, F_name) %>% summarise(age = max(age)) %>% ungroup()
out <- df7 %>% select(maxage = age) %>% arrange(maxage)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `age` AS `maxage`
FROM
  (SELECT `F_key`,
          `F_name`,
          MAX(`age`) AS `age`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`C_name` AS `C_name`,
                `LHS`.`F_key` AS `F_key`,
                `LHS`.`F_name` AS `F_name`,
                `RHS`.`major` AS `major`,
                `RHS`.`age` AS `age`
         FROM
           (SELECT `LHS`.`S_key` AS `S_key`,
                   `LHS`.`C_name` AS `C_name`,
                   `LHS`.`F_key` AS `F_key`,
                   `RHS`.`F_name` AS `F_name`
            FROM
              (SELECT `LHS`.`S_key` AS `S_key`,
                      `LHS`.`C_name` AS `C_name`,
                      `RHS`.`F_key` AS `F_key`
               FROM `input2` AS `LHS`
               INNER JOIN `input1` AS `RHS` ON (`LHS`.`C_name` = `RHS`.`C_name`)) AS `LHS`
            INNER JOIN `input3` AS `RHS` ON (`LHS`.`F_key` = `RHS`.`F_key`)) AS `LHS`
         INNER JOIN `input4` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
      WHERE (`F_name` = 'faculty1'
             AND `major` != 'History'))
   GROUP BY F_key,
            F_name)
ORDER BY maxage
