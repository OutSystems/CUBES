[     1.593][MainProcess][INFO] Parsing specification...
[     1.596][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.596][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.596][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.597][MainProcess][DEBUG] Reading input files...
[     1.604][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.608][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.612][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.616][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/36.out: ['string']
[     1.645][MainProcess][DEBUG] Generating DSL...
[     1.670][MainProcess][INFO] Creating 2 processes
[     1.718][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.721][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.182][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.183][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.184][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.185][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.186][MainProcess][DEBUG] Increasing generator loc to 3
[     2.187][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.190][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.191][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.197][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.044][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.048][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.050][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     3.052][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.077][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.083][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     3.346][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.348][MainProcess][INFO] Statistics:
[     3.348][MainProcess][INFO] 	Generated cubes: 10
[     3.348][MainProcess][INFO] 	Attempted programs: 11
[     3.349][MainProcess][INFO] 		Rejected: 5
[     3.349][MainProcess][INFO] 		Failed: 5
[     3.349][MainProcess][INFO] 	Blacklist clauses: 0
[     3.349][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.350][MainProcess][DEBUG] 	0: Counter({'natural_join3': 41})
[     3.350][MainProcess][DEBUG] 	1: Counter({'summarise': 23, 'filter': 18})
[     3.350][MainProcess][DEBUG] 	2: Counter({'filter': 23, 'summarise': 18})
[     3.351][MainProcess][INFO] Solution found: filter(summarise(natural_join3(@param2, @param0, @param1), n = n(), S_name, color), color == 'red')
[     3.521][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/36.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input3, input1) %>% inner_join(input2)
df5 <- df4 %>% group_by(S_name, color) %>% summarise(n = n()) %>% ungroup()
df6 <- df5 %>% filter(color == 'red')
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT `S_name`,
          `color`,
          COUNT() AS `n`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`S_name` AS `S_name`,
             `LHS`.`P_id` AS `P_id`,
             `RHS`.`color` AS `color`
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`S_name` AS `S_name`,
                `RHS`.`P_id` AS `P_id`
         FROM `input3` AS `LHS`
         INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
   GROUP BY `S_name`,
            `color`)
WHERE (`color` = 'red')
ORDER BY S_name
