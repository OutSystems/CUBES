[     3.189][MainProcess][INFO] Parsing specification...
[     3.194][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.195][MainProcess][DEBUG] Reading input files...
[     3.203][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/14-1.txt: ['string', 'string']
[     3.209][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/14-2.txt: ['string', 'string']
[     3.214][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/14-3.txt: ['string', 'string']
[     3.218][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/14.out: ['string']
[     3.252][MainProcess][DEBUG] Generating DSL...
[     3.280][MainProcess][INFO] Creating 2 processes
[     3.333][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.339][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.760][cube-solver-0][WARNING] There is no solution for current loc (2).
[     3.761][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.762][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.763][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     3.764][MainProcess][DEBUG] Increasing generator loc to 3
[     3.765][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.787][cube-solver-1][WARNING] There is no solution for current loc (2).
[     3.788][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.793][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.467][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     4.470][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     4.472][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     4.474][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     4.519][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     4.528][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     4.533][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     4.536][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     4.976][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     4.978][MainProcess][INFO] Statistics:
[     4.979][MainProcess][INFO] 	Generated cubes: 12
[     4.979][MainProcess][INFO] 	Attempted programs: 17
[     4.979][MainProcess][INFO] 		Rejected: 9
[     4.979][MainProcess][INFO] 		Failed: 7
[     4.979][MainProcess][INFO] 	Blacklist clauses: 0
[     4.980][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     4.980][MainProcess][DEBUG] 	0: Counter({'natural_join3': 113})
[     4.980][MainProcess][DEBUG] 	1: Counter({'mutate': 58, 'summarise': 55})
[     4.981][MainProcess][DEBUG] 	2: Counter({'filter': 113})
[     4.981][MainProcess][INFO] Solution found: filter(summarise(natural_join3(@param0, @param1, @param2), n = n(), S_key, S_name), n == max(n))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/14-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/14-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/14-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/14.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input1, input2) %>% inner_join(input3)
df5 <- df4 %>% group_by(S_key, S_name) %>% summarise(n = n()) %>% ungroup()
df6 <- df5 %>% filter(n == max(n))
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT S_key,
          S_name,
          n
   FROM
     (SELECT S_key,
             S_name,
             n,
             MAX(n) OVER () AS zzz4
      FROM
        (SELECT S_key,
                S_name,
                COUNT() AS n
         FROM
           (SELECT LHS.S_key AS S_key,
                   LHS.P_id AS P_id,
                   LHS.color AS color,
                   RHS.S_name AS S_name
            FROM
              (SELECT LHS.S_key AS S_key,
                      LHS.P_id AS P_id,
                      RHS.color AS color
               FROM input1 AS LHS
               INNER JOIN input2 AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
            INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
         GROUP BY S_key,
                  S_name))
   WHERE (n = zzz4))
ORDER BY S_name
