[     3.182][MainProcess][INFO] Parsing specification...
[     3.186][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.186][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.186][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.187][MainProcess][DEBUG] Reading input files...
[     3.194][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3-1.txt: ['string', 'string']
[     3.199][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3-2.txt: ['string', 'string']
[     3.203][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3.out: ['string']
[     3.233][MainProcess][DEBUG] Generating DSL...
[     3.261][MainProcess][INFO] Creating 2 processes
[     3.318][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.323][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.838][cube-solver-0][WARNING] There is no solution for current loc (2).
[     3.839][cube-solver-1][WARNING] There is no solution for current loc (2).
[     3.840][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.840][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.841][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.842][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     3.843][MainProcess][DEBUG] Increasing generator loc to 3
[     3.844][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.844][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.664][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     4.667][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     4.669][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     4.677][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     6.684][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     6.686][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     6.688][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     6.690][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     6.692][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     6.693][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     6.695][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     6.697][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     6.699][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     6.906][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     6.908][MainProcess][INFO] Statistics:
[     6.908][MainProcess][INFO] 	Generated cubes: 17
[     6.908][MainProcess][INFO] 	Attempted programs: 113
[     6.909][MainProcess][INFO] 		Rejected: 85
[     6.909][MainProcess][INFO] 		Failed: 27
[     6.909][MainProcess][INFO] 	Blacklist clauses: 0
[     6.909][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     6.910][MainProcess][DEBUG] 	0: Counter({'natural_join': 579})
[     6.910][MainProcess][DEBUG] 	1: Counter({'mutate': 320, 'summarise': 259})
[     6.911][MainProcess][DEBUG] 	2: Counter({'filter': 579})
[     6.911][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param0, @param1), n = n(), ID_key, Room), Room == 'R128' | n > 4)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/3-1.txt", col_types = cols(ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/3-2.txt", col_types = cols(ID_key_student = col_character(),ID_key = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/3.out", col_types = cols(ID_key = col_character()))

df3 <- inner_join(input1, input2)
df4 <- df3 %>% group_by(ID_key, Room) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(Room == 'R128' | n > 4)
out <- df5 %>% select(ID_key) %>% arrange(ID_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `ID_key`
FROM
  (SELECT `ID_key`,
          `Room`,
          COUNT() AS `n`
   FROM
     (SELECT `LHS`.`ID_key` AS `ID_key`,
             `LHS`.`Room` AS `Room`,
             `RHS`.`ID_key_student` AS `ID_key_student`
      FROM `input1` AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
   GROUP BY `ID_key`,
            `Room`)
WHERE (`Room` = 'R128'
       OR n > 4.0)
ORDER BY ID_key
