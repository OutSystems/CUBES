[     1.589][MainProcess][INFO] Parsing specification...
[     1.592][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.592][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.593][MainProcess][DEBUG] Reading input files...
[     1.600][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i006.csv: ['int64', 'string', 'string']
[     1.606][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o006.csv: ['int64', 'string', 'string']
[     1.632][MainProcess][DEBUG] Generating DSL...
[     1.788][MainProcess][INFO] Creating 2 processes
[     1.936][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.951][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     4.406][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     4.501][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.806][MainProcess][DEBUG] Increasing generator loc to 2
[     4.812][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     5.022][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     9.660][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[     9.685][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]))
[     9.698][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     9.710][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]))
[     9.725][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     9.738][cube-solver-1][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join())
[     9.961][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[    10.005][cube-solver-0][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join3())
[    10.035][cube-solver-0][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join4())
[    10.059][cube-solver-0][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]))
[    10.080][cube-solver-0][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter())
[    10.164][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = natural_join())
[    10.165][MainProcess][INFO] Statistics:
[    10.166][MainProcess][INFO] 	Generated cubes: 13
[    10.166][MainProcess][INFO] 	Attempted programs: 17
[    10.166][MainProcess][INFO] 		Rejected: 13
[    10.166][MainProcess][INFO] 		Failed: 3
[    10.166][MainProcess][INFO] 	Blacklist clauses: 3
[    10.166][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    10.167][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 48})
[    10.167][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    10.167][MainProcess][DEBUG] 	0: Counter({'summarise': 65})
[    10.167][MainProcess][DEBUG] 	1: Counter({'natural_join': 65})
[    10.167][MainProcess][INFO] Solution found: natural_join(summarise(@param0, Id = max(Id), Name), @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i006.csv", col_types = cols(Id = col_integer(),Name = col_character(),Other_Columns = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o006.csv", col_types = cols(Id = col_integer(),Name = col_character(),Other_Columns = col_character()))

df2 <- input1 %>% group_by(Name) %>% summarise(Id = max(Id)) %>% ungroup()
df3 <- inner_join(df2, input1)
out <- df3 %>% select(Id, Name, Other_Columns) %>% arrange(Id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Id,
       Name,
       Other_Columns
FROM
  (SELECT LHS.Name AS Name,
          LHS.Id AS Id,
          RHS.Other_Columns AS Other_Columns
   FROM
     (SELECT Name,
             MAX(Id) AS Id
      FROM input1
      GROUP BY Name) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.Name = RHS.Name
                                AND LHS.Id = RHS.Id))
ORDER BY Id
