[     3.015][MainProcess][INFO] Parsing specification...
[     3.019][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.019][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.020][MainProcess][DEBUG] Reading input files...
[     3.027][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i039.csv: ['string']
[     3.031][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o039.csv: ['string']
[     3.059][MainProcess][DEBUG] Generating DSL...
[     3.080][MainProcess][INFO] Creating 2 processes
[     3.118][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.125][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.278][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     3.280][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     3.318][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     3.327][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     3.358][MainProcess][DEBUG] Increasing generator loc to 3
[     3.360][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.365][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.626][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = mutate())
[     3.628][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise())
[     3.629][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[     3.630][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = summarise())
[     3.632][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = mutate())
[     3.633][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise())
[     3.634][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate())
[     3.635][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = summarise())
[     3.637][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = mutate())
[     3.638][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise())
[     3.638][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise())
[     3.639][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[     3.640][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = summarise())
[     3.640][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = mutate())
[     3.715][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = summarise())
[     3.715][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = mutate())
[     3.717][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = summarise())
[     3.717][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = mutate())
[     3.718][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join())
[     3.718][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join3())
[     3.799][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join4())
[     3.801][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = summarise())
[     3.802][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = anti_join())
[     3.928][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = left_join())
[     3.979][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = union())
[     3.994][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = intersect())
[     4.046][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = semi_join())
[     4.070][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = cross_join())
[     4.109][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = mutate())
[     4.110][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = inner_join())
[     4.132][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = summarise(), l2 = cross_join())
[     4.134][MainProcess][INFO] Statistics:
[     4.134][MainProcess][INFO] 	Generated cubes: 34
[     4.134][MainProcess][INFO] 	Attempted programs: 28
[     4.134][MainProcess][INFO] 		Rejected: 27
[     4.135][MainProcess][INFO] 		Failed: 0
[     4.135][MainProcess][INFO] 	Blacklist clauses: 0
[     4.135][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     4.135][MainProcess][DEBUG] 	0: Counter({'mutate': 8, 'summarise': 4})
[     4.135][MainProcess][DEBUG] 	1: Counter({'mutate': 8, 'summarise': 4})
[     4.135][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     4.136][MainProcess][DEBUG] 	0: Counter({'summarise': 101})
[     4.136][MainProcess][DEBUG] 	1: Counter({'summarise': 85, 'natural_join': 16})
[     4.136][MainProcess][DEBUG] 	2: Counter({'natural_join3': 24, 'anti_join': 16, 'mutate': 8, 'summarise': 8, 'natural_join': 8, 'left_join': 8, 'union': 8, 'semi_join': 8, 'cross_join': 6, 'intersect': 4, 'inner_join': 3})
[     4.136][MainProcess][INFO] Solution found: cross_join(summarise(@param0, n = n(), c), summarise(@param0, n = n(), c), n < n.other & n.other > n)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i039.csv", col_types = cols(c = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o039.csv", col_types = cols(c = col_character()))

df2 <- input1 %>% group_by(c) %>% summarise(n = n()) %>% ungroup()
df3 <- input1 %>% group_by(c) %>% summarise(n = n()) %>% ungroup()
df4 <- full_join(df2 %>% mutate(tmp.col=1), df3 %>% mutate(tmp.col=1), by="tmp.col", suffix = c("", ".other")) %>% select(-tmp.col) %>% filter(n < n.other & n.other > n)
out <- df4 %>% select(c = c.other) %>% distinct() %>% arrange(c)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT c.other AS c
FROM
  (SELECT c,
          n,
          c.other,
          n.other
   FROM
     (SELECT LHS.c AS c,
             LHS.n AS n,
             COALESCE(LHS.tmp.col, RHS.tmp.col) AS tmp.col,
             RHS.c AS c.other,
             RHS.n AS n.other
      FROM
        (SELECT c,
                n,
                1.0 AS tmp.col
         FROM
           (SELECT c,
                   COUNT() AS n
            FROM input1
            GROUP BY c)) AS LHS
      FULL JOIN
        (SELECT c,
                n,
                1.0 AS tmp.col
         FROM
           (SELECT c,
                   COUNT() AS n
            FROM input1
            GROUP BY c)) AS RHS ON (LHS.tmp.col = RHS.tmp.col)))
WHERE (n < n.other
       AND n.other > n)
ORDER BY c
