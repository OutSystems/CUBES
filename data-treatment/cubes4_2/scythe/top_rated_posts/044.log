[     3.020][MainProcess][INFO] Parsing specification...
[     3.025][MainProcess][DEBUG] Reading input files...
[     3.032][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i044.csv: ['int64', 'int64']
[     3.037][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o044.csv: ['int64', 'int64', 'int64']
[     3.066][MainProcess][DEBUG] Generating DSL...
[     3.236][MainProcess][INFO] Creating 2 processes
[     3.391][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.401][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     5.865][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     5.887][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     5.893][cube-solver-1][DEBUG] Found solution with cube (l0 = mutate(),)
[     5.895][MainProcess][INFO] Statistics:
[     5.895][MainProcess][INFO] 	Generated cubes: 2
[     5.896][MainProcess][INFO] 	Attempted programs: 1
[     5.896][MainProcess][INFO] 		Rejected: 0
[     5.896][MainProcess][INFO] 		Failed: 0
[     5.896][MainProcess][INFO] 	Blacklist clauses: 0
[     5.896][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     5.897][MainProcess][DEBUG] 	0: Counter({'mutate': 1})
[     5.897][MainProcess][INFO] Solution found: mutate(@param0, cumsumcount = cumsum(count))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i044.csv", col_types = cols(id = col_integer(),count = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o044.csv", col_types = cols(id = col_integer(),count = col_integer(),sumcount = col_integer()))

df2 <- input1 %>% mutate(cumsumcount = cumsum(count))
out <- df2 %>% select(id, count, sumcount = cumsumcount) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       COUNT,
       SUM(COUNT) OVER (ROWS UNBOUNDED PRECEDING) AS sumcount
FROM input1
ORDER BY id
