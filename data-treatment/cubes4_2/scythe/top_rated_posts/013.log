[     1.662][MainProcess][INFO] Parsing specification...
[     1.665][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.665][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.666][MainProcess][DEBUG] Reading input files...
[     1.672][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i013.csv: ['string', 'int64']
[     1.677][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o013.csv: ['string', 'int64', 'int64']
[     1.703][MainProcess][DEBUG] Generating DSL...
[     1.722][MainProcess][INFO] Creating 2 processes
[     1.761][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.763][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.996][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     1.998][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.999][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.005][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.452][MainProcess][DEBUG] Increasing generator loc to 3
[     2.453][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.558][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.886][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.888][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.890][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.892][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.893][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.894][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.896][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.898][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.899][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.900][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.902][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.903][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     2.983][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.986][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.989][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.991][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.993][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     3.819][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     3.821][MainProcess][INFO] Statistics:
[     3.821][MainProcess][INFO] 	Generated cubes: 21
[     3.821][MainProcess][INFO] 	Attempted programs: 32
[     3.821][MainProcess][INFO] 		Rejected: 29
[     3.821][MainProcess][INFO] 		Failed: 2
[     3.821][MainProcess][INFO] 	Blacklist clauses: 0
[     3.821][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.822][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 60})
[     3.822][MainProcess][DEBUG] 	1: Counter({'filter': 120})
[     3.822][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.823][MainProcess][DEBUG] 	0: Counter({'summarise': 230})
[     3.823][MainProcess][DEBUG] 	1: Counter({'natural_join': 121, 'filter': 109})
[     3.823][MainProcess][DEBUG] 	2: Counter({'filter': 121, 'natural_join': 109})
[     3.824][MainProcess][INFO] Solution found: natural_join(filter(summarise(@param0, n = n(), orgName), n > 1), @param0)
[     4.082][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i013.csv", col_types = cols(orgName = col_character(),id = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o013.csv", col_types = cols(orgName = col_character(),n = col_integer(),id = col_integer()))

df2 <- input1 %>% group_by(orgName) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 1)
df4 <- inner_join(df3, input1)
out <- df4 %>% select(orgName, n, id) %>% arrange(orgName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT orgName,
       n,
       id
FROM
  (SELECT LHS.orgName AS orgName,
          LHS.n AS n,
          RHS.id AS id
   FROM
     (SELECT *
      FROM
        (SELECT orgName,
                COUNT() AS n
         FROM input1
         GROUP BY orgName)
      WHERE (n > 1.0)) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.orgName = RHS.orgName))
ORDER BY orgName
