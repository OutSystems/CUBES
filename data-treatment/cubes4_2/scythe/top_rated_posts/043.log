[     1.698][MainProcess][INFO] Parsing specification...
[     1.701][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.701][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.702][MainProcess][DEBUG] Reading input files...
[     1.709][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i043.csv: ['string', 'string']
[     1.714][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o043.csv: ['string', 'string']
[     1.741][MainProcess][DEBUG] Generating DSL...
[     1.760][MainProcess][INFO] Creating 2 processes
[     1.798][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.801][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.999][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.000][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.002][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.008][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.423][MainProcess][DEBUG] Increasing generator loc to 3
[     2.424][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.724][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.822][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.824][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.826][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.827][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.829][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.830][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.832][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.833][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.834][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.836][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.837][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.838][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     3.079][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.084][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     3.088][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     3.092][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     3.095][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     3.412][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     3.413][MainProcess][INFO] Statistics:
[     3.413][MainProcess][INFO] 	Generated cubes: 21
[     3.413][MainProcess][INFO] 	Attempted programs: 28
[     3.413][MainProcess][INFO] 		Rejected: 27
[     3.414][MainProcess][INFO] 		Failed: 0
[     3.414][MainProcess][INFO] 	Blacklist clauses: 0
[     3.414][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.414][MainProcess][DEBUG] 	0: Counter({'summarise': 100, 'mutate': 60})
[     3.415][MainProcess][DEBUG] 	1: Counter({'filter': 160})
[     3.415][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.415][MainProcess][DEBUG] 	0: Counter({'summarise': 126})
[     3.415][MainProcess][DEBUG] 	1: Counter({'natural_join': 85, 'filter': 41})
[     3.415][MainProcess][DEBUG] 	2: Counter({'filter': 85, 'natural_join': 41})
[     3.415][MainProcess][INFO] Solution found: filter(natural_join(@param0, summarise(@param0, n = n(), EmailAddress)), n > 1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i043.csv", col_types = cols(CustomerName = col_character(),EmailAddress = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o043.csv", col_types = cols(CustomerName = col_character(),EmailAddress = col_character()))

df2 <- input1 %>% group_by(EmailAddress) %>% summarise(n = n()) %>% ungroup()
df3 <- inner_join(input1, df2)
df4 <- df3 %>% filter(n > 1)
out <- df4 %>% select(CustomerName, EmailAddress) %>% arrange(CustomerName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT CustomerName,
       EmailAddress
FROM
  (SELECT LHS.CustomerName AS CustomerName,
          LHS.EmailAddress AS EmailAddress,
          RHS.n AS n
   FROM input1 AS LHS
   INNER JOIN
     (SELECT EmailAddress,
             COUNT() AS n
      FROM input1
      GROUP BY EmailAddress) AS RHS ON (LHS.EmailAddress = RHS.EmailAddress))
WHERE (n > 1.0)
ORDER BY CustomerName
