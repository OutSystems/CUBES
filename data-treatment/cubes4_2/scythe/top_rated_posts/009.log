[     3.278][MainProcess][INFO] Parsing specification...
[     3.283][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.283][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.284][MainProcess][DEBUG] Reading input files...
[     3.292][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i009.csv: ['string', 'string', 'int64']
[     3.298][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o009.csv: ['string', 'string', 'int64']
[     3.328][MainProcess][DEBUG] Generating DSL...
[     3.502][MainProcess][INFO] Creating 2 processes
[     3.661][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.698][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     6.172][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     6.206][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     6.628][MainProcess][DEBUG] Increasing generator loc to 2
[     6.634][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     6.668][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[    11.542][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[    11.567][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]))
[    11.579][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[    11.581][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[    11.593][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]))
[    11.607][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[    11.620][cube-solver-0][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join3())
[    11.628][cube-solver-1][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join())
[    11.639][cube-solver-0][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join4())
[    11.654][cube-solver-0][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]))
[    11.671][cube-solver-0][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter())
[    12.716][cube-solver-0][DEBUG] Solving cube (l0 = summarise([3]), l1 = anti_join())
[    14.260][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = natural_join())
[    14.262][MainProcess][INFO] Statistics:
[    14.262][MainProcess][INFO] 	Generated cubes: 14
[    14.262][MainProcess][INFO] 	Attempted programs: 56
[    14.263][MainProcess][INFO] 		Rejected: 37
[    14.263][MainProcess][INFO] 		Failed: 18
[    14.263][MainProcess][INFO] 	Blacklist clauses: 3
[    14.263][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    14.264][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 48})
[    14.264][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    14.265][MainProcess][DEBUG] 	0: Counter({'summarise': 733})
[    14.265][MainProcess][DEBUG] 	1: Counter({'natural_join': 421, 'anti_join': 192, 'filter': 120})
[    14.266][MainProcess][INFO] Solution found: natural_join(@param0, summarise(@param0, time_stamp = max(time_stamp), username))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i009.csv", col_types = cols(username = col_character(),ip = col_character(),time_stamp = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o009.csv", col_types = cols(username = col_character(),ip = col_character(),time_stamp = col_integer()))

df2 <- input1 %>% group_by(username) %>% summarise(time_stamp = max(time_stamp)) %>% ungroup()
df3 <- inner_join(input1, df2)
out <- df3 %>% select(username, ip, time_stamp) %>% arrange(username)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT username,
       ip,
       time_stamp
FROM
  (SELECT LHS.username AS username,
          LHS.ip AS ip,
          LHS.time_stamp AS time_stamp
   FROM input1 AS LHS
   INNER JOIN
     (SELECT username,
             MAX(time_stamp) AS time_stamp
      FROM input1
      GROUP BY username) AS RHS ON (LHS.username = RHS.username
                                    AND LHS.time_stamp = RHS.time_stamp))
ORDER BY username
