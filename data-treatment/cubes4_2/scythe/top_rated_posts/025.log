[     1.578][MainProcess][INFO] Parsing specification...
[     1.581][MainProcess][DEBUG] Reading input files...
[     1.588][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i025.csv: ['int64', 'string']
[     1.592][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o025.csv: ['int64', 'string']
[     1.617][MainProcess][DEBUG] Generating DSL...
[     1.646][MainProcess][INFO] Creating 2 processes
[     1.693][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.695][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.098][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.099][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.101][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.108][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     5.017][cube-solver-1][DEBUG] Found solution with cube (l0 = mutate(), l1 = filter())
[     5.019][MainProcess][INFO] Statistics:
[     5.019][MainProcess][INFO] 	Generated cubes: 4
[     5.019][MainProcess][INFO] 	Attempted programs: 41
[     5.019][MainProcess][INFO] 		Rejected: 40
[     5.020][MainProcess][INFO] 		Failed: 0
[     5.020][MainProcess][INFO] 	Blacklist clauses: 0
[     5.020][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     5.021][MainProcess][DEBUG] 	0: Counter({'mutate': 481, 'summarise': 426})
[     5.021][MainProcess][DEBUG] 	1: Counter({'filter': 907})
[     5.021][MainProcess][INFO] Solution found: filter(mutate(@param0, row_number = row_number()), row_number >= 3 & row_number < 5)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i025.csv", col_types = cols(Id = col_integer(),Value = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o025.csv", col_types = cols(Id = col_integer(),Value = col_character()))

df2 <- input1 %>% mutate(row_number = row_number())
df3 <- df2 %>% filter(row_number >= 3 & row_number < 5)
out <- df3 %>% select(Id, Value) %>% arrange(Id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Id,
       Value
FROM
  (SELECT Id,
          Value,
          ROW_NUMBER() OVER () AS row_number
   FROM input1)
WHERE (row_number >= 3.0
       AND row_number < 5.0)
ORDER BY Id
