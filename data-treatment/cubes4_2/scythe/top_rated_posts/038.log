[     1.593][MainProcess][INFO] Parsing specification...
[     1.596][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.596][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.597][MainProcess][DEBUG] Reading input files...
[     1.604][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i038.csv: ['int64', 'string', 'string']
[     1.610][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o038.csv: ['int64', 'string', 'string']
[     1.635][MainProcess][DEBUG] Generating DSL...
[     1.656][MainProcess][INFO] Creating 2 processes
[     1.697][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.699][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.949][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     1.950][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     1.952][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     1.961][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.296][MainProcess][DEBUG] Increasing generator loc to 3
[     3.297][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.469][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.780][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.784][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.787][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     3.790][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.793][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     3.795][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.797][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     3.799][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     3.800][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     3.801][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     3.803][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     3.805][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     3.993][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.995][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     3.997][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     3.999][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     4.000][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     8.763][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     8.765][MainProcess][INFO] Statistics:
[     8.765][MainProcess][INFO] 	Generated cubes: 21
[     8.765][MainProcess][INFO] 	Attempted programs: 71
[     8.766][MainProcess][INFO] 		Rejected: 58
[     8.766][MainProcess][INFO] 		Failed: 12
[     8.766][MainProcess][INFO] 	Blacklist clauses: 0
[     8.766][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     8.767][MainProcess][DEBUG] 	0: Counter({'mutate': 240, 'summarise': 180})
[     8.767][MainProcess][DEBUG] 	1: Counter({'filter': 420})
[     8.768][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     8.769][MainProcess][DEBUG] 	0: Counter({'summarise': 1564})
[     8.770][MainProcess][DEBUG] 	1: Counter({'natural_join': 815, 'filter': 749})
[     8.771][MainProcess][DEBUG] 	2: Counter({'filter': 815, 'natural_join': 749})
[     8.772][MainProcess][INFO] Solution found: natural_join(filter(summarise(@param0, n = n(), city, name), n > 1), @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i038.csv", col_types = cols(id = col_integer(),name = col_character(),city = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o038.csv", col_types = cols(id = col_integer(),name = col_character(),city = col_character()))

df2 <- input1 %>% group_by(city, name) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 1)
df4 <- inner_join(df3, input1)
out <- df4 %>% select(id, name, city) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       name,
       city
FROM
  (SELECT LHS.city AS city,
          LHS.name AS name,
          LHS.n AS n,
          RHS.id AS id
   FROM
     (SELECT *
      FROM
        (SELECT city,
                name,
                COUNT() AS n
         FROM input1
         GROUP BY city,
                  name)
      WHERE (n > 1.0)) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.city = RHS.city
                                AND LHS.name = RHS.name))
ORDER BY id
