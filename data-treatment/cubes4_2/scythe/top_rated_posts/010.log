[     1.681][MainProcess][INFO] Parsing specification...
[     1.684][MainProcess][DEBUG] Reading input files...
[     1.692][MainProcess][WARNING] Using integers larger than 32 bits! Converting column phone_number to string.
[     1.693][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i010_1.csv: ['timedelta64[ns]', 'string', 'object']
[     1.700][MainProcess][WARNING] Using integers larger than 32 bits! Converting column phone_number to string.
[     1.701][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i010_2.csv: ['timedelta64[ns]', 'timedelta64[ns]', 'object']
[     1.707][MainProcess][WARNING] Using integers larger than 32 bits! Converting column phone_number to string.
[     1.708][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o010.csv: ['timedelta64[ns]', 'timedelta64[ns]', 'object']
[     1.746][MainProcess][DEBUG] Generating DSL...
[     1.759][MainProcess][INFO] Creating 2 processes
[     1.803][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.805][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.858][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     1.860][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     1.861][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(),)
[     1.861][cube-solver-1][DEBUG] Solving cube (l0 = anti_join(),)
[     1.990][cube-solver-1][DEBUG] Found solution with cube (l0 = anti_join(),)
[     1.991][MainProcess][INFO] Statistics:
[     1.992][MainProcess][INFO] 	Generated cubes: 4
[     1.992][MainProcess][INFO] 	Attempted programs: 2
[     1.992][MainProcess][INFO] 		Rejected: 1
[     1.992][MainProcess][INFO] 		Failed: 0
[     1.992][MainProcess][INFO] 	Blacklist clauses: 0
[     1.993][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     1.993][MainProcess][DEBUG] 	0: Counter({'natural_join': 13, 'anti_join': 13})
[     1.993][MainProcess][INFO] Solution found: anti_join(@param1, @param0, )

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i010_1.csv", col_types = cols(id = col_time(),name = col_character(),phone_number = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i010_2.csv", col_types = cols(id = col_time(),date = col_time(),phone_number = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o010.csv", col_types = cols(id = col_time(),date = col_time(),phone_number = col_character()))

df3 <- anti_join(input2, input1, by=c())
out <- df3 %>% select(id, date, phone_number) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id, date, phone_number
FROM
  (SELECT *
   FROM input2 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM input1 AS RHS
        WHERE (LHS.id = RHS.id
               AND LHS.phone_number = RHS.phone_number) ))
ORDER BY id
