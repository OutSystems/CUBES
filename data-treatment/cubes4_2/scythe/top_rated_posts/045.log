[     1.572][MainProcess][INFO] Parsing specification...
[     1.575][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.575][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.576][MainProcess][DEBUG] Reading input files...
[     1.588][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i045.csv: ['int64', 'int64', 'int64', 'datetime64[ns]']
[     1.592][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o045.csv: ['int64', 'int64']
[     1.625][MainProcess][DEBUG] Generating DSL...
[     1.658][MainProcess][INFO] Creating 2 processes
[     1.711][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.722][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.217][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.219][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.221][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.261][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.380][MainProcess][DEBUG] Increasing generator loc to 3
[     3.381][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.466][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     4.469][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     4.471][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     4.472][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     4.474][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     4.475][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     4.477][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     4.479][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     4.480][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     4.482][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     4.484][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     4.485][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     4.487][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     5.073][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     5.976][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     5.985][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     5.989][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     5.993][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[    26.364][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = natural_join3())
[    33.994][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = natural_join4())
[    34.008][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = summarise())
[    42.810][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = filter([5]))
[    56.860][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = anti_join())
[    92.379][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = left_join())
[   123.040][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = union())
[   127.948][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = intersect())
[   145.035][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = semi_join())
[   153.541][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = cross_join())
[   154.859][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter([5]), l2 = cross_join())
[   154.861][MainProcess][INFO] Statistics:
[   154.862][MainProcess][INFO] 	Generated cubes: 31
[   154.862][MainProcess][INFO] 	Attempted programs: 5212
[   154.862][MainProcess][INFO] 		Rejected: 2329
[   154.862][MainProcess][INFO] 		Failed: 2882
[   154.862][MainProcess][INFO] 	Blacklist clauses: 5
[   154.863][MainProcess][DEBUG] Printing statistics for good programs of size 2
[   154.864][MainProcess][DEBUG] 	0: Counter({'summarise': 440, 'mutate': 200})
[   154.865][MainProcess][DEBUG] 	1: Counter({'filter': 640})
[   154.865][MainProcess][DEBUG] Printing statistics for good programs of size 3
[   154.884][MainProcess][DEBUG] 	0: Counter({'summarise': 44842})
[   154.895][MainProcess][DEBUG] 	1: Counter({'filter': 40843, 'natural_join': 4000})
[   154.907][MainProcess][DEBUG] 	2: Counter({'natural_join3': 12000, 'anti_join': 8640, 'filter': 6200, 'left_join': 5320, 'union': 5320, 'natural_join': 4880, 'semi_join': 1568, 'summarise': 680, 'cross_join': 236})
[   154.907][MainProcess][INFO] Solution found: cross_join(filter(summarise(@param0, n = n(), account_no, zip), n >= 1), summarise(@param0, n = n(), account_no, zip), n > n.other)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i045.csv", col_types = cols(user_id = col_integer(),account_no = col_integer(),zip = col_integer(),date = col_character()))
input1$date <- dmy(input1$date)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o045.csv", col_types = cols(user_id = col_integer(),n = col_integer()))

df2 <- input1 %>% group_by(account_no, zip) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n >= 1)
df4 <- full_join(df3 %>% mutate(tmp.col=1), df2 %>% mutate(tmp.col=1), by="tmp.col", suffix = c("", ".other")) %>% select(-tmp.col) %>% filter(n > n.other)
out <- df4 %>% select(user_id = n.other, n) %>% distinct() %>% arrange(user_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT n.other AS user_id,
                n
FROM
  (SELECT account_no,
          zip,
          n,
          account_no.other,
          zip.other,
          n.other
   FROM
     (SELECT LHS.account_no AS account_no,
             LHS.zip AS zip,
             LHS.n AS n,
             COALESCE(LHS.tmp.col, RHS.tmp.col) AS tmp.col,
             RHS.account_no AS account_no.other,
             RHS.zip AS zip.other,
             RHS.n AS n.other
      FROM
        (SELECT account_no,
                zip,
                n,
                1.0 AS tmp.col
         FROM
           (SELECT account_no,
                   zip,
                   COUNT() AS n
            FROM input1
            GROUP BY account_no,
                     zip)
         WHERE (n >= 1.0)) AS LHS
      FULL JOIN
        (SELECT account_no,
                zip,
                n,
                1.0 AS tmp.col
         FROM
           (SELECT account_no,
                   zip,
                   COUNT() AS n
            FROM input1
            GROUP BY account_no,
                     zip)) AS RHS ON (LHS.tmp.col = RHS.tmp.col)))
WHERE (n > n.other)
ORDER BY user_id
