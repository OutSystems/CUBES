[     1.601][MainProcess][INFO] Parsing specification...
[     1.604][MainProcess][DEBUG] Reading input files...
[     1.612][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i054.csv: ['datetime64[ns]', 'int64']
[     1.617][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o054.csv: ['datetime64[ns]', 'int64']
[     1.651][MainProcess][DEBUG] Generating DSL...
[     1.815][MainProcess][INFO] Creating 2 processes
[     1.977][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     2.004][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     4.432][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.442][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     4.482][cube-solver-1][DEBUG] Found solution with cube (l0 = mutate(),)
[     4.483][MainProcess][INFO] Statistics:
[     4.484][MainProcess][INFO] 	Generated cubes: 2
[     4.484][MainProcess][INFO] 	Attempted programs: 1
[     4.484][MainProcess][INFO] 		Rejected: 0
[     4.485][MainProcess][INFO] 		Failed: 0
[     4.485][MainProcess][INFO] 	Blacklist clauses: 0
[     4.485][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     4.485][MainProcess][DEBUG] 	0: Counter({'mutate': 3})
[     4.486][MainProcess][INFO] Solution found: mutate(@param0, cumsumcount = cumsum(count))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i054.csv", col_types = cols(created_at = col_character(),count = col_integer()))
input1$created_at <- mdy(input1$created_at)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o054.csv", col_types = cols(created_at = col_character(),count = col_integer()))
expected_output$created_at <- mdy(expected_output$created_at)

df2 <- input1 %>% mutate(cumsumcount = cumsum(count))
out <- df2 %>% select(created_at, count = cumsumcount) %>% arrange(created_at)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT created_at,
       SUM(COUNT) OVER (ROWS UNBOUNDED PRECEDING) AS COUNT
FROM input1
ORDER BY created_at
