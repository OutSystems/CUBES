[     1.621][MainProcess][INFO] Parsing specification...
[     1.624][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.624][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.625][MainProcess][DEBUG] Reading input files...
[     1.630][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i028_1.csv: ['string']
[     1.635][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i028_2.csv: ['string', 'int64', 'string']
[     1.640][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o028.csv: ['string', 'string']
[     1.668][MainProcess][DEBUG] Generating DSL...
[     1.704][MainProcess][INFO] Creating 2 processes
[     1.761][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.763][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     2.107][cube-solver-1][WARNING] There is no solution for current loc (1).
[     2.107][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.108][MainProcess][DEBUG] Increasing generator loc to 2
[     2.109][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.115][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.115][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.119][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.844][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.853][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     4.043][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     4.046][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     4.047][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     4.050][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     4.051][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     4.255][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise())
[     4.256][MainProcess][INFO] Statistics:
[     4.256][MainProcess][INFO] 	Generated cubes: 9
[     4.257][MainProcess][INFO] 	Attempted programs: 31
[     4.257][MainProcess][INFO] 		Rejected: 30
[     4.257][MainProcess][INFO] 		Failed: 0
[     4.257][MainProcess][INFO] 	Blacklist clauses: 0
[     4.257][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     4.258][MainProcess][DEBUG] 	0: Counter({'natural_join': 385, 'summarise': 16})
[     4.258][MainProcess][DEBUG] 	1: Counter({'summarise': 193, 'mutate': 192, 'natural_join': 16})
[     4.259][MainProcess][INFO] Solution found: summarise(natural_join(@param1, @param0), concatDesc = string_agg(Desc, ' '), PID)
[     4.319][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i028_1.csv", col_types = cols(PID = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i028_2.csv", col_types = cols(PID = col_character(),SEQ = col_integer(),Desc = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o028.csv", col_types = cols(PID = col_character(),concatDesc = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df3 <- inner_join(input2, input1)
df4 <- df3 %>% group_by(PID) %>% summarise(concatDesc = string_agg(Desc, ' ')) %>% ungroup()
out <- df4 %>% select(PID, concatDesc) %>% arrange(PID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `PID`,
       `concatDesc`
FROM
  (SELECT `PID`,
          string_agg(`Desc`, ' ') AS concatDesc
   FROM
     (SELECT LHS.PID AS PID,
             LHS.SEQ AS SEQ,
             LHS.Desc AS DESC
      FROM input2 AS LHS
      INNER JOIN input1 AS RHS ON (LHS.PID = RHS.PID))
   GROUP BY PID)
ORDER BY PID
