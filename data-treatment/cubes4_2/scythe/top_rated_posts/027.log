[     3.461][MainProcess][INFO] Parsing specification...
[     3.466][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.467][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.468][MainProcess][DEBUG] Reading input files...
[     3.478][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i027.csv: ['string', 'string', 'float64']
[     3.485][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o027.csv: ['string', 'string', 'float64']
[     3.524][MainProcess][DEBUG] Generating DSL...
[     3.737][MainProcess][INFO] Creating 2 processes
[     3.919][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.923][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     6.398][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     6.422][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     6.832][MainProcess][DEBUG] Increasing generator loc to 2
[     6.837][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     6.874][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[    11.715][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[    11.742][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]))
[    11.741][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[    11.756][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[    11.770][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]))
[    11.785][cube-solver-0][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join())
[    11.785][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[    11.806][cube-solver-1][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join3())
[    11.836][cube-solver-1][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join4())
[    11.857][cube-solver-1][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]))
[    11.873][cube-solver-1][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter())
[    12.424][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = natural_join())
[    12.425][MainProcess][INFO] Statistics:
[    12.425][MainProcess][INFO] 	Generated cubes: 13
[    12.425][MainProcess][INFO] 	Attempted programs: 17
[    12.426][MainProcess][INFO] 		Rejected: 13
[    12.426][MainProcess][INFO] 		Failed: 3
[    12.426][MainProcess][INFO] 	Blacklist clauses: 3
[    12.426][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    12.427][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 48})
[    12.427][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    12.427][MainProcess][DEBUG] 	0: Counter({'summarise': 159})
[    12.427][MainProcess][DEBUG] 	1: Counter({'natural_join': 99, 'filter': 60})
[    12.428][MainProcess][INFO] Solution found: natural_join(summarise(@param0, avg = max(avg), cname), @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i027.csv", col_types = cols(cname = col_character(),wmname = col_character(),avg = col_double()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o027.csv", col_types = cols(cname = col_character(),wmname = col_character(),maxavg = col_double()))

df2 <- input1 %>% group_by(cname) %>% summarise(avg = max(avg)) %>% ungroup()
df3 <- inner_join(df2, input1)
out <- df3 %>% select(cname, wmname, maxavg = avg) %>% arrange(cname)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT cname,
       wmname,
       AVG AS maxavg
FROM
  (SELECT LHS.cname AS cname,
          LHS.avg AS AVG,
          RHS.wmname AS wmname
   FROM
     (SELECT cname,
             MAX(AVG) AS AVG
      FROM input1
      GROUP BY cname) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.cname = RHS.cname
                                AND LHS.avg = RHS.avg))
ORDER BY cname
