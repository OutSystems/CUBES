[     3.470][MainProcess][INFO] Parsing specification...
[     3.499][MainProcess][DEBUG] Reading input files...
[     3.509][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_1.csv: ['int64', 'string']
[     3.514][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_2.csv: ['int64', 'string']
[     3.519][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_o.csv: ['int64', 'string', 'string', 'int64']
[     3.550][MainProcess][DEBUG] Generating DSL...
[     3.599][MainProcess][INFO] Creating 2 processes
[     3.679][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.682][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     4.313][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     4.335][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(),)
[     4.336][cube-solver-0][DEBUG] Solving cube (l0 = anti_join(),)
[     4.366][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     4.379][cube-solver-1][DEBUG] Solving cube (l0 = left_join(),)
[     4.406][cube-solver-1][DEBUG] Solving cube (l0 = union(),)
[     4.422][cube-solver-1][DEBUG] Solving cube (l0 = intersect(),)
[     4.433][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(),)
[     4.447][cube-solver-0][DEBUG] Solving cube (l0 = cross_join(),)
[     4.629][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(),)
[     4.863][MainProcess][DEBUG] Increasing generator loc to 2
[     4.864][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     6.069][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]))
[     6.084][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     6.192][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     6.289][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect([4]))
[     6.753][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     6.889][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([36]))
[   111.355][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join(), l1 = cross_join([36]))
[   111.358][MainProcess][INFO] Statistics:
[   111.358][MainProcess][INFO] 	Generated cubes: 16
[   111.358][MainProcess][INFO] 	Attempted programs: 232
[   111.359][MainProcess][INFO] 		Rejected: 120
[   111.359][MainProcess][INFO] 		Failed: 111
[   111.359][MainProcess][INFO] 	Blacklist clauses: 73
[   111.359][MainProcess][DEBUG] Printing statistics for good programs of size 1
[   111.368][MainProcess][DEBUG] 	0: Counter({'cross_join': 15077})
[   111.369][MainProcess][DEBUG] Printing statistics for good programs of size 2
[   111.373][MainProcess][DEBUG] 	0: Counter({'natural_join': 17533})
[   111.378][MainProcess][DEBUG] 	1: Counter({'cross_join': 17533})
[   111.378][MainProcess][INFO] Solution found: cross_join(natural_join(@param1, @param0), @param0, Name != Company_group & Company_group == Name.other)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/013_1.csv", col_types = cols(ID = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/013_2.csv", col_types = cols(ID = col_integer(),Company_group = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/013_o.csv", col_types = cols(ID = col_integer(),Name = col_character(),RootName = col_character(),RootId = col_integer()))

df3 <- inner_join(input2, input1)
df4 <- full_join(df3 %>% mutate(tmp.col=1), input1 %>% mutate(tmp.col=1), by="tmp.col", suffix = c("", ".other")) %>% select(-tmp.col) %>% filter(Name != Company_group & Company_group == Name.other)
out <- df4 %>% select(ID, Name, RootName = Company_group, RootId = ID.other) %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ID,
       Name,
       Company_group AS RootName,
       ID.other AS RootId
FROM
  (SELECT ID,
          Company_group,
          Name,
          ID.other,
          Name.other
   FROM
     (SELECT LHS.ID AS ID,
             LHS.Company_group AS Company_group,
             LHS.Name AS Name,
             COALESCE(LHS.tmp.col, RHS.tmp.col) AS tmp.col,
             RHS.ID AS ID.other,
             RHS.Name AS Name.other
      FROM
        (SELECT ID,
                Company_group,
                Name,
                1.0 AS tmp.col
         FROM
           (SELECT LHS.ID AS ID,
                   LHS.Company_group AS Company_group,
                   RHS.Name AS Name
            FROM input2 AS LHS
            INNER JOIN input1 AS RHS ON (LHS.ID = RHS.ID))) AS LHS
      FULL JOIN
        (SELECT ID,
                Name,
                1.0 AS tmp.col
         FROM input1) AS RHS ON (LHS.tmp.col = RHS.tmp.col)))
WHERE (Name != Company_group
       AND Company_group = Name.other)
ORDER BY ID
