[     3.415][MainProcess][INFO] Parsing specification...
[     3.420][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.420][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.421][MainProcess][DEBUG] Reading input files...
[     3.431][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/032.csv: ['int64', 'int64', 'int64', 'string']
[     3.437][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/032_o.csv: ['int64', 'int64', 'string']
[     3.475][MainProcess][DEBUG] Generating DSL...
[     3.700][MainProcess][INFO] Creating 2 processes
[     3.874][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.884][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     6.440][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     6.443][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     7.255][MainProcess][DEBUG] Increasing generator loc to 2
[     7.261][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.490][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[    12.464][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([4]))
[    12.492][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([4]))
[    12.507][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[    12.519][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([4]))
[    12.533][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[    12.545][cube-solver-0][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join())
[    12.647][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[    12.697][cube-solver-1][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join3())
[    12.729][cube-solver-1][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join4())
[    12.752][cube-solver-1][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]))
[    12.781][cube-solver-1][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter())
[    12.972][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([4]), l1 = natural_join())
[    12.973][MainProcess][INFO] Statistics:
[    12.973][MainProcess][INFO] 	Generated cubes: 13
[    12.973][MainProcess][INFO] 	Attempted programs: 24
[    12.974][MainProcess][INFO] 		Rejected: 19
[    12.974][MainProcess][INFO] 		Failed: 4
[    12.974][MainProcess][INFO] 	Blacklist clauses: 4
[    12.974][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    12.975][MainProcess][DEBUG] 	0: Counter({'mutate': 168, 'summarise': 108})
[    12.975][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    12.975][MainProcess][DEBUG] 	0: Counter({'summarise': 85})
[    12.976][MainProcess][DEBUG] 	1: Counter({'natural_join': 67, 'filter': 18})
[    12.976][MainProcess][INFO] Solution found: natural_join(@param0, summarise(@param0, Id = max(Id), crit1, crit2))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/032.csv", col_types = cols(Id = col_integer(),crit1 = col_integer(),crit2 = col_integer(),value = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/032_o.csv", col_types = cols(crit1 = col_integer(),crit2 = col_integer(),value = col_character()))

df2 <- input1 %>% group_by(crit1, crit2) %>% summarise(Id = max(Id)) %>% ungroup()
df3 <- inner_join(input1, df2)
out <- df3 %>% select(crit1, crit2, value) %>% arrange(crit1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT crit1,
       crit2,
       value
FROM
  (SELECT LHS.Id AS Id,
          LHS.crit1 AS crit1,
          LHS.crit2 AS crit2,
          LHS.value AS value
   FROM input1 AS LHS
   INNER JOIN
     (SELECT crit1,
             crit2,
             MAX(Id) AS Id
      FROM input1
      GROUP BY crit1,
               crit2) AS RHS ON (LHS.Id = RHS.Id
                                 AND LHS.crit1 = RHS.crit1
                                 AND LHS.crit2 = RHS.crit2))
ORDER BY crit1
