[     3.401][MainProcess][INFO] Parsing specification...
[     3.406][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.406][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.407][MainProcess][DEBUG] Reading input files...
[     3.415][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_1.csv: ['int64', 'string', 'int64']
[     3.421][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_2.csv: ['int64', 'string', 'string']
[     3.426][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_o.csv: ['int64', 'string', 'int64']
[     3.456][MainProcess][DEBUG] Generating DSL...
[     3.493][MainProcess][INFO] Creating 2 processes
[     3.503][MainProcess][DEBUG] Increasing generator loc to 2
[     3.559][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.559][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.953][cube-solver-0][WARNING] There is no solution for current loc (1).
[     3.955][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     3.959][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.274][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     4.695][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     4.700][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     4.702][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     4.906][cube-solver-0][DEBUG] Solving cube (l0 = filter([16]), l1 = natural_join3())
[     4.918][cube-solver-0][DEBUG] Solving cube (l0 = filter([16]), l1 = natural_join4())
[     4.929][cube-solver-0][DEBUG] Solving cube (l0 = filter([16]), l1 = filter([16]))
[     4.939][cube-solver-0][DEBUG] Solving cube (l0 = filter([16]), l1 = anti_join())
[     4.947][cube-solver-0][DEBUG] Solving cube (l0 = filter([16]), l1 = left_join())
[     4.954][cube-solver-0][DEBUG] Solving cube (l0 = filter([16]), l1 = union())
[     4.961][cube-solver-0][DEBUG] Solving cube (l0 = filter([16]), l1 = intersect())
[     4.968][cube-solver-0][DEBUG] Solving cube (l0 = filter([16]), l1 = semi_join())
[     4.975][cube-solver-0][DEBUG] Solving cube (l0 = filter([16]), l1 = cross_join())
[     4.988][cube-solver-0][DEBUG] Solving cube (l0 = filter([16]), l1 = inner_join())
[     4.994][cube-solver-0][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([16]))
[     9.063][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([16]))
[     9.163][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter())
[     9.166][MainProcess][INFO] Statistics:
[     9.166][MainProcess][INFO] 	Generated cubes: 17
[     9.166][MainProcess][INFO] 	Attempted programs: 296
[     9.166][MainProcess][INFO] 		Rejected: 39
[     9.166][MainProcess][INFO] 		Failed: 256
[     9.167][MainProcess][INFO] 	Blacklist clauses: 44
[     9.167][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     9.168][MainProcess][DEBUG] 	0: Counter({'natural_join': 841, 'anti_join': 384, 'left_join': 15})
[     9.168][MainProcess][DEBUG] 	1: Counter({'filter': 1240})
[     9.169][MainProcess][INFO] Solution found: filter(natural_join(@param0, @param1), type == 'public' & accountID == 'Dave')
[     9.174][cube-solver-0][DEBUG] Found solution with cube (l0 = left_join(), l1 = filter([16]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/031_1.csv", col_types = cols(channelID = col_integer(),accountID = col_character(),role = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/031_2.csv", col_types = cols(channelID = col_integer(),channelName = col_character(),type = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/031_o.csv", col_types = cols(c1 = col_integer(),c2 = col_character(),c3 = col_integer()))

df3 <- inner_join(input1, input2)
df4 <- df3 %>% filter(type == 'public' & accountID == 'Dave')
out <- df4 %>% select(c1 = channelID, c2 = accountID, c3 = role) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `channelID` AS `c1`,
       `accountID` AS `c2`,
       `role` AS `c3`
FROM
  (SELECT `LHS`.`channelID` AS `channelID`,
          `LHS`.`accountID` AS `accountID`,
          `LHS`.`role` AS `role`,
          `RHS`.`channelName` AS `channelName`,
          `RHS`.`type` AS `type`
   FROM `input1` AS `LHS`
   INNER JOIN `input2` AS `RHS` ON (`LHS`.`channelID` = `RHS`.`channelID`))
WHERE (`type` = 'public'
       AND `accountID` = 'Dave')
ORDER BY c1
