[     3.398][MainProcess][INFO] Parsing specification...
[     3.403][MainProcess][DEBUG] Reading input files...
[     3.410][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_1.csv: ['float64', 'int64']
[     3.414][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_2.csv: ['float64', 'int64']
[     3.419][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_o.csv: ['float64', 'int64', 'float64']
[     3.450][MainProcess][DEBUG] Generating DSL...
[     3.467][MainProcess][INFO] Creating 2 processes
[     3.511][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.514][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.573][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.576][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.578][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.579][cube-solver-1][DEBUG] Solving cube (l0 = anti_join(),)
[     3.693][cube-solver-1][DEBUG] Solving cube (l0 = left_join(),)
[     3.779][cube-solver-0][DEBUG] Solving cube (l0 = union(),)
[     3.851][cube-solver-1][DEBUG] Found solution with cube (l0 = left_join(),)
[     3.852][MainProcess][INFO] Statistics:
[     3.852][MainProcess][INFO] 	Generated cubes: 6
[     3.853][MainProcess][INFO] 	Attempted programs: 18
[     3.853][MainProcess][INFO] 		Rejected: 7
[     3.853][MainProcess][INFO] 		Failed: 10
[     3.853][MainProcess][INFO] 	Blacklist clauses: 10
[     3.853][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.854][MainProcess][DEBUG] 	0: Counter({'natural_join': 24, 'left_join': 13, 'union': 11})
[     3.854][MainProcess][INFO] Solution found: left_join(@param1, @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/038_1.csv", col_types = cols(Date = col_double(),Sold = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/038_2.csv", col_types = cols(Date = col_double(),Tapped = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/038_o.csv", col_types = cols(Date = col_double(),Tapped = col_integer(),Sold = col_double()))

df3 <- left_join(input2, input1)
out <- df3 %>% select(Date, Tapped, Sold) %>% arrange(Date)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Date, Tapped,
             Sold
FROM
  (SELECT LHS.Date AS Date,
          LHS.Tapped AS Tapped,
          RHS.Sold AS Sold
   FROM input2 AS LHS
   LEFT JOIN input1 AS RHS ON (LHS.Date = RHS.Date))
ORDER BY Date
