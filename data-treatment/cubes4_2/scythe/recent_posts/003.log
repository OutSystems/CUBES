[     3.195][MainProcess][INFO] Parsing specification...
[     3.200][MainProcess][DEBUG] Reading input files...
[     3.207][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_1.csv: ['int64', 'string']
[     3.212][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_2.csv: ['string', 'string']
[     3.216][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_o.csv: ['int64', 'string']
[     3.246][MainProcess][DEBUG] Generating DSL...
[     3.263][MainProcess][INFO] Creating 2 processes
[     3.306][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.309][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.395][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.397][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.399][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.400][cube-solver-1][DEBUG] Solving cube (l0 = anti_join(),)
[     3.433][cube-solver-0][DEBUG] Solving cube (l0 = left_join(),)
[     3.457][cube-solver-0][DEBUG] Solving cube (l0 = union(),)
[     3.549][cube-solver-1][DEBUG] Solving cube (l0 = intersect(),)
[     3.722][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(),)
[     3.734][cube-solver-1][DEBUG] Solving cube (l0 = cross_join(),)
[     3.742][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(),)
[     3.785][MainProcess][DEBUG] Increasing generator loc to 2
[     3.786][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.923][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join([22]))
[     3.933][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join([2]))
[     3.935][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union())
[     3.937][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect([8]))
[     3.942][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join([2]))
[     3.944][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join([2]))
[     3.947][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join([21]))
[     3.955][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]))
[     3.957][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3())
[     3.959][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join4())
[     3.961][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([22]))
[     3.969][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join([2]))
[     3.970][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     3.971][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect([8]))
[     3.975][cube-solver-1][DEBUG] Found solution with cube (l0 = inner_join(),)
[     3.975][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join([2]))
[     3.975][MainProcess][INFO] Statistics:
[     3.976][MainProcess][INFO] 	Generated cubes: 25
[     3.976][MainProcess][INFO] 	Attempted programs: 65
[     3.976][MainProcess][INFO] 		Rejected: 3
[     3.976][MainProcess][INFO] 		Failed: 61
[     3.976][MainProcess][INFO] 	Blacklist clauses: 61
[     3.976][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.977][MainProcess][DEBUG] 	0: Counter({'union': 48, 'inner_join': 7})
[     3.977][MainProcess][INFO] Solution found: inner_join(@param0, @param1, 'item' = 'f2','f1' = 'f2')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/003_1.csv", col_types = cols(ID = col_integer(),item = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/003_2.csv", col_types = cols(f1 = col_character(),f2 = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/003_o.csv", col_types = cols(ID = col_integer(),item = col_character()))

df3 <- inner_join(input1, input2, by=c('item' = 'f2','f1' = 'f2'), suffix = c('', '.other'))
out <- df3 %>% select(ID, item = f1) %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ID,
       f1 AS item
FROM
  (SELECT LHS.ID AS ID,
          LHS.item AS item,
          RHS.f1 AS f1
   FROM input1 AS LHS
   INNER JOIN input2 AS RHS ON (LHS.item = RHS.f2))
ORDER BY ID
