[     1.561][MainProcess][INFO] Parsing specification...
[     1.564][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.564][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.564][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.565][MainProcess][DEBUG] Reading input files...
[     1.571][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3-1.txt: ['string', 'string']
[     1.576][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3-2.txt: ['string', 'string']
[     1.580][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3.out: ['string']
[     1.607][MainProcess][DEBUG] Generating DSL...
[     1.633][MainProcess][INFO] Creating 2 processes
[     1.681][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.689][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.165][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.166][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.167][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.168][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.169][MainProcess][DEBUG] Increasing generator loc to 3
[     2.170][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.208][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.208][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.212][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.998][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.031][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.035][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.037][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     5.132][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     5.134][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     5.136][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     5.138][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     5.140][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     5.142][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     5.143][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     5.145][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     5.147][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     6.629][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     6.630][MainProcess][INFO] Statistics:
[     6.631][MainProcess][INFO] 	Generated cubes: 17
[     6.631][MainProcess][INFO] 	Attempted programs: 108
[     6.631][MainProcess][INFO] 		Rejected: 66
[     6.631][MainProcess][INFO] 		Failed: 41
[     6.632][MainProcess][INFO] 	Blacklist clauses: 0
[     6.632][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     6.633][MainProcess][DEBUG] 	0: Counter({'natural_join': 719, 'summarise': 157})
[     6.634][MainProcess][DEBUG] 	1: Counter({'summarise': 399, 'mutate': 320, 'natural_join': 157})
[     6.634][MainProcess][DEBUG] 	2: Counter({'filter': 876})
[     6.635][MainProcess][INFO] Solution found: filter(natural_join(@param0, summarise(@param1, n = n(), ID_key)), Room == 'R128' | n > 4)
[     6.851][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/3-1.txt", col_types = cols(ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/3-2.txt", col_types = cols(ID_key_student = col_character(),ID_key = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/3.out", col_types = cols(ID_key = col_character()))

df3 <- input2 %>% group_by(ID_key) %>% summarise(n = n()) %>% ungroup()
df4 <- inner_join(input1, df3)
df5 <- df4 %>% filter(Room == 'R128' | n > 4)
out <- df5 %>% select(ID_key) %>% arrange(ID_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `ID_key`
FROM
  (SELECT `LHS`.`ID_key` AS `ID_key`,
          `LHS`.`Room` AS `Room`,
          `RHS`.`n` AS `n`
   FROM `input1` AS `LHS`
   INNER JOIN
     (SELECT `ID_key`,
             COUNT() AS `n`
      FROM `input2`
      GROUP BY `ID_key`) AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
WHERE (`Room` = 'R128'
       OR n > 4.0)
ORDER BY ID_key
