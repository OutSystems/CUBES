[     1.587][MainProcess][INFO] Parsing specification...
[     1.590][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.591][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.591][MainProcess][DEBUG] Reading input files...
[     1.599][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/18-1.txt: ['string', 'string', 'int64']
[     1.604][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/18-3.txt: ['string', 'string']
[     1.609][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/18.out: ['string', 'string']
[     1.636][MainProcess][DEBUG] Generating DSL...
[     1.798][MainProcess][INFO] Creating 2 processes
[     1.949][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.961][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     4.456][cube-solver-0][WARNING] There is no solution for current loc (1).
[     4.457][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.458][MainProcess][DEBUG] Increasing generator loc to 2
[     4.465][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.504][cube-solver-1][WARNING] There is no solution for current loc (1).
[     4.505][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     4.523][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     9.464][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     9.583][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[    10.432][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[    10.451][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[    10.465][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[    10.478][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[    10.492][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[    11.430][cube-solver-0][DEBUG] Solving cube (l0 = summarise([10]), l1 = natural_join3())
[    12.351][cube-solver-1][DEBUG] Solving cube (l0 = summarise([31]), l1 = natural_join4())
[    12.375][cube-solver-1][DEBUG] Solving cube (l0 = summarise([31]), l1 = summarise([31]))
[    12.408][cube-solver-1][DEBUG] Solving cube (l0 = summarise([31]), l1 = filter())
[    12.448][cube-solver-1][DEBUG] Solving cube (l0 = summarise([31]), l1 = anti_join())
[    14.951][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([10]), l1 = natural_join3())
[    14.952][MainProcess][INFO] Statistics:
[    14.953][MainProcess][INFO] 	Generated cubes: 14
[    14.953][MainProcess][INFO] 	Attempted programs: 147
[    14.953][MainProcess][INFO] 		Rejected: 64
[    14.953][MainProcess][INFO] 		Failed: 82
[    14.953][MainProcess][INFO] 	Blacklist clauses: 31
[    14.953][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    14.955][MainProcess][DEBUG] 	0: Counter({'summarise': 955, 'natural_join': 400})
[    14.956][MainProcess][DEBUG] 	1: Counter({'natural_join3': 635, 'summarise': 272, 'natural_join': 192, 'mutate': 128, 'anti_join': 128})
[    14.956][MainProcess][INFO] Solution found: natural_join3(@param0, summarise(@param0, cost = max(cost), P_id), @param1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/18-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/18-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/18.out", col_types = cols(P_id = col_character(),S_name = col_character()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = max(cost)) %>% ungroup()
df4 <- inner_join(input1, df3) %>% inner_join(input2)
out <- df4 %>% select(P_id, S_name) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_id,
       S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.P_id AS P_id,
          LHS.cost AS cost,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.P_id AS P_id,
             LHS.cost AS cost
      FROM input1 AS LHS
      INNER JOIN
        (SELECT P_id,
                MAX(cost) AS cost
         FROM input1
         GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id
                                   AND LHS.cost = RHS.cost)) AS LHS
   INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY P_id
