[     2.734][MainProcess][INFO] Parsing specification...
[     2.737][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     2.737][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     2.738][MainProcess][DEBUG] Reading input files...
[     2.746][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-1.txt: ['string', 'string']
[     2.750][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-2.txt: ['string', 'string']
[     2.754][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19-3.txt: ['string', 'string']
[     2.758][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/19.out: ['string']
[     2.789][MainProcess][DEBUG] Generating DSL...
[     2.808][MainProcess][INFO] Creating 2 processes
[     2.817][MainProcess][DEBUG] Increasing generator loc to 2
[     2.850][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     2.860][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.971][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.972][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     2.975][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.121][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     3.123][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     3.125][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     3.126][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     3.258][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([4]))
[     3.737][cube-solver-1][DEBUG] Solving cube (l0 = filter([4]), l1 = natural_join4())
[     3.737][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = filter([4]))
[     3.743][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = anti_join())
[     3.747][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = left_join())
[     3.750][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = union())
[     3.753][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = intersect())
[     3.755][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = semi_join())
[     3.757][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = cross_join())
[     3.759][cube-solver-0][DEBUG] Solving cube (l0 = filter([4]), l1 = inner_join())
[     3.762][cube-solver-0][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([4]))
[     3.764][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([4]))
[     3.767][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = filter([4]))
[     3.769][cube-solver-0][DEBUG] Solving cube (l0 = intersect(), l1 = filter([4]))
[     3.771][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([4]))
[     3.774][cube-solver-0][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([4]))
[     3.776][cube-solver-0][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([4]))
[     3.778][MainProcess][DEBUG] Increasing generator loc to 3
[     3.779][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.157][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = natural_join())
[     5.153][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = natural_join3([2]))
[     5.290][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     5.703][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = natural_join4())
[     7.780][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = filter([4]))
[     7.785][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = anti_join())
[     9.849][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = left_join())
[    10.704][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = union())
[    10.974][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = intersect())
[    11.582][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = semi_join())
[    12.201][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = cross_join())
[    12.408][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([4]), l2 = inner_join())
[    15.600][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([4]))
[    15.603][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = filter([4]))
[    16.465][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union(), l2 = filter([4]))
[    17.350][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = filter([4]))
[    18.374][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([4]))
[    18.724][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join(), l2 = filter([4]))
[    21.010][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join(), l2 = filter([4]))
[    57.656][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]), l2 = filter([4]))
[    58.420][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3([2]), l2 = filter([4]))
[    58.434][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join4(), l2 = filter([4]))
[    58.439][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = natural_join([2]))
[    60.867][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = natural_join3([2]))
[    62.063][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = natural_join4())
[    67.534][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = filter([4]))
[    68.316][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = anti_join())
[    70.915][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = left_join())
[    73.075][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = filter([4]), l2 = anti_join())
[    73.077][MainProcess][INFO] Statistics:
[    73.079][MainProcess][INFO] 	Generated cubes: 49
[    73.079][MainProcess][INFO] 	Attempted programs: 7456
[    73.079][MainProcess][INFO] 		Rejected: 1579
[    73.079][MainProcess][INFO] 		Failed: 5876
[    73.079][MainProcess][INFO] 	Blacklist clauses: 8
[    73.079][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    73.081][MainProcess][DEBUG] 	0: Counter({'filter': 288, 'natural_join3': 64})
[    73.081][MainProcess][DEBUG] 	1: Counter({'natural_join4': 224, 'filter': 64, 'natural_join3': 64})
[    73.081][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    73.087][MainProcess][DEBUG] 	0: Counter({'natural_join': 8040, 'natural_join3': 3633})
[    73.090][MainProcess][DEBUG] 	1: Counter({'filter': 8193, 'inner_join': 3056, 'left_join': 128, 'union': 128, 'natural_join': 128, 'semi_join': 40})
[    73.093][MainProcess][DEBUG] 	2: Counter({'filter': 3608, 'inner_join': 3056, 'natural_join4': 1920, 'natural_join3': 1344, 'anti_join': 563, 'natural_join': 512, 'left_join': 462, 'union': 128, 'semi_join': 80})
[    73.094][MainProcess][INFO] Solution found: anti_join(natural_join3(@param2, @param0, @param1), filter(natural_join3(@param2, @param0, @param1), color != 'red'), 'S_key', 'S_name')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/19.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input3, input1) %>% inner_join(input2)
df5 <- df4 %>% filter(color != 'red')
df6 <- anti_join(df4, df5, by=c('S_key', 'S_name'))
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT *
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`S_name` AS `S_name`,
             `LHS`.`P_id` AS `P_id`,
             `RHS`.`color` AS `color`
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`S_name` AS `S_name`,
                `RHS`.`P_id` AS `P_id`
         FROM `input3` AS `LHS`
         INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT `LHS`.`S_key` AS `S_key`,
                     `LHS`.`S_name` AS `S_name`,
                     `LHS`.`P_id` AS `P_id`,
                     `RHS`.`color` AS `color`
              FROM
                (SELECT `LHS`.`S_key` AS `S_key`,
                        `LHS`.`S_name` AS `S_name`,
                        `RHS`.`P_id` AS `P_id`
                 FROM `input3` AS `LHS`
                 INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
              INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
           WHERE (`color` != 'red')) AS RHS
        WHERE (LHS.S_key = RHS.S_key
               AND LHS.S_name = RHS.S_name) ))
ORDER BY S_name
