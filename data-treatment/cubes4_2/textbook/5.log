[     1.656][MainProcess][INFO] Parsing specification...
[     1.659][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.660][MainProcess][DEBUG] Reading input files...
[     1.668][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5-1.txt: ['string', 'string', 'string']
[     1.673][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5-2.txt: ['string', 'string']
[     1.677][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5.out: ['string']
[     1.705][MainProcess][DEBUG] Generating DSL...
[     1.729][MainProcess][INFO] Creating 2 processes
[     1.770][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.772][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.128][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.129][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.131][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.132][cube-solver-1][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.133][MainProcess][DEBUG] Increasing generator loc to 3
[     2.134][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.135][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.136][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.140][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.806][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.860][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.864][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.866][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     3.042][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.044][MainProcess][INFO] Statistics:
[     3.045][MainProcess][INFO] 	Generated cubes: 8
[     3.045][MainProcess][INFO] 	Attempted programs: 5
[     3.045][MainProcess][INFO] 		Rejected: 4
[     3.045][MainProcess][INFO] 		Failed: 0
[     3.045][MainProcess][INFO] 	Blacklist clauses: 0
[     3.046][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.046][MainProcess][DEBUG] 	0: Counter({'natural_join': 47})
[     3.047][MainProcess][DEBUG] 	1: Counter({'summarise': 27, 'mutate': 21})
[     3.047][MainProcess][DEBUG] 	2: Counter({'filter': 48})
[     3.048][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param1, @param0), n = n(), F_key, F_name), n == max(n))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/5-1.txt", col_types = cols(C_name = col_character(),F_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/5-2.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/5.out", col_types = cols(F_name = col_character()))

df3 <- inner_join(input2, input1)
df4 <- df3 %>% group_by(F_key, F_name) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(n == max(n))
out <- df5 %>% select(F_name) %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT F_name
FROM
  (SELECT F_key,
          F_name,
          n
   FROM
     (SELECT F_key,
             F_name,
             n,
             MAX(n) OVER () AS zzz3
      FROM
        (SELECT F_key,
                F_name,
                COUNT() AS n
         FROM
           (SELECT LHS.F_key AS F_key,
                   LHS.F_name AS F_name,
                   RHS.C_name AS C_name,
                   RHS.Room AS Room
            FROM input2 AS LHS
            INNER JOIN input1 AS RHS ON (LHS.F_key = RHS.F_key))
         GROUP BY F_key,
                  F_name))
   WHERE (n = zzz3))
ORDER BY F_name
