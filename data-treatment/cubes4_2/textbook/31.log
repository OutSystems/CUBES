[     1.598][MainProcess][INFO] Parsing specification...
[     1.601][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.601][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.602][MainProcess][DEBUG] Reading input files...
[     1.609][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.614][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     1.619][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/employees.txt: ['int64', 'string', 'float64']
[     1.623][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/31.out: ['string']
[     1.652][MainProcess][DEBUG] Generating DSL...
[     1.677][MainProcess][INFO] Creating 2 processes
[     1.685][MainProcess][DEBUG] Increasing generator loc to 2
[     1.721][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.724][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.928][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.929][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     1.932][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.259][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     2.261][cube-solver-1][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     2.263][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     2.265][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     2.456][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([5]))
[     5.376][cube-solver-0][DEBUG] Solving cube (l0 = filter([20]), l1 = natural_join4())
[     5.877][cube-solver-1][DEBUG] Solving cube (l0 = filter([20]), l1 = filter([20]))
[     5.901][cube-solver-1][DEBUG] Solving cube (l0 = filter([20]), l1 = anti_join())
[     5.918][cube-solver-1][DEBUG] Solving cube (l0 = filter([20]), l1 = left_join())
[     5.927][cube-solver-1][DEBUG] Solving cube (l0 = filter([20]), l1 = union())
[     5.939][cube-solver-1][DEBUG] Solving cube (l0 = filter([20]), l1 = intersect())
[     5.952][cube-solver-1][DEBUG] Solving cube (l0 = filter([20]), l1 = semi_join())
[     5.964][cube-solver-1][DEBUG] Solving cube (l0 = filter([20]), l1 = cross_join())
[     5.974][cube-solver-1][DEBUG] Solving cube (l0 = filter([20]), l1 = inner_join())
[     5.988][cube-solver-1][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([20]))
[     5.998][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = filter([20]))
[     6.008][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = filter([20]))
[     6.016][cube-solver-1][DEBUG] Solving cube (l0 = intersect(), l1 = filter([20]))
[     6.025][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([20]))
[     6.034][cube-solver-1][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([20]))
[     6.043][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([20]))
[     6.051][MainProcess][DEBUG] Increasing generator loc to 3
[     6.052][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     6.910][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([20]), l2 = natural_join())
[    13.119][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = natural_join3([2]))
[    15.555][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    16.325][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = natural_join4())
[    29.229][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = filter([20]))
[    29.242][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = anti_join())
[    49.371][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = left_join())
[    49.519][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = union())
[    55.239][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = intersect())
[    55.284][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = semi_join())
[    59.121][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = cross_join())
[    65.625][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = inner_join())
[   264.426][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([20]))
[   264.435][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = filter([20]))
[   270.074][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union(), l2 = filter([20]))
[   275.551][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = filter([20]))
[   283.470][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([20]))
[   285.668][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join(), l2 = filter([20]))
[   344.186][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join(), l2 = filter([20]))
[   477.465][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]), l2 = filter([20]))
[   483.028][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3([2]), l2 = filter([20]))
[   483.038][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join4(), l2 = filter([20]))
[   483.056][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = natural_join([2]))
[   498.755][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = natural_join3([2]))
[   500.294][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = natural_join4())
[   546.123][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = filter([20]))
[   561.226][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = anti_join())
[   571.371][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = anti_join())
[   571.373][MainProcess][INFO] Statistics:
[   571.374][MainProcess][INFO] 	Generated cubes: 48
[   571.374][MainProcess][INFO] 	Attempted programs: 67602
[   571.374][MainProcess][INFO] 		Rejected: 5627
[   571.375][MainProcess][INFO] 		Failed: 61974
[   571.375][MainProcess][INFO] 	Blacklist clauses: 24
[   571.375][MainProcess][DEBUG] Printing statistics for good programs of size 2
[   571.378][MainProcess][DEBUG] 	0: Counter({'filter': 2160, 'natural_join3': 480})
[   571.380][MainProcess][DEBUG] 	1: Counter({'natural_join4': 1680, 'filter': 480, 'natural_join3': 480})
[   571.380][MainProcess][DEBUG] Printing statistics for good programs of size 3
[   571.404][MainProcess][DEBUG] 	0: Counter({'natural_join': 40200, 'natural_join3': 25571})
[   571.421][MainProcess][DEBUG] 	1: Counter({'filter': 49692, 'inner_join': 12920, 'left_join': 960, 'union': 960, 'natural_join': 960, 'semi_join': 280})
[   571.438][MainProcess][DEBUG] 	2: Counter({'filter': 20354, 'natural_join4': 14400, 'inner_join': 12920, 'natural_join3': 10080, 'natural_join': 3840, 'anti_join': 1700, 'left_join': 960, 'union': 960, 'semi_join': 560})
[   571.438][MainProcess][INFO] Solution found: anti_join(natural_join3(@param2, @param1, @param0), filter(@param0, str_detect(aname, 'Boeing') | crusingrange <= 3000), 'aname')
[   571.829][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/employees.txt", col_types = cols(eid = col_integer(),ename = col_character(),salary = col_double()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/31.out", col_types = cols(ename = col_character()))

df4 <- inner_join(input3, input2) %>% inner_join(input1)
df5 <- input1 %>% filter(str_detect(aname, 'Boeing') | crusingrange <= 3000)
df6 <- anti_join(df4, df5, by=c('aname'))
out <- df6 %>% select(ename) %>% distinct() %>% arrange(ename)

Failed to generate SQL query
