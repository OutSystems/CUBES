[     3.409][MainProcess][INFO] Parsing specification...
[     3.414][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.414][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.414][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.415][MainProcess][DEBUG] Reading input files...
[     3.425][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/8-1.txt: ['string', 'string', 'int64']
[     3.431][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/8.out: ['string', 'int64']
[     3.469][MainProcess][DEBUG] Generating DSL...
[     3.517][MainProcess][INFO] Creating 2 processes
[     3.573][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.589][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     4.602][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     4.633][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     5.325][cube-solver-1][DEBUG] Found solution with cube (l0 = filter(), l1 = summarise())
[     5.327][MainProcess][INFO] Statistics:
[     5.328][MainProcess][INFO] 	Generated cubes: 2
[     5.328][MainProcess][INFO] 	Attempted programs: 12
[     5.328][MainProcess][INFO] 		Rejected: 11
[     5.328][MainProcess][INFO] 		Failed: 0
[     5.328][MainProcess][INFO] 	Blacklist clauses: 0
[     5.328][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     5.329][MainProcess][DEBUG] 	0: Counter({'filter': 93, 'summarise': 31})
[     5.329][MainProcess][DEBUG] 	1: Counter({'summarise': 93, 'filter': 31})
[     5.329][MainProcess][INFO] Solution found: summarise(filter(@param0, level != 'JR'), meanage = mean(age), level)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/8-1.txt", col_types = cols(S_key = col_character(),level = col_character(),age = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/textbook/tables/8.out", col_types = cols(level = col_character(),meanage = col_integer()))

df2 <- input1 %>% filter(level != 'JR')
df3 <- df2 %>% group_by(level) %>% summarise(meanage = mean(age)) %>% ungroup()
out <- df3 %>% select(level, meanage) %>% arrange(level)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `level`,
       `meanage`
FROM
  (SELECT `level`,
          AVG(`age`) AS `meanage`
   FROM
     (SELECT *
      FROM `input1`
      WHERE (`level` != 'JR'))
   GROUP BY LEVEL)
ORDER BY LEVEL
