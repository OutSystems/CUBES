[     3.284][MainProcess][INFO] Parsing specification...
[     3.290][MainProcess][DEBUG] Reading input files...
[     3.299][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/15-1.txt: ['string', 'string']
[     3.305][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/15-2.txt: ['string', 'string']
[     3.311][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/15-3.txt: ['string', 'string']
[     3.316][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/15.out: ['string']
[     3.353][MainProcess][DEBUG] Generating DSL...
[     3.386][MainProcess][INFO] Creating 2 processes
[     3.437][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.453][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.946][cube-solver-0][WARNING] There is no solution for current loc (2).
[     3.947][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.952][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     3.956][cube-solver-0][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     3.958][MainProcess][DEBUG] Increasing generator loc to 3
[     3.960][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.979][cube-solver-1][WARNING] There is no solution for current loc (2).
[     3.979][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     3.981][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.942][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     4.954][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     4.957][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     4.958][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     4.961][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     4.961][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     4.964][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     4.967][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     7.200][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     7.214][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     7.218][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     7.221][cube-solver-0][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     7.224][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter())
[     7.226][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3([2]), l2 = filter())
[     7.312][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     7.313][MainProcess][INFO] Statistics:
[     7.313][MainProcess][INFO] 	Generated cubes: 18
[     7.313][MainProcess][INFO] 	Attempted programs: 208
[     7.313][MainProcess][INFO] 		Rejected: 53
[     7.313][MainProcess][INFO] 		Failed: 154
[     7.314][MainProcess][INFO] 	Blacklist clauses: 2
[     7.314][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     7.315][MainProcess][DEBUG] 	0: Counter({'natural_join3': 439, 'summarise': 8})
[     7.315][MainProcess][DEBUG] 	1: Counter({'mutate': 320, 'summarise': 119, 'natural_join3': 8})
[     7.316][MainProcess][DEBUG] 	2: Counter({'filter': 448})
[     7.316][MainProcess][INFO] Solution found: filter(summarise(natural_join3(@param2, @param0, @param1), n = n(), S_name, color), color == 'red' & n == max(n))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/15-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/15-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/15-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/15.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input3, input1) %>% inner_join(input2)
df5 <- df4 %>% group_by(S_name, color) %>% summarise(n = n()) %>% ungroup()
df6 <- df5 %>% filter(color == 'red' & n == max(n))
out <- df6 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT `S_name`,
          `color`,
          `n`
   FROM
     (SELECT `S_name`,
             `color`,
             `n`,
             MAX(`n`) OVER () AS `zzz4`
      FROM
        (SELECT `S_name`,
                `color`,
                COUNT() AS `n`
         FROM
           (SELECT `LHS`.`S_key` AS `S_key`,
                   `LHS`.`S_name` AS `S_name`,
                   `LHS`.`P_id` AS `P_id`,
                   `RHS`.`color` AS `color`
            FROM
              (SELECT `LHS`.`S_key` AS `S_key`,
                      `LHS`.`S_name` AS `S_name`,
                      `RHS`.`P_id` AS `P_id`
               FROM `input3` AS `LHS`
               INNER JOIN `input1` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
            INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
         GROUP BY `S_name`,
                  `color`))
   WHERE (`color` = 'red'
          AND n = zzz4))
ORDER BY S_name
