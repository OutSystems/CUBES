[     1.575][MainProcess][INFO] Parsing specification...
[     1.580][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.580][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.580][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.581][MainProcess][DEBUG] Reading input files...
[     1.589][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/9-1.txt: ['string', 'string', 'string']
[     1.594][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/9-2.txt: ['string', 'string']
[     1.611][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/45.out: ['string', 'string']
[     1.642][MainProcess][DEBUG] Generating DSL...
[     1.669][MainProcess][INFO] Creating 16 processes
[     1.734][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.734][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.735][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.735][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.735][MainProcess][DEBUG] Increasing generator loc to 3
[     1.736][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.737][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.741][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.745][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.748][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.754][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.756][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.760][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.764][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.764][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.780][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.786][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.330][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.331][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.333][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.521][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.522][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.525][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.563][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.563][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.565][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.581][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.581][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.584][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.699][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.706][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.715][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.723][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.726][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.726][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.732][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.732][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.734][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.737][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.739][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.740][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.740][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.743][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.749][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.766][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([2]), l2 = filter([1]))
[     2.774][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = summarise([2]))
[     2.780][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = summarise([2]))
[     2.786][cube-solver-9][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([1]), l2 = intersect())
[     2.790][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = mutate())
[     2.801][cube-solver-10][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([1]), l2 = semi_join())
[     2.920][cube-solver-6][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.922][MainProcess][INFO] Statistics:
[     2.922][MainProcess][INFO] 	Generated cubes: 30
[     2.922][MainProcess][INFO] 	Attempted programs: 1
[     2.922][MainProcess][INFO] 		Rejected: 0
[     2.922][MainProcess][INFO] 		Failed: 0
[     2.922][MainProcess][INFO] 	Blacklist clauses: 3
[     2.922][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.923][MainProcess][DEBUG] 	0: Counter({'natural_join': 35, 'summarise': 34})
[     2.923][MainProcess][DEBUG] 	1: Counter({'filter': 53, 'mutate': 11, 'summarise': 5})
[     2.923][MainProcess][DEBUG] 	2: Counter({'left_join': 16, 'filter': 16, 'mutate': 14, 'semi_join': 9, 'summarise': 5, 'union': 5, 'natural_join3': 4})
[     2.923][MainProcess][INFO] Solution found: mutate(filter(natural_join(@param1, @param0), Room == 'R128'), n = n())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/9-1.txt", col_types = cols(ID_class = col_character(),ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/9-2.txt", col_types = cols(ID_key = col_character(),F_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/45.out", col_types = cols(F_name = col_character(),Room = col_character()))

df3 <- inner_join(input2, input1)
df4 <- df3 %>% filter(Room == 'R128')
df5 <- df4 %>% mutate(n = n())
out <- df5 %>% select(F_name, Room) %>% distinct() %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `F_name`,
                `Room`
FROM
  (SELECT `LHS`.`ID_key` AS `ID_key`,
          `LHS`.`F_name` AS `F_name`,
          `RHS`.`ID_class` AS `ID_class`,
          `RHS`.`Room` AS `Room`
   FROM `input2` AS `LHS`
   INNER JOIN `input1` AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
WHERE (`Room` = 'R128')
ORDER BY F_name
