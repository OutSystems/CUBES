[     1.597][MainProcess][INFO] Parsing specification...
[     1.609][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.609][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.610][MainProcess][DEBUG] Reading input files...
[     1.632][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.638][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.644][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.651][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/20.out: ['string', 'string', 'string', 'string']
[     1.683][MainProcess][DEBUG] Generating DSL...
[     1.702][MainProcess][INFO] Creating 16 processes
[     1.774][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.774][MainProcess][DEBUG] Increasing generator loc to 2
[     1.776][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.776][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.776][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.776][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.776][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.776][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.782][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.782][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.787][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.800][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.800][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.800][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.811][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.813][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.824][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.016][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.017][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     2.018][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.055][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     2.059][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     2.060][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.060][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     2.062][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     2.063][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.064][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.065][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     2.065][cube-solver-3][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     2.067][MainProcess][DEBUG] Increasing generator loc to 3
[     2.067][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.067][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.069][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     2.072][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.072][cube-solver-12][DEBUG] Solving cube (l0 = filter([1]), l1 = semi_join())
[     2.077][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.083][cube-solver-13][DEBUG] Solving cube (l0 = filter([2]), l1 = cross_join())
[     2.084][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([2]))
[     2.090][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.091][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.119][cube-solver-10][DEBUG] Solving cube (l0 = filter([4]), l1 = union())
[     2.126][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.137][cube-solver-6][DEBUG] Solving cube (l0 = filter([4]), l1 = natural_join4())
[     2.224][cube-solver-5][DEBUG] Found solution with cube (l0 = filter(), l1 = natural_join3())
[     2.225][MainProcess][INFO] Statistics:
[     2.225][MainProcess][INFO] 	Generated cubes: 29
[     2.225][MainProcess][INFO] 	Attempted programs: 11
[     2.225][MainProcess][INFO] 		Rejected: 0
[     2.225][MainProcess][INFO] 		Failed: 10
[     2.225][MainProcess][INFO] 	Blacklist clauses: 4
[     2.225][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.226][MainProcess][DEBUG] 	0: Counter({'natural_join3': 9, 'filter': 6})
[     2.226][MainProcess][DEBUG] 	1: Counter({'filter': 9, 'natural_join4': 3, 'natural_join3': 3})
[     2.226][MainProcess][INFO] Solution found: natural_join3(@param0, filter(@param1, color == 'red'), @param2)
[     2.524][cube-solver-6][DEBUG] Found solution with cube (l0 = filter([4]), l1 = natural_join4())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/20.out", col_types = cols(S_key = col_character(),P_id = col_character(),S_name = col_character(),color = col_character()))

df4 <- input2 %>% filter(color == 'red')
df5 <- inner_join(input1, df4) %>% inner_join(input3)
out <- df5 %>% select(S_key, P_id, S_name, color) %>% arrange(S_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_key`,
       `P_id`,
       `S_name`,
       `color`
FROM
  (SELECT `LHS`.`S_key` AS `S_key`,
          `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`,
          `RHS`.`S_name` AS `S_name`
   FROM
     (SELECT `LHS`.`S_key` AS `S_key`,
             `LHS`.`P_id` AS `P_id`,
             `RHS`.`color` AS `color`
      FROM `input1` AS `LHS`
      INNER JOIN
        (SELECT *
         FROM `input2`
         WHERE (`color` = 'red')) AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
   INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_key
