[     3.451][MainProcess][INFO] Parsing specification...
[     3.466][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.466][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.467][MainProcess][DEBUG] Reading input files...
[     3.477][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/aircraft.txt: ['int64', 'string', 'int64']
[     3.482][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/employees.txt: ['int64', 'string', 'int64']
[     3.486][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/certified.txt: ['int64', 'int64']
[     3.496][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/50.out: ['int64', 'string']
[     3.532][MainProcess][DEBUG] Generating DSL...
[     3.563][MainProcess][INFO] Creating 16 processes
[     3.636][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.636][MainProcess][DEBUG] Increasing generator loc to 2
[     3.638][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.638][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.638][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.638][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.641][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.645][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.650][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.654][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.658][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.658][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.666][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.671][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.673][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.690][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.702][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     4.107][cube-solver-0][WARNING] There is no solution for current loc (1).
[     4.108][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     4.109][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.467][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     4.477][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     4.480][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     4.482][cube-solver-1][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     4.484][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     4.486][cube-solver-1][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([1]))
[     4.487][cube-solver-10][DEBUG] Solving cube (l0 = filter([1]), l1 = union())
[     4.488][cube-solver-8][DEBUG] Solving cube (l0 = filter([1]), l1 = anti_join())
[     4.489][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([1]))
[     4.490][MainProcess][DEBUG] Increasing generator loc to 3
[     4.491][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.493][cube-solver-9][DEBUG] Solving cube (l0 = filter([1]), l1 = left_join())
[     4.493][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     4.494][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     4.498][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     4.501][cube-solver-7][DEBUG] Solving cube (l0 = filter([1]), l1 = filter([1]))
[     4.502][cube-solver-12][DEBUG] Solving cube (l0 = filter([1]), l1 = semi_join())
[     4.507][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     4.509][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     4.551][cube-solver-5][DEBUG] Solving cube (l0 = filter([3]), l1 = natural_join3())
[     4.554][cube-solver-4][DEBUG] Solving cube (l0 = filter([3]), l1 = natural_join())
[     4.558][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     4.561][cube-solver-11][DEBUG] Solving cube (l0 = filter([3]), l1 = intersect())
[     4.564][cube-solver-13][DEBUG] Solving cube (l0 = filter([3]), l1 = cross_join())
[     4.568][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     4.585][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     4.612][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([5]))
[     4.621][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     4.709][cube-solver-14][DEBUG] Solving cube (l0 = filter([13]), l1 = inner_join())
[     4.734][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     4.750][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([17]))
[     4.751][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([17]))
[     4.766][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.766][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.881][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([20]))
[     5.698][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([67]), l2 = natural_join3([2]))
[     5.753][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([67]), l2 = anti_join())
[     5.930][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([67]), l2 = natural_join([1]))
[     5.961][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([67]), l2 = union())
[     5.997][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([67]), l2 = natural_join4())
[     6.019][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([67]))
[     6.066][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union(), l2 = filter([67]))
[     6.066][cube-solver-1][DEBUG] Found solution with cube (l0 = natural_join([1]), l1 = filter([67]), l2 = natural_join([1]))
[     6.067][MainProcess][INFO] Statistics:
[     6.067][MainProcess][INFO] 	Generated cubes: 36
[     6.067][MainProcess][INFO] 	Attempted programs: 4
[     6.067][MainProcess][INFO] 		Rejected: 0
[     6.067][MainProcess][INFO] 		Failed: 3
[     6.068][MainProcess][INFO] 	Blacklist clauses: 71
[     6.068][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     6.068][MainProcess][DEBUG] 	0: Counter({'filter': 310, 'natural_join3': 109})
[     6.069][MainProcess][DEBUG] 	1: Counter({'natural_join4': 191, 'natural_join3': 119, 'filter': 109})
[     6.069][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     6.069][MainProcess][DEBUG] 	0: Counter({'natural_join': 59})
[     6.069][MainProcess][DEBUG] 	1: Counter({'filter': 60})
[     6.069][MainProcess][DEBUG] 	2: Counter({'natural_join3': 35, 'anti_join': 15, 'union': 5, 'natural_join': 4, 'natural_join4': 1})
[     6.070][MainProcess][INFO] Solution found: natural_join(filter(natural_join(@param2, @param1), salary > 100000 & salary < 150000), @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/employees.txt", col_types = cols(eid = col_integer(),ename = col_character(),salary = col_integer()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/50.out", col_types = cols(eid = col_integer(),ename = col_character()))

df4 <- inner_join(input3, input2)
df5 <- df4 %>% filter(salary > 100000 & salary < 150000)
df6 <- inner_join(df5, input1)
out <- df6 %>% select(eid, ename) %>% distinct() %>% arrange(eid)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT eid,
                ename
FROM
  (SELECT LHS.eid AS eid,
          LHS.aid AS aid,
          LHS.ename AS ename,
          LHS.salary AS salary,
          RHS.aname AS aname,
          RHS.crusingrange AS crusingrange
   FROM
     (SELECT *
      FROM
        (SELECT LHS.eid AS eid,
                LHS.aid AS aid,
                RHS.ename AS ename,
                RHS.salary AS salary
         FROM input3 AS LHS
         INNER JOIN input2 AS RHS ON (LHS.eid = RHS.eid))
      WHERE (salary > 100000.0
             AND salary < 150000.0)) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.aid = RHS.aid))
ORDER BY eid
