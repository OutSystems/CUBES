[     1.567][MainProcess][INFO] Parsing specification...
[     1.571][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.572][MainProcess][DEBUG] Reading input files...
[     1.577][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.581][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.584][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.589][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/37.out: ['string']
[     1.618][MainProcess][DEBUG] Generating DSL...
[     1.640][MainProcess][INFO] Creating 16 processes
[     1.705][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.705][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.705][MainProcess][DEBUG] Increasing generator loc to 2
[     1.706][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.706][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.707][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.711][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.718][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.721][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.722][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.726][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.733][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.739][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.763][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.765][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.951][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.951][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     1.952][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.035][cube-solver-1][WARNING] There is no solution for current loc (1).
[     2.035][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.036][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.237][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.238][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.241][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.241][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.243][cube-solver-2][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.243][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.244][cube-solver-2][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.244][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.245][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.246][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.247][cube-solver-2][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     2.247][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.248][cube-solver-2][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[     2.248][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     2.249][cube-solver-8][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     2.250][cube-solver-2][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[     2.250][cube-solver-6][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[     2.250][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.251][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     2.252][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     2.253][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     2.254][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[     2.255][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     2.256][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     2.257][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[     2.258][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[     2.258][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.259][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[     2.261][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join())
[     2.261][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[     2.261][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.262][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[     2.262][cube-solver-11][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise())
[     2.263][cube-solver-8][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[     2.264][MainProcess][DEBUG] Increasing generator loc to 3
[     2.264][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.265][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.265][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.283][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.287][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.307][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.311][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.346][cube-solver-2][DEBUG] Found solution with cube (l0 = mutate(), l1 = natural_join3())
[     2.348][MainProcess][INFO] Statistics:
[     2.348][MainProcess][INFO] 	Generated cubes: 51
[     2.348][MainProcess][INFO] 	Attempted programs: 1
[     2.348][MainProcess][INFO] 		Rejected: 0
[     2.348][MainProcess][INFO] 		Failed: 0
[     2.348][MainProcess][INFO] 	Blacklist clauses: 1
[     2.348][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.348][MainProcess][DEBUG] 	0: Counter({'mutate': 15})
[     2.349][MainProcess][DEBUG] 	1: Counter({'natural_join3': 10, 'natural_join4': 5})
[     2.349][MainProcess][INFO] Solution found: natural_join3(mutate(@param1, n = n()), @param0, @param2)
[     2.373][cube-solver-6][DEBUG] Found solution with cube (l0 = mutate(), l1 = natural_join4())
[     2.418][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join3())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/37.out", col_types = cols(S_name = col_character()))

df4 <- input2 %>% mutate(n = n())
df5 <- inner_join(df4, input1) %>% inner_join(input3)
out <- df5 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT S_name
FROM
  (SELECT LHS.P_id AS P_id,
          LHS.color AS color,
          LHS.n AS n,
          LHS.S_key AS S_key,
          RHS.S_name AS S_name
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.color AS color,
             LHS.n AS n,
             RHS.S_key AS S_key
      FROM
        (SELECT P_id,
                color,
                COUNT(*) OVER () AS n
         FROM input2) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
   INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_name
