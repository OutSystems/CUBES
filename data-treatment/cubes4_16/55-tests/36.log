[     1.596][MainProcess][INFO] Parsing specification...
[     1.600][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.600][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.600][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.601][MainProcess][DEBUG] Reading input files...
[     1.606][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-1.txt: ['string', 'string']
[     1.610][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-2.txt: ['string', 'string']
[     1.613][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/21-3.txt: ['string', 'string']
[     1.618][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/36.out: ['string']
[     1.648][MainProcess][DEBUG] Generating DSL...
[     1.676][MainProcess][INFO] Creating 16 processes
[     1.737][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.738][MainProcess][DEBUG] Increasing generator loc to 3
[     1.740][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.743][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.743][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.748][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.752][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.759][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.763][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.767][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.771][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.772][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.772][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.780][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.802][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.316][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.317][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.319][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.319][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.319][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.321][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.461][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.462][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.466][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.519][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.520][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.522][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.844][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.846][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.848][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.850][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.849][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.851][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.853][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.857][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.858][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.862][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.862][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.866][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.866][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = intersect())
[     2.867][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.870][cube-solver-6][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = semi_join())
[     2.870][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise([1]))
[     2.870][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.871][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = cross_join())
[     2.873][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([1]), l2 = filter())
[     2.875][cube-solver-6][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = mutate())
[     2.878][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter(), l2 = inner_join())
[     2.881][cube-solver-6][DEBUG] Solving cube (l0 = summarise([2]), l1 = left_join(), l2 = filter([1]))
[     2.881][cube-solver-12][DEBUG] Solving cube (l0 = summarise([2]), l1 = anti_join(), l2 = filter([1]))
[     2.884][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = union(), l2 = filter([1]))
[     2.889][cube-solver-6][DEBUG] Solving cube (l0 = summarise([2]), l1 = intersect(), l2 = filter([1]))
[     2.889][cube-solver-12][DEBUG] Solving cube (l0 = summarise([2]), l1 = semi_join(), l2 = filter([1]))
[     2.892][cube-solver-7][DEBUG] Solving cube (l0 = summarise([2]), l1 = cross_join(), l2 = filter([1]))
[     2.896][cube-solver-12][DEBUG] Solving cube (l0 = summarise([2]), l1 = inner_join(), l2 = filter([1]))
[     2.896][cube-solver-6][DEBUG] Solving cube (l0 = summarise([2]), l1 = mutate(), l2 = filter([1]))
[     2.900][cube-solver-7][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join(), l2 = summarise([3]))
[     2.903][cube-solver-6][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join(), l2 = mutate())
[     2.903][cube-solver-12][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join3([1]), l2 = summarise([3]))
[     2.908][cube-solver-7][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join3([1]), l2 = mutate())
[     2.908][cube-solver-6][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join4(), l2 = summarise([3]))
[     2.913][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = summarise([3]))
[     2.924][cube-solver-13][DEBUG] Solving cube (l0 = filter([1]), l1 = natural_join4(), l2 = mutate())
[     2.976][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = mutate())
[     2.987][cube-solver-14][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([7]), l2 = natural_join())
[     2.998][cube-solver-11][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     3.000][cube-solver-14][DEBUG] Solving cube (l0 = filter([4]), l1 = summarise([9]), l2 = natural_join3([1]))
[     3.000][MainProcess][INFO] Statistics:
[     3.000][MainProcess][INFO] 	Generated cubes: 49
[     3.000][MainProcess][INFO] 	Attempted programs: 1
[     3.000][MainProcess][INFO] 		Rejected: 0
[     3.000][MainProcess][INFO] 		Failed: 0
[     3.000][MainProcess][INFO] 	Blacklist clauses: 14
[     3.000][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.001][MainProcess][DEBUG] 	0: Counter({'natural_join3': 20})
[     3.001][MainProcess][DEBUG] 	1: Counter({'filter': 12, 'mutate': 8})
[     3.001][MainProcess][DEBUG] 	2: Counter({'filter': 8, 'summarise': 7, 'mutate': 5})
[     3.001][MainProcess][INFO] Solution found: filter(mutate(natural_join3(@param1, @param0, @param2), n = n()), color == 'red')
[     3.031][cube-solver-10][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.098][cube-solver-13][DEBUG] Found solution with cube (l0 = filter([1]), l1 = natural_join4(), l2 = mutate())
[     3.158][cube-solver-4][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     3.230][cube-solver-7][DEBUG] Found solution with cube (l0 = filter([1]), l1 = natural_join3([1]), l2 = mutate())
[     3.334][cube-solver-14][DEBUG] Found solution with cube (l0 = filter([4]), l1 = summarise([9]), l2 = natural_join3([1]))
[     3.402][cube-solver-12][DEBUG] Found solution with cube (l0 = filter([1]), l1 = natural_join3([1]), l2 = summarise([3]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/36.out", col_types = cols(S_name = col_character()))

df4 <- inner_join(input2, input1) %>% inner_join(input3)
df5 <- df4 %>% mutate(n = n())
df6 <- df5 %>% filter(color == 'red')
out <- df6 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `S_name`
FROM
  (SELECT `P_id`,
          `color`,
          `S_key`,
          `S_name`,
          COUNT(*) OVER () AS `n`
   FROM
     (SELECT `LHS`.`P_id` AS `P_id`,
             `LHS`.`color` AS `color`,
             `LHS`.`S_key` AS `S_key`,
             `RHS`.`S_name` AS `S_name`
      FROM
        (SELECT `LHS`.`P_id` AS `P_id`,
                `LHS`.`color` AS `color`,
                `RHS`.`S_key` AS `S_key`
         FROM `input2` AS `LHS`
         INNER JOIN `input1` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`)) AS `LHS`
      INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)))
WHERE (`color` = 'red')
ORDER BY S_name
