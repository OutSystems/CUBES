[     1.590][MainProcess][INFO] Parsing specification...
[     1.595][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.595][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.596][MainProcess][DEBUG] Reading input files...
[     1.607][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-1.txt: ['string', 'string', 'int64']
[     1.614][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/18-3.txt: ['string', 'string']
[     1.619][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/43.out: ['string', 'int64']
[     1.649][MainProcess][DEBUG] Generating DSL...
[     2.500][MainProcess][INFO] Creating 16 processes
[     2.571][MainProcess][DEBUG] Increasing generator loc to 3
[     3.614][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.615][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.615][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.618][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.636][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.644][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.651][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.651][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.654][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.654][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.655][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.656][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     3.660][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     3.665][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.693][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.693][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[    65.471][cube-solver-2][WARNING] There is no solution for current loc (2).
[    65.472][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    65.579][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    65.926][cube-solver-1][WARNING] There is no solution for current loc (2).
[    65.927][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    66.020][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    66.225][cube-solver-3][WARNING] There is no solution for current loc (2).
[    66.226][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[    66.308][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[    66.527][cube-solver-0][WARNING] There is no solution for current loc (2).
[    66.528][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[    66.606][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    96.748][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate())
[    96.916][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = mutate())
[    97.069][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = summarise())
[    97.230][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = mutate())
[    97.284][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join())
[    97.385][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join3())
[    97.433][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([1]), l2 = mutate())
[    97.547][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[    97.734][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]), l2 = natural_join4())
[    97.869][cube-solver-15][DEBUG] Solving cube (l0 = summarise([6]), l1 = summarise([6]), l2 = summarise([6]))
[    97.885][cube-solver-13][DEBUG] Solving cube (l0 = summarise([6]), l1 = summarise([6]), l2 = filter())
[    98.031][cube-solver-15][DEBUG] Solving cube (l0 = summarise([9]), l1 = summarise([9]), l2 = anti_join())
[    98.046][cube-solver-13][DEBUG] Solving cube (l0 = summarise([9]), l1 = summarise([9]), l2 = left_join())
[    98.409][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([14]), l2 = mutate())
[    98.682][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[    98.888][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise([19]))
[    98.969][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise([19]))
[    99.007][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([19]), l2 = summarise([19]))
[    99.052][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise([20]))
[    99.141][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([23]), l2 = summarise([23]))
[    99.227][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([24]), l2 = summarise([24]))
[    99.384][cube-solver-8][DEBUG] Solving cube (l0 = summarise([24]), l1 = summarise([24]), l2 = union())
[    99.514][cube-solver-14][DEBUG] Solving cube (l0 = summarise([24]), l1 = summarise([24]), l2 = intersect())
[    99.575][cube-solver-10][DEBUG] Solving cube (l0 = summarise([24]), l1 = summarise([24]), l2 = semi_join())
[    99.825][cube-solver-12][DEBUG] Solving cube (l0 = summarise([27]), l1 = summarise([27]), l2 = mutate())
[    99.980][cube-solver-4][DEBUG] Solving cube (l0 = summarise([27]), l1 = summarise([27]), l2 = cross_join())
[   100.000][cube-solver-12][DEBUG] Solving cube (l0 = summarise([34]), l1 = summarise([34]), l2 = inner_join())
[   102.927][cube-solver-7][DEBUG] Solving cube (l0 = summarise([42]), l1 = filter(), l2 = summarise([42]))
[   103.143][cube-solver-7][DEBUG] Solving cube (l0 = summarise([42]), l1 = filter(), l2 = mutate())
[   103.321][cube-solver-7][DEBUG] Solving cube (l0 = summarise([42]), l1 = anti_join(), l2 = summarise([42]))
[   110.504][cube-solver-6][DEBUG] Solving cube (l0 = summarise([42]), l1 = anti_join(), l2 = mutate())
[   111.924][cube-solver-5][DEBUG] Solving cube (l0 = summarise([42]), l1 = left_join(), l2 = summarise([42]))
[   133.797][cube-solver-10][DEBUG] Solving cube (l0 = summarise([42]), l1 = left_join(), l2 = mutate())
[   144.966][cube-solver-10][DEBUG] Solving cube (l0 = summarise([42]), l1 = union(), l2 = summarise([42]))
[   150.437][cube-solver-6][DEBUG] Solving cube (l0 = summarise([42]), l1 = union(), l2 = mutate())
[   154.557][cube-solver-5][DEBUG] Solving cube (l0 = summarise([42]), l1 = intersect(), l2 = summarise([42]))
[   157.267][cube-solver-0][DEBUG] Solving cube (l0 = summarise([42]), l1 = natural_join3(), l2 = mutate())
[   157.353][cube-solver-3][DEBUG] Solving cube (l0 = summarise([42]), l1 = natural_join3(), l2 = summarise([42]))
[   157.422][cube-solver-2][DEBUG] Solving cube (l0 = summarise([42]), l1 = natural_join(), l2 = summarise([42]))
[   157.569][cube-solver-1][DEBUG] Solving cube (l0 = summarise([42]), l1 = natural_join(), l2 = mutate())
[   163.697][cube-solver-8][DEBUG] Solving cube (l0 = summarise([42]), l1 = intersect(), l2 = mutate())
[   165.479][cube-solver-13][DEBUG] Solving cube (l0 = summarise([42]), l1 = semi_join(), l2 = summarise([42]))
[   169.908][cube-solver-6][DEBUG] Solving cube (l0 = summarise([42]), l1 = semi_join(), l2 = mutate())
[   170.450][cube-solver-1][DEBUG] Solving cube (l0 = summarise([42]), l1 = cross_join(), l2 = summarise([42]))
[   176.245][cube-solver-6][DEBUG] Solving cube (l0 = summarise([42]), l1 = cross_join(), l2 = mutate())
[   180.710][cube-solver-8][DEBUG] Solving cube (l0 = summarise([42]), l1 = mutate(), l2 = natural_join())
[   192.971][cube-solver-9][DEBUG] Solving cube (l0 = summarise([42]), l1 = mutate([2]), l2 = natural_join3())
[   198.894][cube-solver-8][DEBUG] Solving cube (l0 = summarise([42]), l1 = mutate([2]), l2 = natural_join4())
[   199.280][cube-solver-8][DEBUG] Solving cube (l0 = summarise([42]), l1 = mutate([2]), l2 = summarise([42]))
[   199.516][cube-solver-8][DEBUG] Solving cube (l0 = summarise([42]), l1 = mutate([2]), l2 = filter())
[   199.717][cube-solver-8][DEBUG] Solving cube (l0 = summarise([42]), l1 = mutate([2]), l2 = anti_join())
[   200.180][cube-solver-10][DEBUG] Solving cube (l0 = summarise([42]), l1 = mutate([2]), l2 = left_join())
[   202.598][cube-solver-13][DEBUG] Solving cube (l0 = summarise([42]), l1 = mutate([2]), l2 = union())
[   203.918][cube-solver-2][DEBUG] Solving cube (l0 = summarise([42]), l1 = mutate([2]), l2 = intersect())
[   216.919][cube-solver-10][DEBUG] Solving cube (l0 = summarise([42]), l1 = mutate([2]), l2 = semi_join())
[   226.311][cube-solver-10][DEBUG] Solving cube (l0 = summarise([42]), l1 = mutate([2]), l2 = cross_join())
[   228.415][cube-solver-13][DEBUG] Solving cube (l0 = summarise([42]), l1 = mutate([2]), l2 = mutate([2]))
[   228.615][cube-solver-13][DEBUG] Solving cube (l0 = summarise([42]), l1 = mutate([2]), l2 = inner_join())
[   228.740][cube-solver-2][DEBUG] Solving cube (l0 = summarise([42]), l1 = inner_join(), l2 = summarise([42]))
[   230.999][cube-solver-14][DEBUG] Solving cube (l0 = summarise([42]), l1 = inner_join(), l2 = mutate([2]))
[   235.315][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = summarise([42]), l2 = summarise([42]))
[   235.541][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = summarise([42]), l2 = mutate([2]))
[   235.781][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = mutate([2]), l2 = summarise([42]))
[   236.013][cube-solver-0][DEBUG] Solving cube (l0 = filter(), l1 = mutate([2]), l2 = mutate([2]))
[   236.218][cube-solver-0][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([42]), l2 = summarise([42]))
[   236.459][cube-solver-0][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([42]), l2 = mutate([2]))
[   248.195][cube-solver-3][DEBUG] Found solution with cube (l0 = summarise([42]), l1 = natural_join3(), l2 = summarise([42]))
[   248.198][MainProcess][INFO] Statistics:
[   248.199][MainProcess][INFO] 	Generated cubes: 70
[   248.200][MainProcess][INFO] 	Attempted programs: 10856
[   248.200][MainProcess][INFO] 		Rejected: 1901
[   248.200][MainProcess][INFO] 		Failed: 8954
[   248.200][MainProcess][INFO] 	Blacklist clauses: 44
[   248.200][MainProcess][DEBUG] Printing statistics for good programs of size 3
[   248.225][MainProcess][DEBUG] 	0: Counter({'summarise': 41429, 'natural_join': 1872, 'anti_join': 216})
[   248.246][MainProcess][DEBUG] 	1: Counter({'mutate': 11588, 'natural_join3': 11137, 'summarise': 11072, 'union': 3952, 'left_join': 1840, 'natural_join': 1840, 'anti_join': 1040, 'semi_join': 636, 'inner_join': 380, 'intersect': 32})
[   248.268][MainProcess][DEBUG] 	2: Counter({'mutate': 12768, 'summarise': 10177, 'natural_join3': 8360, 'union': 5720, 'natural_join': 2184, 'left_join': 2184, 'inner_join': 896, 'semi_join': 704, 'anti_join': 526})
[   248.269][MainProcess][INFO] Solution found: summarise(natural_join3(@param0, @param1, summarise(@param0, cost = max(cost), P_id)), n = n(), S_name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/18-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/18-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/43.out", col_types = cols(S_name = col_character(),n = col_integer()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = max(cost)) %>% ungroup()
df4 <- inner_join(input1, input2) %>% inner_join(df3)
df5 <- df4 %>% group_by(S_name) %>% summarise(n = n()) %>% ungroup()
out <- df5 %>% select(S_name, n) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name,
       n
FROM
  (SELECT S_name,
          COUNT() AS n
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.P_id AS P_id,
             LHS.cost AS cost,
             LHS.S_name AS S_name
      FROM
        (SELECT LHS.S_key AS S_key,
                LHS.P_id AS P_id,
                LHS.cost AS cost,
                RHS.S_name AS S_name
         FROM input1 AS LHS
         INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
      INNER JOIN
        (SELECT P_id,
                MAX(cost) AS cost
         FROM input1
         GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id
                                   AND LHS.cost = RHS.cost))
   GROUP BY S_name)
ORDER BY S_name
