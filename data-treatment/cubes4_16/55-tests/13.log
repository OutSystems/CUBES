[     3.231][MainProcess][INFO] Parsing specification...
[     3.246][MainProcess][DEBUG] Reading input files...
[     3.265][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/13-1.txt: ['string', 'string']
[     3.270][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/13-2.txt: ['string', 'string']
[     3.275][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/13.out: ['string']
[     3.308][MainProcess][DEBUG] Generating DSL...
[     3.327][MainProcess][INFO] Creating 16 processes
[     3.387][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.387][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.387][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.387][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.387][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.387][MainProcess][DEBUG] Increasing generator loc to 2
[     3.387][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.387][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.392][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.396][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     3.404][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.407][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.407][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     3.407][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.420][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.428][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.430][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.472][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     3.476][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     3.480][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     3.501][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.520][cube-solver-7][DEBUG] Found solution with cube (l0 = semi_join(),)
[     3.521][MainProcess][INFO] Statistics:
[     3.522][MainProcess][INFO] 	Generated cubes: 17
[     3.522][MainProcess][INFO] 	Attempted programs: 3
[     3.522][MainProcess][INFO] 		Rejected: 0
[     3.522][MainProcess][INFO] 		Failed: 2
[     3.522][MainProcess][INFO] 	Blacklist clauses: 2
[     3.522][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.523][MainProcess][DEBUG] 	0: Counter({'semi_join': 3})
[     3.523][MainProcess][INFO] Solution found: semi_join(@param1, @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/13-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/13-2.txt", col_types = cols(P_id = col_character(),P_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/13.out", col_types = cols(P_name = col_character()))

df3 <- semi_join(input2, input1)
out <- df3 %>% select(P_name) %>% arrange(P_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_name
FROM
  (SELECT *
   FROM input2 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM input1 AS RHS
        WHERE (LHS.P_id = RHS.P_id) ))
ORDER BY P_name
