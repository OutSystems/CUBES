[     1.586][MainProcess][INFO] Parsing specification...
[     1.589][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.590][MainProcess][DEBUG] Reading input files...
[     1.598][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/12-1.txt: ['string', 'int64', 'string']
[     1.603][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/12.out: ['int64', 'string']
[     1.629][MainProcess][DEBUG] Generating DSL...
[     1.651][MainProcess][INFO] Creating 16 processes
[     1.708][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.708][MainProcess][DEBUG] Increasing generator loc to 3
[     1.708][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.708][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.709][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.709][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.712][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.716][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.719][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.723][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.726][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.732][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.733][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.748][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.752][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.755][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.109][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.193][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.195][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.275][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.277][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.319][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.327][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.332][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.335][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.337][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.338][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.342][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.343][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.347][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.348][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.351][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.351][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.358][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.361][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.380][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[     2.385][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.394][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     2.399][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     2.411][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = mutate())
[     2.413][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.414][MainProcess][INFO] Statistics:
[     2.414][MainProcess][INFO] 	Generated cubes: 28
[     2.415][MainProcess][INFO] 	Attempted programs: 1
[     2.415][MainProcess][INFO] 		Rejected: 0
[     2.415][MainProcess][INFO] 		Failed: 0
[     2.415][MainProcess][INFO] 	Blacklist clauses: 1
[     2.415][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.415][MainProcess][DEBUG] 	0: Counter({'summarise': 32, 'mutate': 5})
[     2.416][MainProcess][DEBUG] 	1: Counter({'filter': 37})
[     2.416][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.416][MainProcess][DEBUG] 	0: Counter({'summarise': 8})
[     2.416][MainProcess][DEBUG] 	1: Counter({'filter': 8})
[     2.416][MainProcess][DEBUG] 	2: Counter({'summarise': 4, 'natural_join': 2, 'filter': 1, 'natural_join3': 1})
[     2.416][MainProcess][INFO] Solution found: natural_join(filter(summarise(@param0, n = n(), age, level), age != max(n) & n == max(n)), @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/12-1.txt", col_types = cols(S_key = col_character(),age = col_integer(),level = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/55-tests/tables/12.out", col_types = cols(age = col_integer(),level = col_character()))

df2 <- input1 %>% group_by(age, level) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(age != max(n) & n == max(n))
df4 <- inner_join(df3, input1)
out <- df4 %>% select(age, level) %>% distinct() %>% arrange(age)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT age,
                LEVEL
FROM
  (SELECT LHS.age AS age,
          LHS.level AS LEVEL,
          LHS.n AS n,
          RHS.S_key AS S_key
   FROM
     (SELECT age,
             LEVEL,
             n
      FROM
        (SELECT age,
                LEVEL,
                n,
                MAX(n) OVER () AS zzz2,
                            MAX(n) OVER () AS zzz3
         FROM
           (SELECT age,
                   LEVEL,
                   COUNT() AS n
            FROM input1
            GROUP BY age,
                     LEVEL))
      WHERE (age != zzz2
             AND n = zzz3)) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.age = RHS.age
                                AND LHS.level = RHS.level))
ORDER BY age
