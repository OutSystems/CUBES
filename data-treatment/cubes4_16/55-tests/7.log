[     1.575][MainProcess][INFO] Parsing specification...
[     1.588][MainProcess][DEBUG] Reading input files...
[     1.612][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/7-1.txt: ['string', 'string', 'int64']
[     1.619][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/7.out: ['string', 'int64']
[     1.645][MainProcess][DEBUG] Generating DSL...
[     1.672][MainProcess][INFO] Creating 16 processes
[     1.733][MainProcess][DEBUG] Increasing generator loc to 2
[     1.733][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.733][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.734][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.734][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.743][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.746][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.751][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.755][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.758][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.761][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.767][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.778][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.783][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.789][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.177][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.328][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.416][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.422][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.422][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.422][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     2.426][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.431][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.436][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.438][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.443][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.444][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.445][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.446][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.450][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.451][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.453][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.455][cube-solver-2][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.457][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.458][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.458][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.460][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.467][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.473][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.473][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.480][cube-solver-9][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.493][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.494][cube-solver-2][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise())
[     2.496][MainProcess][INFO] Statistics:
[     2.496][MainProcess][INFO] 	Generated cubes: 29
[     2.496][MainProcess][INFO] 	Attempted programs: 2
[     2.496][MainProcess][INFO] 		Rejected: 1
[     2.496][MainProcess][INFO] 		Failed: 0
[     2.496][MainProcess][INFO] 	Blacklist clauses: 0
[     2.496][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     2.497][MainProcess][DEBUG] 	0: Counter({'mutate': 24, 'summarise': 15})
[     2.497][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.497][MainProcess][DEBUG] 	0: Counter({'summarise': 2, 'left_join': 1})
[     2.497][MainProcess][DEBUG] 	1: Counter({'natural_join': 1, 'summarise': 1, 'filter': 1})
[     2.497][MainProcess][INFO] Solution found: summarise(left_join(@param0, @param0), meanage = mean(age), level)
[     2.503][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())
[     2.520][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)
[     2.864][cube-solver-5][DEBUG] Found solution with cube (l0 = union(), l1 = summarise())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/7-1.txt", col_types = cols(S_key = col_character(),level = col_character(),age = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/55-tests/tables/7.out", col_types = cols(level = col_character(),meanage = col_integer()))

df2 <- left_join(input1, input1)
df3 <- df2 %>% group_by(level) %>% summarise(meanage = mean(age)) %>% ungroup()
out <- df3 %>% select(level, meanage) %>% arrange(level)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT LEVEL,
       meanage
FROM
  (SELECT LEVEL,
          AVG(age) AS meanage
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.level AS LEVEL,
             LHS.age AS age
      FROM input1 AS LHS
      LEFT JOIN input1 AS RHS ON (LHS.S_key = RHS.S_key
                                  AND LHS.level = RHS.level
                                  AND LHS.age = RHS.age))
   GROUP BY LEVEL)
ORDER BY LEVEL
