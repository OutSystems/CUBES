[     1.575][MainProcess][INFO] Parsing specification...
[     1.578][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.578][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.578][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.579][MainProcess][DEBUG] Reading input files...
[     1.587][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3-1.txt: ['string', 'string']
[     1.593][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3-2.txt: ['string', 'string']
[     1.598][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/3.out: ['string']
[     1.629][MainProcess][DEBUG] Generating DSL...
[     1.656][MainProcess][INFO] Creating 16 processes
[     1.729][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.729][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.729][MainProcess][DEBUG] Increasing generator loc to 3
[     1.729][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.729][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.730][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.731][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.733][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.737][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.742][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.746][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.750][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.770][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.773][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.773][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.774][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.780][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.334][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.334][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.336][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.387][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.387][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.388][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.428][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.429][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.430][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.483][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.484][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.486][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.742][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.743][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.749][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.752][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.754][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.759][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.760][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.766][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.770][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     2.770][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([1]))
[     2.775][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.783][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = mutate())
[     2.783][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     2.791][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.791][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     2.798][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = summarise([1]))
[     2.807][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([1]), l2 = intersect())
[     2.813][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([2]))
[     2.818][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([2]), l2 = semi_join())
[     2.880][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([10]), l2 = mutate())
[     2.885][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([10]), l2 = summarise([3]))
[     2.893][cube-solver-10][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([10]), l2 = cross_join())
[     2.899][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([10]), l2 = mutate())
[     2.912][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([11]), l2 = inner_join())
[     2.940][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([4]), l2 = filter([13]))
[     2.956][cube-solver-12][DEBUG] Solving cube (l0 = summarise([4]), l1 = anti_join(), l2 = filter([14]))
[     3.461][cube-solver-2][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter([36]))
[     3.461][cube-solver-3][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter([36]))
[     3.535][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join4(), l2 = filter([37]))
[     3.556][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([37]))
[     3.707][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = summarise([6]), l2 = filter([37]))
[     3.743][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = union(), l2 = filter([37]))
[     3.959][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([37]))
[     3.960][MainProcess][INFO] Statistics:
[     3.960][MainProcess][INFO] 	Generated cubes: 36
[     3.960][MainProcess][INFO] 	Attempted programs: 7
[     3.960][MainProcess][INFO] 		Rejected: 4
[     3.961][MainProcess][INFO] 		Failed: 2
[     3.961][MainProcess][INFO] 	Blacklist clauses: 43
[     3.961][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.961][MainProcess][DEBUG] 	0: Counter({'summarise': 140, 'natural_join': 118})
[     3.961][MainProcess][DEBUG] 	1: Counter({'mutate': 112, 'natural_join3': 40, 'left_join': 29, 'anti_join': 24, 'filter': 20, 'natural_join': 19, 'union': 8, 'summarise': 6})
[     3.962][MainProcess][DEBUG] 	2: Counter({'filter': 238, 'natural_join': 8, 'semi_join': 8, 'anti_join': 4})
[     3.962][MainProcess][INFO] Solution found: filter(left_join(@param0, summarise(@param1, n = n(), ID_key)), Room == 'R128' | n > 4)
[     4.205][cube-solver-3][DEBUG] Found solution with cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter([36]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/3-1.txt", col_types = cols(ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/3-2.txt", col_types = cols(ID_key_student = col_character(),ID_key = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/3.out", col_types = cols(ID_key = col_character()))

df3 <- input2 %>% group_by(ID_key) %>% summarise(n = n()) %>% ungroup()
df4 <- left_join(input1, df3)
df5 <- df4 %>% filter(Room == 'R128' | n > 4)
out <- df5 %>% select(ID_key) %>% arrange(ID_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `ID_key`
FROM
  (SELECT `LHS`.`ID_key` AS `ID_key`,
          `LHS`.`Room` AS `Room`,
          `RHS`.`n` AS `n`
   FROM `input1` AS `LHS`
   LEFT JOIN
     (SELECT `ID_key`,
             COUNT() AS `n`
      FROM `input2`
      GROUP BY `ID_key`) AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
WHERE (`Room` = 'R128'
       OR n > 4.0)
ORDER BY ID_key
