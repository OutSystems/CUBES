[     1.613][MainProcess][INFO] Parsing specification...
[     1.633][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.634][MainProcess][DEBUG] Reading input files...
[     1.645][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10-1.txt: ['string', 'string']
[     1.650][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10-2.txt: ['string', 'string']
[     1.655][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/10.out: ['string']
[     1.685][MainProcess][DEBUG] Generating DSL...
[     1.705][MainProcess][INFO] Creating 16 processes
[     1.765][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.766][MainProcess][DEBUG] Increasing generator loc to 3
[     1.765][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.766][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.766][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.767][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.769][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.770][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.771][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.775][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.780][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.783][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.786][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.795][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.798][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.805][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.811][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.138][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.139][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.140][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.190][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.191][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.192][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.321][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.321][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.322][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.322][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.324][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.324][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.336][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.340][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.342][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.347][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.347][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.352][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.353][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.356][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.359][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.359][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.360][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.362][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.364][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.364][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.368][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.369][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.375][cube-solver-15][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([1]), l2 = intersect())
[     2.389][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     2.394][cube-solver-11][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([1]), l2 = semi_join())
[     2.417][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([2]), l2 = mutate())
[     2.424][cube-solver-6][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([2]), l2 = cross_join())
[     2.441][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([2]), l2 = mutate())
[     2.448][cube-solver-14][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([2]), l2 = mutate())
[     2.456][cube-solver-14][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([2]), l2 = inner_join())
[     2.498][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([4]), l2 = filter([2]))
[     2.508][cube-solver-12][DEBUG] Solving cube (l0 = summarise([4]), l1 = anti_join(), l2 = filter([2]))
[     2.799][cube-solver-7][DEBUG] Solving cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([4]))
[     2.849][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter([4]))
[     2.874][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter([4]))
[     2.974][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter([4]))
[     2.975][MainProcess][INFO] Statistics:
[     2.976][MainProcess][INFO] 	Generated cubes: 35
[     2.976][MainProcess][INFO] 	Attempted programs: 5
[     2.976][MainProcess][INFO] 		Rejected: 4
[     2.976][MainProcess][INFO] 		Failed: 0
[     2.976][MainProcess][INFO] 	Blacklist clauses: 10
[     2.976][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.977][MainProcess][DEBUG] 	0: Counter({'summarise': 191, 'natural_join': 75})
[     2.977][MainProcess][DEBUG] 	1: Counter({'filter': 155, 'summarise': 43, 'mutate': 32, 'anti_join': 16, 'left_join': 13, 'natural_join3': 6, 'natural_join': 1})
[     2.977][MainProcess][DEBUG] 	2: Counter({'filter': 111, 'union': 40, 'left_join': 28, 'natural_join3': 23, 'semi_join': 22, 'anti_join': 16, 'inner_join': 14, 'natural_join': 12})
[     2.977][MainProcess][INFO] Solution found: filter(natural_join3(@param0, @param1, summarise(@param0, n = n(), S_key)), n == max(n))
[     2.991][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter([4]))
[     3.023][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     3.201][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.215][cube-solver-7][DEBUG] Found solution with cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([4]))
[     3.281][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = anti_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/10-1.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/10-2.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/10.out", col_types = cols(S_name = col_character()))

df3 <- input1 %>% group_by(S_key) %>% summarise(n = n()) %>% ungroup()
df4 <- inner_join(input1, input2) %>% inner_join(df3)
df5 <- df4 %>% filter(n == max(n))
out <- df5 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT S_name
FROM
  (SELECT S_key,
          C_name,
          S_name,
          n
   FROM
     (SELECT S_key,
             C_name,
             S_name,
             n,
             MAX(n) OVER () AS zzz3
      FROM
        (SELECT LHS.S_key AS S_key,
                LHS.C_name AS C_name,
                LHS.S_name AS S_name,
                RHS.n AS n
         FROM
           (SELECT LHS.S_key AS S_key,
                   LHS.C_name AS C_name,
                   RHS.S_name AS S_name
            FROM input1 AS LHS
            INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
         INNER JOIN
           (SELECT S_key,
                   COUNT() AS n
            FROM input1
            GROUP BY S_key) AS RHS ON (LHS.S_key = RHS.S_key)))
   WHERE (n = zzz3))
ORDER BY S_name
