[     1.581][MainProcess][INFO] Parsing specification...
[     1.585][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.585][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.585][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.586][MainProcess][DEBUG] Reading input files...
[     1.594][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-1.txt: ['string', 'string']
[     1.609][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-2.txt: ['string', 'string']
[     1.658][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/16-3.txt: ['string', 'string']
[     1.664][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/44.out: ['string']
[     1.696][MainProcess][DEBUG] Generating DSL...
[     1.722][MainProcess][INFO] Creating 16 processes
[     1.792][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.792][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.792][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.793][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.793][MainProcess][DEBUG] Increasing generator loc to 3
[     1.794][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.794][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.797][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.801][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.805][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.810][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.815][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.818][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.822][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.824][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.852][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.860][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.519][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.520][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.522][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.600][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.601][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.603][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.676][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.676][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.678][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.687][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.687][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.689][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.872][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.879][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.883][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.887][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.896][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.902][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.903][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.940][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.944][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter([1]))
[     2.948][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = summarise())
[     2.948][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     2.949][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = summarise())
[     2.949][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     2.953][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.953][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.955][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     2.955][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = intersect())
[     2.957][cube-solver-9][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.958][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = semi_join())
[     2.958][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = cross_join())
[     2.958][MainProcess][INFO] Statistics:
[     2.959][MainProcess][INFO] 	Generated cubes: 31
[     2.959][MainProcess][INFO] 	Attempted programs: 1
[     2.959][MainProcess][INFO] 		Rejected: 0
[     2.959][MainProcess][INFO] 		Failed: 0
[     2.959][MainProcess][INFO] 	Blacklist clauses: 1
[     2.959][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.960][MainProcess][DEBUG] 	0: Counter({'natural_join3': 5})
[     2.960][MainProcess][DEBUG] 	1: Counter({'filter': 3, 'summarise': 2})
[     2.960][MainProcess][DEBUG] 	2: Counter({'summarise': 3, 'filter': 2})
[     2.960][MainProcess][INFO] Solution found: summarise(filter(natural_join3(@param0, @param2, @param1), S_name == 'AWS'), n = n(), P_id, P_name)
[     3.009][cube-solver-11][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     3.232][cube-solver-8][DEBUG] Found solution with cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.253][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/16-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/16-2.txt", col_types = cols(P_id = col_character(),P_name = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/16-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/44.out", col_types = cols(P_name = col_character()))

df4 <- inner_join(input1, input3) %>% inner_join(input2)
df5 <- df4 %>% filter(S_name == 'AWS')
df6 <- df5 %>% group_by(P_id, P_name) %>% summarise(n = n()) %>% ungroup()
out <- df6 %>% select(P_name) %>% arrange(P_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `P_name`
FROM
  (SELECT `P_id`,
          `P_name`,
          COUNT() AS `n`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`S_key` AS `S_key`,
                `LHS`.`P_id` AS `P_id`,
                `LHS`.`S_name` AS `S_name`,
                `RHS`.`P_name` AS `P_name`
         FROM
           (SELECT `LHS`.`S_key` AS `S_key`,
                   `LHS`.`P_id` AS `P_id`,
                   `RHS`.`S_name` AS `S_name`
            FROM `input1` AS `LHS`
            INNER JOIN `input3` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`)) AS `LHS`
         INNER JOIN `input2` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
      WHERE (`S_name` = 'AWS'))
   GROUP BY P_id,
            P_name)
ORDER BY P_name
