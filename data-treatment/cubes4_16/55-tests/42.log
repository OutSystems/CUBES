[     1.600][MainProcess][INFO] Parsing specification...
[     1.604][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.604][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.605][MainProcess][DEBUG] Reading input files...
[     1.612][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-1.txt: ['string', 'string', 'int64']
[     1.617][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-2.txt: ['string', 'string']
[     1.629][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/42.out: ['string', 'int64']
[     1.661][MainProcess][DEBUG] Generating DSL...
[     1.897][MainProcess][INFO] Creating 16 processes
[     1.968][MainProcess][DEBUG] Increasing generator loc to 3
[     2.222][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.228][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.231][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.238][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.244][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.245][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.245][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.250][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.255][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.260][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.265][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.266][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.266][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.293][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.377][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.460][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[    12.004][cube-solver-2][WARNING] There is no solution for current loc (2).
[    12.005][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    12.041][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    12.042][cube-solver-1][WARNING] There is no solution for current loc (2).
[    12.043][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    12.066][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    12.076][cube-solver-3][WARNING] There is no solution for current loc (2).
[    12.077][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[    12.100][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[    12.454][cube-solver-0][WARNING] There is no solution for current loc (2).
[    12.454][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[    12.475][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    18.365][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = mutate())
[    18.382][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = summarise())
[    18.402][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate())
[    18.406][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise())
[    18.420][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = summarise())
[    18.423][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = mutate())
[    18.423][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = mutate())
[    18.427][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = summarise())
[    18.431][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = summarise())
[    18.461][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = mutate())
[    18.464][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate())
[    18.496][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join())
[    18.499][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join3())
[    18.520][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = summarise())
[    18.523][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = anti_join())
[    18.529][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = natural_join4())
[    18.546][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[    18.565][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = left_join())
[    18.583][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = union())
[    18.616][cube-solver-12][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]), l2 = intersect())
[    18.681][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise([14]))
[    18.745][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise([19]))
[    18.801][cube-solver-14][DEBUG] Solving cube (l0 = summarise([19]), l1 = summarise([19]), l2 = semi_join())
[    18.860][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate())
[    18.934][cube-solver-10][DEBUG] Solving cube (l0 = summarise([20]), l1 = summarise([20]), l2 = cross_join())
[    18.951][cube-solver-15][DEBUG] Solving cube (l0 = summarise([21]), l1 = summarise([21]), l2 = mutate())
[    19.022][cube-solver-15][DEBUG] Solving cube (l0 = summarise([22]), l1 = summarise([22]), l2 = inner_join())
[    20.652][cube-solver-7][DEBUG] Solving cube (l0 = summarise([25]), l1 = filter(), l2 = summarise([25]))
[    20.759][cube-solver-7][DEBUG] Solving cube (l0 = summarise([25]), l1 = filter(), l2 = mutate())
[    20.811][cube-solver-7][DEBUG] Solving cube (l0 = summarise([25]), l1 = anti_join(), l2 = summarise([25]))
[    22.643][cube-solver-6][DEBUG] Solving cube (l0 = summarise([25]), l1 = anti_join(), l2 = mutate())
[    23.533][cube-solver-5][DEBUG] Solving cube (l0 = summarise([25]), l1 = left_join(), l2 = summarise([25]))
[    24.483][cube-solver-14][DEBUG] Solving cube (l0 = summarise([25]), l1 = left_join(), l2 = mutate())
[    26.253][cube-solver-5][DEBUG] Found solution with cube (l0 = summarise([25]), l1 = left_join(), l2 = summarise([25]))
[    26.256][MainProcess][INFO] Statistics:
[    26.257][MainProcess][INFO] 	Generated cubes: 41
[    26.257][MainProcess][INFO] 	Attempted programs: 322
[    26.257][MainProcess][INFO] 		Rejected: 110
[    26.257][MainProcess][INFO] 		Failed: 211
[    26.257][MainProcess][INFO] 	Blacklist clauses: 25
[    26.258][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    26.260][MainProcess][DEBUG] 	0: Counter({'summarise': 1928, 'natural_join': 1144})
[    26.261][MainProcess][DEBUG] 	1: Counter({'summarise': 2105, 'mutate': 592, 'left_join': 323, 'anti_join': 52})
[    26.263][MainProcess][DEBUG] 	2: Counter({'mutate': 1059, 'summarise': 461, 'union': 429, 'natural_join': 348, 'natural_join3': 280, 'left_join': 216, 'semi_join': 208, 'inner_join': 72})
[    26.263][MainProcess][INFO] Solution found: summarise(left_join(@param1, summarise(@param0, meancost = mean(cost), P_id)), n = n(), S_name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/17-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/17-2.txt", col_types = cols(P_id = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/42.out", col_types = cols(S_name = col_character(),n = col_integer()))

df3 <- input1 %>% group_by(P_id) %>% summarise(meancost = mean(cost)) %>% ungroup()
df4 <- left_join(input2, df3)
df5 <- df4 %>% group_by(S_name) %>% summarise(n = n()) %>% ungroup()
out <- df5 %>% select(S_name, n) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name,
       n
FROM
  (SELECT S_name,
          COUNT() AS n
   FROM
     (SELECT LHS.P_id AS P_id,
             LHS.S_name AS S_name,
             RHS.meancost AS meancost
      FROM input2 AS LHS
      LEFT JOIN
        (SELECT P_id,
                AVG(cost) AS meancost
         FROM input1
         GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id))
   GROUP BY S_name)
ORDER BY S_name
