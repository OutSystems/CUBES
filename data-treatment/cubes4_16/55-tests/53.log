[     3.562][MainProcess][INFO] Parsing specification...
[     3.580][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.581][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.582][MainProcess][DEBUG] Reading input files...
[     3.596][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-1.txt: ['string', 'string', 'int64']
[     3.613][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/17-3.txt: ['string', 'string']
[     3.633][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/53.out: ['string', 'string']
[     3.678][MainProcess][DEBUG] Generating DSL...
[     3.917][MainProcess][INFO] Creating 16 processes
[     3.992][MainProcess][DEBUG] Increasing generator loc to 2
[     4.118][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     4.125][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     4.127][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     4.132][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     4.134][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     4.140][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     4.143][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     4.147][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     4.150][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     4.156][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     4.159][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     4.164][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     4.176][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     4.181][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     4.209][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     4.212][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     7.296][cube-solver-1][WARNING] There is no solution for current loc (1).
[     7.298][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     7.312][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     7.329][cube-solver-0][WARNING] There is no solution for current loc (1).
[     7.331][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     7.345][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[    10.537][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[    10.543][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[    10.552][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[    10.557][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[    10.583][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[    10.593][cube-solver-12][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter())
[    10.596][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([1]))
[    10.596][cube-solver-13][DEBUG] Solving cube (l0 = summarise([1]), l1 = anti_join())
[    10.599][cube-solver-10][DEBUG] Solving cube (l0 = summarise([1]), l1 = natural_join4())
[    10.603][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([1]))
[    10.616][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = mutate())
[    10.626][cube-solver-7][DEBUG] Solving cube (l0 = summarise([1]), l1 = cross_join())
[    10.639][cube-solver-12][DEBUG] Solving cube (l0 = summarise([1]), l1 = inner_join())
[    10.647][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    10.652][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([1]))
[    10.654][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = summarise([1]))
[    10.667][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[    10.668][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([1]))
[    10.679][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([1]))
[    10.682][cube-solver-15][DEBUG] Solving cube (l0 = summarise([4]), l1 = union())
[    10.700][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[    10.719][cube-solver-8][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join())
[    10.786][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[    10.796][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join3())
[    10.797][MainProcess][INFO] Statistics:
[    10.797][MainProcess][INFO] 	Generated cubes: 27
[    10.797][MainProcess][INFO] 	Attempted programs: 1
[    10.798][MainProcess][INFO] 		Rejected: 0
[    10.798][MainProcess][INFO] 		Failed: 0
[    10.798][MainProcess][INFO] 	Blacklist clauses: 14
[    10.798][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    10.798][MainProcess][DEBUG] 	0: Counter({'natural_join': 33, 'summarise': 17, 'left_join': 8, 'anti_join': 4})
[    10.798][MainProcess][DEBUG] 	1: Counter({'mutate': 28, 'summarise': 17, 'natural_join3': 15, 'union': 2})
[    10.799][MainProcess][INFO] Solution found: natural_join3(@param1, @param0, summarise(@param0, cost = min(cost), P_id))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/17-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/17-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/53.out", col_types = cols(P_id = col_character(),S_name = col_character()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = min(cost)) %>% ungroup()
df4 <- inner_join(input2, input1) %>% inner_join(df3)
out <- df4 %>% select(P_id, S_name) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_id,
       S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.S_name AS S_name,
          LHS.P_id AS P_id,
          LHS.cost AS cost
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.S_name AS S_name,
             RHS.P_id AS P_id,
             RHS.cost AS cost
      FROM input2 AS LHS
      INNER JOIN input1 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
   INNER JOIN
     (SELECT P_id,
             MIN(cost) AS cost
      FROM input1
      GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id
                                AND LHS.cost = RHS.cost))
ORDER BY P_id
