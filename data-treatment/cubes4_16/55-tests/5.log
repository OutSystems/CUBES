[     1.565][MainProcess][INFO] Parsing specification...
[     1.571][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.571][MainProcess][DEBUG] Reading input files...
[     1.582][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/5-1.txt: ['string', 'string', 'string']
[     1.589][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/5-2.txt: ['string', 'string']
[     1.594][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/5.out: ['string']
[     1.624][MainProcess][DEBUG] Generating DSL...
[     1.647][MainProcess][INFO] Creating 16 processes
[     1.710][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.710][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.710][MainProcess][DEBUG] Increasing generator loc to 3
[     1.710][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.711][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.718][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.720][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.725][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.726][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.730][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.732][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.738][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.739][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.756][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.762][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.766][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.189][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.190][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.192][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.272][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.272][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.274][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.360][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.360][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.362][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.467][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.468][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.470][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.552][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.557][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.557][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.559][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.564][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.569][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.572][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.573][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.576][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.578][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.579][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.580][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.581][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter([1]))
[     2.584][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.586][cube-solver-12][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([1]), l2 = union())
[     2.587][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([1]), l2 = intersect())
[     2.602][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([2]))
[     2.612][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = summarise([1]))
[     2.621][cube-solver-5][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([4]), l2 = semi_join())
[     2.726][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = summarise([9]))
[     2.738][cube-solver-13][DEBUG] Solving cube (l0 = summarise([9]), l1 = filter([4]), l2 = cross_join())
[     2.811][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([4]))
[     2.818][cube-solver-15][DEBUG] Solving cube (l0 = summarise([10]), l1 = filter([4]), l2 = mutate())
[     2.827][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.827][cube-solver-15][DEBUG] Solving cube (l0 = summarise([10]), l1 = filter([4]), l2 = inner_join())
[     2.828][MainProcess][INFO] Statistics:
[     2.828][MainProcess][INFO] 	Generated cubes: 33
[     2.828][MainProcess][INFO] 	Attempted programs: 5
[     2.828][MainProcess][INFO] 		Rejected: 4
[     2.828][MainProcess][INFO] 		Failed: 0
[     2.828][MainProcess][INFO] 	Blacklist clauses: 14
[     2.828][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.829][MainProcess][DEBUG] 	0: Counter({'natural_join': 39, 'summarise': 26})
[     2.829][MainProcess][DEBUG] 	1: Counter({'filter': 26, 'mutate': 20, 'summarise': 19})
[     2.829][MainProcess][DEBUG] 	2: Counter({'filter': 39, 'union': 16, 'semi_join': 6, 'anti_join': 4})
[     2.830][MainProcess][INFO] Solution found: filter(summarise(natural_join(@param1, @param0), n = n(), F_key, F_name), n == max(n))
[     3.232][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/5-1.txt", col_types = cols(C_name = col_character(),F_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/5-2.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/5.out", col_types = cols(F_name = col_character()))

df3 <- inner_join(input2, input1)
df4 <- df3 %>% group_by(F_key, F_name) %>% summarise(n = n()) %>% ungroup()
df5 <- df4 %>% filter(n == max(n))
out <- df5 %>% select(F_name) %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT F_name
FROM
  (SELECT F_key,
          F_name,
          n
   FROM
     (SELECT F_key,
             F_name,
             n,
             MAX(n) OVER () AS zzz3
      FROM
        (SELECT F_key,
                F_name,
                COUNT() AS n
         FROM
           (SELECT LHS.F_key AS F_key,
                   LHS.F_name AS F_name,
                   RHS.C_name AS C_name,
                   RHS.Room AS Room
            FROM input2 AS LHS
            INNER JOIN input1 AS RHS ON (LHS.F_key = RHS.F_key))
         GROUP BY F_key,
                  F_name))
   WHERE (n = zzz3))
ORDER BY F_name
