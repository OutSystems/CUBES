[     1.570][MainProcess][INFO] Parsing specification...
[     1.574][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.574][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.574][MainProcess][DEBUG] Reading input files...
[     1.580][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-1.txt: ['string', 'string']
[     1.583][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-2.txt: ['string', 'string']
[     1.587][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/19-3.txt: ['string', 'string']
[     1.593][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/31.out: ['string', 'string', 'string', 'string']
[     1.623][MainProcess][DEBUG] Generating DSL...
[     1.656][MainProcess][INFO] Creating 16 processes
[     1.734][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.734][MainProcess][DEBUG] Increasing generator loc to 2
[     1.735][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.735][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.735][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.741][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.747][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.752][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.756][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.767][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.773][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.776][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.791][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.792][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.799][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.806][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.399][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.400][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     2.403][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.657][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     2.660][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     2.660][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     2.663][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.666][cube-solver-1][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.668][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.669][cube-solver-1][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     2.669][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.672][MainProcess][DEBUG] Increasing generator loc to 3
[     2.671][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     2.672][cube-solver-1][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     2.675][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.676][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.676][cube-solver-8][DEBUG] Solving cube (l0 = filter([1]), l1 = anti_join())
[     2.679][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.685][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.698][cube-solver-12][DEBUG] Solving cube (l0 = filter([4]), l1 = semi_join())
[     2.702][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([5]))
[     2.708][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.710][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([6]))
[     2.718][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([6]))
[     2.720][cube-solver-9][DEBUG] Solving cube (l0 = filter([6]), l1 = left_join())
[     2.723][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.731][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.731][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.761][cube-solver-11][DEBUG] Solving cube (l0 = filter([9]), l1 = intersect())
[     2.775][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.803][cube-solver-10][DEBUG] Solving cube (l0 = filter([14]), l1 = union())
[     2.819][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.837][cube-solver-13][DEBUG] Solving cube (l0 = filter([20]), l1 = cross_join())
[     2.859][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.929][cube-solver-14][DEBUG] Solving cube (l0 = filter([21]), l1 = inner_join())
[     2.951][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     3.374][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([24]))
[     3.397][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.152][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     4.582][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]), l2 = filter([24]))
[     4.621][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect(), l2 = filter([24]))
[     4.686][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([24]), l2 = cross_join())
[     4.810][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([24]), l2 = intersect())
[     4.825][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([24]), l2 = anti_join())
[     4.859][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([24]), l2 = union())
[     4.913][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = natural_join3([1]))
[     4.918][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = natural_join([2]))
[     4.958][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = natural_join4())
[     4.981][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = filter([24]))
[     4.990][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = semi_join())
[     5.031][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([24]))
[     5.047][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([24]))
[     5.075][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = left_join())
[     5.141][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([24]), l2 = inner_join())
[     5.780][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join([2]), l1 = filter([24]), l2 = natural_join([2]))
[     5.781][MainProcess][INFO] Statistics:
[     5.782][MainProcess][INFO] 	Generated cubes: 38
[     5.782][MainProcess][INFO] 	Attempted programs: 151
[     5.782][MainProcess][INFO] 		Rejected: 1
[     5.782][MainProcess][INFO] 		Failed: 149
[     5.782][MainProcess][INFO] 	Blacklist clauses: 27
[     5.782][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     5.783][MainProcess][DEBUG] 	0: Counter({'natural_join3': 314})
[     5.783][MainProcess][DEBUG] 	1: Counter({'filter': 314})
[     5.783][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     5.784][MainProcess][DEBUG] 	0: Counter({'natural_join': 570})
[     5.784][MainProcess][DEBUG] 	1: Counter({'filter': 496, 'left_join': 74})
[     5.784][MainProcess][DEBUG] 	2: Counter({'union': 96, 'cross_join': 88, 'natural_join4': 86, 'natural_join3': 81, 'natural_join': 75, 'filter': 74, 'left_join': 49, 'inner_join': 21})
[     5.785][MainProcess][INFO] Solution found: natural_join(filter(natural_join(@param1, @param0), color == 'green' & S_key != 'S4'), @param2)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/19-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/19-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/55-tests/tables/19-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/55-tests/tables/31.out", col_types = cols(S_key = col_character(),P_id = col_character(),S_name = col_character(),color = col_character()))

df4 <- inner_join(input2, input1)
df5 <- df4 %>% filter(color == 'green' & S_key != 'S4')
df6 <- inner_join(df5, input3)
out <- df6 %>% select(S_key, P_id, S_name, color) %>% arrange(S_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_key`,
       `P_id`,
       `S_name`,
       `color`
FROM
  (SELECT `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`,
          `LHS`.`S_key` AS `S_key`,
          `RHS`.`S_name` AS `S_name`
   FROM
     (SELECT *
      FROM
        (SELECT `LHS`.`P_id` AS `P_id`,
                `LHS`.`color` AS `color`,
                `RHS`.`S_key` AS `S_key`
         FROM `input2` AS `LHS`
         INNER JOIN `input1` AS `RHS` ON (`LHS`.`P_id` = `RHS`.`P_id`))
      WHERE (`color` = 'green'
             AND `S_key` != 'S4')) AS LHS
   INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_key
