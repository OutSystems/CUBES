[     3.300][MainProcess][INFO] Parsing specification...
[     3.314][MainProcess][DEBUG] Reading input files...
[     3.330][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/11-1.txt: ['string', 'string']
[     3.337][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/11-2.txt: ['string', 'string']
[     3.341][MainProcess][INFO] Inferred data types for table tests-examples/55-tests/tables/11.out: ['string']
[     3.374][MainProcess][DEBUG] Generating DSL...
[     3.392][MainProcess][INFO] Creating 16 processes
[     3.458][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.458][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.458][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.458][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.458][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.458][MainProcess][DEBUG] Increasing generator loc to 2
[     3.458][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.458][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.460][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.465][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     3.469][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.475][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     3.484][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.487][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.489][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.499][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.499][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.546][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     3.547][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     3.548][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.549][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.550][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     3.569][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.600][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.601][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     3.601][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.608][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     3.609][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.610][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     3.611][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.613][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join())
[     3.616][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     3.618][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join())
[     3.621][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     3.623][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     3.625][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect())
[     3.627][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     3.629][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     3.634][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join())
[     3.636][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     3.638][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     3.640][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     3.642][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([2]))
[     3.646][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     3.648][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     3.650][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect())
[     3.652][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     3.652][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect())
[     3.654][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     3.657][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([1]))
[     3.660][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     3.662][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     3.662][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.664][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([4]), l1 = natural_join())
[     3.673][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.714][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     3.741][cube-solver-3][DEBUG] Found solution with cube (l0 = anti_join(),)
[     3.742][MainProcess][INFO] Statistics:
[     3.742][MainProcess][INFO] 	Generated cubes: 42
[     3.742][MainProcess][INFO] 	Attempted programs: 13
[     3.743][MainProcess][INFO] 		Rejected: 4
[     3.743][MainProcess][INFO] 		Failed: 8
[     3.743][MainProcess][INFO] 	Blacklist clauses: 10
[     3.743][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.743][MainProcess][DEBUG] 	0: Counter({'union': 12, 'natural_join': 9, 'semi_join': 8, 'left_join': 8, 'inner_join': 6, 'anti_join': 3})
[     3.743][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.744][MainProcess][DEBUG] 	0: Counter({'anti_join': 1})
[     3.744][MainProcess][DEBUG] 	1: Counter({'natural_join': 1})
[     3.744][MainProcess][INFO] Solution found: anti_join(@param0, @param1, 'S_key')
[     3.865][cube-solver-10][DEBUG] Found solution with cube (l0 = anti_join([4]), l1 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/55-tests/tables/11-1.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/55-tests/tables/11-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/55-tests/tables/11.out", col_types = cols(S_name = col_character()))

df3 <- anti_join(input1, input2, by=c('S_key'))
out <- df3 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM input2 AS RHS
        WHERE (LHS.S_key = RHS.S_key) ))
ORDER BY S_name
