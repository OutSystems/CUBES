[     3.258][MainProcess][INFO] Parsing specification...
[     3.275][MainProcess][DEBUG] Reading input files...
[     3.288][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/183_1.csv: ['int64', 'string']
[     3.309][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/183_2.csv: ['int64', 'int64']
[     3.316][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/183_o.csv: ['string']
[     3.360][MainProcess][DEBUG] Generating DSL...
[     3.381][MainProcess][INFO] Creating 16 processes
[     3.459][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.459][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.459][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.459][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.459][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.459][MainProcess][DEBUG] Increasing generator loc to 2
[     3.460][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.459][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.459][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.461][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     3.469][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.473][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     3.478][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.488][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.492][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.497][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.508][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.525][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     3.525][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     3.527][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     3.546][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.546][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.569][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     3.569][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.569][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     3.569][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.571][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.571][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.574][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.578][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     3.583][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join())
[     3.586][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     3.587][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join())
[     3.589][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     3.590][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     3.591][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect())
[     3.593][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     3.594][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     3.597][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join())
[     3.598][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     3.599][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     3.599][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     3.601][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     3.602][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([1]))
[     3.604][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     3.605][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     3.606][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect())
[     3.607][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     3.609][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     3.611][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([1]))
[     3.613][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     3.614][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     3.615][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     3.616][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([2]), l1 = natural_join())
[     3.622][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     3.670][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     3.688][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.698][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.700][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.725][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect([2]))
[     3.731][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.732][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([2]))
[     3.764][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join([5]))
[     3.782][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join())
[     3.787][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3())
[     3.790][cube-solver-1][DEBUG] Solving cube (l0 = anti_join([6]), l1 = union())
[     3.823][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.883][cube-solver-15][DEBUG] Solving cube (l0 = anti_join([9]), l1 = semi_join())
[     3.892][cube-solver-4][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join3())
[     3.902][cube-solver-4][DEBUG] Solving cube (l0 = anti_join([10]), l1 = cross_join([2]))
[     3.906][cube-solver-7][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join4())
[     3.908][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([10]), l1 = anti_join([10]))
[     3.916][cube-solver-7][DEBUG] Solving cube (l0 = anti_join([10]), l1 = inner_join([5]))
[     3.923][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join())
[     3.940][cube-solver-5][DEBUG] Solving cube (l0 = anti_join([10]), l1 = left_join())
[     3.942][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     4.009][cube-solver-6][DEBUG] Solving cube (l0 = anti_join([10]), l1 = intersect([6]))
[     4.136][cube-solver-12][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join4())
[     4.139][cube-solver-12][DEBUG] Solving cube (l0 = left_join(), l1 = anti_join([10]))
[     4.145][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = left_join())
[     4.154][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join3())
[     4.276][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = union())
[     4.295][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     4.360][cube-solver-14][DEBUG] Solving cube (l0 = left_join(), l1 = semi_join())
[     4.416][cube-solver-9][DEBUG] Solving cube (l0 = left_join(), l1 = intersect([6]))
[     4.465][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = cross_join([2]))
[     4.674][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = inner_join([22]))
[     4.830][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = natural_join())
[     4.834][cube-solver-13][DEBUG] Solving cube (l0 = union(), l1 = natural_join3())
[     4.847][cube-solver-15][DEBUG] Solving cube (l0 = union(), l1 = natural_join4())
[     4.849][cube-solver-15][DEBUG] Solving cube (l0 = union(), l1 = anti_join([10]))
[     4.921][cube-solver-10][DEBUG] Solving cube (l0 = union(), l1 = left_join())
[     4.995][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = union())
[     5.022][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = intersect([6]))
[     5.244][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = semi_join())
[     5.275][cube-solver-14][DEBUG] Solving cube (l0 = union(), l1 = cross_join([2]))
[     5.296][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = inner_join([22]))
[     5.411][cube-solver-6][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join())
[     5.426][cube-solver-14][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join3())
[     5.528][cube-solver-9][DEBUG] Solving cube (l0 = intersect([7]), l1 = natural_join4())
[     5.536][cube-solver-9][DEBUG] Solving cube (l0 = intersect([7]), l1 = anti_join([10]))
[     5.590][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = left_join())
[     5.596][cube-solver-3][DEBUG] Solving cube (l0 = intersect([8]), l1 = union())
[     5.735][cube-solver-6][DEBUG] Solving cube (l0 = intersect([8]), l1 = intersect([8]))
[     5.756][cube-solver-10][DEBUG] Solving cube (l0 = intersect([8]), l1 = semi_join())
[     5.807][cube-solver-5][DEBUG] Solving cube (l0 = intersect([8]), l1 = cross_join([2]))
[     5.861][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = inner_join([22]))
[     5.977][cube-solver-10][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join())
[     5.977][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join3())
[     5.998][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join4())
[     6.001][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = anti_join([10]))
[     6.039][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = left_join())
[     6.159][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = union())
[     6.189][cube-solver-13][DEBUG] Solving cube (l0 = semi_join(), l1 = intersect([8]))
[     6.313][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = semi_join())
[     6.460][cube-solver-12][DEBUG] Solving cube (l0 = semi_join(), l1 = cross_join([2]))
[     6.590][cube-solver-10][DEBUG] Solving cube (l0 = semi_join(), l1 = inner_join([22]))
[     6.634][cube-solver-12][DEBUG] Solving cube (l0 = cross_join([2]), l1 = natural_join())
[     6.679][cube-solver-12][DEBUG] Solving cube (l0 = cross_join([4]), l1 = natural_join3())
[     6.685][cube-solver-12][DEBUG] Solving cube (l0 = cross_join([4]), l1 = natural_join4())
[     6.690][cube-solver-12][DEBUG] Solving cube (l0 = cross_join([4]), l1 = anti_join([10]))
[     6.704][cube-solver-12][DEBUG] Solving cube (l0 = cross_join([4]), l1 = left_join())
[     6.709][cube-solver-12][DEBUG] Solving cube (l0 = cross_join([4]), l1 = union())
[     6.715][cube-solver-12][DEBUG] Solving cube (l0 = cross_join([4]), l1 = intersect([8]))
[     6.725][cube-solver-12][DEBUG] Solving cube (l0 = cross_join([4]), l1 = semi_join())
[     6.730][cube-solver-12][DEBUG] Solving cube (l0 = cross_join([4]), l1 = cross_join([4]))
[     6.739][cube-solver-12][DEBUG] Solving cube (l0 = cross_join([4]), l1 = inner_join([22]))
[     6.760][cube-solver-12][DEBUG] Solving cube (l0 = inner_join([22]), l1 = natural_join())
[     6.799][cube-solver-3][DEBUG] Solving cube (l0 = inner_join([22]), l1 = natural_join3())
[     6.844][cube-solver-14][DEBUG] Solving cube (l0 = inner_join([24]), l1 = natural_join4())
[     6.867][cube-solver-14][DEBUG] Solving cube (l0 = inner_join([24]), l1 = anti_join([10]))
[     6.885][cube-solver-9][DEBUG] Solving cube (l0 = inner_join([24]), l1 = left_join())
[     7.008][cube-solver-6][DEBUG] Solving cube (l0 = inner_join([29]), l1 = union())
[     7.013][cube-solver-15][DEBUG] Solving cube (l0 = inner_join([29]), l1 = intersect([8]))
[     7.056][cube-solver-4][DEBUG] Solving cube (l0 = inner_join([29]), l1 = semi_join())
[     7.256][cube-solver-13][DEBUG] Solving cube (l0 = inner_join([36]), l1 = cross_join([4]))
[     7.498][cube-solver-14][DEBUG] Found solution with cube (l0 = inner_join([24]), l1 = anti_join([10]))
[     7.499][MainProcess][INFO] Statistics:
[     7.500][MainProcess][INFO] 	Generated cubes: 109
[     7.500][MainProcess][INFO] 	Attempted programs: 1097
[     7.500][MainProcess][INFO] 		Rejected: 535
[     7.500][MainProcess][INFO] 		Failed: 561
[     7.500][MainProcess][INFO] 	Blacklist clauses: 58
[     7.500][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     7.501][MainProcess][DEBUG] 	0: Counter({'inner_join': 46, 'anti_join': 16, 'left_join': 12, 'natural_join': 12, 'union': 12, 'semi_join': 8})
[     7.501][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     7.503][MainProcess][DEBUG] 	0: Counter({'left_join': 962, 'union': 838, 'anti_join': 586, 'natural_join': 584, 'semi_join': 572, 'inner_join': 264, 'intersect': 256})
[     7.505][MainProcess][DEBUG] 	1: Counter({'inner_join': 1122, 'natural_join3': 611, 'anti_join': 537, 'union': 470, 'left_join': 450, 'natural_join': 399, 'semi_join': 367, 'intersect': 106})
[     7.505][MainProcess][INFO] Solution found: anti_join(@param0, inner_join(@param0, @param1, 'Id' = 'CustomerId'), )

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/183_1.csv", col_types = cols(Id = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/leetcode/tables/183_2.csv", col_types = cols(Id = col_integer(),CustomerId = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/leetcode/tables/183_o.csv", col_types = cols(Customers = col_character()))

df3 <- inner_join(input1, input2, by=c('Id' = 'CustomerId'), suffix = c('', '.other'))
df4 <- anti_join(input1, df3, by=c())
out <- df4 %>% select(Customers = Name) %>% arrange(Customers)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Name AS Customers
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT LHS.Id AS Id,
                  LHS.Name AS Name,
                  RHS.Id AS Id.other
           FROM input1 AS LHS
           INNER JOIN input2 AS RHS ON (LHS.Id = RHS.CustomerId)) AS RHS
        WHERE (LHS.Id = RHS.Id
               AND LHS.Name = RHS.Name) ))
ORDER BY Customers
