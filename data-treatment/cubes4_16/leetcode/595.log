[     1.587][MainProcess][INFO] Parsing specification...
[     1.591][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.591][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.592][MainProcess][DEBUG] Reading input files...
[     1.608][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/595.csv: ['string', 'string', 'int64', 'int64', 'int64']
[     1.613][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/595_o.csv: ['string', 'int64', 'int64']
[     1.640][MainProcess][DEBUG] Generating DSL...
[     1.828][MainProcess][INFO] Creating 16 processes
[     1.890][MainProcess][DEBUG] Increasing generator loc to 2
[     2.038][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.042][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.046][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.051][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     2.055][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     2.060][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     2.062][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     2.066][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     2.070][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     2.077][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     2.078][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     2.081][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     2.117][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     2.127][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.164][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     2.199][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     5.831][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     6.814][cube-solver-0][DEBUG] Found solution with cube (l0 = filter(),)
[     6.815][MainProcess][INFO] Statistics:
[     6.815][MainProcess][INFO] 	Generated cubes: 16
[     6.815][MainProcess][INFO] 	Attempted programs: 2
[     6.815][MainProcess][INFO] 		Rejected: 1
[     6.815][MainProcess][INFO] 		Failed: 0
[     6.816][MainProcess][INFO] 	Blacklist clauses: 0
[     6.816][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     6.816][MainProcess][DEBUG] 	0: Counter({'filter': 129})
[     6.816][MainProcess][INFO] Solution found: filter(@param0, population >= 3000000 & population >= 25000000)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/595.csv", col_types = cols(name = col_character(),continent = col_character(),area = col_integer(),population = col_integer(),gdp = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/595_o.csv", col_types = cols(name = col_character(),area = col_integer(),population = col_integer()))

df2 <- input1 %>% filter(population >= 3000000 & population >= 25000000)
out <- df2 %>% select(name, area, population) %>% arrange(name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT name,
       area,
       population
FROM input1
WHERE (population >= 3000000.0
       AND population >= 25000000.0)
ORDER BY name
