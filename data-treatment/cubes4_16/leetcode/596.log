[     1.570][MainProcess][INFO] Parsing specification...
[     1.573][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.573][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.574][MainProcess][DEBUG] Reading input files...
[     1.586][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/596.csv: ['string', 'string']
[     1.591][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/596_o.csv: ['string']
[     1.618][MainProcess][DEBUG] Generating DSL...
[     1.636][MainProcess][INFO] Creating 16 processes
[     1.703][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.703][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.703][MainProcess][DEBUG] Increasing generator loc to 3
[     1.703][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.703][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.704][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.704][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.704][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.705][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.705][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.710][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.716][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.721][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.722][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.726][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.740][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.746][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.949][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     1.965][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     1.967][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.134][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.138][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.140][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.143][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.143][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.146][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.148][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     2.149][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.151][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.153][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.155][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.155][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     2.157][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.158][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.161][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.165][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.194][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([2]))
[     2.196][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([2]))
[     2.200][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = left_join())
[     2.202][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = union())
[     2.242][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.245][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([2]), l2 = summarise())
[     2.252][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = semi_join())
[     2.274][cube-solver-5][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.275][MainProcess][INFO] Statistics:
[     2.276][MainProcess][INFO] 	Generated cubes: 30
[     2.276][MainProcess][INFO] 	Attempted programs: 8
[     2.276][MainProcess][INFO] 		Rejected: 6
[     2.276][MainProcess][INFO] 		Failed: 1
[     2.276][MainProcess][INFO] 	Blacklist clauses: 2
[     2.276][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.276][MainProcess][DEBUG] 	0: Counter({'mutate': 30, 'summarise': 11})
[     2.276][MainProcess][DEBUG] 	1: Counter({'filter': 41})
[     2.277][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.277][MainProcess][DEBUG] 	0: Counter({'summarise': 35})
[     2.277][MainProcess][DEBUG] 	1: Counter({'filter': 35})
[     2.277][MainProcess][DEBUG] 	2: Counter({'filter': 8, 'natural_join3': 8, 'summarise': 8, 'natural_join': 5, 'union': 2, 'anti_join': 2, 'left_join': 2})
[     2.277][MainProcess][INFO] Solution found: natural_join3(filter(summarise(@param0, n = n(), class), n >= 5), summarise(@param0, n = n(), class), @param0)
[     2.323][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.485][cube-solver-12][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/596.csv", col_types = cols(student = col_character(),class = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/596_o.csv", col_types = cols(class = col_character()))

df2 <- input1 %>% group_by(class) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n >= 5)
df4 <- inner_join(df3, df2) %>% inner_join(input1)
out <- df4 %>% select(class) %>% distinct() %>% arrange(class)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT CLASS
FROM
  (SELECT LHS.class AS CLASS,
          LHS.n AS n,
          RHS.student AS student
   FROM
     (SELECT LHS.class AS CLASS,
             LHS.n AS n
      FROM
        (SELECT *
         FROM
           (SELECT CLASS,
                   COUNT() AS n
            FROM input1
            GROUP BY CLASS)
         WHERE (n >= 5.0)) AS LHS
      INNER JOIN
        (SELECT CLASS,
                COUNT() AS n
         FROM input1
         GROUP BY CLASS) AS RHS ON (LHS.class = RHS.class
                                    AND LHS.n = RHS.n)) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.class = RHS.class))
ORDER BY CLASS
