[     1.588][MainProcess][INFO] Parsing specification...
[     1.607][MainProcess][DEBUG] Reading input files...
[     1.616][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/176.csv: ['int64', 'int64']
[     1.621][MainProcess][INFO] Inferred data types for table tests-examples/leetcode/tables/176_o.csv: ['int64']
[     1.648][MainProcess][DEBUG] Generating DSL...
[     1.823][MainProcess][INFO] Creating 16 processes
[     1.890][MainProcess][DEBUG] Increasing generator loc to 3
[     2.021][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.024][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.027][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.037][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.042][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.042][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.049][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.053][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.056][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.057][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.059][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.061][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.062][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.072][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.112][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.193][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     8.694][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     8.713][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     8.721][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     8.761][cube-solver-2][DEBUG] Found solution with cube (l0 = filter(), l1 = mutate())
[     8.762][MainProcess][INFO] Statistics:
[     8.762][MainProcess][INFO] 	Generated cubes: 16
[     8.762][MainProcess][INFO] 	Attempted programs: 1
[     8.762][MainProcess][INFO] 		Rejected: 0
[     8.762][MainProcess][INFO] 		Failed: 0
[     8.762][MainProcess][INFO] 	Blacklist clauses: 0
[     8.763][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     8.763][MainProcess][DEBUG] 	0: Counter({'filter': 4})
[     8.763][MainProcess][DEBUG] 	1: Counter({'mutate': 4})
[     8.763][MainProcess][INFO] Solution found: mutate(filter(@param0, Id != max(Salary) & Salary != max(Salary)), Salary = max(Salary))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/leetcode/tables/176.csv", col_types = cols(Id = col_integer(),Salary = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/leetcode/tables/176_o.csv", col_types = cols(SecondHighestSalary = col_integer()))

df2 <- input1 %>% filter(Id != max(Salary) & Salary != max(Salary))
df3 <- df2 %>% mutate(Salary = max(Salary))
out <- df3 %>% select(SecondHighestSalary = Salary) %>% distinct() %>% arrange(SecondHighestSalary)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT MAX(Salary) OVER () AS SecondHighestSalary
FROM
  (SELECT Id,
          Salary
   FROM
     (SELECT Id,
             Salary,
             MAX(Salary) OVER () AS zzz2,
                              MAX(Salary) OVER () AS zzz3
      FROM input1)
   WHERE (Id != zzz2
          AND Salary != zzz3))
ORDER BY SecondHighestSalary
