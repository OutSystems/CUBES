[     1.588][MainProcess][INFO] Parsing specification...
[     1.593][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.593][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.594][MainProcess][DEBUG] Reading input files...
[     1.600][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     1.610][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/employees.txt: ['int64', 'string', 'float64']
[     1.614][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/31.out: ['string']
[     1.644][MainProcess][DEBUG] Generating DSL...
[     1.668][MainProcess][INFO] Creating 16 processes
[     1.729][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.729][MainProcess][DEBUG] Increasing generator loc to 2
[     1.730][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.730][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.731][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.731][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.738][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.739][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.744][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.748][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.752][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.755][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.758][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.759][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.775][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.781][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.169][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.170][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     2.171][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.391][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter())
[     2.391][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     2.394][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.396][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.396][cube-solver-4][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.397][cube-solver-1][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     2.399][MainProcess][DEBUG] Increasing generator loc to 3
[     2.399][cube-solver-4][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     2.399][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.400][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.402][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.402][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     2.407][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     2.407][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.410][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.410][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     2.411][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     2.413][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.416][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.418][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     2.421][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.435][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([2]))
[     2.442][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.451][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]))
[     2.471][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([2]))
[     2.475][cube-solver-11][DEBUG] Solving cube (l0 = filter([2]), l1 = intersect())
[     2.476][cube-solver-12][DEBUG] Solving cube (l0 = filter([2]), l1 = semi_join())
[     2.478][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.482][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.483][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.483][cube-solver-5][DEBUG] Solving cube (l0 = filter([3]), l1 = natural_join3())
[     2.827][cube-solver-14][DEBUG] Solving cube (l0 = filter([19]), l1 = inner_join())
[     2.843][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.888][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([20]))
[     2.897][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.269][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([20]), l2 = natural_join4())
[     3.395][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([20]), l2 = intersect())
[     3.408][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([20]), l2 = natural_join3([1]))
[     3.443][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([20]), l2 = union())
[     3.485][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([20]), l2 = inner_join())
[     3.515][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([20]), l2 = filter([20]))
[     3.545][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union(), l2 = filter([20]))
[     3.585][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = semi_join())
[     3.595][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = anti_join())
[     3.606][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = cross_join())
[     3.676][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([20]))
[     3.697][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = filter([20]))
[     3.701][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = left_join())
[     3.742][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([20]), l2 = natural_join([2]))
[     3.991][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = filter([20]))
[     6.389][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     7.429][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([20]))
[     7.625][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     8.808][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join(), l2 = filter([20]))
[     9.155][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join(), l2 = filter([20]))
[    10.337][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]), l2 = filter([20]))
[    11.208][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3([2]), l2 = filter([20]))
[    11.219][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join4(), l2 = filter([20]))
[    11.229][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = natural_join([2]))
[    11.527][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = natural_join3([2]))
[    11.541][cube-solver-0][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = natural_join4())
[    12.187][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = filter([20]))
[    12.783][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = anti_join())
[    14.439][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = left_join())
[    14.529][cube-solver-13][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = filter([20]), l2 = anti_join())
[    14.530][MainProcess][INFO] Statistics:
[    14.531][MainProcess][INFO] 	Generated cubes: 49
[    14.531][MainProcess][INFO] 	Attempted programs: 1499
[    14.531][MainProcess][INFO] 		Rejected: 617
[    14.531][MainProcess][INFO] 		Failed: 881
[    14.531][MainProcess][INFO] 	Blacklist clauses: 24
[    14.531][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    14.533][MainProcess][DEBUG] 	0: Counter({'filter': 1620, 'natural_join3': 480})
[    14.535][MainProcess][DEBUG] 	1: Counter({'natural_join4': 1140, 'filter': 480, 'natural_join3': 480})
[    14.535][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    14.540][MainProcess][DEBUG] 	0: Counter({'natural_join': 9540, 'natural_join3': 1528})
[    14.545][MainProcess][DEBUG] 	1: Counter({'filter': 7923, 'union': 960, 'left_join': 960, 'natural_join': 546, 'inner_join': 400, 'semi_join': 280})
[    14.550][MainProcess][DEBUG] 	2: Counter({'filter': 3424, 'natural_join3': 1452, 'natural_join4': 1392, 'natural_join': 1375, 'left_join': 964, 'union': 960, 'inner_join': 729, 'semi_join': 560, 'anti_join': 214})
[    14.550][MainProcess][INFO] Solution found: anti_join(natural_join3(@param2, @param1, @param0), filter(@param0, str_detect(aname, 'Boeing') | crusingrange <= 3000), 'aid')
[    15.022][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/employees.txt", col_types = cols(eid = col_integer(),ename = col_character(),salary = col_double()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/31.out", col_types = cols(ename = col_character()))

df4 <- inner_join(input3, input2) %>% inner_join(input1)
df5 <- input1 %>% filter(str_detect(aname, 'Boeing') | crusingrange <= 3000)
df6 <- anti_join(df4, df5, by=c('aid'))
out <- df6 %>% select(ename) %>% distinct() %>% arrange(ename)

Failed to generate SQL query
