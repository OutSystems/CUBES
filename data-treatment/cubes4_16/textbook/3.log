[     1.561][MainProcess][INFO] Parsing specification...
[     1.565][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.565][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.565][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.566][MainProcess][DEBUG] Reading input files...
[     1.573][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3-1.txt: ['string', 'string']
[     1.578][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3-2.txt: ['string', 'string']
[     1.582][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/3.out: ['string']
[     1.611][MainProcess][DEBUG] Generating DSL...
[     1.637][MainProcess][INFO] Creating 16 processes
[     1.701][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.701][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.701][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.702][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.702][MainProcess][DEBUG] Increasing generator loc to 3
[     1.703][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.706][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.707][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.711][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.715][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.719][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.723][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.730][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.731][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.747][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.752][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.753][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.309][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.310][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.312][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.464][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.465][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.466][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.500][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.501][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.502][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.613][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.614][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.615][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.731][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.734][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     2.737][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.738][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.742][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.747][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.753][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.754][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.756][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter([1]))
[     2.758][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = summarise())
[     2.761][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.761][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     2.764][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.767][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     2.778][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]), l2 = summarise())
[     2.786][cube-solver-9][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([4]), l2 = intersect())
[     2.804][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]), l2 = filter([4]))
[     2.828][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([5]))
[     2.837][cube-solver-11][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([7]), l2 = semi_join())
[     2.864][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([7]))
[     2.875][cube-solver-15][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([8]), l2 = cross_join())
[     2.907][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([8]), l2 = summarise([4]))
[     2.916][cube-solver-5][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter([9]), l2 = mutate())
[     2.923][cube-solver-5][DEBUG] Solving cube (l0 = summarise([5]), l1 = filter([10]), l2 = inner_join())
[     2.988][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([14]), l2 = mutate())
[     3.002][cube-solver-14][DEBUG] Solving cube (l0 = summarise([5]), l1 = anti_join(), l2 = filter([16]))
[     3.416][cube-solver-2][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter([33]))
[     3.503][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter([36]))
[     3.615][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join4(), l2 = filter([38]))
[     3.639][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([38]))
[     3.863][cube-solver-3][DEBUG] Solving cube (l0 = summarise([6]), l1 = summarise([6]), l2 = filter([38]))
[     3.885][cube-solver-3][DEBUG] Solving cube (l0 = summarise([6]), l1 = union(), l2 = filter([38]))
[     3.990][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([38]))
[     3.992][MainProcess][INFO] Statistics:
[     3.992][MainProcess][INFO] 	Generated cubes: 36
[     3.992][MainProcess][INFO] 	Attempted programs: 7
[     3.992][MainProcess][INFO] 		Rejected: 4
[     3.992][MainProcess][INFO] 		Failed: 2
[     3.992][MainProcess][INFO] 	Blacklist clauses: 44
[     3.992][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.993][MainProcess][DEBUG] 	0: Counter({'summarise': 162, 'natural_join': 157})
[     3.993][MainProcess][DEBUG] 	1: Counter({'mutate': 123, 'filter': 57, 'summarise': 34, 'left_join': 29, 'natural_join3': 27, 'natural_join': 26, 'anti_join': 16, 'union': 7})
[     3.994][MainProcess][DEBUG] 	2: Counter({'filter': 262, 'semi_join': 17, 'left_join': 16, 'union': 16, 'natural_join': 8})
[     3.994][MainProcess][INFO] Solution found: filter(left_join(@param0, summarise(@param1, n = n(), ID_key)), Room == 'R128' | n > 4)
[     4.402][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter([36]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/3-1.txt", col_types = cols(ID_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/3-2.txt", col_types = cols(ID_key_student = col_character(),ID_key = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/3.out", col_types = cols(ID_key = col_character()))

df3 <- input2 %>% group_by(ID_key) %>% summarise(n = n()) %>% ungroup()
df4 <- left_join(input1, df3)
df5 <- df4 %>% filter(Room == 'R128' | n > 4)
out <- df5 %>% select(ID_key) %>% arrange(ID_key)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `ID_key`
FROM
  (SELECT `LHS`.`ID_key` AS `ID_key`,
          `LHS`.`Room` AS `Room`,
          `RHS`.`n` AS `n`
   FROM `input1` AS `LHS`
   LEFT JOIN
     (SELECT `ID_key`,
             COUNT() AS `n`
      FROM `input2`
      GROUP BY `ID_key`) AS `RHS` ON (`LHS`.`ID_key` = `RHS`.`ID_key`))
WHERE (`Room` = 'R128'
       OR n > 4.0)
ORDER BY ID_key
