[     1.598][MainProcess][INFO] Parsing specification...
[     1.611][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.612][MainProcess][DEBUG] Reading input files...
[     1.622][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5-1.txt: ['string', 'string', 'string']
[     1.627][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5-2.txt: ['string', 'string']
[     1.632][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/5.out: ['string']
[     1.662][MainProcess][DEBUG] Generating DSL...
[     1.685][MainProcess][INFO] Creating 16 processes
[     1.750][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.750][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.750][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.751][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.750][MainProcess][DEBUG] Increasing generator loc to 3
[     1.751][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.751][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.754][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.762][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.763][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.768][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.770][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.788][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.790][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.791][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.793][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.794][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.205][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.206][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.206][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.206][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.207][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.208][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.311][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.312][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.313][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.427][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.428][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.429][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.594][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.601][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.603][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.609][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.614][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.614][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.618][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.620][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.621][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.623][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.624][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.628][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = summarise([1]))
[     2.632][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = mutate())
[     2.637][cube-solver-5][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([1]), l2 = union())
[     2.638][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     2.639][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     2.640][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter([1]), l2 = intersect())
[     2.643][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([1]), l2 = semi_join())
[     2.645][cube-solver-15][DEBUG] Solving cube (l0 = summarise([2]), l1 = filter([1]), l2 = cross_join())
[     2.657][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]), l2 = filter([2]))
[     2.663][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([2]))
[     2.734][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([8]), l2 = filter([3]))
[     2.758][cube-solver-12][DEBUG] Solving cube (l0 = summarise([8]), l1 = filter([3]), l2 = mutate())
[     2.774][cube-solver-12][DEBUG] Solving cube (l0 = summarise([8]), l1 = filter([3]), l2 = inner_join())
[     2.997][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = summarise([10]))
[     3.018][cube-solver-13][DEBUG] Solving cube (l0 = summarise([10]), l1 = anti_join(), l2 = filter([4]))
[     3.094][cube-solver-3][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join(), l2 = filter([4]))
[     3.196][cube-solver-7][DEBUG] Solving cube (l0 = summarise([11]), l1 = left_join(), l2 = filter([4]))
[     3.331][cube-solver-0][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join4(), l2 = filter([4]))
[     3.331][cube-solver-1][DEBUG] Solving cube (l0 = summarise([11]), l1 = summarise([11]), l2 = filter([4]))
[     3.331][cube-solver-2][DEBUG] Solving cube (l0 = summarise([11]), l1 = natural_join3(), l2 = filter([4]))
[     3.343][cube-solver-0][DEBUG] Solving cube (l0 = summarise([11]), l1 = union(), l2 = filter([4]))
[     3.345][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     3.346][MainProcess][INFO] Statistics:
[     3.347][MainProcess][INFO] 	Generated cubes: 36
[     3.347][MainProcess][INFO] 	Attempted programs: 48
[     3.347][MainProcess][INFO] 		Rejected: 6
[     3.347][MainProcess][INFO] 		Failed: 41
[     3.347][MainProcess][INFO] 	Blacklist clauses: 15
[     3.347][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.348][MainProcess][DEBUG] 	0: Counter({'summarise': 143, 'natural_join': 80})
[     3.348][MainProcess][DEBUG] 	1: Counter({'filter': 121, 'mutate': 40, 'summarise': 40, 'natural_join': 13, 'left_join': 9})
[     3.348][MainProcess][DEBUG] 	2: Counter({'filter': 102, 'semi_join': 28, 'left_join': 26, 'natural_join3': 21, 'union': 20, 'natural_join': 19, 'inner_join': 8})
[     3.348][MainProcess][INFO] Solution found: natural_join(@param1, filter(summarise(@param0, n = n(), F_key), n == max(n)))
[     3.371][cube-solver-7][DEBUG] Found solution with cube (l0 = summarise([11]), l1 = left_join(), l2 = filter([4]))
[     3.582][cube-solver-3][DEBUG] Found solution with cube (l0 = summarise([11]), l1 = natural_join(), l2 = filter([4]))
[     3.685][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise([3]), l2 = filter([2]))
[     3.786][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/5-1.txt", col_types = cols(C_name = col_character(),F_key = col_character(),Room = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/5-2.txt", col_types = cols(F_key = col_character(),F_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/5.out", col_types = cols(F_name = col_character()))

df3 <- input1 %>% group_by(F_key) %>% summarise(n = n()) %>% ungroup()
df4 <- df3 %>% filter(n == max(n))
df5 <- inner_join(input2, df4)
out <- df5 %>% select(F_name) %>% arrange(F_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT F_name
FROM
  (SELECT LHS.F_key AS F_key,
          LHS.F_name AS F_name,
          RHS.n AS n
   FROM input2 AS LHS
   INNER JOIN
     (SELECT F_key,
             n
      FROM
        (SELECT F_key,
                n,
                MAX(n) OVER () AS zzz3
         FROM
           (SELECT F_key,
                   COUNT() AS n
            FROM input1
            GROUP BY F_key))
      WHERE (n = zzz3)) AS RHS ON (LHS.F_key = RHS.F_key))
ORDER BY F_name
