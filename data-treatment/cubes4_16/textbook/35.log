[     1.573][MainProcess][INFO] Parsing specification...
[     1.585][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.585][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.585][MainProcess][DEBUG] Reading input files...
[     1.594][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/aircraft.txt: ['int64', 'string', 'int64']
[     1.599][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/certified.txt: ['int64', 'int64']
[     1.605][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/employees.txt: ['int64', 'string', 'float64']
[     1.609][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/35.out: ['string']
[     1.639][MainProcess][DEBUG] Generating DSL...
[     1.658][MainProcess][INFO] Creating 16 processes
[     1.718][MainProcess][DEBUG] Increasing generator loc to 2
[     1.718][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.719][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.719][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.721][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.732][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.733][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.739][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.747][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.761][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.767][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.770][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.770][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.918][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.919][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     1.920][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.126][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.135][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     2.138][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3())
[     2.140][cube-solver-8][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.141][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     2.143][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.143][cube-solver-9][DEBUG] Solving cube (l0 = filter([1]), l1 = left_join())
[     2.145][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([1]))
[     2.145][cube-solver-10][DEBUG] Solving cube (l0 = semi_join(), l1 = filter([1]))
[     2.146][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([1]))
[     2.148][MainProcess][DEBUG] Increasing generator loc to 3
[     2.148][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.149][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.149][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.150][cube-solver-12][DEBUG] Solving cube (l0 = filter([1]), l1 = semi_join())
[     2.155][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.187][cube-solver-4][DEBUG] Solving cube (l0 = filter([2]), l1 = natural_join())
[     2.193][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.205][cube-solver-13][DEBUG] Solving cube (l0 = filter([2]), l1 = cross_join())
[     2.211][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.223][cube-solver-11][DEBUG] Solving cube (l0 = filter([2]), l1 = intersect())
[     2.228][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.257][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([2]))
[     2.260][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.266][cube-solver-7][DEBUG] Solving cube (l0 = filter([2]), l1 = filter([2]))
[     2.273][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.341][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([2]))
[     2.360][cube-solver-14][DEBUG] Solving cube (l0 = filter([3]), l1 = inner_join())
[     2.366][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.380][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([3]))
[     2.386][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.402][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([5]))
[     2.411][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.455][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([5]))
[     2.463][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.840][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([10]), l2 = natural_join3([1]))
[     3.014][cube-solver-0][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([10]), l2 = inner_join())
[     3.020][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([10]), l2 = filter([10]))
[     3.030][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([1]), l1 = union(), l2 = filter([10]))
[     3.056][cube-solver-8][DEBUG] Solving cube (l0 = natural_join([1]), l1 = filter([10]), l2 = natural_join([1]))
[     3.168][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = cross_join())
[     3.177][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = semi_join())
[     3.181][cube-solver-9][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = natural_join4())
[     3.236][cube-solver-1][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = intersect())
[     3.257][cube-solver-13][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = left_join())
[     3.308][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = union())
[     3.342][cube-solver-4][DEBUG] Solving cube (l0 = natural_join([2]), l1 = filter([10]), l2 = anti_join())
[     3.355][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join(), l2 = filter([10]))
[     3.420][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join(), l2 = filter([10]))
[     3.432][cube-solver-3][DEBUG] Solving cube (l0 = natural_join([2]), l1 = intersect(), l2 = filter([10]))
[     4.429][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.940][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     5.158][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join(), l2 = filter([10]))
[     5.609][cube-solver-5][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join(), l2 = filter([10]))
[     5.949][cube-solver-7][DEBUG] Solving cube (l0 = natural_join([2]), l1 = inner_join(), l2 = filter([10]))
[     6.760][cube-solver-2][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join([2]), l2 = filter([10]))
[     6.986][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join3([2]), l2 = filter([10]))
[     6.999][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = natural_join4(), l2 = filter([10]))
[     7.009][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = natural_join([2]))
[     7.424][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = natural_join3([2]))
[     7.427][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = natural_join4())
[     7.570][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = filter([10]))
[     7.899][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = anti_join())
[     9.012][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = left_join())
[    10.376][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = union())
[    10.683][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = intersect())
[    11.423][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[    12.075][cube-solver-6][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = semi_join())
[    15.329][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = cross_join())
[    16.756][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = inner_join())
[    17.492][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = anti_join(), l2 = filter([10]))
[    18.069][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = left_join(), l2 = filter([10]))
[    25.697][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = union(), l2 = filter([10]))
[    29.479][cube-solver-6][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = intersect(), l2 = filter([10]))
[    29.547][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = semi_join(), l2 = filter([10]))
[    30.865][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = cross_join(), l2 = filter([10]))
[    31.017][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = inner_join(), l2 = filter([10]))
[    37.981][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = natural_join([2]), l2 = filter([10]))
[    37.988][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = natural_join3([2]), l2 = filter([10]))
[    37.995][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3([2]), l1 = natural_join4(), l2 = filter([10]))
[    38.001][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([10]), l2 = natural_join([2]))
[    38.008][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([10]), l2 = natural_join3([2]))
[    38.014][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([10]), l2 = natural_join4())
[    38.019][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([10]), l2 = filter([10]))
[    38.027][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([10]), l2 = anti_join())
[    38.032][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([10]), l2 = left_join())
[    38.037][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([10]), l2 = union())
[    38.042][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([10]), l2 = intersect())
[    38.048][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([10]), l2 = semi_join())
[    38.053][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([10]), l2 = cross_join())
[    38.058][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([10]), l2 = inner_join())
[    38.063][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join(), l2 = filter([10]))
[    38.068][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join(), l2 = filter([10]))
[    38.073][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = union(), l2 = filter([10]))
[    38.078][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect(), l2 = filter([10]))
[    38.084][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join(), l2 = filter([10]))
[    38.089][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join(), l2 = filter([10]))
[    38.094][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join(), l2 = filter([10]))
[    38.099][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join([2]), l2 = filter([10]))
[    38.105][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3([2]), l2 = filter([10]))
[    38.111][cube-solver-8][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4(), l2 = filter([10]))
[    38.116][cube-solver-8][DEBUG] Solving cube (l0 = filter([10]), l1 = natural_join([2]), l2 = filter([10]))
[    38.125][cube-solver-8][DEBUG] Solving cube (l0 = filter([10]), l1 = natural_join([2]), l2 = anti_join())
[    38.131][cube-solver-8][DEBUG] Solving cube (l0 = filter([10]), l1 = natural_join([2]), l2 = left_join())
[    38.289][cube-solver-9][DEBUG] Solving cube (l0 = filter([10]), l1 = natural_join([2]), l2 = union())
[    38.491][cube-solver-3][DEBUG] Solving cube (l0 = filter([10]), l1 = natural_join([2]), l2 = intersect())
[    42.034][cube-solver-8][DEBUG] Solving cube (l0 = filter([10]), l1 = natural_join([2]), l2 = semi_join())
[    42.134][cube-solver-9][DEBUG] Solving cube (l0 = filter([10]), l1 = natural_join([2]), l2 = cross_join())
[    44.817][cube-solver-8][DEBUG] Solving cube (l0 = filter([10]), l1 = natural_join([2]), l2 = inner_join())
[    45.455][cube-solver-3][DEBUG] Solving cube (l0 = filter([10]), l1 = natural_join([2]), l2 = natural_join([2]))
[    46.606][cube-solver-15][DEBUG] Solving cube (l0 = filter([10]), l1 = natural_join([2]), l2 = natural_join3([2]))
[    46.613][cube-solver-15][DEBUG] Solving cube (l0 = filter([10]), l1 = natural_join([2]), l2 = natural_join4())
[    46.618][cube-solver-15][DEBUG] Solving cube (l0 = filter([10]), l1 = natural_join3([2]), l2 = filter([10]))
[    47.507][cube-solver-1][DEBUG] Solving cube (l0 = filter([10]), l1 = natural_join3([2]), l2 = anti_join())
[    47.575][cube-solver-13][DEBUG] Found solution with cube (l0 = natural_join3([2]), l1 = filter([10]), l2 = anti_join())
[    47.577][MainProcess][INFO] Statistics:
[    47.578][MainProcess][INFO] 	Generated cubes: 98
[    47.578][MainProcess][INFO] 	Attempted programs: 8252
[    47.579][MainProcess][INFO] 		Rejected: 3403
[    47.579][MainProcess][INFO] 		Failed: 4848
[    47.579][MainProcess][INFO] 	Blacklist clauses: 14
[    47.579][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    47.581][MainProcess][DEBUG] 	0: Counter({'filter': 1080, 'natural_join3': 240})
[    47.582][MainProcess][DEBUG] 	1: Counter({'natural_join4': 840, 'natural_join3': 240, 'filter': 240})
[    47.582][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    47.611][MainProcess][DEBUG] 	0: Counter({'natural_join3': 39904, 'natural_join': 11482, 'filter': 1685})
[    47.634][MainProcess][DEBUG] 	1: Counter({'filter': 37945, 'inner_join': 3423, 'union': 2160, 'left_join': 2160, 'cross_join': 2070, 'natural_join': 2044, 'anti_join': 1904, 'semi_join': 1220, 'natural_join3': 123, 'intersect': 30})
[    47.656][MainProcess][DEBUG] 	2: Counter({'filter': 14771, 'natural_join4': 7200, 'inner_join': 5733, 'natural_join3': 5040, 'cross_join': 4326, 'anti_join': 3734, 'left_join': 3600, 'union': 3600, 'semi_join': 2680, 'natural_join': 2160, 'intersect': 240})
[    47.657][MainProcess][INFO] Solution found: anti_join(natural_join3(@param0, @param1, @param2), filter(natural_join3(@param0, @param1, @param2), crusingrange <= 1000), 'eid', 'salary')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/aircraft.txt", col_types = cols(aid = col_integer(),aname = col_character(),crusingrange = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/certified.txt", col_types = cols(eid = col_integer(),aid = col_integer()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/employees.txt", col_types = cols(eid = col_integer(),ename = col_character(),salary = col_double()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/35.out", col_types = cols(ename = col_character()))

df4 <- inner_join(input1, input2) %>% inner_join(input3)
df5 <- df4 %>% filter(crusingrange <= 1000)
df6 <- anti_join(df4, df5, by=c('eid', 'salary'))
out <- df6 %>% select(ename) %>% distinct() %>% arrange(ename)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT ename
FROM
  (SELECT *
   FROM
     (SELECT LHS.aid AS aid,
             LHS.aname AS aname,
             LHS.crusingrange AS crusingrange,
             LHS.eid AS eid,
             RHS.ename AS ename,
             RHS.salary AS salary
      FROM
        (SELECT LHS.aid AS aid,
                LHS.aname AS aname,
                LHS.crusingrange AS crusingrange,
                RHS.eid AS eid
         FROM input1 AS LHS
         INNER JOIN input2 AS RHS ON (LHS.aid = RHS.aid)) AS LHS
      INNER JOIN input3 AS RHS ON (LHS.eid = RHS.eid)) AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT LHS.aid AS aid,
                     LHS.aname AS aname,
                     LHS.crusingrange AS crusingrange,
                     LHS.eid AS eid,
                     RHS.ename AS ename,
                     RHS.salary AS salary
              FROM
                (SELECT LHS.aid AS aid,
                        LHS.aname AS aname,
                        LHS.crusingrange AS crusingrange,
                        RHS.eid AS eid
                 FROM input1 AS LHS
                 INNER JOIN input2 AS RHS ON (LHS.aid = RHS.aid)) AS LHS
              INNER JOIN input3 AS RHS ON (LHS.eid = RHS.eid))
           WHERE (crusingrange <= 1000.0)) AS RHS
        WHERE (LHS.eid = RHS.eid
               AND LHS.salary = RHS.salary) ))
ORDER BY ename
