[     3.388][MainProcess][INFO] Parsing specification...
[     3.410][MainProcess][DEBUG] Reading input files...
[     3.424][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/11-1.txt: ['string', 'string']
[     3.431][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/11-2.txt: ['string', 'string']
[     3.436][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/11.out: ['string']
[     3.480][MainProcess][DEBUG] Generating DSL...
[     3.504][MainProcess][INFO] Creating 16 processes
[     3.589][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.589][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.589][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.589][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.589][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.589][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.589][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.589][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.590][MainProcess][DEBUG] Increasing generator loc to 2
[     3.592][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     3.596][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     3.601][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.604][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.616][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.623][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.627][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.633][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.665][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     3.677][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     3.679][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     3.679][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.727][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     3.727][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     3.727][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.727][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     3.729][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.733][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.734][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.736][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.744][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.753][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     3.769][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([6]))
[     3.777][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     3.778][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect())
[     3.779][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([6]))
[     3.786][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     3.788][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     3.790][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect())
[     3.792][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     3.793][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([2]))
[     3.794][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     3.798][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([3]))
[     3.803][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     3.805][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     3.807][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     3.807][cube-solver-3][DEBUG] Found solution with cube (l0 = anti_join(),)
[     3.808][MainProcess][INFO] Statistics:
[     3.808][MainProcess][INFO] 	Generated cubes: 30
[     3.808][MainProcess][INFO] 	Attempted programs: 9
[     3.808][MainProcess][INFO] 		Rejected: 0
[     3.808][MainProcess][INFO] 		Failed: 8
[     3.808][MainProcess][INFO] 	Blacklist clauses: 11
[     3.808][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.809][MainProcess][DEBUG] 	0: Counter({'left_join': 11, 'inner_join': 8, 'semi_join': 5, 'union': 5, 'natural_join': 4, 'anti_join': 3})
[     3.809][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.809][MainProcess][DEBUG] 	0: Counter({'natural_join': 1})
[     3.809][MainProcess][DEBUG] 	1: Counter({'left_join': 1})
[     3.809][MainProcess][INFO] Solution found: anti_join(@param0, @param1, 'S_key')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/11-1.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/11-2.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/11.out", col_types = cols(S_name = col_character()))

df3 <- anti_join(input1, input2, by=c('S_key'))
out <- df3 %>% select(S_name) %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT S_name
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM input2 AS RHS
        WHERE (LHS.S_key = RHS.S_key) ))
ORDER BY S_name
