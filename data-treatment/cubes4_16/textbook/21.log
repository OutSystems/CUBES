[     1.563][MainProcess][INFO] Parsing specification...
[     1.566][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.566][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.567][MainProcess][DEBUG] Reading input files...
[     1.581][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21-1.txt: ['string', 'string']
[     1.586][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21-2.txt: ['string', 'string']
[     1.591][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21-3.txt: ['string', 'string']
[     1.598][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/21.out: ['string']
[     1.630][MainProcess][DEBUG] Generating DSL...
[     1.647][MainProcess][INFO] Creating 16 processes
[     1.711][MainProcess][DEBUG] Increasing generator loc to 2
[     1.711][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.712][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.712][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.712][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.712][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.712][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.714][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.718][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.724][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.730][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.735][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.736][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.748][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.748][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.754][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.764][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.977][cube-solver-0][WARNING] There is no solution for current loc (1).
[     1.978][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     1.980][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.041][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     2.041][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = natural_join())
[     2.046][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     2.047][cube-solver-8][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     2.048][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     2.051][cube-solver-4][DEBUG] Solving cube (l0 = inner_join(), l1 = filter())
[     2.051][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(), l1 = filter())
[     2.051][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = intersect())
[     2.053][MainProcess][DEBUG] Increasing generator loc to 3
[     2.053][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.054][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.055][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.060][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     2.063][cube-solver-14][DEBUG] Solving cube (l0 = filter(), l1 = inner_join())
[     2.063][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.065][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     2.068][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     2.069][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.069][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.072][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.084][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     2.086][cube-solver-9][DEBUG] Solving cube (l0 = filter(), l1 = left_join())
[     2.086][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter())
[     2.090][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.091][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.091][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter())
[     2.125][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = natural_join3([1]))
[     2.231][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]))
[     2.239][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.271][cube-solver-13][DEBUG] Solving cube (l0 = filter([4]), l1 = cross_join())
[     2.277][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.281][cube-solver-5][DEBUG] Found solution with cube (l0 = filter(), l1 = natural_join3([1]))
[     2.282][MainProcess][INFO] Statistics:
[     2.282][MainProcess][INFO] 	Generated cubes: 33
[     2.282][MainProcess][INFO] 	Attempted programs: 3
[     2.283][MainProcess][INFO] 		Rejected: 0
[     2.283][MainProcess][INFO] 		Failed: 2
[     2.283][MainProcess][INFO] 	Blacklist clauses: 5
[     2.283][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.283][MainProcess][DEBUG] 	0: Counter({'filter': 12, 'natural_join3': 8})
[     2.283][MainProcess][DEBUG] 	1: Counter({'filter': 8, 'natural_join3': 8, 'natural_join4': 4})
[     2.284][MainProcess][INFO] Solution found: natural_join3(filter(@param1, color == 'red' | color == 'green'), @param0, @param2)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/21-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/21-2.txt", col_types = cols(P_id = col_character(),color = col_character()))
input2 <- copy_to(con, input2)
input3 <- read_csv("tests-examples/textbook/tables/21-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input3 <- copy_to(con, input3)
expected_output <- read_csv("tests-examples/textbook/tables/21.out", col_types = cols(S_name = col_character()))

df4 <- input2 %>% filter(color == 'red' | color == 'green')
df5 <- inner_join(df4, input1) %>% inner_join(input3)
out <- df5 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `S_name`
FROM
  (SELECT `LHS`.`P_id` AS `P_id`,
          `LHS`.`color` AS `color`,
          `LHS`.`S_key` AS `S_key`,
          `RHS`.`S_name` AS `S_name`
   FROM
     (SELECT `LHS`.`P_id` AS `P_id`,
             `LHS`.`color` AS `color`,
             `RHS`.`S_key` AS `S_key`
      FROM
        (SELECT *
         FROM `input2`
         WHERE (`color` = 'red'
                OR `color` = 'green')) AS LHS
      INNER JOIN input1 AS RHS ON (LHS.P_id = RHS.P_id)) AS LHS
   INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key))
ORDER BY S_name
