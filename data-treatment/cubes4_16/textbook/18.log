[     1.533][MainProcess][INFO] Parsing specification...
[     1.536][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.536][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.536][MainProcess][DEBUG] Reading input files...
[     1.543][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/18-1.txt: ['string', 'string', 'int64']
[     1.547][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/18-3.txt: ['string', 'string']
[     1.552][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/18.out: ['string', 'string']
[     1.579][MainProcess][DEBUG] Generating DSL...
[     1.740][MainProcess][INFO] Creating 16 processes
[     1.799][MainProcess][DEBUG] Increasing generator loc to 2
[     1.925][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.929][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.932][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.934][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.939][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.943][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.947][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.949][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.949][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.953][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.956][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.959][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.966][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.971][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.975][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     2.017][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     5.122][cube-solver-1][WARNING] There is no solution for current loc (1).
[     5.123][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     5.131][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     5.198][cube-solver-0][WARNING] There is no solution for current loc (1).
[     5.198][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     5.206][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     8.379][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     8.389][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     8.398][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     8.403][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     8.424][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     8.426][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     8.428][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     8.430][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     8.431][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     8.434][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     8.438][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     8.439][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     8.451][cube-solver-12][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter())
[     8.451][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = left_join())
[     8.462][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     8.480][cube-solver-15][DEBUG] Solving cube (l0 = summarise([3]), l1 = union())
[     8.487][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = summarise([1]))
[     8.494][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     8.498][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([1]))
[     8.511][cube-solver-11][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]))
[     8.515][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     8.521][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([3]))
[     8.533][cube-solver-12][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     8.548][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = summarise([4]))
[     8.621][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join3())
[     8.622][MainProcess][INFO] Statistics:
[     8.623][MainProcess][INFO] 	Generated cubes: 28
[     8.623][MainProcess][INFO] 	Attempted programs: 1
[     8.623][MainProcess][INFO] 		Rejected: 0
[     8.623][MainProcess][INFO] 		Failed: 0
[     8.623][MainProcess][INFO] 	Blacklist clauses: 4
[     8.623][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     8.624][MainProcess][DEBUG] 	0: Counter({'summarise': 32, 'natural_join': 24, 'anti_join': 6, 'left_join': 6, 'union': 4})
[     8.624][MainProcess][DEBUG] 	1: Counter({'mutate': 26, 'natural_join3': 15, 'summarise': 14, 'inner_join': 9, 'union': 8})
[     8.625][MainProcess][INFO] Solution found: natural_join3(@param1, @param0, summarise(@param0, cost = max(cost), P_id))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/18-1.txt", col_types = cols(S_key = col_character(),P_id = col_character(),cost = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/18-3.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/18.out", col_types = cols(P_id = col_character(),S_name = col_character()))

df3 <- input1 %>% group_by(P_id) %>% summarise(cost = max(cost)) %>% ungroup()
df4 <- inner_join(input2, input1) %>% inner_join(df3)
out <- df4 %>% select(P_id, S_name) %>% arrange(P_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_id,
       S_name
FROM
  (SELECT LHS.S_key AS S_key,
          LHS.S_name AS S_name,
          LHS.P_id AS P_id,
          LHS.cost AS cost
   FROM
     (SELECT LHS.S_key AS S_key,
             LHS.S_name AS S_name,
             RHS.P_id AS P_id,
             RHS.cost AS cost
      FROM input2 AS LHS
      INNER JOIN input1 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
   INNER JOIN
     (SELECT P_id,
             MAX(cost) AS cost
      FROM input1
      GROUP BY P_id) AS RHS ON (LHS.P_id = RHS.P_id
                                AND LHS.cost = RHS.cost))
ORDER BY P_id
