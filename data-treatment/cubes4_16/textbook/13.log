[     1.581][MainProcess][INFO] Parsing specification...
[     1.586][MainProcess][DEBUG] Reading input files...
[     1.593][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/13-1.txt: ['string', 'string']
[     1.599][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/13-2.txt: ['string', 'string']
[     1.603][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/13.out: ['string']
[     1.634][MainProcess][DEBUG] Generating DSL...
[     1.647][MainProcess][INFO] Creating 16 processes
[     1.709][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.709][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     1.709][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     1.709][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     1.709][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     1.709][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     1.709][MainProcess][DEBUG] Increasing generator loc to 2
[     1.709][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.711][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     1.714][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     1.718][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     1.721][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.725][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.733][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.733][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.747][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.779][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     1.781][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     1.784][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     1.788][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     1.793][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.833][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     1.833][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     1.833][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     1.834][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     1.836][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.838][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     1.838][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     1.841][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.862][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([8]))
[     1.871][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     1.871][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect())
[     1.874][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([10]))
[     1.883][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     1.886][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     1.888][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect())
[     1.889][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     1.891][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     1.894][cube-solver-7][DEBUG] Found solution with cube (l0 = semi_join(),)
[     1.895][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([2]))
[     1.896][MainProcess][INFO] Statistics:
[     1.896][MainProcess][INFO] 	Generated cubes: 27
[     1.896][MainProcess][INFO] 	Attempted programs: 3
[     1.896][MainProcess][INFO] 		Rejected: 0
[     1.896][MainProcess][INFO] 		Failed: 2
[     1.896][MainProcess][INFO] 	Blacklist clauses: 15
[     1.896][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     1.897][MainProcess][DEBUG] 	0: Counter({'inner_join': 7, 'semi_join': 3, 'left_join': 3, 'natural_join': 3, 'union': 2})
[     1.897][MainProcess][INFO] Solution found: semi_join(@param1, @param0)
[     1.897][cube-solver-0][DEBUG] Found solution with cube (l0 = natural_join(),)
[     1.959][cube-solver-4][DEBUG] Found solution with cube (l0 = left_join(),)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/13-1.txt", col_types = cols(S_key = col_character(),P_id = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/13-2.txt", col_types = cols(P_id = col_character(),P_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/13.out", col_types = cols(P_name = col_character()))

df3 <- semi_join(input2, input1)
out <- df3 %>% select(P_name) %>% arrange(P_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT P_name
FROM
  (SELECT *
   FROM input2 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM input1 AS RHS
        WHERE (LHS.P_id = RHS.P_id) ))
ORDER BY P_name
