[     3.636][MainProcess][INFO] Parsing specification...
[     3.650][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.650][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.650][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.651][MainProcess][DEBUG] Reading input files...
[     3.664][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/8-1.txt: ['string', 'string', 'int64']
[     3.671][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/8.out: ['string', 'int64']
[     3.711][MainProcess][DEBUG] Generating DSL...
[     3.765][MainProcess][INFO] Creating 16 processes
[     3.854][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.854][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.854][MainProcess][DEBUG] Increasing generator loc to 3
[     3.854][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.854][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.855][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.863][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.865][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.870][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.875][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.882][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.886][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.893][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.898][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     3.932][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     3.940][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     3.951][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     5.181][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     5.263][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     5.394][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     5.480][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     5.835][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     5.864][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     5.872][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     5.874][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     5.875][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     5.882][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     5.882][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     5.884][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     5.886][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     5.887][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     5.888][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     5.890][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     5.892][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     5.893][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     5.896][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     5.962][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = summarise())
[     5.971][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     5.977][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([2]))
[     6.010][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = union())
[     6.017][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter([4]))
[     6.035][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = intersect())
[     6.191][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = summarise())
[     6.206][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = semi_join())
[     6.271][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = mutate())
[     6.284][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([4]))
[     6.286][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = cross_join())
[     6.296][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = mutate())
[     6.313][cube-solver-1][DEBUG] Found solution with cube (l0 = filter(), l1 = summarise())
[     6.314][MainProcess][INFO] Statistics:
[     6.314][MainProcess][INFO] 	Generated cubes: 32
[     6.314][MainProcess][INFO] 	Attempted programs: 14
[     6.314][MainProcess][INFO] 		Rejected: 13
[     6.314][MainProcess][INFO] 		Failed: 0
[     6.314][MainProcess][INFO] 	Blacklist clauses: 4
[     6.314][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     6.315][MainProcess][DEBUG] 	0: Counter({'filter': 141, 'mutate': 89, 'summarise': 16})
[     6.315][MainProcess][DEBUG] 	1: Counter({'filter': 105, 'summarise': 93, 'mutate': 48})
[     6.315][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     6.315][MainProcess][DEBUG] 	0: Counter({'summarise': 150})
[     6.315][MainProcess][DEBUG] 	1: Counter({'filter': 150})
[     6.316][MainProcess][DEBUG] 	2: Counter({'left_join': 34, 'natural_join': 32, 'natural_join3': 24, 'union': 24, 'filter': 12, 'anti_join': 12, 'summarise': 10, 'semi_join': 2})
[     6.316][MainProcess][INFO] Solution found: summarise(filter(@param0, level != 'JR'), meanage = mean(age), level)
[     6.455][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = summarise())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/8-1.txt", col_types = cols(S_key = col_character(),level = col_character(),age = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/textbook/tables/8.out", col_types = cols(level = col_character(),meanage = col_integer()))

df2 <- input1 %>% filter(level != 'JR')
df3 <- df2 %>% group_by(level) %>% summarise(meanage = mean(age)) %>% ungroup()
out <- df3 %>% select(level, meanage) %>% arrange(level)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `level`,
       `meanage`
FROM
  (SELECT `level`,
          AVG(`age`) AS `meanage`
   FROM
     (SELECT *
      FROM `input1`
      WHERE (`level` != 'JR'))
   GROUP BY LEVEL)
ORDER BY LEVEL
