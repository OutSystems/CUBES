[     1.750][MainProcess][INFO] Parsing specification...
[     1.769][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.770][MainProcess][DEBUG] Reading input files...
[     1.778][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/10-1.txt: ['string', 'string']
[     1.783][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/10-2.txt: ['string', 'string']
[     1.786][MainProcess][INFO] Inferred data types for table tests-examples/textbook/tables/10.out: ['string']
[     1.814][MainProcess][DEBUG] Generating DSL...
[     1.834][MainProcess][INFO] Creating 16 processes
[     1.891][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.891][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.891][MainProcess][DEBUG] Increasing generator loc to 3
[     1.891][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.891][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.892][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.893][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.896][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.907][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.907][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.909][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.912][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.914][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.917][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.928][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.934][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.936][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.194][cube-solver-2][WARNING] There is no solution for current loc (2).
[     2.195][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.196][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.260][cube-solver-3][WARNING] There is no solution for current loc (2).
[     2.260][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.262][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     2.349][cube-solver-0][WARNING] There is no solution for current loc (2).
[     2.349][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.351][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     2.440][cube-solver-1][WARNING] There is no solution for current loc (2).
[     2.441][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.443][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.454][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.460][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.464][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.467][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.469][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.469][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.472][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.474][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.475][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     2.477][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.478][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.481][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     2.483][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     2.506][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([1]))
[     2.509][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter([2]))
[     2.512][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = intersect())
[     2.532][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([2]))
[     2.538][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([2]), l2 = summarise())
[     2.545][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = semi_join())
[     2.549][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([2]))
[     2.556][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = cross_join())
[     2.702][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([3]), l2 = summarise([6]))
[     2.713][cube-solver-13][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([3]), l2 = mutate())
[     2.722][cube-solver-13][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([3]), l2 = inner_join())
[     2.890][cube-solver-3][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter([4]))
[     2.950][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = mutate())
[     2.957][cube-solver-14][DEBUG] Solving cube (l0 = summarise([6]), l1 = anti_join(), l2 = filter([4]))
[     2.990][cube-solver-7][DEBUG] Solving cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([4]))
[     2.993][cube-solver-2][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter([4]))
[     3.012][cube-solver-3][DEBUG] Found solution with cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter([4]))
[     3.013][MainProcess][INFO] Statistics:
[     3.014][MainProcess][INFO] 	Generated cubes: 35
[     3.014][MainProcess][INFO] 	Attempted programs: 5
[     3.014][MainProcess][INFO] 		Rejected: 4
[     3.014][MainProcess][INFO] 		Failed: 0
[     3.014][MainProcess][INFO] 	Blacklist clauses: 10
[     3.014][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     3.015][MainProcess][DEBUG] 	0: Counter({'summarise': 123, 'natural_join': 62})
[     3.015][MainProcess][DEBUG] 	1: Counter({'filter': 117, 'mutate': 32, 'summarise': 30, 'natural_join3': 6})
[     3.015][MainProcess][DEBUG] 	2: Counter({'filter': 68, 'left_join': 29, 'union': 22, 'semi_join': 16, 'anti_join': 16, 'natural_join': 14, 'natural_join3': 12, 'inner_join': 8})
[     3.015][MainProcess][INFO] Solution found: filter(natural_join3(@param0, @param1, summarise(@param0, n = n(), S_key)), n == max(n))
[     3.027][cube-solver-12][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     3.111][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter([4]))
[     3.260][cube-solver-7][DEBUG] Found solution with cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([4]))
[     3.416][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     3.432][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     3.443][cube-solver-4][DEBUG] Found solution with cube (l0 = natural_join(), l1 = summarise(), l2 = filter([2]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/textbook/tables/10-1.txt", col_types = cols(S_key = col_character(),C_name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/textbook/tables/10-2.txt", col_types = cols(S_key = col_character(),S_name = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/textbook/tables/10.out", col_types = cols(S_name = col_character()))

df3 <- input1 %>% group_by(S_key) %>% summarise(n = n()) %>% ungroup()
df4 <- inner_join(input1, input2) %>% inner_join(df3)
df5 <- df4 %>% filter(n == max(n))
out <- df5 %>% select(S_name) %>% distinct() %>% arrange(S_name)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT S_name
FROM
  (SELECT S_key,
          C_name,
          S_name,
          n
   FROM
     (SELECT S_key,
             C_name,
             S_name,
             n,
             MAX(n) OVER () AS zzz3
      FROM
        (SELECT LHS.S_key AS S_key,
                LHS.C_name AS C_name,
                LHS.S_name AS S_name,
                RHS.n AS n
         FROM
           (SELECT LHS.S_key AS S_key,
                   LHS.C_name AS C_name,
                   RHS.S_name AS S_name
            FROM input1 AS LHS
            INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key)) AS LHS
         INNER JOIN
           (SELECT S_key,
                   COUNT() AS n
            FROM input1
            GROUP BY S_key) AS RHS ON (LHS.S_key = RHS.S_key)))
   WHERE (n = zzz3))
ORDER BY S_name
