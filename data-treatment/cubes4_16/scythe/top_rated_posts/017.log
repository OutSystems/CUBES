[     1.569][MainProcess][INFO] Parsing specification...
[     1.582][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.582][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.582][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.583][MainProcess][DEBUG] Reading input files...
[     1.594][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i017.csv: ['int64', 'string', 'string']
[     1.603][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o017.csv: ['int64', 'string', 'string']
[     1.632][MainProcess][DEBUG] Generating DSL...
[     1.802][MainProcess][INFO] Creating 16 processes
[     1.887][MainProcess][DEBUG] Increasing generator loc to 3
[     1.996][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.000][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.002][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.009][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.012][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.024][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.040][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.044][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.052][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.056][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.064][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.073][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.081][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.088][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.112][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.115][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     8.991][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     9.022][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     9.023][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     9.059][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     9.604][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     9.616][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    11.168][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    13.102][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[    13.653][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]), l2 = filter())
[    13.666][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([3]))
[    13.674][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise([3]))
[    13.688][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[    13.719][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = natural_join())
[    13.725][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[    13.725][cube-solver-9][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = natural_join3())
[    13.732][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[    13.752][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]), l2 = filter())
[    13.752][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = natural_join4())
[    13.761][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise([3]))
[    13.782][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]), l2 = filter())
[    13.787][cube-solver-14][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = summarise([3]))
[    13.798][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = filter())
[    13.832][cube-solver-10][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = anti_join())
[    13.837][cube-solver-6][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = left_join())
[    13.849][cube-solver-12][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = union())
[    13.864][cube-solver-5][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = intersect())
[    13.866][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[    13.892][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[    13.896][cube-solver-8][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = semi_join())
[    13.931][cube-solver-7][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = cross_join())
[    13.940][cube-solver-11][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([1]), l2 = mutate())
[    13.941][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([3]))
[    13.994][cube-solver-15][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter([4]), l2 = inner_join())
[    14.674][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = filter(), l2 = semi_join())
[    14.675][MainProcess][INFO] Statistics:
[    14.676][MainProcess][INFO] 	Generated cubes: 33
[    14.676][MainProcess][INFO] 	Attempted programs: 121
[    14.676][MainProcess][INFO] 		Rejected: 40
[    14.676][MainProcess][INFO] 		Failed: 80
[    14.676][MainProcess][INFO] 	Blacklist clauses: 7
[    14.676][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    14.677][MainProcess][DEBUG] 	0: Counter({'mutate': 540, 'summarise': 156, 'filter': 108})
[    14.677][MainProcess][DEBUG] 	1: Counter({'filter': 696, 'mutate': 60, 'summarise': 48})
[    14.677][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    14.678][MainProcess][DEBUG] 	0: Counter({'summarise': 420})
[    14.678][MainProcess][DEBUG] 	1: Counter({'filter': 420})
[    14.678][MainProcess][DEBUG] 	2: Counter({'natural_join': 96, 'mutate': 71, 'natural_join3': 60, 'left_join': 60, 'union': 48, 'filter': 36, 'semi_join': 25, 'anti_join': 24})
[    14.678][MainProcess][INFO] Solution found: semi_join(filter(@param0, str_detect(SKU, 'FOO-')), summarise(@param0, ID = min(ID), PRODUCT))
[    14.854][cube-solver-15][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = filter([4]), l2 = inner_join())
[    15.051][MainProcess][ERROR] Error while trying to convert R code to SQL.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i017.csv", col_types = cols(ID = col_integer(),SKU = col_character(),PRODUCT = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o017.csv", col_types = cols(ID = col_integer(),SKU = col_character(),PRODUCT = col_character()))

df2 <- input1 %>% filter(str_detect(SKU, 'FOO-'))
df3 <- input1 %>% group_by(PRODUCT) %>% summarise(ID = min(ID)) %>% ungroup()
df4 <- semi_join(df2, df3)
out <- df4 %>% select(ID, SKU, PRODUCT) %>% arrange(ID)

Failed to generate SQL query
