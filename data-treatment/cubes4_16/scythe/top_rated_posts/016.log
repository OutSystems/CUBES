[     1.579][MainProcess][INFO] Parsing specification...
[     1.590][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.590][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.591][MainProcess][DEBUG] Reading input files...
[     1.601][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i016.csv: ['int64', 'int64', 'string']
[     1.606][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o016.csv: ['int64', 'string']
[     1.634][MainProcess][DEBUG] Generating DSL...
[     1.666][MainProcess][INFO] Creating 16 processes
[     1.727][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.728][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.728][MainProcess][DEBUG] Increasing generator loc to 2
[     1.732][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.733][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.737][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.744][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.748][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.749][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.752][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.757][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.762][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.763][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.770][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.776][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.799][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.123][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.177][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.553][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.554][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.559][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     2.561][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.572][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.574][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.576][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.579][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     2.581][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.583][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.585][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.589][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.591][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.597][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.599][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.601][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.602][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.604][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.606][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.611][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.618][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.626][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.661][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     2.730][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.738][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.764][cube-solver-7][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise())
[     2.765][MainProcess][INFO] Statistics:
[     2.766][MainProcess][INFO] 	Generated cubes: 27
[     2.766][MainProcess][INFO] 	Attempted programs: 2
[     2.766][MainProcess][INFO] 		Rejected: 1
[     2.766][MainProcess][INFO] 		Failed: 0
[     2.766][MainProcess][INFO] 	Blacklist clauses: 0
[     2.766][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     2.767][MainProcess][DEBUG] 	0: Counter({'mutate': 76, 'summarise': 57})
[     2.767][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.767][MainProcess][DEBUG] 	0: Counter({'summarise': 55, 'left_join': 14, 'union': 4})
[     2.767][MainProcess][DEBUG] 	1: Counter({'mutate': 18, 'left_join': 14, 'semi_join': 12, 'natural_join': 9, 'summarise': 9, 'union': 7, 'anti_join': 4})
[     2.767][MainProcess][INFO] Solution found: summarise(left_join(@param0, @param0), concatEMPLOYEE = string_agg(EMPLOYEE, ', '), COMPANY_ID)
[     2.896][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i016.csv", col_types = cols(ID = col_integer(),COMPANY_ID = col_integer(),EMPLOYEE = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o016.csv", col_types = cols(COMPANY_ID = col_integer(),concatEMPLOYEE = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df2 <- left_join(input1, input1)
df3 <- df2 %>% group_by(COMPANY_ID) %>% summarise(concatEMPLOYEE = string_agg(EMPLOYEE, ', ')) %>% ungroup()
out <- df3 %>% select(COMPANY_ID, concatEMPLOYEE) %>% arrange(COMPANY_ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `COMPANY_ID`,
       `concatEMPLOYEE`
FROM
  (SELECT `COMPANY_ID`,
          string_agg(`EMPLOYEE`, ', ') AS concatEMPLOYEE
   FROM
     (SELECT LHS.ID AS ID,
             LHS.COMPANY_ID AS COMPANY_ID,
             LHS.EMPLOYEE AS EMPLOYEE
      FROM input1 AS LHS
      LEFT JOIN input1 AS RHS ON (LHS.ID = RHS.ID
                                  AND LHS.COMPANY_ID = RHS.COMPANY_ID
                                  AND LHS.EMPLOYEE = RHS.EMPLOYEE))
   GROUP BY COMPANY_ID)
ORDER BY COMPANY_ID
