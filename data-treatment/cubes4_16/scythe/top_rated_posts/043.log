[     1.573][MainProcess][INFO] Parsing specification...
[     1.581][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.581][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.583][MainProcess][DEBUG] Reading input files...
[     1.616][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i043.csv: ['string', 'string']
[     1.628][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o043.csv: ['string', 'string']
[     1.657][MainProcess][DEBUG] Generating DSL...
[     1.675][MainProcess][INFO] Creating 16 processes
[     1.755][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.755][MainProcess][DEBUG] Increasing generator loc to 3
[     1.755][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.755][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.755][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.756][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.756][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.756][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.756][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.757][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.758][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.771][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.772][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.776][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.778][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.787][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.800][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.026][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.028][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.191][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.193][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     2.195][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter())
[     2.197][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.198][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.198][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.201][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.201][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.201][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.203][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.206][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.207][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.208][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.209][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.211][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = filter([1]))
[     2.211][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]))
[     2.213][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.216][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = summarise())
[     2.220][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.228][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = mutate())
[     2.233][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     2.343][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = mutate())
[     2.349][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = intersect())
[     2.481][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([3]))
[     2.481][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter([3]))
[     2.485][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = semi_join())
[     2.488][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = cross_join())
[     2.490][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([3]), l2 = mutate())
[     2.499][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = mutate())
[     2.577][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter([4]))
[     2.587][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = inner_join())
[     2.690][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter([4]))
[     2.755][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter([4]))
[     2.756][MainProcess][INFO] Statistics:
[     2.757][MainProcess][INFO] 	Generated cubes: 33
[     2.757][MainProcess][INFO] 	Attempted programs: 1
[     2.757][MainProcess][INFO] 		Rejected: 0
[     2.757][MainProcess][INFO] 		Failed: 0
[     2.757][MainProcess][INFO] 	Blacklist clauses: 4
[     2.757][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.758][MainProcess][DEBUG] 	0: Counter({'mutate': 54, 'summarise': 39})
[     2.758][MainProcess][DEBUG] 	1: Counter({'filter': 93})
[     2.758][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.758][MainProcess][DEBUG] 	0: Counter({'summarise': 308})
[     2.758][MainProcess][DEBUG] 	1: Counter({'filter': 307, 'natural_join': 1})
[     2.758][MainProcess][DEBUG] 	2: Counter({'left_join': 42, 'summarise': 40, 'natural_join3': 36, 'union': 36, 'filter': 34, 'natural_join': 30, 'anti_join': 24, 'cross_join': 24, 'mutate': 23, 'semi_join': 16, 'inner_join': 3})
[     2.759][MainProcess][INFO] Solution found: filter(natural_join(@param0, summarise(@param0, n = n(), EmailAddress)), n > 1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i043.csv", col_types = cols(CustomerName = col_character(),EmailAddress = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o043.csv", col_types = cols(CustomerName = col_character(),EmailAddress = col_character()))

df2 <- input1 %>% group_by(EmailAddress) %>% summarise(n = n()) %>% ungroup()
df3 <- inner_join(input1, df2)
df4 <- df3 %>% filter(n > 1)
out <- df4 %>% select(CustomerName, EmailAddress) %>% arrange(CustomerName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT CustomerName,
       EmailAddress
FROM
  (SELECT LHS.CustomerName AS CustomerName,
          LHS.EmailAddress AS EmailAddress,
          RHS.n AS n
   FROM input1 AS LHS
   INNER JOIN
     (SELECT EmailAddress,
             COUNT() AS n
      FROM input1
      GROUP BY EmailAddress) AS RHS ON (LHS.EmailAddress = RHS.EmailAddress))
WHERE (n > 1.0)
ORDER BY CustomerName
