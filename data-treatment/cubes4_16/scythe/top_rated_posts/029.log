[     1.664][MainProcess][INFO] Parsing specification...
[     1.689][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.689][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.690][MainProcess][DEBUG] Reading input files...
[     1.700][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i029.csv: ['string', 'string']
[     1.706][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o029.csv: ['string', 'string']
[     1.735][MainProcess][DEBUG] Generating DSL...
[     1.770][MainProcess][INFO] Creating 16 processes
[     1.842][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.842][MainProcess][DEBUG] Increasing generator loc to 2
[     1.843][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.843][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.843][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.847][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.848][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.852][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.865][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.865][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.867][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.871][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.875][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.878][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.879][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.896][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.911][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.254][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.455][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.651][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.715][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.718][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.722][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.723][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     2.723][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.731][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.737][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.739][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.743][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.747][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.747][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.748][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.751][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.752][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.753][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.756][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.757][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.765][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.776][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     2.795][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.853][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.861][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.936][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.943][cube-solver-7][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     2.944][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)
[     2.945][MainProcess][INFO] Statistics:
[     2.945][MainProcess][INFO] 	Generated cubes: 28
[     2.945][MainProcess][INFO] 	Attempted programs: 10
[     2.945][MainProcess][INFO] 		Rejected: 9
[     2.946][MainProcess][INFO] 		Failed: 0
[     2.946][MainProcess][INFO] 	Blacklist clauses: 0
[     2.946][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     2.946][MainProcess][DEBUG] 	0: Counter({'summarise': 53, 'mutate': 48})
[     2.946][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.947][MainProcess][DEBUG] 	0: Counter({'summarise': 53, 'left_join': 20, 'union': 9})
[     2.947][MainProcess][DEBUG] 	1: Counter({'mutate': 23, 'summarise': 14, 'left_join': 13, 'inner_join': 12, 'anti_join': 9, 'cross_join': 7, 'natural_join': 4})
[     2.947][MainProcess][INFO] Solution found: summarise(@param0, concatPerson = string_agg(Person, ' '), TicketID)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i029.csv", col_types = cols(TicketID = col_character(),Person = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o029.csv", col_types = cols(TicketID = col_character(),concatPerson = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df2 <- input1 %>% group_by(TicketID) %>% summarise(concatPerson = string_agg(Person, ' ')) %>% ungroup()
out <- df2 %>% select(TicketID, concatPerson) %>% arrange(TicketID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `TicketID`,
       `concatPerson`
FROM
  (SELECT `TicketID`,
          string_agg(`Person`, ' ') AS concatPerson
   FROM input1
   GROUP BY TicketID)
ORDER BY TicketID
