[     1.599][MainProcess][INFO] Parsing specification...
[     1.605][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.605][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.605][MainProcess][DEBUG] Reading input files...
[     1.618][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i002.csv: ['int64', 'string', 'string']
[     1.634][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o002.csv: ['string']
[     1.662][MainProcess][DEBUG] Generating DSL...
[     1.682][MainProcess][INFO] Creating 16 processes
[     1.740][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.740][MainProcess][DEBUG] Increasing generator loc to 3
[     1.740][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.741][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.742][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.744][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.746][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.750][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.752][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.758][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.758][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.766][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.777][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.783][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.783][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.244][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.247][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.248][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.301][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.301][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.304][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.318][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.320][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.322][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.324][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.325][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.325][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.328][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.329][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.331][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     2.333][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.335][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.337][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.342][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.343][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     2.348][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.370][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([2]))
[     2.370][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter([2]))
[     2.374][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([2]), l2 = mutate())
[     2.376][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = union())
[     2.376][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = intersect())
[     2.380][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = semi_join())
[     2.390][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([3]), l2 = summarise())
[     2.398][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = cross_join())
[     2.453][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter())
[     2.454][MainProcess][INFO] Statistics:
[     2.455][MainProcess][INFO] 	Generated cubes: 31
[     2.455][MainProcess][INFO] 	Attempted programs: 4
[     2.455][MainProcess][INFO] 		Rejected: 3
[     2.455][MainProcess][INFO] 		Failed: 0
[     2.455][MainProcess][INFO] 	Blacklist clauses: 3
[     2.455][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.456][MainProcess][DEBUG] 	0: Counter({'summarise': 15, 'mutate': 10})
[     2.456][MainProcess][DEBUG] 	1: Counter({'filter': 25})
[     2.457][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     2.457][MainProcess][DEBUG] 	0: Counter({'summarise': 30})
[     2.457][MainProcess][DEBUG] 	1: Counter({'filter': 30})
[     2.457][MainProcess][DEBUG] 	2: Counter({'natural_join': 8, 'filter': 6, 'left_join': 5, 'anti_join': 4, 'union': 3, 'natural_join3': 2, 'semi_join': 2})
[     2.457][MainProcess][INFO] Solution found: filter(summarise(@param0, n = n(), NAME), n > 1)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i002.csv", col_types = cols(ID = col_integer(),NAME = col_character(),EMAIL = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o002.csv", col_types = cols(NAME = col_character()))

df2 <- input1 %>% group_by(NAME) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 1)
out <- df3 %>% select(NAME) %>% arrange(NAME)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT NAME
FROM
  (SELECT NAME,
          COUNT() AS n
   FROM input1
   GROUP BY NAME)
WHERE (n > 1.0)
ORDER BY NAME
