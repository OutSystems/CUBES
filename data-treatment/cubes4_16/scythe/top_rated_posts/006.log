[     1.580][MainProcess][INFO] Parsing specification...
[     1.590][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.590][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.591][MainProcess][DEBUG] Reading input files...
[     1.602][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i006.csv: ['int64', 'string', 'string']
[     1.609][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o006.csv: ['int64', 'string', 'string']
[     1.635][MainProcess][DEBUG] Generating DSL...
[     1.790][MainProcess][INFO] Creating 16 processes
[     1.861][MainProcess][DEBUG] Increasing generator loc to 2
[     1.962][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.965][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.973][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.977][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.984][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.986][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.993][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.996][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.996][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     2.008][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     2.024][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     2.035][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.037][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     2.049][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     2.053][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     2.072][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     5.113][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     5.115][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     5.600][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     5.610][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     8.205][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     8.206][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]))
[     8.216][cube-solver-9][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join3())
[     8.234][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = anti_join())
[     8.234][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]))
[     8.236][cube-solver-3][DEBUG] Solving cube (l0 = summarise([3]), l1 = cross_join())
[     8.239][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[     8.253][cube-solver-9][DEBUG] Solving cube (l0 = summarise([3]), l1 = inner_join())
[     8.262][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = mutate())
[     8.291][cube-solver-14][DEBUG] Solving cube (l0 = summarise([3]), l1 = left_join())
[     8.300][cube-solver-15][DEBUG] Solving cube (l0 = summarise([3]), l1 = union())
[     8.304][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = summarise([3]))
[     8.309][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     8.310][cube-solver-8][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join())
[     8.310][cube-solver-12][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter())
[     8.311][cube-solver-11][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]))
[     8.317][cube-solver-10][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join4())
[     8.333][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([3]))
[     8.333][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     8.336][cube-solver-2][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     8.337][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     8.364][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([3]))
[     8.364][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     8.379][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = summarise([3]))
[     8.381][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     8.384][cube-solver-5][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     8.387][cube-solver-10][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([3]))
[     8.555][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([3]))
[     8.941][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[     8.947][cube-solver-7][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise([3]))
[     9.010][cube-solver-2][DEBUG] Solving cube (l0 = cross_join([2]), l1 = mutate())
[     9.048][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[     9.146][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[     9.179][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[     9.198][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = summarise([3]))
[     9.204][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     9.505][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[     9.766][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[     9.913][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[    10.141][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[    10.330][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[    10.679][cube-solver-14][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = left_join())
[    10.707][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = natural_join())
[    10.755][MainProcess][INFO] Statistics:
[    10.756][MainProcess][INFO] 	Generated cubes: 46
[    10.756][MainProcess][INFO] 	Attempted programs: 204
[    10.757][MainProcess][INFO] 		Rejected: 123
[    10.757][MainProcess][INFO] 		Failed: 80
[    10.757][MainProcess][INFO] 	Blacklist clauses: 85
[    10.757][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    10.758][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 48})
[    10.758][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    10.759][MainProcess][DEBUG] 	0: Counter({'summarise': 1828, 'mutate': 784, 'cross_join': 179, 'left_join': 108, 'union': 108, 'semi_join': 108})
[    10.760][MainProcess][DEBUG] 	1: Counter({'mutate': 491, 'anti_join': 378, 'natural_join': 377, 'union': 373, 'left_join': 355, 'inner_join': 302, 'filter': 302, 'cross_join': 246, 'summarise': 240, 'semi_join': 51})
[    10.760][MainProcess][INFO] Solution found: left_join(summarise(@param0, Id = max(Id), Name), @param0)
[    10.805][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join([82]))
[    10.874][cube-solver-9][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = inner_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i006.csv", col_types = cols(Id = col_integer(),Name = col_character(),Other_Columns = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o006.csv", col_types = cols(Id = col_integer(),Name = col_character(),Other_Columns = col_character()))

df2 <- input1 %>% group_by(Name) %>% summarise(Id = max(Id)) %>% ungroup()
df3 <- left_join(df2, input1)
out <- df3 %>% select(Id, Name, Other_Columns) %>% arrange(Id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Id,
       Name,
       Other_Columns
FROM
  (SELECT LHS.Name AS Name,
          LHS.Id AS Id,
          RHS.Other_Columns AS Other_Columns
   FROM
     (SELECT Name,
             MAX(Id) AS Id
      FROM input1
      GROUP BY Name) AS LHS
   LEFT JOIN input1 AS RHS ON (LHS.Name = RHS.Name
                               AND LHS.Id = RHS.Id))
ORDER BY Id
