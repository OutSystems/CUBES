[     3.006][MainProcess][INFO] Parsing specification...
[     3.032][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.034][MainProcess][DEBUG] Reading input files...
[     3.050][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i019.csv: ['int64', 'int64']
[     3.077][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o019.csv: ['int64', 'int64', 'int64']
[     3.111][MainProcess][DEBUG] Generating DSL...
[     3.136][MainProcess][INFO] Creating 16 processes
[     3.201][MainProcess][DEBUG] Increasing generator loc to 2
[     3.201][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.201][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.202][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.202][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.202][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.203][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.204][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.211][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.212][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.217][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.224][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.230][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.232][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.237][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.243][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.251][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.398][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     3.480][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.541][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     3.544][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     3.550][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     3.557][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     3.561][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     3.564][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     3.574][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     3.575][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     3.577][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     3.578][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     3.587][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     3.596][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     3.599][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     3.602][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     3.604][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     3.605][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.606][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     3.609][cube-solver-9][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     3.615][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     3.618][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.678][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     3.682][cube-solver-5][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     3.709][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     3.777][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())
[     3.778][MainProcess][INFO] Statistics:
[     3.779][MainProcess][INFO] 	Generated cubes: 27
[     3.779][MainProcess][INFO] 	Attempted programs: 6
[     3.779][MainProcess][INFO] 		Rejected: 5
[     3.779][MainProcess][INFO] 		Failed: 0
[     3.779][MainProcess][INFO] 	Blacklist clauses: 0
[     3.779][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.779][MainProcess][DEBUG] 	0: Counter({'summarise': 12, 'mutate': 12})
[     3.779][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.779][MainProcess][DEBUG] 	0: Counter({'summarise': 72, 'union': 11, 'left_join': 8})
[     3.779][MainProcess][DEBUG] 	1: Counter({'summarise': 19, 'natural_join': 13, 'semi_join': 12, 'left_join': 12, 'inner_join': 12, 'mutate': 11, 'cross_join': 10, 'union': 2})
[     3.780][MainProcess][INFO] Solution found: natural_join(@param0, summarise(@param0, n = n(), age))
[     3.938][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise(), l1 = left_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i019.csv", col_types = cols(id = col_integer(),age = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o019.csv", col_types = cols(id = col_integer(),age = col_integer(),n = col_integer()))

df2 <- input1 %>% group_by(age) %>% summarise(n = n()) %>% ungroup()
df3 <- inner_join(input1, df2)
out <- df3 %>% select(id, age, n) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       age,
       n
FROM
  (SELECT LHS.id AS id,
          LHS.age AS age,
          RHS.n AS n
   FROM input1 AS LHS
   INNER JOIN
     (SELECT age,
             COUNT() AS n
      FROM input1
      GROUP BY age) AS RHS ON (LHS.age = RHS.age))
ORDER BY id
