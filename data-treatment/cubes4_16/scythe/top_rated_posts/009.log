[     3.215][MainProcess][INFO] Parsing specification...
[     3.230][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.230][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.232][MainProcess][DEBUG] Reading input files...
[     3.248][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i009.csv: ['string', 'string', 'int64']
[     3.265][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o009.csv: ['string', 'string', 'int64']
[     3.306][MainProcess][DEBUG] Generating DSL...
[     3.546][MainProcess][INFO] Creating 16 processes
[     3.626][MainProcess][DEBUG] Increasing generator loc to 2
[     3.740][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.747][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.752][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.760][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.761][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.765][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.773][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.777][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.784][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.788][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.788][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.794][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.824][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.833][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.841][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.869][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     6.908][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     6.918][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     7.428][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     7.483][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     9.919][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[     9.956][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]))
[     9.975][cube-solver-2][DEBUG] Solving cube (l0 = summarise([3]), l1 = cross_join())
[     9.988][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = mutate())
[    10.000][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[    10.020][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[    10.044][cube-solver-11][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]))
[    10.046][cube-solver-9][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join3())
[    10.067][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[    10.076][cube-solver-8][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join())
[    10.084][cube-solver-14][DEBUG] Solving cube (l0 = summarise([3]), l1 = left_join())
[    10.089][cube-solver-15][DEBUG] Solving cube (l0 = summarise([3]), l1 = union())
[    10.089][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = anti_join())
[    10.093][cube-solver-12][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter())
[    10.104][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = summarise([3]))
[    10.105][cube-solver-7][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([3]))
[    10.116][cube-solver-3][DEBUG] Solving cube (l0 = summarise([3]), l1 = inner_join())
[    10.123][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]))
[    10.127][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([3]))
[    10.133][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[    10.141][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    10.157][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = summarise([3]))
[    10.164][cube-solver-5][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([3]))
[    10.164][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[    10.168][cube-solver-10][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join4())
[    10.174][cube-solver-9][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[    10.201][cube-solver-10][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[    10.360][cube-solver-10][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([3]))
[    10.690][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise([3]), l1 = natural_join())
[    10.691][MainProcess][INFO] Statistics:
[    10.691][MainProcess][INFO] 	Generated cubes: 32
[    10.691][MainProcess][INFO] 	Attempted programs: 23
[    10.692][MainProcess][INFO] 		Rejected: 15
[    10.692][MainProcess][INFO] 		Failed: 7
[    10.692][MainProcess][INFO] 	Blacklist clauses: 3
[    10.692][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    10.692][MainProcess][DEBUG] 	0: Counter({'mutate': 60, 'summarise': 48})
[    10.693][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    10.693][MainProcess][DEBUG] 	0: Counter({'summarise': 442, 'union': 90, 'left_join': 86, 'semi_join': 20})
[    10.693][MainProcess][DEBUG] 	1: Counter({'mutate': 160, 'summarise': 101, 'left_join': 64, 'natural_join': 63, 'cross_join': 62, 'union': 57, 'inner_join': 54, 'anti_join': 43, 'filter': 35})
[    10.694][MainProcess][INFO] Solution found: natural_join(summarise(@param0, time_stamp = max(time_stamp), username), @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i009.csv", col_types = cols(username = col_character(),ip = col_character(),time_stamp = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o009.csv", col_types = cols(username = col_character(),ip = col_character(),time_stamp = col_integer()))

df2 <- input1 %>% group_by(username) %>% summarise(time_stamp = max(time_stamp)) %>% ungroup()
df3 <- inner_join(df2, input1)
out <- df3 %>% select(username, ip, time_stamp) %>% arrange(username)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT username,
       ip,
       time_stamp
FROM
  (SELECT LHS.username AS username,
          LHS.time_stamp AS time_stamp,
          RHS.ip AS ip
   FROM
     (SELECT username,
             MAX(time_stamp) AS time_stamp
      FROM input1
      GROUP BY username) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.username = RHS.username
                                AND LHS.time_stamp = RHS.time_stamp))
ORDER BY username
