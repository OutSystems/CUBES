[     1.658][MainProcess][INFO] Parsing specification...
[     1.666][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.666][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.668][MainProcess][DEBUG] Reading input files...
[     1.689][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i045.csv: ['int64', 'int64', 'int64', 'datetime64[ns]']
[     1.705][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o045.csv: ['int64', 'int64']
[     1.744][MainProcess][DEBUG] Generating DSL...
[     1.778][MainProcess][INFO] Creating 16 processes
[     1.852][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.852][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.852][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.852][MainProcess][DEBUG] Increasing generator loc to 3
[     1.853][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.856][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.859][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.860][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.872][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.873][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.880][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.884][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.889][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.894][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.900][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.900][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.939][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.482][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.484][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.485][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.612][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.616][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.678][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     3.091][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.093][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.098][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     3.098][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.099][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     3.102][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     3.102][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     3.103][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     3.107][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     3.110][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.116][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.117][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     3.122][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     3.137][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     3.138][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     3.139][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     3.141][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     3.145][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = intersect())
[     3.145][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     3.159][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     3.165][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     3.166][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = semi_join())
[     3.171][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = cross_join())
[     3.434][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[     3.440][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = mutate())
[     3.597][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([4]), l2 = summarise())
[     3.606][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = inner_join())
[     4.032][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter([5]))
[     4.210][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.281][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter([5]))
[     4.287][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = left_join(), l2 = filter([5]))
[     5.429][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = filter([5]))
[     6.195][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     7.409][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = union(), l2 = filter([5]))
[     7.603][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect(), l2 = filter([5]))
[    16.177][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join(), l2 = filter([5]))
[    20.280][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join(), l2 = filter([5]))
[    23.031][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = mutate(), l2 = filter([5]))
[    23.995][cube-solver-11][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = cross_join())
[    23.997][MainProcess][INFO] Statistics:
[    23.997][MainProcess][INFO] 	Generated cubes: 40
[    23.997][MainProcess][INFO] 	Attempted programs: 1641
[    23.997][MainProcess][INFO] 		Rejected: 543
[    23.997][MainProcess][INFO] 		Failed: 1097
[    23.997][MainProcess][INFO] 	Blacklist clauses: 5
[    23.998][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    23.998][MainProcess][DEBUG] 	0: Counter({'summarise': 440, 'mutate': 200})
[    23.999][MainProcess][DEBUG] 	1: Counter({'filter': 640})
[    23.999][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    24.014][MainProcess][DEBUG] 	0: Counter({'summarise': 32703})
[    24.025][MainProcess][DEBUG] 	1: Counter({'filter': 21927, 'natural_join': 2720, 'left_join': 2654, 'union': 2180, 'anti_join': 2031, 'semi_join': 809, 'cross_join': 271, 'mutate': 112})
[    24.034][MainProcess][DEBUG] 	2: Counter({'filter': 12979, 'natural_join3': 2736, 'natural_join': 2573, 'union': 2480, 'cross_join': 2478, 'left_join': 2415, 'semi_join': 2207, 'inner_join': 1971, 'anti_join': 1749, 'summarise': 680, 'mutate': 440})
[    24.034][MainProcess][INFO] Solution found: cross_join(summarise(@param0, n = n(), account_no, date), filter(summarise(@param0, n = n(), account_no, date), n > 1), n != n.other | n.other > n)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i045.csv", col_types = cols(user_id = col_integer(),account_no = col_integer(),zip = col_integer(),date = col_character()))
input1$date <- dmy(input1$date)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o045.csv", col_types = cols(user_id = col_integer(),n = col_integer()))

df2 <- input1 %>% group_by(account_no, date) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 1)
df4 <- full_join(df2 %>% mutate(tmp.col=1), df3 %>% mutate(tmp.col=1), by="tmp.col", suffix = c("", ".other")) %>% select(-tmp.col) %>% filter(n != n.other | n.other > n)
out <- df4 %>% select(user_id = n, n = n.other) %>% distinct() %>% arrange(user_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT n AS user_id,
                n.other AS n
FROM
  (SELECT account_no, date, n,
                            account_no.other,
                            date.other,
                            n.other
   FROM
     (SELECT LHS.account_no AS account_no,
             LHS.date AS date,
             LHS.n AS n,
             COALESCE(LHS.tmp.col, RHS.tmp.col) AS tmp.col,
             RHS.account_no AS account_no.other,
             RHS.date AS date.other,
             RHS.n AS n.other
      FROM
        (SELECT account_no, date, n,
                                  1.0 AS tmp.col
         FROM
           (SELECT account_no, date, COUNT() AS n
            FROM input1
            GROUP BY account_no, date)) AS LHS
      FULL JOIN
        (SELECT account_no, date, n,
                                  1.0 AS tmp.col
         FROM
           (SELECT account_no, date, COUNT() AS n
            FROM input1
            GROUP BY account_no, date)
         WHERE (n > 1.0)) AS RHS ON (LHS.tmp.col = RHS.tmp.col)))
WHERE (n != n.other
       OR n.other > n)
ORDER BY user_id
