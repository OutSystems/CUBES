[     3.324][MainProcess][INFO] Parsing specification...
[     3.336][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.337][MainProcess][DEBUG] Reading input files...
[     3.356][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i040.csv: ['string', 'string']
[     3.367][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o040.csv: ['string', 'string', 'int64']
[     3.399][MainProcess][DEBUG] Generating DSL...
[     3.421][MainProcess][INFO] Creating 16 processes
[     3.496][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.497][MainProcess][DEBUG] Increasing generator loc to 2
[     3.496][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.498][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.498][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.498][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.498][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.498][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.498][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.498][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.506][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.508][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.509][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.522][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.527][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.532][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.543][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.704][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     3.708][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     3.711][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     3.711][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     3.740][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     3.744][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     3.746][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     3.757][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     3.760][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     3.767][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)
[     3.768][MainProcess][INFO] Statistics:
[     3.768][MainProcess][INFO] 	Generated cubes: 19
[     3.768][MainProcess][INFO] 	Attempted programs: 3
[     3.768][MainProcess][INFO] 		Rejected: 2
[     3.768][MainProcess][INFO] 		Failed: 0
[     3.769][MainProcess][INFO] 	Blacklist clauses: 0
[     3.769][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.769][MainProcess][DEBUG] 	0: Counter({'mutate': 2, 'summarise': 1})
[     3.769][MainProcess][INFO] Solution found: summarise(@param0, n = n(), group, subGroup)
[     3.792][cube-solver-11][DEBUG] Found solution with cube (l0 = summarise(), l1 = semi_join())
[     3.907][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise(), l1 = left_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i040.csv", col_types = cols(group = col_character(),subGroup = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o040.csv", col_types = cols(group = col_character(),subGroup = col_character(),n = col_integer()))

df2 <- input1 %>% group_by(group, subGroup) %>% summarise(n = n()) %>% ungroup()
out <- df2 %>% select(group, subGroup, n) %>% arrange(group)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT GROUP,
       subGroup,
       n
FROM
  (SELECT GROUP,
          subGroup,
          COUNT() AS n
   FROM input1
   GROUP BY GROUP,
            subGroup)
ORDER BY GROUP
