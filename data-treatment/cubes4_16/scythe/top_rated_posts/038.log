[     1.578][MainProcess][INFO] Parsing specification...
[     1.589][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.589][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.590][MainProcess][DEBUG] Reading input files...
[     1.612][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i038.csv: ['int64', 'string', 'string']
[     1.629][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o038.csv: ['int64', 'string', 'string']
[     1.657][MainProcess][DEBUG] Generating DSL...
[     1.678][MainProcess][INFO] Creating 16 processes
[     1.739][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.739][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.739][MainProcess][DEBUG] Increasing generator loc to 3
[     1.739][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.739][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.740][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.740][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.741][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.748][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.748][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.753][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.757][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.760][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.771][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.773][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.773][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     1.776][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.051][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.113][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.228][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.230][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.290][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.292][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.319][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.323][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.326][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.328][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.328][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.329][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.331][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.331][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.333][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.336][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.336][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.340][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     2.340][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     2.344][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.345][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.346][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([1]), l2 = mutate())
[     2.351][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter([1]))
[     2.352][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = union())
[     2.354][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = intersect())
[     2.367][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([3]))
[     2.371][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = semi_join())
[     2.410][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter([3]))
[     2.416][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([3]), l2 = cross_join())
[     2.624][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = summarise())
[     2.631][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = mutate())
[     2.719][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = summarise())
[     2.726][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = inner_join())
[     2.873][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter([5]))
[     3.149][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter([5]))
[     3.155][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = filter([5]))
[     3.792][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.302][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.378][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = left_join(), l2 = filter([5]))
[     4.728][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = intersect(), l2 = filter([5]))
[     5.074][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = union(), l2 = filter([5]))
[     6.642][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join(), l2 = filter([5]))
[     8.193][cube-solver-11][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     8.195][MainProcess][INFO] Statistics:
[     8.195][MainProcess][INFO] 	Generated cubes: 38
[     8.195][MainProcess][INFO] 	Attempted programs: 277
[     8.195][MainProcess][INFO] 		Rejected: 137
[     8.195][MainProcess][INFO] 		Failed: 139
[     8.195][MainProcess][INFO] 	Blacklist clauses: 5
[     8.196][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     8.196][MainProcess][DEBUG] 	0: Counter({'mutate': 240, 'summarise': 180})
[     8.197][MainProcess][DEBUG] 	1: Counter({'filter': 420})
[     8.197][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     8.200][MainProcess][DEBUG] 	0: Counter({'summarise': 7317})
[     8.204][MainProcess][DEBUG] 	1: Counter({'filter': 5282, 'natural_join': 589, 'anti_join': 494, 'left_join': 460, 'union': 376, 'semi_join': 117})
[     8.207][MainProcess][DEBUG] 	2: Counter({'filter': 2561, 'union': 663, 'left_join': 652, 'natural_join': 617, 'inner_join': 608, 'natural_join3': 603, 'semi_join': 486, 'cross_join': 480, 'anti_join': 289, 'summarise': 180, 'mutate': 180})
[     8.207][MainProcess][INFO] Solution found: natural_join3(summarise(@param0, n = n(), name), filter(summarise(@param0, n = n(), name), n > 1), @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i038.csv", col_types = cols(id = col_integer(),name = col_character(),city = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o038.csv", col_types = cols(id = col_integer(),name = col_character(),city = col_character()))

df2 <- input1 %>% group_by(name) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 1)
df4 <- inner_join(df2, df3) %>% inner_join(input1)
out <- df4 %>% select(id, name, city) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       name,
       city
FROM
  (SELECT LHS.name AS name,
          LHS.n AS n,
          RHS.id AS id,
          RHS.city AS city
   FROM
     (SELECT LHS.name AS name,
             LHS.n AS n
      FROM
        (SELECT name,
                COUNT() AS n
         FROM input1
         GROUP BY name) AS LHS
      INNER JOIN
        (SELECT *
         FROM
           (SELECT name,
                   COUNT() AS n
            FROM input1
            GROUP BY name)
         WHERE (n > 1.0)) AS RHS ON (LHS.name = RHS.name
                                     AND LHS.n = RHS.n)) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.name = RHS.name))
ORDER BY id
