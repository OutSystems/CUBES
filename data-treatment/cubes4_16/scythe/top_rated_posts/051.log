[     3.566][MainProcess][INFO] Parsing specification...
[     3.584][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.584][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.586][MainProcess][DEBUG] Reading input files...
[     3.613][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i051.csv: ['int64', 'string', 'datetime64[ns]']
[     3.628][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o051.csv: ['int64', 'string', 'datetime64[ns]']
[     3.683][MainProcess][DEBUG] Generating DSL...
[     3.911][MainProcess][INFO] Creating 16 processes
[     3.989][MainProcess][DEBUG] Increasing generator loc to 2
[     4.113][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     4.122][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     4.124][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     4.125][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     4.129][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     4.132][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     4.138][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     4.142][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     4.145][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     4.146][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     4.150][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     4.157][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     4.160][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     4.173][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     4.197][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     4.267][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     7.160][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     7.269][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     7.556][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     7.629][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[    10.287][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[    10.309][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[    10.310][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[    10.315][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[    10.322][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[    10.323][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[    10.324][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[    10.346][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[    10.346][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[    10.347][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[    10.349][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[    10.361][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[    10.369][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[    10.371][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    10.375][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[    10.386][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[    10.396][cube-solver-2][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[    10.398][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[    10.398][cube-solver-6][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[    10.407][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[    10.418][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[    10.419][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[    10.420][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[    10.429][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[    10.441][cube-solver-11][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[    10.459][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[    10.560][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[    10.589][cube-solver-11][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[    10.781][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[    10.916][cube-solver-5][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[    10.944][cube-solver-10][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[    11.060][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[    11.061][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[    11.070][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[    11.090][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    11.096][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    11.097][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[    11.223][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[    11.526][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[    11.924][cube-solver-4][DEBUG] Found solution with cube (l0 = mutate(), l1 = filter())
[    11.926][MainProcess][INFO] Statistics:
[    11.927][MainProcess][INFO] 	Generated cubes: 43
[    11.927][MainProcess][INFO] 	Attempted programs: 64
[    11.927][MainProcess][INFO] 		Rejected: 41
[    11.927][MainProcess][INFO] 		Failed: 22
[    11.927][MainProcess][INFO] 	Blacklist clauses: 58
[    11.927][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    11.928][MainProcess][DEBUG] 	0: Counter({'mutate': 48, 'summarise': 36})
[    11.928][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    11.929][MainProcess][DEBUG] 	0: Counter({'summarise': 1006, 'mutate': 424, 'left_join': 84, 'union': 84, 'semi_join': 84, 'cross_join': 64})
[    11.929][MainProcess][DEBUG] 	1: Counter({'natural_join': 238, 'filter': 211, 'left_join': 209, 'mutate': 206, 'anti_join': 188, 'cross_join': 185, 'union': 184, 'summarise': 170, 'inner_join': 155})
[    11.930][MainProcess][INFO] Solution found: filter(mutate(@param0, maxdate = max(date)), maxdate <= date)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i051.csv", col_types = cols(id = col_integer(),category = col_character(),date = col_character()))
input1$date <- ymd(input1$date)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o051.csv", col_types = cols(id = col_integer(),category = col_character(),date = col_character()))
expected_output$date <- ymd(expected_output$date)

df2 <- input1 %>% mutate(maxdate = max(date))
df3 <- df2 %>% filter(maxdate <= date)
out <- df3 %>% select(id, category, date) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       category, date
FROM
  (SELECT id,
          category, date, MAX(date) OVER () AS maxdate
   FROM input1)
WHERE (maxdate <= date)
ORDER BY id
