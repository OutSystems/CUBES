[     1.602][MainProcess][INFO] Parsing specification...
[     1.616][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.616][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.617][MainProcess][DEBUG] Reading input files...
[     1.636][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i011_1.csv: ['int64', 'string']
[     1.643][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i011_2.csv: ['int64', 'int64', 'string']
[     1.657][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o011.csv: ['int64', 'string', 'string']
[     1.689][MainProcess][DEBUG] Generating DSL...
[     1.728][MainProcess][INFO] Creating 16 processes
[     1.791][MainProcess][DEBUG] Increasing generator loc to 2
[     1.795][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.798][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.802][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.803][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.806][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.810][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.813][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.822][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.823][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.827][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.830][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.834][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.834][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.839][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.845][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.876][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.256][cube-solver-0][WARNING] There is no solution for current loc (1).
[     2.257][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.258][cube-solver-1][WARNING] There is no solution for current loc (1).
[     2.259][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.259][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.260][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.790][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.790][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.794][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.796][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.797][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.803][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     2.804][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.807][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.809][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.809][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.810][cube-solver-5][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.812][cube-solver-4][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.817][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.817][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.818][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.820][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.828][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.829][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.835][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     3.271][cube-solver-15][DEBUG] Solving cube (l0 = summarise([15]), l1 = intersect())
[     3.350][cube-solver-0][DEBUG] Solving cube (l0 = summarise([17]), l1 = semi_join())
[     3.408][cube-solver-1][DEBUG] Solving cube (l0 = summarise([20]), l1 = cross_join())
[     3.524][cube-solver-10][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise())
[     3.525][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     3.526][MainProcess][INFO] Statistics:
[     3.526][MainProcess][INFO] 	Generated cubes: 25
[     3.526][MainProcess][INFO] 	Attempted programs: 13
[     3.526][MainProcess][INFO] 		Rejected: 12
[     3.526][MainProcess][INFO] 		Failed: 0
[     3.526][MainProcess][INFO] 	Blacklist clauses: 38
[     3.526][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.527][MainProcess][DEBUG] 	0: Counter({'summarise': 159, 'natural_join': 100, 'left_join': 96, 'anti_join': 5})
[     3.527][MainProcess][DEBUG] 	1: Counter({'mutate': 115, 'summarise': 86, 'natural_join3': 51, 'union': 50, 'left_join': 24, 'natural_join': 24, 'anti_join': 10})
[     3.527][MainProcess][INFO] Solution found: summarise(left_join(@param1, @param0), concatCity = string_agg(City, ', '), Name, VehicleID)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i011_1.csv", col_types = cols(VehicleID = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i011_2.csv", col_types = cols(LocationID = col_integer(),VehicleID = col_integer(),City = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o011.csv", col_types = cols(VehicleID = col_integer(),Name = col_character(),concatCity = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df3 <- left_join(input2, input1)
df4 <- df3 %>% group_by(Name, VehicleID) %>% summarise(concatCity = string_agg(City, ', ')) %>% ungroup()
out <- df4 %>% select(VehicleID, Name, concatCity) %>% arrange(VehicleID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `VehicleID`,
       `Name`,
       `concatCity`
FROM
  (SELECT `Name`,
          `VehicleID`,
          string_agg(`City`, ', ') AS concatCity
   FROM
     (SELECT LHS.LocationID AS LocationID,
             LHS.VehicleID AS VehicleID,
             LHS.City AS City,
             RHS.Name AS Name
      FROM input2 AS LHS
      LEFT JOIN input1 AS RHS ON (LHS.VehicleID = RHS.VehicleID))
   GROUP BY Name,
            VehicleID)
ORDER BY VehicleID
