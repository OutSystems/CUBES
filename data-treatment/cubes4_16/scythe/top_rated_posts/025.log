[     1.582][MainProcess][INFO] Parsing specification...
[     1.597][MainProcess][DEBUG] Reading input files...
[     1.606][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i025.csv: ['int64', 'string']
[     1.611][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o025.csv: ['int64', 'string']
[     1.639][MainProcess][DEBUG] Generating DSL...
[     1.667][MainProcess][INFO] Creating 16 processes
[     1.733][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.733][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.733][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.734][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.733][MainProcess][DEBUG] Increasing generator loc to 3
[     1.735][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.735][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.739][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.750][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.751][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.755][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.758][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.759][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.762][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.767][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.787][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.796][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.235][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.237][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     2.285][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.503][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.643][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.646][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.668][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     2.674][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     2.677][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     2.680][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     2.689][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     2.692][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     2.699][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     2.700][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     2.704][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     2.707][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     2.708][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     2.714][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     2.718][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([1]), l2 = summarise())
[     2.723][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = anti_join())
[     2.724][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = left_join())
[     2.772][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([3]))
[     2.779][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = union())
[     2.823][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter([4]))
[     2.831][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = intersect())
[     2.834][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter([4]))
[     2.842][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = semi_join())
[     2.847][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([4]), l2 = summarise())
[     2.855][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = cross_join())
[     2.958][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([6]), l2 = mutate())
[     2.968][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter([6]), l2 = mutate())
[     3.174][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter([7]))
[     3.264][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([8]))
[     3.270][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([8]), l2 = inner_join())
[     3.721][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter([16]))
[     3.731][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = filter([16]))
[     6.965][cube-solver-3][DEBUG] Found solution with cube (l0 = mutate(), l1 = filter())
[     6.966][MainProcess][INFO] Statistics:
[     6.966][MainProcess][INFO] 	Generated cubes: 34
[     6.966][MainProcess][INFO] 	Attempted programs: 41
[     6.966][MainProcess][INFO] 		Rejected: 40
[     6.966][MainProcess][INFO] 		Failed: 0
[     6.966][MainProcess][INFO] 	Blacklist clauses: 16
[     6.967][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     6.968][MainProcess][DEBUG] 	0: Counter({'summarise': 488, 'mutate': 481})
[     6.969][MainProcess][DEBUG] 	1: Counter({'filter': 969})
[     6.969][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     6.971][MainProcess][DEBUG] 	0: Counter({'summarise': 4847})
[     6.973][MainProcess][DEBUG] 	1: Counter({'filter': 4092, 'natural_join': 450, 'anti_join': 308})
[     6.976][MainProcess][DEBUG] 	2: Counter({'filter': 1150, 'cross_join': 437, 'left_join': 412, 'mutate': 395, 'union': 393, 'natural_join': 386, 'natural_join3': 368, 'anti_join': 348, 'semi_join': 348, 'inner_join': 325, 'summarise': 288})
[     6.976][MainProcess][INFO] Solution found: filter(mutate(@param0, row_number = row_number()), row_number >= 3 & row_number < 5)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i025.csv", col_types = cols(Id = col_integer(),Value = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o025.csv", col_types = cols(Id = col_integer(),Value = col_character()))

df2 <- input1 %>% mutate(row_number = row_number())
df3 <- df2 %>% filter(row_number >= 3 & row_number < 5)
out <- df3 %>% select(Id, Value) %>% arrange(Id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Id,
       Value
FROM
  (SELECT Id,
          Value,
          ROW_NUMBER() OVER () AS row_number
   FROM input1)
WHERE (row_number >= 3.0
       AND row_number < 5.0)
ORDER BY Id
