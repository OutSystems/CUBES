[     3.313][MainProcess][INFO] Parsing specification...
[     3.330][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.330][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.331][MainProcess][DEBUG] Reading input files...
[     3.351][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/i047.csv: ['int64', 'int64', 'int64', 'string']
[     3.371][MainProcess][INFO] Inferred data types for table tests-examples/scythe/top_rated_posts/tables/o047.csv: ['int64', 'int64', 'int64', 'string']
[     3.403][MainProcess][DEBUG] Generating DSL...
[     3.578][MainProcess][INFO] Creating 16 processes
[     3.643][MainProcess][DEBUG] Increasing generator loc to 2
[     3.785][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.788][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.792][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.794][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.797][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.802][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.804][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.809][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.809][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.814][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.818][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.821][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.821][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.830][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.920][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.953][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     7.018][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     7.021][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     7.312][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     9.374][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[    10.409][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([4]))
[    10.411][cube-solver-14][DEBUG] Solving cube (l0 = summarise([4]), l1 = left_join())
[    10.423][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = anti_join())
[    10.424][cube-solver-11][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]))
[    10.446][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[    10.458][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join4())
[    10.461][cube-solver-11][DEBUG] Solving cube (l0 = summarise([4]), l1 = cross_join())
[    10.464][cube-solver-8][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join())
[    10.470][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = mutate())
[    10.478][cube-solver-9][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join3())
[    10.485][cube-solver-12][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter())
[    10.493][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([4]))
[    10.498][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = inner_join())
[    10.504][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]))
[    10.533][cube-solver-3][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    10.537][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[    10.539][cube-solver-2][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([4]))
[    10.553][cube-solver-9][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[    10.559][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([4]))
[    10.561][cube-solver-15][DEBUG] Solving cube (l0 = summarise([4]), l1 = union())
[    10.568][cube-solver-2][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[    10.580][cube-solver-9][DEBUG] Solving cube (l0 = union(), l1 = summarise([4]))
[    10.588][cube-solver-5][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[    10.638][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([4]))
[    10.673][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([4]))
[    10.702][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[    10.749][cube-solver-7][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[    10.950][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([4]))
[    10.951][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[    10.978][cube-solver-7][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise([4]))
[    11.350][cube-solver-9][DEBUG] Solving cube (l0 = cross_join([13]), l1 = mutate())
[    11.390][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[    12.437][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[    12.443][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[    12.468][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = summarise([4]))
[    12.468][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    13.104][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[    13.253][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[    13.262][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[    13.458][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[    13.963][cube-solver-0][DEBUG] Solving cube (l0 = summarise([4]), l1 = intersect())
[    14.130][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[    15.959][cube-solver-1][DEBUG] Solving cube (l0 = summarise([4]), l1 = semi_join())
[    16.035][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise([4]), l1 = semi_join())
[    16.036][MainProcess][INFO] Statistics:
[    16.036][MainProcess][INFO] 	Generated cubes: 45
[    16.036][MainProcess][INFO] 	Attempted programs: 323
[    16.036][MainProcess][INFO] 		Rejected: 169
[    16.037][MainProcess][INFO] 		Failed: 153
[    16.037][MainProcess][INFO] 	Blacklist clauses: 81
[    16.037][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    16.037][MainProcess][DEBUG] 	0: Counter({'mutate': 288})
[    16.037][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    16.041][MainProcess][DEBUG] 	0: Counter({'summarise': 3813, 'mutate': 2159, 'cross_join': 442, 'left_join': 288, 'union': 288, 'semi_join': 288})
[    16.044][MainProcess][DEBUG] 	1: Counter({'mutate': 1450, 'natural_join': 1185, 'union': 971, 'left_join': 947, 'anti_join': 877, 'inner_join': 640, 'cross_join': 569, 'filter': 416, 'semi_join': 223})
[    16.045][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, time = max(time), user))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/top_rated_posts/tables/i047.csv", col_types = cols(id = col_integer(),user = col_integer(),time = col_integer(),io = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/top_rated_posts/tables/o047.csv", col_types = cols(id = col_integer(),user = col_integer(),time = col_integer(),io = col_character()))

df2 <- input1 %>% group_by(user) %>% summarise(time = max(time)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(id, user, time, io) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       USER,
       TIME,
       io
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT USER,
                  MAX(TIME) AS TIME
           FROM input1
           GROUP BY USER) AS RHS
        WHERE (LHS.user = RHS.user
               AND LHS.time = RHS.time) ))
ORDER BY id
