[     2.889][MainProcess][INFO] Parsing specification...
[     2.899][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     2.899][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     2.900][MainProcess][DEBUG] Reading input files...
[     2.927][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_1.csv: ['int64', 'string', 'int64']
[     2.934][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_2.csv: ['int64', 'string', 'string']
[     2.939][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/031_o.csv: ['int64', 'string', 'int64']
[     2.973][MainProcess][DEBUG] Generating DSL...
[     3.009][MainProcess][INFO] Creating 16 processes
[     3.082][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.082][MainProcess][DEBUG] Increasing generator loc to 2
[     3.084][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.084][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.084][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.093][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.096][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.098][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.101][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.105][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.106][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.113][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.116][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.119][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.121][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.153][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.161][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.768][cube-solver-0][WARNING] There is no solution for current loc (1).
[     3.769][cube-solver-0][DEBUG] Solving cube (l0 = filter(),)
[     3.772][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.982][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = union())
[     3.982][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = natural_join4())
[     3.985][cube-solver-3][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter())
[     3.985][cube-solver-8][DEBUG] Solving cube (l0 = filter(), l1 = anti_join())
[     3.990][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = filter())
[     3.992][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = filter())
[     3.995][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = filter())
[     3.997][cube-solver-13][DEBUG] Solving cube (l0 = filter(), l1 = cross_join())
[     3.998][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(), l1 = filter())
[     4.020][cube-solver-12][DEBUG] Solving cube (l0 = filter([4]), l1 = semi_join())
[     4.028][cube-solver-11][DEBUG] Solving cube (l0 = filter([4]), l1 = intersect())
[     4.046][cube-solver-9][DEBUG] Solving cube (l0 = filter([9]), l1 = left_join())
[     4.048][cube-solver-2][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([9]))
[     4.063][cube-solver-2][DEBUG] Solving cube (l0 = cross_join(), l1 = filter([11]))
[     4.177][cube-solver-4][DEBUG] Solving cube (l0 = filter([15]), l1 = natural_join())
[     4.215][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(), l1 = filter([16]))
[     4.223][MainProcess][DEBUG] Increasing generator loc to 3
[     4.225][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     4.230][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     4.292][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     4.324][cube-solver-14][DEBUG] Solving cube (l0 = filter([16]), l1 = inner_join([5]))
[     4.324][cube-solver-15][DEBUG] Solving cube (l0 = anti_join(), l1 = filter([16]))
[     4.350][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     4.357][cube-solver-5][DEBUG] Solving cube (l0 = filter([16]), l1 = natural_join3())
[     4.378][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     4.423][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     4.480][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]))
[     5.173][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     5.175][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = filter([16]))
[     5.888][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join())
[     6.093][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     6.095][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join4())
[     6.110][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = filter([16]))
[     6.120][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = semi_join())
[     6.205][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join3())
[     6.244][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([16]), l2 = left_join())
[     6.266][cube-solver-7][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter([16]), l2 = natural_join3())
[     6.267][MainProcess][INFO] Statistics:
[     6.267][MainProcess][INFO] 	Generated cubes: 31
[     6.267][MainProcess][INFO] 	Attempted programs: 289
[     6.268][MainProcess][INFO] 		Rejected: 0
[     6.268][MainProcess][INFO] 		Failed: 288
[     6.268][MainProcess][INFO] 	Blacklist clauses: 137
[     6.268][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     6.269][MainProcess][DEBUG] 	0: Counter({'union': 239, 'natural_join': 198, 'inner_join': 183, 'left_join': 125, 'anti_join': 88})
[     6.269][MainProcess][DEBUG] 	1: Counter({'filter': 833})
[     6.269][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     6.270][MainProcess][DEBUG] 	0: Counter({'natural_join': 62})
[     6.270][MainProcess][DEBUG] 	1: Counter({'filter': 63})
[     6.270][MainProcess][DEBUG] 	2: Counter({'natural_join': 43, 'filter': 11, 'semi_join': 8, 'natural_join3': 1})
[     6.270][MainProcess][INFO] Solution found: natural_join3(filter(natural_join(@param0, @param1), type == 'public' & accountID == 'Dave'), @param1, @param0)
[     6.327][cube-solver-14][DEBUG] Found solution with cube (l0 = natural_join(), l1 = filter([16]), l2 = filter([16]))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/031_1.csv", col_types = cols(channelID = col_integer(),accountID = col_character(),role = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/031_2.csv", col_types = cols(channelID = col_integer(),channelName = col_character(),type = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/031_o.csv", col_types = cols(c1 = col_integer(),c2 = col_character(),c3 = col_integer()))

df3 <- inner_join(input1, input2)
df4 <- df3 %>% filter(type == 'public' & accountID == 'Dave')
df5 <- inner_join(df4, input2) %>% inner_join(input1)
out <- df5 %>% select(c1 = channelID, c2 = accountID, c3 = role) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `channelID` AS `c1`,
       `accountID` AS `c2`,
       `role` AS `c3`
FROM
  (SELECT `LHS`.`channelID` AS `channelID`,
          `LHS`.`accountID` AS `accountID`,
          `LHS`.`role` AS `role`,
          `LHS`.`channelName` AS `channelName`,
          `LHS`.`type` AS `type`
   FROM
     (SELECT `LHS`.`channelID` AS `channelID`,
             `LHS`.`accountID` AS `accountID`,
             `LHS`.`role` AS `role`,
             `LHS`.`channelName` AS `channelName`,
             `LHS`.`type` AS `type`
      FROM
        (SELECT *
         FROM
           (SELECT `LHS`.`channelID` AS `channelID`,
                   `LHS`.`accountID` AS `accountID`,
                   `LHS`.`role` AS `role`,
                   `RHS`.`channelName` AS `channelName`,
                   `RHS`.`type` AS `type`
            FROM `input1` AS `LHS`
            INNER JOIN `input2` AS `RHS` ON (`LHS`.`channelID` = `RHS`.`channelID`))
         WHERE (`type` = 'public'
                AND `accountID` = 'Dave')) AS LHS
      INNER JOIN input2 AS RHS ON (LHS.channelID = RHS.channelID
                                   AND LHS.channelName = RHS.channelName
                                   AND LHS.type = RHS.type)) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.channelID = RHS.channelID
                                AND LHS.accountID = RHS.accountID
                                AND LHS.role = RHS.role))
ORDER BY c1
