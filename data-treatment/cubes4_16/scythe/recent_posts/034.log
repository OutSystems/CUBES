[     2.802][MainProcess][INFO] Parsing specification...
[     2.812][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     2.812][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     2.813][MainProcess][DEBUG] Reading input files...
[     2.840][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/034.csv: ['string', 'datetime64[ns]', 'datetime64[ns]']
[     2.848][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/034_o.csv: ['string', 'datetime64[ns]', 'datetime64[ns]']
[     2.891][MainProcess][DEBUG] Generating DSL...
[     3.072][MainProcess][INFO] Creating 16 processes
[     3.141][MainProcess][DEBUG] Increasing generator loc to 2
[     3.283][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.290][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.297][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.300][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.306][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.312][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.314][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.317][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.317][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.320][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.321][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.324][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.344][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.347][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.372][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.400][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     6.442][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     6.472][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     6.825][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     6.937][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     9.531][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     9.577][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     9.585][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     9.609][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     9.608][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     9.619][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     9.631][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     9.633][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     9.633][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     9.641][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     9.653][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     9.655][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     9.665][cube-solver-10][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     9.667][cube-solver-11][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     9.680][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     9.685][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     9.694][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     9.695][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     9.697][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     9.698][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     9.708][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     9.722][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     9.736][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     9.739][cube-solver-9][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     9.780][cube-solver-3][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     9.798][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     9.843][cube-solver-5][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[     9.977][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise())
[    10.049][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[    10.132][cube-solver-7][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise())
[    10.134][cube-solver-10][DEBUG] Solving cube (l0 = cross_join(), l1 = mutate())
[    10.184][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[    10.308][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[    10.325][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[    10.336][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = summarise())
[    10.344][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    10.428][cube-solver-4][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[    10.513][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[    10.734][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[    10.973][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[    11.167][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[    11.374][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join([71]))
[    11.569][cube-solver-3][DEBUG] Found solution with cube (l0 = mutate(), l1 = filter())
[    11.570][MainProcess][INFO] Statistics:
[    11.570][MainProcess][INFO] 	Generated cubes: 46
[    11.570][MainProcess][INFO] 	Attempted programs: 106
[    11.570][MainProcess][INFO] 		Rejected: 68
[    11.570][MainProcess][INFO] 		Failed: 37
[    11.570][MainProcess][INFO] 	Blacklist clauses: 71
[    11.571][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    11.571][MainProcess][DEBUG] 	0: Counter({'mutate': 48, 'summarise': 36})
[    11.571][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    11.572][MainProcess][DEBUG] 	0: Counter({'summarise': 1291, 'mutate': 694, 'cross_join': 137, 'left_join': 84, 'union': 84, 'semi_join': 84})
[    11.574][MainProcess][DEBUG] 	1: Counter({'left_join': 347, 'natural_join': 329, 'mutate': 305, 'union': 301, 'anti_join': 286, 'filter': 265, 'cross_join': 199, 'inner_join': 154, 'summarise': 144, 'semi_join': 45})
[    11.574][MainProcess][INFO] Solution found: filter(mutate(@param0, maxDATE_UPDATE = max(DATE_UPDATE)), maxDATE_UPDATE == DATE_UPDATE)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/034.csv", col_types = cols(MATERIAL = col_character(),DISCO_DATE = col_character(),DATE_UPDATE = col_character()))
input1$DISCO_DATE <- ymd(input1$DISCO_DATE)
input1$DATE_UPDATE <- ymd(input1$DATE_UPDATE)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/034_o.csv", col_types = cols(c1 = col_character(),c2 = col_character(),c3 = col_character()))
expected_output$c2 <- ymd(expected_output$c2)
expected_output$c3 <- ymd(expected_output$c3)

df2 <- input1 %>% mutate(maxDATE_UPDATE = max(DATE_UPDATE))
df3 <- df2 %>% filter(maxDATE_UPDATE == DATE_UPDATE)
out <- df3 %>% select(c1 = MATERIAL, c2 = DISCO_DATE, c3 = DATE_UPDATE) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT MATERIAL AS c1,
       DISCO_DATE AS c2,
       DATE_UPDATE AS c3
FROM
  (SELECT MATERIAL,
          DISCO_DATE,
          DATE_UPDATE,
          MAX(DATE_UPDATE) OVER () AS maxDATE_UPDATE
   FROM input1)
WHERE (maxDATE_UPDATE = DATE_UPDATE)
ORDER BY c1
