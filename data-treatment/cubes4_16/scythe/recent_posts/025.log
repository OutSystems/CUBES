[     3.166][MainProcess][INFO] Parsing specification...
[     3.184][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.184][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.184][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.185][MainProcess][DEBUG] Reading input files...
[     3.220][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/025.csv: ['int64', 'float64', 'string']
[     3.232][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/025_o.csv: ['int64', 'float64', 'string']
[     3.265][MainProcess][DEBUG] Generating DSL...
[     4.057][MainProcess][INFO] Creating 16 processes
[     4.131][MainProcess][DEBUG] Increasing generator loc to 3
[     5.042][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     5.046][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     5.050][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     5.050][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     5.061][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     5.061][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     5.061][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     5.062][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     5.063][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     5.069][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     5.071][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     5.073][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     5.078][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     5.112][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     5.118][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     5.123][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[    40.784][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    40.975][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[    41.077][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    41.344][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise([1]))
[    68.802][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise([6]))
[    68.994][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[    69.013][cube-solver-9][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join(), l2 = filter())
[    69.095][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([6]))
[    69.154][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[    69.155][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([6]), l2 = filter())
[    69.211][cube-solver-11][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join3(), l2 = filter())
[    69.337][cube-solver-13][DEBUG] Solving cube (l0 = summarise([6]), l1 = natural_join4(), l2 = filter())
[    69.342][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise([6]))
[    69.386][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[    69.393][cube-solver-7][DEBUG] Solving cube (l0 = summarise([6]), l1 = summarise([6]), l2 = filter())
[    69.404][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[    69.416][cube-solver-11][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = natural_join())
[    69.452][cube-solver-13][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = natural_join3())
[    69.499][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[    69.499][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([6]), l2 = filter())
[    69.533][cube-solver-8][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = natural_join4())
[    69.536][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([6]), l2 = filter())
[    69.545][cube-solver-7][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = summarise([6]))
[    69.594][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[    69.736][cube-solver-8][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = anti_join())
[    69.786][cube-solver-5][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = filter())
[    69.820][cube-solver-10][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = left_join())
[    69.869][cube-solver-6][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = union())
[    69.902][cube-solver-15][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = intersect())
[    69.912][cube-solver-14][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = semi_join())
[    69.987][cube-solver-4][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = mutate())
[    69.992][cube-solver-12][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter(), l2 = cross_join())
[    95.751][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[   117.639][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[   155.866][cube-solver-2][DEBUG] Solving cube (l0 = summarise([6]), l1 = filter([155]), l2 = inner_join())
[   178.297][cube-solver-1][DEBUG] Solving cube (l0 = summarise([6]), l1 = anti_join(), l2 = filter([191]))
[   207.860][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[   231.719][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[   267.811][cube-solver-0][DEBUG] Solving cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([230]))
[   293.331][cube-solver-3][DEBUG] Solving cube (l0 = summarise([6]), l1 = union(), l2 = filter([244]))
[   461.888][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise([6]), l1 = left_join(), l2 = filter([230]))
[   461.939][MainProcess][INFO] Statistics:
[   461.940][MainProcess][INFO] 	Generated cubes: 36
[   461.941][MainProcess][INFO] 	Attempted programs: 5916
[   461.941][MainProcess][INFO] 		Rejected: 3627
[   461.941][MainProcess][INFO] 		Failed: 2288
[   461.941][MainProcess][INFO] 	Blacklist clauses: 250
[   461.941][MainProcess][DEBUG] Printing statistics for good programs of size 2
[   461.992][MainProcess][DEBUG] 	0: Counter({'mutate': 21408, 'filter': 11232, 'summarise': 9696})
[   462.021][MainProcess][DEBUG] 	1: Counter({'filter': 31104, 'mutate': 6240, 'summarise': 4992})
[   462.021][MainProcess][DEBUG] Printing statistics for good programs of size 3
[   462.181][MainProcess][DEBUG] 	0: Counter({'summarise': 361570})
[   462.270][MainProcess][DEBUG] 	1: Counter({'filter': 268136, 'natural_join': 40868, 'left_join': 18759, 'union': 17712, 'anti_join': 16104})
[   462.361][MainProcess][DEBUG] 	2: Counter({'filter': 111459, 'natural_join3': 34590, 'natural_join': 31284, 'union': 30672, 'left_join': 30394, 'cross_join': 28407, 'inner_join': 26940, 'mutate': 26052, 'semi_join': 21144, 'anti_join': 12246, 'summarise': 8400})
[   462.362][MainProcess][INFO] Solution found: filter(left_join(summarise(@param0, minid = min(id), gallery_id), @param0), is.na(gallery_id) | minid >= id)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/025.csv", col_types = cols(id = col_integer(),gallery_id = col_double(),path = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/025_o.csv", col_types = cols(id = col_integer(),gallery_id = col_double(),path = col_character()))

df2 <- input1 %>% group_by(gallery_id) %>% summarise(minid = min(id)) %>% ungroup()
df3 <- left_join(df2, input1)
df4 <- df3 %>% filter(is.na(gallery_id) | minid >= id)
out <- df4 %>% select(id, gallery_id, path) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       gallery_id,
       PATH
FROM
  (SELECT LHS.gallery_id AS gallery_id,
          LHS.minid AS minid,
          RHS.id AS id,
          RHS.path AS PATH
   FROM
     (SELECT gallery_id,
             MIN(id) AS minid
      FROM input1
      GROUP BY gallery_id) AS LHS
   LEFT JOIN input1 AS RHS ON (LHS.gallery_id = RHS.gallery_id))
WHERE (((gallery_id) IS NULL)
       OR minid >= id)
ORDER BY id
