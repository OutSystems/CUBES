[     1.609][MainProcess][INFO] Parsing specification...
[     1.612][MainProcess][DEBUG] Reading input files...
[     1.616][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/022_2.csv: ['int64', 'int64']
[     1.619][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/022_o.csv: ['int64']
[     1.644][MainProcess][DEBUG] Generating DSL...
[     2.596][MainProcess][INFO] Creating 16 processes
[     2.671][MainProcess][DEBUG] Increasing generator loc to 4
[     3.852][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.853][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     3.853][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     3.858][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     3.858][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     3.863][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     3.868][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     3.871][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     3.875][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     3.875][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     3.876][cube-solver-13][DEBUG] Initialising process for 4 lines of code.
[     3.879][cube-solver-12][DEBUG] Initialising process for 4 lines of code.
[     3.908][cube-solver-14][DEBUG] Initialising process for 4 lines of code.
[     3.912][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     3.991][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     3.999][cube-solver-15][DEBUG] Initialising process for 4 lines of code.
[   129.785][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = mutate(), l2 = filter())
[   131.625][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = summarise())
[   131.669][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[   131.717][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = mutate())
[   131.761][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = summarise(), l2 = filter())
[   131.856][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = mutate(), l2 = filter())
[   131.857][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = mutate())
[   132.038][cube-solver-0][DEBUG] Initialising process for 4 lines of code.
[   132.661][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = mutate())
[   132.748][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[   132.876][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[   132.904][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = summarise())
[   132.919][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = summarise())
[   133.502][cube-solver-4][DEBUG] Initialising process for 4 lines of code.
[   135.329][cube-solver-2][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[   135.332][MainProcess][INFO] Statistics:
[   135.332][MainProcess][INFO] 	Generated cubes: 19
[   135.332][MainProcess][INFO] 	Attempted programs: 50
[   135.332][MainProcess][INFO] 		Rejected: 35
[   135.333][MainProcess][INFO] 		Failed: 14
[   135.333][MainProcess][INFO] 	Blacklist clauses: 2
[   135.333][MainProcess][DEBUG] Printing statistics for good programs of size 3
[   135.334][MainProcess][DEBUG] 	0: Counter({'mutate': 486, 'summarise': 382, 'filter': 352})
[   135.335][MainProcess][DEBUG] 	1: Counter({'mutate': 608, 'filter': 445, 'summarise': 167})
[   135.335][MainProcess][DEBUG] 	2: Counter({'mutate': 489, 'filter': 423, 'summarise': 308})
[   135.336][MainProcess][INFO] Solution found: mutate(filter(summarise(@param0, n = n(), c1), n >= 3 | n >= c1), c1 = max(c1))
[   135.539][cube-solver-7][DEBUG] Initialising process for 4 lines of code.

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/022_2.csv", col_types = cols(c1 = col_integer(),c2 = col_integer()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/022_o.csv", col_types = cols(c3 = col_integer()))

df2 <- input1 %>% group_by(c1) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n >= 3 | n >= c1)
df4 <- df3 %>% mutate(c1 = max(c1))
out <- df4 %>% select(c3 = c1) %>% distinct() %>% arrange(c3)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT MAX(c1) OVER () AS c3
FROM
  (SELECT c1,
          COUNT() AS n
   FROM input1
   GROUP BY c1)
WHERE (n >= 3.0
       OR n >= c1)
ORDER BY c3
