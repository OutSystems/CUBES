[     1.626][MainProcess][INFO] Parsing specification...
[     1.641][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.642][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.642][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.643][MainProcess][DEBUG] Reading input files...
[     1.665][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/005.csv: ['int64', 'int64', 'int64', 'datetime64[ns]']
[     1.672][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/005_o.csv: ['int64', 'int64', 'int64', 'datetime64[ns]']
[     1.705][MainProcess][DEBUG] Generating DSL...
[     1.905][MainProcess][INFO] Creating 16 processes
[     1.988][MainProcess][DEBUG] Increasing generator loc to 3
[     2.137][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.137][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.138][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.142][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.158][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     2.161][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     2.166][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     2.176][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     2.180][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     2.182][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     2.185][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     2.186][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     2.189][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     2.211][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     2.268][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     2.304][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     9.261][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     9.309][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     9.313][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     9.341][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[    10.882][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    14.435][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[    14.442][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]), l2 = filter())
[    14.447][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([3]), l2 = filter())
[    14.460][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise([3]))
[    14.460][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise([3]))
[    14.460][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([3]), l2 = filter())
[    14.477][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[    14.479][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[    14.502][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[    14.507][cube-solver-9][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join4(), l2 = filter())
[    14.509][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = summarise([3]), l2 = filter())
[    14.518][cube-solver-6][DEBUG] Solving cube (l0 = summarise([3]), l1 = natural_join3(), l2 = filter())
[    14.531][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = natural_join())
[    14.534][cube-solver-9][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = natural_join4())
[    14.536][cube-solver-12][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = natural_join3())
[    14.542][cube-solver-13][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = filter())
[    14.560][cube-solver-8][DEBUG] Solving cube (l0 = summarise([3]), l1 = filter(), l2 = summarise([3]))
[    14.571][cube-solver-9][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = intersect())
[    14.574][cube-solver-14][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = left_join())
[    14.575][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = anti_join())
[    14.578][cube-solver-11][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = union())
[    14.582][cube-solver-6][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter(), l2 = semi_join())
[    14.602][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([1]))
[    14.663][cube-solver-15][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([1]), l2 = cross_join())
[    14.734][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter([6]))
[    14.751][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter([6]), l2 = summarise([4]))
[    14.779][cube-solver-7][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([6]), l2 = mutate())
[    14.800][cube-solver-5][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter([6]), l2 = inner_join())
[    21.495][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    24.353][cube-solver-1][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join(), l2 = filter([74]))
[    26.766][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise([4]), l1 = natural_join(), l2 = filter([74]))
[    26.769][MainProcess][INFO] Statistics:
[    26.769][MainProcess][INFO] 	Generated cubes: 34
[    26.769][MainProcess][INFO] 	Attempted programs: 112
[    26.769][MainProcess][INFO] 		Rejected: 91
[    26.769][MainProcess][INFO] 		Failed: 20
[    26.769][MainProcess][INFO] 	Blacklist clauses: 78
[    26.769][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    26.772][MainProcess][DEBUG] 	0: Counter({'mutate': 2089, 'filter': 1440})
[    26.774][MainProcess][DEBUG] 	1: Counter({'filter': 2089, 'mutate': 1440})
[    26.775][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    26.779][MainProcess][DEBUG] 	0: Counter({'summarise': 9830})
[    26.784][MainProcess][DEBUG] 	1: Counter({'filter': 9565, 'natural_join': 265})
[    26.793][MainProcess][DEBUG] 	2: Counter({'cross_join': 1397, 'natural_join3': 1382, 'natural_join': 1351, 'left_join': 1338, 'union': 1256, 'inner_join': 1056, 'semi_join': 1027, 'anti_join': 615, 'filter': 265, 'mutate': 144})
[    26.794][MainProcess][INFO] Solution found: filter(natural_join(summarise(@param0, event_id = max(event_id), prim_cid), @param0), event_id <= 17)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/005.csv", col_types = cols(g_event_id = col_integer(),prim_cid = col_integer(),event_id = col_integer(),event_time = col_character()))
input1$event_time <- dmy(input1$event_time)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/005_o.csv", col_types = cols(g_event_id = col_integer(),prim_cid = col_integer(),event_id = col_integer(),event_time = col_character()))
expected_output$event_time <- dmy(expected_output$event_time)

df2 <- input1 %>% group_by(prim_cid) %>% summarise(event_id = max(event_id)) %>% ungroup()
df3 <- inner_join(df2, input1)
df4 <- df3 %>% filter(event_id <= 17)
out <- df4 %>% select(g_event_id, prim_cid, event_id, event_time) %>% arrange(g_event_id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT g_event_id,
       prim_cid,
       event_id,
       event_time
FROM
  (SELECT LHS.prim_cid AS prim_cid,
          LHS.event_id AS event_id,
          RHS.g_event_id AS g_event_id,
          RHS.event_time AS event_time
   FROM
     (SELECT prim_cid,
             MAX(event_id) AS event_id
      FROM input1
      GROUP BY prim_cid) AS LHS
   INNER JOIN input1 AS RHS ON (LHS.prim_cid = RHS.prim_cid
                                AND LHS.event_id = RHS.event_id))
WHERE (event_id <= 17.0)
ORDER BY g_event_id
