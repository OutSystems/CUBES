[     2.744][MainProcess][INFO] Parsing specification...
[     2.811][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     2.812][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     2.812][MainProcess][DEBUG] Reading input files...
[     2.855][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/032.csv: ['int64', 'int64', 'int64', 'string']
[     2.901][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/032_o.csv: ['int64', 'int64', 'string']
[     2.932][MainProcess][DEBUG] Generating DSL...
[     3.104][MainProcess][INFO] Creating 16 processes
[     3.171][MainProcess][DEBUG] Increasing generator loc to 2
[     3.290][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.293][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.297][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.304][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.309][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.310][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.326][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.329][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.330][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.334][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.335][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.345][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.367][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.398][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.401][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.407][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     6.507][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     6.535][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     7.557][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     7.922][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     9.877][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([4]))
[     9.924][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     9.927][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([4]))
[     9.941][cube-solver-4][DEBUG] Solving cube (l0 = summarise([4]), l1 = cross_join())
[     9.964][cube-solver-2][DEBUG] Solving cube (l0 = summarise([4]), l1 = mutate())
[     9.964][cube-solver-14][DEBUG] Solving cube (l0 = summarise([4]), l1 = left_join())
[     9.968][cube-solver-12][DEBUG] Solving cube (l0 = summarise([4]), l1 = filter())
[     9.972][cube-solver-9][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join3())
[     9.975][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     9.980][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     9.998][cube-solver-15][DEBUG] Solving cube (l0 = summarise([4]), l1 = union())
[    10.007][cube-solver-10][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join4())
[    10.008][cube-solver-11][DEBUG] Solving cube (l0 = summarise([4]), l1 = summarise([4]))
[    10.011][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]))
[    10.029][cube-solver-5][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([4]))
[    10.039][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    10.039][cube-solver-3][DEBUG] Solving cube (l0 = summarise([4]), l1 = inner_join())
[    10.041][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([4]))
[    10.043][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[    10.046][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([4]))
[    10.061][cube-solver-10][DEBUG] Solving cube (l0 = union(), l1 = summarise([4]))
[    10.064][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[    10.095][cube-solver-6][DEBUG] Solving cube (l0 = intersect(), l1 = summarise([4]))
[    10.107][cube-solver-13][DEBUG] Solving cube (l0 = summarise([4]), l1 = anti_join())
[    10.108][cube-solver-9][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[    10.134][cube-solver-11][DEBUG] Solving cube (l0 = intersect(), l1 = mutate())
[    10.243][cube-solver-8][DEBUG] Solving cube (l0 = summarise([4]), l1 = natural_join())
[    10.356][cube-solver-11][DEBUG] Solving cube (l0 = semi_join(), l1 = summarise([4]))
[    11.315][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = mutate())
[    11.363][cube-solver-10][DEBUG] Solving cube (l0 = cross_join(), l1 = summarise([4]))
[    11.507][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join())
[    11.509][cube-solver-9][DEBUG] Solving cube (l0 = cross_join([6]), l1 = mutate())
[    11.544][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join3())
[    11.571][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = natural_join4())
[    11.594][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = summarise([4]))
[    11.785][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    12.258][cube-solver-12][DEBUG] Solving cube (l0 = mutate(), l1 = anti_join())
[    12.628][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = left_join())
[    12.773][cube-solver-2][DEBUG] Solving cube (l0 = mutate(), l1 = union())
[    13.974][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = intersect())
[    14.260][cube-solver-7][DEBUG] Solving cube (l0 = mutate(), l1 = semi_join())
[    14.388][cube-solver-0][DEBUG] Solving cube (l0 = summarise([4]), l1 = intersect())
[    14.611][cube-solver-1][DEBUG] Solving cube (l0 = summarise([4]), l1 = semi_join())
[    14.909][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = cross_join([93]))
[    16.448][cube-solver-6][DEBUG] Solving cube (l0 = mutate(), l1 = mutate())
[    16.671][cube-solver-5][DEBUG] Solving cube (l0 = mutate(), l1 = inner_join())
[    16.864][cube-solver-2][DEBUG] Solving cube (l0 = inner_join(), l1 = summarise([4]))
[    17.832][cube-solver-7][DEBUG] Solving cube (l0 = inner_join(), l1 = mutate())
[    19.128][MainProcess][DEBUG] Increasing generator loc to 3
[    19.151][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    19.727][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[    22.615][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise([4]), l1 = semi_join())
[    22.617][MainProcess][INFO] Statistics:
[    22.617][MainProcess][INFO] 	Generated cubes: 52
[    22.617][MainProcess][INFO] 	Attempted programs: 589
[    22.617][MainProcess][INFO] 		Rejected: 294
[    22.617][MainProcess][INFO] 		Failed: 294
[    22.617][MainProcess][INFO] 	Blacklist clauses: 148
[    22.617][MainProcess][DEBUG] Printing statistics for good programs of size 1
[    22.618][MainProcess][DEBUG] 	0: Counter({'mutate': 168, 'summarise': 108})
[    22.619][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    22.629][MainProcess][DEBUG] 	0: Counter({'summarise': 10448, 'mutate': 6011, 'cross_join': 1373, 'inner_join': 1149, 'left_join': 276, 'union': 276, 'semi_join': 276})
[    22.638][MainProcess][DEBUG] 	1: Counter({'mutate': 3149, 'anti_join': 2594, 'cross_join': 2566, 'inner_join': 2157, 'union': 2117, 'left_join': 2072, 'natural_join': 1887, 'semi_join': 1375, 'summarise': 1113, 'filter': 780})
[    22.638][MainProcess][INFO] Solution found: semi_join(@param0, summarise(@param0, Id = max(Id), crit1, crit2))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/032.csv", col_types = cols(Id = col_integer(),crit1 = col_integer(),crit2 = col_integer(),value = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/032_o.csv", col_types = cols(crit1 = col_integer(),crit2 = col_integer(),value = col_character()))

df2 <- input1 %>% group_by(crit1, crit2) %>% summarise(Id = max(Id)) %>% ungroup()
df3 <- semi_join(input1, df2)
out <- df3 %>% select(crit1, crit2, value) %>% arrange(crit1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT crit1,
       crit2,
       value
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT crit1,
                  crit2,
                  MAX(Id) AS Id
           FROM input1
           GROUP BY crit1,
                    crit2) AS RHS
        WHERE (LHS.Id = RHS.Id
               AND LHS.crit1 = RHS.crit1
               AND LHS.crit2 = RHS.crit2) ))
ORDER BY crit1
