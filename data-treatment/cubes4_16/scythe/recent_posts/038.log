[     2.639][MainProcess][INFO] Parsing specification...
[     2.654][MainProcess][DEBUG] Reading input files...
[     2.666][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_1.csv: ['float64', 'int64']
[     2.670][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_2.csv: ['float64', 'int64']
[     2.675][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/038_o.csv: ['float64', 'int64', 'float64']
[     2.705][MainProcess][DEBUG] Generating DSL...
[     2.718][MainProcess][INFO] Creating 16 processes
[     2.783][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     2.783][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     2.784][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     2.784][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     2.784][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     2.784][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     2.784][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     2.785][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     2.784][MainProcess][DEBUG] Increasing generator loc to 2
[     2.786][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     2.792][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     2.794][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     2.799][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     2.811][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     2.814][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.818][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     2.825][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.841][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     2.841][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     2.842][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     2.849][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     2.849][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     2.851][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.856][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     2.856][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     2.876][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     2.877][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     2.879][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     2.892][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     2.892][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     2.895][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     2.918][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([1]))
[     2.923][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([1]))
[     2.926][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     2.928][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     2.929][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect())
[     2.931][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     2.932][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     2.936][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([5]))
[     2.939][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     2.941][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     2.942][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     2.943][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([3]))
[     2.946][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     2.947][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     2.948][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect())
[     2.949][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     2.950][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     2.953][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([5]))
[     2.956][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     2.958][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     2.959][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     2.960][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([4]), l1 = natural_join())
[     2.974][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     2.976][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     2.982][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect())
[     2.992][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     3.011][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([2]))
[     3.032][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.070][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join([8]))
[     3.070][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join())
[     3.086][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3())
[     3.089][cube-solver-7][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join4())
[     3.101][cube-solver-7][DEBUG] Solving cube (l0 = anti_join([10]), l1 = anti_join([10]))
[     3.106][cube-solver-4][DEBUG] Found solution with cube (l0 = left_join(),)
[     3.107][MainProcess][INFO] Statistics:
[     3.108][MainProcess][INFO] 	Generated cubes: 44
[     3.108][MainProcess][INFO] 	Attempted programs: 20
[     3.108][MainProcess][INFO] 		Rejected: 7
[     3.108][MainProcess][INFO] 		Failed: 12
[     3.108][MainProcess][INFO] 	Blacklist clauses: 24
[     3.108][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.109][MainProcess][DEBUG] 	0: Counter({'union': 13, 'left_join': 13, 'natural_join': 13, 'inner_join': 7})
[     3.109][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     3.109][MainProcess][DEBUG] 	0: Counter({'natural_join': 19})
[     3.109][MainProcess][DEBUG] 	1: Counter({'union': 7, 'left_join': 7, 'semi_join': 5})
[     3.110][MainProcess][INFO] Solution found: left_join(@param1, @param0)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/038_1.csv", col_types = cols(Date = col_double(),Sold = col_integer()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/038_2.csv", col_types = cols(Date = col_double(),Tapped = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/038_o.csv", col_types = cols(Date = col_double(),Tapped = col_integer(),Sold = col_double()))

df3 <- left_join(input2, input1)
out <- df3 %>% select(Date, Tapped, Sold) %>% arrange(Date)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Date, Tapped,
             Sold
FROM
  (SELECT LHS.Date AS Date,
          LHS.Tapped AS Tapped,
          RHS.Sold AS Sold
   FROM input2 AS LHS
   LEFT JOIN input1 AS RHS ON (LHS.Date = RHS.Date))
ORDER BY Date
