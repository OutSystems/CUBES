[     1.629][MainProcess][INFO] Parsing specification...
[     1.637][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.637][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.637][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     1.638][MainProcess][DEBUG] Reading input files...
[     1.663][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/018.csv: ['int64', 'int64', 'datetime64[ns]', 'string']
[     1.668][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/018_o.csv: ['string', 'int64']
[     1.703][MainProcess][DEBUG] Generating DSL...
[     1.743][MainProcess][INFO] Creating 16 processes
[     1.814][MainProcess][DEBUG] Increasing generator loc to 3
[     1.817][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     1.820][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.824][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.827][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.831][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     1.835][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     1.843][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     1.848][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     1.851][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     1.852][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     1.856][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     1.862][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     1.863][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[     1.863][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     1.878][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     1.913][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     2.884][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[     2.889][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[     2.893][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     2.896][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     2.897][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[     2.904][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     3.950][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[     3.955][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[     3.960][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[     3.961][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[     3.963][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise())
[     3.964][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[     3.967][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[     3.969][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[     3.968][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[     3.971][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[     3.973][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[     3.977][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[     3.980][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[     3.981][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise())
[     3.983][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[     3.987][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[     3.988][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[     3.988][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[     3.995][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = intersect())
[     3.998][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate())
[     4.007][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = semi_join())
[     4.052][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter())
[     4.062][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = cross_join())
[     4.093][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter())
[     4.105][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[     4.217][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[     4.226][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = inner_join())
[     4.875][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter([12]))
[     4.917][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = filter([12]))
[     5.104][cube-solver-14][DEBUG] Found solution with cube (l0 = summarise(), l1 = filter(), l2 = semi_join())
[     5.105][MainProcess][INFO] Statistics:
[     5.106][MainProcess][INFO] 	Generated cubes: 34
[     5.106][MainProcess][INFO] 	Attempted programs: 17
[     5.106][MainProcess][INFO] 		Rejected: 7
[     5.106][MainProcess][INFO] 		Failed: 9
[     5.106][MainProcess][INFO] 	Blacklist clauses: 12
[     5.106][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     5.107][MainProcess][DEBUG] 	0: Counter({'mutate': 301, 'summarise': 261})
[     5.107][MainProcess][DEBUG] 	1: Counter({'filter': 562})
[     5.108][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     5.108][MainProcess][DEBUG] 	0: Counter({'summarise': 937})
[     5.109][MainProcess][DEBUG] 	1: Counter({'filter': 925, 'anti_join': 13})
[     5.109][MainProcess][DEBUG] 	2: Counter({'natural_join3': 126, 'left_join': 112, 'semi_join': 111, 'union': 109, 'cross_join': 109, 'mutate': 96, 'natural_join': 84, 'anti_join': 84, 'inner_join': 62, 'filter': 46})
[     5.110][MainProcess][INFO] Solution found: semi_join(summarise(@param0, n = n(), Course, Date), filter(summarise(@param0, n = n(), Course, Date), n > 2 | Date < mdy('10/17/2016')))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/018.csv", col_types = cols(OrderID = col_integer(),CustomerID = col_integer(),Date = col_character(),Course = col_character()))
input1$Date <- mdy(input1$Date)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/018_o.csv", col_types = cols(c1 = col_character(),c2 = col_integer()))

df2 <- input1 %>% group_by(Course, Date) %>% summarise(n = n()) %>% ungroup()
df3 <- df2 %>% filter(n > 2 | Date < mdy('10/17/2016'))
df4 <- semi_join(df2, df3)
out <- df4 %>% select(c1 = Course, c2 = n) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `Course` AS `c1`,
       `n` AS `c2`
FROM
  (SELECT *
   FROM
     (SELECT `Course`,
             `Date`,
             COUNT() AS `n`
      FROM `input1`
      GROUP BY `Course`,
               `Date`) AS `LHS`
   WHERE EXISTS
       (SELECT 1
        FROM
          (SELECT *
           FROM
             (SELECT `Course`,
                     `Date`,
                     COUNT() AS `n`
              FROM `input1`
              GROUP BY `Course`,
                       `Date`)
           WHERE (`n` > 2.0
                  OR `Date` < mdy('10/17/2016'))) AS RHS
        WHERE (LHS.Course = RHS.Course
               AND LHS.Date = RHS.Date
               AND LHS.n = RHS.n) ))
ORDER BY c1
