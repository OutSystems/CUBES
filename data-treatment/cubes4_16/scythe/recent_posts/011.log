[     4.038][MainProcess][INFO] Parsing specification...
[     4.041][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     4.041][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     4.041][MainProcess][DEBUG] Reading input files...
[     4.049][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/011.csv: ['int64', 'string', 'string']
[     4.054][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/011_o.csv: ['int64', 'string']
[     4.095][MainProcess][DEBUG] Generating DSL...
[     4.150][MainProcess][INFO] Creating 16 processes
[     4.229][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     4.229][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     4.229][MainProcess][DEBUG] Increasing generator loc to 2
[     4.232][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     4.235][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     4.239][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     4.243][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     4.247][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     4.251][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     4.255][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     4.259][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     4.263][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     4.269][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     4.272][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     4.274][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     4.285][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     4.322][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     4.723][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     4.766][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     5.139][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     5.146][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     5.149][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     5.154][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     5.157][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     5.159][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     5.161][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     5.162][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     5.163][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     5.166][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     5.168][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     5.175][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     5.178][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     5.179][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     5.180][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     5.183][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     5.185][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     5.185][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     5.187][cube-solver-9][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     5.187][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     5.188][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     5.239][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     5.247][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     5.274][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     5.344][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = intersect())
[     5.506][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     5.629][cube-solver-10][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise())
[     5.630][MainProcess][INFO] Statistics:
[     5.630][MainProcess][INFO] 	Generated cubes: 28
[     5.631][MainProcess][INFO] 	Attempted programs: 10
[     5.631][MainProcess][INFO] 		Rejected: 9
[     5.631][MainProcess][INFO] 		Failed: 0
[     5.631][MainProcess][INFO] 	Blacklist clauses: 0
[     5.631][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     5.631][MainProcess][DEBUG] 	0: Counter({'mutate': 96, 'summarise': 95})
[     5.632][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     5.632][MainProcess][DEBUG] 	0: Counter({'summarise': 194, 'left_join': 68, 'union': 55})
[     5.632][MainProcess][DEBUG] 	1: Counter({'mutate': 95, 'summarise': 44, 'left_join': 31, 'semi_join': 28, 'union': 25, 'anti_join': 24, 'cross_join': 24, 'inner_join': 21, 'natural_join': 21, 'unite': 4})
[     5.632][MainProcess][INFO] Solution found: summarise(left_join(@param0, @param0), concatValue = string_agg(Value, ', '), ID)
[     5.681][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/011.csv", col_types = cols(ID = col_integer(),Name = col_character(),Value = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/011_o.csv", col_types = cols(ID = col_integer(),Value = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df2 <- left_join(input1, input1)
df3 <- df2 %>% group_by(ID) %>% summarise(concatValue = string_agg(Value, ', ')) %>% ungroup()
out <- df3 %>% select(ID, Value = concatValue) %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `ID`,
       `concatValue` AS `Value`
FROM
  (SELECT `ID`,
          string_agg(`Value`, ', ') AS concatValue
   FROM
     (SELECT LHS.ID AS ID,
             LHS.Name AS Name,
             LHS.Value AS Value
      FROM input1 AS LHS
      LEFT JOIN input1 AS RHS ON (LHS.ID = RHS.ID
                                  AND LHS.Name = RHS.Name
                                  AND LHS.Value = RHS.Value))
   GROUP BY ID)
ORDER BY ID
