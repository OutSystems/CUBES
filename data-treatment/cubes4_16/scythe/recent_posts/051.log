[     3.375][MainProcess][INFO] Parsing specification...
[     3.380][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.380][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.382][MainProcess][DEBUG] Reading input files...
[     3.388][MainProcess][WARNING] Using integers larger than 32 bits! Converting column isbn to string.
[     3.390][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/051_1.csv: ['object', 'string']
[     3.395][MainProcess][WARNING] Using integers larger than 32 bits! Converting column isbn to string.
[     3.396][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/051_2.csv: ['object', 'string']
[     3.401][MainProcess][WARNING] Using integers larger than 32 bits! Converting column isbn to string.
[     3.402][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/051_o.csv: ['object', 'string', 'string']
[     3.434][MainProcess][DEBUG] Generating DSL...
[     3.482][MainProcess][INFO] Creating 16 processes
[     3.555][MainProcess][DEBUG] Increasing generator loc to 2
[     3.564][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.565][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.565][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.573][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.577][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     3.588][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     3.588][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.592][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.597][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.600][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     3.605][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.608][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.608][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     3.613][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.617][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.665][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     4.082][cube-solver-1][WARNING] There is no solution for current loc (1).
[     4.083][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     4.084][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     4.097][cube-solver-0][WARNING] There is no solution for current loc (1).
[     4.098][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     4.099][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.694][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     4.700][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     4.709][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = unite())
[     4.714][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     4.718][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     4.722][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     4.724][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     4.724][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     4.730][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     4.734][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     4.736][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     4.745][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     4.757][cube-solver-14][DEBUG] Solving cube (l0 = summarise([1]), l1 = union())
[     4.771][cube-solver-11][DEBUG] Solving cube (l0 = summarise([2]), l1 = summarise([2]))
[     4.782][cube-solver-11][DEBUG] Solving cube (l0 = anti_join([2]), l1 = mutate())
[     4.812][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     4.818][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([4]))
[     4.820][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([4]))
[     4.832][cube-solver-6][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     4.855][cube-solver-13][DEBUG] Found solution with cube (l0 = summarise(), l1 = left_join())
[     4.856][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     4.856][MainProcess][INFO] Statistics:
[     4.856][MainProcess][INFO] 	Generated cubes: 25
[     4.857][MainProcess][INFO] 	Attempted programs: 5
[     4.857][MainProcess][INFO] 		Rejected: 0
[     4.857][MainProcess][INFO] 		Failed: 4
[     4.857][MainProcess][INFO] 	Blacklist clauses: 11
[     4.857][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     4.857][MainProcess][DEBUG] 	0: Counter({'natural_join': 10, 'summarise': 1})
[     4.858][MainProcess][DEBUG] 	1: Counter({'mutate': 7, 'summarise': 3, 'left_join': 1})
[     4.858][MainProcess][INFO] Solution found: left_join(@param0, summarise(@param1, concatAuthor = string_agg(Author, ', '), isbn))
[     4.890][cube-solver-8][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/051_1.csv", col_types = cols(isbn = col_character(),title = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/051_2.csv", col_types = cols(isbn = col_character(),Author = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/051_o.csv", col_types = cols(isbn = col_character(),title = col_character(),author = col_character()))

string_agg <- function(v,s) {Reduce(function(x, y) paste(x, y, sep = s), v)}

df3 <- input2 %>% group_by(isbn) %>% summarise(concatAuthor = string_agg(Author, ', ')) %>% ungroup()
df4 <- left_join(input1, df3)
out <- df4 %>% select(isbn, title, author = concatAuthor) %>% arrange(isbn)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `isbn`,
       `title`,
       `concatAuthor` AS `author`
FROM
  (SELECT `LHS`.`isbn` AS `isbn`,
          `LHS`.`title` AS `title`,
          `RHS`.`concatAuthor` AS `concatAuthor`
   FROM `input1` AS `LHS`
   LEFT JOIN
     (SELECT `isbn`,
             string_agg(`Author`, ', ') AS concatAuthor
      FROM input2
      GROUP BY isbn) AS RHS ON (LHS.isbn = RHS.isbn))
ORDER BY isbn
