[     9.865][MainProcess][INFO] Parsing specification...
[     9.874][MainProcess][DEBUG] Reading input files...
[     9.887][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/040.csv: ['int64', 'int64', 'string', 'string', 'string']
[     9.897][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/040_o.csv: ['int64', 'int64', 'string', 'string', 'string']
[     9.960][MainProcess][DEBUG] Generating DSL...
[    10.040][MainProcess][INFO] Creating 16 processes
[    10.134][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[    10.134][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[    10.134][MainProcess][DEBUG] Increasing generator loc to 3
[    10.134][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[    10.134][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[    10.135][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[    10.140][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[    10.147][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[    10.149][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[    10.153][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[    10.165][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[    10.172][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[    10.176][cube-solver-12][DEBUG] Initialising process for 3 lines of code.
[    10.180][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[    10.209][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[    10.215][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[    10.216][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[    11.038][cube-solver-3][DEBUG] Solving cube (l0 = mutate(), l1 = filter())
[    11.058][cube-solver-2][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[    11.063][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[    11.151][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter())
[    11.339][cube-solver-1][DEBUG] Solving cube (l0 = filter(), l1 = summarise())
[    11.342][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[    11.565][cube-solver-8][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter())
[    11.573][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4(), l2 = filter())
[    11.576][cube-solver-6][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = mutate())
[    11.578][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[    11.583][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join())
[    11.583][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter())
[    11.584][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join3())
[    11.584][cube-solver-7][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter())
[    11.588][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = natural_join4())
[    11.589][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[    11.592][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = filter())
[    11.604][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate())
[    11.607][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter())
[    11.612][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = left_join())
[    11.613][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = anti_join())
[    11.629][cube-solver-5][DEBUG] Solving cube (l0 = natural_join(), l1 = filter(), l2 = summarise())
[    11.636][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = union())
[    11.722][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter([1]))
[    11.730][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = intersect())
[    11.764][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter([1]), l2 = summarise())
[    11.769][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = filter([1]), l2 = semi_join())
[    11.826][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter([2]))
[    11.835][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = filter([2]), l2 = cross_join())
[    11.955][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = summarise())
[    11.966][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = filter([4]), l2 = mutate())
[    11.991][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[    12.104][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter([4]), l2 = mutate())
[    12.111][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join(), l2 = filter([4]))
[    12.541][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter([5]))
[    12.949][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3(), l2 = filter([5]))
[    12.961][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = left_join(), l2 = filter([5]))
[    13.131][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = union(), l2 = filter([5]))
[    13.632][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = filter([5]), l2 = inner_join())
[    17.234][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = intersect(), l2 = filter([5]))
[    28.284][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join(), l2 = filter([5]))
[    31.895][cube-solver-7][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join(), l2 = filter([5]))
[    40.987][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = mutate(), l2 = filter([5]))
[    41.968][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join(), l2 = filter([5]))
[    57.653][cube-solver-1][DEBUG] Found solution with cube (l0 = summarise(), l1 = left_join(), l2 = filter([5]))
[    57.656][MainProcess][INFO] Statistics:
[    57.657][MainProcess][INFO] 	Generated cubes: 41
[    57.657][MainProcess][INFO] 	Attempted programs: 3079
[    57.657][MainProcess][INFO] 		Rejected: 718
[    57.657][MainProcess][INFO] 		Failed: 2360
[    57.658][MainProcess][INFO] 	Blacklist clauses: 5
[    57.658][MainProcess][DEBUG] Printing statistics for good programs of size 2
[    57.674][MainProcess][DEBUG] 	0: Counter({'mutate': 5445})
[    57.677][MainProcess][DEBUG] 	1: Counter({'filter': 5445})
[    57.677][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    57.695][MainProcess][DEBUG] 	0: Counter({'summarise': 65390})
[    57.712][MainProcess][DEBUG] 	1: Counter({'filter': 40237, 'left_join': 5187, 'natural_join': 5134, 'union': 5065, 'anti_join': 5046, 'cross_join': 2995, 'inner_join': 1727})
[    57.729][MainProcess][DEBUG] 	2: Counter({'filter': 25156, 'union': 5309, 'natural_join': 5275, 'cross_join': 5254, 'left_join': 5204, 'natural_join3': 5200, 'inner_join': 5137, 'semi_join': 4856, 'anti_join': 4004})
[    57.729][MainProcess][INFO] Solution found: filter(left_join(summarise(@param0, n_distinct = n_distinct(action), first_name, last_name), @param0), n_distinct == 2)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/040.csv", col_types = cols(id = col_integer(),timestamp = col_integer(),first_name = col_character(),last_name = col_character(),action = col_character()))
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/040_o.csv", col_types = cols(id = col_integer(),timestamp = col_integer(),first_name = col_character(),last_name = col_character(),action = col_character()))

df2 <- input1 %>% group_by(first_name, last_name) %>% summarise(n_distinct = n_distinct(action)) %>% ungroup()
df3 <- left_join(df2, input1)
df4 <- df3 %>% filter(n_distinct == 2)
out <- df4 %>% select(id, timestamp, first_name, last_name, action) %>% arrange(id)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT id,
       TIMESTAMP,
       first_name,
       last_name,
       action
FROM
  (SELECT LHS.first_name AS first_name,
          LHS.last_name AS last_name,
          LHS.n_distinct AS n_distinct,
          RHS.id AS id,
          RHS.timestamp AS TIMESTAMP,
          RHS.action AS action
   FROM
     (SELECT first_name,
             last_name,
             COUNT(DISTINCT action) AS n_distinct
      FROM input1
      GROUP BY first_name,
               last_name) AS LHS
   LEFT JOIN input1 AS RHS ON (LHS.first_name = RHS.first_name
                               AND LHS.last_name = RHS.last_name))
WHERE (n_distinct = 2.0)
ORDER BY id
