[     3.400][MainProcess][INFO] Parsing specification...
[     3.416][MainProcess][DEBUG] Reading input files...
[     3.438][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_1.csv: ['int64', 'string']
[     3.445][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_2.csv: ['string', 'string']
[     3.449][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/003_o.csv: ['int64', 'string']
[     3.483][MainProcess][DEBUG] Generating DSL...
[     3.500][MainProcess][INFO] Creating 16 processes
[     3.562][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.562][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.562][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.562][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.562][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.562][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.562][MainProcess][DEBUG] Increasing generator loc to 2
[     3.565][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.567][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.570][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     3.574][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     3.578][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.580][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.590][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.594][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.595][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.597][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     3.653][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     3.653][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     3.654][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     3.655][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     3.659][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     3.660][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     3.665][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     3.681][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     3.688][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     3.717][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     3.717][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     3.719][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     3.721][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     3.721][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     3.750][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     3.753][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     3.759][cube-solver-10][DEBUG] Solving cube (l0 = natural_join([2]), l1 = anti_join([2]))
[     3.764][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     3.767][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect())
[     3.769][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join([2]))
[     3.771][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     3.773][cube-solver-14][DEBUG] Solving cube (l0 = natural_join([2]), l1 = semi_join([2]))
[     3.775][cube-solver-15][DEBUG] Solving cube (l0 = natural_join([2]), l1 = cross_join([2]))
[     3.775][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([8]))
[     3.776][cube-solver-11][DEBUG] Solving cube (l0 = natural_join([2]), l1 = left_join([2]))
[     3.779][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join([2]))
[     3.780][cube-solver-15][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     3.781][cube-solver-11][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     3.782][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([4]))
[     3.782][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join([2]))
[     3.783][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     3.783][cube-solver-11][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect())
[     3.785][cube-solver-11][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join([2]))
[     3.785][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     3.786][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([9]))
[     3.787][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join([2]))
[     3.788][cube-solver-11][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     3.789][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     3.790][cube-solver-11][DEBUG] Solving cube (l0 = anti_join([4]), l1 = natural_join([2]))
[     3.791][cube-solver-14][DEBUG] Solving cube (l0 = anti_join([4]), l1 = natural_join3())
[     3.791][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([4]), l1 = natural_join4())
[     3.795][cube-solver-15][DEBUG] Solving cube (l0 = anti_join([5]), l1 = anti_join([5]))
[     3.796][cube-solver-14][DEBUG] Solving cube (l0 = anti_join([5]), l1 = left_join([2]))
[     3.797][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([5]), l1 = union())
[     3.804][cube-solver-15][DEBUG] Solving cube (l0 = anti_join([6]), l1 = intersect())
[     3.855][cube-solver-12][DEBUG] Solving cube (l0 = natural_join([2]), l1 = union())
[     3.860][cube-solver-12][DEBUG] Solving cube (l0 = anti_join([15]), l1 = semi_join([2]))
[     3.905][cube-solver-9][DEBUG] Found solution with cube (l0 = inner_join(),)
[     3.906][MainProcess][INFO] Statistics:
[     3.906][MainProcess][INFO] 	Generated cubes: 48
[     3.906][MainProcess][INFO] 	Attempted programs: 23
[     3.906][MainProcess][INFO] 		Rejected: 0
[     3.906][MainProcess][INFO] 		Failed: 22
[     3.906][MainProcess][INFO] 	Blacklist clauses: 39
[     3.906][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     3.907][MainProcess][DEBUG] 	0: Counter({'union': 23, 'inner_join': 3})
[     3.907][MainProcess][INFO] Solution found: inner_join(@param0, @param1, 'item' = 'f2')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/003_1.csv", col_types = cols(ID = col_integer(),item = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/003_2.csv", col_types = cols(f1 = col_character(),f2 = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/003_o.csv", col_types = cols(ID = col_integer(),item = col_character()))

df3 <- inner_join(input1, input2, by=c('item' = 'f2'), suffix = c('', '.other'))
out <- df3 %>% select(ID, item = f1) %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ID,
       f1 AS item
FROM
  (SELECT LHS.ID AS ID,
          LHS.item AS item,
          RHS.f1 AS f1
   FROM input1 AS LHS
   INNER JOIN input2 AS RHS ON (LHS.item = RHS.f2))
ORDER BY ID
