[     1.862][MainProcess][INFO] Parsing specification...
[     1.866][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     1.866][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.867][MainProcess][DEBUG] Reading input files...
[     1.906][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/045_1.csv: ['int64', 'string']
[     1.912][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/045_2.csv: ['int64', 'int64', 'int64']
[     1.928][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/045_o.csv: ['string', 'float64']
[     1.962][MainProcess][DEBUG] Generating DSL...
[     2.143][MainProcess][INFO] Creating 16 processes
[     2.222][MainProcess][DEBUG] Increasing generator loc to 2
[     2.345][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     2.348][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     2.353][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.357][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     2.363][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     2.369][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     2.377][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     2.389][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     2.390][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     2.394][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     2.398][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     2.409][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     2.414][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     2.417][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     2.426][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     2.461][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     5.591][cube-solver-1][WARNING] There is no solution for current loc (1).
[     5.593][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     5.604][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     5.643][cube-solver-0][WARNING] There is no solution for current loc (1).
[     5.645][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     5.656][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     8.896][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     8.923][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     8.939][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     8.958][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     8.963][cube-solver-12][DEBUG] Solving cube (l0 = summarise([1]), l1 = filter())
[     8.963][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     8.967][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise([1]))
[     8.973][cube-solver-11][DEBUG] Solving cube (l0 = summarise([1]), l1 = summarise([1]))
[     8.984][cube-solver-13][DEBUG] Solving cube (l0 = summarise([2]), l1 = anti_join())
[     8.987][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     8.988][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise([3]))
[     9.010][cube-solver-11][DEBUG] Solving cube (l0 = summarise([3]), l1 = mutate())
[     9.010][cube-solver-4][DEBUG] Solving cube (l0 = summarise([3]), l1 = inner_join())
[     9.015][cube-solver-10][DEBUG] Solving cube (l0 = summarise([7]), l1 = natural_join4())
[     9.020][cube-solver-12][DEBUG] Solving cube (l0 = filter(), l1 = summarise([4]))
[     9.027][cube-solver-9][DEBUG] Solving cube (l0 = summarise([7]), l1 = natural_join3())
[     9.034][cube-solver-11][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise([7]))
[     9.037][cube-solver-12][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     9.037][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = mutate())
[     9.059][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = summarise([8]))
[     9.066][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     9.078][cube-solver-15][DEBUG] Solving cube (l0 = summarise([9]), l1 = union())
[     9.214][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise([10]))
[     9.259][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = summarise([10]))
[     9.285][cube-solver-7][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise([8]))
[     9.286][MainProcess][INFO] Statistics:
[     9.287][MainProcess][INFO] 	Generated cubes: 28
[     9.287][MainProcess][INFO] 	Attempted programs: 2
[     9.287][MainProcess][INFO] 		Rejected: 1
[     9.287][MainProcess][INFO] 		Failed: 0
[     9.287][MainProcess][INFO] 	Blacklist clauses: 22
[     9.287][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     9.288][MainProcess][DEBUG] 	0: Counter({'summarise': 96, 'natural_join': 46, 'left_join': 39, 'anti_join': 21})
[     9.288][MainProcess][DEBUG] 	1: Counter({'mutate': 66, 'summarise': 40, 'left_join': 28, 'natural_join3': 23, 'inner_join': 21, 'natural_join': 12, 'union': 12})
[     9.288][MainProcess][INFO] Solution found: summarise(left_join(@param0, @param1), sumQuantity = sum(Quantity), Menu_id, Name)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/045_1.csv", col_types = cols(Menu_id = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/045_2.csv", col_types = cols(ID = col_integer(),Quantity = col_integer(),Menu_id = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/045_o.csv", col_types = cols(MenuName = col_character(),Quantity = col_double()))

df3 <- left_join(input1, input2)
df4 <- df3 %>% group_by(Menu_id, Name) %>% summarise(sumQuantity = sum(Quantity)) %>% ungroup()
out <- df4 %>% select(MenuName = Name, Quantity = sumQuantity) %>% arrange(MenuName)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT Name AS MenuName,
       sumQuantity AS Quantity
FROM
  (SELECT Menu_id,
          Name,
          SUM(Quantity) AS sumQuantity
   FROM
     (SELECT LHS.Menu_id AS Menu_id,
             LHS.Name AS Name,
             RHS.ID AS ID,
             RHS.Quantity AS Quantity
      FROM input1 AS LHS
      LEFT JOIN input2 AS RHS ON (LHS.Menu_id = RHS.Menu_id))
   GROUP BY Menu_id,
            Name)
ORDER BY MenuName
