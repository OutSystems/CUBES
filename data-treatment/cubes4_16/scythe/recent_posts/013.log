[     3.593][MainProcess][INFO] Parsing specification...
[     3.617][MainProcess][DEBUG] Reading input files...
[     3.642][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_1.csv: ['int64', 'string']
[     3.649][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_2.csv: ['int64', 'string']
[     3.657][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/013_o.csv: ['int64', 'string', 'string', 'int64']
[     3.701][MainProcess][DEBUG] Generating DSL...
[     3.771][MainProcess][INFO] Creating 16 processes
[     3.853][MainProcess][DEBUG] Increasing generator loc to 2
[     3.862][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     3.863][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     3.868][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     3.872][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     3.876][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     3.880][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     3.884][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     3.892][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     3.896][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     3.901][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     3.905][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     3.909][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     3.912][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     3.917][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     3.923][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     3.962][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     4.665][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     4.666][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     4.668][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     4.675][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     4.676][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     4.677][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     4.684][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     4.686][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     4.695][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     4.700][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     4.710][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     4.714][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     4.717][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     4.740][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     4.745][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     4.772][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     4.825][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     4.969][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     5.084][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     5.447][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     5.447][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]))
[     5.467][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect([4]))
[     5.469][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([6]))
[     5.470][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     5.487][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([23]))
[     5.494][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     5.511][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     5.519][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     5.526][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     5.534][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([10]))
[     5.534][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([10]))
[     5.548][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     5.555][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     5.561][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect([4]))
[     5.571][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     5.582][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([13]))
[     5.610][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([23]))
[     5.634][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     5.641][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     5.648][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     5.655][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join())
[     5.671][cube-solver-14][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join3())
[     5.675][cube-solver-12][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join4())
[     5.686][cube-solver-14][DEBUG] Solving cube (l0 = anti_join([10]), l1 = anti_join([10]))
[     5.699][cube-solver-12][DEBUG] Solving cube (l0 = anti_join([10]), l1 = left_join())
[     5.707][cube-solver-14][DEBUG] Solving cube (l0 = anti_join([10]), l1 = union())
[     5.730][cube-solver-11][DEBUG] Solving cube (l0 = anti_join([10]), l1 = intersect([4]))
[     5.859][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([10]), l1 = semi_join())
[     5.995][cube-solver-12][DEBUG] Solving cube (l0 = anti_join([10]), l1 = cross_join([13]))
[     6.032][cube-solver-14][DEBUG] Solving cube (l0 = anti_join([10]), l1 = inner_join([23]))
[     6.112][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join())
[     6.262][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join3())
[     6.301][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join())
[     6.364][cube-solver-13][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join4())
[     6.373][cube-solver-13][DEBUG] Solving cube (l0 = left_join(), l1 = anti_join([10]))
[     6.410][cube-solver-3][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     6.427][cube-solver-3][DEBUG] Solving cube (l0 = left_join(), l1 = left_join())
[     6.438][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = union())
[     6.485][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([10]))
[     6.497][cube-solver-5][DEBUG] Solving cube (l0 = left_join(), l1 = intersect([4]))
[     6.518][cube-solver-4][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     6.526][cube-solver-4][DEBUG] Solving cube (l0 = left_join(), l1 = semi_join())
[     6.574][cube-solver-7][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     6.582][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join([23]))
[     6.596][cube-solver-6][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect([4]))
[     6.600][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = inner_join([23]))
[     6.601][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = cross_join([21]))
[     6.608][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = natural_join())
[     6.632][cube-solver-1][DEBUG] Solving cube (l0 = union(), l1 = natural_join3())
[     6.674][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = natural_join4())
[     6.688][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = anti_join([10]))
[     6.756][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = left_join())
[     6.800][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = union())
[     6.804][cube-solver-9][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     6.806][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3())
[     6.821][cube-solver-0][DEBUG] Solving cube (l0 = union(), l1 = intersect([4]))
[     6.823][cube-solver-9][DEBUG] Solving cube (l0 = union(), l1 = semi_join())
[     6.937][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = cross_join([21]))
[     6.967][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = inner_join([23]))
[     6.982][cube-solver-1][DEBUG] Solving cube (l0 = intersect([4]), l1 = natural_join())
[     7.037][cube-solver-9][DEBUG] Solving cube (l0 = intersect([4]), l1 = natural_join3())
[     7.174][cube-solver-11][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join4())
[     7.188][cube-solver-11][DEBUG] Solving cube (l0 = intersect([6]), l1 = anti_join([10]))
[     7.428][cube-solver-13][DEBUG] Solving cube (l0 = intersect([6]), l1 = left_join())
[     7.432][cube-solver-1][DEBUG] Solving cube (l0 = intersect([6]), l1 = union())
[     7.498][cube-solver-5][DEBUG] Solving cube (l0 = intersect([6]), l1 = intersect([6]))
[     7.663][cube-solver-3][DEBUG] Solving cube (l0 = intersect([6]), l1 = semi_join())
[     7.768][cube-solver-0][DEBUG] Solving cube (l0 = intersect([6]), l1 = inner_join([23]))
[     7.774][cube-solver-13][DEBUG] Solving cube (l0 = intersect([6]), l1 = cross_join([28]))
[     7.818][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join())
[     7.976][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join3())
[     7.991][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join4())
[     7.996][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = anti_join([10]))
[     8.054][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = left_join())
[     8.250][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = union())
[     8.321][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = intersect([6]))
[     8.422][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = semi_join())
[     8.624][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = cross_join([32]))
[     8.838][cube-solver-5][DEBUG] Solving cube (l0 = semi_join(), l1 = inner_join([23]))
[     9.030][cube-solver-3][DEBUG] Solving cube (l0 = cross_join([38]), l1 = natural_join())
[     9.157][cube-solver-11][DEBUG] Solving cube (l0 = cross_join([39]), l1 = natural_join3())
[     9.215][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([42]), l1 = natural_join4())
[     9.349][cube-solver-1][DEBUG] Solving cube (l0 = cross_join([57]), l1 = anti_join([10]))
[     9.800][cube-solver-14][DEBUG] Solving cube (l0 = cross_join([85]), l1 = left_join())
[    11.944][cube-solver-5][DEBUG] Solving cube (l0 = cross_join([222]), l1 = union())
[    12.968][cube-solver-0][DEBUG] Solving cube (l0 = cross_join([256]), l1 = intersect([6]))
[    55.598][cube-solver-2][DEBUG] Solving cube (l0 = cross_join([583]), l1 = semi_join())
[    56.370][cube-solver-10][DEBUG] Solving cube (l0 = cross_join([830]), l1 = cross_join([830]))
[    56.955][cube-solver-4][DEBUG] Solving cube (l0 = cross_join([892]), l1 = inner_join([23]))
[   170.284][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[   173.217][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([23]), l1 = natural_join())
[   181.286][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([23]), l1 = natural_join3())
[   202.556][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([23]), l1 = natural_join4())
[   202.706][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([23]), l1 = anti_join([10]))
[   209.672][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([23]), l1 = left_join())
[   218.836][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([23]), l1 = union())
[   227.190][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([44]), l1 = intersect([6]))
[   230.320][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([46]), l1 = semi_join())
[   233.644][cube-solver-8][DEBUG] Solving cube (l0 = inner_join([46]), l1 = cross_join([3330]))
[   457.122][cube-solver-13][DEBUG] Solving cube (l0 = inner_join([46]), l1 = inner_join([46]))
[   486.023][cube-solver-7][DEBUG] Found solution with cube (l0 = left_join(), l1 = cross_join([21]))
[   486.138][MainProcess][INFO] Statistics:
[   486.139][MainProcess][INFO] 	Generated cubes: 110
[   486.139][MainProcess][INFO] 	Attempted programs: 28365
[   486.139][MainProcess][INFO] 		Rejected: 3283
[   486.139][MainProcess][INFO] 		Failed: 25081
[   486.139][MainProcess][INFO] 	Blacklist clauses: 3461
[   486.139][MainProcess][DEBUG] Printing statistics for good programs of size 1
[   486.149][MainProcess][DEBUG] 	0: Counter({'cross_join': 17280})
[   486.149][MainProcess][DEBUG] Printing statistics for good programs of size 2
[   486.360][MainProcess][DEBUG] 	0: Counter({'cross_join': 382420, 'natural_join': 64778, 'union': 64742, 'left_join': 64129, 'anti_join': 52270, 'semi_join': 46836, 'inner_join': 36144})
[   486.536][MainProcess][DEBUG] 	1: Counter({'cross_join': 356479, 'inner_join': 69905, 'natural_join3': 58128, 'left_join': 56444, 'union': 56197, 'natural_join': 54777, 'semi_join': 39055, 'anti_join': 20352})
[   486.537][MainProcess][INFO] Solution found: cross_join(left_join(@param0, @param1), @param0, Company_group != Name & Company_group == Name.other)

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/013_1.csv", col_types = cols(ID = col_integer(),Name = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/013_2.csv", col_types = cols(ID = col_integer(),Company_group = col_character()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/013_o.csv", col_types = cols(ID = col_integer(),Name = col_character(),RootName = col_character(),RootId = col_integer()))

df3 <- left_join(input1, input2)
df4 <- full_join(df3 %>% mutate(tmp.col=1), input1 %>% mutate(tmp.col=1), by="tmp.col", suffix = c("", ".other")) %>% select(-tmp.col) %>% filter(Company_group != Name & Company_group == Name.other)
out <- df4 %>% select(ID, Name, RootName = Company_group, RootId = ID.other) %>% arrange(ID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT ID,
       Name,
       Company_group AS RootName,
       ID.other AS RootId
FROM
  (SELECT ID,
          Name,
          Company_group,
          ID.other,
          Name.other
   FROM
     (SELECT LHS.ID AS ID,
             LHS.Name AS Name,
             LHS.Company_group AS Company_group,
             COALESCE(LHS.tmp.col, RHS.tmp.col) AS tmp.col,
             RHS.ID AS ID.other,
             RHS.Name AS Name.other
      FROM
        (SELECT ID,
                Name,
                Company_group,
                1.0 AS tmp.col
         FROM
           (SELECT LHS.ID AS ID,
                   LHS.Name AS Name,
                   RHS.Company_group AS Company_group
            FROM input1 AS LHS
            LEFT JOIN input2 AS RHS ON (LHS.ID = RHS.ID))) AS LHS
      FULL JOIN
        (SELECT ID,
                Name,
                1.0 AS tmp.col
         FROM input1) AS RHS ON (LHS.tmp.col = RHS.tmp.col)))
WHERE (Company_group != Name
       AND Company_group = Name.other)
ORDER BY ID
