[     1.577][MainProcess][INFO] Parsing specification...
[     1.580][MainProcess][DEBUG] Reading input files...
[     1.588][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/044_1.csv: ['int64', 'string']
[     1.593][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/044_2.csv: ['string', 'int64']
[     1.598][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/044_o.csv: ['int64', 'string']
[     1.628][MainProcess][DEBUG] Generating DSL...
[     1.640][MainProcess][INFO] Creating 16 processes
[     1.707][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.707][cube-solver-2][DEBUG] Initialising process for 1 lines of code.
[     1.707][cube-solver-5][DEBUG] Initialising process for 1 lines of code.
[     1.707][cube-solver-4][DEBUG] Initialising process for 1 lines of code.
[     1.707][cube-solver-6][DEBUG] Initialising process for 1 lines of code.
[     1.707][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.707][MainProcess][DEBUG] Increasing generator loc to 2
[     1.707][cube-solver-7][DEBUG] Initialising process for 1 lines of code.
[     1.707][cube-solver-8][DEBUG] Initialising process for 1 lines of code.
[     1.707][cube-solver-3][DEBUG] Initialising process for 1 lines of code.
[     1.712][cube-solver-9][DEBUG] Initialising process for 1 lines of code.
[     1.715][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.726][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.727][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.732][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     1.742][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.761][cube-solver-8][DEBUG] Solving cube (l0 = cross_join(),)
[     1.767][cube-solver-0][DEBUG] Solving cube (l0 = natural_join(),)
[     1.772][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.798][cube-solver-9][DEBUG] Solving cube (l0 = inner_join(),)
[     1.799][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(),)
[     1.800][cube-solver-3][DEBUG] Solving cube (l0 = anti_join(),)
[     1.801][cube-solver-1][DEBUG] Solving cube (l0 = natural_join3(),)
[     1.803][cube-solver-1][DEBUG] Initialising process for 2 lines of code.
[     1.806][cube-solver-5][DEBUG] Solving cube (l0 = union(),)
[     1.806][cube-solver-2][DEBUG] Solving cube (l0 = natural_join4(),)
[     1.808][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.813][cube-solver-6][DEBUG] Solving cube (l0 = intersect(),)
[     1.813][cube-solver-4][DEBUG] Solving cube (l0 = left_join(),)
[     1.818][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join())
[     1.821][cube-solver-10][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join4())
[     1.824][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = anti_join([1]))
[     1.827][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = left_join())
[     1.828][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = intersect())
[     1.829][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = union())
[     1.831][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = intersect())
[     1.833][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = semi_join())
[     1.836][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = cross_join([2]))
[     1.840][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = inner_join([2]))
[     1.843][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join())
[     1.844][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join3())
[     1.844][cube-solver-10][DEBUG] Solving cube (l0 = natural_join3(), l1 = natural_join4())
[     1.846][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = anti_join([2]))
[     1.848][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = left_join())
[     1.849][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = union())
[     1.850][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = intersect())
[     1.851][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = semi_join())
[     1.852][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = cross_join([2]))
[     1.853][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = inner_join([3]))
[     1.855][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join())
[     1.856][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join3())
[     1.858][cube-solver-10][DEBUG] Solving cube (l0 = natural_join4(), l1 = natural_join4())
[     1.859][cube-solver-10][DEBUG] Solving cube (l0 = anti_join([2]), l1 = natural_join())
[     1.940][cube-solver-8][DEBUG] Solving cube (l0 = natural_join(), l1 = inner_join([4]))
[     1.941][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = left_join())
[     1.941][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.943][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = semi_join())
[     1.945][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = union())
[     1.956][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = cross_join([2]))
[     1.987][cube-solver-1][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join())
[     2.001][cube-solver-0][DEBUG] Initialising process for 2 lines of code.
[     2.028][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = natural_join3())
[     2.031][cube-solver-2][DEBUG] Solving cube (l0 = anti_join([6]), l1 = anti_join([6]))
[     2.043][cube-solver-2][DEBUG] Solving cube (l0 = anti_join([6]), l1 = left_join())
[     2.054][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     2.081][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     2.101][cube-solver-7][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join3())
[     2.109][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     2.112][cube-solver-7][DEBUG] Solving cube (l0 = anti_join([10]), l1 = cross_join([2]))
[     2.112][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     2.126][cube-solver-15][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join())
[     2.154][cube-solver-0][DEBUG] Solving cube (l0 = anti_join([10]), l1 = natural_join4())
[     2.166][cube-solver-0][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join3())
[     2.233][cube-solver-4][DEBUG] Solving cube (l0 = anti_join([10]), l1 = intersect([6]))
[     2.263][cube-solver-6][DEBUG] Solving cube (l0 = anti_join([10]), l1 = union())
[     2.280][cube-solver-3][DEBUG] Solving cube (l0 = anti_join([10]), l1 = semi_join())
[     2.340][cube-solver-5][DEBUG] Solving cube (l0 = anti_join([10]), l1 = inner_join([15]))
[     2.387][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = natural_join4())
[     2.393][cube-solver-7][DEBUG] Solving cube (l0 = left_join(), l1 = anti_join([10]))
[     2.508][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     2.531][cube-solver-13][DEBUG] Solving cube (l0 = left_join(), l1 = union())
[     2.716][cube-solver-9][DEBUG] Solving cube (l0 = left_join(), l1 = left_join())
[     3.078][cube-solver-14][DEBUG] Solving cube (l0 = left_join(), l1 = intersect([6]))
[     3.150][cube-solver-1][DEBUG] Solving cube (l0 = left_join(), l1 = semi_join())
[     3.241][cube-solver-15][DEBUG] Solving cube (l0 = left_join(), l1 = cross_join([2]))
[     3.306][cube-solver-12][DEBUG] Solving cube (l0 = left_join(), l1 = inner_join([23]))
[     3.314][cube-solver-11][DEBUG] Solving cube (l0 = union(), l1 = natural_join())
[     3.379][cube-solver-4][DEBUG] Solving cube (l0 = union(), l1 = natural_join3())
[     3.455][cube-solver-15][DEBUG] Solving cube (l0 = union(), l1 = natural_join4())
[     3.459][cube-solver-15][DEBUG] Solving cube (l0 = union(), l1 = anti_join([10]))
[     3.596][cube-solver-3][DEBUG] Solving cube (l0 = union(), l1 = left_join())
[     3.605][cube-solver-10][DEBUG] Solving cube (l0 = union(), l1 = union())
[     4.025][cube-solver-6][DEBUG] Solving cube (l0 = union(), l1 = intersect([6]))
[     4.116][cube-solver-14][DEBUG] Solving cube (l0 = union(), l1 = semi_join())
[     4.237][cube-solver-13][DEBUG] Solving cube (l0 = union(), l1 = cross_join([2]))
[     4.250][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = inner_join([23]))
[     4.317][cube-solver-1][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join())
[     4.342][cube-solver-13][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join3())
[     4.436][cube-solver-9][DEBUG] Solving cube (l0 = intersect([6]), l1 = natural_join4())
[     4.442][cube-solver-9][DEBUG] Solving cube (l0 = intersect([6]), l1 = anti_join([10]))
[     4.556][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = left_join())
[     4.727][cube-solver-1][DEBUG] Solving cube (l0 = intersect([8]), l1 = union())
[     4.823][cube-solver-0][DEBUG] Solving cube (l0 = intersect([8]), l1 = intersect([8]))
[     4.879][cube-solver-6][DEBUG] Solving cube (l0 = intersect([8]), l1 = semi_join())
[     4.984][cube-solver-11][DEBUG] Solving cube (l0 = intersect([8]), l1 = cross_join([2]))
[     5.061][cube-solver-14][DEBUG] Solving cube (l0 = intersect([8]), l1 = inner_join([23]))
[     5.061][cube-solver-6][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join())
[     5.117][cube-solver-11][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join3())
[     5.240][cube-solver-10][DEBUG] Solving cube (l0 = semi_join(), l1 = natural_join4())
[     5.244][cube-solver-10][DEBUG] Solving cube (l0 = semi_join(), l1 = anti_join([10]))
[     5.344][cube-solver-1][DEBUG] Solving cube (l0 = semi_join(), l1 = left_join())
[     5.370][cube-solver-3][DEBUG] Solving cube (l0 = semi_join(), l1 = union())
[     5.416][cube-solver-0][DEBUG] Solving cube (l0 = semi_join(), l1 = intersect([8]))
[     5.889][cube-solver-4][DEBUG] Solving cube (l0 = semi_join(), l1 = semi_join())
[     5.921][cube-solver-7][DEBUG] Solving cube (l0 = semi_join(), l1 = cross_join([2]))
[     5.964][cube-solver-9][DEBUG] Solving cube (l0 = semi_join(), l1 = inner_join([23]))
[     5.972][cube-solver-6][DEBUG] Solving cube (l0 = cross_join([2]), l1 = natural_join())
[     5.999][cube-solver-6][DEBUG] Solving cube (l0 = cross_join([4]), l1 = natural_join3())
[     6.002][cube-solver-6][DEBUG] Solving cube (l0 = cross_join([4]), l1 = natural_join4())
[     6.006][cube-solver-6][DEBUG] Solving cube (l0 = cross_join([4]), l1 = anti_join([10]))
[     6.013][cube-solver-6][DEBUG] Solving cube (l0 = cross_join([4]), l1 = left_join())
[     6.016][cube-solver-6][DEBUG] Solving cube (l0 = cross_join([4]), l1 = union())
[     6.019][cube-solver-6][DEBUG] Solving cube (l0 = cross_join([4]), l1 = intersect([8]))
[     6.026][cube-solver-6][DEBUG] Solving cube (l0 = cross_join([4]), l1 = semi_join())
[     6.029][cube-solver-6][DEBUG] Solving cube (l0 = cross_join([4]), l1 = cross_join([4]))
[     6.034][cube-solver-6][DEBUG] Solving cube (l0 = cross_join([4]), l1 = inner_join([23]))
[     6.047][cube-solver-6][DEBUG] Solving cube (l0 = inner_join([23]), l1 = natural_join())
[     6.049][cube-solver-7][DEBUG] Solving cube (l0 = inner_join([23]), l1 = natural_join3())
[     6.219][cube-solver-0][DEBUG] Solving cube (l0 = inner_join([25]), l1 = natural_join4())
[     6.232][cube-solver-0][DEBUG] Solving cube (l0 = inner_join([25]), l1 = anti_join([10]))
[     6.403][cube-solver-3][DEBUG] Solving cube (l0 = inner_join([27]), l1 = left_join())
[     6.442][cube-solver-1][DEBUG] Solving cube (l0 = inner_join([34]), l1 = union())
[     6.515][cube-solver-4][DEBUG] Solving cube (l0 = inner_join([35]), l1 = intersect([8]))
[     6.584][cube-solver-13][DEBUG] Solving cube (l0 = inner_join([39]), l1 = semi_join())
[     6.663][cube-solver-15][DEBUG] Solving cube (l0 = inner_join([40]), l1 = cross_join([4]))
[     7.160][cube-solver-10][DEBUG] Solving cube (l0 = inner_join([46]), l1 = inner_join([46]))
[     7.274][MainProcess][DEBUG] Increasing generator loc to 3
[     7.275][cube-solver-14][DEBUG] Initialising process for 3 lines of code.
[     7.318][cube-solver-15][DEBUG] Initialising process for 3 lines of code.
[     7.487][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]), l2 = natural_join())
[     7.557][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]), l2 = natural_join3())
[     7.567][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]), l2 = natural_join4())
[     7.577][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]), l2 = anti_join([10]))
[     7.594][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]), l2 = left_join())
[     7.650][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     7.864][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]), l2 = union())
[     9.119][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]), l2 = intersect([8]))
[     9.292][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]), l2 = semi_join())
[     9.588][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]), l2 = cross_join([4]))
[     9.796][cube-solver-11][DEBUG] Solving cube (l0 = natural_join(), l1 = anti_join([10]), l2 = inner_join([46]))
[     9.859][cube-solver-13][DEBUG] Initialising process for 3 lines of code.
[     9.861][cube-solver-0][DEBUG] Found solution with cube (l0 = inner_join([25]), l1 = anti_join([10]))
[     9.862][MainProcess][INFO] Statistics:
[     9.862][MainProcess][INFO] 	Generated cubes: 121
[     9.862][MainProcess][INFO] 	Attempted programs: 1719
[     9.862][MainProcess][INFO] 		Rejected: 704
[     9.862][MainProcess][INFO] 		Failed: 1014
[     9.863][MainProcess][INFO] 	Blacklist clauses: 68
[     9.863][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     9.863][MainProcess][DEBUG] 	0: Counter({'inner_join': 68, 'natural_join': 24, 'union': 24, 'left_join': 24, 'anti_join': 16, 'semi_join': 8})
[     9.863][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     9.869][MainProcess][DEBUG] 	0: Counter({'inner_join': 2532, 'left_join': 1902, 'union': 1863, 'natural_join': 1328, 'semi_join': 1136, 'anti_join': 1092, 'intersect': 400})
[     9.874][MainProcess][DEBUG] 	1: Counter({'inner_join': 3546, 'natural_join3': 1547, 'union': 1199, 'left_join': 1147, 'natural_join': 1098, 'anti_join': 921, 'semi_join': 796})
[     9.874][MainProcess][DEBUG] Printing statistics for good programs of size 3
[     9.874][MainProcess][DEBUG] 	0: Counter({'natural_join': 621})
[     9.875][MainProcess][DEBUG] 	1: Counter({'anti_join': 621})
[     9.875][MainProcess][DEBUG] 	2: Counter({'natural_join': 192, 'left_join': 192, 'union': 192, 'semi_join': 41, 'inner_join': 4})
[     9.875][MainProcess][INFO] Solution found: anti_join(@param0, inner_join(@param0, @param1, 'OriginalID' = 'OriginalID','Area' = 'Part'), 'Area', 'OriginalID')

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/044_1.csv", col_types = cols(OriginalID = col_integer(),Area = col_character()))
input1 <- copy_to(con, input1)
input2 <- read_csv("tests-examples/scythe/recent_posts/tables/044_2.csv", col_types = cols(Part = col_character(),OriginalID = col_integer()))
input2 <- copy_to(con, input2)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/044_o.csv", col_types = cols(OriginalID = col_integer(),Area = col_character()))

df3 <- inner_join(input1, input2, by=c('OriginalID' = 'OriginalID','Area' = 'Part'), suffix = c('', '.other'))
df4 <- anti_join(input1, df3, by=c('Area', 'OriginalID'))
out <- df4 %>% select(OriginalID, Area) %>% arrange(OriginalID)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT OriginalID,
       Area
FROM
  (SELECT *
   FROM input1 AS LHS
   WHERE NOT EXISTS
       (SELECT 1
        FROM
          (SELECT LHS.OriginalID AS OriginalID,
                  LHS.Area AS Area
           FROM input1 AS LHS
           INNER JOIN input2 AS RHS ON (LHS.OriginalID = RHS.OriginalID
                                        AND LHS.Area = RHS.Part)) AS RHS
        WHERE (LHS.Area = RHS.Area
               AND LHS.OriginalID = RHS.OriginalID) ))
ORDER BY OriginalID
