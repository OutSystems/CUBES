[     3.586][MainProcess][INFO] Parsing specification...
[     3.606][MainProcess][WARNING] "attrs" field is deprecated. Please use "columns"
[     3.606][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     3.606][MainProcess][WARNING] "const" field is deprecated. Please use "constants"
[     3.608][MainProcess][DEBUG] Reading input files...
[     3.632][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/016_2.csv: ['string', 'datetime64[ns]']
[     3.640][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/016_o.csv: ['string', 'datetime64[ns]', 'int64']
[     3.693][MainProcess][DEBUG] Generating DSL...
[     4.043][MainProcess][INFO] Creating 16 processes
[     4.129][MainProcess][DEBUG] Increasing generator loc to 4
[     4.408][cube-solver-2][DEBUG] Initialising process for 3 lines of code.
[     4.427][cube-solver-5][DEBUG] Initialising process for 3 lines of code.
[     4.438][cube-solver-1][DEBUG] Initialising process for 3 lines of code.
[     4.438][cube-solver-4][DEBUG] Initialising process for 3 lines of code.
[     4.447][cube-solver-10][DEBUG] Initialising process for 3 lines of code.
[     4.451][cube-solver-7][DEBUG] Initialising process for 3 lines of code.
[     4.452][cube-solver-8][DEBUG] Initialising process for 3 lines of code.
[     4.455][cube-solver-9][DEBUG] Initialising process for 3 lines of code.
[     4.456][cube-solver-13][DEBUG] Initialising process for 4 lines of code.
[     4.456][cube-solver-12][DEBUG] Initialising process for 4 lines of code.
[     4.457][cube-solver-3][DEBUG] Initialising process for 3 lines of code.
[     4.461][cube-solver-6][DEBUG] Initialising process for 3 lines of code.
[     4.463][cube-solver-11][DEBUG] Initialising process for 3 lines of code.
[     4.464][cube-solver-14][DEBUG] Initialising process for 4 lines of code.
[     4.521][cube-solver-0][DEBUG] Initialising process for 3 lines of code.
[     4.563][cube-solver-15][DEBUG] Initialising process for 4 lines of code.
[    22.252][cube-solver-2][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = mutate())
[    22.304][cube-solver-9][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = summarise())
[    22.348][cube-solver-8][DEBUG] Solving cube (l0 = mutate(), l1 = summarise(), l2 = filter())
[    22.348][cube-solver-5][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = mutate())
[    22.385][cube-solver-0][DEBUG] Solving cube (l0 = summarise(), l1 = summarise(), l2 = filter())
[    22.386][cube-solver-4][DEBUG] Solving cube (l0 = filter(), l1 = summarise(), l2 = summarise())
[    22.387][cube-solver-10][DEBUG] Solving cube (l0 = mutate(), l1 = filter(), l2 = mutate())
[    22.387][cube-solver-3][DEBUG] Solving cube (l0 = summarise(), l1 = mutate(), l2 = filter())
[    22.396][cube-solver-6][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = summarise())
[    22.398][cube-solver-11][DEBUG] Solving cube (l0 = mutate(), l1 = mutate(), l2 = filter())
[    22.421][cube-solver-5][DEBUG] Initialising process for 4 lines of code.
[    22.470][cube-solver-4][DEBUG] Initialising process for 4 lines of code.
[    22.476][cube-solver-1][DEBUG] Solving cube (l0 = summarise(), l1 = filter(), l2 = summarise())
[    22.480][cube-solver-0][DEBUG] Initialising process for 4 lines of code.
[    22.531][cube-solver-6][DEBUG] Initialising process for 4 lines of code.
[    22.562][cube-solver-7][DEBUG] Solving cube (l0 = filter(), l1 = mutate(), l2 = mutate())
[    22.624][cube-solver-7][DEBUG] Initialising process for 4 lines of code.
[    30.085][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = summarise(), l3 = filter())
[    30.108][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter(), l3 = summarise())
[    30.187][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter(), l3 = summarise())
[    30.225][cube-solver-13][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = mutate(), l3 = filter())
[    30.232][cube-solver-12][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate(), l2 = filter(), l3 = mutate())
[    30.255][cube-solver-14][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = filter(), l3 = mutate())
[    30.263][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = summarise(), l3 = filter())
[    30.293][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter(), l3 = summarise())
[    30.302][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = filter(), l3 = mutate())
[    30.340][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise(), l3 = summarise())
[    30.356][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise(), l2 = mutate(), l3 = filter())
[    30.377][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate(), l3 = summarise())
[    30.402][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = summarise(), l3 = mutate())
[    30.417][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = summarise(), l3 = filter())
[    30.418][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = filter(), l2 = mutate(), l3 = mutate())
[    30.455][cube-solver-13][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter(), l3 = mutate())
[    30.466][cube-solver-14][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = filter(), l3 = summarise())
[    30.472][cube-solver-12][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate(), l2 = mutate(), l3 = filter())
[    30.494][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = summarise(), l3 = filter())
[    30.512][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter(), l3 = mutate())
[    30.530][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = filter(), l3 = summarise())
[    30.534][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise(), l2 = mutate(), l3 = filter())
[    30.534][cube-solver-15][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise(), l2 = mutate(), l3 = filter())
[    30.551][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise(), l3 = summarise())
[    30.573][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate(), l3 = summarise())
[    30.593][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = mutate(), l3 = mutate())
[    30.598][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = filter(), l2 = summarise(), l3 = mutate())
[    30.613][cube-solver-13][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = summarise(), l3 = filter())
[    30.633][cube-solver-12][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter(), l3 = mutate())
[    30.639][cube-solver-15][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = filter(), l3 = summarise())
[    30.654][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = summarise(), l3 = filter())
[    30.675][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter(), l3 = summarise())
[    30.675][cube-solver-14][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate(), l2 = mutate(), l3 = filter())
[    30.680][cube-solver-15][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = filter(), l3 = mutate())
[    30.716][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join(), l2 = mutate(), l3 = filter())
[    30.945][cube-solver-9][DEBUG] Initialising process for 4 lines of code.
[    38.042][cube-solver-1][DEBUG] Initialising process for 4 lines of code.
[    40.241][cube-solver-8][DEBUG] Initialising process for 4 lines of code.
[    41.109][cube-solver-15][DEBUG] Found solution with cube (l0 = summarise(), l1 = natural_join(), l2 = filter(), l3 = mutate())
[    41.111][MainProcess][INFO] Statistics:
[    41.111][MainProcess][INFO] 	Generated cubes: 55
[    41.111][MainProcess][INFO] 	Attempted programs: 1229
[    41.112][MainProcess][INFO] 		Rejected: 478
[    41.112][MainProcess][INFO] 		Failed: 750
[    41.112][MainProcess][INFO] 	Blacklist clauses: 0
[    41.112][MainProcess][DEBUG] Printing statistics for good programs of size 3
[    41.117][MainProcess][DEBUG] 	0: Counter({'mutate': 5997, 'summarise': 4932})
[    41.121][MainProcess][DEBUG] 	1: Counter({'filter': 5691, 'mutate': 4640, 'summarise': 600})
[    41.126][MainProcess][DEBUG] 	2: Counter({'filter': 5240, 'mutate': 4492, 'summarise': 1200})
[    41.127][MainProcess][DEBUG] Printing statistics for good programs of size 4
[    41.129][MainProcess][DEBUG] 	0: Counter({'summarise': 3465})
[    41.131][MainProcess][DEBUG] 	1: Counter({'natural_join': 3466})
[    41.132][MainProcess][DEBUG] 	2: Counter({'filter': 2160, 'mutate': 1294, 'summarise': 12})
[    41.134][MainProcess][DEBUG] 	3: Counter({'mutate': 1356, 'filter': 1306, 'summarise': 804})
[    41.134][MainProcess][INFO] Solution found: mutate(filter(natural_join(@param0, summarise(@param0, n = n(), CustomerId)), n < 1 | ReportDt > mdy('10/19/2016')), maxReportDt = max(ReportDt))

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/016_2.csv", col_types = cols(CustomerId = col_character(),ReportDt = col_character()))
input1$ReportDt <- mdy(input1$ReportDt)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/016_o.csv", col_types = cols(c1 = col_character(),c2 = col_character(),c3 = col_integer()))
expected_output$c2 <- mdy(expected_output$c2)

df2 <- input1 %>% group_by(CustomerId) %>% summarise(n = n()) %>% ungroup()
df3 <- inner_join(input1, df2)
df4 <- df3 %>% filter(n < 1 | ReportDt > mdy('10/19/2016'))
df5 <- df4 %>% mutate(maxReportDt = max(ReportDt))
out <- df5 %>% select(c1 = CustomerId, c2 = maxReportDt, c3 = n) %>% distinct() %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT DISTINCT `CustomerId` AS `c1`,
                MAX(`ReportDt`) OVER () AS `c2`,
                                     `n` AS `c3`
FROM
  (SELECT `LHS`.`CustomerId` AS `CustomerId`,
          `LHS`.`ReportDt` AS `ReportDt`,
          `RHS`.`n` AS `n`
   FROM `input1` AS `LHS`
   INNER JOIN
     (SELECT `CustomerId`,
             COUNT() AS `n`
      FROM `input1`
      GROUP BY `CustomerId`) AS `RHS` ON (`LHS`.`CustomerId` = `RHS`.`CustomerId`))
WHERE (`n` < 1.0
       OR `ReportDt` > mdy('10/19/2016'))
ORDER BY c1
