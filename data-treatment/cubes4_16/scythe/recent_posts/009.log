[     1.578][MainProcess][INFO] Parsing specification...
[     1.597][MainProcess][WARNING] "aggrs" field is deprecated. Please use "functions"
[     1.598][MainProcess][DEBUG] Reading input files...
[     1.624][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/009.csv: ['int64', 'int64', 'datetime64[ns]', 'string', 'int64']
[     1.630][MainProcess][INFO] Inferred data types for table tests-examples/scythe/recent_posts/tables/009_o.csv: ['int64', 'string', 'int64']
[     1.662][MainProcess][DEBUG] Generating DSL...
[     1.694][MainProcess][INFO] Creating 16 processes
[     1.763][cube-solver-0][DEBUG] Initialising process for 1 lines of code.
[     1.763][cube-solver-1][DEBUG] Initialising process for 1 lines of code.
[     1.763][MainProcess][DEBUG] Increasing generator loc to 2
[     1.764][cube-solver-2][DEBUG] Initialising process for 2 lines of code.
[     1.766][cube-solver-3][DEBUG] Initialising process for 2 lines of code.
[     1.767][cube-solver-4][DEBUG] Initialising process for 2 lines of code.
[     1.771][cube-solver-5][DEBUG] Initialising process for 2 lines of code.
[     1.775][cube-solver-6][DEBUG] Initialising process for 2 lines of code.
[     1.787][cube-solver-9][DEBUG] Initialising process for 2 lines of code.
[     1.788][cube-solver-8][DEBUG] Initialising process for 2 lines of code.
[     1.791][cube-solver-10][DEBUG] Initialising process for 2 lines of code.
[     1.795][cube-solver-11][DEBUG] Initialising process for 2 lines of code.
[     1.796][cube-solver-7][DEBUG] Initialising process for 2 lines of code.
[     1.799][cube-solver-12][DEBUG] Initialising process for 2 lines of code.
[     1.801][cube-solver-13][DEBUG] Initialising process for 2 lines of code.
[     1.811][cube-solver-14][DEBUG] Initialising process for 2 lines of code.
[     1.842][cube-solver-15][DEBUG] Initialising process for 2 lines of code.
[     2.028][cube-solver-1][DEBUG] Solving cube (l0 = mutate(),)
[     2.205][cube-solver-0][DEBUG] Solving cube (l0 = summarise(),)
[     2.410][cube-solver-4][DEBUG] Solving cube (l0 = natural_join3(), l1 = summarise())
[     2.415][cube-solver-4][DEBUG] Solving cube (l0 = summarise(), l1 = semi_join())
[     2.418][cube-solver-5][DEBUG] Solving cube (l0 = natural_join3(), l1 = mutate())
[     2.419][cube-solver-6][DEBUG] Solving cube (l0 = natural_join4(), l1 = summarise())
[     2.422][cube-solver-5][DEBUG] Solving cube (l0 = summarise(), l1 = cross_join())
[     2.424][cube-solver-6][DEBUG] Solving cube (l0 = summarise(), l1 = mutate())
[     2.431][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join3())
[     2.432][cube-solver-10][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join4())
[     2.435][cube-solver-9][DEBUG] Solving cube (l0 = summarise(), l1 = inner_join())
[     2.437][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = summarise())
[     2.440][cube-solver-10][DEBUG] Solving cube (l0 = anti_join(), l1 = mutate())
[     2.440][cube-solver-11][DEBUG] Solving cube (l0 = summarise(), l1 = summarise())
[     2.443][cube-solver-10][DEBUG] Solving cube (l0 = left_join(), l1 = summarise())
[     2.443][cube-solver-11][DEBUG] Solving cube (l0 = left_join(), l1 = mutate())
[     2.443][cube-solver-12][DEBUG] Solving cube (l0 = summarise(), l1 = anti_join())
[     2.448][cube-solver-2][DEBUG] Solving cube (l0 = natural_join(), l1 = summarise())
[     2.453][cube-solver-2][DEBUG] Solving cube (l0 = union(), l1 = summarise())
[     2.453][cube-solver-14][DEBUG] Solving cube (l0 = summarise(), l1 = union())
[     2.473][cube-solver-7][DEBUG] Solving cube (l0 = natural_join4(), l1 = mutate())
[     2.478][cube-solver-7][DEBUG] Solving cube (l0 = union(), l1 = mutate())
[     2.484][cube-solver-13][DEBUG] Solving cube (l0 = summarise(), l1 = left_join())
[     2.507][cube-solver-8][DEBUG] Solving cube (l0 = summarise(), l1 = natural_join())
[     2.544][cube-solver-3][DEBUG] Solving cube (l0 = natural_join(), l1 = mutate())
[     2.548][cube-solver-0][DEBUG] Found solution with cube (l0 = summarise(),)
[     2.550][MainProcess][INFO] Statistics:
[     2.550][MainProcess][INFO] 	Generated cubes: 27
[     2.550][cube-solver-3][DEBUG] Solving cube (l0 = intersect(), l1 = summarise())
[     2.550][MainProcess][INFO] 	Attempted programs: 3
[     2.550][MainProcess][INFO] 		Rejected: 2
[     2.550][MainProcess][INFO] 		Failed: 0
[     2.550][MainProcess][INFO] 	Blacklist clauses: 0
[     2.550][MainProcess][DEBUG] Printing statistics for good programs of size 1
[     2.551][MainProcess][DEBUG] 	0: Counter({'mutate': 66, 'summarise': 25})
[     2.551][MainProcess][DEBUG] Printing statistics for good programs of size 2
[     2.551][MainProcess][DEBUG] 	0: Counter({'summarise': 22, 'left_join': 9, 'union': 7})
[     2.551][MainProcess][DEBUG] 	1: Counter({'mutate': 18, 'summarise': 8, 'semi_join': 6, 'union': 4, 'left_join': 2})
[     2.552][MainProcess][INFO] Solution found: summarise(@param0, n = n(), c2, c4)
[     2.682][cube-solver-6][DEBUG] Found solution with cube (l0 = summarise(), l1 = mutate())
[     2.902][cube-solver-10][DEBUG] Found solution with cube (l0 = left_join(), l1 = summarise())

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input1 <- read_csv("tests-examples/scythe/recent_posts/tables/009.csv", col_types = cols(c1 = col_integer(),c2 = col_integer(),c3 = col_character(),c4 = col_character(),c5 = col_integer()))
input1$c3 <- dmy(input1$c3)
input1 <- copy_to(con, input1)
expected_output <- read_csv("tests-examples/scythe/recent_posts/tables/009_o.csv", col_types = cols(c1 = col_integer(),c2 = col_character(),c3 = col_integer()))

df2 <- input1 %>% group_by(c2, c4) %>% summarise(n = n()) %>% ungroup()
out <- df2 %>% select(c1 = c2, c2 = c4, c3 = n) %>% arrange(c1)


+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT c2 AS c1,
       c4 AS c2,
       n AS c3
FROM
  (SELECT c2,
          c4,
          COUNT() AS n
   FROM input1
   GROUP BY c2,
            c4)
ORDER BY c1
